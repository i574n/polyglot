#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
#endif
type std_path_PathBuf = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
#endif
type std_path_Display = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
module State = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Path")>]
#endif
type std_path_Path = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
#endif
type core_any_Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = unit
  type DataReceivedEventArgs = unit
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : string
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : US0
    | US2_1
and [<Struct>] US3 =
    | US3_0 of f0_0 : int64
    | US3_1
and Mut4 = {mutable l0 : string}
and [<Struct>] US4 =
    | US4_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : std_string_String
    | US5_1
and [<Struct>] US8 =
    | US8_0
    | US8_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : US8
    | US7_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : US7
    | US6_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : Vec<std_string_String>
    | US9_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
    | US10_2
and [<Struct>] US11 =
    | US11_0 of f0_0 : US10
    | US11_1 of f1_0 : US10
    | US11_2 of f2_0 : US10
    | US11_3 of f3_0 : US10
    | US11_4 of f4_0 : US10
and [<Struct>] US12 =
    | US12_0 of f0_0 : string
    | US12_1 of f1_0 : string
and [<Struct>] US13 =
    | US13_0
    | US13_1 of f1_0 : std_string_String
and [<Struct>] US14 =
    | US14_0 of f0_0 : string * f0_1 : US1
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH1
and [<Struct>] US16 =
    | US16_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US16_1 of f1_0 : string
and [<Struct>] US17 =
    | US17_0 of f0_0 : char
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : US1 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US17 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : US1 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : (string [])
    | US22_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US23 =
    | US23_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) * UH3
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : std_string_String
    | US26_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_process_Output
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : int32
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : System.Threading.CancellationToken
    | US32_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US34 =
    | US34_0
    | US34_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : US34
    | US33_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US35_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : int32 * f0_1 : string
    | US36_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US37 =
    | US37_0 of f0_0 : std_collections_HashMap<string, string>
    | US37_1
and [<Struct>] US38 =
    | US38_0 of f0_0 : US1
    | US38_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US39 =
    | US39_0 of f0_0 : std_fs_FileType
    | US39_1 of f1_0 : std_string_String
and [<Struct>] US40 =
    | US40_0
    | US40_1
    | US40_2
and [<Struct>] US41 =
    | US41_0 of f0_0 : async_walkdir_DirEntry
    | US41_1 of f1_0 : std_string_String
and [<Struct>] US42 =
    | US42_0 of f0_0 : string * f0_1 : string
    | US42_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    let v60 : string list = []
    let v61 : string = "Poetry"
    let v62 : string list = v61 :: v60 
    let v65 : string = "Pip"
    let v66 : string list = v65 :: v62 
    let v69 : (string list -> (string [])) = List.toArray
    let v70 : (string []) = v69 v66
    let v73 : string = "$0.to_vec()"
    let v74 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v70 v73 
    let v75 : string = "true; let _result : Vec<_> = v74.into_iter().map(|x| { //"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr () v75 
    let v77 : string = "x"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr () v77 
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "Box::new($0)"
    let v84 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "Box::leak($0)"
    let v86 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let v87 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v88 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : string = "true; $0 }).collect::<Vec<_>>()"
    let v90 : bool = Fable.Core.RustInterop.emitRustExpr v88 v89 
    let v91 : string = "_result"
    let v92 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v94 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let v95 : string = "$0.value_parser($1)"
    let v96 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v94) v95 
    let v97 : string = "clap::Command::arg($0, $1)"
    let v98 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v96) v97 
    let v99 : string = "NAME"
    let v100 : string = "r#\"" + v99 + "\"#"
    let v101 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "VERSION"
    let v103 : string = "r#\"" + v102 + "\"#"
    let v104 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v101; v104|]
    let v106 : unativeint = 1 |> unativeint 
    let v109 : unativeint = 0 |> unativeint 
    let v112 : bool = v109 = v109 
    let v119 : clap_builder_ValueRange =
        if v112 then
            let v115 : string = "clap::builder::ValueRange::new(v106..)"
            let v116 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v115 
            v116
        else
            let v117 : string = "clap::builder::ValueRange::new(v106..v109)"
            let v118 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v117 
            v118
    let v120 : string = "deps"
    let v121 : string = "r#\"" + v120 + "\"#"
    let v122 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : string = "clap::Arg::new($0)"
    let v124 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v122 v123 
    let v125 : string = "$0.short($1)"
    let v126 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v124, 'd') v125 
    let v127 : string = "r#\"" + v120 + "\"#"
    let v128 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v127 
    let v129 : string = "$0.long($1)"
    let v130 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v126, v128) v129 
    let v131 : string = "$0.to_vec()"
    let v132 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v105 v131 
    let v133 : string = "$0.value_names($1)"
    let v134 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v130, v132) v133 
    let v135 : string = "$0.num_args($1)"
    let v136 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v134, v119) v135 
    let v137 : string = "clap::ArgAction::Append"
    let v138 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v137 
    let v139 : string = "$0.action($1)"
    let v140 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v136, v138) v139 
    let v141 : string = "clap::Command::arg($0, $1)"
    let v142 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v98, v140) v141 
    let v143 : string = "clap::Command::subcommand($0, v142)"
    let v144 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v143 
    let v145 : string = "fable"
    let v146 : string = "r#\"" + v145 + "\"#"
    let v147 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v146 
    let v148 : string = "clap::Command::new($0)"
    let v149 : clap_Command = Fable.Core.RustInterop.emitRustExpr v147 v148 
    let v150 : string = "fs-path"
    let v151 : string = "r#\"" + v150 + "\"#"
    let v152 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v151 
    let v153 : string = "clap::Arg::new($0)"
    let v154 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v152 v153 
    let v155 : string = "$0.short($1)"
    let v156 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v154, 'f') v155 
    let v157 : string = "r#\"" + v150 + "\"#"
    let v158 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v157 
    let v159 : string = "$0.long($1)"
    let v160 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v156, v158) v159 
    let v161 : string = "$0.required($1)"
    let v162 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v160, true) v161 
    let v163 : string = "clap::Command::arg($0, $1)"
    let v164 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v149, v162) v163 
    let v165 : string = "r#\"" + v0 + "\"#"
    let v166 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = "clap::Arg::new($0)"
    let v168 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v166 v167 
    let v169 : string = "$0.short($1)"
    let v170 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v168, 'c') v169 
    let v171 : string = "r#\"" + v0 + "\"#"
    let v172 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : string = "$0.long($1)"
    let v174 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v170, v172) v173 
    let v175 : string = "clap::Command::arg($0, $1)"
    let v176 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v164, v174) v175 
    let v177 : string = "clap::Command::subcommand($0, v176)"
    let v178 : clap_Command = Fable.Core.RustInterop.emitRustExpr v144 v177 
    let v179 : string = "rust"
    let v180 : string = "r#\"" + v179 + "\"#"
    let v181 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v180 
    let v182 : string = "clap::Command::new($0)"
    let v183 : clap_Command = Fable.Core.RustInterop.emitRustExpr v181 v182 
    let v184 : string = "r#\"" + v150 + "\"#"
    let v185 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v184 
    let v186 : string = "clap::Arg::new($0)"
    let v187 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v185 v186 
    let v188 : string = "$0.short($1)"
    let v189 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v187, 'f') v188 
    let v190 : string = "r#\"" + v150 + "\"#"
    let v191 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v190 
    let v192 : string = "$0.long($1)"
    let v193 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v189, v191) v192 
    let v194 : string = "$0.required($1)"
    let v195 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v193, true) v194 
    let v196 : string = "clap::Command::arg($0, $1)"
    let v197 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v183, v195) v196 
    let v198 : string = "r#\"" + v99 + "\"#"
    let v199 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v198 
    let v200 : string = "r#\"" + v102 + "\"#"
    let v201 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v200 
    let v202 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v199; v201|]
    let v203 : unativeint = 1 |> unativeint 
    let v206 : unativeint = 0 |> unativeint 
    let v209 : bool = v206 = v206 
    let v216 : clap_builder_ValueRange =
        if v209 then
            let v212 : string = "clap::builder::ValueRange::new(v203..)"
            let v213 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v212 
            v213
        else
            let v214 : string = "clap::builder::ValueRange::new(v203..v206)"
            let v215 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v214 
            v215
    let v217 : string = "r#\"" + v120 + "\"#"
    let v218 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v217 
    let v219 : string = "clap::Arg::new($0)"
    let v220 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v218 v219 
    let v221 : string = "$0.short($1)"
    let v222 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v220, 'd') v221 
    let v223 : string = "r#\"" + v120 + "\"#"
    let v224 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v223 
    let v225 : string = "$0.long($1)"
    let v226 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v222, v224) v225 
    let v227 : string = "$0.to_vec()"
    let v228 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v202 v227 
    let v229 : string = "$0.value_names($1)"
    let v230 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v226, v228) v229 
    let v231 : string = "$0.num_args($1)"
    let v232 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v230, v216) v231 
    let v233 : string = "clap::ArgAction::Append"
    let v234 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v233 
    let v235 : string = "$0.action($1)"
    let v236 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v232, v234) v235 
    let v237 : string = "clap::Command::arg($0, $1)"
    let v238 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v197, v236) v237 
    let v239 : string = "wasm"
    let v240 : string = "r#\"" + v239 + "\"#"
    let v241 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v240 
    let v242 : string = "clap::Arg::new($0)"
    let v243 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v241 v242 
    let v244 : string = "$0.short($1)"
    let v245 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v243, 'w') v244 
    let v246 : string = "r#\"" + v239 + "\"#"
    let v247 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v246 
    let v248 : string = "$0.long($1)"
    let v249 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v245, v247) v248 
    let v250 : string = "clap::ArgAction::SetTrue"
    let v251 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v250 
    let v252 : string = "$0.action($1)"
    let v253 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v249, v251) v252 
    let v254 : string = "clap::Command::arg($0, $1)"
    let v255 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v238, v253) v254 
    let v256 : string = "contract"
    let v257 : string = "r#\"" + v256 + "\"#"
    let v258 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "clap::Arg::new($0)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v258 v259 
    let v261 : string = "$0.short($1)"
    let v262 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, 'c') v261 
    let v263 : string = "r#\"" + v256 + "\"#"
    let v264 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v263 
    let v265 : string = "$0.long($1)"
    let v266 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v262, v264) v265 
    let v267 : string = "clap::ArgAction::SetTrue"
    let v268 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v267 
    let v269 : string = "$0.action($1)"
    let v270 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v266, v268) v269 
    let v271 : string = "clap::Command::arg($0, $1)"
    let v272 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v255, v270) v271 
    let v273 : string = "clap::Command::subcommand($0, v272)"
    let v274 : clap_Command = Fable.Core.RustInterop.emitRustExpr v178 v273 
    let v275 : string = "typescript"
    let v276 : string = "r#\"" + v275 + "\"#"
    let v277 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v276 
    let v278 : string = "clap::Command::new($0)"
    let v279 : clap_Command = Fable.Core.RustInterop.emitRustExpr v277 v278 
    let v280 : string = "r#\"" + v150 + "\"#"
    let v281 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v280 
    let v282 : string = "clap::Arg::new($0)"
    let v283 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v281 v282 
    let v284 : string = "$0.short($1)"
    let v285 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v283, 'f') v284 
    let v286 : string = "r#\"" + v150 + "\"#"
    let v287 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v286 
    let v288 : string = "$0.long($1)"
    let v289 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v285, v287) v288 
    let v290 : string = "$0.required($1)"
    let v291 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v289, true) v290 
    let v292 : string = "clap::Command::arg($0, $1)"
    let v293 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v279, v291) v292 
    let v294 : string = "r#\"" + v99 + "\"#"
    let v295 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v294 
    let v296 : string = "r#\"" + v102 + "\"#"
    let v297 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v296 
    let v298 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v295; v297|]
    let v299 : unativeint = 1 |> unativeint 
    let v302 : unativeint = 0 |> unativeint 
    let v305 : bool = v302 = v302 
    let v312 : clap_builder_ValueRange =
        if v305 then
            let v308 : string = "clap::builder::ValueRange::new(v299..)"
            let v309 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v308 
            v309
        else
            let v310 : string = "clap::builder::ValueRange::new(v299..v302)"
            let v311 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v310 
            v311
    let v313 : string = "r#\"" + v120 + "\"#"
    let v314 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v313 
    let v315 : string = "clap::Arg::new($0)"
    let v316 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v314 v315 
    let v317 : string = "$0.short($1)"
    let v318 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v316, 'd') v317 
    let v319 : string = "r#\"" + v120 + "\"#"
    let v320 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v319 
    let v321 : string = "$0.long($1)"
    let v322 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v318, v320) v321 
    let v323 : string = "$0.to_vec()"
    let v324 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v298 v323 
    let v325 : string = "$0.value_names($1)"
    let v326 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v322, v324) v325 
    let v327 : string = "$0.num_args($1)"
    let v328 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v326, v312) v327 
    let v329 : string = "clap::ArgAction::Append"
    let v330 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v329 
    let v331 : string = "$0.action($1)"
    let v332 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v328, v330) v331 
    let v333 : string = "clap::Command::arg($0, $1)"
    let v334 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v293, v332) v333 
    let v335 : string = "clap::Command::subcommand($0, v334)"
    let v336 : clap_Command = Fable.Core.RustInterop.emitRustExpr v274 v335 
    let v337 : string = "python"
    let v338 : string = "r#\"" + v337 + "\"#"
    let v339 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v338 
    let v340 : string = "clap::Command::new($0)"
    let v341 : clap_Command = Fable.Core.RustInterop.emitRustExpr v339 v340 
    let v342 : string = "r#\"" + v150 + "\"#"
    let v343 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v342 
    let v344 : string = "clap::Arg::new($0)"
    let v345 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v343 v344 
    let v346 : string = "$0.short($1)"
    let v347 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v345, 'f') v346 
    let v348 : string = "r#\"" + v150 + "\"#"
    let v349 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v348 
    let v350 : string = "$0.long($1)"
    let v351 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v347, v349) v350 
    let v352 : string = "$0.required($1)"
    let v353 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v351, true) v352 
    let v354 : string = "clap::Command::arg($0, $1)"
    let v355 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v341, v353) v354 
    let v356 : string = "r#\"" + v99 + "\"#"
    let v357 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v356 
    let v358 : string = "r#\"" + v102 + "\"#"
    let v359 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v358 
    let v360 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v357; v359|]
    let v361 : unativeint = 1 |> unativeint 
    let v364 : unativeint = 0 |> unativeint 
    let v367 : bool = v364 = v364 
    let v374 : clap_builder_ValueRange =
        if v367 then
            let v370 : string = "clap::builder::ValueRange::new(v361..)"
            let v371 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v370 
            v371
        else
            let v372 : string = "clap::builder::ValueRange::new(v361..v364)"
            let v373 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v372 
            v373
    let v375 : string = "r#\"" + v120 + "\"#"
    let v376 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v375 
    let v377 : string = "clap::Arg::new($0)"
    let v378 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v376 v377 
    let v379 : string = "$0.short($1)"
    let v380 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v378, 'd') v379 
    let v381 : string = "r#\"" + v120 + "\"#"
    let v382 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v381 
    let v383 : string = "$0.long($1)"
    let v384 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v380, v382) v383 
    let v385 : string = "$0.to_vec()"
    let v386 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v360 v385 
    let v387 : string = "$0.value_names($1)"
    let v388 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v384, v386) v387 
    let v389 : string = "$0.num_args($1)"
    let v390 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v388, v374) v389 
    let v391 : string = "clap::ArgAction::Append"
    let v392 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v391 
    let v393 : string = "$0.action($1)"
    let v394 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v390, v392) v393 
    let v395 : string = "clap::Command::arg($0, $1)"
    let v396 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v355, v394) v395 
    let v397 : string = "clap::Command::subcommand($0, v396)"
    let v398 : clap_Command = Fable.Core.RustInterop.emitRustExpr v336 v397 
    let v399 : string = "dib"
    let v400 : string = "r#\"" + v399 + "\"#"
    let v401 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v400 
    let v402 : string = "clap::Command::new($0)"
    let v403 : clap_Command = Fable.Core.RustInterop.emitRustExpr v401 v402 
    let v404 : string = "path"
    let v405 : string = "r#\"" + v404 + "\"#"
    let v406 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v405 
    let v407 : string = "clap::Arg::new($0)"
    let v408 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v406 v407 
    let v409 : string = "$0.short($1)"
    let v410 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v408, 'p') v409 
    let v411 : string = "r#\"" + v404 + "\"#"
    let v412 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v411 
    let v413 : string = "$0.long($1)"
    let v414 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v410, v412) v413 
    let v415 : string = "$0.required($1)"
    let v416 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v414, true) v415 
    let v417 : string = "clap::Command::arg($0, $1)"
    let v418 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v403, v416) v417 
    let v419 : string = "u8"
    let v420 : string = "clap::value_parser!(" + v419 + ").into()"
    let v421 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v420 
    let v422 : string = "retries"
    let v423 : string = "r#\"" + v422 + "\"#"
    let v424 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v423 
    let v425 : string = "clap::Arg::new($0)"
    let v426 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v424 v425 
    let v427 : string = "$0.short($1)"
    let v428 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v426, 'r') v427 
    let v429 : string = "r#\"" + v422 + "\"#"
    let v430 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v429 
    let v431 : string = "$0.long($1)"
    let v432 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v428, v430) v431 
    let v433 : string = "$0.value_parser($1)"
    let v434 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v432, v421) v433 
    let v435 : string = "clap::Command::arg($0, $1)"
    let v436 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v418, v434) v435 
    let v437 : string = "working-directory"
    let v438 : string = "r#\"" + v437 + "\"#"
    let v439 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v438 
    let v440 : string = "clap::Arg::new($0)"
    let v441 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v439 v440 
    let v442 : string = "$0.short($1)"
    let v443 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v441, 'w') v442 
    let v444 : string = "r#\"" + v437 + "\"#"
    let v445 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v444 
    let v446 : string = "$0.long($1)"
    let v447 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v443, v445) v446 
    let v448 : string = "clap::Command::arg($0, $1)"
    let v449 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v436, v447) v448 
    let v450 : string = "clap::Command::subcommand($0, v449)"
    let v451 : clap_Command = Fable.Core.RustInterop.emitRustExpr v398 v450 
    v451
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method2 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method4 () : string =
    let v0 : string = ""
    v0
and closure3 (v0 : US1 option ref) (v1 : US1 option) : US1 option ref =
    v0.Value <- v1 
    v0
and closure4 (v0 : string option, v1 : (US1 option -> US1 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : string = x
    let v3 : US1 = US1_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method3 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::env::var(&*$0)"
    let v3 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "true; let _result = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "fable_library_rust::String_::fromString($0)"
    let v9 : string = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_result"
    let v13 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = method4()
    let v15 : string = "$0.unwrap_or($1)"
    let v16 : string = Fable.Core.RustInterop.emitRustExpr struct (v13, v14) v15 
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "std::env::var(&*$0)"
    let v18 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "true; let _result = $0.map(|x| { //"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "x"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = "fable_library_rust::String_::fromString($0)"
    let v24 : string = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "true; $0 })"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "_result"
    let v28 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = method4()
    let v30 : string = "$0.unwrap_or($1)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr struct (v28, v29) v30 
    let _v1 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "std::env::var(&*$0)"
    let v33 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "true; let _result = $0.map(|x| { //"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "x"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "true; $0 })"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "_result"
    let v43 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = method4()
    let v45 : string = "$0.unwrap_or($1)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr struct (v43, v44) v45 
    let _v1 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "process.env[$0] ?? \"\""
    let v48 : string = Fable.Core.JsInterop.emitJsExpr v0 v47 
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = "os"
    let v50 : IOsEnviron = Fable.Core.PyInterop.importAll v49 
    let v51 : string = "v50.environ"
    let v52 : obj = Fable.Core.PyInterop.emitPyExpr () v51 
    let v55 : string = "v52.get($0)"
    let v56 : string = Fable.Core.PyInterop.emitPyExpr v0 v55 
    let mutable _v56 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v59 : (string -> string option) = Option.ofObj
    let v60 : string option = v59 v56
    v60 
    #else
    Some v56 
    #endif
    |> fun x -> _v56 <- Some x
    let v61 : string option = match _v56 with Some x -> x | None -> failwith "optionm'.of_obj / _v56=None"
    let v64 : US1 option = None
    let _v64 = ref v64 
    let v65 : US1 option ref = _v64 
    let v66 : (US1 option -> US1 option ref) = closure3(v65)
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure4(v61, v66)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : US1 option = _v64.Value 
    let v83 : US1 = US1_1
    let v84 : US1 = v72 |> Option.defaultValue v83 
    let v91 : string =
        match v84 with
        | US1_1 -> (* None *)
            let v89 : string = ""
            v89
        | US1_0(v88) -> (* Some *)
            v88
    let _v1 = v91 
    #endif
#else
    let v92 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v93 : string = v92 v0
    let mutable _v93 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v94 : (string -> string option) = Option.ofObj
    let v95 : string option = v94 v93
    v95 
    #else
    Some v93 
    #endif
    |> fun x -> _v93 <- Some x
    let v96 : string option = match _v93 with Some x -> x | None -> failwith "optionm'.of_obj / _v93=None"
    let v99 : US1 option = None
    let _v99 = ref v99 
    let v100 : US1 option ref = _v99 
    let v101 : (US1 option -> US1 option ref) = closure3(v100)
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure4(v96, v101)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v107 : US1 option = _v99.Value 
    let v118 : US1 = US1_1
    let v119 : US1 = v107 |> Option.defaultValue v118 
    let v126 : string =
        match v119 with
        | US1_1 -> (* None *)
            let v124 : string = ""
            v124
        | US1_0(v123) -> (* Some *)
            v123
    let _v1 = v126 
    #endif
    let v127 : string = _v1 
    v127
and method5 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure5 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method2()
    let v3 : string = method3(v2)
    let v4 : bool = "Verbose" = v3
    let v8 : US2 =
        if v4 then
            let v5 : US0 = US0_0
            US2_0(v5)
        else
            US2_1
    let v49 : US2 =
        match v8 with
        | US2_1 -> (* None *)
            let v11 : bool = "Debug" = v3
            let v15 : US2 =
                if v11 then
                    let v12 : US0 = US0_1
                    US2_0(v12)
                else
                    US2_1
            match v15 with
            | US2_1 -> (* None *)
                let v18 : bool = "Info" = v3
                let v22 : US2 =
                    if v18 then
                        let v19 : US0 = US0_2
                        US2_0(v19)
                    else
                        US2_1
                match v22 with
                | US2_1 -> (* None *)
                    let v25 : bool = "Warning" = v3
                    let v29 : US2 =
                        if v25 then
                            let v26 : US0 = US0_3
                            US2_0(v26)
                        else
                            US2_1
                    match v29 with
                    | US2_1 -> (* None *)
                        let v32 : bool = "Critical" = v3
                        let v36 : US2 =
                            if v32 then
                                let v33 : US0 = US0_4
                                US2_0(v33)
                            else
                                US2_1
                        match v36 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v37) -> (* Some *)
                            US2_0(v37)
                    | US2_0(v30) -> (* Some *)
                        US2_0(v30)
                | US2_0(v23) -> (* Some *)
                    US2_0(v23)
            | US2_0(v16) -> (* Some *)
                US2_0(v16)
        | US2_0(v9) -> (* Some *)
            US2_0(v9)
    let v50 : string = method5()
    let v51 : string = method3(v50)
    let v52 : bool = v51 = "True"
    let v62 : US3 =
        if v52 then
            let v53 : System.DateTime = System.DateTime.Now
            let v56 : (System.DateTime -> int64) = _.Ticks
            let v57 : int64 = v56 v53
            US3_0(v57)
        else
            US3_1
    let _v1 = struct (v49, v62) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : US2 = US2_1
    let v64 : US3 = US3_1
    let _v1 = struct (v63, v64) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "AUTOMATION"
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "env!(\"" + v65 + "\")"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "env!(\"" + v65 + "\")"
    let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _v66 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "env!(\"" + v65 + "\")"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _v66 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = null |> unbox<string>
    let _v66 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : string = null |> unbox<string>
    let _v66 = v88 
    #endif
#else
    let v91 : string = null |> unbox<string>
    let _v66 = v91 
    #endif
    let v94 : string = _v66 
    let v99 : string = "True"
    let v100 : bool = v94 <> v99 
    let v109 : US3 =
        if v100 then
            US3_1
        else
            let v104 : string = $"near_sdk::env::block_timestamp()"
            let v105 : uint64 = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : (uint64 -> int64) = int64
            let v107 : int64 = v106 v105
            US3_0(v107)
    let v110 : US2 = US2_1
    let _v1 = struct (v110, v109) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : string = method2()
    let v112 : string = method3(v111)
    let v113 : bool = "Verbose" = v112
    let v117 : US2 =
        if v113 then
            let v114 : US0 = US0_0
            US2_0(v114)
        else
            US2_1
    let v158 : US2 =
        match v117 with
        | US2_1 -> (* None *)
            let v120 : bool = "Debug" = v112
            let v124 : US2 =
                if v120 then
                    let v121 : US0 = US0_1
                    US2_0(v121)
                else
                    US2_1
            match v124 with
            | US2_1 -> (* None *)
                let v127 : bool = "Info" = v112
                let v131 : US2 =
                    if v127 then
                        let v128 : US0 = US0_2
                        US2_0(v128)
                    else
                        US2_1
                match v131 with
                | US2_1 -> (* None *)
                    let v134 : bool = "Warning" = v112
                    let v138 : US2 =
                        if v134 then
                            let v135 : US0 = US0_3
                            US2_0(v135)
                        else
                            US2_1
                    match v138 with
                    | US2_1 -> (* None *)
                        let v141 : bool = "Critical" = v112
                        let v145 : US2 =
                            if v141 then
                                let v142 : US0 = US0_4
                                US2_0(v142)
                            else
                                US2_1
                        match v145 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v146) -> (* Some *)
                            US2_0(v146)
                    | US2_0(v139) -> (* Some *)
                        US2_0(v139)
                | US2_0(v132) -> (* Some *)
                    US2_0(v132)
            | US2_0(v125) -> (* Some *)
                US2_0(v125)
        | US2_0(v118) -> (* Some *)
            US2_0(v118)
    let v159 : string = method5()
    let v160 : string = method3(v159)
    let v161 : bool = v160 = "True"
    let v171 : US3 =
        if v161 then
            let v162 : System.DateTime = System.DateTime.Now
            let v165 : (System.DateTime -> int64) = _.Ticks
            let v166 : int64 = v165 v162
            US3_0(v166)
        else
            US3_1
    let _v1 = struct (v158, v171) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : string = method2()
    let v173 : string = method3(v172)
    let v174 : bool = "Verbose" = v173
    let v178 : US2 =
        if v174 then
            let v175 : US0 = US0_0
            US2_0(v175)
        else
            US2_1
    let v219 : US2 =
        match v178 with
        | US2_1 -> (* None *)
            let v181 : bool = "Debug" = v173
            let v185 : US2 =
                if v181 then
                    let v182 : US0 = US0_1
                    US2_0(v182)
                else
                    US2_1
            match v185 with
            | US2_1 -> (* None *)
                let v188 : bool = "Info" = v173
                let v192 : US2 =
                    if v188 then
                        let v189 : US0 = US0_2
                        US2_0(v189)
                    else
                        US2_1
                match v192 with
                | US2_1 -> (* None *)
                    let v195 : bool = "Warning" = v173
                    let v199 : US2 =
                        if v195 then
                            let v196 : US0 = US0_3
                            US2_0(v196)
                        else
                            US2_1
                    match v199 with
                    | US2_1 -> (* None *)
                        let v202 : bool = "Critical" = v173
                        let v206 : US2 =
                            if v202 then
                                let v203 : US0 = US0_4
                                US2_0(v203)
                            else
                                US2_1
                        match v206 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v207) -> (* Some *)
                            US2_0(v207)
                    | US2_0(v200) -> (* Some *)
                        US2_0(v200)
                | US2_0(v193) -> (* Some *)
                    US2_0(v193)
            | US2_0(v186) -> (* Some *)
                US2_0(v186)
        | US2_0(v179) -> (* Some *)
            US2_0(v179)
    let v220 : string = method5()
    let v221 : string = method3(v220)
    let v222 : bool = v221 = "True"
    let v232 : US3 =
        if v222 then
            let v223 : System.DateTime = System.DateTime.Now
            let v226 : (System.DateTime -> int64) = _.Ticks
            let v227 : int64 = v226 v223
            US3_0(v227)
        else
            US3_1
    let _v1 = struct (v219, v232) 
    #endif
#else
    let v233 : string = method2()
    let v234 : string = method3(v233)
    let v235 : bool = "Verbose" = v234
    let v239 : US2 =
        if v235 then
            let v236 : US0 = US0_0
            US2_0(v236)
        else
            US2_1
    let v280 : US2 =
        match v239 with
        | US2_1 -> (* None *)
            let v242 : bool = "Debug" = v234
            let v246 : US2 =
                if v242 then
                    let v243 : US0 = US0_1
                    US2_0(v243)
                else
                    US2_1
            match v246 with
            | US2_1 -> (* None *)
                let v249 : bool = "Info" = v234
                let v253 : US2 =
                    if v249 then
                        let v250 : US0 = US0_2
                        US2_0(v250)
                    else
                        US2_1
                match v253 with
                | US2_1 -> (* None *)
                    let v256 : bool = "Warning" = v234
                    let v260 : US2 =
                        if v256 then
                            let v257 : US0 = US0_3
                            US2_0(v257)
                        else
                            US2_1
                    match v260 with
                    | US2_1 -> (* None *)
                        let v263 : bool = "Critical" = v234
                        let v267 : US2 =
                            if v263 then
                                let v264 : US0 = US0_4
                                US2_0(v264)
                            else
                                US2_1
                        match v267 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v268) -> (* Some *)
                            US2_0(v268)
                    | US2_0(v261) -> (* Some *)
                        US2_0(v261)
                | US2_0(v254) -> (* Some *)
                    US2_0(v254)
            | US2_0(v247) -> (* Some *)
                US2_0(v247)
        | US2_0(v240) -> (* Some *)
            US2_0(v240)
    let v281 : string = method5()
    let v282 : string = method3(v281)
    let v283 : bool = v282 = "True"
    let v293 : US3 =
        if v283 then
            let v284 : System.DateTime = System.DateTime.Now
            let v287 : (System.DateTime -> int64) = _.Ticks
            let v288 : int64 = v287 v284
            US3_0(v288)
        else
            US3_1
    let _v1 = struct (v280, v293) 
    #endif
    let struct (v294 : US2, v295 : US3) = _v1 
    let v359 : Mut2 = {l0 = true} : Mut2
    let v360 : Mut0 = {l0 = 0L} : Mut0
    let v363 : US0 =
        match v294 with
        | US2_1 -> (* None *)
            v0
        | US2_0(v361) -> (* Some *)
            v361
    let v364 : Mut3 = {l0 = v363} : Mut3
    let v365 : (string -> unit) = closure5()
    let v366 : Mut1 = {l0 = v365} : Mut1
    let v373 : int64 option =
        match v295 with
        | US3_1 -> (* None *)
            let v371 : int64 option = None
            v371
        | US3_0(v367) -> (* Some *)
            let v368 : int64 option = Some v367 
            v368
    struct (v360, v366, v359, v364, v373)
and closure2 () () : unit =
    let v0 : bool = State.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : int64 option) = method1(v1)
        let v7 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2, v3, v4, v5, v6) 
        State.trace_state <- v7 
        ()
and closure7 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure8 (v0 : US3 option ref) (v1 : US3 option) : US3 option ref =
    v0.Value <- v1 
    v0
and closure9 (v0 : int64 option, v1 : (US3 option -> US3 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : int64 = x
    let v3 : US3 = US3_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method6 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method7 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method9 () : string =
    let v0 : string = ""
    v0
and closure10 (v0 : Mut4, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and closure11 () () : string =
    let v0 : string = $"spiral_builder.main"
    v0
and closure13 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure12 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure13(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and closure6 (v0 : (string [])) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 1 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Debug"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_blue"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_blue"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_blue"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[94m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[94m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[94m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "args"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"%A{v0}"
        let v657 : string = $"{v654}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure10(v626, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = " }"
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v626, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = v626.l0
        let v675 : (unit -> string) = closure11()
        let v676 : string = $"{v483} {v618} #{v624} %s{v675 ()} / {v674}"
        let v679 : char list = []
        let v680 : (char list -> (char [])) = List.toArray
        let v681 : (char []) = v680 v679
        let v684 : string = v676.TrimStart v681 
        let v702 : char list = []
        let v703 : char list = '/' :: v702 
        let v706 : char list = ' ' :: v703 
        let v709 : (char list -> (char [])) = List.toArray
        let v710 : (char []) = v709 v706
        let v713 : string = v684.TrimEnd v710 
        let v731 : (string -> unit) = closure12()
        let v732 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v733 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v733 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v734 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v734 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v735 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v735 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v731 v713
        let _v732 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v731 v713
        let _v732 = () 
        #endif
#else
        v731 v713
        let _v732 = () 
        #endif
        _v732 
        let v736 : (string -> unit) = v17.l0
        v736 v713
and closure14 () (v0 : Ref<Str>) : std_string_String =
    let v1 : string = "String::from($0)"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure15 (v0 : US4 option ref) (v1 : US4 option) : US4 option ref =
    v0.Value <- v1 
    v0
and closure16 (v0 : struct (std_string_String * clap_ArgMatches) option, v1 : (US4 option -> US4 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v2 : std_string_String, v3 : clap_ArgMatches) = x
    let v4 : US4 = US4_0(v2, v3)
    v4 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method11 () : string =
    let v0 : string = "py-path"
    v0
and closure17 (v0 : US5 option ref) (v1 : US5 option) : US5 option ref =
    v0.Value <- v1 
    v0
and closure18 (v0 : std_string_String option, v1 : (US5 option -> US5 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_string_String = x
    let v3 : US5 = US5_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method12 () : string =
    let v0 : string = "env"
    v0
and method13 () : string =
    let v0 : string = "deps"
    v0
and closure19 (v0 : US9 option ref) (v1 : US9 option) : US9 option ref =
    v0.Value <- v1 
    v0
and closure20 (v0 : Vec<std_string_String> option, v1 : (US9 option -> US9 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : Vec<std_string_String> = x
    let v3 : US9 = US9_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method14 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method17 (v0 : string) : string =
    v0
and method16 (v0 : string, v1 : string) : struct (string * string) =
    let v2 : string = method17(v0)
    struct (v1, v2)
and method15 (v0 : string, v1 : string) : string =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "String::from($0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "std::path::PathBuf::from($0)"
    let v8 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v9 
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "$0.join($1)"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v8, v12) v13 
    let v15 : string = "$0.display()"
    let v16 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : string = "format!(\"{}\", $0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v18 
    let _v17 = v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = "format!(\"{}\", $0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v20 
    let _v17 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : string = "format!(\"{}\", $0)"
    let v23 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v22 
    let _v17 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v27 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v30 
    #endif
    let v33 : std_string_String = _v17 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v33 v38 
    let _v2 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : US10 = US10_1
    let v41 : US11 = US11_2(v40)
    let v42 : string = $"file_system.(</>) / target: {v41} / a: {v0} / b: {v1}"
    let v43 : string = failwith<string> v42
    let _v2 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = null |> unbox<string>
    let _v2 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "path"
    let v48 : IPathJoin = Fable.Core.JsInterop.importAll v47 
    let struct (v49 : string, v50 : string) = method16(v1, v0)
    let v51 : string = "v48.join($0, $1)"
    let v52 : string = Fable.Core.JsInterop.emitJsExpr struct (v49, v50) v51 
    let _v2 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : US10 = US10_0
    let v54 : US11 = US11_4(v53)
    let v55 : string = $"file_system.(</>) / target: {v54} / a: {v0} / b: {v1}"
    let v56 : string = failwith<string> v55
    let _v2 = v56 
    #endif
#else
    let v57 : string = System.IO.Path.Combine (v0, v1)
    let _v2 = v57 
    #endif
    let v58 : string = _v2 
    v58
and method19 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v15 : bool =
        if v9 then
            true
        else
            let v10 : string = "$0.is_dir()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            if v11 then
                true
            else
                let v12 : string = "$0.is_symlink()"
                let v13 : bool = Fable.Core.RustInterop.emitRustExpr v7 v12 
                v13
    let _v1 = v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : bool = null |> unbox<bool>
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : bool = null |> unbox<bool>
    let _v1 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22 : string = "fs"
    let v23 : IFsExistsSync = Fable.Core.JsInterop.importAll v22 
    let v24 : string = "$0.existsSync($1)"
    let v25 : bool = Fable.Core.JsInterop.emitJsExpr struct (v23, v0) v24 
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : bool = null |> unbox<bool>
    let _v1 = v26 
    #endif
#else
    let v29 : (string -> bool) = System.IO.Directory.Exists
    let v30 : bool = v29 v0
    let _v1 = v30 
    #endif
    let v31 : bool = _v1 
    v31
and method21 (v0 : string) : string option =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0?"
    let v11 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v24 
    #endif
#else
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v27 
    #endif
    let v30 : std_string_String = _v14 
    let v35 : string = "fable_library_rust::String_::fromString($0)"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr v30 v35 
    let v37 : US1 = US1_0(v36)
    let _v1 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : US1 = null |> unbox<US1>
    let _v1 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : US1 = null |> unbox<US1>
    let _v1 = v41 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : string = "path"
    let v45 : IPathDirname = Fable.Core.JsInterop.importAll v44 
    let v46 : string = "v45.dirname($0)"
    let v47 : string = Fable.Core.JsInterop.emitJsExpr v0 v46 
    let v48 : US1 = US1_0(v47)
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : US1 = null |> unbox<US1>
    let _v1 = v49 
    #endif
#else
    let v52 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.GetParent
    let v53 : System.IO.DirectoryInfo = v52 v0
    let v54 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let v57 : bool = v53 = v54 
    let v84 : US1 =
        if v57 then
            US1_1
        else
            let v61 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v62 : string = null |> unbox<string>
            let _v61 = v62 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v65 : string = null |> unbox<string>
            let _v61 = v65 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v68 : string = null |> unbox<string>
            let _v61 = v68 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : string = null |> unbox<string>
            let _v61 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : string = null |> unbox<string>
            let _v61 = v74 
            #endif
#else
            let v77 : string = v53.FullName
            let _v61 = v77 
            #endif
            let v78 : string = _v61 
            US1_0(v78)
    let _v1 = v84 
    #endif
    let v85 : US1 = _v1 
    match v85 with
    | US1_1 -> (* None *)
        let v94 : string option = None
        v94
    | US1_0(v90) -> (* Some *)
        let v91 : string option = Some v90 
        v91
and closure21 () (v0 : string) : string option =
    method21(v0)
and method20 () : (string -> string option) =
    closure21()
and method22 (v0 : string, v1 : string, v2 : string) : US12 =
    let v3 : string = method15(v2, v0)
    let v4 : bool = method19(v3)
    if v4 then
        US12_0(v2)
    else
        let v6 : (string -> string option) = method20()
        let v7 : string option = v6 v2
        let v8 : US1 option = None
        let _v8 = ref v8 
        let v9 : US1 option ref = _v8 
        let v10 : (US1 option -> US1 option ref) = closure3(v9)
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure4(v7, v10)
        let v13 : unit = (fun () -> v12 (); v11) ()
        let v16 : US1 option = _v8.Value 
        let v27 : US1 = US1_1
        let v28 : US1 = v16 |> Option.defaultValue v27 
        match v28 with
        | US1_1 -> (* None *)
            let v34 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v2}')"""
            US12_1(v34)
        | US1_0(v32) -> (* Some *)
            method22(v0, v1, v32)
and method18 (v0 : string, v1 : string) : US12 =
    let v2 : string = method15(v1, v0)
    let v3 : bool = method19(v2)
    if v3 then
        US12_0(v1)
    else
        let v5 : (string -> string option) = method20()
        let v6 : string option = v5 v1
        let v7 : US1 option = None
        let _v7 = ref v7 
        let v8 : US1 option ref = _v7 
        let v9 : (US1 option -> US1 option ref) = closure3(v8)
        let v10 : unit = ()
        let v11 : (unit -> unit) = closure4(v6, v9)
        let v12 : unit = (fun () -> v11 (); v10) ()
        let v15 : US1 option = _v7.Value 
        let v26 : US1 = US1_1
        let v27 : US1 = v15 |> Option.defaultValue v26 
        match v27 with
        | US1_1 -> (* None *)
            let v33 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v1}')"""
            US12_1(v33)
        | US1_0(v31) -> (* Some *)
            method22(v0, v1, v31)
and closure23 () () : string =
    let v0 : string = "file_system.get_workspace_root"
    v0
and closure22 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Warning"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_yellow"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_yellow"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_yellow"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[93m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[93m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[93m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "error"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"{v0}"
        let v657 : unit = ()
        let v658 : (unit -> unit) = closure10(v626, v654)
        let v659 : unit = (fun () -> v658 (); v657) ()
        let v662 : string = " }"
        let v663 : string = $"{v662}"
        let v666 : unit = ()
        let v667 : (unit -> unit) = closure10(v626, v663)
        let v668 : unit = (fun () -> v667 (); v666) ()
        let v671 : string = v626.l0
        let v672 : (unit -> string) = closure23()
        let v673 : string = $"{v483} {v618} #{v624} %s{v672 ()} / {v671}"
        let v676 : char list = []
        let v677 : (char list -> (char [])) = List.toArray
        let v678 : (char []) = v677 v676
        let v681 : string = v673.TrimStart v678 
        let v699 : char list = []
        let v700 : char list = '/' :: v699 
        let v703 : char list = ' ' :: v700 
        let v706 : (char list -> (char [])) = List.toArray
        let v707 : (char []) = v706 v703
        let v710 : string = v681.TrimEnd v707 
        let v728 : (string -> unit) = closure12()
        let v729 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v730 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v730 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v731 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v731 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v732 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v732 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v728 v710
        let _v729 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v728 v710
        let _v729 = () 
        #endif
#else
        v728 v710
        let _v729 = () 
        #endif
        _v729 
        let v733 : (string -> unit) = v17.l0
        v733 v710
and method23 () : string =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::env::current_dir()"
    let v2 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "$0.unwrap()"
    let v4 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "$0.display()"
    let v6 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v8 
    let _v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v10 
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v12 
    let _v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v17 
    #endif
#else
    let v20 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v20 
    #endif
    let v23 : std_string_String = _v7 
    let v28 : string = "fable_library_rust::String_::fromString($0)"
    let v29 : string = Fable.Core.RustInterop.emitRustExpr v23 v28 
    let _v0 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = null |> unbox<string>
    let _v0 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = null |> unbox<string>
    let _v0 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : string = null |> unbox<string>
    let _v0 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : string = null |> unbox<string>
    let _v0 = v39 
    #endif
#else
    let v42 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v43 : string = v42 ()
    let _v0 = v43 
    #endif
    let v44 : string = _v0 
    v44
and method24 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent()"
    let v9 : Ref<std_path_Path> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_path_Path> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v24 
    #endif
#else
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v27 
    #endif
    let v30 : std_string_String = _v14 
    let v35 : string = "fable_library_rust::String_::fromString($0)"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr v30 v35 
    let _v1 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : (string -> string) = System.IO.Path.GetDirectoryName
    let v38 : string = v37 v0
    let _v1 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = null |> unbox<string>
    let _v1 = v39 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : (string -> string) = System.IO.Path.GetDirectoryName
    let v43 : string = v42 v0
    let _v1 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : (string -> string) = System.IO.Path.GetDirectoryName
    let v45 : string = v44 v0
    let _v1 = v45 
    #endif
#else
    let v46 : (string -> string) = System.IO.Path.GetDirectoryName
    let v47 : string = v46 v0
    let _v1 = v47 
    #endif
    let v48 : string = _v1 
    v48
and method27 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v12 : bool =
        if v9 then
            let v10 : string = "$0.is_file()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            v11
        else
            false
    let _v1 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : bool = null |> unbox<bool>
    let _v1 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = "fs"
    let v20 : IFsExistsSync = Fable.Core.JsInterop.importAll v19 
    let v21 : string = "$0.existsSync($1)"
    let v22 : bool = Fable.Core.JsInterop.emitJsExpr struct (v20, v0) v21 
    let _v1 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _v1 = v23 
    #endif
#else
    let v26 : (string -> bool) = System.IO.File.Exists
    let v27 : bool = v26 v0
    let _v1 = v27 
    #endif
    let v28 : bool = _v1 
    v28
and method26 (v0 : string, v1 : string) : bool =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method27(v0)
    let v4 : bool = v3 = false
    let v57 : bool =
        if v4 then
            false
        else
            let v5 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v6 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v7 : string = "std::fs::read(&*$0)"
            let v8 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
            let v9 : string = "$0.unwrap()"
            let v10 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v9 
            let _v6 = v10 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v11 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v11 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v14 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v14 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v17 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v17 
            #endif
#if FABLE_COMPILER_PYTHON
            let v20 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v20 
            #endif
#else
            let v23 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v24 : string = "$0.to_vec()"
            let v25 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v23 v24 
            let _v6 = v25 
            #endif
            let v26 : Vec<uint8> = _v6 
            let v31 : Vec<uint8> = method14(v26)
            let v32 : string = "std::string::String::from_utf8($0)"
            let v33 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "$0.unwrap()"
            let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v34 
            let v36 : string = "fable_library_rust::String_::fromString($0)"
            let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let _v5 = v37 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v38 : string = null |> unbox<string>
            let _v5 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : string = null |> unbox<string>
            let _v5 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v44 : string = null |> unbox<string>
            let _v5 = v44 
            #endif
#if FABLE_COMPILER_PYTHON
            let v47 : string = null |> unbox<string>
            let _v5 = v47 
            #endif
#else
            let v50 : string = v0 |> System.IO.File.ReadAllText
            let _v5 = v50 
            #endif
            let v51 : string = _v5 
            let v56 : bool = v1 = v51
            v56
    let _v2 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : bool = null |> unbox<bool>
    let _v2 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : bool = null |> unbox<bool>
    let _v2 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : bool = null |> unbox<bool>
    let _v2 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : bool = null |> unbox<bool>
    let _v2 = v67 
    #endif
#else
    let v70 : bool = null |> unbox<bool>
    let _v2 = v70 
    #endif
    let v73 : bool = _v2 
    v73
and method29 (v0 : string) : string =
    v0
and closure24 () (v0 : std_io_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method30 () : (std_io_Error -> std_string_String) =
    closure24()
and closure25 () () : US13 =
    US13_0
and closure26 () (v0 : std_string_String) : US13 =
    US13_1(v0)
and closure28 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure27 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Critical"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_red"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[91m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[91m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[91m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method9()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure10(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "dir"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure10(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure10(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v0}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure10(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure10(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "error"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure10(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v690 : string = "format!(\"{:#?}\", $0)"
        let v691 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v690 
        let v692 : string = "fable_library_rust::String_::fromString($0)"
        let v693 : string = Fable.Core.RustInterop.emitRustExpr v691 v692 
        let _v689 = v693 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v694 : string = "format!(\"{:#?}\", $0)"
        let v695 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v694 
        let v696 : string = "fable_library_rust::String_::fromString($0)"
        let v697 : string = Fable.Core.RustInterop.emitRustExpr v695 v696 
        let _v689 = v697 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v698 : string = "format!(\"{:#?}\", $0)"
        let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v698 
        let v700 : string = "fable_library_rust::String_::fromString($0)"
        let v701 : string = Fable.Core.RustInterop.emitRustExpr v699 v700 
        let _v689 = v701 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v702 : string = $"%A{v1}"
        let _v689 = v702 
        #endif
#if FABLE_COMPILER_PYTHON
        let v705 : string = $"%A{v1}"
        let _v689 = v705 
        #endif
#else
        let v708 : string = $"%A{v1}"
        let _v689 = v708 
        #endif
        let v711 : string = _v689 
        let v716 : string = $"{v711}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure10(v627, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = " }"
        let v725 : string = $"{v724}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure10(v627, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = v627.l0
        let v734 : (unit -> string) = closure28()
        let v735 : string = $"{v484} {v619} #{v625} %s{v734 ()} / {v733}"
        let v738 : char list = []
        let v739 : (char list -> (char [])) = List.toArray
        let v740 : (char []) = v739 v738
        let v743 : string = v735.TrimStart v740 
        let v761 : char list = []
        let v762 : char list = '/' :: v761 
        let v765 : char list = ' ' :: v762 
        let v768 : (char list -> (char [])) = List.toArray
        let v769 : (char []) = v768 v765
        let v772 : string = v743.TrimEnd v769 
        let v790 : (string -> unit) = closure12()
        let v791 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v792 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v792 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v793 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v793 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v794 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v794 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v790 v772
        let _v791 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v790 v772
        let _v791 = () 
        #endif
#else
        v790 v772
        let _v791 = () 
        #endif
        _v791 
        let v795 : (string -> unit) = v18.l0
        v795 v772
and closure30 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure29 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "dir"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"{v0}"
        let v657 : unit = ()
        let v658 : (unit -> unit) = closure10(v626, v654)
        let v659 : unit = (fun () -> v658 (); v657) ()
        let v662 : string = " }"
        let v663 : string = $"{v662}"
        let v666 : unit = ()
        let v667 : (unit -> unit) = closure10(v626, v663)
        let v668 : unit = (fun () -> v667 (); v666) ()
        let v671 : string = v626.l0
        let v672 : (unit -> string) = closure30()
        let v673 : string = $"{v483} {v618} #{v624} %s{v672 ()} / {v671}"
        let v676 : char list = []
        let v677 : (char list -> (char [])) = List.toArray
        let v678 : (char []) = v677 v676
        let v681 : string = v673.TrimStart v678 
        let v699 : char list = []
        let v700 : char list = '/' :: v699 
        let v703 : char list = ' ' :: v700 
        let v706 : (char list -> (char [])) = List.toArray
        let v707 : (char []) = v706 v703
        let v710 : string = v681.TrimEnd v707 
        let v728 : (string -> unit) = closure12()
        let v729 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v730 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v730 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v731 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v731 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v732 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v732 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v728 v710
        let _v729 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v728 v710
        let _v729 = () 
        #endif
#else
        v728 v710
        let _v729 = () 
        #endif
        _v729 
        let v733 : (string -> unit) = v17.l0
        v733 v710
and method33 (v0 : string) : string =
    v0
and method32 (v0 : bool, v1 : string) : unit =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method33(v1)
    let v4 : bool = method19(v3)
    if v4 then
        if v0 then
            let v5 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v5 
            ()
        else
            let v6 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v6 
            ()
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let _v2 = () 
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    let _v2 = () 
    #endif
    _v2 
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method32(v1, v0)
and method31 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method34 (v0 : string) : (unit -> unit) =
    closure31(v0)
and closure33 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure32 (v0 : string, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Debug"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_blue"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[94m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[94m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[94m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method9()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure10(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "dir"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure10(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure10(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v0}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure10(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure10(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "result"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure10(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = $"{v1}"
        let v692 : unit = ()
        let v693 : (unit -> unit) = closure10(v627, v689)
        let v694 : unit = (fun () -> v693 (); v692) ()
        let v697 : string = " }"
        let v698 : string = $"{v697}"
        let v701 : unit = ()
        let v702 : (unit -> unit) = closure10(v627, v698)
        let v703 : unit = (fun () -> v702 (); v701) ()
        let v706 : string = v627.l0
        let v707 : (unit -> string) = closure33()
        let v708 : string = $"{v484} {v619} #{v625} %s{v707 ()} / {v706}"
        let v711 : char list = []
        let v712 : (char list -> (char [])) = List.toArray
        let v713 : (char []) = v712 v711
        let v716 : string = v708.TrimStart v713 
        let v734 : char list = []
        let v735 : char list = '/' :: v734 
        let v738 : char list = ' ' :: v735 
        let v741 : (char list -> (char [])) = List.toArray
        let v742 : (char []) = v741 v738
        let v745 : string = v716.TrimEnd v742 
        let v763 : (string -> unit) = closure12()
        let v764 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v765 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v765 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v766 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v767 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v767 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v763 v745
        let _v764 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v763 v745
        let _v764 = () 
        #endif
#else
        v763 v745
        let _v764 = () 
        #endif
        _v764 
        let v768 : (string -> unit) = v18.l0
        v768 v745
and method37 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.file_name()"
    let v9 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.to_os_string()"
    let v13 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.to_str()"
    let v15 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "$0.unwrap()"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "String::from($0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "fable_library_rust::String_::fromString($0)"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let _v1 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : US10 = US10_1
    let v23 : US11 = US11_2(v22)
    let v24 : string = $"file_system.get_file_name / target: {v23} / path: {v0}"
    let v25 : string = failwith<string> v24
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : string = null |> unbox<string>
    let _v1 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : US10 = US10_0
    let v30 : US11 = US11_3(v29)
    let v31 : string = $"file_system.get_file_name / target: {v30} / path: {v0}"
    let v32 : string = failwith<string> v31
    let _v1 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v33 : US10 = US10_0
    let v34 : US11 = US11_4(v33)
    let v35 : string = $"file_system.get_file_name / target: {v34} / path: {v0}"
    let v36 : string = failwith<string> v35
    let _v1 = v36 
    #endif
#else
    let v37 : (string -> string) = System.IO.Path.GetFileName
    let v38 : string = v37 v0
    let _v1 = v38 
    #endif
    let v39 : string = _v1 
    v39
and closure36 () () : string =
    let v0 : string = "file_system.delete_directory_async"
    v0
and closure35 (v0 : string, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Debug"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_blue"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[94m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[94m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[94m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method37(v0)
        let v627 : string = method9()
        let v628 : Mut4 = {l0 = v627} : Mut4
        let v629 : string = "{ "
        let v630 : string = $"{v629}"
        let v633 : unit = ()
        let v634 : (unit -> unit) = closure10(v628, v630)
        let v635 : unit = (fun () -> v634 (); v633) ()
        let v638 : string = "ex"
        let v639 : string = $"{v638}"
        let v642 : unit = ()
        let v643 : (unit -> unit) = closure10(v628, v639)
        let v644 : unit = (fun () -> v643 (); v642) ()
        let v647 : string = " = "
        let v648 : string = $"{v647}"
        let v651 : unit = ()
        let v652 : (unit -> unit) = closure10(v628, v648)
        let v653 : unit = (fun () -> v652 (); v651) ()
        let v656 : string = $"{v1}"
        let v659 : unit = ()
        let v660 : (unit -> unit) = closure10(v628, v656)
        let v661 : unit = (fun () -> v660 (); v659) ()
        let v664 : string = "; "
        let v665 : string = $"{v664}"
        let v668 : unit = ()
        let v669 : (unit -> unit) = closure10(v628, v665)
        let v670 : unit = (fun () -> v669 (); v668) ()
        let v673 : string = "path"
        let v674 : string = $"{v673}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure10(v628, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = $"{v647}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v628, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = $"{v626}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v628, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = " }"
        let v699 : string = $"{v698}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v628, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = v628.l0
        let v708 : (unit -> string) = closure36()
        let v709 : string = $"{v484} {v619} #{v625} %s{v708 ()} / {v707}"
        let v712 : char list = []
        let v713 : (char list -> (char [])) = List.toArray
        let v714 : (char []) = v713 v712
        let v717 : string = v709.TrimStart v714 
        let v735 : char list = []
        let v736 : char list = '/' :: v735 
        let v739 : char list = ' ' :: v736 
        let v742 : (char list -> (char [])) = List.toArray
        let v743 : (char []) = v742 v739
        let v746 : string = v717.TrimEnd v743 
        let v764 : (string -> unit) = closure12()
        let v765 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v766 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v767 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v767 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v768 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v768 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v764 v746
        let _v765 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v764 v746
        let _v765 = () 
        #endif
#else
        v764 v746
        let _v765 = () 
        #endif
        _v765 
        let v769 : (string -> unit) = v18.l0
        v769 v746
and method36 (v0 : string, v1 : int64) : Async<int64> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v15 
    #endif
#else
    let v18 : Async<int64> option = None
    let mutable _v18 = v18 
    async {
    try
    let v19 : bool = true
    method32(v19, v0)
    return v1 
    with ex ->
    let v20 : exn = ex
    let v21 : int64 = v1 % 100L
    let v22 : bool = v21 = 0L
    if v22 then
        let v23 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v24 : string = $"%A{v20}"
        let _v23 = v24 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v27 : string = $"%A{v20}"
        let _v23 = v27 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v30 : string = $"%A{v20}"
        let _v23 = v30 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v33 : string = $"%A{v20}"
        let _v23 = v33 
        #endif
#if FABLE_COMPILER_PYTHON
        let v36 : string = $"%A{v20}"
        let _v23 = v36 
        #endif
#else
        let v39 : string = $"{v20.GetType ()}: {v20.Message}"
        let _v23 = v39 
        #endif
        let v40 : string = _v23 
        let v45 : unit = ()
        let v46 : (unit -> unit) = closure35(v0, v40)
        let v47 : unit = (fun () -> v46 (); v45) ()
        ()
    let v816 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v817 : Async<unit> = null |> unbox<Async<unit>>
    let _v816 = v817 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v820 : Async<unit> = null |> unbox<Async<unit>>
    let _v816 = v820 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v823 : Async<unit> = null |> unbox<Async<unit>>
    let _v816 = v823 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v826 : Async<unit> = null |> unbox<Async<unit>>
    let _v816 = v826 
    #endif
#if FABLE_COMPILER_PYTHON
    let v829 : Async<unit> = null |> unbox<Async<unit>>
    let _v816 = v829 
    #endif
#else
    let v832 : (int32 -> Async<unit>) = Async.Sleep
    let v833 : Async<unit> = v832 10
    let _v816 = v833 
    #endif
    let v834 : Async<unit> = _v816 
    do! v834 
    let v839 : int64 = v1 + 1L
    let v840 : Async<int64> = method36(v0, v839)
    return! v840 
    (*
    let v841 : int64 = *)
    }
    |> fun x -> _v18 <- Some x
    let v842 : Async<int64> = match _v18 with Some x -> x | None -> failwith "async.new_async_unit / _v18=None"
    let _v2 = v842 
    #endif
    let v843 : Async<int64> = _v2 
    v843
and closure34 (v0 : string) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v14 
    #endif
#else
    let v17 : int64 = 0L
    let v18 : Async<int64> = method36(v0, v17)
    let _v1 = v18 
    #endif
    let v19 : Async<int64> = _v1 
    let v24 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v28 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v37 
    #endif
#else
    let v40 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v41 : Async<unit> = v40 v19
    let _v24 = v41 
    #endif
    let v42 : Async<unit> = _v24 
    let v47 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v47 = () 
    #endif
#else
    let v48 : (Async<unit> -> unit) = Async.RunSynchronously
    v48 v42
    let _v47 = () 
    #endif
    _v47 
    ()
and method35 (v0 : string) : (unit -> unit) =
    closure34(v0)
and method38 (v0 : string) : (unit -> unit) =
    closure34(v0)
and method28 (v0 : string) : System.IDisposable =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method29(v0)
    let v3 : string = "std::fs::create_dir_all(&*$0)"
    let v4 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (std_io_Error -> std_string_String) = method30()
    let v6 : string = "$0.map_err(|x| $1(x))"
    let v7 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v6 
    let v8 : (unit -> US13) = closure25()
    let v9 : (std_string_String -> US13) = closure26()
    let v10 : US13 = match v7 with Ok () -> v8 () | Error x -> v9 x
    match v10 with
    | US13_1(v747) -> (* Error *)
        let v748 : unit = ()
        let v749 : (unit -> unit) = closure27(v2, v747)
        let v750 : unit = (fun () -> v749 (); v748) ()
        ()
    | US13_0 -> (* Ok *)
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure29(v2)
        let v13 : unit = (fun () -> v12 (); v11) ()
        ()
    let v1545 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1546 : (unit -> unit) = method31(v2)
    let v1547 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1546 "$0()" )
    let _v1545 = v1547 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1548 : (unit -> unit) = method31(v2)
    let v1549 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1548 "$0()" )
    let _v1545 = v1549 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1550 : (unit -> unit) = method31(v2)
    let v1551 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1550 "$0()" )
    let _v1545 = v1551 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1552 : (unit -> unit) = method34(v2)
    let v1553 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1552 () }
    let _v1545 = v1553 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1554 : (unit -> unit) = method34(v2)
    let v1555 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1554 () }
    let _v1545 = v1555 
    #endif
#else
    let v1556 : (unit -> unit) = method34(v2)
    let v1557 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1556 () }
    let _v1545 = v1557 
    #endif
    let v1558 : System.IDisposable = _v1545 
    let _v1 = v1558 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1562 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v1562 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1565 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v1565 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1568 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1569 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1568 = v1569 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1572 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1568 = v1572 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1575 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1568 = v1575 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1578 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1568 = v1578 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1581 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1568 = v1581 
    #endif
#else
    let v1584 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v1585 : System.IO.DirectoryInfo = v1584 v0
    let _v1568 = v1585 
    #endif
    let v1586 : System.IO.DirectoryInfo = _v1568 
    let v1591 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1592 : bool = null |> unbox<bool>
    let _v1591 = v1592 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1595 : bool = null |> unbox<bool>
    let _v1591 = v1595 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1598 : bool = null |> unbox<bool>
    let _v1591 = v1598 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1601 : bool = null |> unbox<bool>
    let _v1591 = v1601 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1604 : bool = null |> unbox<bool>
    let _v1591 = v1604 
    #endif
#else
    let v1607 : bool = v1586.Exists
    let _v1591 = v1607 
    #endif
    let v1608 : bool = _v1591 
    let v1613 : bool = v1608 = false
    if v1613 then
        let v1614 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1615 : System.DateTime = null |> unbox<System.DateTime>
        let _v1614 = v1615 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1618 : System.DateTime = null |> unbox<System.DateTime>
        let _v1614 = v1618 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1621 : System.DateTime = null |> unbox<System.DateTime>
        let _v1614 = v1621 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1624 : System.DateTime = null |> unbox<System.DateTime>
        let _v1614 = v1624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1627 : System.DateTime = null |> unbox<System.DateTime>
        let _v1614 = v1627 
        #endif
#else
        let v1630 : System.DateTime = v1586.CreationTime
        let _v1614 = v1630 
        #endif
        let v1631 : System.DateTime = _v1614 
        let v1636 : obj = {| Exists = v1608; CreationTime = v1631 |}
        let v1637 : string = $"%A{v1636}"
        let v1640 : unit = ()
        let v1641 : (unit -> unit) = closure32(v0, v1637)
        let v1642 : unit = (fun () -> v1641 (); v1640) ()
        ()
    let v2410 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2411 : (unit -> unit) = method35(v0)
    let v2412 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2411 "$0()" )
    let _v2410 = v2412 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2413 : (unit -> unit) = method35(v0)
    let v2414 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2413 "$0()" )
    let _v2410 = v2414 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2415 : (unit -> unit) = method35(v0)
    let v2416 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2415 "$0()" )
    let _v2410 = v2416 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2417 : (unit -> unit) = method38(v0)
    let v2418 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2417 () }
    let _v2410 = v2418 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2419 : (unit -> unit) = method38(v0)
    let v2420 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2419 () }
    let _v2410 = v2420 
    #endif
#else
    let v2421 : (unit -> unit) = method38(v0)
    let v2422 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2421 () }
    let _v2410 = v2422 
    #endif
    let v2423 : System.IDisposable = _v2410 
    let _v1 = v2423 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2427 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2428 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2427 = v2428 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2431 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2427 = v2431 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2434 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2427 = v2434 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2437 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2427 = v2437 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2440 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2427 = v2440 
    #endif
#else
    let v2443 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v2444 : System.IO.DirectoryInfo = v2443 v0
    let _v2427 = v2444 
    #endif
    let v2445 : System.IO.DirectoryInfo = _v2427 
    let v2450 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2451 : bool = null |> unbox<bool>
    let _v2450 = v2451 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2454 : bool = null |> unbox<bool>
    let _v2450 = v2454 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2457 : bool = null |> unbox<bool>
    let _v2450 = v2457 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2460 : bool = null |> unbox<bool>
    let _v2450 = v2460 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2463 : bool = null |> unbox<bool>
    let _v2450 = v2463 
    #endif
#else
    let v2466 : bool = v2445.Exists
    let _v2450 = v2466 
    #endif
    let v2467 : bool = _v2450 
    let v2472 : bool = v2467 = false
    if v2472 then
        let v2473 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2474 : System.DateTime = null |> unbox<System.DateTime>
        let _v2473 = v2474 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2477 : System.DateTime = null |> unbox<System.DateTime>
        let _v2473 = v2477 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2480 : System.DateTime = null |> unbox<System.DateTime>
        let _v2473 = v2480 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2483 : System.DateTime = null |> unbox<System.DateTime>
        let _v2473 = v2483 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2486 : System.DateTime = null |> unbox<System.DateTime>
        let _v2473 = v2486 
        #endif
#else
        let v2489 : System.DateTime = v2445.CreationTime
        let _v2473 = v2489 
        #endif
        let v2490 : System.DateTime = _v2473 
        let v2495 : obj = {| Exists = v2467; CreationTime = v2490 |}
        let v2496 : string = $"%A{v2495}"
        let v2499 : unit = ()
        let v2500 : (unit -> unit) = closure32(v0, v2496)
        let v2501 : unit = (fun () -> v2500 (); v2499) ()
        ()
    let v3269 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3270 : (unit -> unit) = method35(v0)
    let v3271 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3270 "$0()" )
    let _v3269 = v3271 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3272 : (unit -> unit) = method35(v0)
    let v3273 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3272 "$0()" )
    let _v3269 = v3273 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3274 : (unit -> unit) = method35(v0)
    let v3275 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3274 "$0()" )
    let _v3269 = v3275 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3276 : (unit -> unit) = method38(v0)
    let v3277 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3276 () }
    let _v3269 = v3277 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3278 : (unit -> unit) = method38(v0)
    let v3279 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3278 () }
    let _v3269 = v3279 
    #endif
#else
    let v3280 : (unit -> unit) = method38(v0)
    let v3281 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3280 () }
    let _v3269 = v3281 
    #endif
    let v3282 : System.IDisposable = _v3269 
    let _v1 = v3282 
    #endif
#else
    let v3286 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3287 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3286 = v3287 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3290 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3286 = v3290 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3293 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3286 = v3293 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3296 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3286 = v3296 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3299 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3286 = v3299 
    #endif
#else
    let v3302 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v3303 : System.IO.DirectoryInfo = v3302 v0
    let _v3286 = v3303 
    #endif
    let v3304 : System.IO.DirectoryInfo = _v3286 
    let v3309 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3310 : bool = null |> unbox<bool>
    let _v3309 = v3310 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3313 : bool = null |> unbox<bool>
    let _v3309 = v3313 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3316 : bool = null |> unbox<bool>
    let _v3309 = v3316 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3319 : bool = null |> unbox<bool>
    let _v3309 = v3319 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3322 : bool = null |> unbox<bool>
    let _v3309 = v3322 
    #endif
#else
    let v3325 : bool = v3304.Exists
    let _v3309 = v3325 
    #endif
    let v3326 : bool = _v3309 
    let v3331 : bool = v3326 = false
    if v3331 then
        let v3332 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v3333 : System.DateTime = null |> unbox<System.DateTime>
        let _v3332 = v3333 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v3336 : System.DateTime = null |> unbox<System.DateTime>
        let _v3332 = v3336 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v3339 : System.DateTime = null |> unbox<System.DateTime>
        let _v3332 = v3339 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v3342 : System.DateTime = null |> unbox<System.DateTime>
        let _v3332 = v3342 
        #endif
#if FABLE_COMPILER_PYTHON
        let v3345 : System.DateTime = null |> unbox<System.DateTime>
        let _v3332 = v3345 
        #endif
#else
        let v3348 : System.DateTime = v3304.CreationTime
        let _v3332 = v3348 
        #endif
        let v3349 : System.DateTime = _v3332 
        let v3354 : obj = {| Exists = v3326; CreationTime = v3349 |}
        let v3355 : string = $"%A{v3354}"
        let v3358 : unit = ()
        let v3359 : (unit -> unit) = closure32(v0, v3355)
        let v3360 : unit = (fun () -> v3359 (); v3358) ()
        ()
    let v4128 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4129 : (unit -> unit) = method35(v0)
    let v4130 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4129 "$0()" )
    let _v4128 = v4130 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4131 : (unit -> unit) = method35(v0)
    let v4132 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4131 "$0()" )
    let _v4128 = v4132 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4133 : (unit -> unit) = method35(v0)
    let v4134 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4133 "$0()" )
    let _v4128 = v4134 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4135 : (unit -> unit) = method38(v0)
    let v4136 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4135 () }
    let _v4128 = v4136 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4137 : (unit -> unit) = method38(v0)
    let v4138 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4137 () }
    let _v4128 = v4138 
    #endif
#else
    let v4139 : (unit -> unit) = method38(v0)
    let v4140 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4139 () }
    let _v4128 = v4140 
    #endif
    let v4141 : System.IDisposable = _v4128 
    let _v1 = v4141 
    #endif
    let v4145 : System.IDisposable = _v1 
    v4145
and method39 (v0 : string) : string =
    v0
and method25 (v0 : string, v1 : string) : unit =
    let v2 : bool = method26(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string = method24(v0)
        let v5 : bool = method19(v4)
        let v6 : bool = v5 = false
        if v6 then
            let v7 : System.IDisposable = method28(v4)
            ()
        let v8 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v9 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v9 
        let _v8 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v8 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v8 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v8 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v8 = () 
        #endif
#else
        let v10 : string = method39(v1)
        System.IO.File.WriteAllText (v0, v10)
        let _v8 = () 
        #endif
        _v8 
        ()
and method41 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method43 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure39 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure38 () (v0 : char) : (UH0 -> UH0) =
    closure39(v0)
and method44 () : (char -> (UH0 -> UH0)) =
    closure38()
and method45 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v19 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v13 : (char -> string) = _.ToString()
                let v14 : string = v13 v4
                let v17 : (string -> System.Text.StringBuilder) = v1.Append
                let v18 : System.Text.StringBuilder = v17 v14
                v1
        method45(v5, v19, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure37 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '"'
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method43(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method44()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
            US15_0(v7, v15, v38, v39, v40)
        else
            let v42 : (string -> int32) = String.length
            let v43 : int32 = v42 v0
            let v44 : string = "\n"
            let v45 : int32 = v0.IndexOf v44 
            let v46 : int32 = v45 - 1
            let v47 : bool = -2 = v46
            let v48 : int32 =
                if v47 then
                    v43
                else
                    v46
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 0
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v0.[int v50..int v52]
            let v54 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v53}"
            let v55 : int32 = v3 - 1
            let v56 : (int32 -> (string -> string)) = String.replicate
            let v57 : (string -> string) = v56 v55
            let v58 : string = " "
            let v59 : string = v57 v58
            let v62 : string = "^"
            let v63 : string = v59 + v62 
            let v64 : string = $"{v54}
{v63}
"
            US15_1(v64)
and closure40 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '''
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method43(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method44()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
            US15_0(v7, v15, v38, v39, v40)
        else
            let v42 : (string -> int32) = String.length
            let v43 : int32 = v42 v0
            let v44 : string = "\n"
            let v45 : int32 = v0.IndexOf v44 
            let v46 : int32 = v45 - 1
            let v47 : bool = -2 = v46
            let v48 : int32 =
                if v47 then
                    v43
                else
                    v46
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 0
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v0.[int v50..int v52]
            let v54 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v53}"
            let v55 : int32 = v3 - 1
            let v56 : (int32 -> (string -> string)) = String.replicate
            let v57 : (string -> string) = v56 v55
            let v58 : string = " "
            let v59 : string = v57 v58
            let v62 : string = "^"
            let v63 : string = v59 + v62 
            let v64 : string = $"{v54}
{v63}
"
            US15_1(v64)
and method46 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US15 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US15 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US15_1(v13) -> (* Error *)
            method46(v0, v1, v6)
        | US15_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "choice / no parsers succeeded"
        US15_1(v3)
and method47 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US17_1
        let v15 : char =
            match v11 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method47(v0, v17)
and method48 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v70 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ''' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : (char list -> (char [])) = List.toArray
            let v14 : (char []) = v13 v10
            let v17 : string = $"parsing.none_of / unexpected end of input / chars: %A{v14} / s: %A{struct (v2, v3, v4)}"
            US15_1(v17)
        else
            let v19 : char = v1.[int 0]
            let v20 : (string -> int32) = String.length
            let v21 : int32 = v20 v1
            let v22 : (int32 -> int32) = int32
            let v23 : int32 = v22 1
            let v24 : (int32 -> int32) = int32
            let v25 : int32 = v24 v21
            let v26 : string = v1.[int v23..int v25]
            let v27 : int64 = 0L
            let v28 : bool = method47(v19, v27)
            let v29 : bool = v28 = false
            if v29 then
                let v30 : (char -> string) = _.ToString()
                let v31 : string = v30 v19
                let v34 : int32 = v31.Length
                let v35 : (char []) = Array.zeroCreate<char> (v34)
                let v36 : Mut5 = {l0 = 0} : Mut5
                while method43(v34, v36) do
                    let v38 : int32 = v36.l0
                    let v39 : char = v31.[int v38]
                    v35.[int v38] <- v39
                    let v40 : int32 = v38 + 1
                    v36.l0 <- v40
                    ()
                let v41 : char list = v35 |> Array.toList
                let v42 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v43 : (char -> (UH0 -> UH0)) = method44()
                let v44 : (char list -> (UH0 -> UH0)) = v42 v43
                let v45 : (UH0 -> UH0) = v44 v41
                let v46 : UH0 = UH0_0
                let v47 : UH0 = v45 v46
                let struct (v52 : System.Text.StringBuilder, v53 : int32, v54 : int32) = method45(v47, v2, v3, v4)
                US15_0(v19, v26, v52, v53, v54)
            else
                let v56 : char list = []
                let v57 : char list = ''' :: v56 
                let v60 : char list = '"' :: v57 
                let v63 : (char list -> (char [])) = List.toArray
                let v64 : (char []) = v63 v60
                let v67 : string = $"parsing.none_of / unexpected char: '{v19}' / chars: %A{v64} / s: %A{struct (v2, v3, v4)}"
                US15_1(v67)
    let v82 : US15 =
        match v70 with
        | US15_1(v79) -> (* Error *)
            US15_1(v79)
        | US15_0(v71, v72, v73, v74, v75) -> (* Ok *)
            let v76 : bool = '\\' = v71
            let v77 : char =
                if v76 then
                    '/'
                else
                    v71
            US15_0(v77, v72, v73, v74, v75)
    match v82 with
    | US15_1(v94) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v83, v84, v85, v86, v87) -> (* Ok *)
        let v88 : (char -> string) = _.ToString()
        let v89 : string = v88 v83
        let v92 : string = v0 + v89 
        method48(v92, v84, v85, v86, v87)
and method49 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US15 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method49(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US15_1(v5)
and method50 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method50(v0, v21)
and method51 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = ''' :: v7 
            let v13 : char list = '"' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method50(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method43(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method44()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method45(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = ' ' :: v59 
                let v63 : char list = ''' :: v60 
                let v66 : char list = '"' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v88 : US15 =
        match v76 with
        | US15_1(v85) -> (* Error *)
            US15_1(v85)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : bool = '\\' = v77
            let v83 : char =
                if v82 then
                    '/'
                else
                    v77
            US15_0(v83, v78, v79, v80, v81)
    match v88 with
    | US15_1(v100) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v89, v90, v91, v92, v93) -> (* Ok *)
        let v94 : (char -> string) = _.ToString()
        let v95 : string = v94 v89
        let v98 : string = v0 + v95 
        method51(v98, v90, v91, v92, v93)
and method52 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method52(v0, v6)
        else
            v1
and method53 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v42 : US15 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US15_1(v6)
        else
            let v8 : char = v1.[int 0]
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v1
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v1.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v8
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method43(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method44()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v2, v3, v4)
            US15_0(v8, v15, v38, v39, v40)
    match v42 with
    | US15_1(v54) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v43, v44, v45, v46, v47) -> (* Ok *)
        let v48 : (char -> string) = _.ToString()
        let v49 : string = v48 v43
        let v52 : string = v0 + v49 
        method53(v52, v44, v45, v46, v47)
and method42 (v0 : string) : US14 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v11 : System.Text.StringBuilder = v10 v6
    let v12 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure37()
    let v13 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure40()
    let v14 : UH1 = UH1_0
    let v15 : UH1 = UH1_1(v13, v14)
    let v16 : UH1 = UH1_1(v12, v15)
    let v17 : US15 = method46(v7, v11, v16)
    let v153 : US16 =
        match v17 with
        | US15_1(v150) -> (* Error *)
            US16_1(v150)
        | US15_0(v18, v19, v20, v21, v22) -> (* Ok *)
            let v23 : bool = "" = v19
            let v88 : US15 =
                if v23 then
                    let v24 : char list = []
                    let v25 : char list = ''' :: v24 
                    let v28 : char list = '"' :: v25 
                    let v31 : (char list -> (char [])) = List.toArray
                    let v32 : (char []) = v31 v28
                    let v35 : string = $"parsing.none_of / unexpected end of input / chars: %A{v32} / s: %A{struct (v20, v21, v22)}"
                    US15_1(v35)
                else
                    let v37 : char = v19.[int 0]
                    let v38 : (string -> int32) = String.length
                    let v39 : int32 = v38 v19
                    let v40 : (int32 -> int32) = int32
                    let v41 : int32 = v40 1
                    let v42 : (int32 -> int32) = int32
                    let v43 : int32 = v42 v39
                    let v44 : string = v19.[int v41..int v43]
                    let v45 : int64 = 0L
                    let v46 : bool = method47(v37, v45)
                    let v47 : bool = v46 = false
                    if v47 then
                        let v48 : (char -> string) = _.ToString()
                        let v49 : string = v48 v37
                        let v52 : int32 = v49.Length
                        let v53 : (char []) = Array.zeroCreate<char> (v52)
                        let v54 : Mut5 = {l0 = 0} : Mut5
                        while method43(v52, v54) do
                            let v56 : int32 = v54.l0
                            let v57 : char = v49.[int v56]
                            v53.[int v56] <- v57
                            let v58 : int32 = v56 + 1
                            v54.l0 <- v58
                            ()
                        let v59 : char list = v53 |> Array.toList
                        let v60 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v61 : (char -> (UH0 -> UH0)) = method44()
                        let v62 : (char list -> (UH0 -> UH0)) = v60 v61
                        let v63 : (UH0 -> UH0) = v62 v59
                        let v64 : UH0 = UH0_0
                        let v65 : UH0 = v63 v64
                        let struct (v70 : System.Text.StringBuilder, v71 : int32, v72 : int32) = method45(v65, v20, v21, v22)
                        US15_0(v37, v44, v70, v71, v72)
                    else
                        let v74 : char list = []
                        let v75 : char list = ''' :: v74 
                        let v78 : char list = '"' :: v75 
                        let v81 : (char list -> (char [])) = List.toArray
                        let v82 : (char []) = v81 v78
                        let v85 : string = $"parsing.none_of / unexpected char: '{v37}' / chars: %A{v82} / s: %A{struct (v20, v21, v22)}"
                        US15_1(v85)
            let v100 : US15 =
                match v88 with
                | US15_1(v97) -> (* Error *)
                    US15_1(v97)
                | US15_0(v89, v90, v91, v92, v93) -> (* Ok *)
                    let v94 : bool = '\\' = v89
                    let v95 : char =
                        if v94 then
                            '/'
                        else
                            v89
                    US15_0(v95, v90, v91, v92, v93)
            let v114 : US16 =
                match v100 with
                | US15_1(v101) -> (* Error *)
                    US16_1(v101)
                | US15_0(v103, v104, v105, v106, v107) -> (* Ok *)
                    let v108 : (char -> string) = _.ToString()
                    let v109 : string = v108 v103
                    method48(v109, v104, v105, v106, v107)
            let v124 : US16 =
                match v114 with
                | US16_1(v121) -> (* Error *)
                    US16_0(v6, v19, v20, v21, v22)
                | US16_0(v115, v116, v117, v118, v119) -> (* Ok *)
                    US16_0(v115, v116, v117, v118, v119)
            match v124 with
            | US16_1(v145) -> (* Error *)
                let v146 : string = "between / expected content"
                US16_1(v146)
            | US16_0(v125, v126, v127, v128, v129) -> (* Ok *)
                let v130 : UH1 = UH1_0
                let v131 : UH1 = UH1_1(v13, v130)
                let v132 : UH1 = UH1_1(v12, v131)
                let v133 : US15 = method49(v126, v127, v128, v129, v132)
                match v133 with
                | US15_1(v140) -> (* Error *)
                    let v141 : string = $"between / expected closing delimiter / e: %A{v140} / input: %A{struct (v7, v11, 1, 1)} / rest1: %A{struct (v19, v20, v21, v22)} / rest2: %A{struct (v126, v127, v128, v129)}"
                    US16_1(v141)
                | US15_0(v134, v135, v136, v137, v138) -> (* Ok *)
                    US16_0(v125, v135, v136, v137, v138)
    let v303 : US16 =
        match v153 with
        | US16_1(v159) -> (* Error *)
            let v160 : bool = "" = v7
            let v233 : US15 =
                if v160 then
                    let v161 : char list = []
                    let v162 : char list = ' ' :: v161 
                    let v165 : char list = ''' :: v162 
                    let v168 : char list = '"' :: v165 
                    let v171 : (char list -> (char [])) = List.toArray
                    let v172 : (char []) = v171 v168
                    let v175 : string = $"parsing.none_of / unexpected end of input / chars: %A{v172} / s: %A{struct (v11, 1, 1)}"
                    US15_1(v175)
                else
                    let v177 : char = v7.[int 0]
                    let v178 : (string -> int32) = String.length
                    let v179 : int32 = v178 v7
                    let v180 : (int32 -> int32) = int32
                    let v181 : int32 = v180 1
                    let v182 : (int32 -> int32) = int32
                    let v183 : int32 = v182 v179
                    let v184 : string = v7.[int v181..int v183]
                    let v185 : int64 = 0L
                    let v186 : bool = method50(v177, v185)
                    let v187 : bool = v186 = false
                    if v187 then
                        let v188 : (char -> string) = _.ToString()
                        let v189 : string = v188 v177
                        let v192 : int32 = v189.Length
                        let v193 : (char []) = Array.zeroCreate<char> (v192)
                        let v194 : Mut5 = {l0 = 0} : Mut5
                        while method43(v192, v194) do
                            let v196 : int32 = v194.l0
                            let v197 : char = v189.[int v196]
                            v193.[int v196] <- v197
                            let v198 : int32 = v196 + 1
                            v194.l0 <- v198
                            ()
                        let v199 : char list = v193 |> Array.toList
                        let v200 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v201 : (char -> (UH0 -> UH0)) = method44()
                        let v202 : (char list -> (UH0 -> UH0)) = v200 v201
                        let v203 : (UH0 -> UH0) = v202 v199
                        let v204 : UH0 = UH0_0
                        let v205 : UH0 = v203 v204
                        let v210 : int32 = 1
                        let v211 : int32 = 1
                        let struct (v212 : System.Text.StringBuilder, v213 : int32, v214 : int32) = method45(v205, v11, v210, v211)
                        US15_0(v177, v184, v212, v213, v214)
                    else
                        let v216 : char list = []
                        let v217 : char list = ' ' :: v216 
                        let v220 : char list = ''' :: v217 
                        let v223 : char list = '"' :: v220 
                        let v226 : (char list -> (char [])) = List.toArray
                        let v227 : (char []) = v226 v223
                        let v230 : string = $"parsing.none_of / unexpected char: '{v177}' / chars: %A{v227} / s: %A{struct (v11, 1, 1)}"
                        US15_1(v230)
            let v245 : US15 =
                match v233 with
                | US15_1(v242) -> (* Error *)
                    US15_1(v242)
                | US15_0(v234, v235, v236, v237, v238) -> (* Ok *)
                    let v239 : bool = '\\' = v234
                    let v240 : char =
                        if v239 then
                            '/'
                        else
                            v234
                    US15_0(v240, v235, v236, v237, v238)
            let v259 : US16 =
                match v245 with
                | US15_1(v246) -> (* Error *)
                    US16_1(v246)
                | US15_0(v248, v249, v250, v251, v252) -> (* Ok *)
                    let v253 : (char -> string) = _.ToString()
                    let v254 : string = v253 v248
                    method51(v254, v249, v250, v251, v252)
            match v259 with
            | US16_1(v265) -> (* Error *)
                let v266 : int32 = v7.Length
                let v267 : bool = v266 = 0
                let v271 : US18 =
                    if v267 then
                        US18_0(v7, v11, 1, 1)
                    else
                        let v269 : string = $"parsing.eof / expected end of input / input: %A{v7}"
                        US18_1(v269)
                let v280 : US16 =
                    match v271 with
                    | US18_1(v277) -> (* Error *)
                        US16_1(v277)
                    | US18_0(v272, v273, v274, v275) -> (* Ok *)
                        US16_0(v6, v272, v273, v274, v275)
                match v280 with
                | US16_1(v296) -> (* Error *)
                    US16_1(v296)
                | US16_0(v281, v282, v283, v284, v285) -> (* Ok *)
                    let v286 : int32 = 0
                    let v287 : int32 = method52(v282, v286)
                    let v288 : (string -> int32) = String.length
                    let v289 : int32 = v288 v282
                    let v290 : (int32 -> int32) = int32
                    let v291 : int32 = v290 v287
                    let v292 : (int32 -> int32) = int32
                    let v293 : int32 = v292 v289
                    let v294 : string = v282.[int v291..int v293]
                    US16_0(v281, v294, v283, v284, v285)
            | US16_0(v260, v261, v262, v263, v264) -> (* Ok *)
                v259
        | US16_0(v154, v155, v156, v157, v158) -> (* Ok *)
            v153
    let v471 : US19 =
        match v303 with
        | US16_1(v468) -> (* Error *)
            US19_1(v468)
        | US16_0(v304, v305, v306, v307, v308) -> (* Ok *)
            let v309 : bool = "" = v305
            let v372 : US15 =
                if v309 then
                    let v310 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v306, v307, v308)}"
                    US15_1(v310)
                else
                    let v312 : char = v305.[int 0]
                    let v313 : bool = v312 = ' '
                    if v313 then
                        let v314 : (string -> int32) = String.length
                        let v315 : int32 = v314 v305
                        let v316 : (int32 -> int32) = int32
                        let v317 : int32 = v316 1
                        let v318 : (int32 -> int32) = int32
                        let v319 : int32 = v318 v315
                        let v320 : string = v305.[int v317..int v319]
                        let v321 : (char -> string) = _.ToString()
                        let v322 : string = v321 v312
                        let v325 : int32 = v322.Length
                        let v326 : (char []) = Array.zeroCreate<char> (v325)
                        let v327 : Mut5 = {l0 = 0} : Mut5
                        while method43(v325, v327) do
                            let v329 : int32 = v327.l0
                            let v330 : char = v322.[int v329]
                            v326.[int v329] <- v330
                            let v331 : int32 = v329 + 1
                            v327.l0 <- v331
                            ()
                        let v332 : char list = v326 |> Array.toList
                        let v333 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v334 : (char -> (UH0 -> UH0)) = method44()
                        let v335 : (char list -> (UH0 -> UH0)) = v333 v334
                        let v336 : (UH0 -> UH0) = v335 v332
                        let v337 : UH0 = UH0_0
                        let v338 : UH0 = v336 v337
                        let struct (v343 : System.Text.StringBuilder, v344 : int32, v345 : int32) = method45(v338, v306, v307, v308)
                        US15_0(v312, v320, v343, v344, v345)
                    else
                        let v347 : (string -> int32) = String.length
                        let v348 : int32 = v347 v305
                        let v349 : string = "\n"
                        let v350 : int32 = v305.IndexOf v349 
                        let v351 : int32 = v350 - 1
                        let v352 : bool = -2 = v351
                        let v353 : int32 =
                            if v352 then
                                v348
                            else
                                v351
                        let v354 : (int32 -> int32) = int32
                        let v355 : int32 = v354 0
                        let v356 : (int32 -> int32) = int32
                        let v357 : int32 = v356 v353
                        let v358 : string = v305.[int v355..int v357]
                        let v359 : string = $"parsing.p_char / expected: '{' '}' / line: {v307} / col: {v308}
{v306}{v358}"
                        let v360 : int32 = v308 - 1
                        let v361 : (int32 -> (string -> string)) = String.replicate
                        let v362 : (string -> string) = v361 v360
                        let v363 : string = " "
                        let v364 : string = v362 v363
                        let v367 : string = "^"
                        let v368 : string = v364 + v367 
                        let v369 : string = $"{v359}
{v368}
"
                        US15_1(v369)
            let v384 : US20 =
                match v372 with
                | US15_1(v380) -> (* Error *)
                    let v381 : US17 = US17_1
                    US20_0(v381, v305, v306, v307, v308)
                | US15_0(v373, v374, v375, v376, v377) -> (* Ok *)
                    let v378 : US17 = US17_0(v373)
                    US20_0(v378, v374, v375, v376, v377)
            let v445 : US16 =
                match v384 with
                | US20_1(v442) -> (* Error *)
                    US16_1(v442)
                | US20_0(v385, v386, v387, v388, v389) -> (* Ok *)
                    let v390 : bool = "" = v386
                    let v427 : US15 =
                        if v390 then
                            let v391 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v387, v388, v389)}"
                            US15_1(v391)
                        else
                            let v393 : char = v386.[int 0]
                            let v394 : (string -> int32) = String.length
                            let v395 : int32 = v394 v386
                            let v396 : (int32 -> int32) = int32
                            let v397 : int32 = v396 1
                            let v398 : (int32 -> int32) = int32
                            let v399 : int32 = v398 v395
                            let v400 : string = v386.[int v397..int v399]
                            let v401 : (char -> string) = _.ToString()
                            let v402 : string = v401 v393
                            let v405 : int32 = v402.Length
                            let v406 : (char []) = Array.zeroCreate<char> (v405)
                            let v407 : Mut5 = {l0 = 0} : Mut5
                            while method43(v405, v407) do
                                let v409 : int32 = v407.l0
                                let v410 : char = v402.[int v409]
                                v406.[int v409] <- v410
                                let v411 : int32 = v409 + 1
                                v407.l0 <- v411
                                ()
                            let v412 : char list = v406 |> Array.toList
                            let v413 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v414 : (char -> (UH0 -> UH0)) = method44()
                            let v415 : (char list -> (UH0 -> UH0)) = v413 v414
                            let v416 : (UH0 -> UH0) = v415 v412
                            let v417 : UH0 = UH0_0
                            let v418 : UH0 = v416 v417
                            let struct (v423 : System.Text.StringBuilder, v424 : int32, v425 : int32) = method45(v418, v387, v388, v389)
                            US15_0(v393, v400, v423, v424, v425)
                    match v427 with
                    | US15_1(v428) -> (* Error *)
                        US16_1(v428)
                    | US15_0(v430, v431, v432, v433, v434) -> (* Ok *)
                        let v435 : (char -> string) = _.ToString()
                        let v436 : string = v435 v430
                        method53(v436, v431, v432, v433, v434)
            let v457 : US21 =
                match v445 with
                | US16_1(v453) -> (* Error *)
                    let v454 : US1 = US1_1
                    US21_0(v454, v305, v306, v307, v308)
                | US16_0(v446, v447, v448, v449, v450) -> (* Ok *)
                    let v451 : US1 = US1_0(v446)
                    US21_0(v451, v447, v448, v449, v450)
            match v457 with
            | US21_1(v464) -> (* Error *)
                US19_1(v464)
            | US21_0(v458, v459, v460, v461, v462) -> (* Ok *)
                US19_0(v304, v458, v459, v460, v461, v462)
    match v471 with
    | US19_1(v479) -> (* Error *)
        US14_1(v479)
    | US19_0(v472, v473, v474, v475, v476, v477) -> (* Ok *)
        US14_0(v472, v473)
and method56 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US17_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US17_1
        let v23 : char =
            match v19 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method56(v0, v25)
and method57 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v82 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v25 : char = v1.[int 0]
            let v26 : (string -> int32) = String.length
            let v27 : int32 = v26 v1
            let v28 : (int32 -> int32) = int32
            let v29 : int32 = v28 1
            let v30 : (int32 -> int32) = int32
            let v31 : int32 = v30 v27
            let v32 : string = v1.[int v29..int v31]
            let v33 : int64 = 0L
            let v34 : bool = method56(v25, v33)
            let v35 : bool = v34 = false
            if v35 then
                let v36 : (char -> string) = _.ToString()
                let v37 : string = v36 v25
                let v40 : int32 = v37.Length
                let v41 : (char []) = Array.zeroCreate<char> (v40)
                let v42 : Mut5 = {l0 = 0} : Mut5
                while method43(v40, v42) do
                    let v44 : int32 = v42.l0
                    let v45 : char = v37.[int v44]
                    v41.[int v44] <- v45
                    let v46 : int32 = v44 + 1
                    v42.l0 <- v46
                    ()
                let v47 : char list = v41 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method44()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v47
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v58 : System.Text.StringBuilder, v59 : int32, v60 : int32) = method45(v53, v2, v3, v4)
                US15_0(v25, v32, v58, v59, v60)
            else
                let v62 : char list = []
                let v63 : char list = ' ' :: v62 
                let v66 : char list = '"' :: v63 
                let v69 : char list = '`' :: v66 
                let v72 : char list = '\\' :: v69 
                let v75 : (char list -> (char [])) = List.toArray
                let v76 : (char []) = v75 v72
                let v79 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v76} / s: %A{struct (v2, v3, v4)}"
                US15_1(v79)
    match v82 with
    | US15_1(v94) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v83, v84, v85, v86, v87) -> (* Ok *)
        let v88 : (char -> string) = _.ToString()
        let v89 : string = v88 v83
        let v92 : string = v0 + v89 
        method57(v92, v84, v85, v86, v87)
and method59 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method59(v0, v21)
and closure41 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v67 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '\\'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v20 : int32 = v17.Length
                let v21 : (char []) = Array.zeroCreate<char> (v20)
                let v22 : Mut5 = {l0 = 0} : Mut5
                while method43(v20, v22) do
                    let v24 : int32 = v22.l0
                    let v25 : char = v17.[int v24]
                    v21.[int v24] <- v25
                    let v26 : int32 = v24 + 1
                    v22.l0 <- v26
                    ()
                let v27 : char list = v21 |> Array.toList
                let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v29 : (char -> (UH0 -> UH0)) = method44()
                let v30 : (char list -> (UH0 -> UH0)) = v28 v29
                let v31 : (UH0 -> UH0) = v30 v27
                let v32 : UH0 = UH0_0
                let v33 : UH0 = v31 v32
                let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
                US15_0(v7, v15, v38, v39, v40)
            else
                let v42 : (string -> int32) = String.length
                let v43 : int32 = v42 v0
                let v44 : string = "\n"
                let v45 : int32 = v0.IndexOf v44 
                let v46 : int32 = v45 - 1
                let v47 : bool = -2 = v46
                let v48 : int32 =
                    if v47 then
                        v43
                    else
                        v46
                let v49 : (int32 -> int32) = int32
                let v50 : int32 = v49 0
                let v51 : (int32 -> int32) = int32
                let v52 : int32 = v51 v48
                let v53 : string = v0.[int v50..int v52]
                let v54 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v53}"
                let v55 : int32 = v3 - 1
                let v56 : (int32 -> (string -> string)) = String.replicate
                let v57 : (string -> string) = v56 v55
                let v58 : string = " "
                let v59 : string = v57 v58
                let v62 : string = "^"
                let v63 : string = v59 + v62 
                let v64 : string = $"{v54}
{v63}
"
                US15_1(v64)
    let v114 : US15 =
        match v67 with
        | US15_1(v111) -> (* Error *)
            US15_1(v111)
        | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
            let v73 : bool = "" = v69
            if v73 then
                let v74 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v70, v71, v72)}"
                US15_1(v74)
            else
                let v76 : char = v69.[int 0]
                let v77 : (string -> int32) = String.length
                let v78 : int32 = v77 v69
                let v79 : (int32 -> int32) = int32
                let v80 : int32 = v79 1
                let v81 : (int32 -> int32) = int32
                let v82 : int32 = v81 v78
                let v83 : string = v69.[int v80..int v82]
                let v84 : (char -> string) = _.ToString()
                let v85 : string = v84 v76
                let v88 : int32 = v85.Length
                let v89 : (char []) = Array.zeroCreate<char> (v88)
                let v90 : Mut5 = {l0 = 0} : Mut5
                while method43(v88, v90) do
                    let v92 : int32 = v90.l0
                    let v93 : char = v85.[int v92]
                    v89.[int v92] <- v93
                    let v94 : int32 = v92 + 1
                    v90.l0 <- v94
                    ()
                let v95 : char list = v89 |> Array.toList
                let v96 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v97 : (char -> (UH0 -> UH0)) = method44()
                let v98 : (char list -> (UH0 -> UH0)) = v96 v97
                let v99 : (UH0 -> UH0) = v98 v95
                let v100 : UH0 = UH0_0
                let v101 : UH0 = v99 v100
                let struct (v106 : System.Text.StringBuilder, v107 : int32, v108 : int32) = method45(v101, v70, v71, v72)
                US15_0(v76, v83, v106, v107, v108)
    match v114 with
    | US15_1(v122) -> (* Error *)
        US16_1(v122)
    | US15_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v120 : string = $"{'\\'}{v115}"
        US16_0(v120, v116, v117, v118, v119)
and closure42 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v67 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '`'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v20 : int32 = v17.Length
                let v21 : (char []) = Array.zeroCreate<char> (v20)
                let v22 : Mut5 = {l0 = 0} : Mut5
                while method43(v20, v22) do
                    let v24 : int32 = v22.l0
                    let v25 : char = v17.[int v24]
                    v21.[int v24] <- v25
                    let v26 : int32 = v24 + 1
                    v22.l0 <- v26
                    ()
                let v27 : char list = v21 |> Array.toList
                let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v29 : (char -> (UH0 -> UH0)) = method44()
                let v30 : (char list -> (UH0 -> UH0)) = v28 v29
                let v31 : (UH0 -> UH0) = v30 v27
                let v32 : UH0 = UH0_0
                let v33 : UH0 = v31 v32
                let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
                US15_0(v7, v15, v38, v39, v40)
            else
                let v42 : (string -> int32) = String.length
                let v43 : int32 = v42 v0
                let v44 : string = "\n"
                let v45 : int32 = v0.IndexOf v44 
                let v46 : int32 = v45 - 1
                let v47 : bool = -2 = v46
                let v48 : int32 =
                    if v47 then
                        v43
                    else
                        v46
                let v49 : (int32 -> int32) = int32
                let v50 : int32 = v49 0
                let v51 : (int32 -> int32) = int32
                let v52 : int32 = v51 v48
                let v53 : string = v0.[int v50..int v52]
                let v54 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v53}"
                let v55 : int32 = v3 - 1
                let v56 : (int32 -> (string -> string)) = String.replicate
                let v57 : (string -> string) = v56 v55
                let v58 : string = " "
                let v59 : string = v57 v58
                let v62 : string = "^"
                let v63 : string = v59 + v62 
                let v64 : string = $"{v54}
{v63}
"
                US15_1(v64)
    let v114 : US15 =
        match v67 with
        | US15_1(v111) -> (* Error *)
            US15_1(v111)
        | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
            let v73 : bool = "" = v69
            if v73 then
                let v74 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v70, v71, v72)}"
                US15_1(v74)
            else
                let v76 : char = v69.[int 0]
                let v77 : (string -> int32) = String.length
                let v78 : int32 = v77 v69
                let v79 : (int32 -> int32) = int32
                let v80 : int32 = v79 1
                let v81 : (int32 -> int32) = int32
                let v82 : int32 = v81 v78
                let v83 : string = v69.[int v80..int v82]
                let v84 : (char -> string) = _.ToString()
                let v85 : string = v84 v76
                let v88 : int32 = v85.Length
                let v89 : (char []) = Array.zeroCreate<char> (v88)
                let v90 : Mut5 = {l0 = 0} : Mut5
                while method43(v88, v90) do
                    let v92 : int32 = v90.l0
                    let v93 : char = v85.[int v92]
                    v89.[int v92] <- v93
                    let v94 : int32 = v92 + 1
                    v90.l0 <- v94
                    ()
                let v95 : char list = v89 |> Array.toList
                let v96 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v97 : (char -> (UH0 -> UH0)) = method44()
                let v98 : (char list -> (UH0 -> UH0)) = v96 v97
                let v99 : (UH0 -> UH0) = v98 v95
                let v100 : UH0 = UH0_0
                let v101 : UH0 = v99 v100
                let struct (v106 : System.Text.StringBuilder, v107 : int32, v108 : int32) = method45(v101, v70, v71, v72)
                US15_0(v76, v83, v106, v107, v108)
    match v114 with
    | US15_1(v122) -> (* Error *)
        US16_1(v122)
    | US15_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v120 : string = $"{'`'}{v115}"
        US16_0(v120, v116, v117, v118, v119)
and method60 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US16 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US16 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US16_1(v15) -> (* Error *)
            method60(v0, v1, v2, v3, v8)
        | US16_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US16_1(v5)
and method61 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method61(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method58 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method59(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method43(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method44()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method45(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = '"' :: v59 
                let v63 : char list = '`' :: v60 
                let v66 : char list = '\\' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v90 : US16 =
        match v76 with
        | US15_1(v87) -> (* Error *)
            US16_1(v87)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : (char -> string) = _.ToString()
            let v83 : string = v82 v77
            US16_0(v83, v78, v79, v80, v81)
    let v104 : US16 =
        match v90 with
        | US16_1(v96) -> (* Error *)
            let v97 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure41()
            let v98 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure42()
            let v99 : UH3 = UH3_0
            let v100 : UH3 = UH3_1(v98, v99)
            let v101 : UH3 = UH3_1(v97, v100)
            method60(v1, v2, v3, v4, v101)
        | US16_0(v91, v92, v93, v94, v95) -> (* Ok *)
            v90
    match v104 with
    | US16_1(v112) -> (* Error *)
        let v113 : UH2 = UH2_0
        let v114 : UH2 = method61(v0, v113)
        US23_0(v114, v1, v2, v3, v4)
    | US16_0(v105, v106, v107, v108, v109) -> (* Ok *)
        let v110 : UH2 = UH2_1(v105, v0)
        method58(v110, v106, v107, v108, v109)
and method62 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method62(v3, v1)
        let v5 : string list = v2 :: v4 
        v5
    | UH2_0 -> (* Nil *)
        v1
and method63 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method59(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method43(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method44()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method45(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = '"' :: v59 
                let v63 : char list = '`' :: v60 
                let v66 : char list = '\\' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v90 : US16 =
        match v76 with
        | US15_1(v87) -> (* Error *)
            US16_1(v87)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : (char -> string) = _.ToString()
            let v83 : string = v82 v77
            US16_0(v83, v78, v79, v80, v81)
    match v90 with
    | US16_1(v98) -> (* Error *)
        let v99 : UH2 = UH2_0
        let v100 : UH2 = method61(v0, v99)
        US23_0(v100, v1, v2, v3, v4)
    | US16_0(v91, v92, v93, v94, v95) -> (* Ok *)
        let v96 : UH2 = UH2_1(v91, v0)
        method63(v96, v92, v93, v94, v95)
and method64 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method64(v0, v6)
        else
            v1
and method55 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v82 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v25 : char = v1.[int 0]
            let v26 : (string -> int32) = String.length
            let v27 : int32 = v26 v1
            let v28 : (int32 -> int32) = int32
            let v29 : int32 = v28 1
            let v30 : (int32 -> int32) = int32
            let v31 : int32 = v30 v27
            let v32 : string = v1.[int v29..int v31]
            let v33 : int64 = 0L
            let v34 : bool = method56(v25, v33)
            let v35 : bool = v34 = false
            if v35 then
                let v36 : (char -> string) = _.ToString()
                let v37 : string = v36 v25
                let v40 : int32 = v37.Length
                let v41 : (char []) = Array.zeroCreate<char> (v40)
                let v42 : Mut5 = {l0 = 0} : Mut5
                while method43(v40, v42) do
                    let v44 : int32 = v42.l0
                    let v45 : char = v37.[int v44]
                    v41.[int v44] <- v45
                    let v46 : int32 = v44 + 1
                    v42.l0 <- v46
                    ()
                let v47 : char list = v41 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method44()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v47
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v58 : System.Text.StringBuilder, v59 : int32, v60 : int32) = method45(v53, v2, v3, v4)
                US15_0(v25, v32, v58, v59, v60)
            else
                let v62 : char list = []
                let v63 : char list = ' ' :: v62 
                let v66 : char list = '"' :: v63 
                let v69 : char list = '`' :: v66 
                let v72 : char list = '\\' :: v69 
                let v75 : (char list -> (char [])) = List.toArray
                let v76 : (char []) = v75 v72
                let v79 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v76} / s: %A{struct (v2, v3, v4)}"
                US15_1(v79)
    let v96 : US16 =
        match v82 with
        | US15_1(v83) -> (* Error *)
            US16_1(v83)
        | US15_0(v85, v86, v87, v88, v89) -> (* Ok *)
            let v90 : (char -> string) = _.ToString()
            let v91 : string = v90 v85
            method57(v91, v86, v87, v88, v89)
    let v341 : US16 =
        match v96 with
        | US16_1(v102) -> (* Error *)
            let v165 : US15 =
                if v5 then
                    let v103 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
                    US15_1(v103)
                else
                    let v105 : char = v1.[int 0]
                    let v106 : bool = v105 = '"'
                    if v106 then
                        let v107 : (string -> int32) = String.length
                        let v108 : int32 = v107 v1
                        let v109 : (int32 -> int32) = int32
                        let v110 : int32 = v109 1
                        let v111 : (int32 -> int32) = int32
                        let v112 : int32 = v111 v108
                        let v113 : string = v1.[int v110..int v112]
                        let v114 : (char -> string) = _.ToString()
                        let v115 : string = v114 v105
                        let v118 : int32 = v115.Length
                        let v119 : (char []) = Array.zeroCreate<char> (v118)
                        let v120 : Mut5 = {l0 = 0} : Mut5
                        while method43(v118, v120) do
                            let v122 : int32 = v120.l0
                            let v123 : char = v115.[int v122]
                            v119.[int v122] <- v123
                            let v124 : int32 = v122 + 1
                            v120.l0 <- v124
                            ()
                        let v125 : char list = v119 |> Array.toList
                        let v126 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v127 : (char -> (UH0 -> UH0)) = method44()
                        let v128 : (char list -> (UH0 -> UH0)) = v126 v127
                        let v129 : (UH0 -> UH0) = v128 v125
                        let v130 : UH0 = UH0_0
                        let v131 : UH0 = v129 v130
                        let struct (v136 : System.Text.StringBuilder, v137 : int32, v138 : int32) = method45(v131, v2, v3, v4)
                        US15_0(v105, v113, v136, v137, v138)
                    else
                        let v140 : (string -> int32) = String.length
                        let v141 : int32 = v140 v1
                        let v142 : string = "\n"
                        let v143 : int32 = v1.IndexOf v142 
                        let v144 : int32 = v143 - 1
                        let v145 : bool = -2 = v144
                        let v146 : int32 =
                            if v145 then
                                v141
                            else
                                v144
                        let v147 : (int32 -> int32) = int32
                        let v148 : int32 = v147 0
                        let v149 : (int32 -> int32) = int32
                        let v150 : int32 = v149 v146
                        let v151 : string = v1.[int v148..int v150]
                        let v152 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v151}"
                        let v153 : int32 = v4 - 1
                        let v154 : (int32 -> (string -> string)) = String.replicate
                        let v155 : (string -> string) = v154 v153
                        let v156 : string = " "
                        let v157 : string = v155 v156
                        let v160 : string = "^"
                        let v161 : string = v157 + v160 
                        let v162 : string = $"{v152}
{v161}
"
                        US15_1(v162)
            let v282 : US16 =
                match v165 with
                | US15_1(v279) -> (* Error *)
                    US16_1(v279)
                | US15_0(v166, v167, v168, v169, v170) -> (* Ok *)
                    let v171 : UH2 = UH2_0
                    let v172 : US23 = method58(v171, v167, v168, v169, v170)
                    let v193 : US16 =
                        match v172 with
                        | US23_1(v190) -> (* Error *)
                            US16_1(v190)
                        | US23_0(v173, v174, v175, v176, v177) -> (* Ok *)
                            let v178 : string list = []
                            let v179 : string list = method62(v173, v178)
                            let v180 : string seq = seq { for i = 0 to v179.Length - 1 do yield v179.[i] }
                            let v183 : (string -> (string seq -> string)) = String.concat
                            let v184 : string = ""
                            let v185 : (string seq -> string) = v183 v184
                            let v186 : string = v185 v180
                            US16_0(v186, v174, v175, v176, v177)
                    match v193 with
                    | US16_1(v274) -> (* Error *)
                        let v275 : string = "between / expected content"
                        US16_1(v275)
                    | US16_0(v194, v195, v196, v197, v198) -> (* Ok *)
                        let v199 : bool = "" = v195
                        let v262 : US15 =
                            if v199 then
                                let v200 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v196, v197, v198)}"
                                US15_1(v200)
                            else
                                let v202 : char = v195.[int 0]
                                let v203 : bool = v202 = '"'
                                if v203 then
                                    let v204 : (string -> int32) = String.length
                                    let v205 : int32 = v204 v195
                                    let v206 : (int32 -> int32) = int32
                                    let v207 : int32 = v206 1
                                    let v208 : (int32 -> int32) = int32
                                    let v209 : int32 = v208 v205
                                    let v210 : string = v195.[int v207..int v209]
                                    let v211 : (char -> string) = _.ToString()
                                    let v212 : string = v211 v202
                                    let v215 : int32 = v212.Length
                                    let v216 : (char []) = Array.zeroCreate<char> (v215)
                                    let v217 : Mut5 = {l0 = 0} : Mut5
                                    while method43(v215, v217) do
                                        let v219 : int32 = v217.l0
                                        let v220 : char = v212.[int v219]
                                        v216.[int v219] <- v220
                                        let v221 : int32 = v219 + 1
                                        v217.l0 <- v221
                                        ()
                                    let v222 : char list = v216 |> Array.toList
                                    let v223 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v224 : (char -> (UH0 -> UH0)) = method44()
                                    let v225 : (char list -> (UH0 -> UH0)) = v223 v224
                                    let v226 : (UH0 -> UH0) = v225 v222
                                    let v227 : UH0 = UH0_0
                                    let v228 : UH0 = v226 v227
                                    let struct (v233 : System.Text.StringBuilder, v234 : int32, v235 : int32) = method45(v228, v196, v197, v198)
                                    US15_0(v202, v210, v233, v234, v235)
                                else
                                    let v237 : (string -> int32) = String.length
                                    let v238 : int32 = v237 v195
                                    let v239 : string = "\n"
                                    let v240 : int32 = v195.IndexOf v239 
                                    let v241 : int32 = v240 - 1
                                    let v242 : bool = -2 = v241
                                    let v243 : int32 =
                                        if v242 then
                                            v238
                                        else
                                            v241
                                    let v244 : (int32 -> int32) = int32
                                    let v245 : int32 = v244 0
                                    let v246 : (int32 -> int32) = int32
                                    let v247 : int32 = v246 v243
                                    let v248 : string = v195.[int v245..int v247]
                                    let v249 : string = $"parsing.p_char / expected: '{'"'}' / line: {v197} / col: {v198}
{v196}{v248}"
                                    let v250 : int32 = v198 - 1
                                    let v251 : (int32 -> (string -> string)) = String.replicate
                                    let v252 : (string -> string) = v251 v250
                                    let v253 : string = " "
                                    let v254 : string = v252 v253
                                    let v257 : string = "^"
                                    let v258 : string = v254 + v257 
                                    let v259 : string = $"{v249}
{v258}
"
                                    US15_1(v259)
                        match v262 with
                        | US15_1(v269) -> (* Error *)
                            let v270 : string = $"between / expected closing delimiter / e: %A{v269} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v167, v168, v169, v170)} / rest2: %A{struct (v195, v196, v197, v198)}"
                            US16_1(v270)
                        | US15_0(v263, v264, v265, v266, v267) -> (* Ok *)
                            US16_0(v194, v264, v265, v266, v267)
            match v282 with
            | US16_1(v288) -> (* Error *)
                let v289 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure41()
                let v290 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure42()
                let v291 : UH3 = UH3_0
                let v292 : UH3 = UH3_1(v290, v291)
                let v293 : UH3 = UH3_1(v289, v292)
                let v294 : US16 = method60(v1, v2, v3, v4, v293)
                let v305 : US16 =
                    match v294 with
                    | US16_1(v302) -> (* Error *)
                        US16_1(v302)
                    | US16_0(v295, v296, v297, v298, v299) -> (* Ok *)
                        let v300 : string = ""
                        US16_0(v300, v296, v297, v298, v299)
                let v316 : US23 =
                    match v305 with
                    | US16_1(v313) -> (* Error *)
                        US23_1(v313)
                    | US16_0(v306, v307, v308, v309, v310) -> (* Ok *)
                        let v311 : UH2 = UH2_0
                        method63(v311, v307, v308, v309, v310)
                match v316 with
                | US23_1(v334) -> (* Error *)
                    US16_1(v334)
                | US23_0(v317, v318, v319, v320, v321) -> (* Ok *)
                    let v322 : string list = []
                    let v323 : string list = method62(v317, v322)
                    let v324 : string seq = seq { for i = 0 to v323.Length - 1 do yield v323.[i] }
                    let v327 : (string -> (string seq -> string)) = String.concat
                    let v328 : string = ""
                    let v329 : (string seq -> string) = v327 v328
                    let v330 : string = v329 v324
                    US16_0(v330, v318, v319, v320, v321)
            | US16_0(v283, v284, v285, v286, v287) -> (* Ok *)
                v282
        | US16_0(v97, v98, v99, v100, v101) -> (* Ok *)
            v96
    match v341 with
    | US16_1(v342) -> (* Error *)
        let v343 : UH2 = UH2_0
        let v344 : UH2 = method61(v0, v343)
        US23_0(v344, v1, v2, v3, v4)
    | US16_0(v346, v347, v348, v349, v350) -> (* Ok *)
        let v351 : int32 = 0
        let v352 : int32 = method64(v347, v351)
        let v353 : bool = 0 = v352
        let v364 : US18 =
            if v353 then
                let v354 : string = "spaces1 / expected at least one space"
                US18_1(v354)
            else
                let v356 : (string -> int32) = String.length
                let v357 : int32 = v356 v347
                let v358 : (int32 -> int32) = int32
                let v359 : int32 = v358 v352
                let v360 : (int32 -> int32) = int32
                let v361 : int32 = v360 v357
                let v362 : string = v347.[int v359..int v361]
                US18_0(v362, v348, v349, v350)
        match v364 with
        | US18_1(v365) -> (* Error *)
            let v366 : UH2 = UH2_0
            let v367 : UH2 = UH2_1(v346, v366)
            let v368 : UH2 = method61(v0, v367)
            US23_0(v368, v347, v348, v349, v350)
        | US18_0(v370, v371, v372, v373) -> (* Ok *)
            let v374 : UH2 = UH2_1(v346, v0)
            method55(v374, v370, v371, v372, v373)
and method54 (v0 : string) : US22 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v11 : System.Text.StringBuilder = v10 v6
    let v12 : UH2 = UH2_0
    let v13 : int32 = 1
    let v14 : int32 = 1
    let v15 : US23 = method55(v12, v7, v11, v13, v14)
    match v15 with
    | US23_1(v28) -> (* Error *)
        US22_1(v28)
    | US23_0(v16, v17, v18, v19, v20) -> (* Ok *)
        let v21 : string list = []
        let v22 : string list = method62(v16, v21)
        let v23 : (string list -> (string [])) = List.toArray
        let v24 : (string []) = v23 v22
        US22_0(v24)
and closure44 () () : string =
    let v0 : string = $"runtime.execute_with_options"
    v0
and closure43 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure2()
    let v11 : unit = (fun () -> v10 (); v9) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : int64 option) = State.trace_state.Value
    let v39 : unit = ()
    let v40 : unit = (fun () -> v10 (); v39) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : int64 option) = State.trace_state.Value
    let v68 : US0 = v56.l0
    let v69 : bool = v55.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 1 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v24)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v10 (); v79) ()
        let struct (v93 : Mut0, v94 : Mut1, v95 : Mut2, v96 : Mut3, v97 : int64 option) = State.trace_state.Value
        let v108 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v109 : US3 option = None
        let _v109 = ref v109 
        let v110 : US3 option ref = _v109 
        let v111 : (US3 option -> US3 option ref) = closure8(v110)
        let v112 : unit = ()
        let v113 : (unit -> unit) = closure9(v97, v111)
        let v114 : unit = (fun () -> v113 (); v112) ()
        let v117 : US3 option = _v109.Value 
        let v128 : US3 = US3_1
        let v129 : US3 = v117 |> Option.defaultValue v128 
        let v169 : System.DateTime =
            match v129 with
            | US3_1 -> (* None *)
                let v165 : System.DateTime = System.DateTime.Now
                v165
            | US3_0(v133) -> (* Some *)
                let v134 : System.DateTime = System.DateTime.Now
                let v137 : (System.DateTime -> int64) = _.Ticks
                let v138 : int64 = v137 v134
                let v141 : int64 = v138 - v133
                let v142 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v143 : System.TimeSpan = v142 v141
                let v146 : (System.TimeSpan -> int32) = _.Hours
                let v147 : int32 = v146 v143
                let v150 : (System.TimeSpan -> int32) = _.Minutes
                let v151 : int32 = v150 v143
                let v154 : (System.TimeSpan -> int32) = _.Seconds
                let v155 : int32 = v154 v143
                let v158 : (System.TimeSpan -> int32) = _.Milliseconds
                let v159 : int32 = v158 v143
                let v162 : System.DateTime = System.DateTime (1, 1, 1, v147, v151, v155, v159)
                v162
        let v170 : string = method6()
        let v173 : (string -> string) = v169.ToString
        let v174 : string = v173 v170
        let _v108 = v174 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v177 : US3 option = None
        let _v177 = ref v177 
        let v178 : US3 option ref = _v177 
        let v179 : (US3 option -> US3 option ref) = closure8(v178)
        let v180 : unit = ()
        let v181 : (unit -> unit) = closure9(v97, v179)
        let v182 : unit = (fun () -> v181 (); v180) ()
        let v185 : US3 option = _v177.Value 
        let v196 : US3 = US3_1
        let v197 : US3 = v185 |> Option.defaultValue v196 
        let v237 : System.DateTime =
            match v197 with
            | US3_1 -> (* None *)
                let v233 : System.DateTime = System.DateTime.Now
                v233
            | US3_0(v201) -> (* Some *)
                let v202 : System.DateTime = System.DateTime.Now
                let v205 : (System.DateTime -> int64) = _.Ticks
                let v206 : int64 = v205 v202
                let v209 : int64 = v206 - v201
                let v210 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v211 : System.TimeSpan = v210 v209
                let v214 : (System.TimeSpan -> int32) = _.Hours
                let v215 : int32 = v214 v211
                let v218 : (System.TimeSpan -> int32) = _.Minutes
                let v219 : int32 = v218 v211
                let v222 : (System.TimeSpan -> int32) = _.Seconds
                let v223 : int32 = v222 v211
                let v226 : (System.TimeSpan -> int32) = _.Milliseconds
                let v227 : int32 = v226 v211
                let v230 : System.DateTime = System.DateTime (1, 1, 1, v215, v219, v223, v227)
                v230
        let v238 : string = method6()
        let v241 : (string -> string) = v237.ToString
        let v242 : string = v241 v238
        let _v108 = v242 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v245 : string = $"near_sdk::env::block_timestamp()"
        let v246 : uint64 = Fable.Core.RustInterop.emitRustExpr () v245 
        let v247 : US3 option = None
        let _v247 = ref v247 
        let v248 : US3 option ref = _v247 
        let v249 : (US3 option -> US3 option ref) = closure8(v248)
        let v250 : unit = ()
        let v251 : (unit -> unit) = closure9(v97, v249)
        let v252 : unit = (fun () -> v251 (); v250) ()
        let v255 : US3 option = _v247.Value 
        let v266 : US3 = US3_1
        let v267 : US3 = v255 |> Option.defaultValue v266 
        let v276 : uint64 =
            match v267 with
            | US3_1 -> (* None *)
                v246
            | US3_0(v271) -> (* Some *)
                let v272 : (int64 -> uint64) = uint64
                let v273 : uint64 = v272 v271
                let v274 : uint64 = v246 - v273
                v274
        let v277 : uint64 = v276 / 1000000000UL
        let v278 : uint64 = v277 % 60UL
        let v279 : uint64 = v277 / 60UL
        let v280 : uint64 = v279 % 60UL
        let v281 : uint64 = v277 / 3600UL
        let v282 : uint64 = v281 % 24UL
        let v283 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v284 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v282, v280, v278) v283 
        let v285 : string = "fable_library_rust::String_::fromString($0)"
        let v286 : string = Fable.Core.RustInterop.emitRustExpr v284 v285 
        let _v108 = v286 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v287 : US3 option = None
        let _v287 = ref v287 
        let v288 : US3 option ref = _v287 
        let v289 : (US3 option -> US3 option ref) = closure8(v288)
        let v290 : unit = ()
        let v291 : (unit -> unit) = closure9(v97, v289)
        let v292 : unit = (fun () -> v291 (); v290) ()
        let v295 : US3 option = _v287.Value 
        let v306 : US3 = US3_1
        let v307 : US3 = v295 |> Option.defaultValue v306 
        let v347 : System.DateTime =
            match v307 with
            | US3_1 -> (* None *)
                let v343 : System.DateTime = System.DateTime.Now
                v343
            | US3_0(v311) -> (* Some *)
                let v312 : System.DateTime = System.DateTime.Now
                let v315 : (System.DateTime -> int64) = _.Ticks
                let v316 : int64 = v315 v312
                let v319 : int64 = v316 - v311
                let v320 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v321 : System.TimeSpan = v320 v319
                let v324 : (System.TimeSpan -> int32) = _.Hours
                let v325 : int32 = v324 v321
                let v328 : (System.TimeSpan -> int32) = _.Minutes
                let v329 : int32 = v328 v321
                let v332 : (System.TimeSpan -> int32) = _.Seconds
                let v333 : int32 = v332 v321
                let v336 : (System.TimeSpan -> int32) = _.Milliseconds
                let v337 : int32 = v336 v321
                let v340 : System.DateTime = System.DateTime (1, 1, 1, v325, v329, v333, v337)
                v340
        let v348 : string = method7()
        let v351 : (string -> string) = v347.ToString
        let v352 : string = v351 v348
        let _v108 = v352 
        #endif
#if FABLE_COMPILER_PYTHON
        let v355 : US3 option = None
        let _v355 = ref v355 
        let v356 : US3 option ref = _v355 
        let v357 : (US3 option -> US3 option ref) = closure8(v356)
        let v358 : unit = ()
        let v359 : (unit -> unit) = closure9(v97, v357)
        let v360 : unit = (fun () -> v359 (); v358) ()
        let v363 : US3 option = _v355.Value 
        let v374 : US3 = US3_1
        let v375 : US3 = v363 |> Option.defaultValue v374 
        let v415 : System.DateTime =
            match v375 with
            | US3_1 -> (* None *)
                let v411 : System.DateTime = System.DateTime.Now
                v411
            | US3_0(v379) -> (* Some *)
                let v380 : System.DateTime = System.DateTime.Now
                let v383 : (System.DateTime -> int64) = _.Ticks
                let v384 : int64 = v383 v380
                let v387 : int64 = v384 - v379
                let v388 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v389 : System.TimeSpan = v388 v387
                let v392 : (System.TimeSpan -> int32) = _.Hours
                let v393 : int32 = v392 v389
                let v396 : (System.TimeSpan -> int32) = _.Minutes
                let v397 : int32 = v396 v389
                let v400 : (System.TimeSpan -> int32) = _.Seconds
                let v401 : int32 = v400 v389
                let v404 : (System.TimeSpan -> int32) = _.Milliseconds
                let v405 : int32 = v404 v389
                let v408 : System.DateTime = System.DateTime (1, 1, 1, v393, v397, v401, v405)
                v408
        let v416 : string = method7()
        let v419 : (string -> string) = v415.ToString
        let v420 : string = v419 v416
        let _v108 = v420 
        #endif
#else
        let v423 : US3 option = None
        let _v423 = ref v423 
        let v424 : US3 option ref = _v423 
        let v425 : (US3 option -> US3 option ref) = closure8(v424)
        let v426 : unit = ()
        let v427 : (unit -> unit) = closure9(v97, v425)
        let v428 : unit = (fun () -> v427 (); v426) ()
        let v431 : US3 option = _v423.Value 
        let v442 : US3 = US3_1
        let v443 : US3 = v431 |> Option.defaultValue v442 
        let v483 : System.DateTime =
            match v443 with
            | US3_1 -> (* None *)
                let v479 : System.DateTime = System.DateTime.Now
                v479
            | US3_0(v447) -> (* Some *)
                let v448 : System.DateTime = System.DateTime.Now
                let v451 : (System.DateTime -> int64) = _.Ticks
                let v452 : int64 = v451 v448
                let v455 : int64 = v452 - v447
                let v456 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v457 : System.TimeSpan = v456 v455
                let v460 : (System.TimeSpan -> int32) = _.Hours
                let v461 : int32 = v460 v457
                let v464 : (System.TimeSpan -> int32) = _.Minutes
                let v465 : int32 = v464 v457
                let v468 : (System.TimeSpan -> int32) = _.Seconds
                let v469 : int32 = v468 v457
                let v472 : (System.TimeSpan -> int32) = _.Milliseconds
                let v473 : int32 = v472 v457
                let v476 : System.DateTime = System.DateTime (1, 1, 1, v461, v465, v469, v473)
                v476
        let v484 : string = method7()
        let v487 : (string -> string) = v483.ToString
        let v488 : string = v487 v484
        let _v108 = v488 
        #endif
        let v491 : string = _v108 
        let v561 : string = "Debug"
        let v562 : (unit -> string) = v561.ToLower
        let v563 : string = v562 ()
        let v566 : string = v563.PadLeft (7, ' ')
        let v580 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v581 : string = "inline_colorization::color_bright_blue"
        let v582 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "&*$0"
        let v584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v566 v583 
        let v585 : string = "inline_colorization::color_reset"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "\"{v582}{v584}{v586}\""
        let v588 : string = @$"format!(" + v587 + ")"
        let v589 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "fable_library_rust::String_::fromString($0)"
        let v591 : string = Fable.Core.RustInterop.emitRustExpr v589 v590 
        let _v580 = v591 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v592 : string = "inline_colorization::color_bright_blue"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "&*$0"
        let v595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v566 v594 
        let v596 : string = "inline_colorization::color_reset"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "\"{v593}{v595}{v597}\""
        let v599 : string = @$"format!(" + v598 + ")"
        let v600 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "fable_library_rust::String_::fromString($0)"
        let v602 : string = Fable.Core.RustInterop.emitRustExpr v600 v601 
        let _v580 = v602 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v603 : string = "inline_colorization::color_bright_blue"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "&*$0"
        let v606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v566 v605 
        let v607 : string = "inline_colorization::color_reset"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "\"{v604}{v606}{v608}\""
        let v610 : string = @$"format!(" + v609 + ")"
        let v611 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "fable_library_rust::String_::fromString($0)"
        let v613 : string = Fable.Core.RustInterop.emitRustExpr v611 v612 
        let _v580 = v613 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v614 : string = "\u001b[94m"
        let v615 : string = method8()
        let v616 : string = v614 + v566 
        let v617 : string = v616 + v615 
        let _v580 = v617 
        #endif
#if FABLE_COMPILER_PYTHON
        let v618 : string = "\u001b[94m"
        let v619 : string = method8()
        let v620 : string = v618 + v566 
        let v621 : string = v620 + v619 
        let _v580 = v621 
        #endif
#else
        let v622 : string = "\u001b[94m"
        let v623 : string = method8()
        let v624 : string = v622 + v566 
        let v625 : string = v624 + v623 
        let _v580 = v625 
        #endif
        let v626 : string = _v580 
        let v632 : int64 = v93.l0
        let v633 : string = method9()
        let v634 : Mut4 = {l0 = v633} : Mut4
        let v635 : string = "{ "
        let v636 : string = $"{v635}"
        let v639 : unit = ()
        let v640 : (unit -> unit) = closure10(v634, v636)
        let v641 : unit = (fun () -> v640 (); v639) ()
        let v644 : string = "file_name"
        let v645 : string = $"{v644}"
        let v648 : unit = ()
        let v649 : (unit -> unit) = closure10(v634, v645)
        let v650 : unit = (fun () -> v649 (); v648) ()
        let v653 : string = " = "
        let v654 : string = $"{v653}"
        let v657 : unit = ()
        let v658 : (unit -> unit) = closure10(v634, v654)
        let v659 : unit = (fun () -> v658 (); v657) ()
        let v662 : string = $"{v7}"
        let v665 : unit = ()
        let v666 : (unit -> unit) = closure10(v634, v662)
        let v667 : unit = (fun () -> v666 (); v665) ()
        let v670 : string = "; "
        let v671 : string = $"{v670}"
        let v674 : unit = ()
        let v675 : (unit -> unit) = closure10(v634, v671)
        let v676 : unit = (fun () -> v675 (); v674) ()
        let v679 : string = "arguments"
        let v680 : string = $"{v679}"
        let v683 : unit = ()
        let v684 : (unit -> unit) = closure10(v634, v680)
        let v685 : unit = (fun () -> v684 (); v683) ()
        let v688 : string = $"{v653}"
        let v691 : unit = ()
        let v692 : (unit -> unit) = closure10(v634, v688)
        let v693 : unit = (fun () -> v692 (); v691) ()
        let v696 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v697 : string = "format!(\"{:#?}\", $0)"
        let v698 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v697 
        let v699 : string = "fable_library_rust::String_::fromString($0)"
        let v700 : string = Fable.Core.RustInterop.emitRustExpr v698 v699 
        let _v696 = v700 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v696 = v704 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v696 = v708 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v709 : string = $"%A{v8}"
        let _v696 = v709 
        #endif
#if FABLE_COMPILER_PYTHON
        let v712 : string = $"%A{v8}"
        let _v696 = v712 
        #endif
#else
        let v715 : string = $"%A{v8}"
        let _v696 = v715 
        #endif
        let v718 : string = _v696 
        let v723 : string = $"{v718}"
        let v726 : unit = ()
        let v727 : (unit -> unit) = closure10(v634, v723)
        let v728 : unit = (fun () -> v727 (); v726) ()
        let v731 : string = $"{v670}"
        let v734 : unit = ()
        let v735 : (unit -> unit) = closure10(v634, v731)
        let v736 : unit = (fun () -> v735 (); v734) ()
        let v739 : string = "options"
        let v740 : string = $"{v739}"
        let v743 : unit = ()
        let v744 : (unit -> unit) = closure10(v634, v740)
        let v745 : unit = (fun () -> v744 (); v743) ()
        let v748 : string = $"{v653}"
        let v751 : unit = ()
        let v752 : (unit -> unit) = closure10(v634, v748)
        let v753 : unit = (fun () -> v752 (); v751) ()
        let v756 : string = $"{v635}"
        let v759 : unit = ()
        let v760 : (unit -> unit) = closure10(v634, v756)
        let v761 : unit = (fun () -> v760 (); v759) ()
        let v764 : string = "command"
        let v765 : string = $"{v764}"
        let v768 : unit = ()
        let v769 : (unit -> unit) = closure10(v634, v765)
        let v770 : unit = (fun () -> v769 (); v768) ()
        let v773 : string = $"{v653}"
        let v776 : unit = ()
        let v777 : (unit -> unit) = closure10(v634, v773)
        let v778 : unit = (fun () -> v777 (); v776) ()
        let v781 : string = $"{v0}"
        let v784 : unit = ()
        let v785 : (unit -> unit) = closure10(v634, v781)
        let v786 : unit = (fun () -> v785 (); v784) ()
        let v789 : string = $"{v670}"
        let v792 : unit = ()
        let v793 : (unit -> unit) = closure10(v634, v789)
        let v794 : unit = (fun () -> v793 (); v792) ()
        let v797 : string = "cancellation_token"
        let v798 : string = $"{v797}"
        let v801 : unit = ()
        let v802 : (unit -> unit) = closure10(v634, v798)
        let v803 : unit = (fun () -> v802 (); v801) ()
        let v806 : string = $"{v653}"
        let v809 : unit = ()
        let v810 : (unit -> unit) = closure10(v634, v806)
        let v811 : unit = (fun () -> v810 (); v809) ()
        let v814 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v815 : string = "format!(\"{:#?}\", $0)"
        let v816 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v815 
        let v817 : string = "fable_library_rust::String_::fromString($0)"
        let v818 : string = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let _v814 = v818 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v819 : string = "format!(\"{:#?}\", $0)"
        let v820 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v819 
        let v821 : string = "fable_library_rust::String_::fromString($0)"
        let v822 : string = Fable.Core.RustInterop.emitRustExpr v820 v821 
        let _v814 = v822 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v823 : string = "format!(\"{:#?}\", $0)"
        let v824 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v823 
        let v825 : string = "fable_library_rust::String_::fromString($0)"
        let v826 : string = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let _v814 = v826 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v827 : string = $"%A{v1}"
        let _v814 = v827 
        #endif
#if FABLE_COMPILER_PYTHON
        let v830 : string = $"%A{v1}"
        let _v814 = v830 
        #endif
#else
        let v833 : string = $"%A{v1}"
        let _v814 = v833 
        #endif
        let v836 : string = _v814 
        let v841 : string = $"{v836}"
        let v844 : unit = ()
        let v845 : (unit -> unit) = closure10(v634, v841)
        let v846 : unit = (fun () -> v845 (); v844) ()
        let v849 : string = $"{v670}"
        let v852 : unit = ()
        let v853 : (unit -> unit) = closure10(v634, v849)
        let v854 : unit = (fun () -> v853 (); v852) ()
        let v857 : string = "environment_variables"
        let v858 : string = $"{v857}"
        let v861 : unit = ()
        let v862 : (unit -> unit) = closure10(v634, v858)
        let v863 : unit = (fun () -> v862 (); v861) ()
        let v866 : string = $"{v653}"
        let v869 : unit = ()
        let v870 : (unit -> unit) = closure10(v634, v866)
        let v871 : unit = (fun () -> v870 (); v869) ()
        let v874 : string = $"%A{v2}"
        let v877 : string = $"{v874}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure10(v634, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = $"{v670}"
        let v888 : unit = ()
        let v889 : (unit -> unit) = closure10(v634, v885)
        let v890 : unit = (fun () -> v889 (); v888) ()
        let v893 : string = "on_line"
        let v894 : string = $"{v893}"
        let v897 : unit = ()
        let v898 : (unit -> unit) = closure10(v634, v894)
        let v899 : unit = (fun () -> v898 (); v897) ()
        let v902 : string = $"{v653}"
        let v905 : unit = ()
        let v906 : (unit -> unit) = closure10(v634, v902)
        let v907 : unit = (fun () -> v906 (); v905) ()
        let v910 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v911 : string = "format!(\"{:#?}\", $0)"
        let v912 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v911 
        let v913 : string = "fable_library_rust::String_::fromString($0)"
        let v914 : string = Fable.Core.RustInterop.emitRustExpr v912 v913 
        let _v910 = v914 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v915 : string = "format!(\"{:#?}\", $0)"
        let v916 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v915 
        let v917 : string = "fable_library_rust::String_::fromString($0)"
        let v918 : string = Fable.Core.RustInterop.emitRustExpr v916 v917 
        let _v910 = v918 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v919 : string = "format!(\"{:#?}\", $0)"
        let v920 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v919 
        let v921 : string = "fable_library_rust::String_::fromString($0)"
        let v922 : string = Fable.Core.RustInterop.emitRustExpr v920 v921 
        let _v910 = v922 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v923 : string = $"%A{v3}"
        let _v910 = v923 
        #endif
#if FABLE_COMPILER_PYTHON
        let v926 : string = $"%A{v3}"
        let _v910 = v926 
        #endif
#else
        let v929 : string = $"%A{v3}"
        let _v910 = v929 
        #endif
        let v932 : string = _v910 
        let v937 : string = $"{v932}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure10(v634, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = $"{v670}"
        let v948 : unit = ()
        let v949 : (unit -> unit) = closure10(v634, v945)
        let v950 : unit = (fun () -> v949 (); v948) ()
        let v953 : string = "stdin"
        let v954 : string = $"{v953}"
        let v957 : unit = ()
        let v958 : (unit -> unit) = closure10(v634, v954)
        let v959 : unit = (fun () -> v958 (); v957) ()
        let v962 : string = $"{v653}"
        let v965 : unit = ()
        let v966 : (unit -> unit) = closure10(v634, v962)
        let v967 : unit = (fun () -> v966 (); v965) ()
        let v970 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v971 : string = "format!(\"{:#?}\", $0)"
        let v972 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v971 
        let v973 : string = "fable_library_rust::String_::fromString($0)"
        let v974 : string = Fable.Core.RustInterop.emitRustExpr v972 v973 
        let _v970 = v974 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v975 : string = "format!(\"{:#?}\", $0)"
        let v976 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v975 
        let v977 : string = "fable_library_rust::String_::fromString($0)"
        let v978 : string = Fable.Core.RustInterop.emitRustExpr v976 v977 
        let _v970 = v978 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v979 : string = "format!(\"{:#?}\", $0)"
        let v980 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v979 
        let v981 : string = "fable_library_rust::String_::fromString($0)"
        let v982 : string = Fable.Core.RustInterop.emitRustExpr v980 v981 
        let _v970 = v982 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v983 : string = $"%A{v4}"
        let _v970 = v983 
        #endif
#if FABLE_COMPILER_PYTHON
        let v986 : string = $"%A{v4}"
        let _v970 = v986 
        #endif
#else
        let v989 : string = $"%A{v4}"
        let _v970 = v989 
        #endif
        let v992 : string = _v970 
        let v997 : string = $"{v992}"
        let v1000 : unit = ()
        let v1001 : (unit -> unit) = closure10(v634, v997)
        let v1002 : unit = (fun () -> v1001 (); v1000) ()
        let v1005 : string = $"{v670}"
        let v1008 : unit = ()
        let v1009 : (unit -> unit) = closure10(v634, v1005)
        let v1010 : unit = (fun () -> v1009 (); v1008) ()
        let v1013 : string = "trace"
        let v1014 : string = $"{v1013}"
        let v1017 : unit = ()
        let v1018 : (unit -> unit) = closure10(v634, v1014)
        let v1019 : unit = (fun () -> v1018 (); v1017) ()
        let v1022 : string = $"{v653}"
        let v1025 : unit = ()
        let v1026 : (unit -> unit) = closure10(v634, v1022)
        let v1027 : unit = (fun () -> v1026 (); v1025) ()
        let v1032 : string =
            if v5 then
                let v1030 : string = "true"
                v1030
            else
                let v1031 : string = "false"
                v1031
        let v1033 : string = $"{v1032}"
        let v1036 : unit = ()
        let v1037 : (unit -> unit) = closure10(v634, v1033)
        let v1038 : unit = (fun () -> v1037 (); v1036) ()
        let v1041 : string = $"{v670}"
        let v1044 : unit = ()
        let v1045 : (unit -> unit) = closure10(v634, v1041)
        let v1046 : unit = (fun () -> v1045 (); v1044) ()
        let v1049 : string = "working_directory"
        let v1050 : string = $"{v1049}"
        let v1053 : unit = ()
        let v1054 : (unit -> unit) = closure10(v634, v1050)
        let v1055 : unit = (fun () -> v1054 (); v1053) ()
        let v1058 : string = $"{v653}"
        let v1061 : unit = ()
        let v1062 : (unit -> unit) = closure10(v634, v1058)
        let v1063 : unit = (fun () -> v1062 (); v1061) ()
        let v1066 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1067 : string = "format!(\"{:#?}\", $0)"
        let v1068 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1067 
        let v1069 : string = "fable_library_rust::String_::fromString($0)"
        let v1070 : string = Fable.Core.RustInterop.emitRustExpr v1068 v1069 
        let _v1066 = v1070 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1071 : string = "format!(\"{:#?}\", $0)"
        let v1072 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1071 
        let v1073 : string = "fable_library_rust::String_::fromString($0)"
        let v1074 : string = Fable.Core.RustInterop.emitRustExpr v1072 v1073 
        let _v1066 = v1074 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1075 : string = "format!(\"{:#?}\", $0)"
        let v1076 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1075 
        let v1077 : string = "fable_library_rust::String_::fromString($0)"
        let v1078 : string = Fable.Core.RustInterop.emitRustExpr v1076 v1077 
        let _v1066 = v1078 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1079 : string = $"%A{v6}"
        let _v1066 = v1079 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1082 : string = $"%A{v6}"
        let _v1066 = v1082 
        #endif
#else
        let v1085 : string = $"%A{v6}"
        let _v1066 = v1085 
        #endif
        let v1088 : string = _v1066 
        let v1093 : string = $"{v1088}"
        let v1096 : unit = ()
        let v1097 : (unit -> unit) = closure10(v634, v1093)
        let v1098 : unit = (fun () -> v1097 (); v1096) ()
        let v1101 : string = " }"
        let v1102 : string = $"{v1101}"
        let v1105 : unit = ()
        let v1106 : (unit -> unit) = closure10(v634, v1102)
        let v1107 : unit = (fun () -> v1106 (); v1105) ()
        let v1110 : string = $"{v1101}"
        let v1113 : unit = ()
        let v1114 : (unit -> unit) = closure10(v634, v1110)
        let v1115 : unit = (fun () -> v1114 (); v1113) ()
        let v1118 : string = v634.l0
        let v1119 : (unit -> string) = closure44()
        let v1120 : string = $"{v491} {v626} #{v632} %s{v1119 ()} / {v1118}"
        let v1123 : char list = []
        let v1124 : (char list -> (char [])) = List.toArray
        let v1125 : (char []) = v1124 v1123
        let v1128 : string = v1120.TrimStart v1125 
        let v1146 : char list = []
        let v1147 : char list = '/' :: v1146 
        let v1150 : char list = ' ' :: v1147 
        let v1153 : (char list -> (char [])) = List.toArray
        let v1154 : (char []) = v1153 v1150
        let v1157 : string = v1128.TrimEnd v1154 
        let v1175 : (string -> unit) = closure12()
        let v1176 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1177 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1157 v1177 
        let _v1176 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1178 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1157 v1178 
        let _v1176 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1179 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1157 v1179 
        let _v1176 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1175 v1157
        let _v1176 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1175 v1157
        let _v1176 = () 
        #endif
#else
        v1175 v1157
        let _v1176 = () 
        #endif
        _v1176 
        let v1180 : (string -> unit) = v25.l0
        v1180 v1157
and closure45 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US24 =
    US24_0(v0)
and method65 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) =
    closure45()
and closure46 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method66 () : (std_string_String -> US24) =
    closure46()
and closure48 () () : string =
    let v0 : string = $"runtime.execute_with_options / child error"
    v0
and closure47 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Critical"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_red"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_red"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_red"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[91m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[91m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[91m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "error"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v655 : string = "format!(\"{:#?}\", $0)"
        let v656 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v655 
        let v657 : string = "fable_library_rust::String_::fromString($0)"
        let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
        let _v654 = v658 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v659 : string = "format!(\"{:#?}\", $0)"
        let v660 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v659 
        let v661 : string = "fable_library_rust::String_::fromString($0)"
        let v662 : string = Fable.Core.RustInterop.emitRustExpr v660 v661 
        let _v654 = v662 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v663 : string = "format!(\"{:#?}\", $0)"
        let v664 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v663 
        let v665 : string = "fable_library_rust::String_::fromString($0)"
        let v666 : string = Fable.Core.RustInterop.emitRustExpr v664 v665 
        let _v654 = v666 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v667 : string = $"%A{v0}"
        let _v654 = v667 
        #endif
#if FABLE_COMPILER_PYTHON
        let v670 : string = $"%A{v0}"
        let _v654 = v670 
        #endif
#else
        let v673 : string = $"%A{v0}"
        let _v654 = v673 
        #endif
        let v676 : string = _v654 
        let v681 : string = $"{v676}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v626, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = " }"
        let v690 : string = $"{v689}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v626, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = v626.l0
        let v699 : (unit -> string) = closure48()
        let v700 : string = $"{v483} {v618} #{v624} %s{v699 ()} / {v698}"
        let v703 : char list = []
        let v704 : (char list -> (char [])) = List.toArray
        let v705 : (char []) = v704 v703
        let v708 : string = v700.TrimStart v705 
        let v726 : char list = []
        let v727 : char list = '/' :: v726 
        let v730 : char list = ' ' :: v727 
        let v733 : (char list -> (char [])) = List.toArray
        let v734 : (char []) = v733 v730
        let v737 : string = v708.TrimEnd v734 
        let v755 : (string -> unit) = closure12()
        let v756 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v757 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v757 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v758 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v758 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v759 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v759 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v755 v737
        let _v756 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v755 v737
        let _v756 = () 
        #endif
#else
        v755 v737
        let _v756 = () 
        #endif
        _v756 
        let v760 : (string -> unit) = v17.l0
        v760 v737
and method67 (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : std_sync_Arc<std_sync_Mutex<std_process_Child option>> =
    v0
and closure49 () (v0 : std_string_String) : US26 =
    US26_0(v0)
and method68 () : (std_string_String -> US26) =
    closure49()
and closure50 () (v0 : std_string_String) : US26 =
    US26_1(v0)
and method69 () : (std_string_String -> US26) =
    closure50()
and closure52 () () : string =
    let v0 : string = $"runtime.stdio_line"
    v0
and closure51 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Critical"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_red"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_red"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_red"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[91m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[91m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[91m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "e"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v655 : string = "format!(\"{:#?}\", $0)"
        let v656 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v655 
        let v657 : string = "fable_library_rust::String_::fromString($0)"
        let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
        let _v654 = v658 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v659 : string = "format!(\"{:#?}\", $0)"
        let v660 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v659 
        let v661 : string = "fable_library_rust::String_::fromString($0)"
        let v662 : string = Fable.Core.RustInterop.emitRustExpr v660 v661 
        let _v654 = v662 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v663 : string = "format!(\"{:#?}\", $0)"
        let v664 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v663 
        let v665 : string = "fable_library_rust::String_::fromString($0)"
        let v666 : string = Fable.Core.RustInterop.emitRustExpr v664 v665 
        let _v654 = v666 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v667 : string = $"%A{v0}"
        let _v654 = v667 
        #endif
#if FABLE_COMPILER_PYTHON
        let v670 : string = $"%A{v0}"
        let _v654 = v670 
        #endif
#else
        let v673 : string = $"%A{v0}"
        let _v654 = v673 
        #endif
        let v676 : string = _v654 
        let v681 : string = $"{v676}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v626, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = " }"
        let v690 : string = $"{v689}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v626, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = v626.l0
        let v699 : (unit -> string) = closure52()
        let v700 : string = $"{v483} {v618} #{v624} %s{v699 ()} / {v698}"
        let v703 : char list = []
        let v704 : (char list -> (char [])) = List.toArray
        let v705 : (char []) = v704 v703
        let v708 : string = v700.TrimStart v705 
        let v726 : char list = []
        let v727 : char list = '/' :: v726 
        let v730 : char list = ' ' :: v727 
        let v733 : (char list -> (char [])) = List.toArray
        let v734 : (char []) = v733 v730
        let v737 : string = v708.TrimEnd v734 
        let v755 : (string -> unit) = closure12()
        let v756 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v757 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v757 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v758 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v758 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v759 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v759 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v755 v737
        let _v756 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v755 v737
        let _v756 = () 
        #endif
#else
        v755 v737
        let _v756 = () 
        #endif
        _v756 
        let v760 : (string -> unit) = v17.l0
        v760 v737
and closure54 (v0 : string) () : string =
    v0
and closure53 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = v626.l0
        let v628 : (unit -> string) = closure54(v0)
        let v629 : string = $"{v483} {v618} #{v624} %s{v628 ()} / {v627}"
        let v632 : char list = []
        let v633 : (char list -> (char [])) = List.toArray
        let v634 : (char []) = v633 v632
        let v637 : string = v629.TrimStart v634 
        let v655 : char list = []
        let v656 : char list = '/' :: v655 
        let v659 : char list = ' ' :: v656 
        let v662 : (char list -> (char [])) = List.toArray
        let v663 : (char []) = v662 v659
        let v666 : string = v637.TrimEnd v663 
        let v684 : (string -> unit) = closure12()
        let v685 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v686 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v686 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v687 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v687 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v688 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v688 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v684 v666
        let _v685 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v684 v666
        let _v685 = () 
        #endif
#else
        v684 v666
        let _v685 = () 
        #endif
        _v685 
        let v689 : (string -> unit) = v17.l0
        v689 v666
and method70 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>>) : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> =
    v0
and closure55 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method71 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure55()
and method72 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure56 (v0 : US27 option ref) (v1 : US27 option) : US27 option ref =
    v0.Value <- v1 
    v0
and closure57 (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v1 : (US27 option -> US27 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) = x
    let v3 : US27 = US27_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method73 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> =
    v0
and closure58 (v0 : US28 option ref) (v1 : US28 option) : US28 option ref =
    v0.Value <- v1 
    v0
and closure59 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option, v1 : (US28 option -> US28 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = x
    let v3 : US28 = US28_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method74 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> =
    v0
and method75 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and method76 (v0 : std_thread_JoinHandle<Result<unit, string>>) : std_thread_JoinHandle<Result<unit, string>> =
    v0
and closure60 () (v0 : std_process_Output) : US29 =
    US29_0(v0)
and closure61 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and closure63 () () : string =
    let v0 : string = $"runtime.execute_with_options / output error"
    v0
and closure62 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Critical"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_red"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_red"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_red"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[91m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[91m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[91m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "error"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v655 : string = "format!(\"{:#?}\", $0)"
        let v656 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v655 
        let v657 : string = "fable_library_rust::String_::fromString($0)"
        let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
        let _v654 = v658 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v659 : string = "format!(\"{:#?}\", $0)"
        let v660 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v659 
        let v661 : string = "fable_library_rust::String_::fromString($0)"
        let v662 : string = Fable.Core.RustInterop.emitRustExpr v660 v661 
        let _v654 = v662 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v663 : string = "format!(\"{:#?}\", $0)"
        let v664 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v663 
        let v665 : string = "fable_library_rust::String_::fromString($0)"
        let v666 : string = Fable.Core.RustInterop.emitRustExpr v664 v665 
        let _v654 = v666 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v667 : string = $"%A{v0}"
        let _v654 = v667 
        #endif
#if FABLE_COMPILER_PYTHON
        let v670 : string = $"%A{v0}"
        let _v654 = v670 
        #endif
#else
        let v673 : string = $"%A{v0}"
        let _v654 = v673 
        #endif
        let v676 : string = _v654 
        let v681 : string = $"{v676}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v626, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = " }"
        let v690 : string = $"{v689}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v626, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = v626.l0
        let v699 : (unit -> string) = closure63()
        let v700 : string = $"{v483} {v618} #{v624} %s{v699 ()} / {v698}"
        let v703 : char list = []
        let v704 : (char list -> (char [])) = List.toArray
        let v705 : (char []) = v704 v703
        let v708 : string = v700.TrimStart v705 
        let v726 : char list = []
        let v727 : char list = '/' :: v726 
        let v730 : char list = ' ' :: v727 
        let v733 : (char list -> (char [])) = List.toArray
        let v734 : (char []) = v733 v730
        let v737 : string = v708.TrimEnd v734 
        let v755 : (string -> unit) = closure12()
        let v756 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v757 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v757 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v758 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v758 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v759 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v759 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v755 v737
        let _v756 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v755 v737
        let _v756 = () 
        #endif
#else
        v755 v737
        let _v756 = () 
        #endif
        _v756 
        let v760 : (string -> unit) = v17.l0
        v760 v737
and closure64 (v0 : US30 option ref) (v1 : US30 option) : US30 option ref =
    v0.Value <- v1 
    v0
and closure65 (v0 : int32 option, v1 : (US30 option -> US30 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : int32 = x
    let v3 : US30 = US30_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method77 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>) : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> =
    v0
and closure67 () () : string =
    let v0 : string = $"runtime.execute_with_options / result"
    v0
and closure66 (v0 : int32, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 0 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Verbose"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_black"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[90m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[90m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[90m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : int32 = v1.Length
        let v627 : string = method9()
        let v628 : Mut4 = {l0 = v627} : Mut4
        let v629 : string = "{ "
        let v630 : string = $"{v629}"
        let v633 : unit = ()
        let v634 : (unit -> unit) = closure10(v628, v630)
        let v635 : unit = (fun () -> v634 (); v633) ()
        let v638 : string = "exit_code"
        let v639 : string = $"{v638}"
        let v642 : unit = ()
        let v643 : (unit -> unit) = closure10(v628, v639)
        let v644 : unit = (fun () -> v643 (); v642) ()
        let v647 : string = " = "
        let v648 : string = $"{v647}"
        let v651 : unit = ()
        let v652 : (unit -> unit) = closure10(v628, v648)
        let v653 : unit = (fun () -> v652 (); v651) ()
        let v656 : string = $"{v0}"
        let v659 : unit = ()
        let v660 : (unit -> unit) = closure10(v628, v656)
        let v661 : unit = (fun () -> v660 (); v659) ()
        let v664 : string = "; "
        let v665 : string = $"{v664}"
        let v668 : unit = ()
        let v669 : (unit -> unit) = closure10(v628, v665)
        let v670 : unit = (fun () -> v669 (); v668) ()
        let v673 : string = "std_trace_length"
        let v674 : string = $"{v673}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure10(v628, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = $"{v647}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v628, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = $"{v626}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v628, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = " }"
        let v699 : string = $"{v698}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v628, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = v628.l0
        let v708 : (unit -> string) = closure67()
        let v709 : string = $"{v484} {v619} #{v625} %s{v708 ()} / {v707}"
        let v712 : char list = []
        let v713 : (char list -> (char [])) = List.toArray
        let v714 : (char []) = v713 v712
        let v717 : string = v709.TrimStart v714 
        let v735 : char list = []
        let v736 : char list = '/' :: v735 
        let v739 : char list = ' ' :: v736 
        let v742 : (char list -> (char [])) = List.toArray
        let v743 : (char []) = v742 v739
        let v746 : string = v717.TrimEnd v743 
        let v764 : (string -> unit) = closure12()
        let v765 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v766 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v767 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v767 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v768 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v768 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v764 v746
        let _v765 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v764 v746
        let _v765 = () 
        #endif
#else
        v764 v746
        let _v765 = () 
        #endif
        _v765 
        let v769 : (string -> unit) = v18.l0
        v769 v746
and closure69 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure68 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) () : unit =
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure2()
    let v9 : unit = (fun () -> v8 (); v7) ()
    let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : int64 option) = State.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v8 (); v37) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : int64 option) = State.trace_state.Value
    let v66 : US0 = v54.l0
    let v67 : bool = v53.l0
    let v68 : bool = v67 = false
    let v71 : bool =
        if v68 then
            false
        else
            let v69 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v66
            let v70 : bool = 1 >= v69
            v70
    if v71 then
        let v72 : unit = ()
        let v73 : (unit -> unit) = closure7(v22)
        let v74 : unit = (fun () -> v73 (); v72) ()
        let v77 : unit = ()
        let v78 : unit = (fun () -> v8 (); v77) ()
        let struct (v91 : Mut0, v92 : Mut1, v93 : Mut2, v94 : Mut3, v95 : int64 option) = State.trace_state.Value
        let v106 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v107 : US3 option = None
        let _v107 = ref v107 
        let v108 : US3 option ref = _v107 
        let v109 : (US3 option -> US3 option ref) = closure8(v108)
        let v110 : unit = ()
        let v111 : (unit -> unit) = closure9(v95, v109)
        let v112 : unit = (fun () -> v111 (); v110) ()
        let v115 : US3 option = _v107.Value 
        let v126 : US3 = US3_1
        let v127 : US3 = v115 |> Option.defaultValue v126 
        let v167 : System.DateTime =
            match v127 with
            | US3_1 -> (* None *)
                let v163 : System.DateTime = System.DateTime.Now
                v163
            | US3_0(v131) -> (* Some *)
                let v132 : System.DateTime = System.DateTime.Now
                let v135 : (System.DateTime -> int64) = _.Ticks
                let v136 : int64 = v135 v132
                let v139 : int64 = v136 - v131
                let v140 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v141 : System.TimeSpan = v140 v139
                let v144 : (System.TimeSpan -> int32) = _.Hours
                let v145 : int32 = v144 v141
                let v148 : (System.TimeSpan -> int32) = _.Minutes
                let v149 : int32 = v148 v141
                let v152 : (System.TimeSpan -> int32) = _.Seconds
                let v153 : int32 = v152 v141
                let v156 : (System.TimeSpan -> int32) = _.Milliseconds
                let v157 : int32 = v156 v141
                let v160 : System.DateTime = System.DateTime (1, 1, 1, v145, v149, v153, v157)
                v160
        let v168 : string = method6()
        let v171 : (string -> string) = v167.ToString
        let v172 : string = v171 v168
        let _v106 = v172 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v175 : US3 option = None
        let _v175 = ref v175 
        let v176 : US3 option ref = _v175 
        let v177 : (US3 option -> US3 option ref) = closure8(v176)
        let v178 : unit = ()
        let v179 : (unit -> unit) = closure9(v95, v177)
        let v180 : unit = (fun () -> v179 (); v178) ()
        let v183 : US3 option = _v175.Value 
        let v194 : US3 = US3_1
        let v195 : US3 = v183 |> Option.defaultValue v194 
        let v235 : System.DateTime =
            match v195 with
            | US3_1 -> (* None *)
                let v231 : System.DateTime = System.DateTime.Now
                v231
            | US3_0(v199) -> (* Some *)
                let v200 : System.DateTime = System.DateTime.Now
                let v203 : (System.DateTime -> int64) = _.Ticks
                let v204 : int64 = v203 v200
                let v207 : int64 = v204 - v199
                let v208 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v209 : System.TimeSpan = v208 v207
                let v212 : (System.TimeSpan -> int32) = _.Hours
                let v213 : int32 = v212 v209
                let v216 : (System.TimeSpan -> int32) = _.Minutes
                let v217 : int32 = v216 v209
                let v220 : (System.TimeSpan -> int32) = _.Seconds
                let v221 : int32 = v220 v209
                let v224 : (System.TimeSpan -> int32) = _.Milliseconds
                let v225 : int32 = v224 v209
                let v228 : System.DateTime = System.DateTime (1, 1, 1, v213, v217, v221, v225)
                v228
        let v236 : string = method6()
        let v239 : (string -> string) = v235.ToString
        let v240 : string = v239 v236
        let _v106 = v240 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v243 : string = $"near_sdk::env::block_timestamp()"
        let v244 : uint64 = Fable.Core.RustInterop.emitRustExpr () v243 
        let v245 : US3 option = None
        let _v245 = ref v245 
        let v246 : US3 option ref = _v245 
        let v247 : (US3 option -> US3 option ref) = closure8(v246)
        let v248 : unit = ()
        let v249 : (unit -> unit) = closure9(v95, v247)
        let v250 : unit = (fun () -> v249 (); v248) ()
        let v253 : US3 option = _v245.Value 
        let v264 : US3 = US3_1
        let v265 : US3 = v253 |> Option.defaultValue v264 
        let v274 : uint64 =
            match v265 with
            | US3_1 -> (* None *)
                v244
            | US3_0(v269) -> (* Some *)
                let v270 : (int64 -> uint64) = uint64
                let v271 : uint64 = v270 v269
                let v272 : uint64 = v244 - v271
                v272
        let v275 : uint64 = v274 / 1000000000UL
        let v276 : uint64 = v275 % 60UL
        let v277 : uint64 = v275 / 60UL
        let v278 : uint64 = v277 % 60UL
        let v279 : uint64 = v275 / 3600UL
        let v280 : uint64 = v279 % 24UL
        let v281 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v282 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v280, v278, v276) v281 
        let v283 : string = "fable_library_rust::String_::fromString($0)"
        let v284 : string = Fable.Core.RustInterop.emitRustExpr v282 v283 
        let _v106 = v284 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v285 : US3 option = None
        let _v285 = ref v285 
        let v286 : US3 option ref = _v285 
        let v287 : (US3 option -> US3 option ref) = closure8(v286)
        let v288 : unit = ()
        let v289 : (unit -> unit) = closure9(v95, v287)
        let v290 : unit = (fun () -> v289 (); v288) ()
        let v293 : US3 option = _v285.Value 
        let v304 : US3 = US3_1
        let v305 : US3 = v293 |> Option.defaultValue v304 
        let v345 : System.DateTime =
            match v305 with
            | US3_1 -> (* None *)
                let v341 : System.DateTime = System.DateTime.Now
                v341
            | US3_0(v309) -> (* Some *)
                let v310 : System.DateTime = System.DateTime.Now
                let v313 : (System.DateTime -> int64) = _.Ticks
                let v314 : int64 = v313 v310
                let v317 : int64 = v314 - v309
                let v318 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v319 : System.TimeSpan = v318 v317
                let v322 : (System.TimeSpan -> int32) = _.Hours
                let v323 : int32 = v322 v319
                let v326 : (System.TimeSpan -> int32) = _.Minutes
                let v327 : int32 = v326 v319
                let v330 : (System.TimeSpan -> int32) = _.Seconds
                let v331 : int32 = v330 v319
                let v334 : (System.TimeSpan -> int32) = _.Milliseconds
                let v335 : int32 = v334 v319
                let v338 : System.DateTime = System.DateTime (1, 1, 1, v323, v327, v331, v335)
                v338
        let v346 : string = method7()
        let v349 : (string -> string) = v345.ToString
        let v350 : string = v349 v346
        let _v106 = v350 
        #endif
#if FABLE_COMPILER_PYTHON
        let v353 : US3 option = None
        let _v353 = ref v353 
        let v354 : US3 option ref = _v353 
        let v355 : (US3 option -> US3 option ref) = closure8(v354)
        let v356 : unit = ()
        let v357 : (unit -> unit) = closure9(v95, v355)
        let v358 : unit = (fun () -> v357 (); v356) ()
        let v361 : US3 option = _v353.Value 
        let v372 : US3 = US3_1
        let v373 : US3 = v361 |> Option.defaultValue v372 
        let v413 : System.DateTime =
            match v373 with
            | US3_1 -> (* None *)
                let v409 : System.DateTime = System.DateTime.Now
                v409
            | US3_0(v377) -> (* Some *)
                let v378 : System.DateTime = System.DateTime.Now
                let v381 : (System.DateTime -> int64) = _.Ticks
                let v382 : int64 = v381 v378
                let v385 : int64 = v382 - v377
                let v386 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v387 : System.TimeSpan = v386 v385
                let v390 : (System.TimeSpan -> int32) = _.Hours
                let v391 : int32 = v390 v387
                let v394 : (System.TimeSpan -> int32) = _.Minutes
                let v395 : int32 = v394 v387
                let v398 : (System.TimeSpan -> int32) = _.Seconds
                let v399 : int32 = v398 v387
                let v402 : (System.TimeSpan -> int32) = _.Milliseconds
                let v403 : int32 = v402 v387
                let v406 : System.DateTime = System.DateTime (1, 1, 1, v391, v395, v399, v403)
                v406
        let v414 : string = method7()
        let v417 : (string -> string) = v413.ToString
        let v418 : string = v417 v414
        let _v106 = v418 
        #endif
#else
        let v421 : US3 option = None
        let _v421 = ref v421 
        let v422 : US3 option ref = _v421 
        let v423 : (US3 option -> US3 option ref) = closure8(v422)
        let v424 : unit = ()
        let v425 : (unit -> unit) = closure9(v95, v423)
        let v426 : unit = (fun () -> v425 (); v424) ()
        let v429 : US3 option = _v421.Value 
        let v440 : US3 = US3_1
        let v441 : US3 = v429 |> Option.defaultValue v440 
        let v481 : System.DateTime =
            match v441 with
            | US3_1 -> (* None *)
                let v477 : System.DateTime = System.DateTime.Now
                v477
            | US3_0(v445) -> (* Some *)
                let v446 : System.DateTime = System.DateTime.Now
                let v449 : (System.DateTime -> int64) = _.Ticks
                let v450 : int64 = v449 v446
                let v453 : int64 = v450 - v445
                let v454 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v455 : System.TimeSpan = v454 v453
                let v458 : (System.TimeSpan -> int32) = _.Hours
                let v459 : int32 = v458 v455
                let v462 : (System.TimeSpan -> int32) = _.Minutes
                let v463 : int32 = v462 v455
                let v466 : (System.TimeSpan -> int32) = _.Seconds
                let v467 : int32 = v466 v455
                let v470 : (System.TimeSpan -> int32) = _.Milliseconds
                let v471 : int32 = v470 v455
                let v474 : System.DateTime = System.DateTime (1, 1, 1, v459, v463, v467, v471)
                v474
        let v482 : string = method7()
        let v485 : (string -> string) = v481.ToString
        let v486 : string = v485 v482
        let _v106 = v486 
        #endif
        let v489 : string = _v106 
        let v559 : string = "Debug"
        let v560 : (unit -> string) = v559.ToLower
        let v561 : string = v560 ()
        let v564 : string = v561.PadLeft (7, ' ')
        let v578 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v579 : string = "inline_colorization::color_bright_blue"
        let v580 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v579 
        let v581 : string = "&*$0"
        let v582 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v564 v581 
        let v583 : string = "inline_colorization::color_reset"
        let v584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "\"{v580}{v582}{v584}\""
        let v586 : string = @$"format!(" + v585 + ")"
        let v587 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "fable_library_rust::String_::fromString($0)"
        let v589 : string = Fable.Core.RustInterop.emitRustExpr v587 v588 
        let _v578 = v589 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v590 : string = "inline_colorization::color_bright_blue"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "&*$0"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v564 v592 
        let v594 : string = "inline_colorization::color_reset"
        let v595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "\"{v591}{v593}{v595}\""
        let v597 : string = @$"format!(" + v596 + ")"
        let v598 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "fable_library_rust::String_::fromString($0)"
        let v600 : string = Fable.Core.RustInterop.emitRustExpr v598 v599 
        let _v578 = v600 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v601 : string = "inline_colorization::color_bright_blue"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "&*$0"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v564 v603 
        let v605 : string = "inline_colorization::color_reset"
        let v606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "\"{v602}{v604}{v606}\""
        let v608 : string = @$"format!(" + v607 + ")"
        let v609 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "fable_library_rust::String_::fromString($0)"
        let v611 : string = Fable.Core.RustInterop.emitRustExpr v609 v610 
        let _v578 = v611 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v612 : string = "\u001b[94m"
        let v613 : string = method8()
        let v614 : string = v612 + v564 
        let v615 : string = v614 + v613 
        let _v578 = v615 
        #endif
#if FABLE_COMPILER_PYTHON
        let v616 : string = "\u001b[94m"
        let v617 : string = method8()
        let v618 : string = v616 + v564 
        let v619 : string = v618 + v617 
        let _v578 = v619 
        #endif
#else
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v564 
        let v623 : string = v622 + v621 
        let _v578 = v623 
        #endif
        let v624 : string = _v578 
        let v630 : int64 = v91.l0
        let v631 : string = method9()
        let v632 : Mut4 = {l0 = v631} : Mut4
        let v633 : string = "{ "
        let v634 : string = $"{v633}"
        let v637 : unit = ()
        let v638 : (unit -> unit) = closure10(v632, v634)
        let v639 : unit = (fun () -> v638 (); v637) ()
        let v642 : string = "options"
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v632, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = " = "
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v632, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = $"{v633}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure10(v632, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = "command"
        let v669 : string = $"{v668}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure10(v632, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = $"{v651}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure10(v632, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = $"{v0}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure10(v632, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = "; "
        let v694 : string = $"{v693}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v632, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = "cancellation_token"
        let v703 : string = $"{v702}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v632, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = $"{v651}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v632, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v720 : string = "format!(\"{:#?}\", $0)"
        let v721 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v720 
        let v722 : string = "fable_library_rust::String_::fromString($0)"
        let v723 : string = Fable.Core.RustInterop.emitRustExpr v721 v722 
        let _v719 = v723 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v724 : string = "format!(\"{:#?}\", $0)"
        let v725 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v724 
        let v726 : string = "fable_library_rust::String_::fromString($0)"
        let v727 : string = Fable.Core.RustInterop.emitRustExpr v725 v726 
        let _v719 = v727 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v728 : string = "format!(\"{:#?}\", $0)"
        let v729 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v728 
        let v730 : string = "fable_library_rust::String_::fromString($0)"
        let v731 : string = Fable.Core.RustInterop.emitRustExpr v729 v730 
        let _v719 = v731 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v732 : string = $"%A{v1}"
        let _v719 = v732 
        #endif
#if FABLE_COMPILER_PYTHON
        let v735 : string = $"%A{v1}"
        let _v719 = v735 
        #endif
#else
        let v738 : string = $"%A{v1}"
        let _v719 = v738 
        #endif
        let v741 : string = _v719 
        let v746 : string = $"{v741}"
        let v749 : unit = ()
        let v750 : (unit -> unit) = closure10(v632, v746)
        let v751 : unit = (fun () -> v750 (); v749) ()
        let v754 : string = $"{v693}"
        let v757 : unit = ()
        let v758 : (unit -> unit) = closure10(v632, v754)
        let v759 : unit = (fun () -> v758 (); v757) ()
        let v762 : string = "environment_variables"
        let v763 : string = $"{v762}"
        let v766 : unit = ()
        let v767 : (unit -> unit) = closure10(v632, v763)
        let v768 : unit = (fun () -> v767 (); v766) ()
        let v771 : string = $"{v651}"
        let v774 : unit = ()
        let v775 : (unit -> unit) = closure10(v632, v771)
        let v776 : unit = (fun () -> v775 (); v774) ()
        let v779 : string = $"%A{v2}"
        let v782 : string = $"{v779}"
        let v785 : unit = ()
        let v786 : (unit -> unit) = closure10(v632, v782)
        let v787 : unit = (fun () -> v786 (); v785) ()
        let v790 : string = $"{v693}"
        let v793 : unit = ()
        let v794 : (unit -> unit) = closure10(v632, v790)
        let v795 : unit = (fun () -> v794 (); v793) ()
        let v798 : string = "on_line"
        let v799 : string = $"{v798}"
        let v802 : unit = ()
        let v803 : (unit -> unit) = closure10(v632, v799)
        let v804 : unit = (fun () -> v803 (); v802) ()
        let v807 : string = $"{v651}"
        let v810 : unit = ()
        let v811 : (unit -> unit) = closure10(v632, v807)
        let v812 : unit = (fun () -> v811 (); v810) ()
        let v815 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v816 : string = "format!(\"{:#?}\", $0)"
        let v817 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v816 
        let v818 : string = "fable_library_rust::String_::fromString($0)"
        let v819 : string = Fable.Core.RustInterop.emitRustExpr v817 v818 
        let _v815 = v819 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v820 : string = "format!(\"{:#?}\", $0)"
        let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v820 
        let v822 : string = "fable_library_rust::String_::fromString($0)"
        let v823 : string = Fable.Core.RustInterop.emitRustExpr v821 v822 
        let _v815 = v823 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v824 : string = "format!(\"{:#?}\", $0)"
        let v825 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v824 
        let v826 : string = "fable_library_rust::String_::fromString($0)"
        let v827 : string = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let _v815 = v827 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v828 : string = $"%A{v3}"
        let _v815 = v828 
        #endif
#if FABLE_COMPILER_PYTHON
        let v831 : string = $"%A{v3}"
        let _v815 = v831 
        #endif
#else
        let v834 : string = $"%A{v3}"
        let _v815 = v834 
        #endif
        let v837 : string = _v815 
        let v842 : string = $"{v837}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure10(v632, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = $"{v693}"
        let v853 : unit = ()
        let v854 : (unit -> unit) = closure10(v632, v850)
        let v855 : unit = (fun () -> v854 (); v853) ()
        let v858 : string = "stdin"
        let v859 : string = $"{v858}"
        let v862 : unit = ()
        let v863 : (unit -> unit) = closure10(v632, v859)
        let v864 : unit = (fun () -> v863 (); v862) ()
        let v867 : string = $"{v651}"
        let v870 : unit = ()
        let v871 : (unit -> unit) = closure10(v632, v867)
        let v872 : unit = (fun () -> v871 (); v870) ()
        let v875 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v876 : string = "format!(\"{:#?}\", $0)"
        let v877 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v876 
        let v878 : string = "fable_library_rust::String_::fromString($0)"
        let v879 : string = Fable.Core.RustInterop.emitRustExpr v877 v878 
        let _v875 = v879 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v880 : string = "format!(\"{:#?}\", $0)"
        let v881 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v880 
        let v882 : string = "fable_library_rust::String_::fromString($0)"
        let v883 : string = Fable.Core.RustInterop.emitRustExpr v881 v882 
        let _v875 = v883 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v884 : string = "format!(\"{:#?}\", $0)"
        let v885 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v884 
        let v886 : string = "fable_library_rust::String_::fromString($0)"
        let v887 : string = Fable.Core.RustInterop.emitRustExpr v885 v886 
        let _v875 = v887 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v888 : string = $"%A{v4}"
        let _v875 = v888 
        #endif
#if FABLE_COMPILER_PYTHON
        let v891 : string = $"%A{v4}"
        let _v875 = v891 
        #endif
#else
        let v894 : string = $"%A{v4}"
        let _v875 = v894 
        #endif
        let v897 : string = _v875 
        let v902 : string = $"{v897}"
        let v905 : unit = ()
        let v906 : (unit -> unit) = closure10(v632, v902)
        let v907 : unit = (fun () -> v906 (); v905) ()
        let v910 : string = $"{v693}"
        let v913 : unit = ()
        let v914 : (unit -> unit) = closure10(v632, v910)
        let v915 : unit = (fun () -> v914 (); v913) ()
        let v918 : string = "trace"
        let v919 : string = $"{v918}"
        let v922 : unit = ()
        let v923 : (unit -> unit) = closure10(v632, v919)
        let v924 : unit = (fun () -> v923 (); v922) ()
        let v927 : string = $"{v651}"
        let v930 : unit = ()
        let v931 : (unit -> unit) = closure10(v632, v927)
        let v932 : unit = (fun () -> v931 (); v930) ()
        let v937 : string =
            if v5 then
                let v935 : string = "true"
                v935
            else
                let v936 : string = "false"
                v936
        let v938 : string = $"{v937}"
        let v941 : unit = ()
        let v942 : (unit -> unit) = closure10(v632, v938)
        let v943 : unit = (fun () -> v942 (); v941) ()
        let v946 : string = $"{v693}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure10(v632, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = "working_directory"
        let v955 : string = $"{v954}"
        let v958 : unit = ()
        let v959 : (unit -> unit) = closure10(v632, v955)
        let v960 : unit = (fun () -> v959 (); v958) ()
        let v963 : string = $"{v651}"
        let v966 : unit = ()
        let v967 : (unit -> unit) = closure10(v632, v963)
        let v968 : unit = (fun () -> v967 (); v966) ()
        let v971 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v972 : string = "format!(\"{:#?}\", $0)"
        let v973 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v972 
        let v974 : string = "fable_library_rust::String_::fromString($0)"
        let v975 : string = Fable.Core.RustInterop.emitRustExpr v973 v974 
        let _v971 = v975 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v976 : string = "format!(\"{:#?}\", $0)"
        let v977 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v976 
        let v978 : string = "fable_library_rust::String_::fromString($0)"
        let v979 : string = Fable.Core.RustInterop.emitRustExpr v977 v978 
        let _v971 = v979 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v980 : string = "format!(\"{:#?}\", $0)"
        let v981 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v980 
        let v982 : string = "fable_library_rust::String_::fromString($0)"
        let v983 : string = Fable.Core.RustInterop.emitRustExpr v981 v982 
        let _v971 = v983 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v984 : string = $"%A{v6}"
        let _v971 = v984 
        #endif
#if FABLE_COMPILER_PYTHON
        let v987 : string = $"%A{v6}"
        let _v971 = v987 
        #endif
#else
        let v990 : string = $"%A{v6}"
        let _v971 = v990 
        #endif
        let v993 : string = _v971 
        let v998 : string = $"{v993}"
        let v1001 : unit = ()
        let v1002 : (unit -> unit) = closure10(v632, v998)
        let v1003 : unit = (fun () -> v1002 (); v1001) ()
        let v1006 : string = " }"
        let v1007 : string = $"{v1006}"
        let v1010 : unit = ()
        let v1011 : (unit -> unit) = closure10(v632, v1007)
        let v1012 : unit = (fun () -> v1011 (); v1010) ()
        let v1015 : string = $"{v1006}"
        let v1018 : unit = ()
        let v1019 : (unit -> unit) = closure10(v632, v1015)
        let v1020 : unit = (fun () -> v1019 (); v1018) ()
        let v1023 : string = v632.l0
        let v1024 : (unit -> string) = closure69()
        let v1025 : string = $"{v489} {v624} #{v630} %s{v1024 ()} / {v1023}"
        let v1028 : char list = []
        let v1029 : (char list -> (char [])) = List.toArray
        let v1030 : (char []) = v1029 v1028
        let v1033 : string = v1025.TrimStart v1030 
        let v1051 : char list = []
        let v1052 : char list = '/' :: v1051 
        let v1055 : char list = ' ' :: v1052 
        let v1058 : (char list -> (char [])) = List.toArray
        let v1059 : (char []) = v1058 v1055
        let v1062 : string = v1033.TrimEnd v1059 
        let v1080 : (string -> unit) = closure12()
        let v1081 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1082 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1082 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1083 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1083 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1084 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1084 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1080 v1062
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1080 v1062
        let _v1081 = () 
        #endif
#else
        v1080 v1062
        let _v1081 = () 
        #endif
        _v1081 
        let v1085 : (string -> unit) = v23.l0
        v1085 v1062
and closure71 (v0 : US31 option ref) (v1 : US31 option) : US31 option ref =
    v0.Value <- v1 
    v0
and closure72 (v0 : (struct (int32 * string * bool) -> Async<unit>) option, v1 : (US31 option -> US31 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : (struct (int32 * string * bool) -> Async<unit>) = x
    let v3 : US31 = US31_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure74 (v0 : string) () : string =
    v0
and closure73 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = v626.l0
        let v628 : (unit -> string) = closure74(v0)
        let v629 : string = $"{v483} {v618} #{v624} %s{v628 ()} / {v627}"
        let v632 : char list = []
        let v633 : (char list -> (char [])) = List.toArray
        let v634 : (char []) = v633 v632
        let v637 : string = v629.TrimStart v634 
        let v655 : char list = []
        let v656 : char list = '/' :: v655 
        let v659 : char list = ' ' :: v656 
        let v662 : (char list -> (char [])) = List.toArray
        let v663 : (char []) = v662 v659
        let v666 : string = v637.TrimEnd v663 
        let v684 : (string -> unit) = closure12()
        let v685 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v686 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v686 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v687 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v687 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v688 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v688 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v684 v666
        let _v685 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v684 v666
        let _v685 = () 
        #endif
#else
        v684 v666
        let _v685 = () 
        #endif
        _v685 
        let v689 : (string -> unit) = v17.l0
        v689 v666
and closure70 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v23 
    #endif
#else
    let v26 : Async<unit> option = None
    let mutable _v26 = v26 
    async {
    let v27 : string = v9.Data
    let v28 : string = null |> unbox<string>
    let v31 : bool = v27 = v28
    let v32 : bool = v31 <> true
    if v32 then
        let v33 : US31 option = None
        let _v33 = ref v33 
        let v34 : US31 option ref = _v33 
        let v35 : (US31 option -> US31 option ref) = closure71(v34)
        let v36 : unit = ()
        let v37 : (unit -> unit) = closure72(v3, v35)
        let v38 : unit = (fun () -> v37 (); v36) ()
        let v41 : US31 option = _v33.Value 
        let v52 : US31 = US31_1
        let v53 : US31 = v41 |> Option.defaultValue v52 
        match v53 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v57) -> (* Some *)
            let v58 : int32 = v7.Id
            let v59 : Async<unit> = v57 struct (v58, v27, false)
            do! v59 
            ()
        let v60 : string = $"> {v27}"
        if v5 then
            let v61 : unit = ()
            let v62 : (unit -> unit) = closure73(v60)
            let v63 : unit = (fun () -> v62 (); v61) ()
            ()
        else
            let v753 : unit = ()
            let v754 : (unit -> unit) = closure13(v60)
            let v755 : unit = (fun () -> v754 (); v753) ()
            ()
        let v757 : string = ""
        let v758 : string = $"{v757}{v27}{v757}"
        let v759 : (string -> unit) = v8.Push
        v759 v758
    ()
    }
    |> fun x -> _v26 <- Some x
    let v760 : Async<unit> = match _v26 with Some x -> x | None -> failwith "async.new_async_unit / _v26=None"
    let _v10 = v760 
    #endif
    let v761 : Async<unit> = _v10 
    let v766 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v766 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v766 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v766 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v766 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v766 = () 
    #endif
#else
    let v767 : (Async<unit> -> unit) = Async.StartImmediate
    v767 v761
    let _v766 = () 
    #endif
    _v766 
    ()
and closure75 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v23 
    #endif
#else
    let v26 : Async<unit> option = None
    let mutable _v26 = v26 
    async {
    let v27 : string = v9.Data
    let v28 : string = null |> unbox<string>
    let v31 : bool = v27 = v28
    let v32 : bool = v31 <> true
    if v32 then
        let v33 : US31 option = None
        let _v33 = ref v33 
        let v34 : US31 option ref = _v33 
        let v35 : (US31 option -> US31 option ref) = closure71(v34)
        let v36 : unit = ()
        let v37 : (unit -> unit) = closure72(v3, v35)
        let v38 : unit = (fun () -> v37 (); v36) ()
        let v41 : US31 option = _v33.Value 
        let v52 : US31 = US31_1
        let v53 : US31 = v41 |> Option.defaultValue v52 
        match v53 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v57) -> (* Some *)
            let v58 : int32 = v7.Id
            let v59 : Async<unit> = v57 struct (v58, v27, true)
            do! v59 
            ()
        let v60 : string = $"! {v27}"
        if v5 then
            let v61 : unit = ()
            let v62 : (unit -> unit) = closure73(v60)
            let v63 : unit = (fun () -> v62 (); v61) ()
            ()
        else
            let v753 : unit = ()
            let v754 : (unit -> unit) = closure13(v60)
            let v755 : unit = (fun () -> v754 (); v753) ()
            ()
        let v757 : string = "\u001b[7;4m"
        let v758 : string = "\u001b[0m"
        let v759 : string = $"{v757}{v27}{v758}"
        let v760 : (string -> unit) = v8.Push
        v760 v759
    ()
    }
    |> fun x -> _v26 <- Some x
    let v761 : Async<unit> = match _v26 with Some x -> x | None -> failwith "async.new_async_unit / _v26=None"
    let _v10 = v761 
    #endif
    let v762 : Async<unit> = _v10 
    let v767 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v767 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v767 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v767 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v767 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v767 = () 
    #endif
#else
    let v768 : (Async<unit> -> unit) = Async.StartImmediate
    v768 v762
    let _v767 = () 
    #endif
    _v767 
    ()
and closure76 (v0 : US32 option ref) (v1 : US32 option) : US32 option ref =
    v0.Value <- v1 
    v0
and closure77 (v0 : System.Threading.CancellationToken option, v1 : (US32 option -> US32 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : System.Threading.CancellationToken = x
    let v3 : US32 = US32_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure78 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = null |> unbox<bool>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : bool = null |> unbox<bool>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : bool = null |> unbox<bool>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : bool = null |> unbox<bool>
    let _v1 = v14 
    #endif
#else
    let v17 : bool = v0.HasExited
    let _v1 = v17 
    #endif
    let v18 : bool = _v1 
    let v23 : bool = v18 = false
    if v23 then
        let v24 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v24 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v24 = () 
        #endif
#else
        let v25 : (unit -> unit) = v0.Kill
        v25 ()
        let _v24 = () 
        #endif
        _v24 
        ()
and closure80 () () : string =
    let v0 : string = $"runtime.execute_with_options_async / WaitForExitAsync"
    v0
and closure79 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Warning"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_yellow"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_yellow"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_yellow"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[93m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[93m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[93m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "ex"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v655 : string = "format!(\"{:#?}\", $0)"
        let v656 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v655 
        let v657 : string = "fable_library_rust::String_::fromString($0)"
        let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
        let _v654 = v658 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v659 : string = "format!(\"{:#?}\", $0)"
        let v660 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v659 
        let v661 : string = "fable_library_rust::String_::fromString($0)"
        let v662 : string = Fable.Core.RustInterop.emitRustExpr v660 v661 
        let _v654 = v662 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v663 : string = "format!(\"{:#?}\", $0)"
        let v664 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v663 
        let v665 : string = "fable_library_rust::String_::fromString($0)"
        let v666 : string = Fable.Core.RustInterop.emitRustExpr v664 v665 
        let _v654 = v666 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v667 : string = $"%A{v0}"
        let _v654 = v667 
        #endif
#if FABLE_COMPILER_PYTHON
        let v670 : string = $"%A{v0}"
        let _v654 = v670 
        #endif
#else
        let v673 : string = $"%A{v0}"
        let _v654 = v673 
        #endif
        let v676 : string = _v654 
        let v681 : string = $"{v676}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v626, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = " }"
        let v690 : string = $"{v689}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v626, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = v626.l0
        let v699 : (unit -> string) = closure80()
        let v700 : string = $"{v483} {v618} #{v624} %s{v699 ()} / {v698}"
        let v703 : char list = []
        let v704 : (char list -> (char [])) = List.toArray
        let v705 : (char []) = v704 v703
        let v708 : string = v700.TrimStart v705 
        let v726 : char list = []
        let v727 : char list = '/' :: v726 
        let v730 : char list = ' ' :: v727 
        let v733 : (char list -> (char [])) = List.toArray
        let v734 : (char []) = v733 v730
        let v737 : string = v708.TrimEnd v734 
        let v755 : (string -> unit) = closure12()
        let v756 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v757 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v757 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v758 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v758 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v759 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v759 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v755 v737
        let _v756 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v755 v737
        let _v756 = () 
        #endif
#else
        v755 v737
        let _v756 = () 
        #endif
        _v756 
        let v760 : (string -> unit) = v17.l0
        v760 v737
and closure82 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure81 (v0 : int32, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Debug"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_blue"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[94m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[94m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[94m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : int32 = v1.Length
        let v627 : string = method9()
        let v628 : Mut4 = {l0 = v627} : Mut4
        let v629 : string = "{ "
        let v630 : string = $"{v629}"
        let v633 : unit = ()
        let v634 : (unit -> unit) = closure10(v628, v630)
        let v635 : unit = (fun () -> v634 (); v633) ()
        let v638 : string = "exit_code"
        let v639 : string = $"{v638}"
        let v642 : unit = ()
        let v643 : (unit -> unit) = closure10(v628, v639)
        let v644 : unit = (fun () -> v643 (); v642) ()
        let v647 : string = " = "
        let v648 : string = $"{v647}"
        let v651 : unit = ()
        let v652 : (unit -> unit) = closure10(v628, v648)
        let v653 : unit = (fun () -> v652 (); v651) ()
        let v656 : string = $"{v0}"
        let v659 : unit = ()
        let v660 : (unit -> unit) = closure10(v628, v656)
        let v661 : unit = (fun () -> v660 (); v659) ()
        let v664 : string = "; "
        let v665 : string = $"{v664}"
        let v668 : unit = ()
        let v669 : (unit -> unit) = closure10(v628, v665)
        let v670 : unit = (fun () -> v669 (); v668) ()
        let v673 : string = "output_length"
        let v674 : string = $"{v673}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure10(v628, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = $"{v647}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v628, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = $"{v626}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v628, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = " }"
        let v699 : string = $"{v698}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v628, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = v628.l0
        let v708 : (unit -> string) = closure82()
        let v709 : string = $"{v484} {v619} #{v625} %s{v708 ()} / {v707}"
        let v712 : char list = []
        let v713 : (char list -> (char [])) = List.toArray
        let v714 : (char []) = v713 v712
        let v717 : string = v709.TrimStart v714 
        let v735 : char list = []
        let v736 : char list = '/' :: v735 
        let v739 : char list = ' ' :: v736 
        let v742 : (char list -> (char [])) = List.toArray
        let v743 : (char []) = v742 v739
        let v746 : string = v717.TrimEnd v743 
        let v764 : (string -> unit) = closure12()
        let v765 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v766 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v767 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v767 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v768 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v768 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v764 v746
        let _v765 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v764 v746
        let _v765 = () 
        #endif
#else
        v764 v746
        let _v765 = () 
        #endif
        _v765 
        let v769 : (string -> unit) = v18.l0
        v769 v746
and method78 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v20 
    #endif
#else
    let v23 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v27 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v36 
    #endif
#else
    let v39 : Async<struct (int32 * string)> option = None
    let mutable _v39 = v39 
    async {
    let v40 : US14 = method42(v0)
    let struct (v49 : string, v50 : US1) =
        match v40 with
        | US14_1(v43) -> (* Error *)
            let v44 : string = $"resultm.get / Result value was Error: {v43}"
            failwith<struct (string * US1)> v44
        | US14_0(v41, v42) -> (* Ok *)
            struct (v41, v42)
    let v51 : US1 option = None
    let _v51 = ref v51 
    let v52 : US1 option ref = _v51 
    let v53 : (US1 option -> US1 option ref) = closure3(v52)
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure4(v6, v53)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v59 : US1 option = _v51.Value 
    let v70 : US1 = US1_1
    let v71 : US1 = v59 |> Option.defaultValue v70 
    let v78 : string =
        match v71 with
        | US1_1 -> (* None *)
            let v76 : string = ""
            v76
        | US1_0(v75) -> (* Some *)
            v75
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure68(v0, v1, v2, v3, v4, v5, v6)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v1161 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v1165 : string =
        match v50 with
        | US1_1 -> (* None *)
            let v1163 : string = ""
            v1163
        | US1_0(v1162) -> (* Some *)
            v1162
    let start_info = System.Diagnostics.ProcessStartInfo (
      Arguments = v1165,
      StandardOutputEncoding = v1161,
      WorkingDirectory = v78,
      FileName = v49,
      CreateNoWindow = true,
      RedirectStandardError = true,
      RedirectStandardOutput = true,
      UseShellExecute = false
    )
    let v1166 : System.Diagnostics.ProcessStartInfo = start_info
    let v1167 : int32 = v2.Length
    let v1168 : Mut5 = {l0 = 0} : Mut5
    while method43(v1167, v1168) do
        let v1170 : int32 = v1168.l0
        let struct (v1171 : string, v1172 : string) = v2.[int v1170]
        v1166.EnvironmentVariables.[v1171] <- v1172 
        let v1173 : int32 = v1170 + 1
        v1168.l0 <- v1173
        ()
    let v1174 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v1166)
    use v1174 = v1174 
    let v1175 : System.Diagnostics.Process = v1174 
    let v1176 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
    let v1177 : System.Collections.Concurrent.ConcurrentStack<string> = v1176 ()
    let v1178 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure70(v0, v1, v2, v3, v4, v5, v6, v1175, v1177)
    v1175.OutputDataReceived.Add v1178 
    let v1179 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure75(v0, v1, v2, v3, v4, v5, v6, v1175, v1177)
    v1175.ErrorDataReceived.Add v1179 
    let v1180 : (unit -> bool) = v1175.Start
    let v1181 : bool = v1180 ()
    let v1182 : bool = v1181 = false
    if v1182 then
        let v1183 : string = $"runtime.execute_with_options_async / process_start error"
        failwith<unit> v1183
    let v1184 : (unit -> unit) = v1175.BeginErrorReadLine
    v1184 ()
    let v1185 : (unit -> unit) = v1175.BeginOutputReadLine
    v1185 ()
    let v1186 : US32 option = None
    let _v1186 = ref v1186 
    let v1187 : US32 option ref = _v1186 
    let v1188 : (US32 option -> US32 option ref) = closure76(v1187)
    let v1189 : unit = ()
    let v1190 : (unit -> unit) = closure77(v1, v1188)
    let v1191 : unit = (fun () -> v1190 (); v1189) ()
    let v1194 : US32 option = _v1186.Value 
    let v1205 : US32 = US32_1
    let v1206 : US32 = v1194 |> Option.defaultValue v1205 
    let v1213 : System.Threading.CancellationToken =
        match v1206 with
        | US32_1 -> (* None *)
            let v1211 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
            v1211
        | US32_0(v1210) -> (* Some *)
            v1210
    let v1214 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1215 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1214 = v1215 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1218 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1214 = v1218 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1221 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1214 = v1221 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1224 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1214 = v1224 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1227 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1214 = v1227 
    #endif
#else
    let v1230 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1231 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1230 = v1231 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1234 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1230 = v1234 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1237 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1230 = v1237 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1240 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1230 = v1240 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1243 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1230 = v1243 
    #endif
#else
    let v1246 : Async<System.Threading.CancellationToken> option = None
    let mutable _v1246 = v1246 
    async {
    let v1247 : Async<System.Threading.CancellationToken> = Async.CancellationToken
    let! v1247 = v1247 
    let v1248 : System.Threading.CancellationToken = v1247 
    let v1249 : System.Threading.CancellationToken = Async.DefaultCancellationToken
    let v1250 : (System.Threading.CancellationToken []) = [|v1248; v1249; v1213|]
    let v1251 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
    let v1252 : System.Threading.CancellationTokenSource = v1251 v1250
    let v1253 : System.Threading.CancellationToken = v1252.Token
    return v1253 
    }
    |> fun x -> _v1246 <- Some x
    let v1254 : Async<System.Threading.CancellationToken> = match _v1246 with Some x -> x | None -> failwith "async.new_async_unit / _v1246=None"
    let _v1230 = v1254 
    #endif
    let v1255 : Async<System.Threading.CancellationToken> = _v1230 
    let _v1214 = v1255 
    #endif
    let v1260 : Async<System.Threading.CancellationToken> = _v1214 
    let! v1260 = v1260 
    let v1265 : System.Threading.CancellationToken = v1260 
    let v1266 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v1265.Register
    let v1267 : (unit -> unit) = closure78(v1175)
    let v1268 : System.Threading.CancellationTokenRegistration = v1266 v1267
    use v1268 = v1268 
    let v1269 : System.Threading.CancellationTokenRegistration = v1268 
    let v1270 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1271 : Async<int32> = null |> unbox<Async<int32>>
    let _v1270 = v1271 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1274 : Async<int32> = null |> unbox<Async<int32>>
    let _v1270 = v1274 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1277 : Async<int32> = null |> unbox<Async<int32>>
    let _v1270 = v1277 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1280 : Async<int32> = null |> unbox<Async<int32>>
    let _v1270 = v1280 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1283 : Async<int32> = null |> unbox<Async<int32>>
    let _v1270 = v1283 
    #endif
#else
    let v1286 : Async<int32> option = None
    let mutable _v1286 = v1286 
    async {
    try
    let v1287 : System.Threading.Tasks.Task = v1175.WaitForExitAsync v1265 
    let v1288 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1289 : Async<unit> = null |> unbox<Async<unit>>
    let _v1288 = v1289 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1292 : Async<unit> = null |> unbox<Async<unit>>
    let _v1288 = v1292 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1295 : Async<unit> = null |> unbox<Async<unit>>
    let _v1288 = v1295 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1298 : Async<unit> = null |> unbox<Async<unit>>
    let _v1288 = v1298 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1301 : Async<unit> = null |> unbox<Async<unit>>
    let _v1288 = v1301 
    #endif
#else
    let v1304 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
    let v1305 : Async<unit> = v1304 v1287
    let _v1288 = v1305 
    #endif
    let v1306 : Async<unit> = _v1288 
    do! v1306 
    let v1311 : int32 = v1175.ExitCode
    return v1311 
    with ex ->
    let v1312 : exn = ex
    let v1313 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1314 : string = $"%A{v1312}"
    let _v1313 = v1314 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1317 : string = $"%A{v1312}"
    let _v1313 = v1317 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1320 : string = $"%A{v1312}"
    let _v1313 = v1320 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1323 : string = $"%A{v1312}"
    let _v1313 = v1323 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1326 : string = $"%A{v1312}"
    let _v1313 = v1326 
    #endif
#else
    let v1329 : string = $"{v1312.GetType ()}: {v1312.Message}"
    let _v1313 = v1329 
    #endif
    let v1330 : string = _v1313 
    let v1335 : (string -> unit) = v1177.Push
    v1335 v1330
    let v1336 : System.Threading.Tasks.TaskCanceledException = v1312 |> unbox<System.Threading.Tasks.TaskCanceledException>
    let v1339 : unit = ()
    let v1340 : (unit -> unit) = closure79(v1336)
    let v1341 : unit = (fun () -> v1340 (); v1339) ()
    return -2147483648 
    (*
    *)
    }
    |> fun x -> _v1286 <- Some x
    let v2102 : Async<int32> = match _v1286 with Some x -> x | None -> failwith "async.new_async_unit / _v1286=None"
    let _v1270 = v2102 
    #endif
    let v2103 : Async<int32> = _v1270 
    let! v2103 = v2103 
    let v2108 : int32 = v2103 
    let v2109 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.rev
    let v2110 : string seq = v2109 v1177
    let v2113 : (string -> (string seq -> string)) = String.concat
    let v2114 : string = "\n"
    let v2115 : (string seq -> string) = v2113 v2114
    let v2116 : string = v2115 v2110
    let v2119 : unit = ()
    let v2120 : (unit -> unit) = closure81(v2108, v2116)
    let v2121 : unit = (fun () -> v2120 (); v2119) ()
    return struct (v2108, v2116) 
    }
    |> fun x -> _v39 <- Some x
    let v2890 : Async<struct (int32 * string)> = match _v39 with Some x -> x | None -> failwith "async.new_async_unit / _v39=None"
    let _v23 = v2890 
    #endif
    let v2891 : Async<struct (int32 * string)> = _v23 
    let _v7 = v2891 
    #endif
    let v2896 : Async<struct (int32 * string)> = _v7 
    v2896
and method40 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = method41(v0, v1, v2, v3, v4, v5, v6)
    let v9 : US14 = method42(v8)
    let struct (v18 : string, v19 : US1) =
        match v9 with
        | US14_1(v12) -> (* Error *)
            let v13 : string = $"resultm.get / Result value was Error: {v12}"
            failwith<struct (string * US1)> v13
        | US14_0(v10, v11) -> (* Ok *)
            struct (v10, v11)
    let v23 : string =
        match v19 with
        | US1_1 -> (* None *)
            let v21 : string = ""
            v21
        | US1_0(v20) -> (* Some *)
            v20
    let v24 : US22 = method54(v23)
    let v30 : (string []) =
        match v24 with
        | US22_1(v26) -> (* Error *)
            let v27 : string = $"resultm.get / Result value was Error: {v26}"
            failwith<(string [])> v27
        | US22_0(v25) -> (* Ok *)
            v25
    let v31 : string = "$0.to_vec()"
    let v32 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "true; let _result : Vec<_> = v32.into_iter().map(|x| { //"
    let v34 : bool = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : string = "x"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "true; $0 }).collect::<Vec<_>>()"
    let v42 : bool = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "_result"
    let v44 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure43(v0, v1, v2, v3, v4, v5, v6, v18, v44)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v1220 : bool = true
    let mutable _v1220 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v1221 : string = "std::process::Command::new(&*$0)"
    let v1222 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v18 v1221 
    let v1223 : string = "true; let mut v1222 = v1222"
    let v1224 : bool = Fable.Core.RustInterop.emitRustExpr () v1223 
    let v1225 : string = "std::process::Command::args(&mut $0, &*$1)"
    let v1226 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v1222, v44) v1225 
    let v1227 : string = "std::process::Stdio::piped()"
    let v1228 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1227 
    let v1229 : string = "std::process::Command::stdout($0, std::process::Stdio::piped())"
    let v1230 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1226 v1229 
    let v1231 : string = "std::process::Stdio::piped()"
    let v1232 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1231 
    let v1233 : string = "std::process::Command::stderr($0, std::process::Stdio::piped())"
    let v1234 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1230 v1233 
    let v1235 : string = "std::process::Stdio::piped()"
    let v1236 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1235 
    let v1237 : string = "std::process::Command::stdin($0, std::process::Stdio::piped())"
    let v1238 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1234 v1237 
    let v1239 : US1 option = None
    let _v1239 = ref v1239 
    let v1240 : US1 option ref = _v1239 
    let v1241 : (US1 option -> US1 option ref) = closure3(v1240)
    let v1242 : unit = ()
    let v1243 : (unit -> unit) = closure4(v6, v1241)
    let v1244 : unit = (fun () -> v1243 (); v1242) ()
    let v1247 : US1 option = _v1239.Value 
    let v1258 : US1 = US1_1
    let v1259 : US1 = v1247 |> Option.defaultValue v1258 
    let v1267 : Ref<Mut<std_process_Command>> =
        match v1259 with
        | US1_1 -> (* None *)
            v1238
        | US1_0(v1263) -> (* Some *)
            let v1264 : string = "std::process::Command::current_dir(v1238, &*$0)"
            let v1265 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1263 v1264 
            v1265
    let v1268 : uint64 = System.Convert.ToUInt64 v2.Length
    let v1269 : bool = v1268 = 0UL
    let v1285 : Ref<Mut<std_process_Command>> =
        if v1269 then
            v1267
        else
            let v1270 : string = "$0.to_vec()"
            let v1271 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v1270 
            let v1272 : string = "true; let _result = $0.into_iter().fold(v1267, |acc, x| { //"
            let v1273 : bool = Fable.Core.RustInterop.emitRustExpr v1271 v1272 
            let v1274 : string = "acc"
            let v1275 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v1274 
            let v1276 : string = "x"
            let struct (v1277 : string, v1278 : string) = Fable.Core.RustInterop.emitRustExpr () v1276 
            let v1279 : string = "std::process::Command::env(v1275, &*$0, &*$1)"
            let v1280 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v1277, v1278) v1279 
            let v1281 : string = "true; $0 })"
            let v1282 : bool = Fable.Core.RustInterop.emitRustExpr v1280 v1281 
            let v1283 : string = "_result"
            let v1284 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v1283 
            v1284
    let v1286 : string = "std::process::Command::spawn($0)"
    let v1287 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1285 v1286 
    let v1288 : (std_io_Error -> std_string_String) = method30()
    let v1289 : string = "$0.map_err(|x| $1(x))"
    let v1290 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1287, v1288) v1289 
    let v1291 : string = "true; let _result = $0.map(|x| { //"
    let v1292 : bool = Fable.Core.RustInterop.emitRustExpr v1290 v1291 
    let v1293 : string = "x"
    let v1294 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v1293 
    let v1295 : std_process_Child option = Some v1294 
    let v1298 : string = "std::sync::Mutex::new($0)"
    let v1299 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1295 v1298 
    let v1300 : string = "std::sync::Arc::new($0)"
    let v1301 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1299 v1300 
    let v1302 : string = "true; $0 })"
    let v1303 : bool = Fable.Core.RustInterop.emitRustExpr v1301 v1302 
    let v1304 : string = "_result"
    let v1305 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1304 
    let v1306 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) = method65()
    let v1307 : (std_string_String -> US24) = method66()
    let v1308 : string = "match v1305 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v1309 : US24 = Fable.Core.RustInterop.emitRustExpr struct (v1306, v1307) v1308 
    let struct (v6181 : int32, v6182 : US5, v6183 : US25) =
        match v1309 with
        | US24_1(v5412) -> (* Error *)
            let v5413 : unit = ()
            let v5414 : (unit -> unit) = closure47(v5412)
            let v5415 : unit = (fun () -> v5414 (); v5413) ()
            let v6176 : US5 = US5_0(v5412)
            let v6177 : US25 = US25_1
            struct (-1, v6176, v6177)
        | US24_0(v1310) -> (* Ok *)
            let v1311 : string = "true; let _result = (|| { // rust.capture"
            let v1312 : bool = Fable.Core.RustInterop.emitRustExpr () v1311 
            let v1313 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method67(v1310)
            let v1314 : string = "v1313.lock()"
            let v1315 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1314 
            let v1316 : string = "$0.unwrap()"
            let v1317 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1315 v1316 
            let v1318 : string = "true; let mut v1317 = v1317"
            let v1319 : bool = Fable.Core.RustInterop.emitRustExpr () v1318 
            let v1320 : string = "&mut $0"
            let v1321 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1317 v1320 
            let v1322 : string = "$0.as_mut()"
            let v1323 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1321 v1322 
            let v1324 : string = "$0.unwrap()"
            let v1325 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1323 v1324 
            let v1326 : string = "&mut v1325.stdout"
            let v1327 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr () v1326 
            let v1328 : string = "Option::take($0)"
            let v1329 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v1327 v1328 
            let v1330 : string = "$0.unwrap()"
            let v1331 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v1329 v1330 
            let v1332 : string = "true; $0 })()"
            let v1333 : bool = Fable.Core.RustInterop.emitRustExpr v1331 v1332 
            let v1334 : string = "_result"
            let v1335 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v1334 
            let v1336 : string = "true; let _result = (|| { // rust.capture"
            let v1337 : bool = Fable.Core.RustInterop.emitRustExpr () v1336 
            let v1338 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method67(v1310)
            let v1339 : string = "v1338.lock()"
            let v1340 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1339 
            let v1341 : string = "$0.unwrap()"
            let v1342 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1340 v1341 
            let v1343 : string = "true; let mut v1342 = v1342"
            let v1344 : bool = Fable.Core.RustInterop.emitRustExpr () v1343 
            let v1345 : string = "&mut $0"
            let v1346 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1342 v1345 
            let v1347 : string = "$0.as_mut()"
            let v1348 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1346 v1347 
            let v1349 : string = "$0.unwrap()"
            let v1350 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1348 v1349 
            let v1351 : string = "&mut v1350.stderr"
            let v1352 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr () v1351 
            let v1353 : string = "Option::take($0)"
            let v1354 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v1352 v1353 
            let v1355 : string = "$0.unwrap()"
            let v1356 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v1354 v1355 
            let v1357 : string = "true; $0 })()"
            let v1358 : bool = Fable.Core.RustInterop.emitRustExpr v1356 v1357 
            let v1359 : string = "_result"
            let v1360 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v1359 
            let v1361 : string = "true; let _result = (|| { // rust.capture"
            let v1362 : bool = Fable.Core.RustInterop.emitRustExpr () v1361 
            let v1363 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method67(v1310)
            let v1364 : string = "v1363.lock()"
            let v1365 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1364 
            let v1366 : string = "$0.unwrap()"
            let v1367 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1365 v1366 
            let v1368 : string = "true; let mut v1367 = v1367"
            let v1369 : bool = Fable.Core.RustInterop.emitRustExpr () v1368 
            let v1370 : string = "&mut $0"
            let v1371 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1367 v1370 
            let v1372 : string = "$0.as_mut()"
            let v1373 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1371 v1372 
            let v1374 : string = "$0.unwrap()"
            let v1375 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1373 v1374 
            let v1376 : string = "&mut $0.stdin"
            let v1377 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1375 v1376 
            let v1378 : string = "Option::take($0)"
            let v1379 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1377 v1378 
            let v1380 : string = "$0.unwrap()"
            let v1381 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v1379 v1380 
            let v1382 : std_process_ChildStdin option = Some v1381 
            let v1385 : string = "std::sync::Mutex::new($0)"
            let v1386 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1382 v1385 
            let v1387 : string = "std::sync::Arc::new($0)"
            let v1388 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1386 v1387 
            let v1389 : string = "true; $0 })()"
            let v1390 : bool = Fable.Core.RustInterop.emitRustExpr v1388 v1389 
            let v1391 : string = "_result"
            let v1392 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1391 
            let v1393 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v1394 : std_sync_mpsc_Sender<std_string_String>, v1395 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v1393 
            let v1396 : string = "std::sync::Mutex::new($0)"
            let v1397 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1394 v1396 
            let v1398 : string = "std::sync::Arc::new($0)"
            let v1399 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1397 v1398 
            let v1400 : string = "std::sync::Mutex::new($0)"
            let v1401 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1394 v1400 
            let v1402 : string = "std::sync::Arc::new($0)"
            let v1403 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1401 v1402 
            let v1404 : string = "std::sync::Mutex::new($0)"
            let v1405 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1395 v1404 
            let v1406 : string = "std::sync::Arc::new($0)"
            let v1407 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1405 v1406 
            let v1408 : string = "true; let __result = std::thread::spawn(move || { //"
            let v1409 : bool = Fable.Core.RustInterop.emitRustExpr () v1408 
            let v1410 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v1411 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v1335 v1410 
            let v1412 : string = "std::io::BufReader::new(v1411)"
            let v1413 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v1412 
            let v1414 : string = "std::io::BufRead::lines(v1413)"
            let v1415 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1414 
            let v1416 : string = "true; let mut v1415 = v1415; let _result = v1415.try_for_each(|x| { //"
            let v1417 : bool = Fable.Core.RustInterop.emitRustExpr () v1416 
            let v1418 : string = "x"
            let v1419 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1418 
            let v1420 : string = "$0.clone()"
            let v1421 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1399 v1420 
            let v1422 : (std_io_Error -> std_string_String) = method30()
            let v1423 : string = "$0.map_err(|x| $1(x))"
            let v1424 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1419, v1422) v1423 
            let v1425 : (std_string_String -> US26) = method68()
            let v1426 : (std_string_String -> US26) = method69()
            let v1427 : string = "match v1424 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v1428 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v1425, v1426) v1427 
            let v2913 : std_string_String =
                match v1428 with
                | US26_1(v2143) -> (* Error *)
                    let v2144 : unit = ()
                    let v2145 : (unit -> unit) = closure51(v2143)
                    let v2146 : unit = (fun () -> v2145 (); v2144) ()
                    let v2907 : string = $"\u001b[4;7m{v2143}\u001b[0m"
                    let v2908 : string = "&*$0"
                    let v2909 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2907 v2908 
                    let v2910 : string = "String::from($0)"
                    let v2911 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2909 v2910 
                    v2911
                | US26_0(v1429) -> (* Ok *)
                    let v1430 : string = "fable_library_rust::String_::fromString($0)"
                    let v1431 : string = Fable.Core.RustInterop.emitRustExpr v1429 v1430 
                    let v1432 : string = "encoding_rs::UTF_8"
                    let v1433 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v1432 
                    let v1434 : string = "$0.encode(&*$1).0"
                    let v1435 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v1433, v1431) v1434 
                    let v1436 : string = "$0.as_ref()"
                    let v1437 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v1435 v1436 
                    let v1438 : string = "std::str::from_utf8($0)"
                    let v1439 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v1437 v1438 
                    let v1440 : string = "$0.unwrap()"
                    let v1441 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1439 v1440 
                    let v1442 : string = "String::from($0)"
                    let v1443 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1441 v1442 
                    let v1444 : string = "fable_library_rust::String_::fromString($0)"
                    let v1445 : string = Fable.Core.RustInterop.emitRustExpr v1443 v1444 
                    let v1446 : string = $"> {v1445}"
                    if v5 then
                        let v1447 : unit = ()
                        let v1448 : (unit -> unit) = closure53(v1446)
                        let v1449 : unit = (fun () -> v1448 (); v1447) ()
                        ()
                    else
                        let v2139 : unit = ()
                        let v2140 : (unit -> unit) = closure13(v1446)
                        let v2141 : unit = (fun () -> v2140 (); v2139) ()
                        ()
                    v1443
            let v2914 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method70(v1421)
            let v2915 : string = "v2914.lock()"
            let v2916 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v2915 
            let v2917 : string = "$0.unwrap()"
            let v2918 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2916 v2917 
            let v2919 : string = "&$0"
            let v2920 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2918 v2919 
            let v2921 : string = "$0.send($1)"
            let v2922 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v2920, v2913) v2921 
            let v2923 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method71()
            let v2924 : string = "$0.map_err(|x| $1(x))"
            let v2925 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2922, v2923) v2924 
            let v2926 : string = "$0"
            let v2927 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v2925 v2926 
            let v2928 : string = "true; $0 }); //"
            let v2929 : bool = Fable.Core.RustInterop.emitRustExpr v2927 v2928 
            let v2930 : string = "_result.map_err(|x| x.into())"
            let v2931 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v2930 
            let v2932 : Result<unit, string> = method72(v2931)
            let v2933 : string = ""
            let v2934 : string = "}"
            let v2935 : string = v2933 + v2934 
            let v2936 : string = "true; v2932 " + v2935 + "); " + v2933 + " // rust.fix_closure'"
            let v2937 : bool = Fable.Core.RustInterop.emitRustExpr () v2936 
            let v2938 : string = "__result"
            let v2939 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v2938 
            let v2940 : string = "true; let __result = std::thread::spawn(move || { //"
            let v2941 : bool = Fable.Core.RustInterop.emitRustExpr () v2940 
            let v2942 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v2943 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v1360 v2942 
            let v2944 : string = "std::io::BufReader::new(v2943)"
            let v2945 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v2944 
            let v2946 : string = "std::io::BufRead::lines(v2945)"
            let v2947 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v2946 
            let v2948 : string = "true; let mut v2947 = v2947; let _result = v2947.try_for_each(|x| { //"
            let v2949 : bool = Fable.Core.RustInterop.emitRustExpr () v2948 
            let v2950 : string = "x"
            let v2951 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v2950 
            let v2952 : string = "$0.clone()"
            let v2953 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1403 v2952 
            let v2954 : (std_io_Error -> std_string_String) = method30()
            let v2955 : string = "$0.map_err(|x| $1(x))"
            let v2956 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2951, v2954) v2955 
            let v2957 : (std_string_String -> US26) = method68()
            let v2958 : (std_string_String -> US26) = method69()
            let v2959 : string = "match v2956 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v2960 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v2957, v2958) v2959 
            let v4446 : std_string_String =
                match v2960 with
                | US26_1(v3678) -> (* Error *)
                    let v3679 : unit = ()
                    let v3680 : (unit -> unit) = closure51(v3678)
                    let v3681 : unit = (fun () -> v3680 (); v3679) ()
                    let v4440 : string = $"\u001b[4;7m{v3678}\u001b[0m"
                    let v4441 : string = "&*$0"
                    let v4442 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4440 v4441 
                    let v4443 : string = "String::from($0)"
                    let v4444 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4442 v4443 
                    v4444
                | US26_0(v2961) -> (* Ok *)
                    let v2962 : string = "fable_library_rust::String_::fromString($0)"
                    let v2963 : string = Fable.Core.RustInterop.emitRustExpr v2961 v2962 
                    let v2964 : string = "encoding_rs::UTF_8"
                    let v2965 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v2964 
                    let v2966 : string = "$0.encode(&*$1).0"
                    let v2967 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v2965, v2963) v2966 
                    let v2968 : string = "$0.as_ref()"
                    let v2969 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v2967 v2968 
                    let v2970 : string = "std::str::from_utf8($0)"
                    let v2971 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v2969 v2970 
                    let v2972 : string = "$0.unwrap()"
                    let v2973 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2971 v2972 
                    let v2974 : string = "String::from($0)"
                    let v2975 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2973 v2974 
                    let v2976 : string = "fable_library_rust::String_::fromString($0)"
                    let v2977 : string = Fable.Core.RustInterop.emitRustExpr v2975 v2976 
                    let v2978 : string = $"! {v2977}"
                    if v5 then
                        let v2979 : unit = ()
                        let v2980 : (unit -> unit) = closure53(v2978)
                        let v2981 : unit = (fun () -> v2980 (); v2979) ()
                        ()
                    else
                        let v3669 : unit = ()
                        let v3670 : (unit -> unit) = closure13(v2978)
                        let v3671 : unit = (fun () -> v3670 (); v3669) ()
                        ()
                    let v3673 : string = $"\u001b[4;7m{v2975}\u001b[0m"
                    let v3674 : string = "&*$0"
                    let v3675 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3673 v3674 
                    let v3676 : string = "String::from($0)"
                    let v3677 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3675 v3676 
                    v3677
            let v4447 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method70(v2953)
            let v4448 : string = "v4447.lock()"
            let v4449 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v4448 
            let v4450 : string = "$0.unwrap()"
            let v4451 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4449 v4450 
            let v4452 : string = "&$0"
            let v4453 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4451 v4452 
            let v4454 : string = "$0.send($1)"
            let v4455 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v4453, v4446) v4454 
            let v4456 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method71()
            let v4457 : string = "$0.map_err(|x| $1(x))"
            let v4458 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4455, v4456) v4457 
            let v4459 : string = "$0"
            let v4460 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v4458 v4459 
            let v4461 : string = "true; $0 }); //"
            let v4462 : bool = Fable.Core.RustInterop.emitRustExpr v4460 v4461 
            let v4463 : string = "_result.map_err(|x| x.into())"
            let v4464 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v4463 
            let v4465 : Result<unit, string> = method72(v4464)
            let v4466 : string = v2933 + v2934 
            let v4467 : string = "true; v4465 " + v4466 + "); " + v2933 + " // rust.fix_closure'"
            let v4468 : bool = Fable.Core.RustInterop.emitRustExpr () v4467 
            let v4469 : string = "__result"
            let v4470 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4469 
            let v4471 : US27 option = None
            let _v4471 = ref v4471 
            let v4472 : US27 option ref = _v4471 
            let v4473 : (US27 option -> US27 option ref) = closure56(v4472)
            let v4474 : unit = ()
            let v4475 : (unit -> unit) = closure57(v4, v4473)
            let v4476 : unit = (fun () -> v4475 (); v4474) ()
            let v4479 : US27 option = _v4471.Value 
            let v4490 : US27 = US27_1
            let v4491 : US27 = v4479 |> Option.defaultValue v4490 
            match v4491 with
            | US27_1 -> (* None *)
                ()
            | US27_0(v4495) -> (* Some *)
                let v4496 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = method73(v1392)
                let v4497 : string = "v4496.lock()"
                let v4498 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v4497 
                let v4499 : string = "$0.unwrap()"
                let v4500 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4498 v4499 
                let v4501 : string = "true; let mut v4500 = v4500"
                let v4502 : bool = Fable.Core.RustInterop.emitRustExpr () v4501 
                let v4503 : string = "&mut $0"
                let v4504 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v4500 v4503 
                let v4505 : string = "Option::take($0)"
                let v4506 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v4504 v4505 
                let v4507 : string = "true; let _result = v4506.map(|x| { //"
                let v4508 : bool = Fable.Core.RustInterop.emitRustExpr () v4507 
                let v4509 : string = "x"
                let v4510 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v4509 
                let v4511 : string = "std::sync::Mutex::new($0)"
                let v4512 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4510 v4511 
                let v4513 : string = "std::sync::Arc::new($0)"
                let v4514 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v4512 v4513 
                let v4515 : string = "true; $0 })"
                let v4516 : bool = Fable.Core.RustInterop.emitRustExpr v4514 v4515 
                let v4517 : string = "_result"
                let v4518 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v4517 
                let v4519 : US28 option = None
                let _v4519 = ref v4519 
                let v4520 : US28 option ref = _v4519 
                let v4521 : (US28 option -> US28 option ref) = closure58(v4520)
                let v4522 : unit = ()
                let v4523 : (unit -> unit) = closure59(v4518, v4521)
                let v4524 : unit = (fun () -> v4523 (); v4522) ()
                let v4527 : US28 option = _v4519.Value 
                let v4538 : US28 = US28_1
                let v4539 : US28 = v4527 |> Option.defaultValue v4538 
                match v4539 with
                | US28_1 -> (* None *)
                    ()
                | US28_0(v4543) -> (* Some *)
                    v4495 v4543
                    let v4544 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = method74(v4543)
                    let v4545 : string = "v4544.lock()"
                    let v4546 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v4545 
                    let v4547 : string = "$0.unwrap()"
                    let v4548 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4546 v4547 
                    let v4549 : std_sync_MutexGuard<std_process_ChildStdin> = method75(v4548)
                    let v4550 : string = "true; let mut v4549 = v4549"
                    let v4551 : bool = Fable.Core.RustInterop.emitRustExpr () v4550 
                    let v4552 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v4553 : bool = Fable.Core.RustInterop.emitRustExpr v4549 v4552 
                    ()
            let v4554 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method67(v1310)
            let v4555 : string = "v4554.lock()"
            let v4556 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v4555 
            let v4557 : string = "$0.unwrap()"
            let v4558 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4556 v4557 
            let v4559 : string = "true; let mut v4558 = v4558"
            let v4560 : bool = Fable.Core.RustInterop.emitRustExpr () v4559 
            let v4561 : string = "&mut $0"
            let v4562 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v4558 v4561 
            let v4563 : string = "Option::take($0)"
            let v4564 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v4562 v4563 
            let v4565 : string = "$0.unwrap()"
            let v4566 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v4564 v4565 
            let v4567 : string = "$0.wait_with_output()"
            let v4568 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4566 v4567 
            let v4569 : (std_io_Error -> std_string_String) = method30()
            let v4570 : string = "$0.map_err(|x| $1(x))"
            let v4571 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4568, v4569) v4570 
            let v4572 : std_thread_JoinHandle<Result<unit, string>> = method76(v4470)
            let v4573 : string = "v4572"
            let v4574 : string = v4573 + v2933 
            let v4575 : string = v4574 + v2933 
            let v4576 : std_thread_JoinHandle<Result<unit, string>> = method76(v2939)
            let v4577 : string = "v4576"
            let v4578 : string = ", "
            let v4579 : string = v4577 + v4578 
            let v4580 : string = v4579 + v4575 
            let v4581 : string = "vec![" + v4580 + "]"
            let v4582 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v4581 
            let v4583 : string = "true; v4582.into_iter().for_each(|x| { //"
            let v4584 : bool = Fable.Core.RustInterop.emitRustExpr () v4583 
            let v4585 : string = "x"
            let v4586 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4585 
            let v4587 : string = "std::thread::JoinHandle::join($0)"
            let v4588 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v4586 v4587 
            let v4589 : string = "$0.unwrap()"
            let v4590 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4588 v4589 
            let v4591 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4590 v4591 
            let v4592 : string = "true; () }}); { //"
            let v4593 : bool = Fable.Core.RustInterop.emitRustExpr () v4592 
            let v4594 : (std_process_Output -> US29) = closure60()
            let v4595 : (std_string_String -> US29) = closure61()
            let v4596 : US29 = match v4571 with Ok x -> v4594 x | Error x -> v4595 x
            match v4596 with
            | US29_1(v4642) -> (* Error *)
                let v4643 : unit = ()
                let v4644 : (unit -> unit) = closure62(v4642)
                let v4645 : unit = (fun () -> v4644 (); v4643) ()
                let v5404 : US5 = US5_0(v4642)
                let v5405 : US25 = US25_1
                struct (-2, v5404, v5405)
            | US29_0(v4597) -> (* Ok *)
                let v4598 : string = "$0.status"
                let v4599 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v4597 v4598 
                let v4600 : string = "$0.code()"
                let v4601 : int32 option = Fable.Core.RustInterop.emitRustExpr v4599 v4600 
                let v4602 : US30 option = None
                let _v4602 = ref v4602 
                let v4603 : US30 option ref = _v4602 
                let v4604 : (US30 option -> US30 option ref) = closure64(v4603)
                let v4605 : unit = ()
                let v4606 : (unit -> unit) = closure65(v4601, v4604)
                let v4607 : unit = (fun () -> v4606 (); v4605) ()
                let v4610 : US30 option = _v4602.Value 
                let v4621 : US30 = US30_1
                let v4622 : US30 = v4610 |> Option.defaultValue v4621 
                match v4622 with
                | US30_1 -> (* None *)
                    let v4629 : string = "&*$0"
                    let v4630 : string = "runtime.execute_with_options / exit_code=None"
                    let v4631 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4630 v4629 
                    let v4632 : string = "String::from($0)"
                    let v4633 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4631 v4632 
                    let v4634 : US5 = US5_0(v4633)
                    let v4635 : US25 = US25_0(v1407)
                    struct (-1, v4634, v4635)
                | US30_0(v4626) -> (* Some *)
                    let v4627 : US5 = US5_1
                    let v4628 : US25 = US25_0(v1407)
                    struct (v4626, v4627, v4628)
    let v6190 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v6183 with
        | US25_1 -> (* None *)
            let v6188 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v6188
        | US25_0(v6184) -> (* Some *)
            let v6185 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v6184 
            v6185
    let v6191 : string = "true; let _result = v6190.map(|x| { //"
    let v6192 : bool = Fable.Core.RustInterop.emitRustExpr () v6191 
    let v6193 : string = "x"
    let v6194 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v6193 
    let v6195 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = method77(v6194)
    let v6196 : string = "v6195.lock()"
    let v6197 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v6196 
    let v6198 : string = "$0.unwrap()"
    let v6199 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v6197 v6198 
    let v6200 : string = "v6199.iter()"
    let v6201 : _ = Fable.Core.RustInterop.emitRustExpr () v6200 
    let v6202 : string = "v6201.collect::<Vec<_>>()"
    let v6203 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6202 
    let v6204 : string = "true; let _result : Vec<_> = v6203.into_iter().map(|x| { //"
    let v6205 : bool = Fable.Core.RustInterop.emitRustExpr () v6204 
    let v6206 : string = "x"
    let v6207 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6206 
    let v6208 : string = "fable_library_rust::String_::fromString($0)"
    let v6209 : string = Fable.Core.RustInterop.emitRustExpr v6207 v6208 
    let v6210 : string = "true; $0 }).collect::<Vec<_>>()"
    let v6211 : bool = Fable.Core.RustInterop.emitRustExpr v6209 v6210 
    let v6212 : string = "_result"
    let v6213 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v6212 
    let v6214 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v6215 : (string []) = Fable.Core.RustInterop.emitRustExpr v6213 v6214 
    let v6216 : string seq = v6215 |> Seq.ofArray
    let v6219 : (string -> (string seq -> string)) = String.concat
    let v6220 : string = "\n"
    let v6221 : (string seq -> string) = v6219 v6220
    let v6222 : string = v6221 v6216
    let v6225 : string = "true; $0 })"
    let v6226 : bool = Fable.Core.RustInterop.emitRustExpr v6222 v6225 
    let v6227 : string = "_result"
    let v6228 : string option = Fable.Core.RustInterop.emitRustExpr () v6227 
    let v6235 : US1 =
        match v6182 with
        | US5_1 -> (* None *)
            US1_1
        | US5_0(v6229) -> (* Some *)
            let v6230 : string = "fable_library_rust::String_::fromString($0)"
            let v6231 : string = Fable.Core.RustInterop.emitRustExpr v6229 v6230 
            US1_0(v6231)
    let v6239 : string =
        match v6235 with
        | US1_1 -> (* None *)
            let v6237 : string = ""
            v6237
        | US1_0(v6236) -> (* Some *)
            v6236
    let v6240 : string = v6228 |> Option.defaultValue v6239 
    let v6243 : unit = ()
    let v6244 : (unit -> unit) = closure66(v6181, v6240)
    let v6245 : unit = (fun () -> v6244 (); v6243) ()
    let v7014 : (int32 * string) = v6181, v6240 
    v7014 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _v1220 <- Some x
    let v7015 : (int32 * string) = match _v1220 with Some x -> x | None -> failwith "base.capture / _v1220=None"
    let (a, b) = v7015 
    let v7016 : int32 = a
    let v7017 : string = b
    let _v7 = struct (v7016, v7017) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v7022 : int32, v7023 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v7022, v7023) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v7028 : int32, v7029 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v7028, v7029) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v7034 : int32, v7035 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v7034, v7035) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v7040 : int32, v7041 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v7040, v7041) 
    #endif
#else
    let v7046 : Async<struct (int32 * string)> = method78(v0, v1, v2, v3, v4, v5, v6)
    let v7047 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v7048 : int32, v7049 : string) = null |> unbox<struct (int32 * string)>
    let _v7047 = struct (v7048, v7049) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v7054 : int32, v7055 : string) = null |> unbox<struct (int32 * string)>
    let _v7047 = struct (v7054, v7055) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v7060 : int32, v7061 : string) = null |> unbox<struct (int32 * string)>
    let _v7047 = struct (v7060, v7061) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v7066 : int32, v7067 : string) = null |> unbox<struct (int32 * string)>
    let _v7047 = struct (v7066, v7067) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v7072 : int32, v7073 : string) = null |> unbox<struct (int32 * string)>
    let _v7047 = struct (v7072, v7073) 
    #endif
#else
    let v7078 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v7079 : int32, v7080 : string) = v7078 v7046
    let _v7047 = struct (v7079, v7080) 
    #endif
    let struct (v7081 : int32, v7082 : string) = _v7047 
    let _v7 = struct (v7081, v7082) 
    #endif
    let struct (v7091 : int32, v7092 : string) = _v7 
    struct (v7091, v7092)
and closure84 () () : string =
    let v0 : string = "spiral_builder.process_cuda / env install error"
    v0
and closure83 (v0 : US8, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "env"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = $"%A{v0}"
        let v660 : string = $"{v657}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure10(v629, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = "; "
        let v669 : string = $"{v668}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure10(v629, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = "exit_code"
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure10(v629, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = $"{v648}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure10(v629, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v3}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v629, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v668}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v629, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = "run_result"
        let v711 : string = $"{v710}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v629, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = $"{v648}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure10(v629, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v2}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure10(v629, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v668}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure10(v629, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = "new_code_path"
        let v744 : string = $"{v743}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure10(v629, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = $"{v648}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure10(v629, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v1}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure10(v629, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = " }"
        let v769 : string = $"{v768}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure10(v629, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = v629.l0
        let v778 : (unit -> string) = closure84()
        let v779 : string = $"{v486} {v621} #{v627} %s{v778 ()} / {v777}"
        let v782 : char list = []
        let v783 : (char list -> (char [])) = List.toArray
        let v784 : (char []) = v783 v782
        let v787 : string = v779.TrimStart v784 
        let v805 : char list = []
        let v806 : char list = '/' :: v805 
        let v809 : char list = ' ' :: v806 
        let v812 : (char list -> (char [])) = List.toArray
        let v813 : (char []) = v812 v809
        let v816 : string = v787.TrimEnd v813 
        let v834 : (string -> unit) = closure12()
        let v835 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v836 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v816 v836 
        let _v835 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v837 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v816 v837 
        let _v835 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v838 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v816 v838 
        let _v835 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v834 v816
        let _v835 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v834 v816
        let _v835 = () 
        #endif
#else
        v834 v816
        let _v835 = () 
        #endif
        _v835 
        let v839 : (string -> unit) = v20.l0
        v839 v816
and closure85 () (v0 : string) : US1 =
    US1_0(v0)
and closure86 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : string seq = v2 |> Seq.ofArray
    let v6 : (string -> (string seq -> string)) = String.concat
    let v7 : (string seq -> string) = v6 v1
    v7 v3
and closure89 () () : string =
    let v0 : string = "spiral_builder.process_cuda / Exception"
    v0
and closure88 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "ex"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v658 : string = "format!(\"{:#?}\", $0)"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v657 = v661 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v662 : string = "format!(\"{:#?}\", $0)"
        let v663 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v662 
        let v664 : string = "fable_library_rust::String_::fromString($0)"
        let v665 : string = Fable.Core.RustInterop.emitRustExpr v663 v664 
        let _v657 = v665 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v666 : string = "format!(\"{:#?}\", $0)"
        let v667 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v666 
        let v668 : string = "fable_library_rust::String_::fromString($0)"
        let v669 : string = Fable.Core.RustInterop.emitRustExpr v667 v668 
        let _v657 = v669 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v670 : string = $"%A{v3}"
        let _v657 = v670 
        #endif
#if FABLE_COMPILER_PYTHON
        let v673 : string = $"%A{v3}"
        let _v657 = v673 
        #endif
#else
        let v676 : string = $"%A{v3}"
        let _v657 = v676 
        #endif
        let v679 : string = _v657 
        let v684 : string = $"{v679}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure10(v629, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = "; "
        let v693 : string = $"{v692}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v629, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = "run_result"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v629, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v648}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure10(v629, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = $"{v1}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure10(v629, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v692}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure10(v629, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = "new_code_path"
        let v735 : string = $"{v734}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure10(v629, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v648}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure10(v629, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = $"{v0}"
        let v754 : unit = ()
        let v755 : (unit -> unit) = closure10(v629, v751)
        let v756 : unit = (fun () -> v755 (); v754) ()
        let v759 : string = $"{v692}"
        let v762 : unit = ()
        let v763 : (unit -> unit) = closure10(v629, v759)
        let v764 : unit = (fun () -> v763 (); v762) ()
        let v767 : string = "external_command"
        let v768 : string = $"{v767}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure10(v629, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = $"{v648}"
        let v779 : unit = ()
        let v780 : (unit -> unit) = closure10(v629, v776)
        let v781 : unit = (fun () -> v780 (); v779) ()
        let v784 : string = $"{v2}"
        let v787 : unit = ()
        let v788 : (unit -> unit) = closure10(v629, v784)
        let v789 : unit = (fun () -> v788 (); v787) ()
        let v792 : string = " }"
        let v793 : string = $"{v792}"
        let v796 : unit = ()
        let v797 : (unit -> unit) = closure10(v629, v793)
        let v798 : unit = (fun () -> v797 (); v796) ()
        let v801 : string = v629.l0
        let v802 : (unit -> string) = closure89()
        let v803 : string = $"{v486} {v621} #{v627} %s{v802 ()} / {v801}"
        let v806 : char list = []
        let v807 : (char list -> (char [])) = List.toArray
        let v808 : (char []) = v807 v806
        let v811 : string = v803.TrimStart v808 
        let v829 : char list = []
        let v830 : char list = '/' :: v829 
        let v833 : char list = ' ' :: v830 
        let v836 : (char list -> (char [])) = List.toArray
        let v837 : (char []) = v836 v833
        let v840 : string = v811.TrimEnd v837 
        let v858 : (string -> unit) = closure12()
        let v859 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v860 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v860 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v861 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v861 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v862 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v862 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v858 v840
        let _v859 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v858 v840
        let _v859 = () 
        #endif
#else
        v858 v840
        let _v859 = () 
        #endif
        _v859 
        let v863 : (string -> unit) = v20.l0
        v863 v840
and closure87 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure88(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure91 () () : string =
    let v0 : string = "spiral_builder.process_cuda / error"
    v0
and closure90 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "exit_code"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = $"{v2}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure10(v629, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = "; "
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v629, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "run_result"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure10(v629, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = $"{v648}"
        let v686 : unit = ()
        let v687 : (unit -> unit) = closure10(v629, v683)
        let v688 : unit = (fun () -> v687 (); v686) ()
        let v691 : string = $"{v1}"
        let v694 : unit = ()
        let v695 : (unit -> unit) = closure10(v629, v691)
        let v696 : unit = (fun () -> v695 (); v694) ()
        let v699 : string = $"{v665}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v629, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = "new_code_path"
        let v708 : string = $"{v707}"
        let v711 : unit = ()
        let v712 : (unit -> unit) = closure10(v629, v708)
        let v713 : unit = (fun () -> v712 (); v711) ()
        let v716 : string = $"{v648}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure10(v629, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = $"{v0}"
        let v727 : unit = ()
        let v728 : (unit -> unit) = closure10(v629, v724)
        let v729 : unit = (fun () -> v728 (); v727) ()
        let v732 : string = $"{v665}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure10(v629, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = "external_command"
        let v741 : string = $"{v740}"
        let v744 : unit = ()
        let v745 : (unit -> unit) = closure10(v629, v741)
        let v746 : unit = (fun () -> v745 (); v744) ()
        let v749 : string = $"{v648}"
        let v752 : unit = ()
        let v753 : (unit -> unit) = closure10(v629, v749)
        let v754 : unit = (fun () -> v753 (); v752) ()
        let v757 : string = $"{v3}"
        let v760 : unit = ()
        let v761 : (unit -> unit) = closure10(v629, v757)
        let v762 : unit = (fun () -> v761 (); v760) ()
        let v765 : string = " }"
        let v766 : string = $"{v765}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v629, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = v629.l0
        let v775 : (unit -> string) = closure91()
        let v776 : string = $"{v486} {v621} #{v627} %s{v775 ()} / {v774}"
        let v779 : char list = []
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v779
        let v784 : string = v776.TrimStart v781 
        let v802 : char list = []
        let v803 : char list = '/' :: v802 
        let v806 : char list = ' ' :: v803 
        let v809 : (char list -> (char [])) = List.toArray
        let v810 : (char []) = v809 v806
        let v813 : string = v784.TrimEnd v810 
        let v831 : (string -> unit) = closure12()
        let v832 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v833 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v834 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v835 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v835 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v831 v813
        let _v832 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v831 v813
        let _v832 = () 
        #endif
#else
        v831 v813
        let _v832 = () 
        #endif
        _v832 
        let v836 : (string -> unit) = v20.l0
        v836 v813
and closure92 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and method79 () : string =
    let v0 : string = "fs-path"
    v0
and method80 () : string =
    let v0 : string = "command"
    v0
and method81 () : string =
    let v0 : string = "path"
    v0
and method86 (v0 : string) : string =
    v0
and method85 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : string = "^\\\\\\\\\\?\\\\"
        let v4 : string = ""
        let v5 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = $"regex::Regex::new(&$0)"
        let v7 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let v8 : string = "$0.unwrap()"
        let v9 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v7 v8 
        let v10 : string = method86(v0)
        let v11 : string = $"$0.replace_all(&*$1, &*$2)"
        let v12 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10, v4) v11 
        let v13 : string = "String::from($0)"
        let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v13 
        let v15 : string = "fable_library_rust::String_::fromString($0)"
        let v16 : string = Fable.Core.RustInterop.emitRustExpr v14 v15 
        let _v5 = v16 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v17 : string = null |> unbox<string>
        let _v5 = v17 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v20 : string = null |> unbox<string>
        let _v5 = v20 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v23 : string = null |> unbox<string>
        let _v5 = v23 
        #endif
#if FABLE_COMPILER_PYTHON
        let v26 : string = null |> unbox<string>
        let _v5 = v26 
        #endif
#else
        let v29 : string = System.Text.RegularExpressions.Regex.Replace (v0, v3, v4)
        let _v5 = v29 
        #endif
        let v30 : string = _v5 
        let v35 : string = $"{v30.[0] |> string |> _.ToLower()}{v30.[1..]}"
        let v36 : string = "\\"
        let v37 : string = "/"
        let v38 : string = v35.Replace (v36, v37)
        v38
and method87 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method88 () : char =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::path::MAIN_SEPARATOR"
    let v2 : char = Fable.Core.RustInterop.emitRustExpr () v1 
    let _v0 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v6 
    #endif
#else
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v7 
    #endif
    let v8 : char = _v0 
    v8
and method84 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : bool = v9 = false
    let v116 : string =
        if v10 then
            let v11 : string = method23()
            let v12 : string = method15(v11, v0)
            let v13 : string = method85(v12)
            let v14 : string = "/"
            let v15 : (string []) = v13.Split v14 
            let v16 : (string []) = [||]
            let v17 : int32 = v15.Length
            let v18 : Mut6 = {l0 = 0; l1 = 0; l2 = v16} : Mut6
            while method87(v17, v18) do
                let v20 : int32 = v18.l0
                let v21 : int32 =  -v20
                let v22 : int32 = v21 + v17
                let v23 : int32 = v22 - 1
                let struct (v24 : int32, v25 : (string [])) = v18.l1, v18.l2
                let v26 : string = v15.[int v23]
                let v27 : bool = ".." = v26
                let struct (v69 : int32, v70 : (string [])) =
                    if v27 then
                        let v28 : int32 = v24 + 1
                        struct (v28, v25)
                    else
                        let v29 : bool = "." = v26
                        if v29 then
                            struct (v24, v25)
                        else
                            let v30 : bool = 0 = v24
                            if v30 then
                                let v31 : string = ":"
                                let v32 : bool = v26.EndsWith v31 
                                if v32 then
                                    let v33 : string = $"{v11.[0]}:"
                                    let v34 : (string []) = [|v33|]
                                    let v35 : int32 = v34.Length
                                    let v36 : int32 = v25.Length
                                    let v37 : int32 = v35 + v36
                                    let v38 : (string []) = Array.zeroCreate<string> (v37)
                                    let v39 : Mut5 = {l0 = 0} : Mut5
                                    while method43(v37, v39) do
                                        let v41 : int32 = v39.l0
                                        let v42 : bool = v41 < v35
                                        let v46 : string =
                                            if v42 then
                                                let v43 : string = v34.[int v41]
                                                v43
                                            else
                                                let v44 : int32 = v41 - v35
                                                let v45 : string = v25.[int v44]
                                                v45
                                        v38.[int v41] <- v46
                                        let v47 : int32 = v41 + 1
                                        v39.l0 <- v47
                                        ()
                                    struct (0, v38)
                                else
                                    let v48 : (string []) = [|v26|]
                                    let v49 : int32 = v48.Length
                                    let v50 : int32 = v25.Length
                                    let v51 : int32 = v49 + v50
                                    let v52 : (string []) = Array.zeroCreate<string> (v51)
                                    let v53 : Mut5 = {l0 = 0} : Mut5
                                    while method43(v51, v53) do
                                        let v55 : int32 = v53.l0
                                        let v56 : bool = v55 < v49
                                        let v60 : string =
                                            if v56 then
                                                let v57 : string = v48.[int v55]
                                                v57
                                            else
                                                let v58 : int32 = v55 - v49
                                                let v59 : string = v25.[int v58]
                                                v59
                                        v52.[int v55] <- v60
                                        let v61 : int32 = v55 + 1
                                        v53.l0 <- v61
                                        ()
                                    struct (0, v52)
                            else
                                let v64 : int32 = v24 - 1
                                struct (v64, v25)
                let v71 : int32 = v20 + 1
                v18.l0 <- v71
                v18.l1 <- v69
                v18.l2 <- v70
                ()
            let struct (v72 : int32, v73 : (string [])) = v18.l1, v18.l2
            let v74 : string seq = seq { for i = 0 to v73.Length - 1 do yield v73.[i] }
            let v77 : char = method88()
            let v78 : (char -> string) = _.ToString()
            let v79 : string = v78 v77
            let v82 : (string -> (string seq -> string)) = String.concat
            let v83 : (string seq -> string) = v82 v79
            v83 v74
        else
            let v87 : string = "std::fs::canonicalize(&*$0)"
            let v88 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v87 
            let v89 : string = "$0.unwrap()"
            let v90 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v88 v89 
            let v91 : string = "$0.display()"
            let v92 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v94 : string = "format!(\"{}\", $0)"
            let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v94 
            let _v93 = v95 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v96 : string = "format!(\"{}\", $0)"
            let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v96 
            let _v93 = v97 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v98 : string = "format!(\"{}\", $0)"
            let v99 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v98 
            let _v93 = v99 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v100 : std_string_String = null |> unbox<std_string_String>
            let _v93 = v100 
            #endif
#if FABLE_COMPILER_PYTHON
            let v103 : std_string_String = null |> unbox<std_string_String>
            let _v93 = v103 
            #endif
#else
            let v106 : std_string_String = null |> unbox<std_string_String>
            let _v93 = v106 
            #endif
            let v109 : std_string_String = _v93 
            let v114 : string = "fable_library_rust::String_::fromString($0)"
            let v115 : string = Fable.Core.RustInterop.emitRustExpr v109 v114 
            v115
    let _v1 = v116 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v117 : string = null |> unbox<string>
    let _v1 = v117 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v120 : string = null |> unbox<string>
    let _v1 = v120 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : string = null |> unbox<string>
    let _v1 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v126 : string = null |> unbox<string>
    let _v1 = v126 
    #endif
#else
    let v129 : (string -> string) = System.IO.Path.GetFullPath
    let v130 : string = v129 v0
    let _v1 = v130 
    #endif
    let v131 : string = _v1 
    v131
and method83 (v0 : string) : string =
    let v1 : string = method84(v0)
    method85(v1)
and method82 (v0 : string) : string =
    let v1 : string = method23()
    let v2 : string = method15(v1, v0)
    method83(v2)
and closure93 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method82(v2)
and method89 () : string =
    let v0 : string = "retries"
    v0
and method90 () : string =
    let v0 : string = "working-directory"
    v0
and closure95 () () : string =
    let v0 : string = "spiral_builder.run / repl error"
    v0
and closure94 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 1 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Debug"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_blue"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[94m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[94m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[94m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = $"{v1}/{v0}"
        let v629 : string = method9()
        let v630 : Mut4 = {l0 = v629} : Mut4
        let v631 : string = "{ "
        let v632 : string = $"{v631}"
        let v635 : unit = ()
        let v636 : (unit -> unit) = closure10(v630, v632)
        let v637 : unit = (fun () -> v636 (); v635) ()
        let v640 : string = "exit_code"
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v630, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = " = "
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v630, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = $"{v3}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v630, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = "; "
        let v667 : string = $"{v666}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure10(v630, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "repl_result"
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure10(v630, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = $"{v649}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure10(v630, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v2}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure10(v630, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v666}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure10(v630, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = "retry"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure10(v630, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = $"{v649}"
        let v720 : unit = ()
        let v721 : (unit -> unit) = closure10(v630, v717)
        let v722 : unit = (fun () -> v721 (); v720) ()
        let v725 : string = $"{v628}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure10(v630, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = " }"
        let v734 : string = $"{v733}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure10(v630, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = v630.l0
        let v743 : (unit -> string) = closure95()
        let v744 : string = $"{v486} {v621} #{v627} %s{v743 ()} / {v742}"
        let v747 : char list = []
        let v748 : (char list -> (char [])) = List.toArray
        let v749 : (char []) = v748 v747
        let v752 : string = v744.TrimStart v749 
        let v770 : char list = []
        let v771 : char list = '/' :: v770 
        let v774 : char list = ' ' :: v771 
        let v777 : (char list -> (char [])) = List.toArray
        let v778 : (char []) = v777 v774
        let v781 : string = v752.TrimEnd v778 
        let v799 : (string -> unit) = closure12()
        let v800 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v801 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v781 v801 
        let _v800 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v802 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v781 v802 
        let _v800 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v803 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v781 v803 
        let _v800 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v799 v781
        let _v800 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v799 v781
        let _v800 = () 
        #endif
#else
        v799 v781
        let _v800 = () 
        #endif
        _v800 
        let v804 : (string -> unit) = v20.l0
        v804 v781
and method91 (v0 : string option, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v15 : bool = false
    let struct (v16 : int32, v17 : string) = method40(v9, v4, v14, v6, v7, v15, v0)
    let v18 : bool = v16 = 0
    let v20 : bool =
        if v18 then
            true
        else
            let v19 : bool = v3 >= v1
            v19
    if v20 then
        struct (v16, v17)
    else
        let v21 : unit = ()
        let v22 : (unit -> unit) = closure94(v1, v3, v17, v16)
        let v23 : unit = (fun () -> v22 (); v21) ()
        let v825 : uint8 = v3 + 1uy
        method91(v0, v1, v2, v825)
and closure97 () () : string =
    let v0 : string = "spiral_builder.run / dib / jupyter nbconvert"
    v0
and closure96 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Debug"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_blue"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[94m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[94m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[94m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : int32 = v0.Length
        let v627 : string = method9()
        let v628 : Mut4 = {l0 = v627} : Mut4
        let v629 : string = "{ "
        let v630 : string = $"{v629}"
        let v633 : unit = ()
        let v634 : (unit -> unit) = closure10(v628, v630)
        let v635 : unit = (fun () -> v634 (); v633) ()
        let v638 : string = "exit_code"
        let v639 : string = $"{v638}"
        let v642 : unit = ()
        let v643 : (unit -> unit) = closure10(v628, v639)
        let v644 : unit = (fun () -> v643 (); v642) ()
        let v647 : string = " = "
        let v648 : string = $"{v647}"
        let v651 : unit = ()
        let v652 : (unit -> unit) = closure10(v628, v648)
        let v653 : unit = (fun () -> v652 (); v651) ()
        let v656 : string = $"{v1}"
        let v659 : unit = ()
        let v660 : (unit -> unit) = closure10(v628, v656)
        let v661 : unit = (fun () -> v660 (); v659) ()
        let v664 : string = "; "
        let v665 : string = $"{v664}"
        let v668 : unit = ()
        let v669 : (unit -> unit) = closure10(v628, v665)
        let v670 : unit = (fun () -> v669 (); v668) ()
        let v673 : string = "jupyter_result_length"
        let v674 : string = $"{v673}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure10(v628, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = $"{v647}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v628, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = $"{v626}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v628, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = " }"
        let v699 : string = $"{v698}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v628, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = v628.l0
        let v708 : (unit -> string) = closure97()
        let v709 : string = $"{v484} {v619} #{v625} %s{v708 ()} / {v707}"
        let v712 : char list = []
        let v713 : (char list -> (char [])) = List.toArray
        let v714 : (char []) = v713 v712
        let v717 : string = v709.TrimStart v714 
        let v735 : char list = []
        let v736 : char list = '/' :: v735 
        let v739 : char list = ' ' :: v736 
        let v742 : (char list -> (char [])) = List.toArray
        let v743 : (char []) = v742 v739
        let v746 : string = v717.TrimEnd v743 
        let v764 : (string -> unit) = closure12()
        let v765 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v766 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v767 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v767 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v768 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v768 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v764 v746
        let _v765 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v764 v746
        let _v765 = () 
        #endif
#else
        v764 v746
        let _v765 = () 
        #endif
        _v765 
        let v769 : (string -> unit) = v18.l0
        v769 v746
and closure99 () () : string =
    let v0 : string = "spiral_builder.run / dib / html cell ids"
    v0
and closure98 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Debug"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_blue"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[94m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[94m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[94m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : int32 = v0.Length
        let v627 : string = method9()
        let v628 : Mut4 = {l0 = v627} : Mut4
        let v629 : string = "{ "
        let v630 : string = $"{v629}"
        let v633 : unit = ()
        let v634 : (unit -> unit) = closure10(v628, v630)
        let v635 : unit = (fun () -> v634 (); v633) ()
        let v638 : string = "exit_code"
        let v639 : string = $"{v638}"
        let v642 : unit = ()
        let v643 : (unit -> unit) = closure10(v628, v639)
        let v644 : unit = (fun () -> v643 (); v642) ()
        let v647 : string = " = "
        let v648 : string = $"{v647}"
        let v651 : unit = ()
        let v652 : (unit -> unit) = closure10(v628, v648)
        let v653 : unit = (fun () -> v652 (); v651) ()
        let v656 : string = $"{v1}"
        let v659 : unit = ()
        let v660 : (unit -> unit) = closure10(v628, v656)
        let v661 : unit = (fun () -> v660 (); v659) ()
        let v664 : string = "; "
        let v665 : string = $"{v664}"
        let v668 : unit = ()
        let v669 : (unit -> unit) = closure10(v628, v665)
        let v670 : unit = (fun () -> v669 (); v668) ()
        let v673 : string = "pwsh_replace_html_result_length"
        let v674 : string = $"{v673}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure10(v628, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = $"{v647}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v628, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = $"{v626}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v628, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = " }"
        let v699 : string = $"{v698}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v628, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = v628.l0
        let v708 : (unit -> string) = closure99()
        let v709 : string = $"{v484} {v619} #{v625} %s{v708 ()} / {v707}"
        let v712 : char list = []
        let v713 : (char list -> (char [])) = List.toArray
        let v714 : (char []) = v713 v712
        let v717 : string = v709.TrimStart v714 
        let v735 : char list = []
        let v736 : char list = '/' :: v735 
        let v739 : char list = ' ' :: v736 
        let v742 : (char list -> (char [])) = List.toArray
        let v743 : (char []) = v742 v739
        let v746 : string = v717.TrimEnd v743 
        let v764 : (string -> unit) = closure12()
        let v765 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v766 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v767 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v767 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v768 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v768 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v764 v746
        let _v765 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v764 v746
        let _v765 = () 
        #endif
#else
        v764 v746
        let _v765 = () 
        #endif
        _v765 
        let v769 : (string -> unit) = v18.l0
        v769 v746
and closure101 () () : string =
    let v0 : string = "spiral_builder.run / dib"
    v0
and closure100 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Debug"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_blue"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[94m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[94m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[94m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : int32 = v0.Length
        let v627 : string = method9()
        let v628 : Mut4 = {l0 = v627} : Mut4
        let v629 : string = "{ "
        let v630 : string = $"{v629}"
        let v633 : unit = ()
        let v634 : (unit -> unit) = closure10(v628, v630)
        let v635 : unit = (fun () -> v634 (); v633) ()
        let v638 : string = "exit_code"
        let v639 : string = $"{v638}"
        let v642 : unit = ()
        let v643 : (unit -> unit) = closure10(v628, v639)
        let v644 : unit = (fun () -> v643 (); v642) ()
        let v647 : string = " = "
        let v648 : string = $"{v647}"
        let v651 : unit = ()
        let v652 : (unit -> unit) = closure10(v628, v648)
        let v653 : unit = (fun () -> v652 (); v651) ()
        let v656 : string = $"{v1}"
        let v659 : unit = ()
        let v660 : (unit -> unit) = closure10(v628, v656)
        let v661 : unit = (fun () -> v660 (); v659) ()
        let v664 : string = "; "
        let v665 : string = $"{v664}"
        let v668 : unit = ()
        let v669 : (unit -> unit) = closure10(v628, v665)
        let v670 : unit = (fun () -> v669 (); v668) ()
        let v673 : string = "result_length"
        let v674 : string = $"{v673}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure10(v628, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = $"{v647}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v628, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = $"{v626}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v628, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = " }"
        let v699 : string = $"{v698}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v628, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = v628.l0
        let v708 : (unit -> string) = closure101()
        let v709 : string = $"{v484} {v619} #{v625} %s{v708 ()} / {v707}"
        let v712 : char list = []
        let v713 : (char list -> (char [])) = List.toArray
        let v714 : (char []) = v713 v712
        let v717 : string = v709.TrimStart v714 
        let v735 : char list = []
        let v736 : char list = '/' :: v735 
        let v739 : char list = ' ' :: v736 
        let v742 : (char list -> (char [])) = List.toArray
        let v743 : (char []) = v742 v739
        let v746 : string = v717.TrimEnd v743 
        let v764 : (string -> unit) = closure12()
        let v765 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v766 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v767 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v767 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v768 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v768 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v764 v746
        let _v765 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v764 v746
        let _v765 = () 
        #endif
#else
        v764 v746
        let _v765 = () 
        #endif
        _v765 
        let v769 : (string -> unit) = v18.l0
        v769 v746
and method92 () : string =
    let v0 : string = "wasm"
    v0
and method93 () : string =
    let v0 : string = "contract"
    v0
and method95 () : string =
    let v0 : string = ""
    v0
and method96 () : string =
    let v0 : string = ""
    v0
and method94 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v3 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v4 : (string -> (uint8 [])) = v3 v2
    let v5 : (uint8 []) = v4 v0
    let v6 : string = "$0.to_vec()"
    let v7 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::io::Cursor::new(v7)"
    let v9 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "std::io::BufReader::new(v9)"
    let v11 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "true; let mut v11 = v11"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v14 
    let v15 : string = "result"
    let v16 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "true; let mut v16 = v16"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : unativeint = 0 |> unativeint 
    let v22 : string = "[$0; 1024]"
    let v23 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v22 
    let v24 : string = "true; loop { // rust.loop"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = "true; let mut v23 = v23"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "std::io::Read::read(&mut v11, &mut v23)"
    let v29 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = "$0.unwrap()"
    let v31 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : bool = v31 = v19 
    if v32 then
        let v35 : string = "true; break"
        let v36 : bool = Fable.Core.RustInterop.emitRustExpr () v35 
        ()
    let v37 : string = "v23.len()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : uint8 = v38 |> uint8 
    let v42 : unativeint = v31 |> unativeint 
    let v45 : unativeint = v42 |> unbox<unativeint>
    let v48 : bool = v45 = v38 
    let v55 : Ref<Slice'<uint8>> =
        if v48 then
            let v51 : string = "&v23[v19..]"
            let v52 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v51 
            v52
        else
            let v53 : string = "&v23[$0..$1]"
            let v54 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v19, v42) v53 
            v54
    let v56 : string = "sha2::Digest::update(&mut v16, v55)"
    Fable.Core.RustInterop.emitRustExpr () v56 
    let v57 : string = "true; } // rust.loop"
    let v58 : bool = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "true; } // rust.loop"
    let v60 : bool = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "true; } // rust.loop"
    let v62 : bool = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "true; { // rust.loop"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr () v63 
    let v65 : string = "true; { // rust.loop"
    let v66 : bool = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "&sha2::Digest::finalize(v16)"
    let v68 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v70 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "true; let _result : Vec<_> = v70.into_iter().map(|x| { //"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : string = "x"
    let v74 : uint8 = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "format!(\"{:02x}\", $0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : string = "true; $0 }).collect::<Vec<_>>()"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "_result"
    let v82 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v81 
    let v83 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v84 : (string []) = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string seq = seq { for i = 0 to v84.Length - 1 do yield v84.[i] }
    let v88 : string = method95()
    let v89 : (string -> (string seq -> string)) = String.concat
    let v90 : (string seq -> string) = v89 v88
    let v91 : string = v90 v85
    let v94 : Result<string, std_io_Error> = Ok v91 
    let v95 : string = "$0.unwrap()"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr v94 v95 
    let _v1 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = null |> unbox<string>
    let _v1 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v100 : string = null |> unbox<string>
    let _v1 = v100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v103 : string = "crypto"
    let v104 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v103 
    let v105 : string = "v104.createHash($0)"
    let v106 : string = "sha256"
    let v107 : obj = Fable.Core.JsInterop.emitJsExpr v106 v105 
    let v108 : string = "$0.update($1, 'utf8')"
    let v109 : obj = Fable.Core.JsInterop.emitJsExpr struct (v107, v0) v108 
    let v110 : string = "$0.digest($1)"
    let v111 : string = "hex"
    let v112 : string = Fable.Core.JsInterop.emitJsExpr struct (v109, v111) v110 
    let _v1 = v112 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : string = "hashlib"
    let v114 : IHashlibSha256 = Fable.Core.PyInterop.importAll v113 
    let v115 : string = "v114.sha256()"
    let v116 : obj = Fable.Core.PyInterop.emitPyExpr () v115 
    let v119 : string = "$0.encode($1)"
    let v120 : string = "utf-8"
    let v121 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v120) v119 
    let v124 : string = "v116.update($0)"
    Fable.Core.PyInterop.emitPyExpr v121 v124 
    let v125 : string = "v116.hexdigest()"
    let v126 : string = Fable.Core.PyInterop.emitPyExpr () v125 
    let _v1 = v126 
    #endif
#else
    let v129 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v130 : System.Security.Cryptography.SHA256 = v129 ()
    use v130 = v130 
    let v131 : System.Security.Cryptography.SHA256 = v130 
    let v132 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v133 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v134 : (string -> (uint8 [])) = v133 v132
    let v135 : (uint8 []) = v134 v0
    let v136 : ((uint8 []) -> (uint8 [])) = v131.ComputeHash
    let v137 : (uint8 []) = v136 v135
    let v138 : int32 = v137.Length
    let v139 : (string []) = Array.zeroCreate<string> (v138)
    let v140 : Mut5 = {l0 = 0} : Mut5
    while method43(v138, v140) do
        let v142 : int32 = v140.l0
        let v143 : uint8 = v137.[int v142]
        let v144 : (string -> string) = v143.ToString
        let v145 : string = "x2"
        let v146 : string = v144 v145
        v139.[int v142] <- v146
        let v147 : int32 = v142 + 1
        v140.l0 <- v147
        ()
    let v148 : string seq = seq { for i = 0 to v139.Length - 1 do yield v139.[i] }
    let v151 : string = method96()
    let v152 : (string -> (string seq -> string)) = String.concat
    let v153 : (string seq -> string) = v152 v151
    let v154 : string = v153 v148
    let _v1 = v154 
    #endif
    let v157 : string = _v1 
    v157
and closure102 (v0 : US35 option ref) (v1 : US35 option) : US35 option ref =
    v0.Value <- v1 
    v0
and closure103 (v0 : chrono_DateTime<chrono_Utc> option, v1 : (US35 option -> US35 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : chrono_DateTime<chrono_Utc> = x
    let v3 : US35 = US35_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method98 () : string =
    let v0 : string = "hh:mm"
    v0
and method99 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method100 () : string =
    let v0 : string = "hhmm"
    v0
and method97 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v6 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v7 : System.DateTime = v6 v3
    let v10 : System.DateTimeKind = System.DateTimeKind.Local
    let v11 : System.DateTime = System.DateTime.SpecifyKind (v1, v10)
    let v12 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v13 : System.DateTime = v12 v11
    let v16 : (System.DateTime -> int64) = _.Ticks
    let v17 : int64 = v16 v13
    let v20 : (System.DateTime -> int64) = _.Ticks
    let v21 : int64 = v20 v7
    let v24 : int64 = v17 - v21
    let v25 : int64 = v24 / 10L
    let v26 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v27 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : US35 option = None
    let _v28 = ref v28 
    let v29 : US35 option ref = _v28 
    let v30 : (US35 option -> US35 option ref) = closure102(v29)
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure103(v27, v30)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v36 : US35 option = _v28.Value 
    let v47 : US35 = US35_1
    let v48 : US35 = v36 |> Option.defaultValue v47 
    let v68 : US1 =
        match v48 with
        | US35_1 -> (* None *)
            US1_1
        | US35_0(v52) -> (* Some *)
            let v53 : string = "$0.naive_utc()"
            let v54 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v52 v53 
            let v55 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v56 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v54 v55 
            let v57 : string = "%Y%m%d-%H%M-%S%f"
            let v58 : string = "r#\"" + v57 + "\"#"
            let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v58 
            let v60 : string = "$0.format($1).to_string()"
            let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v59) v60 
            let v62 : string = "fable_library_rust::String_::fromString($0)"
            let v63 : string = Fable.Core.RustInterop.emitRustExpr v61 v62 
            let v64 : string = $"{v63.[0..17]}-{v63.[18..21]}-{v63.[22]}"
            US1_0(v64)
    let v72 : string =
        match v68 with
        | US1_1 -> (* None *)
            let v70 : string = ""
            v70
        | US1_0(v69) -> (* Some *)
            v69
    let v73 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "0i64.into()"
    let v75 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v74 
    let _v73 = v75 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v76 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v76 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v82 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v82 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v85 
    #endif
#else
    let v88 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v73 = v88 
    #endif
    let v89 : System.TimeZoneInfo = _v73 
    let v94 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v95 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v96 : System.TimeSpan = v95 ()
    let _v94 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v99 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v100 : System.TimeSpan = v99 ()
    let _v94 = v100 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v104 : System.TimeSpan = v103 ()
    let _v94 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v107 : US10 = US10_0
    let v108 : US11 = US11_3(v107)
    let v109 : string = $"date_time.get_utc_offset / target: {v108}"
    let v110 : System.TimeSpan = failwith<System.TimeSpan> v109
    let _v94 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v111 : US10 = US10_0
    let v112 : US11 = US11_4(v111)
    let v113 : string = $"date_time.get_utc_offset / target: {v112}"
    let v114 : System.TimeSpan = failwith<System.TimeSpan> v113
    let _v94 = v114 
    #endif
#else
    let v115 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v116 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v117 : string = "0i64.into()"
    let v118 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v117 
    let _v116 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v119 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v122 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v125 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v125 
    #endif
#if FABLE_COMPILER_PYTHON
    let v128 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v128 
    #endif
#else
    let v131 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v116 = v131 
    #endif
    let v132 : System.TimeZoneInfo = _v116 
    let v137 : (System.DateTime -> System.TimeSpan) = v115 v132
    let v138 : System.TimeSpan = v137 v13
    let _v94 = v138 
    #endif
    let v139 : System.TimeSpan = _v94 
    let v145 : (System.TimeSpan -> int32) = _.Hours
    let v146 : int32 = v145 v139
    let v149 : bool = v146 > 0
    let v150 : uint8 =
        if v149 then
            1uy
        else
            0uy
    let v151 : string = method98()
    let v152 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v153 : string = v139.ToString v151 
    let _v152 = v153 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v154 : string = v139.ToString v151 
    let _v152 = v154 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v155 : string = v139.ToString v151 
    let _v152 = v155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : string = v139.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v152 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v157 : string = v139.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v152 = v157 
    #endif
#else
    let v158 : string = v139.ToString v151 
    let _v152 = v158 
    #endif
    let v159 : string = _v152 
    let v162 : string = $"{v150}{v159.[0..1]}{v159.[3..4]}"
    let v163 : (System.Guid -> string) = _.ToString()
    let v164 : string = v163 v0
    let v167 : System.Guid = System.Guid $"{v72}{v162}{v164.[v72.Length + v162.Length..]}"
    let _v2 = v167 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v168 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v171 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v172 : System.DateTime = v171 v168
    let v175 : System.DateTimeKind = System.DateTimeKind.Local
    let v176 : System.DateTime = System.DateTime.SpecifyKind (v1, v175)
    let v177 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v178 : System.DateTime = v177 v176
    let v181 : (System.DateTime -> int64) = _.Ticks
    let v182 : int64 = v181 v178
    let v185 : (System.DateTime -> int64) = _.Ticks
    let v186 : int64 = v185 v172
    let v189 : int64 = v182 - v186
    let v190 : int64 = v189 / 10L
    let v191 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v192 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v190 v191 
    let v193 : US35 option = None
    let _v193 = ref v193 
    let v194 : US35 option ref = _v193 
    let v195 : (US35 option -> US35 option ref) = closure102(v194)
    let v196 : unit = ()
    let v197 : (unit -> unit) = closure103(v192, v195)
    let v198 : unit = (fun () -> v197 (); v196) ()
    let v201 : US35 option = _v193.Value 
    let v212 : US35 = US35_1
    let v213 : US35 = v201 |> Option.defaultValue v212 
    let v233 : US1 =
        match v213 with
        | US35_1 -> (* None *)
            US1_1
        | US35_0(v217) -> (* Some *)
            let v218 : string = "$0.naive_utc()"
            let v219 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v217 v218 
            let v220 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v221 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v219 v220 
            let v222 : string = "%Y%m%d-%H%M-%S%f"
            let v223 : string = "r#\"" + v222 + "\"#"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            let v225 : string = "$0.format($1).to_string()"
            let v226 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v221, v224) v225 
            let v227 : string = "fable_library_rust::String_::fromString($0)"
            let v228 : string = Fable.Core.RustInterop.emitRustExpr v226 v227 
            let v229 : string = $"{v228.[0..17]}-{v228.[18..21]}-{v228.[22]}"
            US1_0(v229)
    let v237 : string =
        match v233 with
        | US1_1 -> (* None *)
            let v235 : string = ""
            v235
        | US1_0(v234) -> (* Some *)
            v234
    let v238 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v239 : string = "0i64.into()"
    let v240 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v239 
    let _v238 = v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v241 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v241 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v244 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v244 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v247 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v247 
    #endif
#if FABLE_COMPILER_PYTHON
    let v250 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v250 
    #endif
#else
    let v253 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v238 = v253 
    #endif
    let v254 : System.TimeZoneInfo = _v238 
    let v259 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v260 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v261 : System.TimeSpan = v260 ()
    let _v259 = v261 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v264 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v265 : System.TimeSpan = v264 ()
    let _v259 = v265 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v268 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v269 : System.TimeSpan = v268 ()
    let _v259 = v269 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v272 : US10 = US10_0
    let v273 : US11 = US11_3(v272)
    let v274 : string = $"date_time.get_utc_offset / target: {v273}"
    let v275 : System.TimeSpan = failwith<System.TimeSpan> v274
    let _v259 = v275 
    #endif
#if FABLE_COMPILER_PYTHON
    let v276 : US10 = US10_0
    let v277 : US11 = US11_4(v276)
    let v278 : string = $"date_time.get_utc_offset / target: {v277}"
    let v279 : System.TimeSpan = failwith<System.TimeSpan> v278
    let _v259 = v279 
    #endif
#else
    let v280 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v281 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v282 : string = "0i64.into()"
    let v283 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v282 
    let _v281 = v283 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v284 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v284 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v287 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v287 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v290 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v290 
    #endif
#if FABLE_COMPILER_PYTHON
    let v293 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v293 
    #endif
#else
    let v296 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v281 = v296 
    #endif
    let v297 : System.TimeZoneInfo = _v281 
    let v302 : (System.DateTime -> System.TimeSpan) = v280 v297
    let v303 : System.TimeSpan = v302 v178
    let _v259 = v303 
    #endif
    let v304 : System.TimeSpan = _v259 
    let v310 : (System.TimeSpan -> int32) = _.Hours
    let v311 : int32 = v310 v304
    let v314 : bool = v311 > 0
    let v315 : uint8 =
        if v314 then
            1uy
        else
            0uy
    let v316 : string = method98()
    let v317 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v318 : string = v304.ToString v316 
    let _v317 = v318 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v319 : string = v304.ToString v316 
    let _v317 = v319 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v320 : string = v304.ToString v316 
    let _v317 = v320 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v321 : string = v304.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v317 = v321 
    #endif
#if FABLE_COMPILER_PYTHON
    let v322 : string = v304.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v317 = v322 
    #endif
#else
    let v323 : string = v304.ToString v316 
    let _v317 = v323 
    #endif
    let v324 : string = _v317 
    let v327 : string = $"{v315}{v324.[0..1]}{v324.[3..4]}"
    let v328 : (System.Guid -> string) = _.ToString()
    let v329 : string = v328 v0
    let v332 : System.Guid = System.Guid $"{v237}{v327}{v329.[v237.Length + v327.Length..]}"
    let _v2 = v332 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v333 : System.Guid = null |> unbox<System.Guid>
    let _v2 = v333 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v336 : string = method99()
    let v337 : (string -> string) = v1.ToString
    let v338 : string = v337 v336
    let v341 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v342 : string = "0i64.into()"
    let v343 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v342 
    let _v341 = v343 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v344 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v344 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v347 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v347 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v350 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v350 
    #endif
#if FABLE_COMPILER_PYTHON
    let v353 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v353 
    #endif
#else
    let v356 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v341 = v356 
    #endif
    let v357 : System.TimeZoneInfo = _v341 
    let v362 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v363 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v364 : System.TimeSpan = v363 ()
    let _v362 = v364 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v367 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v368 : System.TimeSpan = v367 ()
    let _v362 = v368 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v371 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v372 : System.TimeSpan = v371 ()
    let _v362 = v372 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v375 : US10 = US10_0
    let v376 : US11 = US11_3(v375)
    let v377 : string = $"date_time.get_utc_offset / target: {v376}"
    let v378 : System.TimeSpan = failwith<System.TimeSpan> v377
    let _v362 = v378 
    #endif
#if FABLE_COMPILER_PYTHON
    let v379 : US10 = US10_0
    let v380 : US11 = US11_4(v379)
    let v381 : string = $"date_time.get_utc_offset / target: {v380}"
    let v382 : System.TimeSpan = failwith<System.TimeSpan> v381
    let _v362 = v382 
    #endif
#else
    let v383 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v384 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v385 : string = "0i64.into()"
    let v386 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v385 
    let _v384 = v386 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v387 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v387 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v390 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v390 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v393 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v393 
    #endif
#if FABLE_COMPILER_PYTHON
    let v396 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v396 
    #endif
#else
    let v399 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v384 = v399 
    #endif
    let v400 : System.TimeZoneInfo = _v384 
    let v405 : (System.DateTime -> System.TimeSpan) = v383 v400
    let v406 : System.TimeSpan = v405 v1
    let _v362 = v406 
    #endif
    let v407 : System.TimeSpan = _v362 
    let v413 : (System.TimeSpan -> int32) = _.Hours
    let v414 : int32 = v413 v407
    let v417 : bool = v414 > 0
    let v418 : uint8 =
        if v417 then
            1uy
        else
            0uy
    let v419 : string = method100()
    let v420 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v421 : string = v407.ToString v419 
    let _v420 = v421 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v422 : string = v407.ToString v419 
    let _v420 = v422 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v423 : string = v407.ToString v419 
    let _v420 = v423 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v424 : string = v407.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v420 = v424 
    #endif
#if FABLE_COMPILER_PYTHON
    let v425 : string = v407.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v420 = v425 
    #endif
#else
    let v426 : string = v407.ToString v419 
    let _v420 = v426 
    #endif
    let v427 : string = _v420 
    let v430 : string = $"{v418}{v427}"
    let v431 : (System.Guid -> string) = _.ToString()
    let v432 : string = v431 v0
    let v435 : System.Guid = System.Guid $"{v338}{v430}{v432.[v338.Length + v430.Length..]}"
    let _v2 = v435 
    #endif
#if FABLE_COMPILER_PYTHON
    let v436 : string = method99()
    let v437 : (string -> string) = v1.ToString
    let v438 : string = v437 v436
    let v441 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v442 : string = "0i64.into()"
    let v443 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v442 
    let _v441 = v443 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v444 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v444 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v447 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v447 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v450 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v450 
    #endif
#if FABLE_COMPILER_PYTHON
    let v453 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v453 
    #endif
#else
    let v456 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v441 = v456 
    #endif
    let v457 : System.TimeZoneInfo = _v441 
    let v462 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v463 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v464 : System.TimeSpan = v463 ()
    let _v462 = v464 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v467 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v468 : System.TimeSpan = v467 ()
    let _v462 = v468 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v471 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v472 : System.TimeSpan = v471 ()
    let _v462 = v472 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v475 : US10 = US10_0
    let v476 : US11 = US11_3(v475)
    let v477 : string = $"date_time.get_utc_offset / target: {v476}"
    let v478 : System.TimeSpan = failwith<System.TimeSpan> v477
    let _v462 = v478 
    #endif
#if FABLE_COMPILER_PYTHON
    let v479 : US10 = US10_0
    let v480 : US11 = US11_4(v479)
    let v481 : string = $"date_time.get_utc_offset / target: {v480}"
    let v482 : System.TimeSpan = failwith<System.TimeSpan> v481
    let _v462 = v482 
    #endif
#else
    let v483 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v484 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v485 : string = "0i64.into()"
    let v486 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v485 
    let _v484 = v486 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v487 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v487 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v490 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v490 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v493 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v493 
    #endif
#if FABLE_COMPILER_PYTHON
    let v496 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v496 
    #endif
#else
    let v499 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v484 = v499 
    #endif
    let v500 : System.TimeZoneInfo = _v484 
    let v505 : (System.DateTime -> System.TimeSpan) = v483 v500
    let v506 : System.TimeSpan = v505 v1
    let _v462 = v506 
    #endif
    let v507 : System.TimeSpan = _v462 
    let v513 : (System.TimeSpan -> int32) = _.Hours
    let v514 : int32 = v513 v507
    let v517 : bool = v514 > 0
    let v518 : uint8 =
        if v517 then
            1uy
        else
            0uy
    let v519 : string = method100()
    let v520 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v521 : string = v507.ToString v519 
    let _v520 = v521 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v522 : string = v507.ToString v519 
    let _v520 = v522 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v523 : string = v507.ToString v519 
    let _v520 = v523 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v524 : string = v507.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v520 = v524 
    #endif
#if FABLE_COMPILER_PYTHON
    let v525 : string = v507.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v520 = v525 
    #endif
#else
    let v526 : string = v507.ToString v519 
    let _v520 = v526 
    #endif
    let v527 : string = _v520 
    let v530 : string = $"{v518}{v527}"
    let v531 : (System.Guid -> string) = _.ToString()
    let v532 : string = v531 v0
    let v535 : System.Guid = System.Guid $"{v438}{v530}{v532.[v438.Length + v530.Length..]}"
    let _v2 = v535 
    #endif
#else
    let v536 : string = method99()
    let v537 : (string -> string) = v1.ToString
    let v538 : string = v537 v536
    let v541 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v542 : string = "0i64.into()"
    let v543 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v542 
    let _v541 = v543 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v544 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v544 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v547 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v547 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v550 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v550 
    #endif
#if FABLE_COMPILER_PYTHON
    let v553 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v553 
    #endif
#else
    let v556 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v541 = v556 
    #endif
    let v557 : System.TimeZoneInfo = _v541 
    let v562 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v563 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v564 : System.TimeSpan = v563 ()
    let _v562 = v564 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v567 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v568 : System.TimeSpan = v567 ()
    let _v562 = v568 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v571 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v572 : System.TimeSpan = v571 ()
    let _v562 = v572 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v575 : US10 = US10_0
    let v576 : US11 = US11_3(v575)
    let v577 : string = $"date_time.get_utc_offset / target: {v576}"
    let v578 : System.TimeSpan = failwith<System.TimeSpan> v577
    let _v562 = v578 
    #endif
#if FABLE_COMPILER_PYTHON
    let v579 : US10 = US10_0
    let v580 : US11 = US11_4(v579)
    let v581 : string = $"date_time.get_utc_offset / target: {v580}"
    let v582 : System.TimeSpan = failwith<System.TimeSpan> v581
    let _v562 = v582 
    #endif
#else
    let v583 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v584 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v585 : string = "0i64.into()"
    let v586 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v585 
    let _v584 = v586 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v587 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v587 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v590 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v590 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v593 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v593 
    #endif
#if FABLE_COMPILER_PYTHON
    let v596 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v596 
    #endif
#else
    let v599 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v584 = v599 
    #endif
    let v600 : System.TimeZoneInfo = _v584 
    let v605 : (System.DateTime -> System.TimeSpan) = v583 v600
    let v606 : System.TimeSpan = v605 v1
    let _v562 = v606 
    #endif
    let v607 : System.TimeSpan = _v562 
    let v613 : (System.TimeSpan -> int32) = _.Hours
    let v614 : int32 = v613 v607
    let v617 : bool = v614 > 0
    let v618 : uint8 =
        if v617 then
            1uy
        else
            0uy
    let v619 : string = method100()
    let v620 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v621 : string = v607.ToString v619 
    let _v620 = v621 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v622 : string = v607.ToString v619 
    let _v620 = v622 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v623 : string = v607.ToString v619 
    let _v620 = v623 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v624 : string = v607.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v620 = v624 
    #endif
#if FABLE_COMPILER_PYTHON
    let v625 : string = v607.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v620 = v625 
    #endif
#else
    let v626 : string = v607.ToString v619 
    let _v620 = v626 
    #endif
    let v627 : string = _v620 
    let v630 : string = $"{v618}{v627}"
    let v631 : (System.Guid -> string) = _.ToString()
    let v632 : string = v631 v0
    let v635 : System.Guid = System.Guid $"{v538}{v630}{v632.[v538.Length + v630.Length..]}"
    let _v2 = v635 
    #endif
    let v636 : System.Guid = _v2 
    v636
and method101 (v0 : string, v1 : string) : unit =
    let v2 : bool = method19(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method28(v0)
        ()
    let v5 : string = method24(v1)
    let v6 : bool = method19(v5)
    let v7 : bool = v6 = false
    if v7 then
        let v8 : System.IDisposable = method28(v5)
        ()
    let v9 : bool = method19(v1)
    let v14 : bool =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v10 
            let v12 : string = "v11.is_err()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
            v13
        else
            false
    if v14 then
        let v15 : bool = true
        method32(v15, v1)
    let v16 : bool = method19(v1)
    let v17 : bool = v16 = false
    if v17 then
        let v18 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v19 : bool = true
        let mutable _v19 : unit option = None 
        
#if _FREEBSD
        let v20 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v20 
        () 
        #endif
#if _LINUX
        let v21 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v21 
        () 
        #endif
#if _OSX
        let v22 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v22 
        () 
        #endif
#if _WINDOWS
        let v23 : string = "std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v23 
        () 
        #endif
        |> fun x -> _v19 <- Some x
        match _v19 with Some x -> x | None -> failwith "runtime.run_platform / _v19=None"
        let _v18 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v18 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v18 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v18 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v18 = () 
        #endif
#else
        let v24 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        let _v18 = () 
        #endif
        _v18 
        ()
and closure105 () () : string =
    let v0 : string = "common.retry_fn' / loop"
    v0
and closure104 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : unit = ()
    let v6 : (unit -> unit) = closure2()
    let v7 : unit = (fun () -> v6 (); v5) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : int64 option) = State.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v6 (); v35) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : int64 option) = State.trace_state.Value
    let v64 : US0 = v52.l0
    let v65 : bool = v51.l0
    let v66 : bool = v65 = false
    let v69 : bool =
        if v66 then
            false
        else
            let v67 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v64
            let v68 : bool = 1 >= v67
            v68
    if v69 then
        let v70 : unit = ()
        let v71 : (unit -> unit) = closure7(v20)
        let v72 : unit = (fun () -> v71 (); v70) ()
        let v75 : unit = ()
        let v76 : unit = (fun () -> v6 (); v75) ()
        let struct (v89 : Mut0, v90 : Mut1, v91 : Mut2, v92 : Mut3, v93 : int64 option) = State.trace_state.Value
        let v104 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v105 : US3 option = None
        let _v105 = ref v105 
        let v106 : US3 option ref = _v105 
        let v107 : (US3 option -> US3 option ref) = closure8(v106)
        let v108 : unit = ()
        let v109 : (unit -> unit) = closure9(v93, v107)
        let v110 : unit = (fun () -> v109 (); v108) ()
        let v113 : US3 option = _v105.Value 
        let v124 : US3 = US3_1
        let v125 : US3 = v113 |> Option.defaultValue v124 
        let v165 : System.DateTime =
            match v125 with
            | US3_1 -> (* None *)
                let v161 : System.DateTime = System.DateTime.Now
                v161
            | US3_0(v129) -> (* Some *)
                let v130 : System.DateTime = System.DateTime.Now
                let v133 : (System.DateTime -> int64) = _.Ticks
                let v134 : int64 = v133 v130
                let v137 : int64 = v134 - v129
                let v138 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v139 : System.TimeSpan = v138 v137
                let v142 : (System.TimeSpan -> int32) = _.Hours
                let v143 : int32 = v142 v139
                let v146 : (System.TimeSpan -> int32) = _.Minutes
                let v147 : int32 = v146 v139
                let v150 : (System.TimeSpan -> int32) = _.Seconds
                let v151 : int32 = v150 v139
                let v154 : (System.TimeSpan -> int32) = _.Milliseconds
                let v155 : int32 = v154 v139
                let v158 : System.DateTime = System.DateTime (1, 1, 1, v143, v147, v151, v155)
                v158
        let v166 : string = method6()
        let v169 : (string -> string) = v165.ToString
        let v170 : string = v169 v166
        let _v104 = v170 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v173 : US3 option = None
        let _v173 = ref v173 
        let v174 : US3 option ref = _v173 
        let v175 : (US3 option -> US3 option ref) = closure8(v174)
        let v176 : unit = ()
        let v177 : (unit -> unit) = closure9(v93, v175)
        let v178 : unit = (fun () -> v177 (); v176) ()
        let v181 : US3 option = _v173.Value 
        let v192 : US3 = US3_1
        let v193 : US3 = v181 |> Option.defaultValue v192 
        let v233 : System.DateTime =
            match v193 with
            | US3_1 -> (* None *)
                let v229 : System.DateTime = System.DateTime.Now
                v229
            | US3_0(v197) -> (* Some *)
                let v198 : System.DateTime = System.DateTime.Now
                let v201 : (System.DateTime -> int64) = _.Ticks
                let v202 : int64 = v201 v198
                let v205 : int64 = v202 - v197
                let v206 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v207 : System.TimeSpan = v206 v205
                let v210 : (System.TimeSpan -> int32) = _.Hours
                let v211 : int32 = v210 v207
                let v214 : (System.TimeSpan -> int32) = _.Minutes
                let v215 : int32 = v214 v207
                let v218 : (System.TimeSpan -> int32) = _.Seconds
                let v219 : int32 = v218 v207
                let v222 : (System.TimeSpan -> int32) = _.Milliseconds
                let v223 : int32 = v222 v207
                let v226 : System.DateTime = System.DateTime (1, 1, 1, v211, v215, v219, v223)
                v226
        let v234 : string = method6()
        let v237 : (string -> string) = v233.ToString
        let v238 : string = v237 v234
        let _v104 = v238 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v241 : string = $"near_sdk::env::block_timestamp()"
        let v242 : uint64 = Fable.Core.RustInterop.emitRustExpr () v241 
        let v243 : US3 option = None
        let _v243 = ref v243 
        let v244 : US3 option ref = _v243 
        let v245 : (US3 option -> US3 option ref) = closure8(v244)
        let v246 : unit = ()
        let v247 : (unit -> unit) = closure9(v93, v245)
        let v248 : unit = (fun () -> v247 (); v246) ()
        let v251 : US3 option = _v243.Value 
        let v262 : US3 = US3_1
        let v263 : US3 = v251 |> Option.defaultValue v262 
        let v272 : uint64 =
            match v263 with
            | US3_1 -> (* None *)
                v242
            | US3_0(v267) -> (* Some *)
                let v268 : (int64 -> uint64) = uint64
                let v269 : uint64 = v268 v267
                let v270 : uint64 = v242 - v269
                v270
        let v273 : uint64 = v272 / 1000000000UL
        let v274 : uint64 = v273 % 60UL
        let v275 : uint64 = v273 / 60UL
        let v276 : uint64 = v275 % 60UL
        let v277 : uint64 = v273 / 3600UL
        let v278 : uint64 = v277 % 24UL
        let v279 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v280 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v278, v276, v274) v279 
        let v281 : string = "fable_library_rust::String_::fromString($0)"
        let v282 : string = Fable.Core.RustInterop.emitRustExpr v280 v281 
        let _v104 = v282 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v283 : US3 option = None
        let _v283 = ref v283 
        let v284 : US3 option ref = _v283 
        let v285 : (US3 option -> US3 option ref) = closure8(v284)
        let v286 : unit = ()
        let v287 : (unit -> unit) = closure9(v93, v285)
        let v288 : unit = (fun () -> v287 (); v286) ()
        let v291 : US3 option = _v283.Value 
        let v302 : US3 = US3_1
        let v303 : US3 = v291 |> Option.defaultValue v302 
        let v343 : System.DateTime =
            match v303 with
            | US3_1 -> (* None *)
                let v339 : System.DateTime = System.DateTime.Now
                v339
            | US3_0(v307) -> (* Some *)
                let v308 : System.DateTime = System.DateTime.Now
                let v311 : (System.DateTime -> int64) = _.Ticks
                let v312 : int64 = v311 v308
                let v315 : int64 = v312 - v307
                let v316 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v317 : System.TimeSpan = v316 v315
                let v320 : (System.TimeSpan -> int32) = _.Hours
                let v321 : int32 = v320 v317
                let v324 : (System.TimeSpan -> int32) = _.Minutes
                let v325 : int32 = v324 v317
                let v328 : (System.TimeSpan -> int32) = _.Seconds
                let v329 : int32 = v328 v317
                let v332 : (System.TimeSpan -> int32) = _.Milliseconds
                let v333 : int32 = v332 v317
                let v336 : System.DateTime = System.DateTime (1, 1, 1, v321, v325, v329, v333)
                v336
        let v344 : string = method7()
        let v347 : (string -> string) = v343.ToString
        let v348 : string = v347 v344
        let _v104 = v348 
        #endif
#if FABLE_COMPILER_PYTHON
        let v351 : US3 option = None
        let _v351 = ref v351 
        let v352 : US3 option ref = _v351 
        let v353 : (US3 option -> US3 option ref) = closure8(v352)
        let v354 : unit = ()
        let v355 : (unit -> unit) = closure9(v93, v353)
        let v356 : unit = (fun () -> v355 (); v354) ()
        let v359 : US3 option = _v351.Value 
        let v370 : US3 = US3_1
        let v371 : US3 = v359 |> Option.defaultValue v370 
        let v411 : System.DateTime =
            match v371 with
            | US3_1 -> (* None *)
                let v407 : System.DateTime = System.DateTime.Now
                v407
            | US3_0(v375) -> (* Some *)
                let v376 : System.DateTime = System.DateTime.Now
                let v379 : (System.DateTime -> int64) = _.Ticks
                let v380 : int64 = v379 v376
                let v383 : int64 = v380 - v375
                let v384 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v385 : System.TimeSpan = v384 v383
                let v388 : (System.TimeSpan -> int32) = _.Hours
                let v389 : int32 = v388 v385
                let v392 : (System.TimeSpan -> int32) = _.Minutes
                let v393 : int32 = v392 v385
                let v396 : (System.TimeSpan -> int32) = _.Seconds
                let v397 : int32 = v396 v385
                let v400 : (System.TimeSpan -> int32) = _.Milliseconds
                let v401 : int32 = v400 v385
                let v404 : System.DateTime = System.DateTime (1, 1, 1, v389, v393, v397, v401)
                v404
        let v412 : string = method7()
        let v415 : (string -> string) = v411.ToString
        let v416 : string = v415 v412
        let _v104 = v416 
        #endif
#else
        let v419 : US3 option = None
        let _v419 = ref v419 
        let v420 : US3 option ref = _v419 
        let v421 : (US3 option -> US3 option ref) = closure8(v420)
        let v422 : unit = ()
        let v423 : (unit -> unit) = closure9(v93, v421)
        let v424 : unit = (fun () -> v423 (); v422) ()
        let v427 : US3 option = _v419.Value 
        let v438 : US3 = US3_1
        let v439 : US3 = v427 |> Option.defaultValue v438 
        let v479 : System.DateTime =
            match v439 with
            | US3_1 -> (* None *)
                let v475 : System.DateTime = System.DateTime.Now
                v475
            | US3_0(v443) -> (* Some *)
                let v444 : System.DateTime = System.DateTime.Now
                let v447 : (System.DateTime -> int64) = _.Ticks
                let v448 : int64 = v447 v444
                let v451 : int64 = v448 - v443
                let v452 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v453 : System.TimeSpan = v452 v451
                let v456 : (System.TimeSpan -> int32) = _.Hours
                let v457 : int32 = v456 v453
                let v460 : (System.TimeSpan -> int32) = _.Minutes
                let v461 : int32 = v460 v453
                let v464 : (System.TimeSpan -> int32) = _.Seconds
                let v465 : int32 = v464 v453
                let v468 : (System.TimeSpan -> int32) = _.Milliseconds
                let v469 : int32 = v468 v453
                let v472 : System.DateTime = System.DateTime (1, 1, 1, v457, v461, v465, v469)
                v472
        let v480 : string = method7()
        let v483 : (string -> string) = v479.ToString
        let v484 : string = v483 v480
        let _v104 = v484 
        #endif
        let v487 : string = _v104 
        let v557 : string = "Debug"
        let v558 : (unit -> string) = v557.ToLower
        let v559 : string = v558 ()
        let v562 : string = v559.PadLeft (7, ' ')
        let v576 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v577 : string = "inline_colorization::color_bright_blue"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "&*$0"
        let v580 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v562 v579 
        let v581 : string = "inline_colorization::color_reset"
        let v582 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "\"{v578}{v580}{v582}\""
        let v584 : string = @$"format!(" + v583 + ")"
        let v585 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "fable_library_rust::String_::fromString($0)"
        let v587 : string = Fable.Core.RustInterop.emitRustExpr v585 v586 
        let _v576 = v587 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v588 : string = "inline_colorization::color_bright_blue"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v562 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v576 = v598 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v599 : string = "inline_colorization::color_bright_blue"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v562 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v576 = v609 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v610 : string = "\u001b[94m"
        let v611 : string = method8()
        let v612 : string = v610 + v562 
        let v613 : string = v612 + v611 
        let _v576 = v613 
        #endif
#if FABLE_COMPILER_PYTHON
        let v614 : string = "\u001b[94m"
        let v615 : string = method8()
        let v616 : string = v614 + v562 
        let v617 : string = v616 + v615 
        let _v576 = v617 
        #endif
#else
        let v618 : string = "\u001b[94m"
        let v619 : string = method8()
        let v620 : string = v618 + v562 
        let v621 : string = v620 + v619 
        let _v576 = v621 
        #endif
        let v622 : string = _v576 
        let v628 : int64 = v89.l0
        let v629 : string = $"{v1}/{v0}"
        let v630 : string = method9()
        let v631 : Mut4 = {l0 = v630} : Mut4
        let v632 : string = "{ "
        let v633 : string = $"{v632}"
        let v636 : unit = ()
        let v637 : (unit -> unit) = closure10(v631, v633)
        let v638 : unit = (fun () -> v637 (); v636) ()
        let v641 : string = "is_error"
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure10(v631, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = " = "
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure10(v631, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v661 : string =
            if v4 then
                let v659 : string = "true"
                v659
            else
                let v660 : string = "false"
                v660
        let v662 : string = $"{v661}"
        let v665 : unit = ()
        let v666 : (unit -> unit) = closure10(v631, v662)
        let v667 : unit = (fun () -> v666 (); v665) ()
        let v670 : string = "; "
        let v671 : string = $"{v670}"
        let v674 : unit = ()
        let v675 : (unit -> unit) = closure10(v631, v671)
        let v676 : unit = (fun () -> v675 (); v674) ()
        let v679 : string = "retry"
        let v680 : string = $"{v679}"
        let v683 : unit = ()
        let v684 : (unit -> unit) = closure10(v631, v680)
        let v685 : unit = (fun () -> v684 (); v683) ()
        let v688 : string = $"{v650}"
        let v691 : unit = ()
        let v692 : (unit -> unit) = closure10(v631, v688)
        let v693 : unit = (fun () -> v692 (); v691) ()
        let v696 : string = $"{v629}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v631, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = $"{v670}"
        let v707 : unit = ()
        let v708 : (unit -> unit) = closure10(v631, v704)
        let v709 : unit = (fun () -> v708 (); v707) ()
        let v712 : string = "result"
        let v713 : string = $"{v712}"
        let v716 : unit = ()
        let v717 : (unit -> unit) = closure10(v631, v713)
        let v718 : unit = (fun () -> v717 (); v716) ()
        let v721 : string = $"{v650}"
        let v724 : unit = ()
        let v725 : (unit -> unit) = closure10(v631, v721)
        let v726 : unit = (fun () -> v725 (); v724) ()
        let v729 : string = $"{v2}"
        let v732 : unit = ()
        let v733 : (unit -> unit) = closure10(v631, v729)
        let v734 : unit = (fun () -> v733 (); v732) ()
        let v737 : string = ", "
        let v738 : string = $"{v737}"
        let v741 : unit = ()
        let v742 : (unit -> unit) = closure10(v631, v738)
        let v743 : unit = (fun () -> v742 (); v741) ()
        let v746 : string = $"{v3}"
        let v749 : unit = ()
        let v750 : (unit -> unit) = closure10(v631, v746)
        let v751 : unit = (fun () -> v750 (); v749) ()
        let v754 : string = " }"
        let v755 : string = $"{v754}"
        let v758 : unit = ()
        let v759 : (unit -> unit) = closure10(v631, v755)
        let v760 : unit = (fun () -> v759 (); v758) ()
        let v763 : string = v631.l0
        let v764 : (unit -> string) = closure105()
        let v765 : string = $"{v487} {v622} #{v628} %s{v764 ()} / {v763}"
        let v768 : char list = []
        let v769 : (char list -> (char [])) = List.toArray
        let v770 : (char []) = v769 v768
        let v773 : string = v765.TrimStart v770 
        let v791 : char list = []
        let v792 : char list = '/' :: v791 
        let v795 : char list = ' ' :: v792 
        let v798 : (char list -> (char [])) = List.toArray
        let v799 : (char []) = v798 v795
        let v802 : string = v773.TrimEnd v799 
        let v820 : (string -> unit) = closure12()
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v802 v822 
        let _v821 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v823 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v802 v823 
        let _v821 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v824 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v802 v824 
        let _v821 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v820 v802
        let _v821 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v820 v802
        let _v821 = () 
        #endif
#else
        v820 v802
        let _v821 = () 
        #endif
        _v821 
        let v825 : (string -> unit) = v21.l0
        v825 v802
and method104 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method40(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US36 =
        if v11 then
            US36_0(v9, v10)
        else
            US36_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US36_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US36_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure104(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v852 : uint8 = v8 + 1uy
        method104(v0, v1, v2, v3, v4, v5, v6, v7, v852)
and method103 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method104(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method102 (v0 : US33, v1 : string, v2 : string, v3 : string, v4 : US12) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "cfg!(windows)"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "cfg!(windows)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : US10 = US10_0
    let v18 : US11 = US11_3(v17)
    let v19 : string = $"platform.is_windows / target: {v18}"
    let v20 : bool = failwith<bool> v19
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : US10 = US10_0
    let v22 : US11 = US11_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _v10 = v24 
    #endif
#else
    let v25 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v26 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v27 : bool = v26 v25
    let _v10 = v27 
    #endif
    let v28 : bool = _v10 
    let v36 : string =
        if v28 then
            let v34 : string = "_WINDOWS"
            v34
        else
            let v35 : string = "_LINUX"
            v35
    let v37 : string = $" --define {v36}"
    let v67 : string =
        match v0 with
        | US33_1 -> (* None *)
            let v65 : string = ""
            v65
        | US33_0(v38) -> (* Some *)
            let v39 : bool =
                match v38 with
                | US34_0 -> (* Wasm *)
                    true
                | _ ->
                    false
            let v43 : US1 =
                if v39 then
                    let v40 : string = "Wasm"
                    US1_0(v40)
                else
                    US1_1
            let v57 : US1 =
                match v43 with
                | US1_1 -> (* None *)
                    let v46 : bool =
                        match v38 with
                        | US34_1 -> (* Contract *)
                            true
                        | _ ->
                            false
                    let v50 : US1 =
                        if v46 then
                            let v47 : string = "Contract"
                            US1_0(v47)
                        else
                            US1_1
                    match v50 with
                    | US1_1 -> (* None *)
                        US1_1
                    | US1_0(v51) -> (* Some *)
                        US1_0(v51)
                | US1_0(v44) -> (* Some *)
                    US1_0(v44)
            let v61 : string =
                match v57 with
                | US1_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US1_0(v58) -> (* Some *)
                    v58
            let v62 : (unit -> string) = v61.ToUpper
            let v63 : string = v62 ()
            let v64 : string = $" --define {v63}"
            v64
    let v68 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v37}{v67}"
    let v74 : Result<string, string> =
        match v4 with
        | US12_1(v71) -> (* Error *)
            let v72 : Result<string, string> = Error v71 
            v72
        | US12_0(v69) -> (* Ok *)
            let v70 : Result<string, string> = Ok v69 
            v70
    let v75 : string = "v74.ok()"
    let v76 : string option = Fable.Core.RustInterop.emitRustExpr () v75 
    let v77 : uint8 = 3uy
    let v78 : bool = true
    method103(v77, v68, v5, v6, v7, v8, v78, v76)
and closure107 () () : string =
    let v0 : string = "spiral_builder.process_rust / dotnet fable error"
    v0
and closure106 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Critical"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_red"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[91m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[91m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[91m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method9()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure10(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "exit_code"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure10(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure10(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v1}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure10(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure10(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "dotnet_fable_result"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure10(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = $"{v0}"
        let v692 : unit = ()
        let v693 : (unit -> unit) = closure10(v627, v689)
        let v694 : unit = (fun () -> v693 (); v692) ()
        let v697 : string = " }"
        let v698 : string = $"{v697}"
        let v701 : unit = ()
        let v702 : (unit -> unit) = closure10(v627, v698)
        let v703 : unit = (fun () -> v702 (); v701) ()
        let v706 : string = v627.l0
        let v707 : (unit -> string) = closure107()
        let v708 : string = $"{v484} {v619} #{v625} %s{v707 ()} / {v706}"
        let v711 : char list = []
        let v712 : (char list -> (char [])) = List.toArray
        let v713 : (char []) = v712 v711
        let v716 : string = v708.TrimStart v713 
        let v734 : char list = []
        let v735 : char list = '/' :: v734 
        let v738 : char list = ' ' :: v735 
        let v741 : (char list -> (char [])) = List.toArray
        let v742 : (char []) = v741 v738
        let v745 : string = v716.TrimEnd v742 
        let v763 : (string -> unit) = closure12()
        let v764 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v765 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v765 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v766 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v767 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v767 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v763 v745
        let _v764 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v763 v745
        let _v764 = () 
        #endif
#else
        v763 v745
        let _v764 = () 
        #endif
        _v764 
        let v768 : (string -> unit) = v18.l0
        v768 v745
and closure108 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "near-sdk"
    let v4 : bool = v2.Contains v3 
    v4
and method105 () : (std_string_String -> bool) =
    closure108()
and method106 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method107 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method108 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and closure109 (v0 : US37 option ref) (v1 : US37 option) : US37 option ref =
    v0.Value <- v1 
    v0
and closure110 (v0 : std_collections_HashMap<string, string> option, v1 : (US37 option -> US37 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_collections_HashMap<string, string> = x
    let v3 : US37 = US37_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method110 () : string =
    let v0 : string = "a"
    v0
and closure111 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 1 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Debug"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_blue"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[94m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[94m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[94m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = $"{v0}/{3uy}"
        let v629 : string = method9()
        let v630 : Mut4 = {l0 = v629} : Mut4
        let v631 : string = "{ "
        let v632 : string = $"{v631}"
        let v635 : unit = ()
        let v636 : (unit -> unit) = closure10(v630, v632)
        let v637 : unit = (fun () -> v636 (); v635) ()
        let v640 : string = "is_error"
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v630, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = " = "
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v630, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v660 : string =
            if v3 then
                let v658 : string = "true"
                v658
            else
                let v659 : string = "false"
                v659
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v630, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : string = "; "
        let v670 : string = $"{v669}"
        let v673 : unit = ()
        let v674 : (unit -> unit) = closure10(v630, v670)
        let v675 : unit = (fun () -> v674 (); v673) ()
        let v678 : string = "retry"
        let v679 : string = $"{v678}"
        let v682 : unit = ()
        let v683 : (unit -> unit) = closure10(v630, v679)
        let v684 : unit = (fun () -> v683 (); v682) ()
        let v687 : string = $"{v649}"
        let v690 : unit = ()
        let v691 : (unit -> unit) = closure10(v630, v687)
        let v692 : unit = (fun () -> v691 (); v690) ()
        let v695 : string = $"{v628}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure10(v630, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = $"{v669}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v630, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = "result"
        let v712 : string = $"{v711}"
        let v715 : unit = ()
        let v716 : (unit -> unit) = closure10(v630, v712)
        let v717 : unit = (fun () -> v716 (); v715) ()
        let v720 : string = $"{v649}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v630, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = $"{v1}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure10(v630, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = ", "
        let v737 : string = $"{v736}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure10(v630, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = $"{v2}"
        let v748 : unit = ()
        let v749 : (unit -> unit) = closure10(v630, v745)
        let v750 : unit = (fun () -> v749 (); v748) ()
        let v753 : string = " }"
        let v754 : string = $"{v753}"
        let v757 : unit = ()
        let v758 : (unit -> unit) = closure10(v630, v754)
        let v759 : unit = (fun () -> v758 (); v757) ()
        let v762 : string = v630.l0
        let v763 : (unit -> string) = closure105()
        let v764 : string = $"{v486} {v621} #{v627} %s{v763 ()} / {v762}"
        let v767 : char list = []
        let v768 : (char list -> (char [])) = List.toArray
        let v769 : (char []) = v768 v767
        let v772 : string = v764.TrimStart v769 
        let v790 : char list = []
        let v791 : char list = '/' :: v790 
        let v794 : char list = ' ' :: v791 
        let v797 : (char list -> (char [])) = List.toArray
        let v798 : (char []) = v797 v794
        let v801 : string = v772.TrimEnd v798 
        let v819 : (string -> unit) = closure12()
        let v820 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v821 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v801 v821 
        let _v820 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v822 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v801 v822 
        let _v820 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v823 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v801 v823 
        let _v820 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v819 v801
        let _v820 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v819 v801
        let _v820 = () 
        #endif
#else
        v819 v801
        let _v820 = () 
        #endif
        _v820 
        let v824 : (string -> unit) = v20.l0
        v824 v801
and method109 (v0 : US12, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US12_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US12_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    let v15 : string = "v14.ok()"
    let v16 : string option = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : bool = true
    let struct (v18 : int32, v19 : string) = method40(v8, v3, v4, v5, v6, v17, v16)
    let v20 : string = "failed to load manifest for workspace member"
    let v21 : bool = v19.Contains v20 
    let v24 : bool = v21 = false
    let v193 : US36 =
        if v24 then
            let v25 : bool = v18 = 0
            if v25 then
                US36_0(v18, v19)
            else
                US36_1(v18, v19)
        else
            let v29 : string = $"regex::Regex::new(&$0)"
            let v30 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v31 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v30 v29 
            let v32 : string = "$0.unwrap()"
            let v33 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "&*$0"
            let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19 v34 
            let v36 : string = "String::from($0)"
            let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let v38 : string = "true; let _result = (move || { // rust.capture_move"
            let v39 : bool = Fable.Core.RustInterop.emitRustExpr () v38 
            let v40 : string = "Box::new($0)"
            let v41 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v37 v40 
            let v42 : string = "Box::leak($0)"
            let v43 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = $"v33.captures_iter(v43)"
            let v45 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v44 
            let v46 : string = "true; let _result : Vec<_> = v45.map(|x| { //"
            let v47 : bool = Fable.Core.RustInterop.emitRustExpr () v46 
            let v48 : string = $"x"
            let v49 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v48 
            let v50 : string = "Box::new($0)"
            let v51 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v49 v50 
            let v52 : string = "Box::leak($0)"
            let v53 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v51 v52 
            let v54 : string = $"$0.capture_names()"
            let v55 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v33 v54 
            let v56 : string = "true; let _result : std::collections::HashMap<_, _> = v55.map(|x| { //"
            let v57 : bool = Fable.Core.RustInterop.emitRustExpr () v56 
            let v58 : string = "x.unwrap_or(\"\").to_string().into()"
            let v59 : string = Fable.Core.RustInterop.emitRustExpr () v58 
            let v60 : string = "$0.clone()"
            let v61 : string = Fable.Core.RustInterop.emitRustExpr v59 v60 
            let v62 : string = $"v53.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v63 : string = Fable.Core.RustInterop.emitRustExpr v59 v62 
            let v64 : (string * string) = v61, v63 
            let v65 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v66 : bool = Fable.Core.RustInterop.emitRustExpr v64 v65 
            let v67 : string = "_result"
            let v68 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v67 
            let v69 : string = "true; $0 }).collect::<Vec<_>>()"
            let v70 : bool = Fable.Core.RustInterop.emitRustExpr v68 v69 
            let v71 : string = "_result"
            let v72 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v71 
            let v73 : string = "true; $0 })()"
            let v74 : bool = Fable.Core.RustInterop.emitRustExpr v72 v73 
            let v75 : string = "_result"
            let v76 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v75 
            let v77 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v78 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v76 v77 
            let v79 : std_collections_HashMap<string, string> option = v78 |> Array.tryItem 0 
            let v80 : US37 option = None
            let _v80 = ref v80 
            let v81 : US37 option ref = _v80 
            let v82 : (US37 option -> US37 option ref) = closure109(v81)
            let v83 : unit = ()
            let v84 : (unit -> unit) = closure110(v79, v82)
            let v85 : unit = (fun () -> v84 (); v83) ()
            let v88 : US37 option = _v80.Value 
            let v99 : US37 = US37_1
            let v100 : US37 = v88 |> Option.defaultValue v99 
            let v135 : US38 =
                match v100 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v104) -> (* Some *)
                    let v105 : string = method110()
                    let v106 : string = "std::collections::HashMap::get(&$0, &v105).map(|x| x).cloned()"
                    let v107 : string option = Fable.Core.RustInterop.emitRustExpr v104 v106 
                    let v108 : US1 option = None
                    let _v108 = ref v108 
                    let v109 : US1 option ref = _v108 
                    let v110 : (US1 option -> US1 option ref) = closure3(v109)
                    let v111 : unit = ()
                    let v112 : (unit -> unit) = closure4(v107, v110)
                    let v113 : unit = (fun () -> v112 (); v111) ()
                    let v116 : US1 option = _v108.Value 
                    let v127 : US1 = US1_1
                    let v128 : US1 = v116 |> Option.defaultValue v127 
                    US38_0(v128)
            let v142 : US1 =
                match v135 with
                | US38_0(v136) -> (* Some *)
                    match v136 with
                    | US1_0(v137) -> (* Some *)
                        US1_0(v137)
                    | _ ->
                        US1_1
                | _ ->
                    US1_1
            match v142 with
            | US1_1 -> (* None *)
                US36_1(v18, v19)
            | US1_0(v144) -> (* Some *)
                let v145 : bool = method27(v144)
                let v146 : bool = v145 = false
                if v146 then
                    let v147 : string = method24(v144)
                    let v148 : System.IDisposable = method28(v147)
                    let v149 : System.DateTime = System.DateTime.Now
                    let v152 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v153 : System.Guid = v152 ()
                    let v156 : System.Guid = method97(v153, v149)
                    let v157 : (System.Guid -> string) = _.ToString()
                    let v158 : string = v157 v156
                    let v161 : string = $"[package]"
                    let v162 : string = $"name = \"spiral_builder_{v158}\""
                    let v163 : string = "\n"
                    let v164 : string = v161 + v163 
                    let v165 : string = v164 + v162 
                    let v166 : string = $"version = \"0.0.1\""
                    let v167 : string = v165 + v163 
                    let v168 : string = v167 + v166 
                    let v169 : string = $"edition = \"2021\""
                    let v170 : string = v168 + v163 
                    let v171 : string = v170 + v169 
                    let v172 : string = $""
                    let v173 : string = v171 + v163 
                    let v174 : string = v173 + v172 
                    let v175 : string = $"[[bin]]"
                    let v176 : string = v174 + v163 
                    let v177 : string = v176 + v175 
                    let v178 : string = $"name = \"spiral_builder_{v158}\""
                    let v179 : string = v177 + v163 
                    let v180 : string = v179 + v178 
                    let v181 : string = $"path = \"spiral_builder.rs\""
                    let v182 : string = v180 + v163 
                    let v183 : string = v182 + v181 
                    let v184 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v185 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v144, v183) v185 
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let _v184 = () 
                    #endif
#else
                    let v186 : string = method39(v183)
                    System.IO.File.WriteAllText (v144, v186)
                    let _v184 = () 
                    #endif
                    _v184 
                    ()
                let v187 : bool = v18 = 0
                if v187 then
                    US36_0(v18, v19)
                else
                    US36_1(v18, v19)
    let struct (v201 : bool, v202 : int32, v203 : string) =
        match v193 with
        | US36_1(v196, v197) -> (* Error *)
            struct (true, v196, v197)
        | US36_0(v194, v195) -> (* Ok *)
            struct (false, v194, v195)
    let v204 : bool = v201 = false
    let v206 : bool =
        if v204 then
            true
        else
            let v205 : bool = v2 >= 3uy
            v205
    if v206 then
        struct (v202, v203)
    else
        let v207 : unit = ()
        let v208 : (unit -> unit) = closure111(v2, v202, v203, v201)
        let v209 : unit = (fun () -> v208 (); v207) ()
        let v1031 : uint8 = v2 + 1uy
        method109(v0, v1, v1031)
and closure113 () () : string =
    let v0 : string = "spiral_builder.process_rust / cargo fmt error"
    v0
and closure112 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Critical"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_red"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[91m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[91m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[91m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method9()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure10(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "exit_code"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure10(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure10(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v1}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure10(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure10(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "cargo_fmt_result"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure10(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = $"{v0}"
        let v692 : unit = ()
        let v693 : (unit -> unit) = closure10(v627, v689)
        let v694 : unit = (fun () -> v693 (); v692) ()
        let v697 : string = " }"
        let v698 : string = $"{v697}"
        let v701 : unit = ()
        let v702 : (unit -> unit) = closure10(v627, v698)
        let v703 : unit = (fun () -> v702 (); v701) ()
        let v706 : string = v627.l0
        let v707 : (unit -> string) = closure113()
        let v708 : string = $"{v484} {v619} #{v625} %s{v707 ()} / {v706}"
        let v711 : char list = []
        let v712 : (char list -> (char [])) = List.toArray
        let v713 : (char []) = v712 v711
        let v716 : string = v708.TrimStart v713 
        let v734 : char list = []
        let v735 : char list = '/' :: v734 
        let v738 : char list = ' ' :: v735 
        let v741 : (char list -> (char [])) = List.toArray
        let v742 : (char []) = v741 v738
        let v745 : string = v716.TrimEnd v742 
        let v763 : (string -> unit) = closure12()
        let v764 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v765 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v765 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v766 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v767 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v767 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v763 v745
        let _v764 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v763 v745
        let _v764 = () 
        #endif
#else
        v763 v745
        let _v764 = () 
        #endif
        _v764 
        let v768 : (string -> unit) = v18.l0
        v768 v745
and closure115 () (v0 : string) : bool =
    let v1 : string = "profile [optimized] target"
    let v2 : bool = v0.Contains v1 
    let v5 : bool = v2 = false
    if v5 then
        let v6 : string = "profile [unoptimized] target"
        let v7 : bool = v0.Contains v6 
        let v10 : bool = v7 = false
        if v10 then
            let v11 : string = "profile [unoptimized + debuginfo] target"
            let v12 : bool = v0.Contains v11 
            let v15 : bool = v12 = false
            v15
        else
            false
    else
        false
and closure114 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : (string -> bool) = closure115()
    let v4 : (string []) = v2 |> Array.skipWhile v3 
    let v5 : (string []) = v4 |> Array.skip 2 
    let v6 : string seq = v5 |> Seq.ofArray
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v1
    v10 v6
and closure118 () () : string =
    let v0 : string = "spiral_builder.process_rust / Exception"
    v0
and closure117 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "ex"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v658 : string = "format!(\"{:#?}\", $0)"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v657 = v661 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v662 : string = "format!(\"{:#?}\", $0)"
        let v663 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v662 
        let v664 : string = "fable_library_rust::String_::fromString($0)"
        let v665 : string = Fable.Core.RustInterop.emitRustExpr v663 v664 
        let _v657 = v665 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v666 : string = "format!(\"{:#?}\", $0)"
        let v667 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v666 
        let v668 : string = "fable_library_rust::String_::fromString($0)"
        let v669 : string = Fable.Core.RustInterop.emitRustExpr v667 v668 
        let _v657 = v669 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v670 : string = $"%A{v3}"
        let _v657 = v670 
        #endif
#if FABLE_COMPILER_PYTHON
        let v673 : string = $"%A{v3}"
        let _v657 = v673 
        #endif
#else
        let v676 : string = $"%A{v3}"
        let _v657 = v676 
        #endif
        let v679 : string = _v657 
        let v684 : string = $"{v679}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure10(v629, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = "; "
        let v693 : string = $"{v692}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v629, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = "cargo_result"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v629, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v648}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure10(v629, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = $"{v1}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure10(v629, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v692}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure10(v629, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = "new_code_path"
        let v735 : string = $"{v734}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure10(v629, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v648}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure10(v629, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = $"{v0}"
        let v754 : unit = ()
        let v755 : (unit -> unit) = closure10(v629, v751)
        let v756 : unit = (fun () -> v755 (); v754) ()
        let v759 : string = $"{v692}"
        let v762 : unit = ()
        let v763 : (unit -> unit) = closure10(v629, v759)
        let v764 : unit = (fun () -> v763 (); v762) ()
        let v767 : string = "external_command"
        let v768 : string = $"{v767}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure10(v629, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = $"{v648}"
        let v779 : unit = ()
        let v780 : (unit -> unit) = closure10(v629, v776)
        let v781 : unit = (fun () -> v780 (); v779) ()
        let v784 : string = $"{v2}"
        let v787 : unit = ()
        let v788 : (unit -> unit) = closure10(v629, v784)
        let v789 : unit = (fun () -> v788 (); v787) ()
        let v792 : string = " }"
        let v793 : string = $"{v792}"
        let v796 : unit = ()
        let v797 : (unit -> unit) = closure10(v629, v793)
        let v798 : unit = (fun () -> v797 (); v796) ()
        let v801 : string = v629.l0
        let v802 : (unit -> string) = closure118()
        let v803 : string = $"{v486} {v621} #{v627} %s{v802 ()} / {v801}"
        let v806 : char list = []
        let v807 : (char list -> (char [])) = List.toArray
        let v808 : (char []) = v807 v806
        let v811 : string = v803.TrimStart v808 
        let v829 : char list = []
        let v830 : char list = '/' :: v829 
        let v833 : char list = ' ' :: v830 
        let v836 : (char list -> (char [])) = List.toArray
        let v837 : (char []) = v836 v833
        let v840 : string = v811.TrimEnd v837 
        let v858 : (string -> unit) = closure12()
        let v859 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v860 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v860 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v861 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v861 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v862 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v862 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v858 v840
        let _v859 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v858 v840
        let _v859 = () 
        #endif
#else
        v858 v840
        let _v859 = () 
        #endif
        _v859 
        let v863 : (string -> unit) = v20.l0
        v863 v840
and closure116 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure117(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure120 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure119 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "exit_code"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = $"{v2}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure10(v629, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = "; "
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v629, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "cargo_result"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure10(v629, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = $"{v648}"
        let v686 : unit = ()
        let v687 : (unit -> unit) = closure10(v629, v683)
        let v688 : unit = (fun () -> v687 (); v686) ()
        let v691 : string = $"{v1}"
        let v694 : unit = ()
        let v695 : (unit -> unit) = closure10(v629, v691)
        let v696 : unit = (fun () -> v695 (); v694) ()
        let v699 : string = $"{v665}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v629, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = "new_code_path"
        let v708 : string = $"{v707}"
        let v711 : unit = ()
        let v712 : (unit -> unit) = closure10(v629, v708)
        let v713 : unit = (fun () -> v712 (); v711) ()
        let v716 : string = $"{v648}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure10(v629, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = $"{v0}"
        let v727 : unit = ()
        let v728 : (unit -> unit) = closure10(v629, v724)
        let v729 : unit = (fun () -> v728 (); v727) ()
        let v732 : string = $"{v665}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure10(v629, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = "external_command"
        let v741 : string = $"{v740}"
        let v744 : unit = ()
        let v745 : (unit -> unit) = closure10(v629, v741)
        let v746 : unit = (fun () -> v745 (); v744) ()
        let v749 : string = $"{v648}"
        let v752 : unit = ()
        let v753 : (unit -> unit) = closure10(v629, v749)
        let v754 : unit = (fun () -> v753 (); v752) ()
        let v757 : string = $"{v3}"
        let v760 : unit = ()
        let v761 : (unit -> unit) = closure10(v629, v757)
        let v762 : unit = (fun () -> v761 (); v760) ()
        let v765 : string = " }"
        let v766 : string = $"{v765}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v629, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = v629.l0
        let v775 : (unit -> string) = closure120()
        let v776 : string = $"{v486} {v621} #{v627} %s{v775 ()} / {v774}"
        let v779 : char list = []
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v779
        let v784 : string = v776.TrimStart v781 
        let v802 : char list = []
        let v803 : char list = '/' :: v802 
        let v806 : char list = ' ' :: v803 
        let v809 : (char list -> (char [])) = List.toArray
        let v810 : (char []) = v809 v806
        let v813 : string = v784.TrimEnd v810 
        let v831 : (string -> unit) = closure12()
        let v832 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v833 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v834 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v835 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v835 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v831 v813
        let _v832 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v831 v813
        let _v832 = () 
        #endif
#else
        v831 v813
        let _v832 = () 
        #endif
        _v832 
        let v836 : (string -> unit) = v20.l0
        v836 v813
and closure122 () () : string =
    let v0 : string = "spiral_builder.process_rust / wasm error"
    v0
and closure121 (v0 : string, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "exit_code"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = $"{v3}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure10(v629, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = "; "
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v629, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "spiral_wasm_result"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure10(v629, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = $"{v648}"
        let v686 : unit = ()
        let v687 : (unit -> unit) = closure10(v629, v683)
        let v688 : unit = (fun () -> v687 (); v686) ()
        let v691 : string = $"{v2}"
        let v694 : unit = ()
        let v695 : (unit -> unit) = closure10(v629, v691)
        let v696 : unit = (fun () -> v695 (); v694) ()
        let v699 : string = $"{v665}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v629, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = "cargo_result"
        let v708 : string = $"{v707}"
        let v711 : unit = ()
        let v712 : (unit -> unit) = closure10(v629, v708)
        let v713 : unit = (fun () -> v712 (); v711) ()
        let v716 : string = $"{v648}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure10(v629, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = $"{v1}"
        let v727 : unit = ()
        let v728 : (unit -> unit) = closure10(v629, v724)
        let v729 : unit = (fun () -> v728 (); v727) ()
        let v732 : string = $"{v665}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure10(v629, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = "new_code_path"
        let v741 : string = $"{v740}"
        let v744 : unit = ()
        let v745 : (unit -> unit) = closure10(v629, v741)
        let v746 : unit = (fun () -> v745 (); v744) ()
        let v749 : string = $"{v648}"
        let v752 : unit = ()
        let v753 : (unit -> unit) = closure10(v629, v749)
        let v754 : unit = (fun () -> v753 (); v752) ()
        let v757 : string = $"{v0}"
        let v760 : unit = ()
        let v761 : (unit -> unit) = closure10(v629, v757)
        let v762 : unit = (fun () -> v761 (); v760) ()
        let v765 : string = " }"
        let v766 : string = $"{v765}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v629, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = v629.l0
        let v775 : (unit -> string) = closure122()
        let v776 : string = $"{v486} {v621} #{v627} %s{v775 ()} / {v774}"
        let v779 : char list = []
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v779
        let v784 : string = v776.TrimStart v781 
        let v802 : char list = []
        let v803 : char list = '/' :: v802 
        let v806 : char list = ' ' :: v803 
        let v809 : (char list -> (char [])) = List.toArray
        let v810 : (char []) = v809 v806
        let v813 : string = v784.TrimEnd v810 
        let v831 : (string -> unit) = closure12()
        let v832 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v833 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v834 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v835 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v835 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v831 v813
        let _v832 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v831 v813
        let _v832 = () 
        #endif
#else
        v831 v813
        let _v832 = () 
        #endif
        _v832 
        let v836 : (string -> unit) = v20.l0
        v836 v813
and closure124 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure123 (v0 : string, v1 : string, v2 : int32, v3 : string, v4 : string) () : unit =
    let v5 : unit = ()
    let v6 : (unit -> unit) = closure2()
    let v7 : unit = (fun () -> v6 (); v5) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : int64 option) = State.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v6 (); v35) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : int64 option) = State.trace_state.Value
    let v64 : US0 = v52.l0
    let v65 : bool = v51.l0
    let v66 : bool = v65 = false
    let v69 : bool =
        if v66 then
            false
        else
            let v67 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v64
            let v68 : bool = 4 >= v67
            v68
    if v69 then
        let v70 : unit = ()
        let v71 : (unit -> unit) = closure7(v20)
        let v72 : unit = (fun () -> v71 (); v70) ()
        let v75 : unit = ()
        let v76 : unit = (fun () -> v6 (); v75) ()
        let struct (v89 : Mut0, v90 : Mut1, v91 : Mut2, v92 : Mut3, v93 : int64 option) = State.trace_state.Value
        let v104 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v105 : US3 option = None
        let _v105 = ref v105 
        let v106 : US3 option ref = _v105 
        let v107 : (US3 option -> US3 option ref) = closure8(v106)
        let v108 : unit = ()
        let v109 : (unit -> unit) = closure9(v93, v107)
        let v110 : unit = (fun () -> v109 (); v108) ()
        let v113 : US3 option = _v105.Value 
        let v124 : US3 = US3_1
        let v125 : US3 = v113 |> Option.defaultValue v124 
        let v165 : System.DateTime =
            match v125 with
            | US3_1 -> (* None *)
                let v161 : System.DateTime = System.DateTime.Now
                v161
            | US3_0(v129) -> (* Some *)
                let v130 : System.DateTime = System.DateTime.Now
                let v133 : (System.DateTime -> int64) = _.Ticks
                let v134 : int64 = v133 v130
                let v137 : int64 = v134 - v129
                let v138 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v139 : System.TimeSpan = v138 v137
                let v142 : (System.TimeSpan -> int32) = _.Hours
                let v143 : int32 = v142 v139
                let v146 : (System.TimeSpan -> int32) = _.Minutes
                let v147 : int32 = v146 v139
                let v150 : (System.TimeSpan -> int32) = _.Seconds
                let v151 : int32 = v150 v139
                let v154 : (System.TimeSpan -> int32) = _.Milliseconds
                let v155 : int32 = v154 v139
                let v158 : System.DateTime = System.DateTime (1, 1, 1, v143, v147, v151, v155)
                v158
        let v166 : string = method6()
        let v169 : (string -> string) = v165.ToString
        let v170 : string = v169 v166
        let _v104 = v170 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v173 : US3 option = None
        let _v173 = ref v173 
        let v174 : US3 option ref = _v173 
        let v175 : (US3 option -> US3 option ref) = closure8(v174)
        let v176 : unit = ()
        let v177 : (unit -> unit) = closure9(v93, v175)
        let v178 : unit = (fun () -> v177 (); v176) ()
        let v181 : US3 option = _v173.Value 
        let v192 : US3 = US3_1
        let v193 : US3 = v181 |> Option.defaultValue v192 
        let v233 : System.DateTime =
            match v193 with
            | US3_1 -> (* None *)
                let v229 : System.DateTime = System.DateTime.Now
                v229
            | US3_0(v197) -> (* Some *)
                let v198 : System.DateTime = System.DateTime.Now
                let v201 : (System.DateTime -> int64) = _.Ticks
                let v202 : int64 = v201 v198
                let v205 : int64 = v202 - v197
                let v206 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v207 : System.TimeSpan = v206 v205
                let v210 : (System.TimeSpan -> int32) = _.Hours
                let v211 : int32 = v210 v207
                let v214 : (System.TimeSpan -> int32) = _.Minutes
                let v215 : int32 = v214 v207
                let v218 : (System.TimeSpan -> int32) = _.Seconds
                let v219 : int32 = v218 v207
                let v222 : (System.TimeSpan -> int32) = _.Milliseconds
                let v223 : int32 = v222 v207
                let v226 : System.DateTime = System.DateTime (1, 1, 1, v211, v215, v219, v223)
                v226
        let v234 : string = method6()
        let v237 : (string -> string) = v233.ToString
        let v238 : string = v237 v234
        let _v104 = v238 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v241 : string = $"near_sdk::env::block_timestamp()"
        let v242 : uint64 = Fable.Core.RustInterop.emitRustExpr () v241 
        let v243 : US3 option = None
        let _v243 = ref v243 
        let v244 : US3 option ref = _v243 
        let v245 : (US3 option -> US3 option ref) = closure8(v244)
        let v246 : unit = ()
        let v247 : (unit -> unit) = closure9(v93, v245)
        let v248 : unit = (fun () -> v247 (); v246) ()
        let v251 : US3 option = _v243.Value 
        let v262 : US3 = US3_1
        let v263 : US3 = v251 |> Option.defaultValue v262 
        let v272 : uint64 =
            match v263 with
            | US3_1 -> (* None *)
                v242
            | US3_0(v267) -> (* Some *)
                let v268 : (int64 -> uint64) = uint64
                let v269 : uint64 = v268 v267
                let v270 : uint64 = v242 - v269
                v270
        let v273 : uint64 = v272 / 1000000000UL
        let v274 : uint64 = v273 % 60UL
        let v275 : uint64 = v273 / 60UL
        let v276 : uint64 = v275 % 60UL
        let v277 : uint64 = v273 / 3600UL
        let v278 : uint64 = v277 % 24UL
        let v279 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v280 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v278, v276, v274) v279 
        let v281 : string = "fable_library_rust::String_::fromString($0)"
        let v282 : string = Fable.Core.RustInterop.emitRustExpr v280 v281 
        let _v104 = v282 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v283 : US3 option = None
        let _v283 = ref v283 
        let v284 : US3 option ref = _v283 
        let v285 : (US3 option -> US3 option ref) = closure8(v284)
        let v286 : unit = ()
        let v287 : (unit -> unit) = closure9(v93, v285)
        let v288 : unit = (fun () -> v287 (); v286) ()
        let v291 : US3 option = _v283.Value 
        let v302 : US3 = US3_1
        let v303 : US3 = v291 |> Option.defaultValue v302 
        let v343 : System.DateTime =
            match v303 with
            | US3_1 -> (* None *)
                let v339 : System.DateTime = System.DateTime.Now
                v339
            | US3_0(v307) -> (* Some *)
                let v308 : System.DateTime = System.DateTime.Now
                let v311 : (System.DateTime -> int64) = _.Ticks
                let v312 : int64 = v311 v308
                let v315 : int64 = v312 - v307
                let v316 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v317 : System.TimeSpan = v316 v315
                let v320 : (System.TimeSpan -> int32) = _.Hours
                let v321 : int32 = v320 v317
                let v324 : (System.TimeSpan -> int32) = _.Minutes
                let v325 : int32 = v324 v317
                let v328 : (System.TimeSpan -> int32) = _.Seconds
                let v329 : int32 = v328 v317
                let v332 : (System.TimeSpan -> int32) = _.Milliseconds
                let v333 : int32 = v332 v317
                let v336 : System.DateTime = System.DateTime (1, 1, 1, v321, v325, v329, v333)
                v336
        let v344 : string = method7()
        let v347 : (string -> string) = v343.ToString
        let v348 : string = v347 v344
        let _v104 = v348 
        #endif
#if FABLE_COMPILER_PYTHON
        let v351 : US3 option = None
        let _v351 = ref v351 
        let v352 : US3 option ref = _v351 
        let v353 : (US3 option -> US3 option ref) = closure8(v352)
        let v354 : unit = ()
        let v355 : (unit -> unit) = closure9(v93, v353)
        let v356 : unit = (fun () -> v355 (); v354) ()
        let v359 : US3 option = _v351.Value 
        let v370 : US3 = US3_1
        let v371 : US3 = v359 |> Option.defaultValue v370 
        let v411 : System.DateTime =
            match v371 with
            | US3_1 -> (* None *)
                let v407 : System.DateTime = System.DateTime.Now
                v407
            | US3_0(v375) -> (* Some *)
                let v376 : System.DateTime = System.DateTime.Now
                let v379 : (System.DateTime -> int64) = _.Ticks
                let v380 : int64 = v379 v376
                let v383 : int64 = v380 - v375
                let v384 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v385 : System.TimeSpan = v384 v383
                let v388 : (System.TimeSpan -> int32) = _.Hours
                let v389 : int32 = v388 v385
                let v392 : (System.TimeSpan -> int32) = _.Minutes
                let v393 : int32 = v392 v385
                let v396 : (System.TimeSpan -> int32) = _.Seconds
                let v397 : int32 = v396 v385
                let v400 : (System.TimeSpan -> int32) = _.Milliseconds
                let v401 : int32 = v400 v385
                let v404 : System.DateTime = System.DateTime (1, 1, 1, v389, v393, v397, v401)
                v404
        let v412 : string = method7()
        let v415 : (string -> string) = v411.ToString
        let v416 : string = v415 v412
        let _v104 = v416 
        #endif
#else
        let v419 : US3 option = None
        let _v419 = ref v419 
        let v420 : US3 option ref = _v419 
        let v421 : (US3 option -> US3 option ref) = closure8(v420)
        let v422 : unit = ()
        let v423 : (unit -> unit) = closure9(v93, v421)
        let v424 : unit = (fun () -> v423 (); v422) ()
        let v427 : US3 option = _v419.Value 
        let v438 : US3 = US3_1
        let v439 : US3 = v427 |> Option.defaultValue v438 
        let v479 : System.DateTime =
            match v439 with
            | US3_1 -> (* None *)
                let v475 : System.DateTime = System.DateTime.Now
                v475
            | US3_0(v443) -> (* Some *)
                let v444 : System.DateTime = System.DateTime.Now
                let v447 : (System.DateTime -> int64) = _.Ticks
                let v448 : int64 = v447 v444
                let v451 : int64 = v448 - v443
                let v452 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v453 : System.TimeSpan = v452 v451
                let v456 : (System.TimeSpan -> int32) = _.Hours
                let v457 : int32 = v456 v453
                let v460 : (System.TimeSpan -> int32) = _.Minutes
                let v461 : int32 = v460 v453
                let v464 : (System.TimeSpan -> int32) = _.Seconds
                let v465 : int32 = v464 v453
                let v468 : (System.TimeSpan -> int32) = _.Milliseconds
                let v469 : int32 = v468 v453
                let v472 : System.DateTime = System.DateTime (1, 1, 1, v457, v461, v465, v469)
                v472
        let v480 : string = method7()
        let v483 : (string -> string) = v479.ToString
        let v484 : string = v483 v480
        let _v104 = v484 
        #endif
        let v487 : string = _v104 
        let v557 : string = "Critical"
        let v558 : (unit -> string) = v557.ToLower
        let v559 : string = v558 ()
        let v562 : string = v559.PadLeft (7, ' ')
        let v576 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v577 : string = "inline_colorization::color_bright_red"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "&*$0"
        let v580 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v562 v579 
        let v581 : string = "inline_colorization::color_reset"
        let v582 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "\"{v578}{v580}{v582}\""
        let v584 : string = @$"format!(" + v583 + ")"
        let v585 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "fable_library_rust::String_::fromString($0)"
        let v587 : string = Fable.Core.RustInterop.emitRustExpr v585 v586 
        let _v576 = v587 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v562 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v576 = v598 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v562 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v576 = v609 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v610 : string = "\u001b[91m"
        let v611 : string = method8()
        let v612 : string = v610 + v562 
        let v613 : string = v612 + v611 
        let _v576 = v613 
        #endif
#if FABLE_COMPILER_PYTHON
        let v614 : string = "\u001b[91m"
        let v615 : string = method8()
        let v616 : string = v614 + v562 
        let v617 : string = v616 + v615 
        let _v576 = v617 
        #endif
#else
        let v618 : string = "\u001b[91m"
        let v619 : string = method8()
        let v620 : string = v618 + v562 
        let v621 : string = v620 + v619 
        let _v576 = v621 
        #endif
        let v622 : string = _v576 
        let v628 : int64 = v89.l0
        let v629 : string = method9()
        let v630 : Mut4 = {l0 = v629} : Mut4
        let v631 : string = "{ "
        let v632 : string = $"{v631}"
        let v635 : unit = ()
        let v636 : (unit -> unit) = closure10(v630, v632)
        let v637 : unit = (fun () -> v636 (); v635) ()
        let v640 : string = "exit_code"
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v630, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = " = "
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v630, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = $"{v2}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v630, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = "; "
        let v667 : string = $"{v666}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure10(v630, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "cargo_result"
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure10(v630, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = $"{v649}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure10(v630, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v1}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure10(v630, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v666}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure10(v630, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = "new_code_path"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure10(v630, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = $"{v649}"
        let v720 : unit = ()
        let v721 : (unit -> unit) = closure10(v630, v717)
        let v722 : unit = (fun () -> v721 (); v720) ()
        let v725 : string = $"{v0}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure10(v630, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = $"{v666}"
        let v736 : unit = ()
        let v737 : (unit -> unit) = closure10(v630, v733)
        let v738 : unit = (fun () -> v737 (); v736) ()
        let v741 : string = "wasm_path"
        let v742 : string = $"{v741}"
        let v745 : unit = ()
        let v746 : (unit -> unit) = closure10(v630, v742)
        let v747 : unit = (fun () -> v746 (); v745) ()
        let v750 : string = $"{v649}"
        let v753 : unit = ()
        let v754 : (unit -> unit) = closure10(v630, v750)
        let v755 : unit = (fun () -> v754 (); v753) ()
        let v758 : string = $"{v3}"
        let v761 : unit = ()
        let v762 : (unit -> unit) = closure10(v630, v758)
        let v763 : unit = (fun () -> v762 (); v761) ()
        let v766 : string = $"{v666}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v630, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = "command"
        let v775 : string = $"{v774}"
        let v778 : unit = ()
        let v779 : (unit -> unit) = closure10(v630, v775)
        let v780 : unit = (fun () -> v779 (); v778) ()
        let v783 : string = $"{v649}"
        let v786 : unit = ()
        let v787 : (unit -> unit) = closure10(v630, v783)
        let v788 : unit = (fun () -> v787 (); v786) ()
        let v791 : string = $"{v4}"
        let v794 : unit = ()
        let v795 : (unit -> unit) = closure10(v630, v791)
        let v796 : unit = (fun () -> v795 (); v794) ()
        let v799 : string = " }"
        let v800 : string = $"{v799}"
        let v803 : unit = ()
        let v804 : (unit -> unit) = closure10(v630, v800)
        let v805 : unit = (fun () -> v804 (); v803) ()
        let v808 : string = v630.l0
        let v809 : (unit -> string) = closure124()
        let v810 : string = $"{v487} {v622} #{v628} %s{v809 ()} / {v808}"
        let v813 : char list = []
        let v814 : (char list -> (char [])) = List.toArray
        let v815 : (char []) = v814 v813
        let v818 : string = v810.TrimStart v815 
        let v836 : char list = []
        let v837 : char list = '/' :: v836 
        let v840 : char list = ' ' :: v837 
        let v843 : (char list -> (char [])) = List.toArray
        let v844 : (char []) = v843 v840
        let v847 : string = v818.TrimEnd v844 
        let v865 : (string -> unit) = closure12()
        let v866 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v867 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v847 v867 
        let _v866 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v868 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v847 v868 
        let _v866 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v869 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v847 v869 
        let _v866 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v865 v847
        let _v866 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v865 v847
        let _v866 = () 
        #endif
#else
        v865 v847
        let _v866 = () 
        #endif
        _v866 
        let v870 : (string -> unit) = v21.l0
        v870 v847
and closure126 () () : string =
    let v0 : string = "spiral_builder.process_rust / cleanup"
    v0
and closure125 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure2()
    let v13 : unit = (fun () -> v12 (); v11) ()
    let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : int64 option) = State.trace_state.Value
    let v41 : unit = ()
    let v42 : unit = (fun () -> v12 (); v41) ()
    let struct (v55 : Mut0, v56 : Mut1, v57 : Mut2, v58 : Mut3, v59 : int64 option) = State.trace_state.Value
    let v70 : US0 = v58.l0
    let v71 : bool = v57.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 0 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure7(v26)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v12 (); v81) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : int64 option) = State.trace_state.Value
        let v110 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v111 : US3 option = None
        let _v111 = ref v111 
        let v112 : US3 option ref = _v111 
        let v113 : (US3 option -> US3 option ref) = closure8(v112)
        let v114 : unit = ()
        let v115 : (unit -> unit) = closure9(v99, v113)
        let v116 : unit = (fun () -> v115 (); v114) ()
        let v119 : US3 option = _v111.Value 
        let v130 : US3 = US3_1
        let v131 : US3 = v119 |> Option.defaultValue v130 
        let v171 : System.DateTime =
            match v131 with
            | US3_1 -> (* None *)
                let v167 : System.DateTime = System.DateTime.Now
                v167
            | US3_0(v135) -> (* Some *)
                let v136 : System.DateTime = System.DateTime.Now
                let v139 : (System.DateTime -> int64) = _.Ticks
                let v140 : int64 = v139 v136
                let v143 : int64 = v140 - v135
                let v144 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v145 : System.TimeSpan = v144 v143
                let v148 : (System.TimeSpan -> int32) = _.Hours
                let v149 : int32 = v148 v145
                let v152 : (System.TimeSpan -> int32) = _.Minutes
                let v153 : int32 = v152 v145
                let v156 : (System.TimeSpan -> int32) = _.Seconds
                let v157 : int32 = v156 v145
                let v160 : (System.TimeSpan -> int32) = _.Milliseconds
                let v161 : int32 = v160 v145
                let v164 : System.DateTime = System.DateTime (1, 1, 1, v149, v153, v157, v161)
                v164
        let v172 : string = method6()
        let v175 : (string -> string) = v171.ToString
        let v176 : string = v175 v172
        let _v110 = v176 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v179 : US3 option = None
        let _v179 = ref v179 
        let v180 : US3 option ref = _v179 
        let v181 : (US3 option -> US3 option ref) = closure8(v180)
        let v182 : unit = ()
        let v183 : (unit -> unit) = closure9(v99, v181)
        let v184 : unit = (fun () -> v183 (); v182) ()
        let v187 : US3 option = _v179.Value 
        let v198 : US3 = US3_1
        let v199 : US3 = v187 |> Option.defaultValue v198 
        let v239 : System.DateTime =
            match v199 with
            | US3_1 -> (* None *)
                let v235 : System.DateTime = System.DateTime.Now
                v235
            | US3_0(v203) -> (* Some *)
                let v204 : System.DateTime = System.DateTime.Now
                let v207 : (System.DateTime -> int64) = _.Ticks
                let v208 : int64 = v207 v204
                let v211 : int64 = v208 - v203
                let v212 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v213 : System.TimeSpan = v212 v211
                let v216 : (System.TimeSpan -> int32) = _.Hours
                let v217 : int32 = v216 v213
                let v220 : (System.TimeSpan -> int32) = _.Minutes
                let v221 : int32 = v220 v213
                let v224 : (System.TimeSpan -> int32) = _.Seconds
                let v225 : int32 = v224 v213
                let v228 : (System.TimeSpan -> int32) = _.Milliseconds
                let v229 : int32 = v228 v213
                let v232 : System.DateTime = System.DateTime (1, 1, 1, v217, v221, v225, v229)
                v232
        let v240 : string = method6()
        let v243 : (string -> string) = v239.ToString
        let v244 : string = v243 v240
        let _v110 = v244 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v247 : string = $"near_sdk::env::block_timestamp()"
        let v248 : uint64 = Fable.Core.RustInterop.emitRustExpr () v247 
        let v249 : US3 option = None
        let _v249 = ref v249 
        let v250 : US3 option ref = _v249 
        let v251 : (US3 option -> US3 option ref) = closure8(v250)
        let v252 : unit = ()
        let v253 : (unit -> unit) = closure9(v99, v251)
        let v254 : unit = (fun () -> v253 (); v252) ()
        let v257 : US3 option = _v249.Value 
        let v268 : US3 = US3_1
        let v269 : US3 = v257 |> Option.defaultValue v268 
        let v278 : uint64 =
            match v269 with
            | US3_1 -> (* None *)
                v248
            | US3_0(v273) -> (* Some *)
                let v274 : (int64 -> uint64) = uint64
                let v275 : uint64 = v274 v273
                let v276 : uint64 = v248 - v275
                v276
        let v279 : uint64 = v278 / 1000000000UL
        let v280 : uint64 = v279 % 60UL
        let v281 : uint64 = v279 / 60UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v279 / 3600UL
        let v284 : uint64 = v283 % 24UL
        let v285 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v284, v282, v280) v285 
        let v287 : string = "fable_library_rust::String_::fromString($0)"
        let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
        let _v110 = v288 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v289 : US3 option = None
        let _v289 = ref v289 
        let v290 : US3 option ref = _v289 
        let v291 : (US3 option -> US3 option ref) = closure8(v290)
        let v292 : unit = ()
        let v293 : (unit -> unit) = closure9(v99, v291)
        let v294 : unit = (fun () -> v293 (); v292) ()
        let v297 : US3 option = _v289.Value 
        let v308 : US3 = US3_1
        let v309 : US3 = v297 |> Option.defaultValue v308 
        let v349 : System.DateTime =
            match v309 with
            | US3_1 -> (* None *)
                let v345 : System.DateTime = System.DateTime.Now
                v345
            | US3_0(v313) -> (* Some *)
                let v314 : System.DateTime = System.DateTime.Now
                let v317 : (System.DateTime -> int64) = _.Ticks
                let v318 : int64 = v317 v314
                let v321 : int64 = v318 - v313
                let v322 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v323 : System.TimeSpan = v322 v321
                let v326 : (System.TimeSpan -> int32) = _.Hours
                let v327 : int32 = v326 v323
                let v330 : (System.TimeSpan -> int32) = _.Minutes
                let v331 : int32 = v330 v323
                let v334 : (System.TimeSpan -> int32) = _.Seconds
                let v335 : int32 = v334 v323
                let v338 : (System.TimeSpan -> int32) = _.Milliseconds
                let v339 : int32 = v338 v323
                let v342 : System.DateTime = System.DateTime (1, 1, 1, v327, v331, v335, v339)
                v342
        let v350 : string = method7()
        let v353 : (string -> string) = v349.ToString
        let v354 : string = v353 v350
        let _v110 = v354 
        #endif
#if FABLE_COMPILER_PYTHON
        let v357 : US3 option = None
        let _v357 = ref v357 
        let v358 : US3 option ref = _v357 
        let v359 : (US3 option -> US3 option ref) = closure8(v358)
        let v360 : unit = ()
        let v361 : (unit -> unit) = closure9(v99, v359)
        let v362 : unit = (fun () -> v361 (); v360) ()
        let v365 : US3 option = _v357.Value 
        let v376 : US3 = US3_1
        let v377 : US3 = v365 |> Option.defaultValue v376 
        let v417 : System.DateTime =
            match v377 with
            | US3_1 -> (* None *)
                let v413 : System.DateTime = System.DateTime.Now
                v413
            | US3_0(v381) -> (* Some *)
                let v382 : System.DateTime = System.DateTime.Now
                let v385 : (System.DateTime -> int64) = _.Ticks
                let v386 : int64 = v385 v382
                let v389 : int64 = v386 - v381
                let v390 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v391 : System.TimeSpan = v390 v389
                let v394 : (System.TimeSpan -> int32) = _.Hours
                let v395 : int32 = v394 v391
                let v398 : (System.TimeSpan -> int32) = _.Minutes
                let v399 : int32 = v398 v391
                let v402 : (System.TimeSpan -> int32) = _.Seconds
                let v403 : int32 = v402 v391
                let v406 : (System.TimeSpan -> int32) = _.Milliseconds
                let v407 : int32 = v406 v391
                let v410 : System.DateTime = System.DateTime (1, 1, 1, v395, v399, v403, v407)
                v410
        let v418 : string = method7()
        let v421 : (string -> string) = v417.ToString
        let v422 : string = v421 v418
        let _v110 = v422 
        #endif
#else
        let v425 : US3 option = None
        let _v425 = ref v425 
        let v426 : US3 option ref = _v425 
        let v427 : (US3 option -> US3 option ref) = closure8(v426)
        let v428 : unit = ()
        let v429 : (unit -> unit) = closure9(v99, v427)
        let v430 : unit = (fun () -> v429 (); v428) ()
        let v433 : US3 option = _v425.Value 
        let v444 : US3 = US3_1
        let v445 : US3 = v433 |> Option.defaultValue v444 
        let v485 : System.DateTime =
            match v445 with
            | US3_1 -> (* None *)
                let v481 : System.DateTime = System.DateTime.Now
                v481
            | US3_0(v449) -> (* Some *)
                let v450 : System.DateTime = System.DateTime.Now
                let v453 : (System.DateTime -> int64) = _.Ticks
                let v454 : int64 = v453 v450
                let v457 : int64 = v454 - v449
                let v458 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v459 : System.TimeSpan = v458 v457
                let v462 : (System.TimeSpan -> int32) = _.Hours
                let v463 : int32 = v462 v459
                let v466 : (System.TimeSpan -> int32) = _.Minutes
                let v467 : int32 = v466 v459
                let v470 : (System.TimeSpan -> int32) = _.Seconds
                let v471 : int32 = v470 v459
                let v474 : (System.TimeSpan -> int32) = _.Milliseconds
                let v475 : int32 = v474 v459
                let v478 : System.DateTime = System.DateTime (1, 1, 1, v463, v467, v471, v475)
                v478
        let v486 : string = method7()
        let v489 : (string -> string) = v485.ToString
        let v490 : string = v489 v486
        let _v110 = v490 
        #endif
        let v493 : string = _v110 
        let v563 : string = "Verbose"
        let v564 : (unit -> string) = v563.ToLower
        let v565 : string = v564 ()
        let v568 : string = v565.PadLeft (7, ' ')
        let v582 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v583 : string = "inline_colorization::color_bright_black"
        let v584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "&*$0"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v585 
        let v587 : string = "inline_colorization::color_reset"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "\"{v584}{v586}{v588}\""
        let v590 : string = @$"format!(" + v589 + ")"
        let v591 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "fable_library_rust::String_::fromString($0)"
        let v593 : string = Fable.Core.RustInterop.emitRustExpr v591 v592 
        let _v582 = v593 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v594 : string = "inline_colorization::color_bright_black"
        let v595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "&*$0"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v596 
        let v598 : string = "inline_colorization::color_reset"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "\"{v595}{v597}{v599}\""
        let v601 : string = @$"format!(" + v600 + ")"
        let v602 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "fable_library_rust::String_::fromString($0)"
        let v604 : string = Fable.Core.RustInterop.emitRustExpr v602 v603 
        let _v582 = v604 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v605 : string = "inline_colorization::color_bright_black"
        let v606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "&*$0"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v607 
        let v609 : string = "inline_colorization::color_reset"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "\"{v606}{v608}{v610}\""
        let v612 : string = @$"format!(" + v611 + ")"
        let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "fable_library_rust::String_::fromString($0)"
        let v615 : string = Fable.Core.RustInterop.emitRustExpr v613 v614 
        let _v582 = v615 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v616 : string = "\u001b[90m"
        let v617 : string = method8()
        let v618 : string = v616 + v568 
        let v619 : string = v618 + v617 
        let _v582 = v619 
        #endif
#if FABLE_COMPILER_PYTHON
        let v620 : string = "\u001b[90m"
        let v621 : string = method8()
        let v622 : string = v620 + v568 
        let v623 : string = v622 + v621 
        let _v582 = v623 
        #endif
#else
        let v624 : string = "\u001b[90m"
        let v625 : string = method8()
        let v626 : string = v624 + v568 
        let v627 : string = v626 + v625 
        let _v582 = v627 
        #endif
        let v628 : string = _v582 
        let v634 : int64 = v95.l0
        let v635 : string = method9()
        let v636 : Mut4 = {l0 = v635} : Mut4
        let v637 : string = "{ "
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure10(v636, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = "new_code_path"
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure10(v636, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = " = "
        let v656 : string = $"{v655}"
        let v659 : unit = ()
        let v660 : (unit -> unit) = closure10(v636, v656)
        let v661 : unit = (fun () -> v660 (); v659) ()
        let v664 : string = $"{v0}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure10(v636, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "; "
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure10(v636, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = "cleanup"
        let v682 : string = $"{v681}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v636, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = $"{v655}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v636, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : UH4 = UH4_0
        let v699 : UH4 = UH4_1(v9, v10, v698)
        let v700 : UH4 = UH4_1(v7, v8, v699)
        let v701 : UH4 = UH4_1(v5, v6, v700)
        let v702 : UH4 = UH4_1(v3, v4, v701)
        let v703 : UH4 = UH4_1(v1, v2, v702)
        let v704 : string = $"%A{v703}"
        let v713 : string = $"{v704}"
        let v716 : unit = ()
        let v717 : (unit -> unit) = closure10(v636, v713)
        let v718 : unit = (fun () -> v717 (); v716) ()
        let v721 : string = " }"
        let v722 : string = $"{v721}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v636, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = v636.l0
        let v731 : (unit -> string) = closure126()
        let v732 : string = $"{v493} {v628} #{v634} %s{v731 ()} / {v730}"
        let v735 : char list = []
        let v736 : (char list -> (char [])) = List.toArray
        let v737 : (char []) = v736 v735
        let v740 : string = v732.TrimStart v737 
        let v758 : char list = []
        let v759 : char list = '/' :: v758 
        let v762 : char list = ' ' :: v759 
        let v765 : (char list -> (char [])) = List.toArray
        let v766 : (char []) = v765 v762
        let v769 : string = v740.TrimEnd v766 
        let v787 : (string -> unit) = closure12()
        let v788 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v789 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v789 
        let _v788 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v790 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v790 
        let _v788 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v791 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v791 
        let _v788 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v787 v769
        let _v788 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v787 v769
        let _v788 = () 
        #endif
#else
        v787 v769
        let _v788 = () 
        #endif
        _v788 
        let v792 : (string -> unit) = v27.l0
        v792 v769
and method111 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        let v4 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0).unwrap()"
        Fable.Core.RustInterop.emitRustExpr v1 v5 
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v4 = () 
        #endif
#else
        let v6 : (string -> unit) = System.IO.File.Delete
        v6 v1
        let _v4 = () 
        #endif
        _v4 
        method111(v3)
    | UH4_0 -> (* Nil *)
        ()
and method112 (v0 : async_walkdir_DirEntry) : async_walkdir_DirEntry =
    v0
and closure128 () (v0 : std_fs_FileType) : US39 =
    US39_0(v0)
and closure129 () (v0 : std_string_String) : US39 =
    US39_1(v0)
and method113 (v0 : std_fs_FileType) : std_fs_FileType =
    v0
and method114 (v0 : US40) : US40 =
    v0
and method115 (v0 : async_walkdir_Filtering) : async_walkdir_Filtering =
    v0
and closure127 () (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v1 : string = "true; let __result = Box::pin(async { //"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "true; let __result = Box::pin(async move { //"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : async_walkdir_DirEntry = method112(v0)
    let v6 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v5))"
    let v7 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "v7.await"
    let v9 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : (std_io_Error -> std_string_String) = method30()
    let v11 : string = "$0.map_err(|x| $1(x))"
    let v12 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v11 
    let v13 : (std_fs_FileType -> US39) = closure128()
    let v14 : (std_string_String -> US39) = closure129()
    let v15 : US39 = match v12 with Ok x -> v13 x | Error x -> v14 x
    let v89 : US40 =
        match v15 with
        | US39_0(v16) -> (* Ok *)
            let v17 : std_fs_FileType = method113(v16)
            let v18 : string = "std::fs::FileType::is_dir(&v17)"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr () v18 
            let v20 : bool = v19 = false
            if v20 then
                US40_0
            else
                let v22 : string = "async_walkdir::DirEntry::path(&$0)"
                let v23 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v0 v22 
                let v24 : string = "$0.display()"
                let v25 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v23 v24 
                let v26 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v27 : string = "format!(\"{}\", $0)"
                let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v27 
                let _v26 = v28 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v29 : string = "format!(\"{}\", $0)"
                let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v29 
                let _v26 = v30 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v31 : string = "format!(\"{}\", $0)"
                let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v31 
                let _v26 = v32 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v33 : std_string_String = null |> unbox<std_string_String>
                let _v26 = v33 
                #endif
#if FABLE_COMPILER_PYTHON
                let v36 : std_string_String = null |> unbox<std_string_String>
                let _v26 = v36 
                #endif
#else
                let v39 : std_string_String = null |> unbox<std_string_String>
                let _v26 = v39 
                #endif
                let v42 : std_string_String = _v26 
                let v47 : string = "fable_library_rust::String_::fromString($0)"
                let v48 : string = Fable.Core.RustInterop.emitRustExpr v42 v47 
                let v49 : string = method24(v48)
                let v50 : string = "fable-library-ts."
                let v51 : bool = v49.StartsWith v50 
                if v51 then
                    US40_2
                else
                    US40_1
        | _ ->
            let v56 : string = "async_walkdir::DirEntry::path(&$0)"
            let v57 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v0 v56 
            let v58 : string = "$0.display()"
            let v59 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v57 v58 
            let v60 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v61 : string = "format!(\"{}\", $0)"
            let v62 : std_string_String = Fable.Core.RustInterop.emitRustExpr v59 v61 
            let _v60 = v62 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v63 : string = "format!(\"{}\", $0)"
            let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v59 v63 
            let _v60 = v64 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v65 : string = "format!(\"{}\", $0)"
            let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v59 v65 
            let _v60 = v66 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v67 : std_string_String = null |> unbox<std_string_String>
            let _v60 = v67 
            #endif
#if FABLE_COMPILER_PYTHON
            let v70 : std_string_String = null |> unbox<std_string_String>
            let _v60 = v70 
            #endif
#else
            let v73 : std_string_String = null |> unbox<std_string_String>
            let _v60 = v73 
            #endif
            let v76 : std_string_String = _v60 
            let v81 : string = "fable_library_rust::String_::fromString($0)"
            let v82 : string = Fable.Core.RustInterop.emitRustExpr v76 v81 
            let v83 : string = method24(v82)
            let v84 : string = "fable-library-ts."
            let v85 : bool = v83.StartsWith v84 
            if v85 then
                US40_2
            else
                US40_1
    let v90 : US40 = method114(v89)
    let v91 : string = ""
    let v92 : string = "}"
    let v93 : string = v91 + v92 
    let v94 : string = "true; v90 " + v93 + "); " + v91 + " // rust.fix_closure'"
    let v95 : bool = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "__result"
    let v97 : _ = Fable.Core.RustInterop.emitRustExpr () v96 
    let v98 : string = "v97"
    let v99 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US40>>, Send<Dyn<std_future_Future<US40>>>>>> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = "v99.await"
    let v101 : US40 = Fable.Core.RustInterop.emitRustExpr () v100 
    let v110 : async_walkdir_Filtering =
        match v101 with
        | US40_2 -> (* Continue *)
            let v106 : string = "async_walkdir::Filtering::Continue"
            let v107 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v106 
            v107
        | US40_0 -> (* Ignore *)
            let v102 : string = "async_walkdir::Filtering::Ignore"
            let v103 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v102 
            v103
        | US40_1 -> (* IgnoreDir *)
            let v104 : string = "async_walkdir::Filtering::IgnoreDir"
            let v105 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v104 
            v105
    let v111 : async_walkdir_Filtering = method115(v110)
    let v112 : string = v91 + v92 
    let v113 : string = "true; v111 " + v112 + "); " + v91 + " // rust.fix_closure'"
    let v114 : bool = Fable.Core.RustInterop.emitRustExpr () v113 
    let v115 : string = "__result"
    let v116 : _ = Fable.Core.RustInterop.emitRustExpr () v115 
    let v117 : string = "v116"
    let v118 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v117 
    v118
and closure131 () (v0 : async_walkdir_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method117 () : (async_walkdir_Error -> std_string_String) =
    closure131()
and closure132 () (v0 : async_walkdir_DirEntry) : US41 =
    US41_0(v0)
and closure133 () (v0 : std_string_String) : US41 =
    US41_1(v0)
and closure135 () () : string =
    let v0 : string = "spiral_builder.process_typescript / stream_filter_map"
    v0
and closure134 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Critical"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_red"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_red"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_red"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[91m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[91m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[91m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "error"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v655 : string = "format!(\"{:#?}\", $0)"
        let v656 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v655 
        let v657 : string = "fable_library_rust::String_::fromString($0)"
        let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
        let _v654 = v658 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v659 : string = "format!(\"{:#?}\", $0)"
        let v660 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v659 
        let v661 : string = "fable_library_rust::String_::fromString($0)"
        let v662 : string = Fable.Core.RustInterop.emitRustExpr v660 v661 
        let _v654 = v662 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v663 : string = "format!(\"{:#?}\", $0)"
        let v664 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v663 
        let v665 : string = "fable_library_rust::String_::fromString($0)"
        let v666 : string = Fable.Core.RustInterop.emitRustExpr v664 v665 
        let _v654 = v666 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v667 : string = $"%A{v0}"
        let _v654 = v667 
        #endif
#if FABLE_COMPILER_PYTHON
        let v670 : string = $"%A{v0}"
        let _v654 = v670 
        #endif
#else
        let v673 : string = $"%A{v0}"
        let _v654 = v673 
        #endif
        let v676 : string = _v654 
        let v681 : string = $"{v676}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v626, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = " }"
        let v690 : string = $"{v689}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v626, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = v626.l0
        let v699 : (unit -> string) = closure135()
        let v700 : string = $"{v483} {v618} #{v624} %s{v699 ()} / {v698}"
        let v703 : char list = []
        let v704 : (char list -> (char [])) = List.toArray
        let v705 : (char []) = v704 v703
        let v708 : string = v700.TrimStart v705 
        let v726 : char list = []
        let v727 : char list = '/' :: v726 
        let v730 : char list = ' ' :: v727 
        let v733 : (char list -> (char [])) = List.toArray
        let v734 : (char []) = v733 v730
        let v737 : string = v708.TrimEnd v734 
        let v755 : (string -> unit) = closure12()
        let v756 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v757 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v757 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v758 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v758 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v759 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v759 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v755 v737
        let _v756 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v755 v737
        let _v756 = () 
        #endif
#else
        v755 v737
        let _v756 = () 
        #endif
        _v756 
        let v760 : (string -> unit) = v17.l0
        v760 v737
and closure130 () (v0 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v1 : (async_walkdir_Error -> std_string_String) = method117()
    let v2 : string = "$0.map_err(|x| $1(x))"
    let v3 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v2 
    let v4 : (async_walkdir_DirEntry -> US41) = closure132()
    let v5 : (std_string_String -> US41) = closure133()
    let v6 : US41 = match v3 with Ok x -> v4 x | Error x -> v5 x
    let v921 : US42 =
        match v6 with
        | US41_1(v155) -> (* Error *)
            let v156 : unit = ()
            let v157 : (unit -> unit) = closure134(v155)
            let v158 : unit = (fun () -> v157 (); v156) ()
            US42_1
        | US41_0(v7) -> (* Ok *)
            let v8 : string = "async_walkdir::DirEntry::path(&$0)"
            let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
            let v10 : string = "$0.display()"
            let v11 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v9 v10 
            let v12 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v13 : string = "format!(\"{}\", $0)"
            let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v13 
            let _v12 = v14 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v15 : string = "format!(\"{}\", $0)"
            let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v15 
            let _v12 = v16 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v17 : string = "format!(\"{}\", $0)"
            let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v17 
            let _v12 = v18 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v19 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v19 
            #endif
#if FABLE_COMPILER_PYTHON
            let v22 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v22 
            #endif
#else
            let v25 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v25 
            #endif
            let v28 : std_string_String = _v12 
            let v33 : string = "fable_library_rust::String_::fromString($0)"
            let v34 : string = Fable.Core.RustInterop.emitRustExpr v28 v33 
            let v35 : string = "ts"
            let v36 : string = $"fable-library-{v35}\.(?<a>[\d.]+)$"
            let v37 : string = $"regex::Regex::new(&$0)"
            let v38 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v36 v37 
            let v39 : string = "$0.unwrap()"
            let v40 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let v41 : string = "&*$0"
            let v42 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v34 v41 
            let v43 : string = "String::from($0)"
            let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : string = "true; let _result = (move || { // rust.capture_move"
            let v46 : bool = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "Box::new($0)"
            let v48 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v44 v47 
            let v49 : string = "Box::leak($0)"
            let v50 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v48 v49 
            let v51 : string = $"v40.captures_iter(v50)"
            let v52 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v51 
            let v53 : string = "true; let _result : Vec<_> = v52.map(|x| { //"
            let v54 : bool = Fable.Core.RustInterop.emitRustExpr () v53 
            let v55 : string = $"x"
            let v56 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v55 
            let v57 : string = "Box::new($0)"
            let v58 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let v59 : string = "Box::leak($0)"
            let v60 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v58 v59 
            let v61 : string = $"$0.capture_names()"
            let v62 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v40 v61 
            let v63 : string = "true; let _result : std::collections::HashMap<_, _> = v62.map(|x| { //"
            let v64 : bool = Fable.Core.RustInterop.emitRustExpr () v63 
            let v65 : string = "x.unwrap_or(\"\").to_string().into()"
            let v66 : string = Fable.Core.RustInterop.emitRustExpr () v65 
            let v67 : string = "$0.clone()"
            let v68 : string = Fable.Core.RustInterop.emitRustExpr v66 v67 
            let v69 : string = $"v60.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v70 : string = Fable.Core.RustInterop.emitRustExpr v66 v69 
            let v71 : (string * string) = v68, v70 
            let v72 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v73 : bool = Fable.Core.RustInterop.emitRustExpr v71 v72 
            let v74 : string = "_result"
            let v75 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v74 
            let v76 : string = "true; $0 }).collect::<Vec<_>>()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
            let v78 : string = "_result"
            let v79 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v78 
            let v80 : string = "true; $0 })()"
            let v81 : bool = Fable.Core.RustInterop.emitRustExpr v79 v80 
            let v82 : string = "_result"
            let v83 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v82 
            let v84 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v85 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v83 v84 
            let v86 : std_collections_HashMap<string, string> option = v85 |> Array.tryItem 0 
            let v87 : US37 option = None
            let _v87 = ref v87 
            let v88 : US37 option ref = _v87 
            let v89 : (US37 option -> US37 option ref) = closure109(v88)
            let v90 : unit = ()
            let v91 : (unit -> unit) = closure110(v86, v89)
            let v92 : unit = (fun () -> v91 (); v90) ()
            let v95 : US37 option = _v87.Value 
            let v106 : US37 = US37_1
            let v107 : US37 = v95 |> Option.defaultValue v106 
            let v142 : US38 =
                match v107 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v111) -> (* Some *)
                    let v112 : string = method110()
                    let v113 : string = "std::collections::HashMap::get(&$0, &v112).map(|x| x).cloned()"
                    let v114 : string option = Fable.Core.RustInterop.emitRustExpr v111 v113 
                    let v115 : US1 option = None
                    let _v115 = ref v115 
                    let v116 : US1 option ref = _v115 
                    let v117 : (US1 option -> US1 option ref) = closure3(v116)
                    let v118 : unit = ()
                    let v119 : (unit -> unit) = closure4(v114, v117)
                    let v120 : unit = (fun () -> v119 (); v118) ()
                    let v123 : US1 option = _v115.Value 
                    let v134 : US1 = US1_1
                    let v135 : US1 = v123 |> Option.defaultValue v134 
                    US38_0(v135)
            let v149 : US1 =
                match v142 with
                | US38_0(v143) -> (* Some *)
                    match v143 with
                    | US1_0(v144) -> (* Some *)
                        US1_0(v144)
                    | _ ->
                        US1_1
                | _ ->
                    US1_1
            match v149 with
            | US1_1 -> (* None *)
                US42_1
            | US1_0(v151) -> (* Some *)
                US42_0(v34, v151)
    match v921 with
    | US42_1 -> (* None *)
        let v927 : struct (string * string) option = None
        v927
    | US42_0(v922, v923) -> (* Some *)
        let v924 : struct (string * string) option = Some struct (v922, v923) 
        v924
and method116 () : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure130()
and closure136 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure137 (v0 : US42 option ref) (v1 : US42 option) : US42 option ref =
    v0.Value <- v1 
    v0
and closure138 (v0 : struct (string * string) option, v1 : (US42 option -> US42 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v2 : string, v3 : string) = x
    let v4 : US42 = US42_0(v2, v3)
    v4 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure140 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure139 (v0 : US42) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 1 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Debug"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_blue"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_blue"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_blue"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[94m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[94m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[94m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "version"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"%A{v0}"
        let v657 : string = $"{v654}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure10(v626, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = " }"
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v626, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = v626.l0
        let v675 : (unit -> string) = closure140()
        let v676 : string = $"{v483} {v618} #{v624} %s{v675 ()} / {v674}"
        let v679 : char list = []
        let v680 : (char list -> (char [])) = List.toArray
        let v681 : (char []) = v680 v679
        let v684 : string = v676.TrimStart v681 
        let v702 : char list = []
        let v703 : char list = '/' :: v702 
        let v706 : char list = ' ' :: v703 
        let v709 : (char list -> (char [])) = List.toArray
        let v710 : (char []) = v709 v706
        let v713 : string = v684.TrimEnd v710 
        let v731 : (string -> unit) = closure12()
        let v732 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v733 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v733 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v734 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v734 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v735 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v735 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v731 v713
        let _v732 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v731 v713
        let _v732 = () 
        #endif
#else
        v731 v713
        let _v732 = () 
        #endif
        _v732 
        let v736 : (string -> unit) = v17.l0
        v736 v713
and closure142 () () : string =
    let v0 : string = $"spiral_builder.process_typescript"
    v0
and closure141 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Critical"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_red"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[91m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[91m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[91m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method9()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure10(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "exit_code"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure10(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure10(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v1}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure10(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure10(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "dotnet_fable_result"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure10(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = $"{v0}"
        let v692 : unit = ()
        let v693 : (unit -> unit) = closure10(v627, v689)
        let v694 : unit = (fun () -> v693 (); v692) ()
        let v697 : string = " }"
        let v698 : string = $"{v697}"
        let v701 : unit = ()
        let v702 : (unit -> unit) = closure10(v627, v698)
        let v703 : unit = (fun () -> v702 (); v701) ()
        let v706 : string = v627.l0
        let v707 : (unit -> string) = closure142()
        let v708 : string = $"{v484} {v619} #{v625} %s{v707 ()} / {v706}"
        let v711 : char list = []
        let v712 : (char list -> (char [])) = List.toArray
        let v713 : (char []) = v712 v711
        let v716 : string = v708.TrimStart v713 
        let v734 : char list = []
        let v735 : char list = '/' :: v734 
        let v738 : char list = ' ' :: v735 
        let v741 : (char list -> (char [])) = List.toArray
        let v742 : (char []) = v741 v738
        let v745 : string = v716.TrimEnd v742 
        let v763 : (string -> unit) = closure12()
        let v764 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v765 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v765 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v766 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v767 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v767 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v763 v745
        let _v764 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v763 v745
        let _v764 = () 
        #endif
#else
        v763 v745
        let _v764 = () 
        #endif
        _v764 
        let v768 : (string -> unit) = v18.l0
        v768 v745
and closure144 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure143 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 1 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Debug"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_blue"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_blue"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_blue"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[94m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[94m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[94m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "new_code_path"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"{v0}"
        let v657 : unit = ()
        let v658 : (unit -> unit) = closure10(v626, v654)
        let v659 : unit = (fun () -> v658 (); v657) ()
        let v662 : string = " }"
        let v663 : string = $"{v662}"
        let v666 : unit = ()
        let v667 : (unit -> unit) = closure10(v626, v663)
        let v668 : unit = (fun () -> v667 (); v666) ()
        let v671 : string = v626.l0
        let v672 : (unit -> string) = closure144()
        let v673 : string = $"{v483} {v618} #{v624} %s{v672 ()} / {v671}"
        let v676 : char list = []
        let v677 : (char list -> (char [])) = List.toArray
        let v678 : (char []) = v677 v676
        let v681 : string = v673.TrimStart v678 
        let v699 : char list = []
        let v700 : char list = '/' :: v699 
        let v703 : char list = ' ' :: v700 
        let v706 : (char list -> (char [])) = List.toArray
        let v707 : (char []) = v706 v703
        let v710 : string = v681.TrimEnd v707 
        let v728 : (string -> unit) = closure12()
        let v729 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v730 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v730 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v731 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v731 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v732 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v732 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v728 v710
        let _v729 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v728 v710
        let _v729 = () 
        #endif
#else
        v728 v710
        let _v729 = () 
        #endif
        _v729 
        let v733 : (string -> unit) = v17.l0
        v733 v710
and method118 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method118(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method119 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method119(v4, v1)
        let v6 : struct (string * string) list = struct (v2, v3) :: v5 
        v6
    | UH5_0 -> (* Nil *)
        v1
and closure145 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : string seq = v2 |> Seq.ofArray
    let v6 : (string -> (string seq -> string)) = String.concat
    let v7 : (string seq -> string) = v6 v1
    v7 v3
and closure148 () () : string =
    let v0 : string = "spiral_builder.process_typescript / Exception"
    v0
and closure147 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "ex"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v658 : string = "format!(\"{:#?}\", $0)"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v657 = v661 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v662 : string = "format!(\"{:#?}\", $0)"
        let v663 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v662 
        let v664 : string = "fable_library_rust::String_::fromString($0)"
        let v665 : string = Fable.Core.RustInterop.emitRustExpr v663 v664 
        let _v657 = v665 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v666 : string = "format!(\"{:#?}\", $0)"
        let v667 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v666 
        let v668 : string = "fable_library_rust::String_::fromString($0)"
        let v669 : string = Fable.Core.RustInterop.emitRustExpr v667 v668 
        let _v657 = v669 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v670 : string = $"%A{v3}"
        let _v657 = v670 
        #endif
#if FABLE_COMPILER_PYTHON
        let v673 : string = $"%A{v3}"
        let _v657 = v673 
        #endif
#else
        let v676 : string = $"%A{v3}"
        let _v657 = v676 
        #endif
        let v679 : string = _v657 
        let v684 : string = $"{v679}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure10(v629, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = "; "
        let v693 : string = $"{v692}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v629, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = "new_code_path"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v629, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v648}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure10(v629, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = $"{v0}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure10(v629, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v692}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure10(v629, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = "external_command"
        let v735 : string = $"{v734}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure10(v629, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v648}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure10(v629, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = $"{v2}"
        let v754 : unit = ()
        let v755 : (unit -> unit) = closure10(v629, v751)
        let v756 : unit = (fun () -> v755 (); v754) ()
        let v759 : string = $"{v692}"
        let v762 : unit = ()
        let v763 : (unit -> unit) = closure10(v629, v759)
        let v764 : unit = (fun () -> v763 (); v762) ()
        let v767 : string = "run_result"
        let v768 : string = $"{v767}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure10(v629, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = $"{v648}"
        let v779 : unit = ()
        let v780 : (unit -> unit) = closure10(v629, v776)
        let v781 : unit = (fun () -> v780 (); v779) ()
        let v784 : string = $"{v1}"
        let v787 : unit = ()
        let v788 : (unit -> unit) = closure10(v629, v784)
        let v789 : unit = (fun () -> v788 (); v787) ()
        let v792 : string = " }"
        let v793 : string = $"{v792}"
        let v796 : unit = ()
        let v797 : (unit -> unit) = closure10(v629, v793)
        let v798 : unit = (fun () -> v797 (); v796) ()
        let v801 : string = v629.l0
        let v802 : (unit -> string) = closure148()
        let v803 : string = $"{v486} {v621} #{v627} %s{v802 ()} / {v801}"
        let v806 : char list = []
        let v807 : (char list -> (char [])) = List.toArray
        let v808 : (char []) = v807 v806
        let v811 : string = v803.TrimStart v808 
        let v829 : char list = []
        let v830 : char list = '/' :: v829 
        let v833 : char list = ' ' :: v830 
        let v836 : (char list -> (char [])) = List.toArray
        let v837 : (char []) = v836 v833
        let v840 : string = v811.TrimEnd v837 
        let v858 : (string -> unit) = closure12()
        let v859 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v860 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v860 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v861 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v861 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v862 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v862 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v858 v840
        let _v859 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v858 v840
        let _v859 = () 
        #endif
#else
        v858 v840
        let _v859 = () 
        #endif
        _v859 
        let v863 : (string -> unit) = v20.l0
        v863 v840
and closure146 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure147(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure150 () () : string =
    let v0 : string = "spiral_builder.process_typescript / error"
    v0
and closure149 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "exit_code"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = $"{v2}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure10(v629, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = "; "
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v629, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "run_result"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure10(v629, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = $"{v648}"
        let v686 : unit = ()
        let v687 : (unit -> unit) = closure10(v629, v683)
        let v688 : unit = (fun () -> v687 (); v686) ()
        let v691 : string = $"{v1}"
        let v694 : unit = ()
        let v695 : (unit -> unit) = closure10(v629, v691)
        let v696 : unit = (fun () -> v695 (); v694) ()
        let v699 : string = $"{v665}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v629, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = "new_code_path"
        let v708 : string = $"{v707}"
        let v711 : unit = ()
        let v712 : (unit -> unit) = closure10(v629, v708)
        let v713 : unit = (fun () -> v712 (); v711) ()
        let v716 : string = $"{v648}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure10(v629, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = $"{v0}"
        let v727 : unit = ()
        let v728 : (unit -> unit) = closure10(v629, v724)
        let v729 : unit = (fun () -> v728 (); v727) ()
        let v732 : string = $"{v665}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure10(v629, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = "external_command"
        let v741 : string = $"{v740}"
        let v744 : unit = ()
        let v745 : (unit -> unit) = closure10(v629, v741)
        let v746 : unit = (fun () -> v745 (); v744) ()
        let v749 : string = $"{v648}"
        let v752 : unit = ()
        let v753 : (unit -> unit) = closure10(v629, v749)
        let v754 : unit = (fun () -> v753 (); v752) ()
        let v757 : string = $"{v3}"
        let v760 : unit = ()
        let v761 : (unit -> unit) = closure10(v629, v757)
        let v762 : unit = (fun () -> v761 (); v760) ()
        let v765 : string = " }"
        let v766 : string = $"{v765}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v629, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = v629.l0
        let v775 : (unit -> string) = closure150()
        let v776 : string = $"{v486} {v621} #{v627} %s{v775 ()} / {v774}"
        let v779 : char list = []
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v779
        let v784 : string = v776.TrimStart v781 
        let v802 : char list = []
        let v803 : char list = '/' :: v802 
        let v806 : char list = ' ' :: v803 
        let v809 : (char list -> (char [])) = List.toArray
        let v810 : (char []) = v809 v806
        let v813 : string = v784.TrimEnd v810 
        let v831 : (string -> unit) = closure12()
        let v832 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v833 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v834 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v835 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v835 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v831 v813
        let _v832 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v831 v813
        let _v832 = () 
        #endif
#else
        v831 v813
        let _v832 = () 
        #endif
        _v832 
        let v836 : (string -> unit) = v20.l0
        v836 v813
and closure152 () () : string =
    let v0 : string = $"spiral_builder.process_python"
    v0
and closure151 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Critical"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_red"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[91m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[91m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[91m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method9()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure10(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "exit_code"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure10(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure10(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v1}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure10(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure10(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "dotnet_fable_result"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure10(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = $"{v0}"
        let v692 : unit = ()
        let v693 : (unit -> unit) = closure10(v627, v689)
        let v694 : unit = (fun () -> v693 (); v692) ()
        let v697 : string = " }"
        let v698 : string = $"{v697}"
        let v701 : unit = ()
        let v702 : (unit -> unit) = closure10(v627, v698)
        let v703 : unit = (fun () -> v702 (); v701) ()
        let v706 : string = v627.l0
        let v707 : (unit -> string) = closure152()
        let v708 : string = $"{v484} {v619} #{v625} %s{v707 ()} / {v706}"
        let v711 : char list = []
        let v712 : (char list -> (char [])) = List.toArray
        let v713 : (char []) = v712 v711
        let v716 : string = v708.TrimStart v713 
        let v734 : char list = []
        let v735 : char list = '/' :: v734 
        let v738 : char list = ' ' :: v735 
        let v741 : (char list -> (char [])) = List.toArray
        let v742 : (char []) = v741 v738
        let v745 : string = v716.TrimEnd v742 
        let v763 : (string -> unit) = closure12()
        let v764 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v765 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v765 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v766 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v767 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v767 
        let _v764 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v763 v745
        let _v764 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v763 v745
        let _v764 = () 
        #endif
#else
        v763 v745
        let _v764 = () 
        #endif
        _v764 
        let v768 : (string -> unit) = v18.l0
        v768 v745
and closure154 () () : string =
    let v0 : string = "spiral_builder.process_python"
    v0
and closure153 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 1 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        let v553 : string = "Debug"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_blue"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_blue"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_blue"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[94m"
        let v607 : string = method8()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[94m"
        let v611 : string = method8()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[94m"
        let v615 : string = method8()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method9()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "new_code_path"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"{v0}"
        let v657 : unit = ()
        let v658 : (unit -> unit) = closure10(v626, v654)
        let v659 : unit = (fun () -> v658 (); v657) ()
        let v662 : string = " }"
        let v663 : string = $"{v662}"
        let v666 : unit = ()
        let v667 : (unit -> unit) = closure10(v626, v663)
        let v668 : unit = (fun () -> v667 (); v666) ()
        let v671 : string = v626.l0
        let v672 : (unit -> string) = closure154()
        let v673 : string = $"{v483} {v618} #{v624} %s{v672 ()} / {v671}"
        let v676 : char list = []
        let v677 : (char list -> (char [])) = List.toArray
        let v678 : (char []) = v677 v676
        let v681 : string = v673.TrimStart v678 
        let v699 : char list = []
        let v700 : char list = '/' :: v699 
        let v703 : char list = ' ' :: v700 
        let v706 : (char list -> (char [])) = List.toArray
        let v707 : (char []) = v706 v703
        let v710 : string = v681.TrimEnd v707 
        let v728 : (string -> unit) = closure12()
        let v729 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v730 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v730 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v731 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v731 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v732 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v732 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v728 v710
        let _v729 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v728 v710
        let _v729 = () 
        #endif
#else
        v728 v710
        let _v729 = () 
        #endif
        _v729 
        let v733 : (string -> unit) = v17.l0
        v733 v710
and closure155 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : string seq = v2 |> Seq.ofArray
    let v6 : (string -> (string seq -> string)) = String.concat
    let v7 : (string seq -> string) = v6 v1
    v7 v3
and closure158 () () : string =
    let v0 : string = "spiral_builder.process_python / Exception"
    v0
and closure157 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "ex"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v658 : string = "format!(\"{:#?}\", $0)"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v657 = v661 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v662 : string = "format!(\"{:#?}\", $0)"
        let v663 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v662 
        let v664 : string = "fable_library_rust::String_::fromString($0)"
        let v665 : string = Fable.Core.RustInterop.emitRustExpr v663 v664 
        let _v657 = v665 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v666 : string = "format!(\"{:#?}\", $0)"
        let v667 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v666 
        let v668 : string = "fable_library_rust::String_::fromString($0)"
        let v669 : string = Fable.Core.RustInterop.emitRustExpr v667 v668 
        let _v657 = v669 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v670 : string = $"%A{v3}"
        let _v657 = v670 
        #endif
#if FABLE_COMPILER_PYTHON
        let v673 : string = $"%A{v3}"
        let _v657 = v673 
        #endif
#else
        let v676 : string = $"%A{v3}"
        let _v657 = v676 
        #endif
        let v679 : string = _v657 
        let v684 : string = $"{v679}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure10(v629, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = "; "
        let v693 : string = $"{v692}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v629, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = "new_code_path"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v629, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v648}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure10(v629, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = $"{v0}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure10(v629, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v692}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure10(v629, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = "external_command"
        let v735 : string = $"{v734}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure10(v629, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v648}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure10(v629, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = $"{v2}"
        let v754 : unit = ()
        let v755 : (unit -> unit) = closure10(v629, v751)
        let v756 : unit = (fun () -> v755 (); v754) ()
        let v759 : string = $"{v692}"
        let v762 : unit = ()
        let v763 : (unit -> unit) = closure10(v629, v759)
        let v764 : unit = (fun () -> v763 (); v762) ()
        let v767 : string = "run_result"
        let v768 : string = $"{v767}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure10(v629, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = $"{v648}"
        let v779 : unit = ()
        let v780 : (unit -> unit) = closure10(v629, v776)
        let v781 : unit = (fun () -> v780 (); v779) ()
        let v784 : string = $"{v1}"
        let v787 : unit = ()
        let v788 : (unit -> unit) = closure10(v629, v784)
        let v789 : unit = (fun () -> v788 (); v787) ()
        let v792 : string = " }"
        let v793 : string = $"{v792}"
        let v796 : unit = ()
        let v797 : (unit -> unit) = closure10(v629, v793)
        let v798 : unit = (fun () -> v797 (); v796) ()
        let v801 : string = v629.l0
        let v802 : (unit -> string) = closure158()
        let v803 : string = $"{v486} {v621} #{v627} %s{v802 ()} / {v801}"
        let v806 : char list = []
        let v807 : (char list -> (char [])) = List.toArray
        let v808 : (char []) = v807 v806
        let v811 : string = v803.TrimStart v808 
        let v829 : char list = []
        let v830 : char list = '/' :: v829 
        let v833 : char list = ' ' :: v830 
        let v836 : (char list -> (char [])) = List.toArray
        let v837 : (char []) = v836 v833
        let v840 : string = v811.TrimEnd v837 
        let v858 : (string -> unit) = closure12()
        let v859 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v860 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v860 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v861 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v861 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v862 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v840 v862 
        let _v859 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v858 v840
        let _v859 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v858 v840
        let _v859 = () 
        #endif
#else
        v858 v840
        let _v859 = () 
        #endif
        _v859 
        let v863 : (string -> unit) = v20.l0
        v863 v840
and closure156 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure157(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure160 () () : string =
    let v0 : string = "spiral_builder.process_python / error"
    v0
and closure159 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        let v556 : string = "Critical"
        let v557 : (unit -> string) = v556.ToLower
        let v558 : string = v557 ()
        let v561 : string = v558.PadLeft (7, ' ')
        let v575 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v576 : string = "inline_colorization::color_bright_red"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "&*$0"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v578 
        let v580 : string = "inline_colorization::color_reset"
        let v581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "\"{v577}{v579}{v581}\""
        let v583 : string = @$"format!(" + v582 + ")"
        let v584 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "fable_library_rust::String_::fromString($0)"
        let v586 : string = Fable.Core.RustInterop.emitRustExpr v584 v585 
        let _v575 = v586 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v587 : string = "inline_colorization::color_bright_red"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v575 = v597 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v598 : string = "inline_colorization::color_bright_red"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v561 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v575 = v608 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v609 : string = "\u001b[91m"
        let v610 : string = method8()
        let v611 : string = v609 + v561 
        let v612 : string = v611 + v610 
        let _v575 = v612 
        #endif
#if FABLE_COMPILER_PYTHON
        let v613 : string = "\u001b[91m"
        let v614 : string = method8()
        let v615 : string = v613 + v561 
        let v616 : string = v615 + v614 
        let _v575 = v616 
        #endif
#else
        let v617 : string = "\u001b[91m"
        let v618 : string = method8()
        let v619 : string = v617 + v561 
        let v620 : string = v619 + v618 
        let _v575 = v620 
        #endif
        let v621 : string = _v575 
        let v627 : int64 = v88.l0
        let v628 : string = method9()
        let v629 : Mut4 = {l0 = v628} : Mut4
        let v630 : string = "{ "
        let v631 : string = $"{v630}"
        let v634 : unit = ()
        let v635 : (unit -> unit) = closure10(v629, v631)
        let v636 : unit = (fun () -> v635 (); v634) ()
        let v639 : string = "exit_code"
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v629, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = " = "
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v629, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = $"{v2}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure10(v629, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = "; "
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v629, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "run_result"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure10(v629, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = $"{v648}"
        let v686 : unit = ()
        let v687 : (unit -> unit) = closure10(v629, v683)
        let v688 : unit = (fun () -> v687 (); v686) ()
        let v691 : string = $"{v1}"
        let v694 : unit = ()
        let v695 : (unit -> unit) = closure10(v629, v691)
        let v696 : unit = (fun () -> v695 (); v694) ()
        let v699 : string = $"{v665}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v629, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = "new_code_path"
        let v708 : string = $"{v707}"
        let v711 : unit = ()
        let v712 : (unit -> unit) = closure10(v629, v708)
        let v713 : unit = (fun () -> v712 (); v711) ()
        let v716 : string = $"{v648}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure10(v629, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = $"{v0}"
        let v727 : unit = ()
        let v728 : (unit -> unit) = closure10(v629, v724)
        let v729 : unit = (fun () -> v728 (); v727) ()
        let v732 : string = $"{v665}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure10(v629, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = "external_command"
        let v741 : string = $"{v740}"
        let v744 : unit = ()
        let v745 : (unit -> unit) = closure10(v629, v741)
        let v746 : unit = (fun () -> v745 (); v744) ()
        let v749 : string = $"{v648}"
        let v752 : unit = ()
        let v753 : (unit -> unit) = closure10(v629, v749)
        let v754 : unit = (fun () -> v753 (); v752) ()
        let v757 : string = $"{v3}"
        let v760 : unit = ()
        let v761 : (unit -> unit) = closure10(v629, v757)
        let v762 : unit = (fun () -> v761 (); v760) ()
        let v765 : string = " }"
        let v766 : string = $"{v765}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v629, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = v629.l0
        let v775 : (unit -> string) = closure160()
        let v776 : string = $"{v486} {v621} #{v627} %s{v775 ()} / {v774}"
        let v779 : char list = []
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v779
        let v784 : string = v776.TrimStart v781 
        let v802 : char list = []
        let v803 : char list = '/' :: v802 
        let v806 : char list = ' ' :: v803 
        let v809 : (char list -> (char [])) = List.toArray
        let v810 : (char []) = v809 v806
        let v813 : string = v784.TrimEnd v810 
        let v831 : (string -> unit) = closure12()
        let v832 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v833 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v834 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v835 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v835 
        let _v832 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v831 v813
        let _v832 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v831 v813
        let _v832 = () 
        #endif
#else
        v831 v813
        let _v832 = () 
        #endif
        _v832 
        let v836 : (string -> unit) = v20.l0
        v836 v813
and closure162 () () : string =
    let v0 : string = "spiral_builder.run / invalid subcommand"
    v0
and closure161 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        let v554 : string = "Debug"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_blue"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[94m"
        let v608 : string = method8()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[94m"
        let v612 : string = method8()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[94m"
        let v616 : string = method8()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method9()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure10(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "subcommand"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure10(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure10(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v656 : string = "format!(\"{:#?}\", $0)"
        let v657 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v656 
        let v658 : string = "fable_library_rust::String_::fromString($0)"
        let v659 : string = Fable.Core.RustInterop.emitRustExpr v657 v658 
        let _v655 = v659 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v660 : string = "format!(\"{:#?}\", $0)"
        let v661 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v660 
        let v662 : string = "fable_library_rust::String_::fromString($0)"
        let v663 : string = Fable.Core.RustInterop.emitRustExpr v661 v662 
        let _v655 = v663 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v664 : string = "format!(\"{:#?}\", $0)"
        let v665 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v664 
        let v666 : string = "fable_library_rust::String_::fromString($0)"
        let v667 : string = Fable.Core.RustInterop.emitRustExpr v665 v666 
        let _v655 = v667 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v668 : string = $"%A{v1}"
        let _v655 = v668 
        #endif
#if FABLE_COMPILER_PYTHON
        let v671 : string = $"%A{v1}"
        let _v655 = v671 
        #endif
#else
        let v674 : string = $"%A{v1}"
        let _v655 = v674 
        #endif
        let v677 : string = _v655 
        let v682 : string = $"{v677}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v627, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = "; "
        let v691 : string = $"{v690}"
        let v694 : unit = ()
        let v695 : (unit -> unit) = closure10(v627, v691)
        let v696 : unit = (fun () -> v695 (); v694) ()
        let v699 : string = "arg_matches"
        let v700 : string = $"{v699}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure10(v627, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = $"{v646}"
        let v711 : unit = ()
        let v712 : (unit -> unit) = closure10(v627, v708)
        let v713 : unit = (fun () -> v712 (); v711) ()
        let v716 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v717 : string = "format!(\"{:#?}\", $0)"
        let v718 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v717 
        let v719 : string = "fable_library_rust::String_::fromString($0)"
        let v720 : string = Fable.Core.RustInterop.emitRustExpr v718 v719 
        let _v716 = v720 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v721 : string = "format!(\"{:#?}\", $0)"
        let v722 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v721 
        let v723 : string = "fable_library_rust::String_::fromString($0)"
        let v724 : string = Fable.Core.RustInterop.emitRustExpr v722 v723 
        let _v716 = v724 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v725 : string = "format!(\"{:#?}\", $0)"
        let v726 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v725 
        let v727 : string = "fable_library_rust::String_::fromString($0)"
        let v728 : string = Fable.Core.RustInterop.emitRustExpr v726 v727 
        let _v716 = v728 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v729 : string = $"%A{v0}"
        let _v716 = v729 
        #endif
#if FABLE_COMPILER_PYTHON
        let v732 : string = $"%A{v0}"
        let _v716 = v732 
        #endif
#else
        let v735 : string = $"%A{v0}"
        let _v716 = v735 
        #endif
        let v738 : string = _v716 
        let v743 : string = $"{v738}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure10(v627, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = " }"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure10(v627, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = v627.l0
        let v761 : (unit -> string) = closure162()
        let v762 : string = $"{v484} {v619} #{v625} %s{v761 ()} / {v760}"
        let v765 : char list = []
        let v766 : (char list -> (char [])) = List.toArray
        let v767 : (char []) = v766 v765
        let v770 : string = v762.TrimStart v767 
        let v788 : char list = []
        let v789 : char list = '/' :: v788 
        let v792 : char list = ' ' :: v789 
        let v795 : (char list -> (char [])) = List.toArray
        let v796 : (char []) = v795 v792
        let v799 : string = v770.TrimEnd v796 
        let v817 : (string -> unit) = closure12()
        let v818 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v819 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v799 v819 
        let _v818 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v820 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v799 v820 
        let _v818 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v821 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v799 v821 
        let _v818 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v817 v799
        let _v818 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v817 v799
        let _v818 = () 
        #endif
#else
        v817 v799
        let _v818 = () 
        #endif
        _v818 
        let v822 : (string -> unit) = v18.l0
        v822 v799
and closure163 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and closure164 () (v0 : serde_json_Error) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    let v22 : string = "fable_library_rust::String_::fromString($0)"
    let v23 : string = Fable.Core.RustInterop.emitRustExpr v17 v22 
    v23
and method120 () : (serde_json_Error -> string) =
    closure164()
and method121 (v0 : Result<string, string>) : Result<string, string> =
    v0
and method10 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __result = Box::pin(async move { //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v5 : (Ref<Str> -> std_string_String) = closure14()
    let v6 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v5) v4 
    let v7 : US4 option = None
    let _v7 = ref v7 
    let v8 : US4 option ref = _v7 
    let v9 : (US4 option -> US4 option ref) = closure15(v8)
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure16(v6, v9)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v16 : US4 option = _v7.Value 
    let v28 : US4 = US4_1
    let v29 : US4 = v16 |> Option.defaultValue v28 
    let v24139 : (struct (string * string) []) =
        match v29 with
        | US4_0(v33, v34) -> (* Some *)
            let v35 : string = "fable_library_rust::String_::fromString($0)"
            let v36 : string = Fable.Core.RustInterop.emitRustExpr v33 v35 
            let v37 : bool = v36 = "cuda"
            if v37 then
                let v38 : string = method11()
                let v39 : string = "&*$0"
                let v40 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v38 v39 
                let v41 : string = "clap::ArgMatches::get_one(&$0, v40).cloned()"
                let v42 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v41 
                let v43 : US5 option = None
                let _v43 = ref v43 
                let v44 : US5 option ref = _v43 
                let v45 : (US5 option -> US5 option ref) = closure17(v44)
                let v46 : unit = ()
                let v47 : (unit -> unit) = closure18(v42, v45)
                let v48 : unit = (fun () -> v47 (); v46) ()
                let v51 : US5 option = _v43.Value 
                let v62 : US5 = US5_1
                let v63 : US5 = v51 |> Option.defaultValue v62 
                let v70 : std_string_String =
                    match v63 with
                    | US5_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US5_0(v67) -> (* Some *)
                        v67
                let v71 : string = "fable_library_rust::String_::fromString($0)"
                let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
                let v73 : string = method12()
                let v74 : string = "&*$0"
                let v75 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v73 v74 
                let v76 : string = "clap::ArgMatches::get_one(&$0, v75).cloned()"
                let v77 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v76 
                let v78 : US5 option = None
                let _v78 = ref v78 
                let v79 : US5 option ref = _v78 
                let v80 : (US5 option -> US5 option ref) = closure17(v79)
                let v81 : unit = ()
                let v82 : (unit -> unit) = closure18(v77, v80)
                let v83 : unit = (fun () -> v82 (); v81) ()
                let v86 : US5 option = _v78.Value 
                let v97 : US5 = US5_1
                let v98 : US5 = v86 |> Option.defaultValue v97 
                let v127 : US6 =
                    match v98 with
                    | US5_1 -> (* None *)
                        US6_1
                    | US5_0(v102) -> (* Some *)
                        let v103 : string = "fable_library_rust::String_::fromString($0)"
                        let v104 : string = Fable.Core.RustInterop.emitRustExpr v102 v103 
                        let v105 : bool = "Pip" = v104
                        let v109 : US7 =
                            if v105 then
                                let v106 : US8 = US8_0
                                US7_0(v106)
                            else
                                US7_1
                        let v123 : US7 =
                            match v109 with
                            | US7_1 -> (* None *)
                                let v112 : bool = "Poetry" = v104
                                let v116 : US7 =
                                    if v112 then
                                        let v113 : US8 = US8_1
                                        US7_0(v113)
                                    else
                                        US7_1
                                match v116 with
                                | US7_1 -> (* None *)
                                    US7_1
                                | US7_0(v117) -> (* Some *)
                                    US7_0(v117)
                            | US7_0(v110) -> (* Some *)
                                US7_0(v110)
                        US6_0(v123)
                let v134 : US7 =
                    match v127 with
                    | US6_0(v128) -> (* Some *)
                        match v128 with
                        | US7_0(v129) -> (* Some *)
                            US7_0(v129)
                        | _ ->
                            US7_1
                    | _ ->
                        US7_1
                let v138 : US8 =
                    match v134 with
                    | US7_1 -> (* None *)
                        US8_0
                    | US7_0(v135) -> (* Some *)
                        v135
                let v139 : string = method13()
                let v140 : string = "&*$0"
                let v141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v139 v140 
                let v142 : string = "clap::ArgMatches::get_many(&$0, v141).map(|x| x.cloned().into_iter().collect())"
                let v143 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v142 
                let v144 : US9 option = None
                let _v144 = ref v144 
                let v145 : US9 option ref = _v144 
                let v146 : (US9 option -> US9 option ref) = closure19(v145)
                let v147 : unit = ()
                let v148 : (unit -> unit) = closure20(v143, v146)
                let v149 : unit = (fun () -> v148 (); v147) ()
                let v152 : US9 option = _v144.Value 
                let v163 : US9 = US9_1
                let v164 : US9 = v152 |> Option.defaultValue v163 
                let v168 : (std_string_String []) = [||]
                let v169 : string = "$0.to_vec()"
                let v170 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v168 v169 
                let v173 : Vec<std_string_String> =
                    match v164 with
                    | US9_1 -> (* None *)
                        v170
                    | US9_0(v171) -> (* Some *)
                        v171
                let v174 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v175 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v176 : string = "std::fs::read(&*$0)"
                let v177 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v72 v176 
                let v178 : string = "$0.unwrap()"
                let v179 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v177 v178 
                let _v175 = v179 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v180 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v180 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v183 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v183 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v186 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v186 
                #endif
#if FABLE_COMPILER_PYTHON
                let v189 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v189 
                #endif
#else
                let v192 : (uint8 []) = v72 |> System.IO.File.ReadAllBytes
                let v193 : string = "$0.to_vec()"
                let v194 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v192 v193 
                let _v175 = v194 
                #endif
                let v195 : Vec<uint8> = _v175 
                let v200 : Vec<uint8> = method14(v195)
                let v201 : string = "std::string::String::from_utf8($0)"
                let v202 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v200 v201 
                let v203 : string = "$0.unwrap()"
                let v204 : std_string_String = Fable.Core.RustInterop.emitRustExpr v202 v203 
                let v205 : string = "fable_library_rust::String_::fromString($0)"
                let v206 : string = Fable.Core.RustInterop.emitRustExpr v204 v205 
                let _v174 = v206 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v207 : string = null |> unbox<string>
                let _v174 = v207 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v210 : string = null |> unbox<string>
                let _v174 = v210 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v213 : string = null |> unbox<string>
                let _v174 = v213 
                #endif
#if FABLE_COMPILER_PYTHON
                let v216 : string = null |> unbox<string>
                let _v174 = v216 
                #endif
#else
                let v219 : string = v72 |> System.IO.File.ReadAllText
                let _v174 = v219 
                #endif
                let v220 : string = _v174 
                let v225 : string = __SOURCE_DIRECTORY__
                let v226 : string = "polyglot"
                let v227 : string = ".devcontainer"
                let v228 : string = method15(v226, v227)
                let v229 : US12 = method18(v228, v225)
                let v971 : US1 =
                    match v229 with
                    | US12_1(v232) -> (* Error *)
                        let v233 : unit = ()
                        let v234 : (unit -> unit) = closure22(v232)
                        let v235 : unit = (fun () -> v234 (); v233) ()
                        US1_1
                    | US12_0(v230) -> (* Ok *)
                        US1_0(v230)
                let v1720 : US1 =
                    match v971 with
                    | US1_1 -> (* None *)
                        let v974 : string = method23()
                        let v975 : string = method15(v226, v227)
                        let v976 : US12 = method18(v975, v974)
                        match v976 with
                        | US12_1(v979) -> (* Error *)
                            let v980 : unit = ()
                            let v981 : (unit -> unit) = closure22(v979)
                            let v982 : unit = (fun () -> v981 (); v980) ()
                            US1_1
                        | US12_0(v977) -> (* Ok *)
                            US1_0(v977)
                    | US1_0(v972) -> (* Some *)
                        US1_0(v972)
                let v1724 : string =
                    match v1720 with
                    | US1_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US1_0(v1721) -> (* Some *)
                        v1721
                let v1725 : string = method15(v1724, v226)
                let v1726 : string = method23()
                let v1727 : (unit -> string) = v1726.ToLower
                let v1728 : string = v1727 ()
                let v1731 : (unit -> string) = v1725.ToLower
                let v1732 : string = v1731 ()
                let v1735 : bool = v1728.StartsWith v1732 
                let v1738 : US12 =
                    if v1735 then
                        US12_1(v1732)
                    else
                        US12_0(v1732)
                let v1744 : Result<string, string> =
                    match v1738 with
                    | US12_1(v1741) -> (* Error *)
                        let v1742 : Result<string, string> = Error v1741 
                        v1742
                    | US12_0(v1739) -> (* Ok *)
                        let v1740 : Result<string, string> = Ok v1739 
                        v1740
                let v1745 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                let v1746 : bool = Fable.Core.RustInterop.emitRustExpr v1744 v1745 
                let v1747 : string = "x"
                let v1748 : string = Fable.Core.RustInterop.emitRustExpr () v1747 
                let v1749 : string = "true; $0 })"
                let v1750 : bool = Fable.Core.RustInterop.emitRustExpr v1748 v1749 
                let v1751 : string = "_result"
                let v1752 : string = Fable.Core.RustInterop.emitRustExpr () v1751 
                let v1753 : string = method24(v72)
                let v1759 : string =
                    match v138 with
                    | US8_0 -> (* Pip *)
                        let v1754 : string = "requirements.txt"
                        method15(v1753, v1754)
                    | US8_1 -> (* Poetry *)
                        let v1756 : string = "pyproject.toml"
                        method15(v1753, v1756)
                let v1760 : string = "true; let _result : Vec<_> = v173.into_iter().map(|x| { //"
                let v1761 : bool = Fable.Core.RustInterop.emitRustExpr () v1760 
                let v1762 : string = "x"
                let v1763 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1762 
                let v1764 : string = "fable_library_rust::String_::fromString($0)"
                let v1765 : string = Fable.Core.RustInterop.emitRustExpr v1763 v1764 
                let v1766 : string = "="
                let v1767 : bool = v1765.Contains v1766 
                let v1778 : string =
                    if v1767 then
                        v1765
                    else
                        let v1770 : string = "]"
                        let v1771 : bool = v1765.EndsWith v1770 
                        if v1771 then
                            let v1772 : string = $"={{version='*',features=["
                            let v1773 : string = "["
                            let v1774 : string = v1765.Replace (v1773, v1772)
                            let v1775 : string = $"{v1774}}}"
                            v1775
                        else
                            let v1776 : string = $"{v1765}='*'"
                            v1776
                let v1779 : string = "true; $0 }).collect::<Vec<_>>()"
                let v1780 : bool = Fable.Core.RustInterop.emitRustExpr v1778 v1779 
                let v1781 : string = "_result"
                let v1782 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1781 
                let v1783 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v1784 : (string []) = Fable.Core.RustInterop.emitRustExpr v1782 v1783 
                let v1785 : string seq = seq { for i = 0 to v1784.Length - 1 do yield v1784.[i] }
                let v1788 : (string -> (string seq -> string)) = String.concat
                let v1789 : string = "\n"
                let v1790 : (string seq -> string) = v1788 v1789
                let v1791 : string = v1790 v1785
                let v1794 : bool = v1791 = ""
                let struct (v1850 : int32, v1851 : string) =
                    if v1794 then
                        let v1795 : string = ""
                        struct (0, v1795)
                    else
                        let v1834 : string =
                            match v138 with
                            | US8_0 -> (* Pip *)
                                v1791
                            | US8_1 -> (* Poetry *)
                                let v1796 : string = $"[tool.poetry]"
                                let v1797 : string = $"name = \"test\""
                                let v1798 : string = v1796 + v1789 
                                let v1799 : string = v1798 + v1797 
                                let v1800 : string = $"version = \"0.0.1\""
                                let v1801 : string = v1799 + v1789 
                                let v1802 : string = v1801 + v1800 
                                let v1803 : string = $"description = \"\""
                                let v1804 : string = v1802 + v1789 
                                let v1805 : string = v1804 + v1803 
                                let v1806 : string = $"authors = []"
                                let v1807 : string = v1805 + v1789 
                                let v1808 : string = v1807 + v1806 
                                let v1809 : string = $""
                                let v1810 : string = v1808 + v1789 
                                let v1811 : string = v1810 + v1809 
                                let v1812 : string = $"[tool.poetry.dependencies]"
                                let v1813 : string = v1811 + v1789 
                                let v1814 : string = v1813 + v1812 
                                let v1815 : string = $"python=\"~3.12\""
                                let v1816 : string = v1814 + v1789 
                                let v1817 : string = v1816 + v1815 
                                let v1818 : string = $"{v1791}"
                                let v1819 : string = v1817 + v1789 
                                let v1820 : string = v1819 + v1818 
                                let v1821 : string = $""
                                let v1822 : string = v1820 + v1789 
                                let v1823 : string = v1822 + v1821 
                                let v1824 : string = $"[build-system]"
                                let v1825 : string = v1823 + v1789 
                                let v1826 : string = v1825 + v1824 
                                let v1827 : string = $"requires = [\"poetry-core\"]"
                                let v1828 : string = v1826 + v1789 
                                let v1829 : string = v1828 + v1827 
                                let v1830 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v1831 : string = v1829 + v1789 
                                let v1832 : string = v1831 + v1830 
                                v1832
                        method25(v1759, v1834)
                        let v1835 : System.Threading.CancellationToken option = None
                        let v1836 : (struct (string * string) []) = [||]
                        let v1837 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v1838 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v1839 : string option = None
                        let v1843 : string =
                            match v138 with
                            | US8_0 -> (* Pip *)
                                let v1840 : string = $"pip install -r requirements.txt"
                                v1840
                            | US8_1 -> (* Poetry *)
                                let v1841 : string = $"poetry install"
                                v1841
                        let v1844 : string option = Some v1753 
                        let v1847 : bool = true
                        method40(v1843, v1835, v1836, v1837, v1838, v1847, v1844)
                let v1852 : bool = v1850 <> 0 
                let struct (v3605 : US1, v3606 : US1, v3607 : US1) =
                    if v1852 then
                        let v1855 : unit = ()
                        let v1856 : (unit -> unit) = closure83(v138, v72, v1851, v1850)
                        let v1857 : unit = (fun () -> v1856 (); v1855) ()
                        let v2694 : string = "py"
                        let v2695 : US1 = US1_0(v2694)
                        let v2696 : US1 = US1_1
                        let v2697 : US1 = US1_1
                        struct (v2695, v2696, v2697)
                    else
                        let v2701 : string =
                            match v138 with
                            | US8_0 -> (* Pip *)
                                let v2698 : string = $"python \"{v72}\""
                                v2698
                            | US8_1 -> (* Poetry *)
                                let v2699 : string = $"poetry run python \"{v72}\""
                                v2699
                        let v2702 : string = "TRACE_LEVEL"
                        let v2703 : string = "Verbose"
                        let v2704 : (struct (string * string) []) = [|struct (v2702, v2703)|]
                        let v2705 : System.Threading.CancellationToken option = None
                        let v2706 : (struct (string * string) []) = [||]
                        let v2707 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v2708 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v2709 : string option = None
                        let v2710 : string option = Some v1753 
                        let v2713 : bool = true
                        let struct (v2714 : int32, v2715 : string) = method40(v2701, v2705, v2704, v2707, v2708, v2713, v2710)
                        let v2716 : int32 = v2704.Length
                        let v2717 : (string []) = Array.zeroCreate<string> (v2716)
                        let v2718 : Mut5 = {l0 = 0} : Mut5
                        while method43(v2716, v2718) do
                            let v2720 : int32 = v2718.l0
                            let struct (v2721 : string, v2722 : string) = v2704.[int v2720]
                            let v2723 : string = $"$env:{v2721}=''{v2722}''"
                            v2717.[int v2720] <- v2723
                            let v2724 : int32 = v2720 + 1
                            v2718.l0 <- v2724
                            ()
                        let v2725 : string seq = v2717 |> Seq.ofArray
                        let v2728 : (string -> (string seq -> string)) = String.concat
                        let v2729 : string = ";"
                        let v2730 : (string seq -> string) = v2728 v2729
                        let v2731 : string = v2730 v2725
                        let v2734 : string = $"pwsh -c '{v2731}; {v2701}'"
                        let v2735 : bool = v2714 = 0
                        let v2740 : bool =
                            if v2735 then
                                true
                            else
                                let v2736 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v2737 : bool = v2715.Contains v2736 
                                v2737
                        let struct (v3602 : US1, v3603 : US1, v3604 : US1) =
                            if v2740 then
                                let v2741 : (string -> US1) = closure85()
                                let v2742 : (unit -> string) = closure86(v2715)
                                let v2743 : (exn -> US1) = closure87(v72, v2715, v2734)
                                let v2744 : US1 = US1_1
                                let result = ref v2744
                                try
                                    result.Value <- v2742 () |> v2741 
                                with ex ->
                                    result.Value <- v2743 ex 
                                let v2745 : US1 = result.Value
                                let v2755 : string option =
                                    match v2745 with
                                    | US1_1 -> (* None *)
                                        let v2753 : string option = None
                                        v2753
                                    | US1_0(v2749) -> (* Some *)
                                        let v2750 : string option = Some v2749 
                                        v2750
                                let v2756 : string = "$0.unwrap()"
                                let v2757 : string = Fable.Core.RustInterop.emitRustExpr v2755 v2756 
                                let v2758 : string = "py"
                                let v2759 : US1 = US1_0(v2758)
                                let v2760 : US1 = US1_0(v220)
                                let v2761 : US1 = US1_0(v2757)
                                struct (v2759, v2760, v2761)
                            else
                                let v2762 : unit = ()
                                let v2763 : (unit -> unit) = closure90(v72, v2715, v2714, v2734)
                                let v2764 : unit = (fun () -> v2763 (); v2762) ()
                                let v3598 : string = "py"
                                let v3599 : US1 = US1_0(v3598)
                                let v3600 : US1 = US1_1
                                let v3601 : US1 = US1_1
                                struct (v3599, v3600, v3601)
                        struct (v3602, v3603, v3604)
                let v3611 : string =
                    match v3605 with
                    | US1_1 -> (* None *)
                        let v3609 : string = ""
                        v3609
                    | US1_0(v3608) -> (* Some *)
                        v3608
                let v3612 : string = "extension"
                let v3616 : string =
                    match v3606 with
                    | US1_1 -> (* None *)
                        let v3614 : string = ""
                        v3614
                    | US1_0(v3613) -> (* Some *)
                        v3613
                let v3617 : string = "code"
                let v3621 : string =
                    match v3607 with
                    | US1_1 -> (* None *)
                        let v3619 : string = ""
                        v3619
                    | US1_0(v3618) -> (* Some *)
                        v3618
                let v3622 : string = "output"
                let v3623 : (struct (string * string) []) = [|struct (v3612, v3611); struct (v3617, v3616); struct (v3622, v3621)|]
                let v3624 : string = "$0.to_vec()"
                let v3625 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3623 v3624 
                let v3626 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v3627 : (struct (string * string) -> (std_string_String * std_string_String)) = closure92()
                let v3628 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v3625, v3627) v3626 
                let v3629 : string = "std::collections::BTreeMap::from_iter(v3628.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v3630 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3629 
                let v3631 : string = "serde_json::to_string(&v3630)"
                let v3632 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v3631 
                let v3633 : string = "$0.unwrap()"
                let v3634 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3632 v3633 
                let v3635 : string = "fable_library_rust::String_::fromString($0)"
                let v3636 : string = Fable.Core.RustInterop.emitRustExpr v3634 v3635 
                let v3637 : string = "command_result"
                [|struct (v3637, v3636)|]
            else
                let v3639 : string = "fable_library_rust::String_::fromString($0)"
                let v3640 : string = Fable.Core.RustInterop.emitRustExpr v33 v3639 
                let v3641 : bool = v3640 = "fable"
                if v3641 then
                    let v3642 : string = method79()
                    let v3643 : string = "&*$0"
                    let v3644 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3642 v3643 
                    let v3645 : string = "clap::ArgMatches::get_one(&$0, v3644).cloned()"
                    let v3646 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v3645 
                    let v3647 : US5 option = None
                    let _v3647 = ref v3647 
                    let v3648 : US5 option ref = _v3647 
                    let v3649 : (US5 option -> US5 option ref) = closure17(v3648)
                    let v3650 : unit = ()
                    let v3651 : (unit -> unit) = closure18(v3646, v3649)
                    let v3652 : unit = (fun () -> v3651 (); v3650) ()
                    let v3655 : US5 option = _v3647.Value 
                    let v3666 : US5 = US5_1
                    let v3667 : US5 = v3655 |> Option.defaultValue v3666 
                    let v3674 : std_string_String =
                        match v3667 with
                        | US5_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US5_0(v3671) -> (* Some *)
                            v3671
                    let v3675 : string = "fable_library_rust::String_::fromString($0)"
                    let v3676 : string = Fable.Core.RustInterop.emitRustExpr v3674 v3675 
                    let v3677 : string = method80()
                    let v3678 : string = "&*$0"
                    let v3679 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3677 v3678 
                    let v3680 : string = "clap::ArgMatches::get_one(&$0, v3679).cloned()"
                    let v3681 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v3680 
                    let v3682 : US5 option = None
                    let _v3682 = ref v3682 
                    let v3683 : US5 option ref = _v3682 
                    let v3684 : (US5 option -> US5 option ref) = closure17(v3683)
                    let v3685 : unit = ()
                    let v3686 : (unit -> unit) = closure18(v3681, v3684)
                    let v3687 : unit = (fun () -> v3686 (); v3685) ()
                    let v3690 : US5 option = _v3682.Value 
                    let v3701 : US5 = US5_1
                    let v3702 : US5 = v3690 |> Option.defaultValue v3701 
                    let v3712 : US1 =
                        match v3702 with
                        | US5_1 -> (* None *)
                            US1_1
                        | US5_0(v3706) -> (* Some *)
                            let v3707 : string = "fable_library_rust::String_::fromString($0)"
                            let v3708 : string = Fable.Core.RustInterop.emitRustExpr v3706 v3707 
                            US1_0(v3708)
                    let v3746 : string =
                        match v3712 with
                        | US1_1 -> (* None *)
                            let v3744 : string = "{}"
                            v3744
                        | US1_0(v3713) -> (* Some *)
                            let v3714 : clap_Command = method0()
                            let v3715 : string = $"_ {v3713} --fs-path \"{v3676}\""
                            let v3716 : US22 = method54(v3715)
                            let v3722 : (string []) =
                                match v3716 with
                                | US22_1(v3718) -> (* Error *)
                                    let v3719 : string = $"resultm.get / Result value was Error: {v3718}"
                                    failwith<(string [])> v3719
                                | US22_0(v3717) -> (* Ok *)
                                    v3717
                            let v3723 : string = "$0.to_vec()"
                            let v3724 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v3722 v3723 
                            let v3725 : string = "true; let _result : Vec<_> = v3724.into_iter().map(|x| { //"
                            let v3726 : bool = Fable.Core.RustInterop.emitRustExpr () v3725 
                            let v3727 : string = "x"
                            let v3728 : string = Fable.Core.RustInterop.emitRustExpr () v3727 
                            let v3729 : string = "&*$0"
                            let v3730 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3728 v3729 
                            let v3731 : string = "String::from($0)"
                            let v3732 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3730 v3731 
                            let v3733 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v3734 : bool = Fable.Core.RustInterop.emitRustExpr v3732 v3733 
                            let v3735 : string = "_result"
                            let v3736 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3735 
                            let v3737 : string = "clap::Command::get_matches_from($0, v3736)"
                            let v3738 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v3714 v3737 
                            let v3739 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method10(v0, v3738)
                            let v3740 : string = "v3739.await"
                            let v3741 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v3740 
                            let v3742 : string = "$0.unwrap()"
                            let v3743 : string = Fable.Core.RustInterop.emitRustExpr v3741 v3742 
                            v3743
                    let v3747 : string = "command_result"
                    [|struct (v3747, v3746)|]
                else
                    let v3749 : string = "fable_library_rust::String_::fromString($0)"
                    let v3750 : string = Fable.Core.RustInterop.emitRustExpr v33 v3749 
                    let v3751 : bool = v3750 = "dib"
                    if v3751 then
                        let v3752 : string = method81()
                        let v3753 : string = "&*$0"
                        let v3754 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3752 v3753 
                        let v3755 : string = "clap::ArgMatches::get_one(&$0, v3754).cloned()"
                        let v3756 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v3755 
                        let v3757 : (std_string_String -> string) = closure93()
                        let v3758 : string option = v3756 |> Option.map v3757 
                        let v3783 : string = "$0.unwrap()"
                        let v3784 : string = Fable.Core.RustInterop.emitRustExpr v3758 v3783 
                        let v3785 : string = method89()
                        let v3786 : string = "&*$0"
                        let v3787 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3785 v3786 
                        let v3788 : string = "clap::ArgMatches::get_one(&$0, v3787).cloned()"
                        let v3789 : uint8 option = Fable.Core.RustInterop.emitRustExpr v34 v3788 
                        let v3790 : uint8 = v3789 |> Option.defaultValue 1uy 
                        let v3793 : string = method90()
                        let v3794 : string = "&*$0"
                        let v3795 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3793 v3794 
                        let v3796 : string = "clap::ArgMatches::get_one(&$0, v3795).cloned()"
                        let v3797 : string option = Fable.Core.RustInterop.emitRustExpr v34 v3796 
                        let v3798 : uint8 = 1uy
                        let struct (v3799 : int32, v3800 : string) = method91(v3797, v3790, v3784, v3798)
                        let v3801 : bool = v3799 <> 0 
                        let struct (v5493 : int32, v5494 : string) =
                            if v3801 then
                                struct (v3799, v3800)
                            else
                                let v3804 : System.Threading.CancellationToken option = None
                                let v3805 : (struct (string * string) []) = [||]
                                let v3806 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v3807 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v3808 : string option = None
                                let v3809 : string = $"jupyter nbconvert \"{v3784}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v3810 : bool = true
                                let struct (v3811 : int32, v3812 : string) = method40(v3809, v3804, v3805, v3806, v3807, v3810, v3808)
                                let v3813 : unit = ()
                                let v3814 : (unit -> unit) = closure96(v3812, v3811)
                                let v3815 : unit = (fun () -> v3814 (); v3813) ()
                                let v4584 : bool = v3811 <> 0 
                                if v4584 then
                                    let v4587 : string = $"repl_result: {v3800}

jupyter_result: {v3812}"
                                    struct (v3811, v4587)
                                else
                                    let v4588 : string = "'"
                                    let v4589 : string = "''"
                                    let v4590 : string = v3784.Replace (v4588, v4589)
                                    let v4591 : System.Threading.CancellationToken option = None
                                    let v4592 : (struct (string * string) []) = [||]
                                    let v4593 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v4594 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v4595 : string option = None
                                    let v4596 : string = $"pwsh -c \"$counter = 1; $path = '{v4590}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v4597 : bool = true
                                    let struct (v4598 : int32, v4599 : string) = method40(v4596, v4591, v4592, v4593, v4594, v4597, v4595)
                                    let v4600 : unit = ()
                                    let v4601 : (unit -> unit) = closure98(v4599, v4598)
                                    let v4602 : unit = (fun () -> v4601 (); v4600) ()
                                    let v5371 : string = $"{v3784}.html"
                                    let v5372 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5373 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5374 : string = "std::fs::read(&*$0)"
                                    let v5375 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5371 v5374 
                                    let v5376 : string = "$0.unwrap()"
                                    let v5377 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5375 v5376 
                                    let _v5373 = v5377 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5378 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5373 = v5378 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5381 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5373 = v5381 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5384 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5373 = v5384 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5387 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5373 = v5387 
                                    #endif
#else
                                    let v5390 : (uint8 []) = v5371 |> System.IO.File.ReadAllBytes
                                    let v5391 : string = "$0.to_vec()"
                                    let v5392 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5390 v5391 
                                    let _v5373 = v5392 
                                    #endif
                                    let v5393 : Vec<uint8> = _v5373 
                                    let v5398 : Vec<uint8> = method14(v5393)
                                    let v5399 : string = "std::string::String::from_utf8($0)"
                                    let v5400 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5398 v5399 
                                    let v5401 : string = "$0.unwrap()"
                                    let v5402 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5400 v5401 
                                    let v5403 : string = "fable_library_rust::String_::fromString($0)"
                                    let v5404 : string = Fable.Core.RustInterop.emitRustExpr v5402 v5403 
                                    let _v5372 = v5404 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5405 : string = null |> unbox<string>
                                    let _v5372 = v5405 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5408 : string = null |> unbox<string>
                                    let _v5372 = v5408 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5411 : string = null |> unbox<string>
                                    let _v5372 = v5411 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5414 : string = null |> unbox<string>
                                    let _v5372 = v5414 
                                    #endif
#else
                                    let v5417 : string = v5371 |> System.IO.File.ReadAllText
                                    let _v5372 = v5417 
                                    #endif
                                    let v5418 : string = _v5372 
                                    let v5423 : string = "\r\n"
                                    let v5424 : string = "\n"
                                    let v5425 : string = v5418.Replace (v5423, v5424)
                                    let v5426 : string = $"{v3784}.html"
                                    let v5427 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5428 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v5426, v5425) v5428 
                                    let _v5427 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v5427 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v5427 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v5427 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v5427 = () 
                                    #endif
#else
                                    let v5429 : string = method39(v5425)
                                    System.IO.File.WriteAllText (v5426, v5429)
                                    let _v5427 = () 
                                    #endif
                                    _v5427 
                                    let v5430 : string = $"{v3784}.ipynb"
                                    let v5431 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5432 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5433 : string = "std::fs::read(&*$0)"
                                    let v5434 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5430 v5433 
                                    let v5435 : string = "$0.unwrap()"
                                    let v5436 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5434 v5435 
                                    let _v5432 = v5436 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5437 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5432 = v5437 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5440 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5432 = v5440 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5443 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5432 = v5443 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5446 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5432 = v5446 
                                    #endif
#else
                                    let v5449 : (uint8 []) = v5430 |> System.IO.File.ReadAllBytes
                                    let v5450 : string = "$0.to_vec()"
                                    let v5451 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5449 v5450 
                                    let _v5432 = v5451 
                                    #endif
                                    let v5452 : Vec<uint8> = _v5432 
                                    let v5457 : Vec<uint8> = method14(v5452)
                                    let v5458 : string = "std::string::String::from_utf8($0)"
                                    let v5459 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5457 v5458 
                                    let v5460 : string = "$0.unwrap()"
                                    let v5461 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5459 v5460 
                                    let v5462 : string = "fable_library_rust::String_::fromString($0)"
                                    let v5463 : string = Fable.Core.RustInterop.emitRustExpr v5461 v5462 
                                    let _v5431 = v5463 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5464 : string = null |> unbox<string>
                                    let _v5431 = v5464 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5467 : string = null |> unbox<string>
                                    let _v5431 = v5467 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5470 : string = null |> unbox<string>
                                    let _v5431 = v5470 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5473 : string = null |> unbox<string>
                                    let _v5431 = v5473 
                                    #endif
#else
                                    let v5476 : string = v5430 |> System.IO.File.ReadAllText
                                    let _v5431 = v5476 
                                    #endif
                                    let v5477 : string = _v5431 
                                    let v5482 : string = v5477.Replace (v5423, v5424)
                                    let v5483 : string = "\\r\\n"
                                    let v5484 : string = "\\n"
                                    let v5485 : string = v5482.Replace (v5483, v5484)
                                    let v5486 : string = $"{v3784}.ipynb"
                                    let v5487 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5488 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v5486, v5485) v5488 
                                    let _v5487 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v5487 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v5487 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v5487 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v5487 = () 
                                    #endif
#else
                                    let v5489 : string = method39(v5485)
                                    System.IO.File.WriteAllText (v5486, v5489)
                                    let _v5487 = () 
                                    #endif
                                    _v5487 
                                    let v5490 : string = $"repl_result: {v3800}

jupyter_result: {v3812}

pwsh_replace_html_result: {v4599}"
                                    struct (v4598, v5490)
                        let v5495 : unit = ()
                        let v5496 : (unit -> unit) = closure100(v5494, v5493)
                        let v5497 : unit = (fun () -> v5496 (); v5495) ()
                        let v6266 : bool = v5493 <> 0 
                        if v6266 then
                            let v6269 : string = $"spiral_builder.run / dib / exit_code: {v5493} / result: {v5494}"
                            failwith<unit> v6269
                        let v6270 : string = "stdio"
                        [|struct (v6270, v5494)|]
                    else
                        let v6272 : string = "fable_library_rust::String_::fromString($0)"
                        let v6273 : string = Fable.Core.RustInterop.emitRustExpr v33 v6272 
                        let v6274 : bool = v6273 = "rust"
                        let struct (v24112 : US1, v24113 : US1, v24114 : US1) =
                            if v6274 then
                                let v6275 : string = method79()
                                let v6276 : string = "&*$0"
                                let v6277 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6275 v6276 
                                let v6278 : string = "clap::ArgMatches::get_one(&$0, v6277).cloned()"
                                let v6279 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v6278 
                                let v6280 : US5 option = None
                                let _v6280 = ref v6280 
                                let v6281 : US5 option ref = _v6280 
                                let v6282 : (US5 option -> US5 option ref) = closure17(v6281)
                                let v6283 : unit = ()
                                let v6284 : (unit -> unit) = closure18(v6279, v6282)
                                let v6285 : unit = (fun () -> v6284 (); v6283) ()
                                let v6288 : US5 option = _v6280.Value 
                                let v6299 : US5 = US5_1
                                let v6300 : US5 = v6288 |> Option.defaultValue v6299 
                                let v6307 : std_string_String =
                                    match v6300 with
                                    | US5_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US5_0(v6304) -> (* Some *)
                                        v6304
                                let v6308 : string = "fable_library_rust::String_::fromString($0)"
                                let v6309 : string = Fable.Core.RustInterop.emitRustExpr v6307 v6308 
                                let v6310 : string = method13()
                                let v6311 : string = "&*$0"
                                let v6312 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6310 v6311 
                                let v6313 : string = "clap::ArgMatches::get_many(&$0, v6312).map(|x| x.cloned().into_iter().collect())"
                                let v6314 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v6313 
                                let v6315 : US9 option = None
                                let _v6315 = ref v6315 
                                let v6316 : US9 option ref = _v6315 
                                let v6317 : (US9 option -> US9 option ref) = closure19(v6316)
                                let v6318 : unit = ()
                                let v6319 : (unit -> unit) = closure20(v6314, v6317)
                                let v6320 : unit = (fun () -> v6319 (); v6318) ()
                                let v6323 : US9 option = _v6315.Value 
                                let v6334 : US9 = US9_1
                                let v6335 : US9 = v6323 |> Option.defaultValue v6334 
                                let v6339 : (std_string_String []) = [||]
                                let v6340 : string = "$0.to_vec()"
                                let v6341 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6339 v6340 
                                let v6344 : Vec<std_string_String> =
                                    match v6335 with
                                    | US9_1 -> (* None *)
                                        v6341
                                    | US9_0(v6342) -> (* Some *)
                                        v6342
                                let v6345 : string = method92()
                                let v6346 : string = "&*$0"
                                let v6347 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6345 v6346 
                                let v6348 : string = "clap::ArgMatches::get_flag(&v34, v6347)"
                                let v6349 : bool = Fable.Core.RustInterop.emitRustExpr () v6348 
                                let v6350 : string = method93()
                                let v6351 : string = "&*$0"
                                let v6352 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6350 v6351 
                                let v6353 : string = "clap::ArgMatches::get_flag(&v34, v6352)"
                                let v6354 : bool = Fable.Core.RustInterop.emitRustExpr () v6353 
                                let v6361 : US33 =
                                    if v6349 then
                                        let v6355 : US34 = US34_0
                                        US33_0(v6355)
                                    else
                                        if v6354 then
                                            let v6357 : US34 = US34_1
                                            US33_0(v6357)
                                        else
                                            US33_1
                                let v6362 : bool =
                                    match v0 with
                                    | US0_0 -> (* Verbose *)
                                        true
                                    | _ ->
                                        false
                                let v6363 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6364 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6365 : string = "std::fs::read(&*$0)"
                                let v6366 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6309 v6365 
                                let v6367 : string = "$0.unwrap()"
                                let v6368 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6366 v6367 
                                let _v6364 = v6368 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6369 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v6364 = v6369 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6372 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v6364 = v6372 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6375 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v6364 = v6375 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6378 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v6364 = v6378 
                                #endif
#else
                                let v6381 : (uint8 []) = v6309 |> System.IO.File.ReadAllBytes
                                let v6382 : string = "$0.to_vec()"
                                let v6383 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6381 v6382 
                                let _v6364 = v6383 
                                #endif
                                let v6384 : Vec<uint8> = _v6364 
                                let v6389 : Vec<uint8> = method14(v6384)
                                let v6390 : string = "std::string::String::from_utf8($0)"
                                let v6391 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6389 v6390 
                                let v6392 : string = "$0.unwrap()"
                                let v6393 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6391 v6392 
                                let v6394 : string = "fable_library_rust::String_::fromString($0)"
                                let v6395 : string = Fable.Core.RustInterop.emitRustExpr v6393 v6394 
                                let _v6363 = v6395 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6396 : string = null |> unbox<string>
                                let _v6363 = v6396 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6399 : string = null |> unbox<string>
                                let _v6363 = v6399 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6402 : string = null |> unbox<string>
                                let _v6363 = v6402 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6405 : string = null |> unbox<string>
                                let _v6363 = v6405 
                                #endif
#else
                                let v6408 : string = v6309 |> System.IO.File.ReadAllText
                                let _v6363 = v6408 
                                #endif
                                let v6409 : string = _v6363 
                                let v6414 : string = method9()
                                let v6415 : Mut4 = {l0 = v6414} : Mut4
                                let v6416 : string = "{ "
                                let v6417 : string = $"{v6416}"
                                let v6420 : unit = ()
                                let v6421 : (unit -> unit) = closure10(v6415, v6417)
                                let v6422 : unit = (fun () -> v6421 (); v6420) ()
                                let v6425 : string = "extension"
                                let v6426 : string = $"{v6425}"
                                let v6429 : unit = ()
                                let v6430 : (unit -> unit) = closure10(v6415, v6426)
                                let v6431 : unit = (fun () -> v6430 (); v6429) ()
                                let v6434 : string = " = "
                                let v6435 : string = $"{v6434}"
                                let v6438 : unit = ()
                                let v6439 : (unit -> unit) = closure10(v6415, v6435)
                                let v6440 : unit = (fun () -> v6439 (); v6438) ()
                                let v6443 : string = "rs"
                                let v6444 : string = $"{v6443}"
                                let v6447 : unit = ()
                                let v6448 : (unit -> unit) = closure10(v6415, v6444)
                                let v6449 : unit = (fun () -> v6448 (); v6447) ()
                                let v6452 : string = "; "
                                let v6453 : string = $"{v6452}"
                                let v6456 : unit = ()
                                let v6457 : (unit -> unit) = closure10(v6415, v6453)
                                let v6458 : unit = (fun () -> v6457 (); v6456) ()
                                let v6461 : string = "code"
                                let v6462 : string = $"{v6461}"
                                let v6465 : unit = ()
                                let v6466 : (unit -> unit) = closure10(v6415, v6462)
                                let v6467 : unit = (fun () -> v6466 (); v6465) ()
                                let v6470 : string = $"{v6434}"
                                let v6473 : unit = ()
                                let v6474 : (unit -> unit) = closure10(v6415, v6470)
                                let v6475 : unit = (fun () -> v6474 (); v6473) ()
                                let v6478 : string = $"{v6409}"
                                let v6481 : unit = ()
                                let v6482 : (unit -> unit) = closure10(v6415, v6478)
                                let v6483 : unit = (fun () -> v6482 (); v6481) ()
                                let v6486 : string = $"{v6452}"
                                let v6489 : unit = ()
                                let v6490 : (unit -> unit) = closure10(v6415, v6486)
                                let v6491 : unit = (fun () -> v6490 (); v6489) ()
                                let v6494 : string = "runtime"
                                let v6495 : string = $"{v6494}"
                                let v6498 : unit = ()
                                let v6499 : (unit -> unit) = closure10(v6415, v6495)
                                let v6500 : unit = (fun () -> v6499 (); v6498) ()
                                let v6503 : string = $"{v6434}"
                                let v6506 : unit = ()
                                let v6507 : (unit -> unit) = closure10(v6415, v6503)
                                let v6508 : unit = (fun () -> v6507 (); v6506) ()
                                let v6511 : string = $"%A{v6361}"
                                let v6514 : string = $"{v6511}"
                                let v6517 : unit = ()
                                let v6518 : (unit -> unit) = closure10(v6415, v6514)
                                let v6519 : unit = (fun () -> v6518 (); v6517) ()
                                let v6522 : string = " }"
                                let v6523 : string = $"{v6522}"
                                let v6526 : unit = ()
                                let v6527 : (unit -> unit) = closure10(v6415, v6523)
                                let v6528 : unit = (fun () -> v6527 (); v6526) ()
                                let v6531 : string = v6415.l0
                                let v6532 : string = method94(v6531)
                                let v6533 : string = __SOURCE_DIRECTORY__
                                let v6534 : string = "polyglot"
                                let v6535 : string = ".devcontainer"
                                let v6536 : string = method15(v6534, v6535)
                                let v6537 : US12 = method18(v6536, v6533)
                                let v7276 : US1 =
                                    match v6537 with
                                    | US12_1(v6540) -> (* Error *)
                                        let v6541 : unit = ()
                                        let v6542 : (unit -> unit) = closure22(v6540)
                                        let v6543 : unit = (fun () -> v6542 (); v6541) ()
                                        US1_1
                                    | US12_0(v6538) -> (* Ok *)
                                        US1_0(v6538)
                                let v8022 : US1 =
                                    match v7276 with
                                    | US1_1 -> (* None *)
                                        let v7279 : string = method23()
                                        let v7280 : string = method15(v6534, v6535)
                                        let v7281 : US12 = method18(v7280, v7279)
                                        match v7281 with
                                        | US12_1(v7284) -> (* Error *)
                                            let v7285 : unit = ()
                                            let v7286 : (unit -> unit) = closure22(v7284)
                                            let v7287 : unit = (fun () -> v7286 (); v7285) ()
                                            US1_1
                                        | US12_0(v7282) -> (* Ok *)
                                            US1_0(v7282)
                                    | US1_0(v7277) -> (* Some *)
                                        US1_0(v7277)
                                let v8026 : string =
                                    match v8022 with
                                    | US1_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US1_0(v8023) -> (* Some *)
                                        v8023
                                let v8027 : string = method15(v8026, v6534)
                                let v8028 : string = method23()
                                let v8029 : (unit -> string) = v8028.ToLower
                                let v8030 : string = v8029 ()
                                let v8033 : (unit -> string) = v8027.ToLower
                                let v8034 : string = v8033 ()
                                let v8037 : bool = v8030.StartsWith v8034 
                                let v8040 : US12 =
                                    if v8037 then
                                        US12_1(v8034)
                                    else
                                        US12_0(v8034)
                                let v8046 : Result<string, string> =
                                    match v8040 with
                                    | US12_1(v8043) -> (* Error *)
                                        let v8044 : Result<string, string> = Error v8043 
                                        v8044
                                    | US12_0(v8041) -> (* Ok *)
                                        let v8042 : Result<string, string> = Ok v8041 
                                        v8042
                                let v8047 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                let v8048 : bool = Fable.Core.RustInterop.emitRustExpr v8046 v8047 
                                let v8049 : string = "x"
                                let v8050 : string = Fable.Core.RustInterop.emitRustExpr () v8049 
                                let v8051 : string = "true; $0 })"
                                let v8052 : bool = Fable.Core.RustInterop.emitRustExpr v8050 v8051 
                                let v8053 : string = "_result"
                                let v8054 : string = Fable.Core.RustInterop.emitRustExpr () v8053 
                                let v8055 : string = "target/spiral_builder"
                                let v8056 : string = method15(v8054, v8055)
                                let v8057 : string = "spiral_builder"
                                let v8058 : string = method15(v8056, v8057)
                                let v8059 : string = "packages"
                                let v8060 : string = method15(v8058, v8059)
                                let v8061 : string = "Rust"
                                let v8062 : string = method15(v8060, v8061)
                                let v8063 : string = method15(v8062, v6532)
                                let v8064 : System.IDisposable = method28(v8063)
                                let v8065 : string = $"{v8057}.fs"
                                let v8066 : string = method15(v8063, v8065)
                                let v8067 : string = method85(v8066)
                                method25(v8067, v6409)
                                let v8068 : string list = []
                                let v8069 : string seq = seq { for i = 0 to v8068.Length - 1 do yield v8068.[i] }
                                let v8072 : (string -> (string seq -> string)) = String.concat
                                let v8073 : string = "\\n        "
                                let v8074 : (string seq -> string) = v8072 v8073
                                let v8075 : string = v8074 v8069
                                let v8078 : string = "Fable.Core"
                                let v8079 : string = $"<PackageReference Include=\"{v8078}\" Version=\"*\" />"
                                let v8080 : string list = []
                                let v8081 : string list = v8079 :: v8080 
                                let v8084 : string seq = seq { for i = 0 to v8081.Length - 1 do yield v8081.[i] }
                                let v8087 : (string -> (string seq -> string)) = String.concat
                                let v8088 : (string seq -> string) = v8087 v8073
                                let v8089 : string = v8088 v8084
                                let v8092 : string = $"{v8057}.fsproj"
                                let v8093 : string = method15(v8063, v8092)
                                let v8094 : string = method85(v8093)
                                let v8095 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                let v8096 : string = $"<PropertyGroup>"
                                let v8097 : string = "\n"
                                let v8098 : string = v8095 + v8097 
                                let v8099 : string = v8098 + v8096 
                                let v8100 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                let v8101 : string = v8099 + v8097 
                                let v8102 : string = v8101 + v8100 
                                let v8103 : string = $"    <LangVersion>preview</LangVersion>"
                                let v8104 : string = v8102 + v8097 
                                let v8105 : string = v8104 + v8103 
                                let v8106 : string = $"    <RollForward>Major</RollForward>"
                                let v8107 : string = v8105 + v8097 
                                let v8108 : string = v8107 + v8106 
                                let v8109 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                let v8110 : string = v8108 + v8097 
                                let v8111 : string = v8110 + v8109 
                                let v8112 : string = $"    <PublishAot>false</PublishAot>"
                                let v8113 : string = v8111 + v8097 
                                let v8114 : string = v8113 + v8112 
                                let v8115 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                let v8116 : string = v8114 + v8097 
                                let v8117 : string = v8116 + v8115 
                                let v8118 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                let v8119 : string = v8117 + v8097 
                                let v8120 : string = v8119 + v8118 
                                let v8121 : string = $"    <SelfContained>true</SelfContained>"
                                let v8122 : string = v8120 + v8097 
                                let v8123 : string = v8122 + v8121 
                                let v8124 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                let v8125 : string = v8123 + v8097 
                                let v8126 : string = v8125 + v8124 
                                let v8127 : string = $"    <OutputType>Exe</OutputType>"
                                let v8128 : string = v8126 + v8097 
                                let v8129 : string = v8128 + v8127 
                                let v8130 : string = $"</PropertyGroup>"
                                let v8131 : string = v8129 + v8097 
                                let v8132 : string = v8131 + v8130 
                                let v8133 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                let v8134 : string = v8132 + v8097 
                                let v8135 : string = v8134 + v8133 
                                let v8136 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                let v8137 : string = v8135 + v8097 
                                let v8138 : string = v8137 + v8136 
                                let v8139 : string = $"</PropertyGroup>"
                                let v8140 : string = v8138 + v8097 
                                let v8141 : string = v8140 + v8139 
                                let v8142 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                let v8143 : string = v8141 + v8097 
                                let v8144 : string = v8143 + v8142 
                                let v8145 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                let v8146 : string = v8144 + v8097 
                                let v8147 : string = v8146 + v8145 
                                let v8148 : string = $"</PropertyGroup>"
                                let v8149 : string = v8147 + v8097 
                                let v8150 : string = v8149 + v8148 
                                let v8151 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                let v8152 : string = v8150 + v8097 
                                let v8153 : string = v8152 + v8151 
                                let v8154 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                let v8155 : string = v8153 + v8097 
                                let v8156 : string = v8155 + v8154 
                                let v8157 : string = $"</PropertyGroup>"
                                let v8158 : string = v8156 + v8097 
                                let v8159 : string = v8158 + v8157 
                                let v8160 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                let v8161 : string = v8159 + v8097 
                                let v8162 : string = v8161 + v8160 
                                let v8163 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                let v8164 : string = v8162 + v8097 
                                let v8165 : string = v8164 + v8163 
                                let v8166 : string = $"</PropertyGroup>"
                                let v8167 : string = v8165 + v8097 
                                let v8168 : string = v8167 + v8166 
                                let v8169 : string = $"<ItemGroup>"
                                let v8170 : string = v8168 + v8097 
                                let v8171 : string = v8170 + v8169 
                                let v8172 : string = $"    {v8075}"
                                let v8173 : string = v8171 + v8097 
                                let v8174 : string = v8173 + v8172 
                                let v8175 : string = $"    <Compile Include=\"{v8067}\" />"
                                let v8176 : string = v8174 + v8097 
                                let v8177 : string = v8176 + v8175 
                                let v8178 : string = $"</ItemGroup>"
                                let v8179 : string = v8177 + v8097 
                                let v8180 : string = v8179 + v8178 
                                let v8181 : string = $"<ItemGroup>"
                                let v8182 : string = v8180 + v8097 
                                let v8183 : string = v8182 + v8181 
                                let v8184 : string = $"    {v8089}"
                                let v8185 : string = v8183 + v8097 
                                let v8186 : string = v8185 + v8184 
                                let v8187 : string = $"</ItemGroup>"
                                let v8188 : string = v8186 + v8097 
                                let v8189 : string = v8188 + v8187 
                                let v8190 : string = $"</Project>"
                                let v8191 : string = v8189 + v8097 
                                let v8192 : string = v8191 + v8190 
                                method25(v8094, v8192)
                                let v8193 : string = "../../.."
                                let v8194 : string = method15(v8063, v8193)
                                let v8195 : string = "Cargo.toml"
                                let v8196 : string = method15(v8194, v8195)
                                let v8197 : bool = method27(v8196)
                                let v8198 : bool = v8197 = false
                                if v8198 then
                                    let v8199 : System.DateTime = System.DateTime.Now
                                    let v8202 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v8203 : System.Guid = v8202 ()
                                    let v8206 : System.Guid = method97(v8203, v8199)
                                    let v8207 : (System.Guid -> string) = _.ToString()
                                    let v8208 : string = v8207 v8206
                                    let v8211 : string = $"[package]"
                                    let v8212 : string = $"name = \"spiral_builder_{v8208}\""
                                    let v8213 : string = v8211 + v8097 
                                    let v8214 : string = v8213 + v8212 
                                    let v8215 : string = $"version = \"0.0.1\""
                                    let v8216 : string = v8214 + v8097 
                                    let v8217 : string = v8216 + v8215 
                                    let v8218 : string = $"edition = \"2021\""
                                    let v8219 : string = v8217 + v8097 
                                    let v8220 : string = v8219 + v8218 
                                    let v8221 : string = $""
                                    let v8222 : string = v8220 + v8097 
                                    let v8223 : string = v8222 + v8221 
                                    let v8224 : string = $"[[bin]]"
                                    let v8225 : string = v8223 + v8097 
                                    let v8226 : string = v8225 + v8224 
                                    let v8227 : string = $"name = \"spiral_builder_{v8208}\""
                                    let v8228 : string = v8226 + v8097 
                                    let v8229 : string = v8228 + v8227 
                                    let v8230 : string = $"path = \"spiral_builder.rs\""
                                    let v8231 : string = v8229 + v8097 
                                    let v8232 : string = v8231 + v8230 
                                    let v8233 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v8234 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v8196, v8232) v8234 
                                    let _v8233 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v8233 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v8233 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v8233 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v8233 = () 
                                    #endif
#else
                                    let v8235 : string = method39(v8232)
                                    System.IO.File.WriteAllText (v8196, v8235)
                                    let _v8233 = () 
                                    #endif
                                    _v8233 
                                    ()
                                let v8236 : string = method15(v8063, v8195)
                                let v8237 : bool = method27(v8236)
                                let v8238 : bool = v8237 = false
                                if v8238 then
                                    let v8239 : System.DateTime = System.DateTime.Now
                                    let v8242 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v8243 : System.Guid = v8242 ()
                                    let v8246 : System.Guid = method97(v8243, v8239)
                                    let v8247 : (System.Guid -> string) = _.ToString()
                                    let v8248 : string = v8247 v8246
                                    let v8251 : string = $"[package]"
                                    let v8252 : string = $"name = \"spiral_builder_{v8248}\""
                                    let v8253 : string = v8251 + v8097 
                                    let v8254 : string = v8253 + v8252 
                                    let v8255 : string = $"version = \"0.0.1\""
                                    let v8256 : string = v8254 + v8097 
                                    let v8257 : string = v8256 + v8255 
                                    let v8258 : string = $"edition = \"2021\""
                                    let v8259 : string = v8257 + v8097 
                                    let v8260 : string = v8259 + v8258 
                                    let v8261 : string = $""
                                    let v8262 : string = v8260 + v8097 
                                    let v8263 : string = v8262 + v8261 
                                    let v8264 : string = $"[[bin]]"
                                    let v8265 : string = v8263 + v8097 
                                    let v8266 : string = v8265 + v8264 
                                    let v8267 : string = $"name = \"spiral_builder_{v8248}\""
                                    let v8268 : string = v8266 + v8097 
                                    let v8269 : string = v8268 + v8267 
                                    let v8270 : string = $"path = \"spiral_builder.rs\""
                                    let v8271 : string = v8269 + v8097 
                                    let v8272 : string = v8271 + v8270 
                                    let v8273 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v8274 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v8236, v8272) v8274 
                                    let _v8273 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v8273 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v8273 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v8273 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v8273 = () 
                                    #endif
#else
                                    let v8275 : string = method39(v8272)
                                    System.IO.File.WriteAllText (v8236, v8275)
                                    let _v8273 = () 
                                    #endif
                                    _v8273 
                                    ()
                                let v8276 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v8277 : string = method15(v8054, v8276)
                                let v8278 : string = "fable_modules/fable-library-rust"
                                let v8279 : string = method15(v8063, v8278)
                                method101(v8277, v8279)
                                let struct (v8280 : int32, v8281 : string) = method102(v6361, v8063, v6443, v8094, v8040)
                                let v8282 : bool = v8280 <> 0 
                                let struct (v13715 : US1, v13716 : US1, v13717 : US1) =
                                    if v8282 then
                                        let v8285 : unit = ()
                                        let v8286 : (unit -> unit) = closure106(v8281, v8280)
                                        let v8287 : unit = (fun () -> v8286 (); v8285) ()
                                        let v9051 : US1 = US1_0(v6443)
                                        let v9052 : US1 = US1_1
                                        let v9053 : US1 = US1_0(v8281)
                                        struct (v9051, v9052, v9053)
                                    else
                                        let v9054 : bool =
                                            match v6361 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v9081 : Vec<std_string_String> =
                                            if v9054 then
                                                v6344
                                            else
                                                let v9055 : (std_string_String -> bool) = method105()
                                                let v9056 : Vec<std_string_String> = method106(v6344)
                                                let v9057 : string = "v9056.into_iter().filter(|x| v9055(x.clone().clone())).collect::<Vec<_>>()"
                                                let v9058 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v9057 
                                                let v9059 : string = "$0.len()"
                                                let v9060 : unativeint = Fable.Core.RustInterop.emitRustExpr v9058 v9059 
                                                let v9061 : (unativeint -> int32) = int32
                                                let v9062 : int32 = v9061 v9060
                                                let v9063 : bool = v9062 > 0
                                                if v9063 then
                                                    v6344
                                                else
                                                    let v9064 : string = "&*$0"
                                                    let v9065 : string = "near-sdk"
                                                    let v9066 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9065 v9064 
                                                    let v9067 : string = "String::from($0)"
                                                    let v9068 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9066 v9067 
                                                    let v9069 : (std_string_String []) = [|v9068|]
                                                    let v9070 : string = "$0.to_vec()"
                                                    let v9071 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v9069 v9070 
                                                    let v9072 : Vec<std_string_String> = method107(v9071)
                                                    let v9073 : Vec<std_string_String> = method108(v6344)
                                                    let v9074 : string = "true; let mut v9073 = v9073"
                                                    let v9075 : bool = Fable.Core.RustInterop.emitRustExpr () v9074 
                                                    let v9076 : string = "true; v9073.extend(v9072)"
                                                    let v9077 : bool = Fable.Core.RustInterop.emitRustExpr () v9076 
                                                    let v9078 : string = "v9073"
                                                    let v9079 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v9078 
                                                    v9079
                                        let v9082 : string = "true; let _result : Vec<_> = v9081.into_iter().map(|x| { //"
                                        let v9083 : bool = Fable.Core.RustInterop.emitRustExpr () v9082 
                                        let v9084 : string = "x"
                                        let v9085 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v9084 
                                        let v9086 : string = "fable_library_rust::String_::fromString($0)"
                                        let v9087 : string = Fable.Core.RustInterop.emitRustExpr v9085 v9086 
                                        let v9088 : string = "="
                                        let v9089 : bool = v9087.Contains v9088 
                                        let v9100 : string =
                                            if v9089 then
                                                v9087
                                            else
                                                let v9092 : string = "]"
                                                let v9093 : bool = v9087.EndsWith v9092 
                                                if v9093 then
                                                    let v9094 : string = $"={{version='*',features=["
                                                    let v9095 : string = "["
                                                    let v9096 : string = v9087.Replace (v9095, v9094)
                                                    let v9097 : string = $"{v9096}}}"
                                                    v9097
                                                else
                                                    let v9098 : string = $"{v9087}='*'"
                                                    v9098
                                        let v9101 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v9102 : bool = Fable.Core.RustInterop.emitRustExpr v9100 v9101 
                                        let v9103 : string = "_result"
                                        let v9104 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v9103 
                                        let v9105 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v9106 : (string []) = Fable.Core.RustInterop.emitRustExpr v9104 v9105 
                                        let v9107 : string seq = seq { for i = 0 to v9106.Length - 1 do yield v9106.[i] }
                                        let v9110 : (string -> (string seq -> string)) = String.concat
                                        let v9111 : (string seq -> string) = v9110 v8097
                                        let v9112 : string = v9111 v9107
                                        let v9115 : string = $"[package]"
                                        let v9116 : string = $"name = \"spiral_builder_{v6532}\""
                                        let v9117 : string = v9115 + v8097 
                                        let v9118 : string = v9117 + v9116 
                                        let v9119 : string = $"version = \"0.0.1\""
                                        let v9120 : string = v9118 + v8097 
                                        let v9121 : string = v9120 + v9119 
                                        let v9122 : string = $"edition = \"2021\""
                                        let v9123 : string = v9121 + v8097 
                                        let v9124 : string = v9123 + v9122 
                                        let v9125 : string = $""
                                        let v9126 : string = v9124 + v8097 
                                        let v9127 : string = v9126 + v9125 
                                        let v9128 : string = $"[dependencies]"
                                        let v9129 : string = v9127 + v8097 
                                        let v9130 : string = v9129 + v9128 
                                        let v9131 : bool =
                                            match v6361 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v9134 : string =
                                            if v9131 then
                                                let v9132 : string = $"fable_library_rust = {{ workspace = true, features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"] }}"
                                                v9132
                                            else
                                                let v9133 : string = $"fable_library_rust = {{ workspace = true }}"
                                                v9133
                                        let v9135 : string = v9130 + v8097 
                                        let v9136 : string = v9135 + v9134 
                                        let v9137 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v9138 : string = v9136 + v8097 
                                        let v9139 : string = v9138 + v9137 
                                        let v9140 : string = $"{v9112}"
                                        let v9141 : string = v9139 + v8097 
                                        let v9142 : string = v9141 + v9140 
                                        let v9143 : string = $""
                                        let v9144 : string = v9142 + v8097 
                                        let v9145 : string = v9144 + v9143 
                                        let v9146 : bool =
                                            match v6361 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v9155 : string =
                                            if v9146 then
                                                let v9147 : string = $"[[bin]]"
                                                let v9148 : string = $"name = \"spiral_builder_{v6532}\""
                                                let v9149 : string = v9147 + v8097 
                                                let v9150 : string = v9149 + v9148 
                                                v9150
                                            else
                                                let v9151 : string = $"[lib]"
                                                let v9152 : string = $"crate-type = [\"cdylib\"]"
                                                let v9153 : string = v9151 + v8097 
                                                let v9154 : string = v9153 + v9152 
                                                v9154
                                        let v9156 : string = v9145 + v8097 
                                        let v9157 : string = v9156 + v9155 
                                        let v9158 : string = $"path = \"spiral_builder.rs\" "
                                        let v9159 : string = v9157 + v8097 
                                        let v9160 : string = v9159 + v9158 
                                        let v9161 : string = method85(v8054)
                                        let v9162 : string = $"cargo-features = [\"profile-rustflags\"]"
                                        let v9163 : string = $""
                                        let v9164 : string = v9162 + v8097 
                                        let v9165 : string = v9164 + v9163 
                                        let v9166 : string = $"[workspace]"
                                        let v9167 : string = v9165 + v8097 
                                        let v9168 : string = v9167 + v9166 
                                        let v9169 : string = $"resolver = \"2\""
                                        let v9170 : string = v9168 + v8097 
                                        let v9171 : string = v9170 + v9169 
                                        let v9172 : string = $"members = [\"packages/Rust/*\"]"
                                        let v9173 : string = v9171 + v8097 
                                        let v9174 : string = v9173 + v9172 
                                        let v9175 : string = $""
                                        let v9176 : string = v9174 + v8097 
                                        let v9177 : string = v9176 + v9175 
                                        let v9178 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v9179 : string = v9177 + v8097 
                                        let v9180 : string = v9179 + v9178 
                                        let v9181 : string = $"path = \"{v9161}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v9182 : string = v9180 + v8097 
                                        let v9183 : string = v9182 + v9181 
                                        let v9184 : string = $"default-features = false"
                                        let v9185 : string = v9183 + v8097 
                                        let v9186 : string = v9185 + v9184 
                                        let v9187 : string = $"features = []"
                                        let v9188 : string = v9186 + v8097 
                                        let v9189 : string = v9188 + v9187 
                                        let v9190 : string = $""
                                        let v9191 : string = v9189 + v8097 
                                        let v9192 : string = v9191 + v9190 
                                        let v9193 : string = $"[workspace.dependencies]"
                                        let v9194 : string = v9192 + v8097 
                                        let v9195 : string = v9194 + v9193 
                                        let v9196 : string = $"inline_colorization = \"~0.1\""
                                        let v9197 : string = v9195 + v8097 
                                        let v9198 : string = v9197 + v9196 
                                        let v9199 : string = $""
                                        let v9200 : string = v9198 + v8097 
                                        let v9201 : string = v9200 + v9199 
                                        let v9202 : string = $"[profile.release]"
                                        let v9203 : string = v9201 + v8097 
                                        let v9204 : string = v9203 + v9202 
                                        let v9205 : string = $"codegen-units = 1"
                                        let v9206 : string = v9204 + v8097 
                                        let v9207 : string = v9206 + v9205 
                                        let v9208 : string = $"opt-level = \"z\""
                                        let v9209 : string = v9207 + v8097 
                                        let v9210 : string = v9209 + v9208 
                                        let v9211 : string = $"lto = true"
                                        let v9212 : string = v9210 + v8097 
                                        let v9213 : string = v9212 + v9211 
                                        let v9214 : string = $"debug = false"
                                        let v9215 : string = v9213 + v8097 
                                        let v9216 : string = v9215 + v9214 
                                        let v9217 : string = $"panic = \"abort\""
                                        let v9218 : string = v9216 + v8097 
                                        let v9219 : string = v9218 + v9217 
                                        let v9220 : string = $"overflow-checks = true"
                                        let v9221 : string = v9219 + v8097 
                                        let v9222 : string = v9221 + v9220 
                                        let v9223 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                        let v9224 : string = v9222 + v8097 
                                        let v9225 : string = v9224 + v9223 
                                        method25(v8236, v9160)
                                        method25(v8196, v9225)
                                        let v9226 : string = "src/Range.rs"
                                        let v9227 : string = method15(v8279, v9226)
                                        let v9228 : bool = method27(v9227)
                                        if v9228 then
                                            let v9229 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v9230 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v9231 : string = "std::fs::read(&*$0)"
                                            let v9232 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v9227 v9231 
                                            let v9233 : string = "$0.unwrap()"
                                            let v9234 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9232 v9233 
                                            let _v9230 = v9234 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v9235 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v9230 = v9235 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v9238 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v9230 = v9238 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v9241 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v9230 = v9241 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v9244 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v9230 = v9244 
                                            #endif
#else
                                            let v9247 : (uint8 []) = v9227 |> System.IO.File.ReadAllBytes
                                            let v9248 : string = "$0.to_vec()"
                                            let v9249 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9247 v9248 
                                            let _v9230 = v9249 
                                            #endif
                                            let v9250 : Vec<uint8> = _v9230 
                                            let v9255 : Vec<uint8> = method14(v9250)
                                            let v9256 : string = "std::string::String::from_utf8($0)"
                                            let v9257 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v9255 v9256 
                                            let v9258 : string = "$0.unwrap()"
                                            let v9259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9257 v9258 
                                            let v9260 : string = "fable_library_rust::String_::fromString($0)"
                                            let v9261 : string = Fable.Core.RustInterop.emitRustExpr v9259 v9260 
                                            let _v9229 = v9261 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v9262 : string = null |> unbox<string>
                                            let _v9229 = v9262 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v9265 : string = null |> unbox<string>
                                            let _v9229 = v9265 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v9268 : string = null |> unbox<string>
                                            let _v9229 = v9268 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v9271 : string = null |> unbox<string>
                                            let _v9229 = v9271 
                                            #endif
#else
                                            let v9274 : string = v9227 |> System.IO.File.ReadAllText
                                            let _v9229 = v9274 
                                            #endif
                                            let v9275 : string = _v9229 
                                            let v9280 : string = "use crate::String_::fromCharCode;"
                                            let v9281 : string = "use crate::String_::fromChar;"
                                            let v9282 : string = v9275.Replace (v9280, v9281)
                                            let v9283 : string = "fromCharCode(c)"
                                            let v9284 : string = "std::char::from_u32(c).unwrap()"
                                            let v9285 : string = v9282.Replace (v9283, v9284)
                                            method25(v9227, v9285)
                                        let v9286 : uint8 = 1uy
                                        let struct (v9287 : int32, v9288 : string) = method109(v8040, v8236, v9286)
                                        let v9289 : bool = v9287 <> 0 
                                        if v9289 then
                                            let v9292 : unit = ()
                                            let v9293 : (unit -> unit) = closure112(v9288, v9287)
                                            let v9294 : unit = (fun () -> v9293 (); v9292) ()
                                            ()
                                        let v10058 : string = $"{v8057}.{v6443}"
                                        let v10059 : string = method15(v8063, v10058)
                                        let v10060 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v10061 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v10062 : string = "std::fs::read(&*$0)"
                                        let v10063 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v10059 v10062 
                                        let v10064 : string = "$0.unwrap()"
                                        let v10065 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10063 v10064 
                                        let _v10061 = v10065 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v10066 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v10061 = v10066 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v10069 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v10061 = v10069 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v10072 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v10061 = v10072 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v10075 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v10061 = v10075 
                                        #endif
#else
                                        let v10078 : (uint8 []) = v10059 |> System.IO.File.ReadAllBytes
                                        let v10079 : string = "$0.to_vec()"
                                        let v10080 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10078 v10079 
                                        let _v10061 = v10080 
                                        #endif
                                        let v10081 : Vec<uint8> = _v10061 
                                        let v10086 : Vec<uint8> = method14(v10081)
                                        let v10087 : string = "std::string::String::from_utf8($0)"
                                        let v10088 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v10086 v10087 
                                        let v10089 : string = "$0.unwrap()"
                                        let v10090 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10088 v10089 
                                        let v10091 : string = "fable_library_rust::String_::fromString($0)"
                                        let v10092 : string = Fable.Core.RustInterop.emitRustExpr v10090 v10091 
                                        let _v10060 = v10092 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v10093 : string = null |> unbox<string>
                                        let _v10060 = v10093 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v10096 : string = null |> unbox<string>
                                        let _v10060 = v10096 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v10099 : string = null |> unbox<string>
                                        let _v10060 = v10099 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v10102 : string = null |> unbox<string>
                                        let _v10060 = v10102 
                                        #endif
#else
                                        let v10105 : string = v10059 |> System.IO.File.ReadAllText
                                        let _v10060 = v10105 
                                        #endif
                                        let v10106 : string = _v10060 
                                        let v10111 : string = "\"{\".into()"
                                        let v10112 : string = Fable.Core.RustInterop.emitRustExpr () v10111 
                                        let v10113 : string = "pub fn main() -> Result<(), String> "
                                        let v10114 : string = v10113 + v10112 
                                        let v10115 : bool =
                                            match v6361 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v10148 : string =
                                            if v10115 then
                                                let v10116 : string = ""
                                                v10116
                                            else
                                                let v10117 : string = $"#[near_sdk::near_bindgen]"
                                                let v10118 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                let v10119 : string = v10117 + v8097 
                                                let v10120 : string = v10119 + v10118 
                                                let v10121 : string = $"pub struct MainState {{"
                                                let v10122 : string = v10120 + v8097 
                                                let v10123 : string = v10122 + v10121 
                                                let v10124 : string = $"}}"
                                                let v10125 : string = v10123 + v8097 
                                                let v10126 : string = v10125 + v10124 
                                                let v10127 : string = $""
                                                let v10128 : string = v10126 + v8097 
                                                let v10129 : string = v10128 + v10127 
                                                let v10130 : string = $"#[near_sdk::near_bindgen]"
                                                let v10131 : string = v10129 + v8097 
                                                let v10132 : string = v10131 + v10130 
                                                let v10133 : string = $"impl MainState {{"
                                                let v10134 : string = v10132 + v8097 
                                                let v10135 : string = v10134 + v10133 
                                                let v10136 : string = $"    pub fn state_main() {{"
                                                let v10137 : string = v10135 + v8097 
                                                let v10138 : string = v10137 + v10136 
                                                let v10139 : string = $"        Spiral_builder::method0();"
                                                let v10140 : string = v10138 + v8097 
                                                let v10141 : string = v10140 + v10139 
                                                let v10142 : string = $"    }}"
                                                let v10143 : string = v10141 + v8097 
                                                let v10144 : string = v10143 + v10142 
                                                let v10145 : string = $"}}"
                                                let v10146 : string = v10144 + v8097 
                                                let v10147 : string = v10146 + v10145 
                                                v10147
                                        let v10149 : string = $"{v10114} Ok(()) }}"
                                        let v10150 : string = v10148 + v8097 
                                        let v10151 : string = v10150 + v10149 
                                        let v10152 : bool = v10106.Contains v10114 
                                        let v10244 : string =
                                            if v10152 then
                                                v10106
                                            else
                                                let v10155 : string = "\";\".into()"
                                                let v10156 : string = Fable.Core.RustInterop.emitRustExpr () v10155 
                                                let v10157 : string = "),)"
                                                let v10158 : string = v10157 + v10156 
                                                let v10159 : string = "));"
                                                let v10160 : string = v10106.Replace (v10158, v10159)
                                                let v10161 : string = "\";\".into()"
                                                let v10162 : string = Fable.Core.RustInterop.emitRustExpr () v10161 
                                                let v10163 : string = "},)"
                                                let v10164 : string = v10163 + v10162 
                                                let v10165 : string = "});"
                                                let v10166 : string = v10160.Replace (v10164, v10165)
                                                let v10167 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v10168 : string = " defaultOf::<()>();"
                                                let v10169 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v10170 : string = $"regex::Regex::new(&$0)"
                                                let v10171 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v10167 v10170 
                                                let v10172 : string = "$0.unwrap()"
                                                let v10173 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v10171 v10172 
                                                let v10174 : string = method86(v10166)
                                                let v10175 : string = $"$0.replace_all(&*$1, &*$2)"
                                                let v10176 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v10173, v10174, v10168) v10175 
                                                let v10177 : string = "String::from($0)"
                                                let v10178 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10176 v10177 
                                                let v10179 : string = "fable_library_rust::String_::fromString($0)"
                                                let v10180 : string = Fable.Core.RustInterop.emitRustExpr v10178 v10179 
                                                let _v10169 = v10180 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v10181 : string = null |> unbox<string>
                                                let _v10169 = v10181 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v10184 : string = null |> unbox<string>
                                                let _v10169 = v10184 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v10187 : string = null |> unbox<string>
                                                let _v10169 = v10187 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v10190 : string = null |> unbox<string>
                                                let _v10169 = v10190 
                                                #endif
#else
                                                let v10193 : string = System.Text.RegularExpressions.Regex.Replace (v10166, v10167, v10168)
                                                let _v10169 = v10193 
                                                #endif
                                                let v10194 : string = _v10169 
                                                let v10199 : string = "::Slice'_"
                                                let v10200 : string = "::Slice__"
                                                let v10201 : string = v10194.Replace (v10199, v10200)
                                                let v10202 : string = "\",\".into()"
                                                let v10203 : string = Fable.Core.RustInterop.emitRustExpr () v10202 
                                                let v10204 : string = "defaultOf()"
                                                let v10205 : string = v10204 + v10203 
                                                let v10206 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v10207 : string = v10201.Replace (v10205, v10206)
                                                let v10208 : string = "\"_.\".into()"
                                                let v10209 : string = Fable.Core.RustInterop.emitRustExpr () v10208 
                                                let v10210 : string = "_self"
                                                let v10211 : string = v10210 + v10209 
                                                let v10212 : string = "self."
                                                let v10213 : string = v10207.Replace (v10211, v10212)
                                                let v10214 : string = "\"h\".into()"
                                                let v10215 : string = Fable.Core.RustInterop.emitRustExpr () v10214 
                                                let v10216 : string = "get_or_insert_wit"
                                                let v10217 : string = v10216 + v10215 
                                                let v10218 : string = "get_or_init"
                                                let v10219 : string = v10213.Replace (v10217, v10218)
                                                let v10220 : string = "\";\".into()"
                                                let v10221 : string = Fable.Core.RustInterop.emitRustExpr () v10220 
                                                let v10222 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v10223 : string = v10222 + v10221 
                                                let v10224 : string = "type ConcurrentStack_1<T> = T;"
                                                let v10225 : string = v10219.Replace (v10223, v10224)
                                                let v10226 : string = "\";\".into()"
                                                let v10227 : string = Fable.Core.RustInterop.emitRustExpr () v10226 
                                                let v10228 : string = "use fable_library_rust::System::Threading::CancellationToken"
                                                let v10229 : string = v10228 + v10227 
                                                let v10230 : string = "type CancellationToken = ();"
                                                let v10231 : string = v10225.Replace (v10229, v10230)
                                                let v10232 : string = "\";\".into()"
                                                let v10233 : string = Fable.Core.RustInterop.emitRustExpr () v10232 
                                                let v10234 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v10235 : string = v10234 + v10233 
                                                let v10236 : string = "type TimeZoneInfo = i64;"
                                                let v10237 : string = v10231.Replace (v10235, v10236)
                                                let v10238 : string = "\";\".into()"
                                                let v10239 : string = Fable.Core.RustInterop.emitRustExpr () v10238 
                                                let v10240 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v10241 : string = v10240 + v10239 
                                                let v10242 : string = "type TaskCanceledException = ();"
                                                let v10243 : string = v10237.Replace (v10241, v10242)
                                                v10243
                                        let v10245 : bool = v10152 = false
                                        if v10245 then
                                            let v10246 : string = $"{v10244}\n\n{v10151}\n"
                                            method25(v10059, v10246)
                                        let v10247 : bool =
                                            match v6361 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v10248 : bool = v10247 <> true
                                        let v10251 : string =
                                            if v10248 then
                                                let v10249 : string = $"cargo build --release --target wasm32-unknown-unknown --manifest-path \"{v8236}\""
                                                v10249
                                            else
                                                let v10250 : string = $"cargo run --manifest-path \"{v8236}\""
                                                v10250
                                        let v10252 : bool =
                                            match v6361 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v10253 : bool = v10252 <> true
                                        let v10262 : (struct (string * string) []) =
                                            if v10253 then
                                                [||]
                                            else
                                                let v10255 : string = "TRACE_LEVEL"
                                                let v10256 : string = "Verbose"
                                                let v10257 : string = "RUSTC_WRAPPER"
                                                let v10258 : string = "sccache"
                                                let v10259 : string = "RUSTFLAGS"
                                                let v10260 : string = "-C prefer-dynamic"
                                                [|struct (v10255, v10256); struct (v10257, v10258); struct (v10259, v10260)|]
                                        let v10263 : System.Threading.CancellationToken option = None
                                        let v10264 : (struct (string * string) []) = [||]
                                        let v10265 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v10266 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v10267 : string option = None
                                        let v10273 : Result<string, string> =
                                            match v8040 with
                                            | US12_1(v10270) -> (* Error *)
                                                let v10271 : Result<string, string> = Error v10270 
                                                v10271
                                            | US12_0(v10268) -> (* Ok *)
                                                let v10269 : Result<string, string> = Ok v10268 
                                                v10269
                                        let v10274 : string = "v10273.ok()"
                                        let v10275 : string option = Fable.Core.RustInterop.emitRustExpr () v10274 
                                        let v10276 : bool = true
                                        let struct (v10277 : int32, v10278 : string) = method40(v10251, v10263, v10262, v10265, v10266, v10276, v10275)
                                        let v10279 : bool =
                                            match v6361 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let struct (v12896 : US1, v12897 : US1, v12898 : US1) =
                                            if v10279 then
                                                let v10280 : int32 = v10262.Length
                                                let v10281 : (string []) = Array.zeroCreate<string> (v10280)
                                                let v10282 : Mut5 = {l0 = 0} : Mut5
                                                while method43(v10280, v10282) do
                                                    let v10284 : int32 = v10282.l0
                                                    let struct (v10285 : string, v10286 : string) = v10262.[int v10284]
                                                    let v10287 : string = $"$env:{v10285}=''{v10286}''"
                                                    v10281.[int v10284] <- v10287
                                                    let v10288 : int32 = v10284 + 1
                                                    v10282.l0 <- v10288
                                                    ()
                                                let v10289 : string seq = v10281 |> Seq.ofArray
                                                let v10292 : (string -> (string seq -> string)) = String.concat
                                                let v10293 : string = ";"
                                                let v10294 : (string seq -> string) = v10292 v10293
                                                let v10295 : string = v10294 v10289
                                                let v10298 : (string []) = [|v10295; v10251|]
                                                let v10299 : string seq = v10298 |> Seq.ofArray
                                                let v10302 : (string -> (string seq -> string)) = String.concat
                                                let v10303 : (string seq -> string) = v10302 v10293
                                                let v10304 : string = v10303 v10299
                                                let v10307 : string = $"pwsh -c '{v10304}'"
                                                let v10308 : bool = v10277 = 0
                                                let struct (v11164 : US1, v11165 : US1, v11166 : US1) =
                                                    if v10308 then
                                                        let v10309 : (string -> US1) = closure85()
                                                        let v10310 : (unit -> string) = closure114(v10278)
                                                        let v10311 : (exn -> US1) = closure116(v10059, v10278, v10307)
                                                        let v10312 : US1 = US1_1
                                                        let result = ref v10312
                                                        try
                                                            result.Value <- v10310 () |> v10309 
                                                        with ex ->
                                                            result.Value <- v10311 ex 
                                                        let v10313 : US1 = result.Value
                                                        let v10323 : string option =
                                                            match v10313 with
                                                            | US1_1 -> (* None *)
                                                                let v10321 : string option = None
                                                                v10321
                                                            | US1_0(v10317) -> (* Some *)
                                                                let v10318 : string option = Some v10317 
                                                                v10318
                                                        let v10324 : string = "$0.unwrap()"
                                                        let v10325 : string = Fable.Core.RustInterop.emitRustExpr v10323 v10324 
                                                        let v10326 : US1 = US1_0(v6443)
                                                        let v10327 : US1 = US1_0(v10244)
                                                        let v10328 : US1 = US1_0(v10325)
                                                        struct (v10326, v10327, v10328)
                                                    else
                                                        let v10329 : unit = ()
                                                        let v10330 : (unit -> unit) = closure119(v10059, v10278, v10277, v10307)
                                                        let v10331 : unit = (fun () -> v10330 (); v10329) ()
                                                        let v11161 : US1 = US1_0(v6443)
                                                        let v11162 : US1 = US1_1
                                                        let v11163 : US1 = US1_1
                                                        struct (v11161, v11162, v11163)
                                                struct (v11164, v11165, v11166)
                                            else
                                                let v11167 : string = $"target/spiral_builder/{v8057}/target/wasm32-unknown-unknown/release/spiral_builder_{v6532}.wasm"
                                                let v11168 : string = $"'workspace/target/release/spiral_wasm -t Debug -w {v11167}'"
                                                let v11169 : string = "scripts/invoke-block.ps1"
                                                let v11170 : string = $"pwsh -c \"pwsh {v11169} {v11168} -Linux -EnvironmentVariables NEAR_RPC_TIMEOUT_SECS=100\""
                                                let v11171 : bool = v10277 = 0
                                                let struct (v12893 : US1, v12894 : US1, v12895 : US1) =
                                                    if v11171 then
                                                        let v11172 : System.Threading.CancellationToken option = None
                                                        let v11173 : (struct (string * string) []) = [||]
                                                        let v11174 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v11175 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v11176 : string option = None
                                                        let v11177 : string option = Some v8054 
                                                        let v11180 : bool = true
                                                        let struct (v11181 : int32, v11182 : string) = method40(v11170, v11172, v11173, v11174, v11175, v11180, v11177)
                                                        let v11183 : bool = v11181 = 0
                                                        let struct (v12022 : US1, v12023 : US1, v12024 : US1) =
                                                            if v11183 then
                                                                let v11184 : US1 = US1_0(v6443)
                                                                let v11185 : US1 = US1_0(v10244)
                                                                let v11186 : US1 = US1_0(v11182)
                                                                struct (v11184, v11185, v11186)
                                                            else
                                                                let v11187 : unit = ()
                                                                let v11188 : (unit -> unit) = closure121(v10059, v10278, v11182, v11181)
                                                                let v11189 : unit = (fun () -> v11188 (); v11187) ()
                                                                let v12019 : US1 = US1_0(v6443)
                                                                let v12020 : US1 = US1_1
                                                                let v12021 : US1 = US1_1
                                                                struct (v12019, v12020, v12021)
                                                        struct (v12022, v12023, v12024)
                                                    else
                                                        let v12025 : unit = ()
                                                        let v12026 : (unit -> unit) = closure123(v10059, v10278, v10277, v11167, v11170)
                                                        let v12027 : unit = (fun () -> v12026 (); v12025) ()
                                                        let v12890 : US1 = US1_0(v6443)
                                                        let v12891 : US1 = US1_1
                                                        let v12892 : US1 = US1_1
                                                        struct (v12890, v12891, v12892)
                                                struct (v12893, v12894, v12895)
                                        let v12899 : bool =
                                            match v6361 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v12900 : bool = v12899 <> true
                                        let v12903 : string =
                                            if v12900 then
                                                let v12901 : string = "wasm32-unknown-unknown/release"
                                                v12901
                                            else
                                                let v12902 : string = "debug"
                                                v12902
                                        let v12904 : string = ""
                                        let v12905 : string = $"target/{v12903}/spiral_builder_{v6532}{v12904}"
                                        let v12906 : string = method15(v8194, v12905)
                                        let v12907 : string = ".wasm"
                                        let v12908 : string = $"target/{v12903}/spiral_builder_{v6532}{v12907}"
                                        let v12909 : string = method15(v8194, v12908)
                                        let v12910 : string = ".pdb"
                                        let v12911 : string = $"target/{v12903}/spiral_builder_{v6532}{v12910}"
                                        let v12912 : string = method15(v8194, v12911)
                                        let v12913 : string = ".exe"
                                        let v12914 : string = $"target/{v12903}/spiral_builder_{v6532}{v12913}"
                                        let v12915 : string = method15(v8194, v12914)
                                        let v12916 : string = ".d"
                                        let v12917 : string = $"target/{v12903}/spiral_builder_{v6532}{v12916}"
                                        let v12918 : string = method15(v8194, v12917)
                                        let v12919 : bool = method27(v12906)
                                        let v12920 : bool = method27(v12909)
                                        let v12921 : bool = method27(v12912)
                                        let v12922 : bool = method27(v12915)
                                        let v12923 : bool = method27(v12918)
                                        let v12924 : unit = ()
                                        let v12925 : (unit -> unit) = closure125(v10059, v12918, v12923, v12915, v12922, v12912, v12921, v12909, v12920, v12906, v12919)
                                        let v12926 : unit = (fun () -> v12925 (); v12924) ()
                                        let v13706 : UH4 =
                                            if v12919 then
                                                let v13703 : UH4 = UH4_0
                                                UH4_1(v12906, v12919, v13703)
                                            else
                                                UH4_0
                                        let v13708 : UH4 =
                                            if v12920 then
                                                UH4_1(v12909, v12920, v13706)
                                            else
                                                v13706
                                        let v13710 : UH4 =
                                            if v12921 then
                                                UH4_1(v12912, v12921, v13708)
                                            else
                                                v13708
                                        let v13712 : UH4 =
                                            if v12922 then
                                                UH4_1(v12915, v12922, v13710)
                                            else
                                                v13710
                                        let v13714 : UH4 =
                                            if v12923 then
                                                UH4_1(v12918, v12923, v13712)
                                            else
                                                v13712
                                        method111(v13714)
                                        struct (v12896, v12897, v12898)
                                struct (v13715, v13716, v13717)
                            else
                                let v13718 : string = "fable_library_rust::String_::fromString($0)"
                                let v13719 : string = Fable.Core.RustInterop.emitRustExpr v33 v13718 
                                let v13720 : bool = v13719 = "typescript"
                                let struct (v24109 : US1, v24110 : US1, v24111 : US1) =
                                    if v13720 then
                                        let v13721 : string = method79()
                                        let v13722 : string = "&*$0"
                                        let v13723 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13721 v13722 
                                        let v13724 : string = "clap::ArgMatches::get_one(&$0, v13723).cloned()"
                                        let v13725 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v13724 
                                        let v13726 : US5 option = None
                                        let _v13726 = ref v13726 
                                        let v13727 : US5 option ref = _v13726 
                                        let v13728 : (US5 option -> US5 option ref) = closure17(v13727)
                                        let v13729 : unit = ()
                                        let v13730 : (unit -> unit) = closure18(v13725, v13728)
                                        let v13731 : unit = (fun () -> v13730 (); v13729) ()
                                        let v13734 : US5 option = _v13726.Value 
                                        let v13745 : US5 = US5_1
                                        let v13746 : US5 = v13734 |> Option.defaultValue v13745 
                                        let v13753 : std_string_String =
                                            match v13746 with
                                            | US5_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US5_0(v13750) -> (* Some *)
                                                v13750
                                        let v13754 : string = "fable_library_rust::String_::fromString($0)"
                                        let v13755 : string = Fable.Core.RustInterop.emitRustExpr v13753 v13754 
                                        let v13756 : string = method13()
                                        let v13757 : string = "&*$0"
                                        let v13758 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13756 v13757 
                                        let v13759 : string = "clap::ArgMatches::get_many(&$0, v13758).map(|x| x.cloned().into_iter().collect())"
                                        let v13760 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v13759 
                                        let v13761 : US9 option = None
                                        let _v13761 = ref v13761 
                                        let v13762 : US9 option ref = _v13761 
                                        let v13763 : (US9 option -> US9 option ref) = closure19(v13762)
                                        let v13764 : unit = ()
                                        let v13765 : (unit -> unit) = closure20(v13760, v13763)
                                        let v13766 : unit = (fun () -> v13765 (); v13764) ()
                                        let v13769 : US9 option = _v13761.Value 
                                        let v13780 : US9 = US9_1
                                        let v13781 : US9 = v13769 |> Option.defaultValue v13780 
                                        let v13785 : (std_string_String []) = [||]
                                        let v13786 : string = "$0.to_vec()"
                                        let v13787 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v13785 v13786 
                                        let v13790 : Vec<std_string_String> =
                                            match v13781 with
                                            | US9_1 -> (* None *)
                                                v13787
                                            | US9_0(v13788) -> (* Some *)
                                                v13788
                                        let v13791 : bool =
                                            match v0 with
                                            | US0_0 -> (* Verbose *)
                                                true
                                            | _ ->
                                                false
                                        let v13792 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v13793 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v13794 : string = "std::fs::read(&*$0)"
                                        let v13795 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v13755 v13794 
                                        let v13796 : string = "$0.unwrap()"
                                        let v13797 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v13795 v13796 
                                        let _v13793 = v13797 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v13798 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v13793 = v13798 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v13801 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v13793 = v13801 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v13804 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v13793 = v13804 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v13807 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v13793 = v13807 
                                        #endif
#else
                                        let v13810 : (uint8 []) = v13755 |> System.IO.File.ReadAllBytes
                                        let v13811 : string = "$0.to_vec()"
                                        let v13812 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v13810 v13811 
                                        let _v13793 = v13812 
                                        #endif
                                        let v13813 : Vec<uint8> = _v13793 
                                        let v13818 : Vec<uint8> = method14(v13813)
                                        let v13819 : string = "std::string::String::from_utf8($0)"
                                        let v13820 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v13818 v13819 
                                        let v13821 : string = "$0.unwrap()"
                                        let v13822 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13820 v13821 
                                        let v13823 : string = "fable_library_rust::String_::fromString($0)"
                                        let v13824 : string = Fable.Core.RustInterop.emitRustExpr v13822 v13823 
                                        let _v13792 = v13824 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v13825 : string = null |> unbox<string>
                                        let _v13792 = v13825 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v13828 : string = null |> unbox<string>
                                        let _v13792 = v13828 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v13831 : string = null |> unbox<string>
                                        let _v13792 = v13831 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v13834 : string = null |> unbox<string>
                                        let _v13792 = v13834 
                                        #endif
#else
                                        let v13837 : string = v13755 |> System.IO.File.ReadAllText
                                        let _v13792 = v13837 
                                        #endif
                                        let v13838 : string = _v13792 
                                        let v13843 : string = "ts"
                                        let v13844 : string = $"%A{struct (v13843, v13838)}"
                                        let v13847 : string = method94(v13844)
                                        let v13848 : string = __SOURCE_DIRECTORY__
                                        let v13849 : string = "polyglot"
                                        let v13850 : string = ".devcontainer"
                                        let v13851 : string = method15(v13849, v13850)
                                        let v13852 : US12 = method18(v13851, v13848)
                                        let v14594 : US1 =
                                            match v13852 with
                                            | US12_1(v13855) -> (* Error *)
                                                let v13856 : unit = ()
                                                let v13857 : (unit -> unit) = closure22(v13855)
                                                let v13858 : unit = (fun () -> v13857 (); v13856) ()
                                                US1_1
                                            | US12_0(v13853) -> (* Ok *)
                                                US1_0(v13853)
                                        let v15343 : US1 =
                                            match v14594 with
                                            | US1_1 -> (* None *)
                                                let v14597 : string = method23()
                                                let v14598 : string = method15(v13849, v13850)
                                                let v14599 : US12 = method18(v14598, v14597)
                                                match v14599 with
                                                | US12_1(v14602) -> (* Error *)
                                                    let v14603 : unit = ()
                                                    let v14604 : (unit -> unit) = closure22(v14602)
                                                    let v14605 : unit = (fun () -> v14604 (); v14603) ()
                                                    US1_1
                                                | US12_0(v14600) -> (* Ok *)
                                                    US1_0(v14600)
                                            | US1_0(v14595) -> (* Some *)
                                                US1_0(v14595)
                                        let v15347 : string =
                                            match v15343 with
                                            | US1_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US1_0(v15344) -> (* Some *)
                                                v15344
                                        let v15348 : string = method15(v15347, v13849)
                                        let v15349 : string = method23()
                                        let v15350 : (unit -> string) = v15349.ToLower
                                        let v15351 : string = v15350 ()
                                        let v15354 : (unit -> string) = v15348.ToLower
                                        let v15355 : string = v15354 ()
                                        let v15358 : bool = v15351.StartsWith v15355 
                                        let v15361 : US12 =
                                            if v15358 then
                                                US12_1(v15355)
                                            else
                                                US12_0(v15355)
                                        let v15367 : Result<string, string> =
                                            match v15361 with
                                            | US12_1(v15364) -> (* Error *)
                                                let v15365 : Result<string, string> = Error v15364 
                                                v15365
                                            | US12_0(v15362) -> (* Ok *)
                                                let v15363 : Result<string, string> = Ok v15362 
                                                v15363
                                        let v15368 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                        let v15369 : bool = Fable.Core.RustInterop.emitRustExpr v15367 v15368 
                                        let v15370 : string = "x"
                                        let v15371 : string = Fable.Core.RustInterop.emitRustExpr () v15370 
                                        let v15372 : string = "true; $0 })"
                                        let v15373 : bool = Fable.Core.RustInterop.emitRustExpr v15371 v15372 
                                        let v15374 : string = "_result"
                                        let v15375 : string = Fable.Core.RustInterop.emitRustExpr () v15374 
                                        let v15376 : string = "target/spiral_builder"
                                        let v15377 : string = method15(v15375, v15376)
                                        let v15378 : string = "spiral_builder"
                                        let v15379 : string = method15(v15377, v15378)
                                        let v15380 : string = "packages"
                                        let v15381 : string = method15(v15379, v15380)
                                        let v15382 : string = "TypeScript"
                                        let v15383 : string = method15(v15381, v15382)
                                        let v15384 : string = method15(v15383, v13847)
                                        let v15385 : System.IDisposable = method28(v15384)
                                        let v15386 : string = $"{v15378}.fs"
                                        let v15387 : string = method15(v15384, v15386)
                                        let v15388 : string = method85(v15387)
                                        method25(v15388, v13838)
                                        let v15389 : string list = []
                                        let v15390 : string seq = seq { for i = 0 to v15389.Length - 1 do yield v15389.[i] }
                                        let v15393 : (string -> (string seq -> string)) = String.concat
                                        let v15394 : string = "\\n        "
                                        let v15395 : (string seq -> string) = v15393 v15394
                                        let v15396 : string = v15395 v15390
                                        let v15399 : string = "Fable.Core"
                                        let v15400 : string = $"<PackageReference Include=\"{v15399}\" Version=\"*\" />"
                                        let v15401 : string list = []
                                        let v15402 : string list = v15400 :: v15401 
                                        let v15405 : string seq = seq { for i = 0 to v15402.Length - 1 do yield v15402.[i] }
                                        let v15408 : (string -> (string seq -> string)) = String.concat
                                        let v15409 : (string seq -> string) = v15408 v15394
                                        let v15410 : string = v15409 v15405
                                        let v15413 : string = $"{v15378}.fsproj"
                                        let v15414 : string = method15(v15384, v15413)
                                        let v15415 : string = method85(v15414)
                                        let v15416 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                        let v15417 : string = $"<PropertyGroup>"
                                        let v15418 : string = "\n"
                                        let v15419 : string = v15416 + v15418 
                                        let v15420 : string = v15419 + v15417 
                                        let v15421 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                        let v15422 : string = v15420 + v15418 
                                        let v15423 : string = v15422 + v15421 
                                        let v15424 : string = $"    <LangVersion>preview</LangVersion>"
                                        let v15425 : string = v15423 + v15418 
                                        let v15426 : string = v15425 + v15424 
                                        let v15427 : string = $"    <RollForward>Major</RollForward>"
                                        let v15428 : string = v15426 + v15418 
                                        let v15429 : string = v15428 + v15427 
                                        let v15430 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                        let v15431 : string = v15429 + v15418 
                                        let v15432 : string = v15431 + v15430 
                                        let v15433 : string = $"    <PublishAot>false</PublishAot>"
                                        let v15434 : string = v15432 + v15418 
                                        let v15435 : string = v15434 + v15433 
                                        let v15436 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                        let v15437 : string = v15435 + v15418 
                                        let v15438 : string = v15437 + v15436 
                                        let v15439 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                        let v15440 : string = v15438 + v15418 
                                        let v15441 : string = v15440 + v15439 
                                        let v15442 : string = $"    <SelfContained>true</SelfContained>"
                                        let v15443 : string = v15441 + v15418 
                                        let v15444 : string = v15443 + v15442 
                                        let v15445 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                        let v15446 : string = v15444 + v15418 
                                        let v15447 : string = v15446 + v15445 
                                        let v15448 : string = $"    <OutputType>Exe</OutputType>"
                                        let v15449 : string = v15447 + v15418 
                                        let v15450 : string = v15449 + v15448 
                                        let v15451 : string = $"</PropertyGroup>"
                                        let v15452 : string = v15450 + v15418 
                                        let v15453 : string = v15452 + v15451 
                                        let v15454 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                        let v15455 : string = v15453 + v15418 
                                        let v15456 : string = v15455 + v15454 
                                        let v15457 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                        let v15458 : string = v15456 + v15418 
                                        let v15459 : string = v15458 + v15457 
                                        let v15460 : string = $"</PropertyGroup>"
                                        let v15461 : string = v15459 + v15418 
                                        let v15462 : string = v15461 + v15460 
                                        let v15463 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                        let v15464 : string = v15462 + v15418 
                                        let v15465 : string = v15464 + v15463 
                                        let v15466 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                        let v15467 : string = v15465 + v15418 
                                        let v15468 : string = v15467 + v15466 
                                        let v15469 : string = $"</PropertyGroup>"
                                        let v15470 : string = v15468 + v15418 
                                        let v15471 : string = v15470 + v15469 
                                        let v15472 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                        let v15473 : string = v15471 + v15418 
                                        let v15474 : string = v15473 + v15472 
                                        let v15475 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                        let v15476 : string = v15474 + v15418 
                                        let v15477 : string = v15476 + v15475 
                                        let v15478 : string = $"</PropertyGroup>"
                                        let v15479 : string = v15477 + v15418 
                                        let v15480 : string = v15479 + v15478 
                                        let v15481 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                        let v15482 : string = v15480 + v15418 
                                        let v15483 : string = v15482 + v15481 
                                        let v15484 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                        let v15485 : string = v15483 + v15418 
                                        let v15486 : string = v15485 + v15484 
                                        let v15487 : string = $"</PropertyGroup>"
                                        let v15488 : string = v15486 + v15418 
                                        let v15489 : string = v15488 + v15487 
                                        let v15490 : string = $"<ItemGroup>"
                                        let v15491 : string = v15489 + v15418 
                                        let v15492 : string = v15491 + v15490 
                                        let v15493 : string = $"    {v15396}"
                                        let v15494 : string = v15492 + v15418 
                                        let v15495 : string = v15494 + v15493 
                                        let v15496 : string = $"    <Compile Include=\"{v15388}\" />"
                                        let v15497 : string = v15495 + v15418 
                                        let v15498 : string = v15497 + v15496 
                                        let v15499 : string = $"</ItemGroup>"
                                        let v15500 : string = v15498 + v15418 
                                        let v15501 : string = v15500 + v15499 
                                        let v15502 : string = $"<ItemGroup>"
                                        let v15503 : string = v15501 + v15418 
                                        let v15504 : string = v15503 + v15502 
                                        let v15505 : string = $"    {v15410}"
                                        let v15506 : string = v15504 + v15418 
                                        let v15507 : string = v15506 + v15505 
                                        let v15508 : string = $"</ItemGroup>"
                                        let v15509 : string = v15507 + v15418 
                                        let v15510 : string = v15509 + v15508 
                                        let v15511 : string = $"</Project>"
                                        let v15512 : string = v15510 + v15418 
                                        let v15513 : string = v15512 + v15511 
                                        method25(v15415, v15513)
                                        let v15514 : string = "lib/typescript/fable/fable_modules"
                                        let v15515 : string = method15(v15375, v15514)
                                        let v15516 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v15517 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v15515 v15516 
                                        let v15518 : string = "async_walkdir::WalkDir::filter($0, |x| $1(x))"
                                        let v15519 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure127()
                                        let v15520 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v15517, v15519) v15518 
                                        let v15521 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method116()
                                        let v15522 : string = "tokio_stream::StreamExt::filter_map(v15520, |x| v15521(x))"
                                        let v15523 : _ = Fable.Core.RustInterop.emitRustExpr () v15522 
                                        let v15524 : string = "Box::pin(tokio_stream::StreamExt::collect(v15523))"
                                        let v15525 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v15524 
                                        let v15526 : string = "v15525.await"
                                        let v15527 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v15526 
                                        let v15528 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                        let v15529 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v15527 v15528 
                                        let v15530 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v15531 : (struct (string * string) -> struct (string * string)) = closure136()
                                        let v15532 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v15529, v15531) v15530 
                                        let v15533 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v15534 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v15532 v15533 
                                        let v15535 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v15536 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v15534 v15535 
                                        let v15537 : struct (string * string) option = v15536 |> Array.tryItem 0 
                                        let v15538 : US42 option = None
                                        let _v15538 = ref v15538 
                                        let v15539 : US42 option ref = _v15538 
                                        let v15540 : (US42 option -> US42 option ref) = closure137(v15539)
                                        let v15541 : unit = ()
                                        let v15542 : (unit -> unit) = closure138(v15537, v15540)
                                        let v15543 : unit = (fun () -> v15542 (); v15541) ()
                                        let v15547 : US42 option = _v15538.Value 
                                        let v15559 : US42 = US42_1
                                        let v15560 : US42 = v15547 |> Option.defaultValue v15559 
                                        let v15564 : unit = ()
                                        let v15565 : (unit -> unit) = closure139(v15560)
                                        let v15566 : unit = (fun () -> v15565 (); v15564) ()
                                        match v15560 with
                                        | US42_1 -> (* None *)
                                            ()
                                        | US42_0(v16303, v16304) -> (* Some *)
                                            let v16305 : string = $"fable-library-{v13843}.{v16304}"
                                            let v16306 : string = method15(v15515, v16305)
                                            let v16307 : string = $"fable_modules/fable-library-{v13843}.{v16304}"
                                            let v16308 : string = method15(v15384, v16307)
                                            method101(v16306, v16308)
                                        let v16309 : US33 = US33_1
                                        let struct (v16310 : int32, v16311 : string) = method102(v16309, v15384, v13843, v15415, v15361)
                                        let v16312 : bool = v16310 <> 0 
                                        let struct (v18913 : US1, v18914 : US1, v18915 : US1) =
                                            if v16312 then
                                                let v16315 : unit = ()
                                                let v16316 : (unit -> unit) = closure141(v16311, v16310)
                                                let v16317 : unit = (fun () -> v16316 (); v16315) ()
                                                let v17085 : US1 = US1_0(v13843)
                                                let v17086 : US1 = US1_1
                                                let v17087 : US1 = US1_0(v16311)
                                                struct (v17085, v17086, v17087)
                                            else
                                                let v17088 : string = "true; let _result : Vec<_> = v13790.into_iter().map(|x| { //"
                                                let v17089 : bool = Fable.Core.RustInterop.emitRustExpr () v17088 
                                                let v17090 : string = "x"
                                                let v17091 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v17090 
                                                let v17092 : string = "fable_library_rust::String_::fromString($0)"
                                                let v17093 : string = Fable.Core.RustInterop.emitRustExpr v17091 v17092 
                                                let v17094 : string = "="
                                                let v17095 : bool = v17093.Contains v17094 
                                                let v17099 : string =
                                                    if v17095 then
                                                        v17093
                                                    else
                                                        let v17098 : string = $"\"{v17093}\":\"*\""
                                                        v17098
                                                let v17100 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v17101 : bool = Fable.Core.RustInterop.emitRustExpr v17099 v17100 
                                                let v17102 : string = "_result"
                                                let v17103 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v17102 
                                                let v17104 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                let v17105 : (string []) = Fable.Core.RustInterop.emitRustExpr v17103 v17104 
                                                let v17106 : string seq = seq { for i = 0 to v17105.Length - 1 do yield v17105.[i] }
                                                let v17109 : (string -> (string seq -> string)) = String.concat
                                                let v17110 : string = ",\n"
                                                let v17111 : (string seq -> string) = v17109 v17110
                                                let v17112 : string = v17111 v17106
                                                let v17115 : string = $"{{"
                                                let v17116 : string = $"  \"name\": \"spiral_builder_{v13847}\","
                                                let v17117 : string = v17115 + v17116 
                                                let v17118 : string = $"  \"dependencies\": {{"
                                                let v17119 : string = v17117 + v17118 
                                                let v17120 : string = v17119 + v17112 
                                                let v17121 : string = $"  }},"
                                                let v17122 : string = v17120 + v17121 
                                                let v17123 : string = $"    \"devDependencies\": {{"
                                                let v17124 : string = v17122 + v17123 
                                                let v17125 : string = $"  }},"
                                                let v17126 : string = v17124 + v17125 
                                                let v17127 : string = $"}}"
                                                let v17128 : string = v17126 + v17127 
                                                let v17129 : string = "package.json"
                                                let v17130 : string = method15(v15384, v17129)
                                                let v17131 : string = "../.."
                                                let v17132 : string = method15(v15384, v17131)
                                                let v17133 : string = method15(v17132, v17129)
                                                method25(v17130, v17128)
                                                let v17134 : string = ""
                                                method25(v17133, v17134)
                                                let v17135 : string = $"{v15378}.{v13843}"
                                                let v17136 : string = method15(v15384, v17135)
                                                let v17137 : unit = ()
                                                let v17138 : (unit -> unit) = closure143(v17136)
                                                let v17139 : unit = (fun () -> v17138 (); v17137) ()
                                                let v17871 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v17872 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v17873 : string = "std::fs::read(&*$0)"
                                                let v17874 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v17136 v17873 
                                                let v17875 : string = "$0.unwrap()"
                                                let v17876 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17874 v17875 
                                                let _v17872 = v17876 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v17877 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v17872 = v17877 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v17880 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v17872 = v17880 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v17883 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v17872 = v17883 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v17886 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v17872 = v17886 
                                                #endif
#else
                                                let v17889 : (uint8 []) = v17136 |> System.IO.File.ReadAllBytes
                                                let v17890 : string = "$0.to_vec()"
                                                let v17891 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17889 v17890 
                                                let _v17872 = v17891 
                                                #endif
                                                let v17892 : Vec<uint8> = _v17872 
                                                let v17897 : Vec<uint8> = method14(v17892)
                                                let v17898 : string = "std::string::String::from_utf8($0)"
                                                let v17899 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v17897 v17898 
                                                let v17900 : string = "$0.unwrap()"
                                                let v17901 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17899 v17900 
                                                let v17902 : string = "fable_library_rust::String_::fromString($0)"
                                                let v17903 : string = Fable.Core.RustInterop.emitRustExpr v17901 v17902 
                                                let _v17871 = v17903 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v17904 : string = null |> unbox<string>
                                                let _v17871 = v17904 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v17907 : string = null |> unbox<string>
                                                let _v17871 = v17907 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v17910 : string = null |> unbox<string>
                                                let _v17871 = v17910 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v17913 : string = null |> unbox<string>
                                                let _v17871 = v17913 
                                                #endif
#else
                                                let v17916 : string = v17136 |> System.IO.File.ReadAllText
                                                let _v17871 = v17916 
                                                #endif
                                                let v17917 : string = _v17871 
                                                let v17922 : string = "// spiral_builder.process_typescript"
                                                let v17923 : bool = v17917.Contains v17922 
                                                let v17961 : string =
                                                    if v17923 then
                                                        v17917
                                                    else
                                                        let v17926 : string = $"\"./fable_modules/fable-library-ts.{v15560}/"
                                                        let v17927 : string = $"\"{v15375}/lib/typescript/fable/fable_modules/fable-library-ts.{v15560}/"
                                                        let v17928 : string = v17917.Replace (v17926, v17927)
                                                        let v17929 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v17930 : string = " defaultOf::<()>();"
                                                        let v17931 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v17932 : string = $"regex::Regex::new(&$0)"
                                                        let v17933 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v17929 v17932 
                                                        let v17934 : string = "$0.unwrap()"
                                                        let v17935 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v17933 v17934 
                                                        let v17936 : string = method86(v17928)
                                                        let v17937 : string = $"$0.replace_all(&*$1, &*$2)"
                                                        let v17938 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v17935, v17936, v17930) v17937 
                                                        let v17939 : string = "String::from($0)"
                                                        let v17940 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17938 v17939 
                                                        let v17941 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v17942 : string = Fable.Core.RustInterop.emitRustExpr v17940 v17941 
                                                        let _v17931 = v17942 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v17943 : string = null |> unbox<string>
                                                        let _v17931 = v17943 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v17946 : string = null |> unbox<string>
                                                        let _v17931 = v17946 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v17949 : string = null |> unbox<string>
                                                        let _v17931 = v17949 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v17952 : string = null |> unbox<string>
                                                        let _v17931 = v17952 
                                                        #endif
#else
                                                        let v17955 : string = System.Text.RegularExpressions.Regex.Replace (v17928, v17929, v17930)
                                                        let _v17931 = v17955 
                                                        #endif
                                                        let v17956 : string = _v17931 
                                                        v17956
                                                let v17962 : bool = v17923 = false
                                                if v17962 then
                                                    let v17963 : string = $"{v17961}\n\n{v17922}\n"
                                                    method25(v17136, v17963)
                                                let v17964 : string = $"bun run \"{v17136}\""
                                                let v17965 : string = "PATH"
                                                let v17966 : string = method3(v17965)
                                                let v17967 : bool = v17966 = ""
                                                let v17999 : US1 =
                                                    if v17967 then
                                                        US1_1
                                                    else
                                                        let v17969 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v17970 : string = "cfg!(windows)"
                                                        let v17971 : bool = Fable.Core.RustInterop.emitRustExpr () v17970 
                                                        let _v17969 = v17971 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v17972 : string = "cfg!(windows)"
                                                        let v17973 : bool = Fable.Core.RustInterop.emitRustExpr () v17972 
                                                        let _v17969 = v17973 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v17974 : string = "cfg!(windows)"
                                                        let v17975 : bool = Fable.Core.RustInterop.emitRustExpr () v17974 
                                                        let _v17969 = v17975 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v17976 : US10 = US10_0
                                                        let v17977 : US11 = US11_3(v17976)
                                                        let v17978 : string = $"platform.is_windows / target: {v17977}"
                                                        let v17979 : bool = failwith<bool> v17978
                                                        let _v17969 = v17979 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v17980 : US10 = US10_0
                                                        let v17981 : US11 = US11_4(v17980)
                                                        let v17982 : string = $"platform.is_windows / target: {v17981}"
                                                        let v17983 : bool = failwith<bool> v17982
                                                        let _v17969 = v17983 
                                                        #endif
#else
                                                        let v17984 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v17985 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v17986 : bool = v17985 v17984
                                                        let _v17969 = v17986 
                                                        #endif
                                                        let v17987 : bool = _v17969 
                                                        let v17995 : string =
                                                            if v17987 then
                                                                let v17993 : string = ";"
                                                                v17993
                                                            else
                                                                let v17994 : string = ":"
                                                                v17994
                                                        let v17996 : string = "~/.bun/bin"
                                                        let v17997 : string = $"{v17996}{v17995}{v17966}"
                                                        US1_0(v17997)
                                                let v18005 : UH5 =
                                                    match v17999 with
                                                    | US1_1 -> (* None *)
                                                        UH5_0
                                                    | US1_0(v18000) -> (* Some *)
                                                        let v18001 : UH5 = UH5_0
                                                        UH5_1(v17965, v18000, v18001)
                                                let v18006 : string = "TRACE_LEVEL"
                                                let v18007 : string = "Verbose"
                                                let v18008 : UH5 = UH5_0
                                                let v18009 : UH5 = UH5_1(v18006, v18007, v18008)
                                                let v18010 : UH5 = method118(v18005, v18009)
                                                let v18011 : struct (string * string) list = []
                                                let v18012 : struct (string * string) list = method119(v18010, v18011)
                                                let v18013 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v18014 : (struct (string * string) []) = v18013 v18012
                                                let v18017 : System.Threading.CancellationToken option = None
                                                let v18018 : (struct (string * string) []) = [||]
                                                let v18019 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v18020 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v18021 : string option = None
                                                let v18027 : Result<string, string> =
                                                    match v15361 with
                                                    | US12_1(v18024) -> (* Error *)
                                                        let v18025 : Result<string, string> = Error v18024 
                                                        v18025
                                                    | US12_0(v18022) -> (* Ok *)
                                                        let v18023 : Result<string, string> = Ok v18022 
                                                        v18023
                                                let v18028 : string = "v18027.ok()"
                                                let v18029 : string option = Fable.Core.RustInterop.emitRustExpr () v18028 
                                                let v18030 : bool = true
                                                let struct (v18031 : int32, v18032 : string) = method40(v17964, v18017, v18014, v18019, v18020, v18030, v18029)
                                                let v18033 : int32 = v18014.Length
                                                let v18034 : (string []) = Array.zeroCreate<string> (v18033)
                                                let v18035 : Mut5 = {l0 = 0} : Mut5
                                                while method43(v18033, v18035) do
                                                    let v18037 : int32 = v18035.l0
                                                    let struct (v18038 : string, v18039 : string) = v18014.[int v18037]
                                                    let v18040 : string = $"$env:{v18038}=''{v18039}''"
                                                    v18034.[int v18037] <- v18040
                                                    let v18041 : int32 = v18037 + 1
                                                    v18035.l0 <- v18041
                                                    ()
                                                let v18042 : string seq = v18034 |> Seq.ofArray
                                                let v18045 : (string -> (string seq -> string)) = String.concat
                                                let v18046 : string = ";"
                                                let v18047 : (string seq -> string) = v18045 v18046
                                                let v18048 : string = v18047 v18042
                                                let v18051 : string = $"pwsh -c '{v18048}; {v17964}'"
                                                let v18052 : bool = v18031 = 0
                                                let struct (v18910 : US1, v18911 : US1, v18912 : US1) =
                                                    if v18052 then
                                                        let v18053 : (string -> US1) = closure85()
                                                        let v18054 : (unit -> string) = closure145(v18032)
                                                        let v18055 : (exn -> US1) = closure146(v17136, v18032, v18051)
                                                        let v18056 : US1 = US1_1
                                                        let result = ref v18056
                                                        try
                                                            result.Value <- v18054 () |> v18053 
                                                        with ex ->
                                                            result.Value <- v18055 ex 
                                                        let v18057 : US1 = result.Value
                                                        let v18067 : string option =
                                                            match v18057 with
                                                            | US1_1 -> (* None *)
                                                                let v18065 : string option = None
                                                                v18065
                                                            | US1_0(v18061) -> (* Some *)
                                                                let v18062 : string option = Some v18061 
                                                                v18062
                                                        let v18068 : string = "$0.unwrap()"
                                                        let v18069 : string = Fable.Core.RustInterop.emitRustExpr v18067 v18068 
                                                        let v18070 : US1 = US1_0(v13843)
                                                        let v18071 : US1 = US1_0(v17961)
                                                        let v18072 : US1 = US1_0(v18069)
                                                        struct (v18070, v18071, v18072)
                                                    else
                                                        let v18073 : unit = ()
                                                        let v18074 : (unit -> unit) = closure149(v17136, v18032, v18031, v18051)
                                                        let v18075 : unit = (fun () -> v18074 (); v18073) ()
                                                        let v18907 : US1 = US1_0(v13843)
                                                        let v18908 : US1 = US1_1
                                                        let v18909 : US1 = US1_1
                                                        struct (v18907, v18908, v18909)
                                                struct (v18910, v18911, v18912)
                                        struct (v18913, v18914, v18915)
                                    else
                                        let v18916 : string = "fable_library_rust::String_::fromString($0)"
                                        let v18917 : string = Fable.Core.RustInterop.emitRustExpr v33 v18916 
                                        let v18918 : bool = v18917 = "python"
                                        let struct (v24106 : US1, v24107 : US1, v24108 : US1) =
                                            if v18918 then
                                                let v18919 : string = method79()
                                                let v18920 : string = "&*$0"
                                                let v18921 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18919 v18920 
                                                let v18922 : string = "clap::ArgMatches::get_one(&$0, v18921).cloned()"
                                                let v18923 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v18922 
                                                let v18924 : US5 option = None
                                                let _v18924 = ref v18924 
                                                let v18925 : US5 option ref = _v18924 
                                                let v18926 : (US5 option -> US5 option ref) = closure17(v18925)
                                                let v18927 : unit = ()
                                                let v18928 : (unit -> unit) = closure18(v18923, v18926)
                                                let v18929 : unit = (fun () -> v18928 (); v18927) ()
                                                let v18932 : US5 option = _v18924.Value 
                                                let v18943 : US5 = US5_1
                                                let v18944 : US5 = v18932 |> Option.defaultValue v18943 
                                                let v18951 : std_string_String =
                                                    match v18944 with
                                                    | US5_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US5_0(v18948) -> (* Some *)
                                                        v18948
                                                let v18952 : string = "fable_library_rust::String_::fromString($0)"
                                                let v18953 : string = Fable.Core.RustInterop.emitRustExpr v18951 v18952 
                                                let v18954 : string = method13()
                                                let v18955 : string = "&*$0"
                                                let v18956 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18954 v18955 
                                                let v18957 : string = "clap::ArgMatches::get_many(&$0, v18956).map(|x| x.cloned().into_iter().collect())"
                                                let v18958 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v18957 
                                                let v18959 : US9 option = None
                                                let _v18959 = ref v18959 
                                                let v18960 : US9 option ref = _v18959 
                                                let v18961 : (US9 option -> US9 option ref) = closure19(v18960)
                                                let v18962 : unit = ()
                                                let v18963 : (unit -> unit) = closure20(v18958, v18961)
                                                let v18964 : unit = (fun () -> v18963 (); v18962) ()
                                                let v18967 : US9 option = _v18959.Value 
                                                let v18978 : US9 = US9_1
                                                let v18979 : US9 = v18967 |> Option.defaultValue v18978 
                                                let v18983 : (std_string_String []) = [||]
                                                let v18984 : string = "$0.to_vec()"
                                                let v18985 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v18983 v18984 
                                                let v18988 : Vec<std_string_String> =
                                                    match v18979 with
                                                    | US9_1 -> (* None *)
                                                        v18985
                                                    | US9_0(v18986) -> (* Some *)
                                                        v18986
                                                let v18989 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v18990 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v18991 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v18992 : string = "std::fs::read(&*$0)"
                                                let v18993 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v18953 v18992 
                                                let v18994 : string = "$0.unwrap()"
                                                let v18995 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18993 v18994 
                                                let _v18991 = v18995 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v18996 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v18991 = v18996 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v18999 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v18991 = v18999 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v19002 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v18991 = v19002 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v19005 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v18991 = v19005 
                                                #endif
#else
                                                let v19008 : (uint8 []) = v18953 |> System.IO.File.ReadAllBytes
                                                let v19009 : string = "$0.to_vec()"
                                                let v19010 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v19008 v19009 
                                                let _v18991 = v19010 
                                                #endif
                                                let v19011 : Vec<uint8> = _v18991 
                                                let v19016 : Vec<uint8> = method14(v19011)
                                                let v19017 : string = "std::string::String::from_utf8($0)"
                                                let v19018 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v19016 v19017 
                                                let v19019 : string = "$0.unwrap()"
                                                let v19020 : std_string_String = Fable.Core.RustInterop.emitRustExpr v19018 v19019 
                                                let v19021 : string = "fable_library_rust::String_::fromString($0)"
                                                let v19022 : string = Fable.Core.RustInterop.emitRustExpr v19020 v19021 
                                                let _v18990 = v19022 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v19023 : string = null |> unbox<string>
                                                let _v18990 = v19023 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v19026 : string = null |> unbox<string>
                                                let _v18990 = v19026 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v19029 : string = null |> unbox<string>
                                                let _v18990 = v19029 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v19032 : string = null |> unbox<string>
                                                let _v18990 = v19032 
                                                #endif
#else
                                                let v19035 : string = v18953 |> System.IO.File.ReadAllText
                                                let _v18990 = v19035 
                                                #endif
                                                let v19036 : string = _v18990 
                                                let v19041 : string = "py"
                                                let v19042 : string = $"%A{struct (v19041, v19036)}"
                                                let v19045 : string = method94(v19042)
                                                let v19046 : string = __SOURCE_DIRECTORY__
                                                let v19047 : string = "polyglot"
                                                let v19048 : string = ".devcontainer"
                                                let v19049 : string = method15(v19047, v19048)
                                                let v19050 : US12 = method18(v19049, v19046)
                                                let v19792 : US1 =
                                                    match v19050 with
                                                    | US12_1(v19053) -> (* Error *)
                                                        let v19054 : unit = ()
                                                        let v19055 : (unit -> unit) = closure22(v19053)
                                                        let v19056 : unit = (fun () -> v19055 (); v19054) ()
                                                        US1_1
                                                    | US12_0(v19051) -> (* Ok *)
                                                        US1_0(v19051)
                                                let v20541 : US1 =
                                                    match v19792 with
                                                    | US1_1 -> (* None *)
                                                        let v19795 : string = method23()
                                                        let v19796 : string = method15(v19047, v19048)
                                                        let v19797 : US12 = method18(v19796, v19795)
                                                        match v19797 with
                                                        | US12_1(v19800) -> (* Error *)
                                                            let v19801 : unit = ()
                                                            let v19802 : (unit -> unit) = closure22(v19800)
                                                            let v19803 : unit = (fun () -> v19802 (); v19801) ()
                                                            US1_1
                                                        | US12_0(v19798) -> (* Ok *)
                                                            US1_0(v19798)
                                                    | US1_0(v19793) -> (* Some *)
                                                        US1_0(v19793)
                                                let v20545 : string =
                                                    match v20541 with
                                                    | US1_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US1_0(v20542) -> (* Some *)
                                                        v20542
                                                let v20546 : string = method15(v20545, v19047)
                                                let v20547 : string = method23()
                                                let v20548 : (unit -> string) = v20547.ToLower
                                                let v20549 : string = v20548 ()
                                                let v20552 : (unit -> string) = v20546.ToLower
                                                let v20553 : string = v20552 ()
                                                let v20556 : bool = v20549.StartsWith v20553 
                                                let v20559 : US12 =
                                                    if v20556 then
                                                        US12_1(v20553)
                                                    else
                                                        US12_0(v20553)
                                                let v20565 : Result<string, string> =
                                                    match v20559 with
                                                    | US12_1(v20562) -> (* Error *)
                                                        let v20563 : Result<string, string> = Error v20562 
                                                        v20563
                                                    | US12_0(v20560) -> (* Ok *)
                                                        let v20561 : Result<string, string> = Ok v20560 
                                                        v20561
                                                let v20566 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                                let v20567 : bool = Fable.Core.RustInterop.emitRustExpr v20565 v20566 
                                                let v20568 : string = "x"
                                                let v20569 : string = Fable.Core.RustInterop.emitRustExpr () v20568 
                                                let v20570 : string = "true; $0 })"
                                                let v20571 : bool = Fable.Core.RustInterop.emitRustExpr v20569 v20570 
                                                let v20572 : string = "_result"
                                                let v20573 : string = Fable.Core.RustInterop.emitRustExpr () v20572 
                                                let v20574 : string = "target/spiral_builder"
                                                let v20575 : string = method15(v20573, v20574)
                                                let v20576 : string = "spiral_builder"
                                                let v20577 : string = method15(v20575, v20576)
                                                let v20578 : string = "packages"
                                                let v20579 : string = method15(v20577, v20578)
                                                let v20580 : string = "Python"
                                                let v20581 : string = method15(v20579, v20580)
                                                let v20582 : string = method15(v20581, v19045)
                                                let v20583 : System.IDisposable = method28(v20582)
                                                let v20584 : string = $"{v20576}.fs"
                                                let v20585 : string = method15(v20582, v20584)
                                                let v20586 : string = method85(v20585)
                                                method25(v20586, v19036)
                                                let v20587 : string list = []
                                                let v20588 : string seq = seq { for i = 0 to v20587.Length - 1 do yield v20587.[i] }
                                                let v20591 : (string -> (string seq -> string)) = String.concat
                                                let v20592 : string = "\\n        "
                                                let v20593 : (string seq -> string) = v20591 v20592
                                                let v20594 : string = v20593 v20588
                                                let v20597 : string = "Fable.Core"
                                                let v20598 : string = $"<PackageReference Include=\"{v20597}\" Version=\"*\" />"
                                                let v20599 : string list = []
                                                let v20600 : string list = v20598 :: v20599 
                                                let v20603 : string seq = seq { for i = 0 to v20600.Length - 1 do yield v20600.[i] }
                                                let v20606 : (string -> (string seq -> string)) = String.concat
                                                let v20607 : (string seq -> string) = v20606 v20592
                                                let v20608 : string = v20607 v20603
                                                let v20611 : string = $"{v20576}.fsproj"
                                                let v20612 : string = method15(v20582, v20611)
                                                let v20613 : string = method85(v20612)
                                                let v20614 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                                let v20615 : string = $"<PropertyGroup>"
                                                let v20616 : string = "\n"
                                                let v20617 : string = v20614 + v20616 
                                                let v20618 : string = v20617 + v20615 
                                                let v20619 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                                let v20620 : string = v20618 + v20616 
                                                let v20621 : string = v20620 + v20619 
                                                let v20622 : string = $"    <LangVersion>preview</LangVersion>"
                                                let v20623 : string = v20621 + v20616 
                                                let v20624 : string = v20623 + v20622 
                                                let v20625 : string = $"    <RollForward>Major</RollForward>"
                                                let v20626 : string = v20624 + v20616 
                                                let v20627 : string = v20626 + v20625 
                                                let v20628 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                                let v20629 : string = v20627 + v20616 
                                                let v20630 : string = v20629 + v20628 
                                                let v20631 : string = $"    <PublishAot>false</PublishAot>"
                                                let v20632 : string = v20630 + v20616 
                                                let v20633 : string = v20632 + v20631 
                                                let v20634 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                                let v20635 : string = v20633 + v20616 
                                                let v20636 : string = v20635 + v20634 
                                                let v20637 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                                let v20638 : string = v20636 + v20616 
                                                let v20639 : string = v20638 + v20637 
                                                let v20640 : string = $"    <SelfContained>true</SelfContained>"
                                                let v20641 : string = v20639 + v20616 
                                                let v20642 : string = v20641 + v20640 
                                                let v20643 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                                let v20644 : string = v20642 + v20616 
                                                let v20645 : string = v20644 + v20643 
                                                let v20646 : string = $"    <OutputType>Exe</OutputType>"
                                                let v20647 : string = v20645 + v20616 
                                                let v20648 : string = v20647 + v20646 
                                                let v20649 : string = $"</PropertyGroup>"
                                                let v20650 : string = v20648 + v20616 
                                                let v20651 : string = v20650 + v20649 
                                                let v20652 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                                let v20653 : string = v20651 + v20616 
                                                let v20654 : string = v20653 + v20652 
                                                let v20655 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                                let v20656 : string = v20654 + v20616 
                                                let v20657 : string = v20656 + v20655 
                                                let v20658 : string = $"</PropertyGroup>"
                                                let v20659 : string = v20657 + v20616 
                                                let v20660 : string = v20659 + v20658 
                                                let v20661 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                                let v20662 : string = v20660 + v20616 
                                                let v20663 : string = v20662 + v20661 
                                                let v20664 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                                let v20665 : string = v20663 + v20616 
                                                let v20666 : string = v20665 + v20664 
                                                let v20667 : string = $"</PropertyGroup>"
                                                let v20668 : string = v20666 + v20616 
                                                let v20669 : string = v20668 + v20667 
                                                let v20670 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                                let v20671 : string = v20669 + v20616 
                                                let v20672 : string = v20671 + v20670 
                                                let v20673 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                                let v20674 : string = v20672 + v20616 
                                                let v20675 : string = v20674 + v20673 
                                                let v20676 : string = $"</PropertyGroup>"
                                                let v20677 : string = v20675 + v20616 
                                                let v20678 : string = v20677 + v20676 
                                                let v20679 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                                let v20680 : string = v20678 + v20616 
                                                let v20681 : string = v20680 + v20679 
                                                let v20682 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                                let v20683 : string = v20681 + v20616 
                                                let v20684 : string = v20683 + v20682 
                                                let v20685 : string = $"</PropertyGroup>"
                                                let v20686 : string = v20684 + v20616 
                                                let v20687 : string = v20686 + v20685 
                                                let v20688 : string = $"<ItemGroup>"
                                                let v20689 : string = v20687 + v20616 
                                                let v20690 : string = v20689 + v20688 
                                                let v20691 : string = $"    {v20594}"
                                                let v20692 : string = v20690 + v20616 
                                                let v20693 : string = v20692 + v20691 
                                                let v20694 : string = $"    <Compile Include=\"{v20586}\" />"
                                                let v20695 : string = v20693 + v20616 
                                                let v20696 : string = v20695 + v20694 
                                                let v20697 : string = $"</ItemGroup>"
                                                let v20698 : string = v20696 + v20616 
                                                let v20699 : string = v20698 + v20697 
                                                let v20700 : string = $"<ItemGroup>"
                                                let v20701 : string = v20699 + v20616 
                                                let v20702 : string = v20701 + v20700 
                                                let v20703 : string = $"    {v20608}"
                                                let v20704 : string = v20702 + v20616 
                                                let v20705 : string = v20704 + v20703 
                                                let v20706 : string = $"</ItemGroup>"
                                                let v20707 : string = v20705 + v20616 
                                                let v20708 : string = v20707 + v20706 
                                                let v20709 : string = $"</Project>"
                                                let v20710 : string = v20708 + v20616 
                                                let v20711 : string = v20710 + v20709 
                                                method25(v20613, v20711)
                                                let v20712 : string = "lib/python/fable/fable_modules"
                                                let v20713 : string = method15(v20573, v20712)
                                                let v20714 : string = $"fable_library"
                                                let v20715 : string = method15(v20713, v20714)
                                                let v20716 : string = $"fable_modules/fable_library"
                                                let v20717 : string = method15(v20582, v20716)
                                                method101(v20715, v20717)
                                                let v20718 : US33 = US33_1
                                                let struct (v20719 : int32, v20720 : string) = method102(v20718, v20582, v19041, v20613, v20559)
                                                let v20721 : bool = v20719 <> 0 
                                                let struct (v23276 : US1, v23277 : US1, v23278 : US1) =
                                                    if v20721 then
                                                        let v20724 : unit = ()
                                                        let v20725 : (unit -> unit) = closure151(v20720, v20719)
                                                        let v20726 : unit = (fun () -> v20725 (); v20724) ()
                                                        let v21494 : US1 = US1_0(v19041)
                                                        let v21495 : US1 = US1_1
                                                        let v21496 : US1 = US1_0(v20720)
                                                        struct (v21494, v21495, v21496)
                                                    else
                                                        let v21497 : string = "true; let _result : Vec<_> = v18988.into_iter().map(|x| { //"
                                                        let v21498 : bool = Fable.Core.RustInterop.emitRustExpr () v21497 
                                                        let v21499 : string = "x"
                                                        let v21500 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21499 
                                                        let v21501 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v21502 : string = Fable.Core.RustInterop.emitRustExpr v21500 v21501 
                                                        let v21503 : string = "="
                                                        let v21504 : bool = v21502.Contains v21503 
                                                        let v21508 : string =
                                                            if v21504 then
                                                                v21502
                                                            else
                                                                let v21507 : string = $"\"{v21502}\":\"*\""
                                                                v21507
                                                        let v21509 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v21510 : bool = Fable.Core.RustInterop.emitRustExpr v21508 v21509 
                                                        let v21511 : string = "_result"
                                                        let v21512 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v21511 
                                                        let v21513 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                        let v21514 : (string []) = Fable.Core.RustInterop.emitRustExpr v21512 v21513 
                                                        let v21515 : string seq = seq { for i = 0 to v21514.Length - 1 do yield v21514.[i] }
                                                        let v21518 : (string -> (string seq -> string)) = String.concat
                                                        let v21519 : string = ",\n"
                                                        let v21520 : (string seq -> string) = v21518 v21519
                                                        let v21521 : string = v21520 v21515
                                                        let v21524 : string = $"{{"
                                                        let v21525 : string = $"  \"name\": \"spiral_builder_{v19045}\","
                                                        let v21526 : string = v21524 + v21525 
                                                        let v21527 : string = $"  \"dependencies\": {{"
                                                        let v21528 : string = v21526 + v21527 
                                                        let v21529 : string = v21528 + v21521 
                                                        let v21530 : string = $"  }},"
                                                        let v21531 : string = v21529 + v21530 
                                                        let v21532 : string = $"    \"devDependencies\": {{"
                                                        let v21533 : string = v21531 + v21532 
                                                        let v21534 : string = $"  }},"
                                                        let v21535 : string = v21533 + v21534 
                                                        let v21536 : string = $"}}"
                                                        let v21537 : string = v21535 + v21536 
                                                        let v21538 : string = "package.json"
                                                        let v21539 : string = method15(v20582, v21538)
                                                        let v21540 : string = "../.."
                                                        let v21541 : string = method15(v20582, v21540)
                                                        let v21542 : string = method15(v21541, v21538)
                                                        method25(v21539, v21537)
                                                        let v21543 : string = ""
                                                        method25(v21542, v21543)
                                                        let v21544 : string = $"{v20576}.{v19041}"
                                                        let v21545 : string = method15(v20582, v21544)
                                                        let v21546 : unit = ()
                                                        let v21547 : (unit -> unit) = closure153(v21545)
                                                        let v21548 : unit = (fun () -> v21547 (); v21546) ()
                                                        let v22280 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v22281 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v22282 : string = "std::fs::read(&*$0)"
                                                        let v22283 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v21545 v22282 
                                                        let v22284 : string = "$0.unwrap()"
                                                        let v22285 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v22283 v22284 
                                                        let _v22281 = v22285 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v22286 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v22281 = v22286 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v22289 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v22281 = v22289 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v22292 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v22281 = v22292 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v22295 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v22281 = v22295 
                                                        #endif
#else
                                                        let v22298 : (uint8 []) = v21545 |> System.IO.File.ReadAllBytes
                                                        let v22299 : string = "$0.to_vec()"
                                                        let v22300 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v22298 v22299 
                                                        let _v22281 = v22300 
                                                        #endif
                                                        let v22301 : Vec<uint8> = _v22281 
                                                        let v22306 : Vec<uint8> = method14(v22301)
                                                        let v22307 : string = "std::string::String::from_utf8($0)"
                                                        let v22308 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v22306 v22307 
                                                        let v22309 : string = "$0.unwrap()"
                                                        let v22310 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22308 v22309 
                                                        let v22311 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v22312 : string = Fable.Core.RustInterop.emitRustExpr v22310 v22311 
                                                        let _v22280 = v22312 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v22313 : string = null |> unbox<string>
                                                        let _v22280 = v22313 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v22316 : string = null |> unbox<string>
                                                        let _v22280 = v22316 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v22319 : string = null |> unbox<string>
                                                        let _v22280 = v22319 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v22322 : string = null |> unbox<string>
                                                        let _v22280 = v22322 
                                                        #endif
#else
                                                        let v22325 : string = v21545 |> System.IO.File.ReadAllText
                                                        let _v22280 = v22325 
                                                        #endif
                                                        let v22326 : string = _v22280 
                                                        let v22331 : string = "# spiral_builder.process_python"
                                                        let v22332 : bool = v22326.Contains v22331 
                                                        let v22373 : string =
                                                            if v22332 then
                                                                v22326
                                                            else
                                                                let v22335 : string = "\";\".into()"
                                                                let v22336 : string = Fable.Core.RustInterop.emitRustExpr () v22335 
                                                                let v22337 : string = "),)"
                                                                let v22338 : string = v22337 + v22336 
                                                                let v22339 : string = "));"
                                                                let v22340 : string = v22326.Replace (v22338, v22339)
                                                                let v22341 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v22342 : string = " defaultOf::<()>();"
                                                                let v22343 : unit = ()
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v22344 : string = $"regex::Regex::new(&$0)"
                                                                let v22345 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v22341 v22344 
                                                                let v22346 : string = "$0.unwrap()"
                                                                let v22347 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v22345 v22346 
                                                                let v22348 : string = method86(v22340)
                                                                let v22349 : string = $"$0.replace_all(&*$1, &*$2)"
                                                                let v22350 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v22347, v22348, v22342) v22349 
                                                                let v22351 : string = "String::from($0)"
                                                                let v22352 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22350 v22351 
                                                                let v22353 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v22354 : string = Fable.Core.RustInterop.emitRustExpr v22352 v22353 
                                                                let _v22343 = v22354 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v22355 : string = null |> unbox<string>
                                                                let _v22343 = v22355 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v22358 : string = null |> unbox<string>
                                                                let _v22343 = v22358 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                let v22361 : string = null |> unbox<string>
                                                                let _v22343 = v22361 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                let v22364 : string = null |> unbox<string>
                                                                let _v22343 = v22364 
                                                                #endif
#else
                                                                let v22367 : string = System.Text.RegularExpressions.Regex.Replace (v22340, v22341, v22342)
                                                                let _v22343 = v22367 
                                                                #endif
                                                                let v22368 : string = _v22343 
                                                                v22368
                                                        let v22374 : bool = v22332 = false
                                                        if v22374 then
                                                            let v22375 : string = $"{v22373}\n\n{v22331}\n"
                                                            method25(v21545, v22375)
                                                        let v22376 : string = $"python \"{v21545}\""
                                                        let v22377 : string = "TRACE_LEVEL"
                                                        let v22378 : string = "Verbose"
                                                        let v22379 : (struct (string * string) []) = [|struct (v22377, v22378)|]
                                                        let v22380 : System.Threading.CancellationToken option = None
                                                        let v22381 : (struct (string * string) []) = [||]
                                                        let v22382 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v22383 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v22384 : string option = None
                                                        let v22390 : Result<string, string> =
                                                            match v20559 with
                                                            | US12_1(v22387) -> (* Error *)
                                                                let v22388 : Result<string, string> = Error v22387 
                                                                v22388
                                                            | US12_0(v22385) -> (* Ok *)
                                                                let v22386 : Result<string, string> = Ok v22385 
                                                                v22386
                                                        let v22391 : string = "v22390.ok()"
                                                        let v22392 : string option = Fable.Core.RustInterop.emitRustExpr () v22391 
                                                        let v22393 : bool = true
                                                        let struct (v22394 : int32, v22395 : string) = method40(v22376, v22380, v22379, v22382, v22383, v22393, v22392)
                                                        let v22396 : int32 = v22379.Length
                                                        let v22397 : (string []) = Array.zeroCreate<string> (v22396)
                                                        let v22398 : Mut5 = {l0 = 0} : Mut5
                                                        while method43(v22396, v22398) do
                                                            let v22400 : int32 = v22398.l0
                                                            let struct (v22401 : string, v22402 : string) = v22379.[int v22400]
                                                            let v22403 : string = $"$env:{v22401}=''{v22402}''"
                                                            v22397.[int v22400] <- v22403
                                                            let v22404 : int32 = v22400 + 1
                                                            v22398.l0 <- v22404
                                                            ()
                                                        let v22405 : string seq = v22397 |> Seq.ofArray
                                                        let v22408 : (string -> (string seq -> string)) = String.concat
                                                        let v22409 : string = ";"
                                                        let v22410 : (string seq -> string) = v22408 v22409
                                                        let v22411 : string = v22410 v22405
                                                        let v22414 : string = $"pwsh -c '{v22411}; {v22376}'"
                                                        let v22415 : bool = v22394 = 0
                                                        let struct (v23273 : US1, v23274 : US1, v23275 : US1) =
                                                            if v22415 then
                                                                let v22416 : (string -> US1) = closure85()
                                                                let v22417 : (unit -> string) = closure155(v22395)
                                                                let v22418 : (exn -> US1) = closure156(v21545, v22395, v22414)
                                                                let v22419 : US1 = US1_1
                                                                let result = ref v22419
                                                                try
                                                                    result.Value <- v22417 () |> v22416 
                                                                with ex ->
                                                                    result.Value <- v22418 ex 
                                                                let v22420 : US1 = result.Value
                                                                let v22430 : string option =
                                                                    match v22420 with
                                                                    | US1_1 -> (* None *)
                                                                        let v22428 : string option = None
                                                                        v22428
                                                                    | US1_0(v22424) -> (* Some *)
                                                                        let v22425 : string option = Some v22424 
                                                                        v22425
                                                                let v22431 : string = "$0.unwrap()"
                                                                let v22432 : string = Fable.Core.RustInterop.emitRustExpr v22430 v22431 
                                                                let v22433 : US1 = US1_0(v19041)
                                                                let v22434 : US1 = US1_0(v22373)
                                                                let v22435 : US1 = US1_0(v22432)
                                                                struct (v22433, v22434, v22435)
                                                            else
                                                                let v22436 : unit = ()
                                                                let v22437 : (unit -> unit) = closure159(v21545, v22395, v22394, v22414)
                                                                let v22438 : unit = (fun () -> v22437 (); v22436) ()
                                                                let v23270 : US1 = US1_0(v19041)
                                                                let v23271 : US1 = US1_1
                                                                let v23272 : US1 = US1_1
                                                                struct (v23270, v23271, v23272)
                                                        struct (v23273, v23274, v23275)
                                                struct (v23276, v23277, v23278)
                                            else
                                                let v23279 : unit = ()
                                                let v23280 : (unit -> unit) = closure161(v34, v33)
                                                let v23281 : unit = (fun () -> v23280 (); v23279) ()
                                                let v24103 : US1 = US1_1
                                                let v24104 : US1 = US1_1
                                                let v24105 : US1 = US1_1
                                                struct (v24103, v24104, v24105)
                                        struct (v24106, v24107, v24108)
                                struct (v24109, v24110, v24111)
                        let v24118 : string =
                            match v24112 with
                            | US1_1 -> (* None *)
                                let v24116 : string = ""
                                v24116
                            | US1_0(v24115) -> (* Some *)
                                v24115
                        let v24119 : string = "extension"
                        let v24123 : string =
                            match v24113 with
                            | US1_1 -> (* None *)
                                let v24121 : string = ""
                                v24121
                            | US1_0(v24120) -> (* Some *)
                                v24120
                        let v24124 : string = "code"
                        let v24128 : string =
                            match v24114 with
                            | US1_1 -> (* None *)
                                let v24126 : string = ""
                                v24126
                            | US1_0(v24125) -> (* Some *)
                                v24125
                        let v24129 : string = "output"
                        [|struct (v24119, v24118); struct (v24124, v24123); struct (v24129, v24128)|]
        | _ ->
            let v24134 : string = "extension"
            let v24135 : string = ""
            let v24136 : string = "code"
            let v24137 : string = "output"
            [|struct (v24134, v24135); struct (v24136, v24135); struct (v24137, v24135)|]
    let v24140 : string = "$0.to_vec()"
    let v24141 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v24139 v24140 
    let v24142 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v24143 : (struct (string * string) -> (std_string_String * std_string_String)) = closure163()
    let v24144 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v24141, v24143) v24142 
    let v24145 : string = "std::collections::BTreeMap::from_iter(v24144.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v24146 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v24145 
    let v24147 : string = "serde_json::to_string(&v24146)"
    let v24148 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v24147 
    let v24149 : (serde_json_Error -> string) = method120()
    let v24150 : string = "$0.map_err(|x| $1(x))"
    let v24151 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v24148, v24149) v24150 
    let v24152 : string = "true; let _result = $0.map(|x| { //"
    let v24153 : bool = Fable.Core.RustInterop.emitRustExpr v24151 v24152 
    let v24154 : string = "x"
    let v24155 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v24154 
    let v24156 : string = "fable_library_rust::String_::fromString($0)"
    let v24157 : string = Fable.Core.RustInterop.emitRustExpr v24155 v24156 
    let v24158 : string = "true; $0 })"
    let v24159 : bool = Fable.Core.RustInterop.emitRustExpr v24157 v24158 
    let v24160 : string = "_result"
    let v24161 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v24160 
    let v24162 : Result<string, string> = method121(v24161)
    let v24163 : string = ""
    let v24164 : string = "}"
    let v24165 : string = v24163 + v24164 
    let v24166 : string = "true; v24162 " + v24165 + "); " + v24163 + " // rust.fix_closure'"
    let v24167 : bool = Fable.Core.RustInterop.emitRustExpr () v24166 
    let v24168 : string = "__result"
    let v24169 : _ = Fable.Core.RustInterop.emitRustExpr () v24168 
    let v24170 : string = "v24169"
    let v24171 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v24170 
    v24171
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure6(v0)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v769 : clap_Command = method0()
    let v770 : string = "clap::Command::get_matches($0)"
    let v771 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v769 v770 
    let v772 : US0 = v19.l0
    let v773 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method10(v772, v771)
    let v774 : string = $"tokio::runtime::Builder::new_multi_thread().enable_all().build().unwrap()"
    let v775 : _ = Fable.Core.RustInterop.emitRustExpr () v774 
    let v776 : string = "v775.handle().block_on($0)"
    let v777 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v773 v776 
    let v778 : string = "$0.unwrap()"
    let v779 : string = Fable.Core.RustInterop.emitRustExpr v777 v778 
    let v780 : US0 = v19.l0
    let v781 : bool =
        match v780 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v781 then
        let v782 : unit = ()
        let v783 : (unit -> unit) = closure13(v779)
        let v784 : unit = (fun () -> v783 (); v782) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
