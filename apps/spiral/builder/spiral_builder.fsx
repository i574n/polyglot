#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
#endif
type std_path_PathBuf = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
#endif
type std_path_Display = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
module State = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Path")>]
#endif
type std_path_Path = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
#endif
type core_any_Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = unit
  type DataReceivedEventArgs = unit
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0 of f0_0 : string
    | US3_1
and Mut4 = {mutable l0 : string}
and [<Struct>] US4 =
    | US4_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : std_string_String
    | US5_1
and [<Struct>] US8 =
    | US8_0
    | US8_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : US8
    | US7_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : US7
    | US6_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : Vec<std_string_String>
    | US9_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
    | US10_2
and [<Struct>] US11 =
    | US11_0 of f0_0 : US10
    | US11_1 of f1_0 : US10
    | US11_2 of f2_0 : US10
    | US11_3 of f3_0 : US10
    | US11_4 of f4_0 : US10
and [<Struct>] US12 =
    | US12_0 of f0_0 : string
    | US12_1 of f1_0 : string
and [<Struct>] US13 =
    | US13_0
    | US13_1 of f1_0 : std_string_String
and [<Struct>] US14 =
    | US14_0 of f0_0 : string * f0_1 : US3
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH1
and [<Struct>] US16 =
    | US16_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US16_1 of f1_0 : string
and [<Struct>] US17 =
    | US17_0 of f0_0 : char
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : US3 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US17 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : US3 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : (string [])
    | US22_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US23 =
    | US23_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) * UH3
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : std_string_String
    | US26_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_process_Output
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : int32
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : System.Threading.CancellationToken
    | US32_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US33 =
    | US33_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : int32 * f0_1 : string
    | US34_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US35 =
    | US35_0 of f0_0 : std_collections_HashMap<string, string>
    | US35_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : US3
    | US36_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US37 =
    | US37_0
    | US37_1
    | US37_2
and [<Struct>] US38 =
    | US38_0 of f0_0 : std_fs_FileType
    | US38_1 of f1_0 : std_string_String
and [<Struct>] US39 =
    | US39_0 of f0_0 : async_walkdir_DirEntry
    | US39_1 of f1_0 : std_string_String
and [<Struct>] US40 =
    | US40_0 of f0_0 : string * f0_1 : string
    | US40_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    let v60 : string list = []
    let v63 : string = "Poetry"
    let v64 : string list = v63 :: v60 
    let v73 : string = "Pip"
    let v74 : string list = v73 :: v64 
    let v83 : (string list -> (string [])) = List.toArray
    let v84 : (string []) = v83 v74
    let v91 : string = "$0.to_vec()"
    let v92 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v84 v91 
    let v93 : string = "true; let _result : Vec<_> = v92.into_iter().map(|x| { //"
    let v94 : bool = Fable.Core.RustInterop.emitRustExpr () v93 
    let v95 : string = "x"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr () v95 
    let v97 : string = "&*$0"
    let v98 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : string = "String::from($0)"
    let v100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v99 
    let v101 : string = "Box::new($0)"
    let v102 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v100 v101 
    let v103 : string = "Box::leak($0)"
    let v104 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v102 v103 
    let v105 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v106 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v104 v105 
    let v107 : string = "true; $0 }).collect::<Vec<_>>()"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "_result"
    let v110 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v112 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.value_parser($1)"
    let v114 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v112) v113 
    let v115 : string = "clap::Command::arg($0, $1)"
    let v116 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v114) v115 
    let v117 : string = "NAME"
    let v118 : string = "r#\"" + v117 + "\"#"
    let v119 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "VERSION"
    let v121 : string = "r#\"" + v120 + "\"#"
    let v122 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v119; v122|]
    let v126 : unativeint = 1 |> unativeint 
    let v135 : unativeint = 0 |> unativeint 
    let v144 : bool = v135 = v135 
    let v155 : clap_builder_ValueRange =
        if v144 then
            let v151 : string = "clap::builder::ValueRange::new(v126..)"
            let v152 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v151 
            v152
        else
            let v153 : string = "clap::builder::ValueRange::new(v126..v135)"
            let v154 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v153 
            v154
    let v156 : string = "deps"
    let v157 : string = "r#\"" + v156 + "\"#"
    let v158 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v157 
    let v159 : string = "clap::Arg::new($0)"
    let v160 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v158 v159 
    let v161 : string = "$0.short($1)"
    let v162 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v160, 'd') v161 
    let v163 : string = "r#\"" + v156 + "\"#"
    let v164 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v163 
    let v165 : string = "$0.long($1)"
    let v166 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v162, v164) v165 
    let v167 : string = "$0.to_vec()"
    let v168 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v123 v167 
    let v169 : string = "$0.value_names($1)"
    let v170 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v166, v168) v169 
    let v171 : string = "$0.num_args($1)"
    let v172 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v170, v155) v171 
    let v173 : string = "clap::ArgAction::Append"
    let v174 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v173 
    let v175 : string = "$0.action($1)"
    let v176 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v172, v174) v175 
    let v177 : string = "clap::Command::arg($0, $1)"
    let v178 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v116, v176) v177 
    let v179 : string = "clap::Command::subcommand($0, v178)"
    let v180 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v179 
    let v181 : string = "fable"
    let v182 : string = "r#\"" + v181 + "\"#"
    let v183 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v182 
    let v184 : string = "clap::Command::new($0)"
    let v185 : clap_Command = Fable.Core.RustInterop.emitRustExpr v183 v184 
    let v186 : string = "fs-path"
    let v187 : string = "r#\"" + v186 + "\"#"
    let v188 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v187 
    let v189 : string = "clap::Arg::new($0)"
    let v190 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v188 v189 
    let v191 : string = "$0.short($1)"
    let v192 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v190, 'f') v191 
    let v193 : string = "r#\"" + v186 + "\"#"
    let v194 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v193 
    let v195 : string = "$0.long($1)"
    let v196 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v192, v194) v195 
    let v197 : string = "$0.required($1)"
    let v198 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v196, true) v197 
    let v199 : string = "clap::Command::arg($0, $1)"
    let v200 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v185, v198) v199 
    let v201 : string = "r#\"" + v0 + "\"#"
    let v202 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v201 
    let v203 : string = "clap::Arg::new($0)"
    let v204 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v202 v203 
    let v205 : string = "$0.short($1)"
    let v206 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v204, 'c') v205 
    let v207 : string = "r#\"" + v0 + "\"#"
    let v208 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v207 
    let v209 : string = "$0.long($1)"
    let v210 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v206, v208) v209 
    let v211 : string = "clap::Command::arg($0, $1)"
    let v212 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v200, v210) v211 
    let v213 : string = "clap::Command::subcommand($0, v212)"
    let v214 : clap_Command = Fable.Core.RustInterop.emitRustExpr v180 v213 
    let v215 : string = "rust"
    let v216 : string = "r#\"" + v215 + "\"#"
    let v217 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v216 
    let v218 : string = "clap::Command::new($0)"
    let v219 : clap_Command = Fable.Core.RustInterop.emitRustExpr v217 v218 
    let v220 : string = "r#\"" + v186 + "\"#"
    let v221 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v220 
    let v222 : string = "clap::Arg::new($0)"
    let v223 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v221 v222 
    let v224 : string = "$0.short($1)"
    let v225 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v223, 'f') v224 
    let v226 : string = "r#\"" + v186 + "\"#"
    let v227 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v226 
    let v228 : string = "$0.long($1)"
    let v229 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v225, v227) v228 
    let v230 : string = "$0.required($1)"
    let v231 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v229, true) v230 
    let v232 : string = "clap::Command::arg($0, $1)"
    let v233 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v219, v231) v232 
    let v234 : string = "r#\"" + v117 + "\"#"
    let v235 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "r#\"" + v120 + "\"#"
    let v237 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v236 
    let v238 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v235; v237|]
    let v241 : unativeint = 1 |> unativeint 
    let v250 : unativeint = 0 |> unativeint 
    let v259 : bool = v250 = v250 
    let v270 : clap_builder_ValueRange =
        if v259 then
            let v266 : string = "clap::builder::ValueRange::new(v241..)"
            let v267 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v266 
            v267
        else
            let v268 : string = "clap::builder::ValueRange::new(v241..v250)"
            let v269 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v268 
            v269
    let v271 : string = "r#\"" + v156 + "\"#"
    let v272 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v271 
    let v273 : string = "clap::Arg::new($0)"
    let v274 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v272 v273 
    let v275 : string = "$0.short($1)"
    let v276 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v274, 'd') v275 
    let v277 : string = "r#\"" + v156 + "\"#"
    let v278 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v277 
    let v279 : string = "$0.long($1)"
    let v280 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v276, v278) v279 
    let v281 : string = "$0.to_vec()"
    let v282 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v238 v281 
    let v283 : string = "$0.value_names($1)"
    let v284 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v280, v282) v283 
    let v285 : string = "$0.num_args($1)"
    let v286 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v284, v270) v285 
    let v287 : string = "clap::ArgAction::Append"
    let v288 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v287 
    let v289 : string = "$0.action($1)"
    let v290 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v286, v288) v289 
    let v291 : string = "clap::Command::arg($0, $1)"
    let v292 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v233, v290) v291 
    let v293 : string = "clap::Command::subcommand($0, v292)"
    let v294 : clap_Command = Fable.Core.RustInterop.emitRustExpr v214 v293 
    let v295 : string = "typescript"
    let v296 : string = "r#\"" + v295 + "\"#"
    let v297 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v296 
    let v298 : string = "clap::Command::new($0)"
    let v299 : clap_Command = Fable.Core.RustInterop.emitRustExpr v297 v298 
    let v300 : string = "r#\"" + v186 + "\"#"
    let v301 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v300 
    let v302 : string = "clap::Arg::new($0)"
    let v303 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v301 v302 
    let v304 : string = "$0.short($1)"
    let v305 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v303, 'f') v304 
    let v306 : string = "r#\"" + v186 + "\"#"
    let v307 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v306 
    let v308 : string = "$0.long($1)"
    let v309 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v305, v307) v308 
    let v310 : string = "$0.required($1)"
    let v311 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v309, true) v310 
    let v312 : string = "clap::Command::arg($0, $1)"
    let v313 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v299, v311) v312 
    let v314 : string = "r#\"" + v117 + "\"#"
    let v315 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v314 
    let v316 : string = "r#\"" + v120 + "\"#"
    let v317 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v316 
    let v318 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v315; v317|]
    let v321 : unativeint = 1 |> unativeint 
    let v330 : unativeint = 0 |> unativeint 
    let v339 : bool = v330 = v330 
    let v350 : clap_builder_ValueRange =
        if v339 then
            let v346 : string = "clap::builder::ValueRange::new(v321..)"
            let v347 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v346 
            v347
        else
            let v348 : string = "clap::builder::ValueRange::new(v321..v330)"
            let v349 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v348 
            v349
    let v351 : string = "r#\"" + v156 + "\"#"
    let v352 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v351 
    let v353 : string = "clap::Arg::new($0)"
    let v354 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v352 v353 
    let v355 : string = "$0.short($1)"
    let v356 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v354, 'd') v355 
    let v357 : string = "r#\"" + v156 + "\"#"
    let v358 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v357 
    let v359 : string = "$0.long($1)"
    let v360 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v356, v358) v359 
    let v361 : string = "$0.to_vec()"
    let v362 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v318 v361 
    let v363 : string = "$0.value_names($1)"
    let v364 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v360, v362) v363 
    let v365 : string = "$0.num_args($1)"
    let v366 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v364, v350) v365 
    let v367 : string = "clap::ArgAction::Append"
    let v368 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v367 
    let v369 : string = "$0.action($1)"
    let v370 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v366, v368) v369 
    let v371 : string = "clap::Command::arg($0, $1)"
    let v372 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v313, v370) v371 
    let v373 : string = "clap::Command::subcommand($0, v372)"
    let v374 : clap_Command = Fable.Core.RustInterop.emitRustExpr v294 v373 
    let v375 : string = "python"
    let v376 : string = "r#\"" + v375 + "\"#"
    let v377 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v376 
    let v378 : string = "clap::Command::new($0)"
    let v379 : clap_Command = Fable.Core.RustInterop.emitRustExpr v377 v378 
    let v380 : string = "r#\"" + v186 + "\"#"
    let v381 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v380 
    let v382 : string = "clap::Arg::new($0)"
    let v383 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v381 v382 
    let v384 : string = "$0.short($1)"
    let v385 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v383, 'f') v384 
    let v386 : string = "r#\"" + v186 + "\"#"
    let v387 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v386 
    let v388 : string = "$0.long($1)"
    let v389 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v385, v387) v388 
    let v390 : string = "$0.required($1)"
    let v391 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v389, true) v390 
    let v392 : string = "clap::Command::arg($0, $1)"
    let v393 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v379, v391) v392 
    let v394 : string = "r#\"" + v117 + "\"#"
    let v395 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v394 
    let v396 : string = "r#\"" + v120 + "\"#"
    let v397 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v396 
    let v398 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v395; v397|]
    let v401 : unativeint = 1 |> unativeint 
    let v410 : unativeint = 0 |> unativeint 
    let v419 : bool = v410 = v410 
    let v430 : clap_builder_ValueRange =
        if v419 then
            let v426 : string = "clap::builder::ValueRange::new(v401..)"
            let v427 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v426 
            v427
        else
            let v428 : string = "clap::builder::ValueRange::new(v401..v410)"
            let v429 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v428 
            v429
    let v431 : string = "r#\"" + v156 + "\"#"
    let v432 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v431 
    let v433 : string = "clap::Arg::new($0)"
    let v434 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v432 v433 
    let v435 : string = "$0.short($1)"
    let v436 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v434, 'd') v435 
    let v437 : string = "r#\"" + v156 + "\"#"
    let v438 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v437 
    let v439 : string = "$0.long($1)"
    let v440 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v436, v438) v439 
    let v441 : string = "$0.to_vec()"
    let v442 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v398 v441 
    let v443 : string = "$0.value_names($1)"
    let v444 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v440, v442) v443 
    let v445 : string = "$0.num_args($1)"
    let v446 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v444, v430) v445 
    let v447 : string = "clap::ArgAction::Append"
    let v448 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v447 
    let v449 : string = "$0.action($1)"
    let v450 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v446, v448) v449 
    let v451 : string = "clap::Command::arg($0, $1)"
    let v452 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v393, v450) v451 
    let v453 : string = "clap::Command::subcommand($0, v452)"
    let v454 : clap_Command = Fable.Core.RustInterop.emitRustExpr v374 v453 
    let v455 : string = "dib"
    let v456 : string = "r#\"" + v455 + "\"#"
    let v457 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v456 
    let v458 : string = "clap::Command::new($0)"
    let v459 : clap_Command = Fable.Core.RustInterop.emitRustExpr v457 v458 
    let v460 : string = "path"
    let v461 : string = "r#\"" + v460 + "\"#"
    let v462 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v461 
    let v463 : string = "clap::Arg::new($0)"
    let v464 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v462 v463 
    let v465 : string = "$0.short($1)"
    let v466 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v464, 'p') v465 
    let v467 : string = "r#\"" + v460 + "\"#"
    let v468 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v467 
    let v469 : string = "$0.long($1)"
    let v470 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v466, v468) v469 
    let v471 : string = "$0.required($1)"
    let v472 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v470, true) v471 
    let v473 : string = "clap::Command::arg($0, $1)"
    let v474 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v459, v472) v473 
    let v475 : string = "u8"
    let v476 : string = "clap::value_parser!(" + v475 + ").into()"
    let v477 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v476 
    let v478 : string = "retries"
    let v479 : string = "r#\"" + v478 + "\"#"
    let v480 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v479 
    let v481 : string = "clap::Arg::new($0)"
    let v482 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v480 v481 
    let v483 : string = "$0.short($1)"
    let v484 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v482, 'r') v483 
    let v485 : string = "r#\"" + v478 + "\"#"
    let v486 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v485 
    let v487 : string = "$0.long($1)"
    let v488 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v484, v486) v487 
    let v489 : string = "$0.value_parser($1)"
    let v490 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v488, v477) v489 
    let v491 : string = "clap::Command::arg($0, $1)"
    let v492 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v474, v490) v491 
    let v493 : string = "working-directory"
    let v494 : string = "r#\"" + v493 + "\"#"
    let v495 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v494 
    let v496 : string = "clap::Arg::new($0)"
    let v497 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v495 v496 
    let v498 : string = "$0.short($1)"
    let v499 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v497, 'w') v498 
    let v500 : string = "r#\"" + v493 + "\"#"
    let v501 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v500 
    let v502 : string = "$0.long($1)"
    let v503 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v499, v501) v502 
    let v504 : string = "clap::Command::arg($0, $1)"
    let v505 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v492, v503) v504 
    let v506 : string = "clap::Command::subcommand($0, v505)"
    let v507 : clap_Command = Fable.Core.RustInterop.emitRustExpr v454 v506 
    v507
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method1 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method3 () : string =
    let v0 : string = ""
    v0
and method2 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "std::env::var(&*$0)"
    let v5 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "true; let _result = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; $0 })"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "_result"
    let v15 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = method3()
    let v17 : string = "$0.unwrap_or($1)"
    let v18 : string = Fable.Core.RustInterop.emitRustExpr struct (v15, v16) v17 
    v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "std::env::var(&*$0)"
    let v20 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v19 
    let v21 : string = "true; let _result = $0.map(|x| { //"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "x"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "true; $0 })"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "_result"
    let v30 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = method3()
    let v32 : string = "$0.unwrap_or($1)"
    let v33 : string = Fable.Core.RustInterop.emitRustExpr struct (v30, v31) v32 
    v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "std::env::var(&*$0)"
    let v35 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "true; let _result = $0.map(|x| { //"
    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : string = "x"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "true; $0 })"
    let v43 : bool = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "_result"
    let v45 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v44 
    let v46 : string = method3()
    let v47 : string = "$0.unwrap_or($1)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v47 
    v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : string = "process.env[$0] ?? \"\""
    let v50 : string = Fable.Core.JsInterop.emitJsExpr v0 v49 
    v50 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : string = "os"
    let v54 : IOsEnviron = Fable.Core.PyInterop.importAll v53 
    let v55 : string = "v54.environ"
    let v56 : obj = Fable.Core.PyInterop.emitPyExpr () v55 
    let v65 : string = "v56.get($0)"
    let v66 : string = Fable.Core.PyInterop.emitPyExpr v0 v65 
    let mutable _v66 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v75 : (string -> string option) = Option.ofObj
    let v76 : string option = v75 v66
    v76 
    #else
    Some v66 
    #endif
    |> fun x -> _v66 <- Some x
    let v77 : string option = match _v66 with Some x -> x | None -> failwith "optionm'.of_obj / _v66=None"
    let v86 : US3 option = None
    let _v86 = ref v86 
    match v77 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v87 : string = x
    let v88 : US3 = US3_0(v87)
    v88 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v86.Value <- x
    let v89 : US3 option = _v86.Value 
    let v112 : US3 = US3_1
    let v113 : US3 = v89 |> Option.defaultValue v112 
    let v124 : string =
        match v113 with
        | US3_1 -> (* None *)
            let v122 : string = ""
            v122
        | US3_0(v121) -> (* Some *)
            v121
    v124 
    #endif
#else
    let v125 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v126 : string = v125 v0
    let mutable _v126 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v129 : (string -> string option) = Option.ofObj
    let v130 : string option = v129 v126
    v130 
    #else
    Some v126 
    #endif
    |> fun x -> _v126 <- Some x
    let v131 : string option = match _v126 with Some x -> x | None -> failwith "optionm'.of_obj / _v126=None"
    let v140 : US3 option = None
    let _v140 = ref v140 
    match v131 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v141 : string = x
    let v142 : US3 = US3_0(v141)
    v142 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v140.Value <- x
    let v143 : US3 option = _v140.Value 
    let v166 : US3 = US3_1
    let v167 : US3 = v143 |> Option.defaultValue v166 
    let v178 : string =
        match v167 with
        | US3_1 -> (* None *)
            let v176 : string = ""
            v176
        | US3_0(v175) -> (* Some *)
            v175
    v178 
    #endif
    |> fun x -> _v3 <- Some x
    let v179 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v179
and method4 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure3 () (v0 : string) : unit =
    ()
and closure2 () (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) =
    let v3 : bool = true
    let mutable _v3 : struct (US1 * US2) option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = method1()
    let v5 : string = method2(v4)
    let v7 : bool = "Verbose" = v5
    let v11 : US1 =
        if v7 then
            let v8 : US0 = US0_0
            US1_0(v8)
        else
            US1_1
    let v56 : US1 =
        match v11 with
        | US1_1 -> (* None *)
            let v15 : bool = "Debug" = v5
            let v19 : US1 =
                if v15 then
                    let v16 : US0 = US0_1
                    US1_0(v16)
                else
                    US1_1
            match v19 with
            | US1_1 -> (* None *)
                let v23 : bool = "Info" = v5
                let v27 : US1 =
                    if v23 then
                        let v24 : US0 = US0_2
                        US1_0(v24)
                    else
                        US1_1
                match v27 with
                | US1_1 -> (* None *)
                    let v31 : bool = "Warning" = v5
                    let v35 : US1 =
                        if v31 then
                            let v32 : US0 = US0_3
                            US1_0(v32)
                        else
                            US1_1
                    match v35 with
                    | US1_1 -> (* None *)
                        let v39 : bool = "Critical" = v5
                        let v43 : US1 =
                            if v39 then
                                let v40 : US0 = US0_4
                                US1_0(v40)
                            else
                                US1_1
                        match v43 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v44) -> (* Some *)
                            US1_0(v44)
                    | US1_0(v36) -> (* Some *)
                        US1_0(v36)
                | US1_0(v28) -> (* Some *)
                    US1_0(v28)
            | US1_0(v20) -> (* Some *)
                US1_0(v20)
        | US1_0(v12) -> (* Some *)
            US1_0(v12)
    let v57 : string = method4()
    let v58 : string = method2(v57)
    let v60 : bool = v58 = "True"
    let v82 : US2 =
        if v60 then
            let v63 : System.DateTime = System.DateTime.Now
            let v72 : (System.DateTime -> int64) = _.Ticks
            let v73 : int64 = v72 v63
            US2_0(v73)
        else
            US2_1
    struct (v56, v82) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v83 : US1 = US1_1
    let v84 : US2 = US2_1
    struct (v83, v84) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : US1 = US1_1
    let v86 : US2 = US2_1
    struct (v85, v86) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : string = method1()
    let v88 : string = method2(v87)
    let v90 : bool = "Verbose" = v88
    let v94 : US1 =
        if v90 then
            let v91 : US0 = US0_0
            US1_0(v91)
        else
            US1_1
    let v139 : US1 =
        match v94 with
        | US1_1 -> (* None *)
            let v98 : bool = "Debug" = v88
            let v102 : US1 =
                if v98 then
                    let v99 : US0 = US0_1
                    US1_0(v99)
                else
                    US1_1
            match v102 with
            | US1_1 -> (* None *)
                let v106 : bool = "Info" = v88
                let v110 : US1 =
                    if v106 then
                        let v107 : US0 = US0_2
                        US1_0(v107)
                    else
                        US1_1
                match v110 with
                | US1_1 -> (* None *)
                    let v114 : bool = "Warning" = v88
                    let v118 : US1 =
                        if v114 then
                            let v115 : US0 = US0_3
                            US1_0(v115)
                        else
                            US1_1
                    match v118 with
                    | US1_1 -> (* None *)
                        let v122 : bool = "Critical" = v88
                        let v126 : US1 =
                            if v122 then
                                let v123 : US0 = US0_4
                                US1_0(v123)
                            else
                                US1_1
                        match v126 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v127) -> (* Some *)
                            US1_0(v127)
                    | US1_0(v119) -> (* Some *)
                        US1_0(v119)
                | US1_0(v111) -> (* Some *)
                    US1_0(v111)
            | US1_0(v103) -> (* Some *)
                US1_0(v103)
        | US1_0(v95) -> (* Some *)
            US1_0(v95)
    let v140 : string = method4()
    let v141 : string = method2(v140)
    let v143 : bool = v141 = "True"
    let v165 : US2 =
        if v143 then
            let v146 : System.DateTime = System.DateTime.Now
            let v155 : (System.DateTime -> int64) = _.Ticks
            let v156 : int64 = v155 v146
            US2_0(v156)
        else
            US2_1
    struct (v139, v165) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v166 : string = method1()
    let v167 : string = method2(v166)
    let v169 : bool = "Verbose" = v167
    let v173 : US1 =
        if v169 then
            let v170 : US0 = US0_0
            US1_0(v170)
        else
            US1_1
    let v218 : US1 =
        match v173 with
        | US1_1 -> (* None *)
            let v177 : bool = "Debug" = v167
            let v181 : US1 =
                if v177 then
                    let v178 : US0 = US0_1
                    US1_0(v178)
                else
                    US1_1
            match v181 with
            | US1_1 -> (* None *)
                let v185 : bool = "Info" = v167
                let v189 : US1 =
                    if v185 then
                        let v186 : US0 = US0_2
                        US1_0(v186)
                    else
                        US1_1
                match v189 with
                | US1_1 -> (* None *)
                    let v193 : bool = "Warning" = v167
                    let v197 : US1 =
                        if v193 then
                            let v194 : US0 = US0_3
                            US1_0(v194)
                        else
                            US1_1
                    match v197 with
                    | US1_1 -> (* None *)
                        let v201 : bool = "Critical" = v167
                        let v205 : US1 =
                            if v201 then
                                let v202 : US0 = US0_4
                                US1_0(v202)
                            else
                                US1_1
                        match v205 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v206) -> (* Some *)
                            US1_0(v206)
                    | US1_0(v198) -> (* Some *)
                        US1_0(v198)
                | US1_0(v190) -> (* Some *)
                    US1_0(v190)
            | US1_0(v182) -> (* Some *)
                US1_0(v182)
        | US1_0(v174) -> (* Some *)
            US1_0(v174)
    let v219 : string = method4()
    let v220 : string = method2(v219)
    let v222 : bool = v220 = "True"
    let v244 : US2 =
        if v222 then
            let v225 : System.DateTime = System.DateTime.Now
            let v234 : (System.DateTime -> int64) = _.Ticks
            let v235 : int64 = v234 v225
            US2_0(v235)
        else
            US2_1
    struct (v218, v244) 
    #endif
#else
    let v245 : string = method1()
    let v246 : string = method2(v245)
    let v248 : bool = "Verbose" = v246
    let v252 : US1 =
        if v248 then
            let v249 : US0 = US0_0
            US1_0(v249)
        else
            US1_1
    let v297 : US1 =
        match v252 with
        | US1_1 -> (* None *)
            let v256 : bool = "Debug" = v246
            let v260 : US1 =
                if v256 then
                    let v257 : US0 = US0_1
                    US1_0(v257)
                else
                    US1_1
            match v260 with
            | US1_1 -> (* None *)
                let v264 : bool = "Info" = v246
                let v268 : US1 =
                    if v264 then
                        let v265 : US0 = US0_2
                        US1_0(v265)
                    else
                        US1_1
                match v268 with
                | US1_1 -> (* None *)
                    let v272 : bool = "Warning" = v246
                    let v276 : US1 =
                        if v272 then
                            let v273 : US0 = US0_3
                            US1_0(v273)
                        else
                            US1_1
                    match v276 with
                    | US1_1 -> (* None *)
                        let v280 : bool = "Critical" = v246
                        let v284 : US1 =
                            if v280 then
                                let v281 : US0 = US0_4
                                US1_0(v281)
                            else
                                US1_1
                        match v284 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v285) -> (* Some *)
                            US1_0(v285)
                    | US1_0(v277) -> (* Some *)
                        US1_0(v277)
                | US1_0(v269) -> (* Some *)
                    US1_0(v269)
            | US1_0(v261) -> (* Some *)
                US1_0(v261)
        | US1_0(v253) -> (* Some *)
            US1_0(v253)
    let v298 : string = method4()
    let v299 : string = method2(v298)
    let v301 : bool = v299 = "True"
    let v323 : US2 =
        if v301 then
            let v304 : System.DateTime = System.DateTime.Now
            let v313 : (System.DateTime -> int64) = _.Ticks
            let v314 : int64 = v313 v304
            US2_0(v314)
        else
            US2_1
    struct (v297, v323) 
    #endif
    |> fun x -> _v3 <- Some x
    let struct (v324 : US1, v325 : US2) = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    let v411 : Mut2 = {l0 = true} : Mut2
    let v412 : Mut0 = {l0 = 0L} : Mut0
    let v415 : US0 =
        match v324 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v413) -> (* Some *)
            v413
    let v416 : Mut3 = {l0 = v415} : Mut3
    let v417 : (string -> unit) = closure3()
    let v418 : Mut1 = {l0 = v417} : Mut1
    let v431 : int64 option =
        match v325 with
        | US2_1 -> (* None *)
            let v429 : int64 option = None
            v429
        | US2_0(v419) -> (* Some *)
            let v422 : int64 option = Some v419 
            v422
    struct (v412, v418, v411, v416, v431)
and closure4 () () : string =
    let v0 : string = $"spiral_builder.main"
    v0
and closure5 (v0 : (string [])) () : (string []) =
    v0
and method6 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method7 () : string =
    let v0 : string = ""
    v0
and method8 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method9 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method11 (v0 : Mut4, v1 : string) : unit =
    let v4 : string = $"{v1}"
    let v11 : string = v0.l0
    let v12 : string = v11 + v4 
    v0.l0 <- v12
    ()
and method12 (v0 : Mut4) : unit =
    ()
and method13 (v0 : Mut4, v1 : (string [])) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method10 (v0 : Mut4, v1 : (string [])) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "args"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method13(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure6 (v0 : US0, v1 : (unit -> string), v2 : (unit -> (string []))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let v1161 : (string []) = v2 ()
    let v1162 : string = ""
    let v1163 : Mut4 = {l0 = v1162} : Mut4
    method10(v1163, v1161)
    let v1164 : string = v1163.l0
    let v1167 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1164}"
    let v1174 : char list = []
    let v1179 : (char list -> (char [])) = List.toArray
    let v1180 : (char []) = v1179 v1174
    let v1187 : string = v1167.TrimStart v1180 
    let v1226 : char list = []
    let v1229 : char list = '/' :: v1226 
    let v1238 : char list = ' ' :: v1229 
    let v1249 : (char list -> (char [])) = List.toArray
    let v1250 : (char []) = v1249 v1238
    let v1257 : string = v1187.TrimEnd v1250 
    v1257
and method14 (v0 : US0, v1 : (unit -> string)) : unit =
    let v4 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v5 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v4 v5 |> Some
    let struct (v13 : Mut0, v14 : Mut1, v15 : Mut2, v16 : Mut3, v17 : int64 option) = State.trace_state.Value
    let v34 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v4 v34 |> Some
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : int64 option) = State.trace_state.Value
    let v61 : US0 = v45.l0
    let v62 : bool = v44.l0
    let v63 : bool = v62 = false
    let v67 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v66 : bool = v64 >= v65
            v66
    if v67 then
        let v68 : int64 = v13.l0
        let v69 : int64 = v68 + 1L
        v13.l0 <- v69
        let v72 : string = $"%s{v1 ()}"
        let v81 : bool = true
        let mutable _v81 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v82 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v72 v82 
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v83 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v72 v83 
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v84 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v72 v84 
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v72 
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v72 
        () 
        #endif
#else
        System.Console.WriteLine v72 
        () 
        #endif
        |> fun x -> _v81 <- Some x
        match _v81 with Some x -> x | None -> failwith "base.run_target / _v81=None"
        let v113 : (string -> unit) = v14.l0
        v113 v72
and method5 (v0 : US0, v1 : (unit -> string), v2 : (unit -> (string []))) : unit =
    let v3 : (unit -> string) = closure6(v0, v1, v2)
    method14(v0, v3)
and closure7 () (v0 : Ref<Str>) : std_string_String =
    let v1 : string = "String::from($0)"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and method16 () : string =
    let v0 : string = "py-path"
    v0
and method17 () : string =
    let v0 : string = "env"
    v0
and method18 () : string =
    let v0 : string = "deps"
    v0
and method19 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method22 (v0 : string) : string =
    v0
and method21 (v0 : string, v1 : string) : struct (string * string) =
    let v2 : string = method22(v0)
    struct (v1, v2)
and method20 (v0 : string, v1 : string) : string =
    let v4 : bool = true
    let mutable _v4 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : string = "String::from($0)"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "std::path::PathBuf::from($0)"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v11 
    let v13 : string = "String::from($0)"
    let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "$0.join($1)"
    let v16 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v10, v14) v15 
    let v17 : string = "$0.display()"
    let v18 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v21 : bool = true
    let mutable _v21 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v22 : string = "format!(\"{}\", $0)"
    let v23 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v22 
    v23 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : string = "format!(\"{}\", $0)"
    let v25 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v24 
    v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : string = "format!(\"{}\", $0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v26 
    v27 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = null |> unbox<std_string_String>
    v39 
    #endif
#else
    let v48 : std_string_String = null |> unbox<std_string_String>
    v48 
    #endif
    |> fun x -> _v21 <- Some x
    let v55 : std_string_String = match _v21 with Some x -> x | None -> failwith "base.run_target / _v21=None"
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v55 v70 
    v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : US10 = US10_1
    let v73 : US11 = US11_2(v72)
    let v74 : string = $"file_system.(</>) / target: {v73} / a: {v0} / b: {v1}"
    let v75 : string = failwith<string> v74
    v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v78 : string = null |> unbox<string>
    v78 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = "path"
    let v86 : IPathJoin = Fable.Core.JsInterop.importAll v85 
    let struct (v87 : string, v88 : string) = method21(v1, v0)
    let v89 : string = "v86.join($0, $1)"
    let v90 : string = Fable.Core.JsInterop.emitJsExpr struct (v87, v88) v89 
    v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : US10 = US10_0
    let v92 : US11 = US11_4(v91)
    let v93 : string = $"file_system.(</>) / target: {v92} / a: {v0} / b: {v1}"
    let v94 : string = failwith<string> v93
    v94 
    #endif
#else
    let v95 : string = System.IO.Path.Combine (v0, v1)
    v95 
    #endif
    |> fun x -> _v4 <- Some x
    let v96 : string = match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    v96
and method24 (v0 : string) : bool =
    let v3 : bool = true
    let mutable _v3 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.exists()"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v17 : bool =
        if v11 then
            true
        else
            let v12 : string = "$0.is_dir()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr v9 v12 
            if v13 then
                true
            else
                let v14 : string = "$0.is_symlink()"
                let v15 : bool = Fable.Core.RustInterop.emitRustExpr v9 v14 
                v15
    v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : bool = null |> unbox<bool>
    v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v29 : bool = null |> unbox<bool>
    v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : string = "fs"
    let v37 : IFsExistsSync = Fable.Core.JsInterop.importAll v36 
    let v38 : string = "$0.existsSync($1)"
    let v39 : bool = Fable.Core.JsInterop.emitJsExpr struct (v37, v0) v38 
    v39 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : bool = null |> unbox<bool>
    v42 
    #endif
#else
    let v49 : (string -> bool) = System.IO.Directory.Exists
    let v50 : bool = v49 v0
    v50 
    #endif
    |> fun x -> _v3 <- Some x
    let v51 : bool = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v51
and method26 (v0 : string) : string option =
    let v3 : bool = true
    let mutable _v3 : US3 option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0?"
    let v13 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.display()"
    let v15 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v18 : bool = true
    let mutable _v18 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v19 
    v20 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : string = "format!(\"{}\", $0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : string = "format!(\"{}\", $0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : std_string_String = null |> unbox<std_string_String>
    v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = null |> unbox<std_string_String>
    v36 
    #endif
#else
    let v45 : std_string_String = null |> unbox<std_string_String>
    v45 
    #endif
    |> fun x -> _v18 <- Some x
    let v52 : std_string_String = match _v18 with Some x -> x | None -> failwith "base.run_target / _v18=None"
    let v67 : string = "fable_library_rust::String_::fromString($0)"
    let v68 : string = Fable.Core.RustInterop.emitRustExpr v52 v67 
    let v69 : US3 = US3_0(v68)
    v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : US3 = null |> unbox<US3>
    v72 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : US3 = null |> unbox<US3>
    v81 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v88 : string = "path"
    let v89 : IPathDirname = Fable.Core.JsInterop.importAll v88 
    let v90 : string = "v89.dirname($0)"
    let v91 : string = Fable.Core.JsInterop.emitJsExpr v0 v90 
    let v92 : US3 = US3_0(v91)
    v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : US3 = null |> unbox<US3>
    v95 
    #endif
#else
    let v102 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.GetParent
    let v103 : System.IO.DirectoryInfo = v102 v0
    let v106 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let v115 : bool = v103 = v106 
    let v188 : US3 =
        if v115 then
            US3_1
        else
            let v125 : bool = true
            let mutable _v125 : string option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v128 : string = null |> unbox<string>
            v128 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v137 : string = null |> unbox<string>
            v137 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v146 : string = null |> unbox<string>
            v146 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v155 : string = null |> unbox<string>
            v155 
            #endif
#if FABLE_COMPILER_PYTHON
            let v164 : string = null |> unbox<string>
            v164 
            #endif
#else
            let v171 : string = v103.FullName
            v171 
            #endif
            |> fun x -> _v125 <- Some x
            let v172 : string = match _v125 with Some x -> x | None -> failwith "base.run_target / _v125=None"
            US3_0(v172)
    v188 
    #endif
    |> fun x -> _v3 <- Some x
    let v189 : US3 = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    match v189 with
    | US3_1 -> (* None *)
        let v214 : string option = None
        v214
    | US3_0(v204) -> (* Some *)
        let v207 : string option = Some v204 
        v207
and closure8 () (v0 : string) : string option =
    method26(v0)
and method25 () : (string -> string option) =
    closure8()
and method27 (v0 : string, v1 : string, v2 : string) : US12 =
    let v3 : string = method20(v2, v0)
    let v4 : bool = method24(v3)
    if v4 then
        US12_0(v2)
    else
        let v6 : (string -> string option) = method25()
        let v7 : string option = v6 v2
        let v10 : US3 option = None
        let _v10 = ref v10 
        match v7 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v11 : string = x
        let v12 : US3 = US3_0(v11)
        v12 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v10.Value <- x
        let v13 : US3 option = _v10.Value 
        let v36 : US3 = US3_1
        let v37 : US3 = v13 |> Option.defaultValue v36 
        match v37 with
        | US3_1 -> (* None *)
            let v47 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v2}')"""
            US12_1(v47)
        | US3_0(v45) -> (* Some *)
            method27(v0, v1, v45)
and method23 (v0 : string, v1 : string) : US12 =
    let v2 : string = method20(v1, v0)
    let v3 : bool = method24(v2)
    if v3 then
        US12_0(v1)
    else
        let v5 : (string -> string option) = method25()
        let v6 : string option = v5 v1
        let v9 : US3 option = None
        let _v9 = ref v9 
        match v6 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v10 : string = x
        let v11 : US3 = US3_0(v10)
        v11 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v9.Value <- x
        let v12 : US3 option = _v9.Value 
        let v35 : US3 = US3_1
        let v36 : US3 = v12 |> Option.defaultValue v35 
        match v36 with
        | US3_1 -> (* None *)
            let v46 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v1}')"""
            US12_1(v46)
        | US3_0(v44) -> (* Some *)
            method27(v0, v1, v44)
and closure9 () () : string =
    let v0 : string = "file_system.get_workspace_root"
    v0
and closure10 (v0 : string) () : string =
    v0
and method29 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "error"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method11(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure11 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let v1161 : string = v2 ()
    let v1162 : string = ""
    let v1163 : Mut4 = {l0 = v1162} : Mut4
    method29(v1163, v1161)
    let v1164 : string = v1163.l0
    let v1167 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1164}"
    let v1174 : char list = []
    let v1179 : (char list -> (char [])) = List.toArray
    let v1180 : (char []) = v1179 v1174
    let v1187 : string = v1167.TrimStart v1180 
    let v1226 : char list = []
    let v1229 : char list = '/' :: v1226 
    let v1238 : char list = ' ' :: v1229 
    let v1249 : (char list -> (char [])) = List.toArray
    let v1250 : (char []) = v1249 v1238
    let v1257 : string = v1187.TrimEnd v1250 
    v1257
and method28 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) : unit =
    let v3 : (unit -> string) = closure11(v0, v1, v2)
    method14(v0, v3)
and method30 () : string =
    let v2 : bool = true
    let mutable _v2 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "std::env::current_dir()"
    let v4 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "$0.unwrap()"
    let v6 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.display()"
    let v8 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v11 : bool = true
    let mutable _v11 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "format!(\"{}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v12 
    v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "format!(\"{}\", $0)"
    let v15 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v14 
    v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v16 
    v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : std_string_String = null |> unbox<std_string_String>
    v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v29 : std_string_String = null |> unbox<std_string_String>
    v29 
    #endif
#else
    let v38 : std_string_String = null |> unbox<std_string_String>
    v38 
    #endif
    |> fun x -> _v11 <- Some x
    let v45 : std_string_String = match _v11 with Some x -> x | None -> failwith "base.run_target / _v11=None"
    let v60 : string = "fable_library_rust::String_::fromString($0)"
    let v61 : string = Fable.Core.RustInterop.emitRustExpr v45 v60 
    v61 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = null |> unbox<string>
    v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = null |> unbox<string>
    v73 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v82 : string = null |> unbox<string>
    v82 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : string = null |> unbox<string>
    v91 
    #endif
#else
    let v98 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v99 : string = v98 ()
    v99 
    #endif
    |> fun x -> _v2 <- Some x
    let v100 : string = match _v2 with Some x -> x | None -> failwith "base.run_target / _v2=None"
    v100
and method31 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.parent()"
    let v11 : Ref<std_path_Path> option = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.unwrap()"
    let v13 : Ref<std_path_Path> = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.display()"
    let v15 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v18 : bool = true
    let mutable _v18 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v19 
    v20 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : string = "format!(\"{}\", $0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : string = "format!(\"{}\", $0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : std_string_String = null |> unbox<std_string_String>
    v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = null |> unbox<std_string_String>
    v36 
    #endif
#else
    let v45 : std_string_String = null |> unbox<std_string_String>
    v45 
    #endif
    |> fun x -> _v18 <- Some x
    let v52 : std_string_String = match _v18 with Some x -> x | None -> failwith "base.run_target / _v18=None"
    let v67 : string = "fable_library_rust::String_::fromString($0)"
    let v68 : string = Fable.Core.RustInterop.emitRustExpr v52 v67 
    v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : (string -> string) = System.IO.Path.GetDirectoryName
    let v70 : string = v69 v0
    v70 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = null |> unbox<string>
    v73 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v80 : (string -> string) = System.IO.Path.GetDirectoryName
    let v81 : string = v80 v0
    v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v82 : (string -> string) = System.IO.Path.GetDirectoryName
    let v83 : string = v82 v0
    v83 
    #endif
#else
    let v84 : (string -> string) = System.IO.Path.GetDirectoryName
    let v85 : string = v84 v0
    v85 
    #endif
    |> fun x -> _v3 <- Some x
    let v86 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v86
and method34 (v0 : string) : bool =
    let v3 : bool = true
    let mutable _v3 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.exists()"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v14 : bool =
        if v11 then
            let v12 : string = "$0.is_file()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr v9 v12 
            v13
        else
            false
    v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : bool = null |> unbox<bool>
    v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : bool = null |> unbox<bool>
    v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : string = "fs"
    let v34 : IFsExistsSync = Fable.Core.JsInterop.importAll v33 
    let v35 : string = "$0.existsSync($1)"
    let v36 : bool = Fable.Core.JsInterop.emitJsExpr struct (v34, v0) v35 
    v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : bool = null |> unbox<bool>
    v39 
    #endif
#else
    let v46 : (string -> bool) = System.IO.File.Exists
    let v47 : bool = v46 v0
    v47 
    #endif
    |> fun x -> _v3 <- Some x
    let v48 : bool = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v48
and method33 (v0 : string, v1 : string) : bool =
    let v4 : bool = true
    let mutable _v4 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : bool = method34(v0)
    let v6 : bool = v5 = false
    let v129 : bool =
        if v6 then
            false
        else
            let v9 : bool = true
            let mutable _v9 : string option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v12 : bool = true
            let mutable _v12 : Vec<uint8> option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v13 : string = "std::fs::read(&*$0).unwrap()"
            let v14 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v0 v13 
            v14 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v17 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v17 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v26 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v26 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v35 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v35 
            #endif
#if FABLE_COMPILER_PYTHON
            let v44 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v44 
            #endif
#else
            let v51 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v52 : string = "$0.to_vec()"
            let v53 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v51 v52 
            v53 
            #endif
            |> fun x -> _v12 <- Some x
            let v54 : Vec<uint8> = match _v12 with Some x -> x | None -> failwith "base.run_target / _v12=None"
            let v69 : Vec<uint8> = method19(v54)
            let v70 : string = "std::string::String::from_utf8($0)"
            let v71 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v69 v70 
            let v72 : string = "$0.unwrap()"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v71 v72 
            let v74 : string = "fable_library_rust::String_::fromString($0)"
            let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
            v75 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v78 : string = null |> unbox<string>
            v78 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v87 : string = null |> unbox<string>
            v87 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v96 : string = null |> unbox<string>
            v96 
            #endif
#if FABLE_COMPILER_PYTHON
            let v105 : string = null |> unbox<string>
            v105 
            #endif
#else
            let v112 : string = v0 |> System.IO.File.ReadAllText
            v112 
            #endif
            |> fun x -> _v9 <- Some x
            let v113 : string = match _v9 with Some x -> x | None -> failwith "base.run_target / _v9=None"
            let v128 : bool = v1 = v113
            v128
    v129 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v132 : bool = null |> unbox<bool>
    v132 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : bool = null |> unbox<bool>
    v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v150 : bool = null |> unbox<bool>
    v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v159 : bool = null |> unbox<bool>
    v159 
    #endif
#else
    let v168 : bool = null |> unbox<bool>
    v168 
    #endif
    |> fun x -> _v4 <- Some x
    let v175 : bool = match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    v175
and method36 (v0 : string) : string =
    v0
and closure12 () (v0 : std_io_Error) : std_string_String =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v37
and method37 () : (std_io_Error -> std_string_String) =
    closure12()
and closure13 () () : US13 =
    US13_0
and closure14 () (v0 : std_string_String) : US13 =
    US13_1(v0)
and closure15 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure16 (v0 : string, v1 : std_string_String) () : struct (string * std_string_String) =
    struct (v0, v1)
and method40 (v0 : Mut4, v1 : std_string_String) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method39 (v0 : Mut4, v1 : string, v2 : std_string_String) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "dir"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method11(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "error"
    method11(v0, v7)
    method11(v0, v5)
    method40(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure17 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * std_string_String))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : string, v1162 : std_string_String) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method39(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method38 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * std_string_String))) : unit =
    let v3 : (unit -> string) = closure17(v0, v1, v2)
    method14(v0, v3)
and closure18 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure19 (v0 : string) () : string =
    v0
and method42 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "dir"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method11(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure20 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let v1161 : string = v2 ()
    let v1162 : string = ""
    let v1163 : Mut4 = {l0 = v1162} : Mut4
    method42(v1163, v1161)
    let v1164 : string = v1163.l0
    let v1167 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1164}"
    let v1174 : char list = []
    let v1179 : (char list -> (char [])) = List.toArray
    let v1180 : (char []) = v1179 v1174
    let v1187 : string = v1167.TrimStart v1180 
    let v1226 : char list = []
    let v1229 : char list = '/' :: v1226 
    let v1238 : char list = ' ' :: v1229 
    let v1249 : (char list -> (char [])) = List.toArray
    let v1250 : (char []) = v1249 v1238
    let v1257 : string = v1187.TrimEnd v1250 
    v1257
and method41 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) : unit =
    let v3 : (unit -> string) = closure20(v0, v1, v2)
    method14(v0, v3)
and method45 (v0 : string) : string =
    v0
and method44 (v0 : bool, v1 : string) : unit =
    let v4 : bool = true
    let mutable _v4 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = method45(v1)
    let v6 : bool = method24(v5)
    if v6 then
        if v0 then
            let v7 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v5 v7 
            ()
        else
            let v8 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v5 v8 
            ()
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    () 
    #endif
    |> fun x -> _v4 <- Some x
    match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    ()
and closure21 (v0 : string) () : unit =
    let v1 : bool = true
    method44(v1, v0)
and method43 (v0 : string) : (unit -> unit) =
    closure21(v0)
and method46 (v0 : string) : (unit -> unit) =
    closure21(v0)
and closure22 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure23 (v0 : string, v1 : string) () : struct (string * string) =
    struct (v0, v1)
and method48 (v0 : Mut4, v1 : string, v2 : string) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "dir"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method11(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "result"
    method11(v0, v7)
    method11(v0, v5)
    method11(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure24 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : string, v1162 : string) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method48(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method47 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) : unit =
    let v3 : (unit -> string) = closure24(v0, v1, v2)
    method14(v0, v3)
and closure26 () () : string =
    let v0 : string = "file_system.delete_directory_async"
    v0
and method51 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.file_name()"
    let v11 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.unwrap()"
    let v13 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.to_os_string()"
    let v15 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "$0.to_str()"
    let v17 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "$0.unwrap()"
    let v19 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "String::from($0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "fable_library_rust::String_::fromString($0)"
    let v23 : string = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : US10 = US10_1
    let v25 : US11 = US11_2(v24)
    let v26 : string = $"file_system.get_file_name / target: {v25} / path: {v0}"
    let v27 : string = failwith<string> v26
    v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = null |> unbox<string>
    v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : US10 = US10_0
    let v38 : US11 = US11_3(v37)
    let v39 : string = $"file_system.get_file_name / target: {v38} / path: {v0}"
    let v40 : string = failwith<string> v39
    v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v41 : US10 = US10_0
    let v42 : US11 = US11_4(v41)
    let v43 : string = $"file_system.get_file_name / target: {v42} / path: {v0}"
    let v44 : string = failwith<string> v43
    v44 
    #endif
#else
    let v45 : (string -> string) = System.IO.Path.GetFileName
    let v46 : string = v45 v0
    v46 
    #endif
    |> fun x -> _v3 <- Some x
    let v47 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v47
and closure27 (v0 : string, v1 : string) () : struct (string * string) =
    let v2 : string = method51(v0)
    struct (v1, v2)
and method53 (v0 : Mut4, v1 : string, v2 : string) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "ex"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method11(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "path"
    method11(v0, v7)
    method11(v0, v5)
    method11(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure28 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : string, v1162 : string) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method53(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method52 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) : unit =
    let v3 : (unit -> string) = closure28(v0, v1, v2)
    method14(v0, v3)
and method50 (v0 : string, v1 : int64) : Async<int64> =
    let v4 : bool = true
    let mutable _v4 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<int64> = null |> unbox<Async<int64>>
    v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : Async<int64> = null |> unbox<Async<int64>>
    v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : Async<int64> = null |> unbox<Async<int64>>
    v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v43 : Async<int64> = null |> unbox<Async<int64>>
    v43 
    #endif
#else
    let v50 : Async<int64> option = None
    let mutable _v50 = v50 
    async {
    try
    let v51 : bool = true
    method44(v51, v0)
    return v1 
    with ex ->
    let v52 : exn = ex
    let v53 : int64 = v1 % 100L
    let v54 : bool = v53 = 0L
    if v54 then
        let v57 : bool = true
        let mutable _v57 : string option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v60 : string = $"%A{v52}"
        v60 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v69 : string = $"%A{v52}"
        v69 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v78 : string = $"%A{v52}"
        v78 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v87 : string = $"%A{v52}"
        v87 
        #endif
#if FABLE_COMPILER_PYTHON
        let v96 : string = $"%A{v52}"
        v96 
        #endif
#else
        let v103 : string = $"{v52.GetType ()}: {v52.Message}"
        v103 
        #endif
        |> fun x -> _v57 <- Some x
        let v104 : string = match _v57 with Some x -> x | None -> failwith "base.run_target / _v57=None"
        let v119 : US0 = US0_1
        let v120 : (unit -> string) = closure26()
        let v121 : (unit -> struct (string * string)) = closure27(v0, v104)
        method52(v119, v120, v121)
    let v124 : bool = true
    let mutable _v124 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v127 : Async<unit> = null |> unbox<Async<unit>>
    v127 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v136 : Async<unit> = null |> unbox<Async<unit>>
    v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v145 : Async<unit> = null |> unbox<Async<unit>>
    v145 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : Async<unit> = null |> unbox<Async<unit>>
    v154 
    #endif
#if FABLE_COMPILER_PYTHON
    let v163 : Async<unit> = null |> unbox<Async<unit>>
    v163 
    #endif
#else
    let v170 : (int32 -> Async<unit>) = Async.Sleep
    let v171 : Async<unit> = v170 10
    v171 
    #endif
    |> fun x -> _v124 <- Some x
    let v172 : Async<unit> = match _v124 with Some x -> x | None -> failwith "base.run_target / _v124=None"
    do! v172 
    let v187 : int64 = v1 + 1L
    let v188 : Async<int64> = method50(v0, v187)
    return! v188 
    (*
    let v189 : int64 = *)
    }
    |> fun x -> _v50 <- Some x
    let v190 : Async<int64> = match _v50 with Some x -> x | None -> failwith "async.new_async_unit / _v50=None"
    v190 
    #endif
    |> fun x -> _v4 <- Some x
    let v191 : Async<int64> = match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    v191
and closure25 (v0 : string) () : unit =
    let v3 : bool = true
    let mutable _v3 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : Async<int64> = null |> unbox<Async<int64>>
    v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : Async<int64> = null |> unbox<Async<int64>>
    v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : Async<int64> = null |> unbox<Async<int64>>
    v42 
    #endif
#else
    let v49 : int64 = 0L
    let v50 : Async<int64> = method50(v0, v49)
    v50 
    #endif
    |> fun x -> _v3 <- Some x
    let v51 : Async<int64> = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    let v68 : bool = true
    let mutable _v68 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v71 : Async<unit> = null |> unbox<Async<unit>>
    v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : Async<unit> = null |> unbox<Async<unit>>
    v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v89 : Async<unit> = null |> unbox<Async<unit>>
    v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v98 : Async<unit> = null |> unbox<Async<unit>>
    v98 
    #endif
#if FABLE_COMPILER_PYTHON
    let v107 : Async<unit> = null |> unbox<Async<unit>>
    v107 
    #endif
#else
    let v114 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v115 : Async<unit> = v114 v51
    v115 
    #endif
    |> fun x -> _v68 <- Some x
    let v116 : Async<unit> = match _v68 with Some x -> x | None -> failwith "base.run_target / _v68=None"
    let v133 : bool = true
    let mutable _v133 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v164 : (Async<unit> -> unit) = Async.RunSynchronously
    v164 v116
    () 
    #endif
    |> fun x -> _v133 <- Some x
    match _v133 with Some x -> x | None -> failwith "base.run_target / _v133=None"
    ()
and method49 (v0 : string) : (unit -> unit) =
    closure25(v0)
and method54 (v0 : string) : (unit -> unit) =
    closure25(v0)
and method35 (v0 : string) : System.IDisposable =
    let v3 : bool = true
    let mutable _v3 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = method36(v0)
    let v5 : string = "std::fs::create_dir_all(&*$0)"
    let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : (std_io_Error -> std_string_String) = method37()
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v8 
    let v10 : (unit -> US13) = closure13()
    let v11 : (std_string_String -> US13) = closure14()
    let v12 : US13 = match v9 with Ok () -> v10 () | Error x -> v11 x
    match v12 with
    | US13_1(v16) -> (* Error *)
        let v17 : US0 = US0_4
        let v18 : (unit -> string) = closure15()
        let v19 : (unit -> struct (string * std_string_String)) = closure16(v4, v16)
        method38(v17, v18, v19)
    | US13_0 -> (* Ok *)
        let v13 : US0 = US0_0
        let v14 : (unit -> string) = closure18()
        let v15 : (unit -> string) = closure19(v4)
        method41(v13, v14, v15)
    let v22 : bool = true
    let mutable _v22 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : (unit -> unit) = method43(v4)
    let v24 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v23 "$0()" )
    v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : (unit -> unit) = method43(v4)
    let v26 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v25 "$0()" )
    v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : (unit -> unit) = method43(v4)
    let v28 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v27 "$0()" )
    v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : (unit -> unit) = method46(v4)
    let v30 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v29 () }
    v30 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : (unit -> unit) = method46(v4)
    let v32 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v31 () }
    v32 
    #endif
#else
    let v33 : (unit -> unit) = method46(v4)
    let v34 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v33 () }
    v34 
    #endif
    |> fun x -> _v22 <- Some x
    let v35 : System.IDisposable = match _v22 with Some x -> x | None -> failwith "base.run_target / _v22=None"
    v35 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : System.IDisposable = null |> unbox<System.IDisposable>
    v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v54 : System.IDisposable = null |> unbox<System.IDisposable>
    v54 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : bool = true
    let mutable _v63 : System.IO.DirectoryInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v66 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v75 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v102 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v102 
    #endif
#else
    let v109 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v110 : System.IO.DirectoryInfo = v109 v0
    v110 
    #endif
    |> fun x -> _v63 <- Some x
    let v111 : System.IO.DirectoryInfo = match _v63 with Some x -> x | None -> failwith "base.run_target / _v63=None"
    let v128 : bool = true
    let mutable _v128 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : bool = null |> unbox<bool>
    v131 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v140 : bool = null |> unbox<bool>
    v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v149 : bool = null |> unbox<bool>
    v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v158 : bool = null |> unbox<bool>
    v158 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : bool = null |> unbox<bool>
    v167 
    #endif
#else
    let v174 : bool = v111.Exists
    v174 
    #endif
    |> fun x -> _v128 <- Some x
    let v175 : bool = match _v128 with Some x -> x | None -> failwith "base.run_target / _v128=None"
    let v190 : bool = v175 = false
    if v190 then
        let v193 : bool = true
        let mutable _v193 : System.DateTime option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v196 : System.DateTime = null |> unbox<System.DateTime>
        v196 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v205 : System.DateTime = null |> unbox<System.DateTime>
        v205 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v214 : System.DateTime = null |> unbox<System.DateTime>
        v214 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v223 : System.DateTime = null |> unbox<System.DateTime>
        v223 
        #endif
#if FABLE_COMPILER_PYTHON
        let v232 : System.DateTime = null |> unbox<System.DateTime>
        v232 
        #endif
#else
        let v239 : System.DateTime = v111.CreationTime
        v239 
        #endif
        |> fun x -> _v193 <- Some x
        let v240 : System.DateTime = match _v193 with Some x -> x | None -> failwith "base.run_target / _v193=None"
        let v255 : obj = {| Exists = v175; CreationTime = v240 |}
        let v258 : string = $"%A{v255}"
        let v265 : US0 = US0_1
        let v266 : (unit -> string) = closure22()
        let v267 : (unit -> struct (string * string)) = closure23(v0, v258)
        method47(v265, v266, v267)
    let v270 : bool = true
    let mutable _v270 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v271 : (unit -> unit) = method49(v0)
    let v272 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v271 "$0()" )
    v272 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v273 : (unit -> unit) = method49(v0)
    let v274 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v273 "$0()" )
    v274 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v275 : (unit -> unit) = method49(v0)
    let v276 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v275 "$0()" )
    v276 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v277 : (unit -> unit) = method54(v0)
    let v278 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v277 () }
    v278 
    #endif
#if FABLE_COMPILER_PYTHON
    let v279 : (unit -> unit) = method54(v0)
    let v280 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v279 () }
    v280 
    #endif
#else
    let v281 : (unit -> unit) = method54(v0)
    let v282 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v281 () }
    v282 
    #endif
    |> fun x -> _v270 <- Some x
    let v283 : System.IDisposable = match _v270 with Some x -> x | None -> failwith "base.run_target / _v270=None"
    v283 
    #endif
#if FABLE_COMPILER_PYTHON
    let v293 : bool = true
    let mutable _v293 : System.IO.DirectoryInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v296 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v296 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v305 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v305 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v314 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v314 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v323 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v323 
    #endif
#if FABLE_COMPILER_PYTHON
    let v332 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v332 
    #endif
#else
    let v339 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v340 : System.IO.DirectoryInfo = v339 v0
    v340 
    #endif
    |> fun x -> _v293 <- Some x
    let v341 : System.IO.DirectoryInfo = match _v293 with Some x -> x | None -> failwith "base.run_target / _v293=None"
    let v358 : bool = true
    let mutable _v358 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v361 : bool = null |> unbox<bool>
    v361 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v370 : bool = null |> unbox<bool>
    v370 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v379 : bool = null |> unbox<bool>
    v379 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v388 : bool = null |> unbox<bool>
    v388 
    #endif
#if FABLE_COMPILER_PYTHON
    let v397 : bool = null |> unbox<bool>
    v397 
    #endif
#else
    let v404 : bool = v341.Exists
    v404 
    #endif
    |> fun x -> _v358 <- Some x
    let v405 : bool = match _v358 with Some x -> x | None -> failwith "base.run_target / _v358=None"
    let v420 : bool = v405 = false
    if v420 then
        let v423 : bool = true
        let mutable _v423 : System.DateTime option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v426 : System.DateTime = null |> unbox<System.DateTime>
        v426 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v435 : System.DateTime = null |> unbox<System.DateTime>
        v435 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v444 : System.DateTime = null |> unbox<System.DateTime>
        v444 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v453 : System.DateTime = null |> unbox<System.DateTime>
        v453 
        #endif
#if FABLE_COMPILER_PYTHON
        let v462 : System.DateTime = null |> unbox<System.DateTime>
        v462 
        #endif
#else
        let v469 : System.DateTime = v341.CreationTime
        v469 
        #endif
        |> fun x -> _v423 <- Some x
        let v470 : System.DateTime = match _v423 with Some x -> x | None -> failwith "base.run_target / _v423=None"
        let v485 : obj = {| Exists = v405; CreationTime = v470 |}
        let v488 : string = $"%A{v485}"
        let v495 : US0 = US0_1
        let v496 : (unit -> string) = closure22()
        let v497 : (unit -> struct (string * string)) = closure23(v0, v488)
        method47(v495, v496, v497)
    let v500 : bool = true
    let mutable _v500 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v501 : (unit -> unit) = method49(v0)
    let v502 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v501 "$0()" )
    v502 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v503 : (unit -> unit) = method49(v0)
    let v504 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v503 "$0()" )
    v504 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v505 : (unit -> unit) = method49(v0)
    let v506 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v505 "$0()" )
    v506 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v507 : (unit -> unit) = method54(v0)
    let v508 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v507 () }
    v508 
    #endif
#if FABLE_COMPILER_PYTHON
    let v509 : (unit -> unit) = method54(v0)
    let v510 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v509 () }
    v510 
    #endif
#else
    let v511 : (unit -> unit) = method54(v0)
    let v512 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v511 () }
    v512 
    #endif
    |> fun x -> _v500 <- Some x
    let v513 : System.IDisposable = match _v500 with Some x -> x | None -> failwith "base.run_target / _v500=None"
    v513 
    #endif
#else
    let v523 : bool = true
    let mutable _v523 : System.IO.DirectoryInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v526 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v526 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v535 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v535 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v544 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v544 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v553 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v553 
    #endif
#if FABLE_COMPILER_PYTHON
    let v562 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v562 
    #endif
#else
    let v569 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v570 : System.IO.DirectoryInfo = v569 v0
    v570 
    #endif
    |> fun x -> _v523 <- Some x
    let v571 : System.IO.DirectoryInfo = match _v523 with Some x -> x | None -> failwith "base.run_target / _v523=None"
    let v588 : bool = true
    let mutable _v588 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v591 : bool = null |> unbox<bool>
    v591 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v600 : bool = null |> unbox<bool>
    v600 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v609 : bool = null |> unbox<bool>
    v609 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v618 : bool = null |> unbox<bool>
    v618 
    #endif
#if FABLE_COMPILER_PYTHON
    let v627 : bool = null |> unbox<bool>
    v627 
    #endif
#else
    let v634 : bool = v571.Exists
    v634 
    #endif
    |> fun x -> _v588 <- Some x
    let v635 : bool = match _v588 with Some x -> x | None -> failwith "base.run_target / _v588=None"
    let v650 : bool = v635 = false
    if v650 then
        let v653 : bool = true
        let mutable _v653 : System.DateTime option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v656 : System.DateTime = null |> unbox<System.DateTime>
        v656 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v665 : System.DateTime = null |> unbox<System.DateTime>
        v665 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v674 : System.DateTime = null |> unbox<System.DateTime>
        v674 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v683 : System.DateTime = null |> unbox<System.DateTime>
        v683 
        #endif
#if FABLE_COMPILER_PYTHON
        let v692 : System.DateTime = null |> unbox<System.DateTime>
        v692 
        #endif
#else
        let v699 : System.DateTime = v571.CreationTime
        v699 
        #endif
        |> fun x -> _v653 <- Some x
        let v700 : System.DateTime = match _v653 with Some x -> x | None -> failwith "base.run_target / _v653=None"
        let v715 : obj = {| Exists = v635; CreationTime = v700 |}
        let v718 : string = $"%A{v715}"
        let v725 : US0 = US0_1
        let v726 : (unit -> string) = closure22()
        let v727 : (unit -> struct (string * string)) = closure23(v0, v718)
        method47(v725, v726, v727)
    let v730 : bool = true
    let mutable _v730 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v731 : (unit -> unit) = method49(v0)
    let v732 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v731 "$0()" )
    v732 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v733 : (unit -> unit) = method49(v0)
    let v734 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v733 "$0()" )
    v734 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v735 : (unit -> unit) = method49(v0)
    let v736 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v735 "$0()" )
    v736 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v737 : (unit -> unit) = method54(v0)
    let v738 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v737 () }
    v738 
    #endif
#if FABLE_COMPILER_PYTHON
    let v739 : (unit -> unit) = method54(v0)
    let v740 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v739 () }
    v740 
    #endif
#else
    let v741 : (unit -> unit) = method54(v0)
    let v742 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v741 () }
    v742 
    #endif
    |> fun x -> _v730 <- Some x
    let v743 : System.IDisposable = match _v730 with Some x -> x | None -> failwith "base.run_target / _v730=None"
    v743 
    #endif
    |> fun x -> _v3 <- Some x
    let v751 : System.IDisposable = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v751
and method55 (v0 : string) : string =
    v0
and method32 (v0 : string, v1 : string) : unit =
    let v2 : bool = method33(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string = method31(v0)
        let v5 : bool = method24(v4)
        let v6 : bool = v5 = false
        if v6 then
            let v7 : System.IDisposable = method35(v4)
            ()
        let v10 : bool = true
        let mutable _v10 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v11 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v11 
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v36 : string = method55(v1)
        System.IO.File.WriteAllText (v0, v36)
        () 
        #endif
        |> fun x -> _v10 <- Some x
        match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
        ()
and method57 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method59 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure31 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure30 () (v0 : char) : (UH0 -> UH0) =
    closure31(v0)
and method60 () : (char -> (UH0 -> UH0)) =
    closure30()
and method61 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v25 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v15 : (char -> string) = _.ToString()
                let v16 : string = v15 v4
                let v23 : (string -> System.Text.StringBuilder) = v1.Append
                let v24 : System.Text.StringBuilder = v23 v16
                v1
        method61(v5, v25, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure29 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '"'
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v18 : (char -> string) = _.ToString()
            let v19 : string = v18 v7
            let v26 : int32 = v19.Length
            let v27 : (char []) = Array.zeroCreate<char> (v26)
            let v28 : Mut5 = {l0 = 0} : Mut5
            while method59(v26, v28) do
                let v30 : int32 = v28.l0
                let v31 : char = v19.[int v30]
                v27.[int v30] <- v31
                let v32 : int32 = v30 + 1
                v28.l0 <- v32
                ()
            let v33 : char list = v27 |> Array.toList
            let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v37 : (char -> (UH0 -> UH0)) = method60()
            let v38 : (char list -> (UH0 -> UH0)) = v36 v37
            let v39 : (UH0 -> UH0) = v38 v33
            let v40 : UH0 = UH0_0
            let v41 : UH0 = v39 v40
            let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method61(v41, v1, v2, v3)
            US15_0(v7, v15, v50, v51, v52)
        else
            let v54 : (string -> int32) = String.length
            let v55 : int32 = v54 v0
            let v56 : string = "\n"
            let v57 : int32 = v0.IndexOf v56 
            let v58 : int32 = v57 - 1
            let v59 : bool = -2 = v58
            let v60 : int32 =
                if v59 then
                    v55
                else
                    v58
            let v61 : (int32 -> int32) = int32
            let v62 : int32 = v61 0
            let v63 : (int32 -> int32) = int32
            let v64 : int32 = v63 v60
            let v65 : string = v0.[int v62..int v64]
            let v66 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v65}"
            let v67 : int32 = v3 - 1
            let v70 : (int32 -> (string -> string)) = String.replicate
            let v71 : (string -> string) = v70 v67
            let v72 : string = " "
            let v73 : string = v71 v72
            let v80 : string = "^"
            let v81 : string = v73 + v80 
            let v82 : string = $"{v66}
{v81}
"
            US15_1(v82)
and closure32 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '''
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v18 : (char -> string) = _.ToString()
            let v19 : string = v18 v7
            let v26 : int32 = v19.Length
            let v27 : (char []) = Array.zeroCreate<char> (v26)
            let v28 : Mut5 = {l0 = 0} : Mut5
            while method59(v26, v28) do
                let v30 : int32 = v28.l0
                let v31 : char = v19.[int v30]
                v27.[int v30] <- v31
                let v32 : int32 = v30 + 1
                v28.l0 <- v32
                ()
            let v33 : char list = v27 |> Array.toList
            let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v37 : (char -> (UH0 -> UH0)) = method60()
            let v38 : (char list -> (UH0 -> UH0)) = v36 v37
            let v39 : (UH0 -> UH0) = v38 v33
            let v40 : UH0 = UH0_0
            let v41 : UH0 = v39 v40
            let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method61(v41, v1, v2, v3)
            US15_0(v7, v15, v50, v51, v52)
        else
            let v54 : (string -> int32) = String.length
            let v55 : int32 = v54 v0
            let v56 : string = "\n"
            let v57 : int32 = v0.IndexOf v56 
            let v58 : int32 = v57 - 1
            let v59 : bool = -2 = v58
            let v60 : int32 =
                if v59 then
                    v55
                else
                    v58
            let v61 : (int32 -> int32) = int32
            let v62 : int32 = v61 0
            let v63 : (int32 -> int32) = int32
            let v64 : int32 = v63 v60
            let v65 : string = v0.[int v62..int v64]
            let v66 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v65}"
            let v67 : int32 = v3 - 1
            let v70 : (int32 -> (string -> string)) = String.replicate
            let v71 : (string -> string) = v70 v67
            let v72 : string = " "
            let v73 : string = v71 v72
            let v80 : string = "^"
            let v81 : string = v73 + v80 
            let v82 : string = $"{v66}
{v81}
"
            US15_1(v82)
and method62 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US15 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US15 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US15_1(v13) -> (* Error *)
            method62(v0, v1, v6)
        | US15_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "choice / no parsers succeeded"
        US15_1(v3)
and method63 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US17_1
        let v15 : char =
            match v11 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method63(v0, v17)
and method64 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v118 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = ''' :: v6 
            let v18 : char list = '"' :: v9 
            let v27 : (char list -> (char [])) = List.toArray
            let v28 : (char []) = v27 v18
            let v35 : string = $"parsing.none_of / unexpected end of input / chars: %A{v28} / s: %A{struct (v2, v3, v4)}"
            US15_1(v35)
        else
            let v37 : char = v1.[int 0]
            let v38 : (string -> int32) = String.length
            let v39 : int32 = v38 v1
            let v40 : (int32 -> int32) = int32
            let v41 : int32 = v40 1
            let v42 : (int32 -> int32) = int32
            let v43 : int32 = v42 v39
            let v44 : string = v1.[int v41..int v43]
            let v45 : int64 = 0L
            let v46 : bool = method63(v37, v45)
            let v47 : bool = v46 = false
            if v47 then
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v37
                let v58 : int32 = v51.Length
                let v59 : (char []) = Array.zeroCreate<char> (v58)
                let v60 : Mut5 = {l0 = 0} : Mut5
                while method59(v58, v60) do
                    let v62 : int32 = v60.l0
                    let v63 : char = v51.[int v62]
                    v59.[int v62] <- v63
                    let v64 : int32 = v62 + 1
                    v60.l0 <- v64
                    ()
                let v65 : char list = v59 |> Array.toList
                let v68 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v69 : (char -> (UH0 -> UH0)) = method60()
                let v70 : (char list -> (UH0 -> UH0)) = v68 v69
                let v71 : (UH0 -> UH0) = v70 v65
                let v72 : UH0 = UH0_0
                let v73 : UH0 = v71 v72
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method61(v73, v2, v3, v4)
                US15_0(v37, v44, v82, v83, v84)
            else
                let v86 : char list = []
                let v89 : char list = ''' :: v86 
                let v98 : char list = '"' :: v89 
                let v107 : (char list -> (char [])) = List.toArray
                let v108 : (char []) = v107 v98
                let v115 : string = $"parsing.none_of / unexpected char: '{v37}' / chars: %A{v108} / s: %A{struct (v2, v3, v4)}"
                US15_1(v115)
    let v130 : US15 =
        match v118 with
        | US15_1(v127) -> (* Error *)
            US15_1(v127)
        | US15_0(v119, v120, v121, v122, v123) -> (* Ok *)
            let v124 : bool = '\\' = v119
            let v125 : char =
                if v124 then
                    '/'
                else
                    v119
            US15_0(v125, v120, v121, v122, v123)
    match v130 with
    | US15_1(v148) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v131, v132, v133, v134, v135) -> (* Ok *)
        let v138 : (char -> string) = _.ToString()
        let v139 : string = v138 v131
        let v146 : string = v0 + v139 
        method64(v146, v132, v133, v134, v135)
and method65 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US15 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method65(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US15_1(v5)
and method66 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method66(v0, v21)
and method67 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v136 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = ' ' :: v6 
            let v18 : char list = ''' :: v9 
            let v27 : char list = '"' :: v18 
            let v36 : (char list -> (char [])) = List.toArray
            let v37 : (char []) = v36 v27
            let v44 : string = $"parsing.none_of / unexpected end of input / chars: %A{v37} / s: %A{struct (v2, v3, v4)}"
            US15_1(v44)
        else
            let v46 : char = v1.[int 0]
            let v47 : (string -> int32) = String.length
            let v48 : int32 = v47 v1
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 1
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v1.[int v50..int v52]
            let v54 : int64 = 0L
            let v55 : bool = method66(v46, v54)
            let v56 : bool = v55 = false
            if v56 then
                let v59 : (char -> string) = _.ToString()
                let v60 : string = v59 v46
                let v67 : int32 = v60.Length
                let v68 : (char []) = Array.zeroCreate<char> (v67)
                let v69 : Mut5 = {l0 = 0} : Mut5
                while method59(v67, v69) do
                    let v71 : int32 = v69.l0
                    let v72 : char = v60.[int v71]
                    v68.[int v71] <- v72
                    let v73 : int32 = v71 + 1
                    v69.l0 <- v73
                    ()
                let v74 : char list = v68 |> Array.toList
                let v77 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v78 : (char -> (UH0 -> UH0)) = method60()
                let v79 : (char list -> (UH0 -> UH0)) = v77 v78
                let v80 : (UH0 -> UH0) = v79 v74
                let v81 : UH0 = UH0_0
                let v82 : UH0 = v80 v81
                let struct (v91 : System.Text.StringBuilder, v92 : int32, v93 : int32) = method61(v82, v2, v3, v4)
                US15_0(v46, v53, v91, v92, v93)
            else
                let v95 : char list = []
                let v98 : char list = ' ' :: v95 
                let v107 : char list = ''' :: v98 
                let v116 : char list = '"' :: v107 
                let v125 : (char list -> (char [])) = List.toArray
                let v126 : (char []) = v125 v116
                let v133 : string = $"parsing.none_of / unexpected char: '{v46}' / chars: %A{v126} / s: %A{struct (v2, v3, v4)}"
                US15_1(v133)
    let v148 : US15 =
        match v136 with
        | US15_1(v145) -> (* Error *)
            US15_1(v145)
        | US15_0(v137, v138, v139, v140, v141) -> (* Ok *)
            let v142 : bool = '\\' = v137
            let v143 : char =
                if v142 then
                    '/'
                else
                    v137
            US15_0(v143, v138, v139, v140, v141)
    match v148 with
    | US15_1(v166) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v149, v150, v151, v152, v153) -> (* Ok *)
        let v156 : (char -> string) = _.ToString()
        let v157 : string = v156 v149
        let v164 : string = v0 + v157 
        method67(v164, v150, v151, v152, v153)
and method68 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method68(v0, v6)
        else
            v1
and method69 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v54 : US15 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US15_1(v6)
        else
            let v8 : char = v1.[int 0]
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v1
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v1.[int v12..int v14]
            let v18 : (char -> string) = _.ToString()
            let v19 : string = v18 v8
            let v26 : int32 = v19.Length
            let v27 : (char []) = Array.zeroCreate<char> (v26)
            let v28 : Mut5 = {l0 = 0} : Mut5
            while method59(v26, v28) do
                let v30 : int32 = v28.l0
                let v31 : char = v19.[int v30]
                v27.[int v30] <- v31
                let v32 : int32 = v30 + 1
                v28.l0 <- v32
                ()
            let v33 : char list = v27 |> Array.toList
            let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v37 : (char -> (UH0 -> UH0)) = method60()
            let v38 : (char list -> (UH0 -> UH0)) = v36 v37
            let v39 : (UH0 -> UH0) = v38 v33
            let v40 : UH0 = UH0_0
            let v41 : UH0 = v39 v40
            let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method61(v41, v2, v3, v4)
            US15_0(v8, v15, v50, v51, v52)
    match v54 with
    | US15_1(v72) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v55, v56, v57, v58, v59) -> (* Ok *)
        let v62 : (char -> string) = _.ToString()
        let v63 : string = v62 v55
        let v70 : string = v0 + v63 
        method69(v70, v56, v57, v58, v59)
and method58 (v0 : string) : US14 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v3 : (string -> string option) = Option.ofObj
    let v4 : string option = v3 v0
    v4 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v5 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v14 : string = ""
    let v15 : string = v5 |> Option.defaultValue v14 
    let v22 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v23 : System.Text.StringBuilder = v22 v14
    let v24 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure29()
    let v25 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure32()
    let v26 : UH1 = UH1_0
    let v27 : UH1 = UH1_1(v25, v26)
    let v28 : UH1 = UH1_1(v24, v27)
    let v29 : US15 = method62(v15, v23, v28)
    let v219 : US16 =
        match v29 with
        | US15_1(v216) -> (* Error *)
            US16_1(v216)
        | US15_0(v30, v31, v32, v33, v34) -> (* Ok *)
            let v35 : bool = "" = v31
            let v148 : US15 =
                if v35 then
                    let v36 : char list = []
                    let v39 : char list = ''' :: v36 
                    let v48 : char list = '"' :: v39 
                    let v57 : (char list -> (char [])) = List.toArray
                    let v58 : (char []) = v57 v48
                    let v65 : string = $"parsing.none_of / unexpected end of input / chars: %A{v58} / s: %A{struct (v32, v33, v34)}"
                    US15_1(v65)
                else
                    let v67 : char = v31.[int 0]
                    let v68 : (string -> int32) = String.length
                    let v69 : int32 = v68 v31
                    let v70 : (int32 -> int32) = int32
                    let v71 : int32 = v70 1
                    let v72 : (int32 -> int32) = int32
                    let v73 : int32 = v72 v69
                    let v74 : string = v31.[int v71..int v73]
                    let v75 : int64 = 0L
                    let v76 : bool = method63(v67, v75)
                    let v77 : bool = v76 = false
                    if v77 then
                        let v80 : (char -> string) = _.ToString()
                        let v81 : string = v80 v67
                        let v88 : int32 = v81.Length
                        let v89 : (char []) = Array.zeroCreate<char> (v88)
                        let v90 : Mut5 = {l0 = 0} : Mut5
                        while method59(v88, v90) do
                            let v92 : int32 = v90.l0
                            let v93 : char = v81.[int v92]
                            v89.[int v92] <- v93
                            let v94 : int32 = v92 + 1
                            v90.l0 <- v94
                            ()
                        let v95 : char list = v89 |> Array.toList
                        let v98 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v99 : (char -> (UH0 -> UH0)) = method60()
                        let v100 : (char list -> (UH0 -> UH0)) = v98 v99
                        let v101 : (UH0 -> UH0) = v100 v95
                        let v102 : UH0 = UH0_0
                        let v103 : UH0 = v101 v102
                        let struct (v112 : System.Text.StringBuilder, v113 : int32, v114 : int32) = method61(v103, v32, v33, v34)
                        US15_0(v67, v74, v112, v113, v114)
                    else
                        let v116 : char list = []
                        let v119 : char list = ''' :: v116 
                        let v128 : char list = '"' :: v119 
                        let v137 : (char list -> (char [])) = List.toArray
                        let v138 : (char []) = v137 v128
                        let v145 : string = $"parsing.none_of / unexpected char: '{v67}' / chars: %A{v138} / s: %A{struct (v32, v33, v34)}"
                        US15_1(v145)
            let v160 : US15 =
                match v148 with
                | US15_1(v157) -> (* Error *)
                    US15_1(v157)
                | US15_0(v149, v150, v151, v152, v153) -> (* Ok *)
                    let v154 : bool = '\\' = v149
                    let v155 : char =
                        if v154 then
                            '/'
                        else
                            v149
                    US15_0(v155, v150, v151, v152, v153)
            let v180 : US16 =
                match v160 with
                | US15_1(v161) -> (* Error *)
                    US16_1(v161)
                | US15_0(v163, v164, v165, v166, v167) -> (* Ok *)
                    let v170 : (char -> string) = _.ToString()
                    let v171 : string = v170 v163
                    method64(v171, v164, v165, v166, v167)
            let v190 : US16 =
                match v180 with
                | US16_1(v187) -> (* Error *)
                    US16_0(v14, v31, v32, v33, v34)
                | US16_0(v181, v182, v183, v184, v185) -> (* Ok *)
                    US16_0(v181, v182, v183, v184, v185)
            match v190 with
            | US16_1(v211) -> (* Error *)
                let v212 : string = "between / expected content"
                US16_1(v212)
            | US16_0(v191, v192, v193, v194, v195) -> (* Ok *)
                let v196 : UH1 = UH1_0
                let v197 : UH1 = UH1_1(v25, v196)
                let v198 : UH1 = UH1_1(v24, v197)
                let v199 : US15 = method65(v192, v193, v194, v195, v198)
                match v199 with
                | US15_1(v206) -> (* Error *)
                    let v207 : string = $"between / expected closing delimiter / e: %A{v206} / input: %A{struct (v15, v23, 1, 1)} / rest1: %A{struct (v31, v32, v33, v34)} / rest2: %A{struct (v192, v193, v194, v195)}"
                    US16_1(v207)
                | US15_0(v200, v201, v202, v203, v204) -> (* Ok *)
                    US16_0(v191, v201, v202, v203, v204)
    let v435 : US16 =
        match v219 with
        | US16_1(v225) -> (* Error *)
            let v226 : bool = "" = v15
            let v359 : US15 =
                if v226 then
                    let v227 : char list = []
                    let v230 : char list = ' ' :: v227 
                    let v239 : char list = ''' :: v230 
                    let v248 : char list = '"' :: v239 
                    let v257 : (char list -> (char [])) = List.toArray
                    let v258 : (char []) = v257 v248
                    let v265 : string = $"parsing.none_of / unexpected end of input / chars: %A{v258} / s: %A{struct (v23, 1, 1)}"
                    US15_1(v265)
                else
                    let v267 : char = v15.[int 0]
                    let v268 : (string -> int32) = String.length
                    let v269 : int32 = v268 v15
                    let v270 : (int32 -> int32) = int32
                    let v271 : int32 = v270 1
                    let v272 : (int32 -> int32) = int32
                    let v273 : int32 = v272 v269
                    let v274 : string = v15.[int v271..int v273]
                    let v275 : int64 = 0L
                    let v276 : bool = method66(v267, v275)
                    let v277 : bool = v276 = false
                    if v277 then
                        let v280 : (char -> string) = _.ToString()
                        let v281 : string = v280 v267
                        let v288 : int32 = v281.Length
                        let v289 : (char []) = Array.zeroCreate<char> (v288)
                        let v290 : Mut5 = {l0 = 0} : Mut5
                        while method59(v288, v290) do
                            let v292 : int32 = v290.l0
                            let v293 : char = v281.[int v292]
                            v289.[int v292] <- v293
                            let v294 : int32 = v292 + 1
                            v290.l0 <- v294
                            ()
                        let v295 : char list = v289 |> Array.toList
                        let v298 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v299 : (char -> (UH0 -> UH0)) = method60()
                        let v300 : (char list -> (UH0 -> UH0)) = v298 v299
                        let v301 : (UH0 -> UH0) = v300 v295
                        let v302 : UH0 = UH0_0
                        let v303 : UH0 = v301 v302
                        let v312 : int32 = 1
                        let v313 : int32 = 1
                        let struct (v314 : System.Text.StringBuilder, v315 : int32, v316 : int32) = method61(v303, v23, v312, v313)
                        US15_0(v267, v274, v314, v315, v316)
                    else
                        let v318 : char list = []
                        let v321 : char list = ' ' :: v318 
                        let v330 : char list = ''' :: v321 
                        let v339 : char list = '"' :: v330 
                        let v348 : (char list -> (char [])) = List.toArray
                        let v349 : (char []) = v348 v339
                        let v356 : string = $"parsing.none_of / unexpected char: '{v267}' / chars: %A{v349} / s: %A{struct (v23, 1, 1)}"
                        US15_1(v356)
            let v371 : US15 =
                match v359 with
                | US15_1(v368) -> (* Error *)
                    US15_1(v368)
                | US15_0(v360, v361, v362, v363, v364) -> (* Ok *)
                    let v365 : bool = '\\' = v360
                    let v366 : char =
                        if v365 then
                            '/'
                        else
                            v360
                    US15_0(v366, v361, v362, v363, v364)
            let v391 : US16 =
                match v371 with
                | US15_1(v372) -> (* Error *)
                    US16_1(v372)
                | US15_0(v374, v375, v376, v377, v378) -> (* Ok *)
                    let v381 : (char -> string) = _.ToString()
                    let v382 : string = v381 v374
                    method67(v382, v375, v376, v377, v378)
            match v391 with
            | US16_1(v397) -> (* Error *)
                let v398 : int32 = v15.Length
                let v399 : bool = v398 = 0
                let v403 : US18 =
                    if v399 then
                        US18_0(v15, v23, 1, 1)
                    else
                        let v401 : string = $"parsing.eof / expected end of input / input: %A{v15}"
                        US18_1(v401)
                let v412 : US16 =
                    match v403 with
                    | US18_1(v409) -> (* Error *)
                        US16_1(v409)
                    | US18_0(v404, v405, v406, v407) -> (* Ok *)
                        US16_0(v14, v404, v405, v406, v407)
                match v412 with
                | US16_1(v428) -> (* Error *)
                    US16_1(v428)
                | US16_0(v413, v414, v415, v416, v417) -> (* Ok *)
                    let v418 : int32 = 0
                    let v419 : int32 = method68(v414, v418)
                    let v420 : (string -> int32) = String.length
                    let v421 : int32 = v420 v414
                    let v422 : (int32 -> int32) = int32
                    let v423 : int32 = v422 v419
                    let v424 : (int32 -> int32) = int32
                    let v425 : int32 = v424 v421
                    let v426 : string = v414.[int v423..int v425]
                    US16_0(v413, v426, v415, v416, v417)
            | US16_0(v392, v393, v394, v395, v396) -> (* Ok *)
                v391
        | US16_0(v220, v221, v222, v223, v224) -> (* Ok *)
            v219
    let v639 : US19 =
        match v435 with
        | US16_1(v636) -> (* Error *)
            US19_1(v636)
        | US16_0(v436, v437, v438, v439, v440) -> (* Ok *)
            let v441 : bool = "" = v437
            let v522 : US15 =
                if v441 then
                    let v442 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v438, v439, v440)}"
                    US15_1(v442)
                else
                    let v444 : char = v437.[int 0]
                    let v445 : bool = v444 = ' '
                    if v445 then
                        let v446 : (string -> int32) = String.length
                        let v447 : int32 = v446 v437
                        let v448 : (int32 -> int32) = int32
                        let v449 : int32 = v448 1
                        let v450 : (int32 -> int32) = int32
                        let v451 : int32 = v450 v447
                        let v452 : string = v437.[int v449..int v451]
                        let v455 : (char -> string) = _.ToString()
                        let v456 : string = v455 v444
                        let v463 : int32 = v456.Length
                        let v464 : (char []) = Array.zeroCreate<char> (v463)
                        let v465 : Mut5 = {l0 = 0} : Mut5
                        while method59(v463, v465) do
                            let v467 : int32 = v465.l0
                            let v468 : char = v456.[int v467]
                            v464.[int v467] <- v468
                            let v469 : int32 = v467 + 1
                            v465.l0 <- v469
                            ()
                        let v470 : char list = v464 |> Array.toList
                        let v473 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v474 : (char -> (UH0 -> UH0)) = method60()
                        let v475 : (char list -> (UH0 -> UH0)) = v473 v474
                        let v476 : (UH0 -> UH0) = v475 v470
                        let v477 : UH0 = UH0_0
                        let v478 : UH0 = v476 v477
                        let struct (v487 : System.Text.StringBuilder, v488 : int32, v489 : int32) = method61(v478, v438, v439, v440)
                        US15_0(v444, v452, v487, v488, v489)
                    else
                        let v491 : (string -> int32) = String.length
                        let v492 : int32 = v491 v437
                        let v493 : string = "\n"
                        let v494 : int32 = v437.IndexOf v493 
                        let v495 : int32 = v494 - 1
                        let v496 : bool = -2 = v495
                        let v497 : int32 =
                            if v496 then
                                v492
                            else
                                v495
                        let v498 : (int32 -> int32) = int32
                        let v499 : int32 = v498 0
                        let v500 : (int32 -> int32) = int32
                        let v501 : int32 = v500 v497
                        let v502 : string = v437.[int v499..int v501]
                        let v503 : string = $"parsing.p_char / expected: '{' '}' / line: {v439} / col: {v440}
{v438}{v502}"
                        let v504 : int32 = v440 - 1
                        let v507 : (int32 -> (string -> string)) = String.replicate
                        let v508 : (string -> string) = v507 v504
                        let v509 : string = " "
                        let v510 : string = v508 v509
                        let v517 : string = "^"
                        let v518 : string = v510 + v517 
                        let v519 : string = $"{v503}
{v518}
"
                        US15_1(v519)
            let v534 : US20 =
                match v522 with
                | US15_1(v530) -> (* Error *)
                    let v531 : US17 = US17_1
                    US20_0(v531, v437, v438, v439, v440)
                | US15_0(v523, v524, v525, v526, v527) -> (* Ok *)
                    let v528 : US17 = US17_0(v523)
                    US20_0(v528, v524, v525, v526, v527)
            let v613 : US16 =
                match v534 with
                | US20_1(v610) -> (* Error *)
                    US16_1(v610)
                | US20_0(v535, v536, v537, v538, v539) -> (* Ok *)
                    let v540 : bool = "" = v536
                    let v589 : US15 =
                        if v540 then
                            let v541 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v537, v538, v539)}"
                            US15_1(v541)
                        else
                            let v543 : char = v536.[int 0]
                            let v544 : (string -> int32) = String.length
                            let v545 : int32 = v544 v536
                            let v546 : (int32 -> int32) = int32
                            let v547 : int32 = v546 1
                            let v548 : (int32 -> int32) = int32
                            let v549 : int32 = v548 v545
                            let v550 : string = v536.[int v547..int v549]
                            let v553 : (char -> string) = _.ToString()
                            let v554 : string = v553 v543
                            let v561 : int32 = v554.Length
                            let v562 : (char []) = Array.zeroCreate<char> (v561)
                            let v563 : Mut5 = {l0 = 0} : Mut5
                            while method59(v561, v563) do
                                let v565 : int32 = v563.l0
                                let v566 : char = v554.[int v565]
                                v562.[int v565] <- v566
                                let v567 : int32 = v565 + 1
                                v563.l0 <- v567
                                ()
                            let v568 : char list = v562 |> Array.toList
                            let v571 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v572 : (char -> (UH0 -> UH0)) = method60()
                            let v573 : (char list -> (UH0 -> UH0)) = v571 v572
                            let v574 : (UH0 -> UH0) = v573 v568
                            let v575 : UH0 = UH0_0
                            let v576 : UH0 = v574 v575
                            let struct (v585 : System.Text.StringBuilder, v586 : int32, v587 : int32) = method61(v576, v537, v538, v539)
                            US15_0(v543, v550, v585, v586, v587)
                    match v589 with
                    | US15_1(v590) -> (* Error *)
                        US16_1(v590)
                    | US15_0(v592, v593, v594, v595, v596) -> (* Ok *)
                        let v599 : (char -> string) = _.ToString()
                        let v600 : string = v599 v592
                        method69(v600, v593, v594, v595, v596)
            let v625 : US21 =
                match v613 with
                | US16_1(v621) -> (* Error *)
                    let v622 : US3 = US3_1
                    US21_0(v622, v437, v438, v439, v440)
                | US16_0(v614, v615, v616, v617, v618) -> (* Ok *)
                    let v619 : US3 = US3_0(v614)
                    US21_0(v619, v615, v616, v617, v618)
            match v625 with
            | US21_1(v632) -> (* Error *)
                US19_1(v632)
            | US21_0(v626, v627, v628, v629, v630) -> (* Ok *)
                US19_0(v436, v626, v627, v628, v629, v630)
    match v639 with
    | US19_1(v647) -> (* Error *)
        US14_1(v647)
    | US19_0(v640, v641, v642, v643, v644, v645) -> (* Ok *)
        US14_0(v640, v641)
and method72 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US17_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US17_1
        let v23 : char =
            match v19 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method72(v0, v25)
and method73 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v154 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = ' ' :: v6 
            let v18 : char list = '"' :: v9 
            let v27 : char list = '`' :: v18 
            let v36 : char list = '\\' :: v27 
            let v45 : (char list -> (char [])) = List.toArray
            let v46 : (char []) = v45 v36
            let v53 : string = $"parsing.none_of / unexpected end of input / chars: %A{v46} / s: %A{struct (v2, v3, v4)}"
            US15_1(v53)
        else
            let v55 : char = v1.[int 0]
            let v56 : (string -> int32) = String.length
            let v57 : int32 = v56 v1
            let v58 : (int32 -> int32) = int32
            let v59 : int32 = v58 1
            let v60 : (int32 -> int32) = int32
            let v61 : int32 = v60 v57
            let v62 : string = v1.[int v59..int v61]
            let v63 : int64 = 0L
            let v64 : bool = method72(v55, v63)
            let v65 : bool = v64 = false
            if v65 then
                let v68 : (char -> string) = _.ToString()
                let v69 : string = v68 v55
                let v76 : int32 = v69.Length
                let v77 : (char []) = Array.zeroCreate<char> (v76)
                let v78 : Mut5 = {l0 = 0} : Mut5
                while method59(v76, v78) do
                    let v80 : int32 = v78.l0
                    let v81 : char = v69.[int v80]
                    v77.[int v80] <- v81
                    let v82 : int32 = v80 + 1
                    v78.l0 <- v82
                    ()
                let v83 : char list = v77 |> Array.toList
                let v86 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v87 : (char -> (UH0 -> UH0)) = method60()
                let v88 : (char list -> (UH0 -> UH0)) = v86 v87
                let v89 : (UH0 -> UH0) = v88 v83
                let v90 : UH0 = UH0_0
                let v91 : UH0 = v89 v90
                let struct (v100 : System.Text.StringBuilder, v101 : int32, v102 : int32) = method61(v91, v2, v3, v4)
                US15_0(v55, v62, v100, v101, v102)
            else
                let v104 : char list = []
                let v107 : char list = ' ' :: v104 
                let v116 : char list = '"' :: v107 
                let v125 : char list = '`' :: v116 
                let v134 : char list = '\\' :: v125 
                let v143 : (char list -> (char [])) = List.toArray
                let v144 : (char []) = v143 v134
                let v151 : string = $"parsing.none_of / unexpected char: '{v55}' / chars: %A{v144} / s: %A{struct (v2, v3, v4)}"
                US15_1(v151)
    match v154 with
    | US15_1(v172) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v155, v156, v157, v158, v159) -> (* Ok *)
        let v162 : (char -> string) = _.ToString()
        let v163 : string = v162 v155
        let v170 : string = v0 + v163 
        method73(v170, v156, v157, v158, v159)
and method75 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method75(v0, v21)
and closure33 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v85 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '\\'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v7
                let v26 : int32 = v19.Length
                let v27 : (char []) = Array.zeroCreate<char> (v26)
                let v28 : Mut5 = {l0 = 0} : Mut5
                while method59(v26, v28) do
                    let v30 : int32 = v28.l0
                    let v31 : char = v19.[int v30]
                    v27.[int v30] <- v31
                    let v32 : int32 = v30 + 1
                    v28.l0 <- v32
                    ()
                let v33 : char list = v27 |> Array.toList
                let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v37 : (char -> (UH0 -> UH0)) = method60()
                let v38 : (char list -> (UH0 -> UH0)) = v36 v37
                let v39 : (UH0 -> UH0) = v38 v33
                let v40 : UH0 = UH0_0
                let v41 : UH0 = v39 v40
                let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method61(v41, v1, v2, v3)
                US15_0(v7, v15, v50, v51, v52)
            else
                let v54 : (string -> int32) = String.length
                let v55 : int32 = v54 v0
                let v56 : string = "\n"
                let v57 : int32 = v0.IndexOf v56 
                let v58 : int32 = v57 - 1
                let v59 : bool = -2 = v58
                let v60 : int32 =
                    if v59 then
                        v55
                    else
                        v58
                let v61 : (int32 -> int32) = int32
                let v62 : int32 = v61 0
                let v63 : (int32 -> int32) = int32
                let v64 : int32 = v63 v60
                let v65 : string = v0.[int v62..int v64]
                let v66 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v65}"
                let v67 : int32 = v3 - 1
                let v70 : (int32 -> (string -> string)) = String.replicate
                let v71 : (string -> string) = v70 v67
                let v72 : string = " "
                let v73 : string = v71 v72
                let v80 : string = "^"
                let v81 : string = v73 + v80 
                let v82 : string = $"{v66}
{v81}
"
                US15_1(v82)
    let v144 : US15 =
        match v85 with
        | US15_1(v141) -> (* Error *)
            US15_1(v141)
        | US15_0(v86, v87, v88, v89, v90) -> (* Ok *)
            let v91 : bool = "" = v87
            if v91 then
                let v92 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v88, v89, v90)}"
                US15_1(v92)
            else
                let v94 : char = v87.[int 0]
                let v95 : (string -> int32) = String.length
                let v96 : int32 = v95 v87
                let v97 : (int32 -> int32) = int32
                let v98 : int32 = v97 1
                let v99 : (int32 -> int32) = int32
                let v100 : int32 = v99 v96
                let v101 : string = v87.[int v98..int v100]
                let v104 : (char -> string) = _.ToString()
                let v105 : string = v104 v94
                let v112 : int32 = v105.Length
                let v113 : (char []) = Array.zeroCreate<char> (v112)
                let v114 : Mut5 = {l0 = 0} : Mut5
                while method59(v112, v114) do
                    let v116 : int32 = v114.l0
                    let v117 : char = v105.[int v116]
                    v113.[int v116] <- v117
                    let v118 : int32 = v116 + 1
                    v114.l0 <- v118
                    ()
                let v119 : char list = v113 |> Array.toList
                let v122 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v123 : (char -> (UH0 -> UH0)) = method60()
                let v124 : (char list -> (UH0 -> UH0)) = v122 v123
                let v125 : (UH0 -> UH0) = v124 v119
                let v126 : UH0 = UH0_0
                let v127 : UH0 = v125 v126
                let struct (v136 : System.Text.StringBuilder, v137 : int32, v138 : int32) = method61(v127, v88, v89, v90)
                US15_0(v94, v101, v136, v137, v138)
    match v144 with
    | US15_1(v152) -> (* Error *)
        US16_1(v152)
    | US15_0(v145, v146, v147, v148, v149) -> (* Ok *)
        let v150 : string = $"{'\\'}{v145}"
        US16_0(v150, v146, v147, v148, v149)
and closure34 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v85 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '`'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v7
                let v26 : int32 = v19.Length
                let v27 : (char []) = Array.zeroCreate<char> (v26)
                let v28 : Mut5 = {l0 = 0} : Mut5
                while method59(v26, v28) do
                    let v30 : int32 = v28.l0
                    let v31 : char = v19.[int v30]
                    v27.[int v30] <- v31
                    let v32 : int32 = v30 + 1
                    v28.l0 <- v32
                    ()
                let v33 : char list = v27 |> Array.toList
                let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v37 : (char -> (UH0 -> UH0)) = method60()
                let v38 : (char list -> (UH0 -> UH0)) = v36 v37
                let v39 : (UH0 -> UH0) = v38 v33
                let v40 : UH0 = UH0_0
                let v41 : UH0 = v39 v40
                let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method61(v41, v1, v2, v3)
                US15_0(v7, v15, v50, v51, v52)
            else
                let v54 : (string -> int32) = String.length
                let v55 : int32 = v54 v0
                let v56 : string = "\n"
                let v57 : int32 = v0.IndexOf v56 
                let v58 : int32 = v57 - 1
                let v59 : bool = -2 = v58
                let v60 : int32 =
                    if v59 then
                        v55
                    else
                        v58
                let v61 : (int32 -> int32) = int32
                let v62 : int32 = v61 0
                let v63 : (int32 -> int32) = int32
                let v64 : int32 = v63 v60
                let v65 : string = v0.[int v62..int v64]
                let v66 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v65}"
                let v67 : int32 = v3 - 1
                let v70 : (int32 -> (string -> string)) = String.replicate
                let v71 : (string -> string) = v70 v67
                let v72 : string = " "
                let v73 : string = v71 v72
                let v80 : string = "^"
                let v81 : string = v73 + v80 
                let v82 : string = $"{v66}
{v81}
"
                US15_1(v82)
    let v144 : US15 =
        match v85 with
        | US15_1(v141) -> (* Error *)
            US15_1(v141)
        | US15_0(v86, v87, v88, v89, v90) -> (* Ok *)
            let v91 : bool = "" = v87
            if v91 then
                let v92 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v88, v89, v90)}"
                US15_1(v92)
            else
                let v94 : char = v87.[int 0]
                let v95 : (string -> int32) = String.length
                let v96 : int32 = v95 v87
                let v97 : (int32 -> int32) = int32
                let v98 : int32 = v97 1
                let v99 : (int32 -> int32) = int32
                let v100 : int32 = v99 v96
                let v101 : string = v87.[int v98..int v100]
                let v104 : (char -> string) = _.ToString()
                let v105 : string = v104 v94
                let v112 : int32 = v105.Length
                let v113 : (char []) = Array.zeroCreate<char> (v112)
                let v114 : Mut5 = {l0 = 0} : Mut5
                while method59(v112, v114) do
                    let v116 : int32 = v114.l0
                    let v117 : char = v105.[int v116]
                    v113.[int v116] <- v117
                    let v118 : int32 = v116 + 1
                    v114.l0 <- v118
                    ()
                let v119 : char list = v113 |> Array.toList
                let v122 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v123 : (char -> (UH0 -> UH0)) = method60()
                let v124 : (char list -> (UH0 -> UH0)) = v122 v123
                let v125 : (UH0 -> UH0) = v124 v119
                let v126 : UH0 = UH0_0
                let v127 : UH0 = v125 v126
                let struct (v136 : System.Text.StringBuilder, v137 : int32, v138 : int32) = method61(v127, v88, v89, v90)
                US15_0(v94, v101, v136, v137, v138)
    match v144 with
    | US15_1(v152) -> (* Error *)
        US16_1(v152)
    | US15_0(v145, v146, v147, v148, v149) -> (* Ok *)
        let v150 : string = $"{'`'}{v145}"
        US16_0(v150, v146, v147, v148, v149)
and method76 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US16 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US16 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US16_1(v15) -> (* Error *)
            method76(v0, v1, v2, v3, v8)
        | US16_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US16_1(v5)
and method77 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method77(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method74 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v136 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = '"' :: v6 
            let v18 : char list = '`' :: v9 
            let v27 : char list = '\\' :: v18 
            let v36 : (char list -> (char [])) = List.toArray
            let v37 : (char []) = v36 v27
            let v44 : string = $"parsing.none_of / unexpected end of input / chars: %A{v37} / s: %A{struct (v2, v3, v4)}"
            US15_1(v44)
        else
            let v46 : char = v1.[int 0]
            let v47 : (string -> int32) = String.length
            let v48 : int32 = v47 v1
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 1
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v1.[int v50..int v52]
            let v54 : int64 = 0L
            let v55 : bool = method75(v46, v54)
            let v56 : bool = v55 = false
            if v56 then
                let v59 : (char -> string) = _.ToString()
                let v60 : string = v59 v46
                let v67 : int32 = v60.Length
                let v68 : (char []) = Array.zeroCreate<char> (v67)
                let v69 : Mut5 = {l0 = 0} : Mut5
                while method59(v67, v69) do
                    let v71 : int32 = v69.l0
                    let v72 : char = v60.[int v71]
                    v68.[int v71] <- v72
                    let v73 : int32 = v71 + 1
                    v69.l0 <- v73
                    ()
                let v74 : char list = v68 |> Array.toList
                let v77 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v78 : (char -> (UH0 -> UH0)) = method60()
                let v79 : (char list -> (UH0 -> UH0)) = v77 v78
                let v80 : (UH0 -> UH0) = v79 v74
                let v81 : UH0 = UH0_0
                let v82 : UH0 = v80 v81
                let struct (v91 : System.Text.StringBuilder, v92 : int32, v93 : int32) = method61(v82, v2, v3, v4)
                US15_0(v46, v53, v91, v92, v93)
            else
                let v95 : char list = []
                let v98 : char list = '"' :: v95 
                let v107 : char list = '`' :: v98 
                let v116 : char list = '\\' :: v107 
                let v125 : (char list -> (char [])) = List.toArray
                let v126 : (char []) = v125 v116
                let v133 : string = $"parsing.none_of / unexpected char: '{v46}' / chars: %A{v126} / s: %A{struct (v2, v3, v4)}"
                US15_1(v133)
    let v156 : US16 =
        match v136 with
        | US15_1(v153) -> (* Error *)
            US16_1(v153)
        | US15_0(v137, v138, v139, v140, v141) -> (* Ok *)
            let v144 : (char -> string) = _.ToString()
            let v145 : string = v144 v137
            US16_0(v145, v138, v139, v140, v141)
    let v170 : US16 =
        match v156 with
        | US16_1(v162) -> (* Error *)
            let v163 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure33()
            let v164 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure34()
            let v165 : UH3 = UH3_0
            let v166 : UH3 = UH3_1(v164, v165)
            let v167 : UH3 = UH3_1(v163, v166)
            method76(v1, v2, v3, v4, v167)
        | US16_0(v157, v158, v159, v160, v161) -> (* Ok *)
            v156
    match v170 with
    | US16_1(v178) -> (* Error *)
        let v179 : UH2 = UH2_0
        let v180 : UH2 = method77(v0, v179)
        US23_0(v180, v1, v2, v3, v4)
    | US16_0(v171, v172, v173, v174, v175) -> (* Ok *)
        let v176 : UH2 = UH2_1(v171, v0)
        method74(v176, v172, v173, v174, v175)
and method78 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method78(v3, v1)
        let v7 : string list = v2 :: v4 
        v7
    | UH2_0 -> (* Nil *)
        v1
and method79 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v136 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = '"' :: v6 
            let v18 : char list = '`' :: v9 
            let v27 : char list = '\\' :: v18 
            let v36 : (char list -> (char [])) = List.toArray
            let v37 : (char []) = v36 v27
            let v44 : string = $"parsing.none_of / unexpected end of input / chars: %A{v37} / s: %A{struct (v2, v3, v4)}"
            US15_1(v44)
        else
            let v46 : char = v1.[int 0]
            let v47 : (string -> int32) = String.length
            let v48 : int32 = v47 v1
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 1
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v1.[int v50..int v52]
            let v54 : int64 = 0L
            let v55 : bool = method75(v46, v54)
            let v56 : bool = v55 = false
            if v56 then
                let v59 : (char -> string) = _.ToString()
                let v60 : string = v59 v46
                let v67 : int32 = v60.Length
                let v68 : (char []) = Array.zeroCreate<char> (v67)
                let v69 : Mut5 = {l0 = 0} : Mut5
                while method59(v67, v69) do
                    let v71 : int32 = v69.l0
                    let v72 : char = v60.[int v71]
                    v68.[int v71] <- v72
                    let v73 : int32 = v71 + 1
                    v69.l0 <- v73
                    ()
                let v74 : char list = v68 |> Array.toList
                let v77 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v78 : (char -> (UH0 -> UH0)) = method60()
                let v79 : (char list -> (UH0 -> UH0)) = v77 v78
                let v80 : (UH0 -> UH0) = v79 v74
                let v81 : UH0 = UH0_0
                let v82 : UH0 = v80 v81
                let struct (v91 : System.Text.StringBuilder, v92 : int32, v93 : int32) = method61(v82, v2, v3, v4)
                US15_0(v46, v53, v91, v92, v93)
            else
                let v95 : char list = []
                let v98 : char list = '"' :: v95 
                let v107 : char list = '`' :: v98 
                let v116 : char list = '\\' :: v107 
                let v125 : (char list -> (char [])) = List.toArray
                let v126 : (char []) = v125 v116
                let v133 : string = $"parsing.none_of / unexpected char: '{v46}' / chars: %A{v126} / s: %A{struct (v2, v3, v4)}"
                US15_1(v133)
    let v156 : US16 =
        match v136 with
        | US15_1(v153) -> (* Error *)
            US16_1(v153)
        | US15_0(v137, v138, v139, v140, v141) -> (* Ok *)
            let v144 : (char -> string) = _.ToString()
            let v145 : string = v144 v137
            US16_0(v145, v138, v139, v140, v141)
    match v156 with
    | US16_1(v164) -> (* Error *)
        let v165 : UH2 = UH2_0
        let v166 : UH2 = method77(v0, v165)
        US23_0(v166, v1, v2, v3, v4)
    | US16_0(v157, v158, v159, v160, v161) -> (* Ok *)
        let v162 : UH2 = UH2_1(v157, v0)
        method79(v162, v158, v159, v160, v161)
and method80 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method80(v0, v6)
        else
            v1
and method71 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v154 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = ' ' :: v6 
            let v18 : char list = '"' :: v9 
            let v27 : char list = '`' :: v18 
            let v36 : char list = '\\' :: v27 
            let v45 : (char list -> (char [])) = List.toArray
            let v46 : (char []) = v45 v36
            let v53 : string = $"parsing.none_of / unexpected end of input / chars: %A{v46} / s: %A{struct (v2, v3, v4)}"
            US15_1(v53)
        else
            let v55 : char = v1.[int 0]
            let v56 : (string -> int32) = String.length
            let v57 : int32 = v56 v1
            let v58 : (int32 -> int32) = int32
            let v59 : int32 = v58 1
            let v60 : (int32 -> int32) = int32
            let v61 : int32 = v60 v57
            let v62 : string = v1.[int v59..int v61]
            let v63 : int64 = 0L
            let v64 : bool = method72(v55, v63)
            let v65 : bool = v64 = false
            if v65 then
                let v68 : (char -> string) = _.ToString()
                let v69 : string = v68 v55
                let v76 : int32 = v69.Length
                let v77 : (char []) = Array.zeroCreate<char> (v76)
                let v78 : Mut5 = {l0 = 0} : Mut5
                while method59(v76, v78) do
                    let v80 : int32 = v78.l0
                    let v81 : char = v69.[int v80]
                    v77.[int v80] <- v81
                    let v82 : int32 = v80 + 1
                    v78.l0 <- v82
                    ()
                let v83 : char list = v77 |> Array.toList
                let v86 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v87 : (char -> (UH0 -> UH0)) = method60()
                let v88 : (char list -> (UH0 -> UH0)) = v86 v87
                let v89 : (UH0 -> UH0) = v88 v83
                let v90 : UH0 = UH0_0
                let v91 : UH0 = v89 v90
                let struct (v100 : System.Text.StringBuilder, v101 : int32, v102 : int32) = method61(v91, v2, v3, v4)
                US15_0(v55, v62, v100, v101, v102)
            else
                let v104 : char list = []
                let v107 : char list = ' ' :: v104 
                let v116 : char list = '"' :: v107 
                let v125 : char list = '`' :: v116 
                let v134 : char list = '\\' :: v125 
                let v143 : (char list -> (char [])) = List.toArray
                let v144 : (char []) = v143 v134
                let v151 : string = $"parsing.none_of / unexpected char: '{v55}' / chars: %A{v144} / s: %A{struct (v2, v3, v4)}"
                US15_1(v151)
    let v174 : US16 =
        match v154 with
        | US15_1(v155) -> (* Error *)
            US16_1(v155)
        | US15_0(v157, v158, v159, v160, v161) -> (* Ok *)
            let v164 : (char -> string) = _.ToString()
            let v165 : string = v164 v157
            method73(v165, v158, v159, v160, v161)
    let v479 : US16 =
        match v174 with
        | US16_1(v180) -> (* Error *)
            let v261 : US15 =
                if v5 then
                    let v181 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
                    US15_1(v181)
                else
                    let v183 : char = v1.[int 0]
                    let v184 : bool = v183 = '"'
                    if v184 then
                        let v185 : (string -> int32) = String.length
                        let v186 : int32 = v185 v1
                        let v187 : (int32 -> int32) = int32
                        let v188 : int32 = v187 1
                        let v189 : (int32 -> int32) = int32
                        let v190 : int32 = v189 v186
                        let v191 : string = v1.[int v188..int v190]
                        let v194 : (char -> string) = _.ToString()
                        let v195 : string = v194 v183
                        let v202 : int32 = v195.Length
                        let v203 : (char []) = Array.zeroCreate<char> (v202)
                        let v204 : Mut5 = {l0 = 0} : Mut5
                        while method59(v202, v204) do
                            let v206 : int32 = v204.l0
                            let v207 : char = v195.[int v206]
                            v203.[int v206] <- v207
                            let v208 : int32 = v206 + 1
                            v204.l0 <- v208
                            ()
                        let v209 : char list = v203 |> Array.toList
                        let v212 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v213 : (char -> (UH0 -> UH0)) = method60()
                        let v214 : (char list -> (UH0 -> UH0)) = v212 v213
                        let v215 : (UH0 -> UH0) = v214 v209
                        let v216 : UH0 = UH0_0
                        let v217 : UH0 = v215 v216
                        let struct (v226 : System.Text.StringBuilder, v227 : int32, v228 : int32) = method61(v217, v2, v3, v4)
                        US15_0(v183, v191, v226, v227, v228)
                    else
                        let v230 : (string -> int32) = String.length
                        let v231 : int32 = v230 v1
                        let v232 : string = "\n"
                        let v233 : int32 = v1.IndexOf v232 
                        let v234 : int32 = v233 - 1
                        let v235 : bool = -2 = v234
                        let v236 : int32 =
                            if v235 then
                                v231
                            else
                                v234
                        let v237 : (int32 -> int32) = int32
                        let v238 : int32 = v237 0
                        let v239 : (int32 -> int32) = int32
                        let v240 : int32 = v239 v236
                        let v241 : string = v1.[int v238..int v240]
                        let v242 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v241}"
                        let v243 : int32 = v4 - 1
                        let v246 : (int32 -> (string -> string)) = String.replicate
                        let v247 : (string -> string) = v246 v243
                        let v248 : string = " "
                        let v249 : string = v247 v248
                        let v256 : string = "^"
                        let v257 : string = v249 + v256 
                        let v258 : string = $"{v242}
{v257}
"
                        US15_1(v258)
            let v408 : US16 =
                match v261 with
                | US15_1(v405) -> (* Error *)
                    US16_1(v405)
                | US15_0(v262, v263, v264, v265, v266) -> (* Ok *)
                    let v267 : UH2 = UH2_0
                    let v268 : US23 = method74(v267, v263, v264, v265, v266)
                    let v301 : US16 =
                        match v268 with
                        | US23_1(v298) -> (* Error *)
                            US16_1(v298)
                        | US23_0(v269, v270, v271, v272, v273) -> (* Ok *)
                            let v274 : string list = []
                            let v275 : string list = method78(v269, v274)
                            let v278 : string seq = seq { for i = 0 to v275.Length - 1 do yield v275.[i] }
                            let v287 : (string -> (string seq -> string)) = String.concat
                            let v288 : string = ""
                            let v289 : (string seq -> string) = v287 v288
                            let v290 : string = v289 v278
                            US16_0(v290, v270, v271, v272, v273)
                    match v301 with
                    | US16_1(v400) -> (* Error *)
                        let v401 : string = "between / expected content"
                        US16_1(v401)
                    | US16_0(v302, v303, v304, v305, v306) -> (* Ok *)
                        let v307 : bool = "" = v303
                        let v388 : US15 =
                            if v307 then
                                let v308 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v304, v305, v306)}"
                                US15_1(v308)
                            else
                                let v310 : char = v303.[int 0]
                                let v311 : bool = v310 = '"'
                                if v311 then
                                    let v312 : (string -> int32) = String.length
                                    let v313 : int32 = v312 v303
                                    let v314 : (int32 -> int32) = int32
                                    let v315 : int32 = v314 1
                                    let v316 : (int32 -> int32) = int32
                                    let v317 : int32 = v316 v313
                                    let v318 : string = v303.[int v315..int v317]
                                    let v321 : (char -> string) = _.ToString()
                                    let v322 : string = v321 v310
                                    let v329 : int32 = v322.Length
                                    let v330 : (char []) = Array.zeroCreate<char> (v329)
                                    let v331 : Mut5 = {l0 = 0} : Mut5
                                    while method59(v329, v331) do
                                        let v333 : int32 = v331.l0
                                        let v334 : char = v322.[int v333]
                                        v330.[int v333] <- v334
                                        let v335 : int32 = v333 + 1
                                        v331.l0 <- v335
                                        ()
                                    let v336 : char list = v330 |> Array.toList
                                    let v339 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v340 : (char -> (UH0 -> UH0)) = method60()
                                    let v341 : (char list -> (UH0 -> UH0)) = v339 v340
                                    let v342 : (UH0 -> UH0) = v341 v336
                                    let v343 : UH0 = UH0_0
                                    let v344 : UH0 = v342 v343
                                    let struct (v353 : System.Text.StringBuilder, v354 : int32, v355 : int32) = method61(v344, v304, v305, v306)
                                    US15_0(v310, v318, v353, v354, v355)
                                else
                                    let v357 : (string -> int32) = String.length
                                    let v358 : int32 = v357 v303
                                    let v359 : string = "\n"
                                    let v360 : int32 = v303.IndexOf v359 
                                    let v361 : int32 = v360 - 1
                                    let v362 : bool = -2 = v361
                                    let v363 : int32 =
                                        if v362 then
                                            v358
                                        else
                                            v361
                                    let v364 : (int32 -> int32) = int32
                                    let v365 : int32 = v364 0
                                    let v366 : (int32 -> int32) = int32
                                    let v367 : int32 = v366 v363
                                    let v368 : string = v303.[int v365..int v367]
                                    let v369 : string = $"parsing.p_char / expected: '{'"'}' / line: {v305} / col: {v306}
{v304}{v368}"
                                    let v370 : int32 = v306 - 1
                                    let v373 : (int32 -> (string -> string)) = String.replicate
                                    let v374 : (string -> string) = v373 v370
                                    let v375 : string = " "
                                    let v376 : string = v374 v375
                                    let v383 : string = "^"
                                    let v384 : string = v376 + v383 
                                    let v385 : string = $"{v369}
{v384}
"
                                    US15_1(v385)
                        match v388 with
                        | US15_1(v395) -> (* Error *)
                            let v396 : string = $"between / expected closing delimiter / e: %A{v395} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v263, v264, v265, v266)} / rest2: %A{struct (v303, v304, v305, v306)}"
                            US16_1(v396)
                        | US15_0(v389, v390, v391, v392, v393) -> (* Ok *)
                            US16_0(v302, v390, v391, v392, v393)
            match v408 with
            | US16_1(v414) -> (* Error *)
                let v415 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure33()
                let v416 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure34()
                let v417 : UH3 = UH3_0
                let v418 : UH3 = UH3_1(v416, v417)
                let v419 : UH3 = UH3_1(v415, v418)
                let v420 : US16 = method76(v1, v2, v3, v4, v419)
                let v431 : US16 =
                    match v420 with
                    | US16_1(v428) -> (* Error *)
                        US16_1(v428)
                    | US16_0(v421, v422, v423, v424, v425) -> (* Ok *)
                        let v426 : string = ""
                        US16_0(v426, v422, v423, v424, v425)
                let v442 : US23 =
                    match v431 with
                    | US16_1(v439) -> (* Error *)
                        US23_1(v439)
                    | US16_0(v432, v433, v434, v435, v436) -> (* Ok *)
                        let v437 : UH2 = UH2_0
                        method79(v437, v433, v434, v435, v436)
                match v442 with
                | US23_1(v472) -> (* Error *)
                    US16_1(v472)
                | US23_0(v443, v444, v445, v446, v447) -> (* Ok *)
                    let v448 : string list = []
                    let v449 : string list = method78(v443, v448)
                    let v452 : string seq = seq { for i = 0 to v449.Length - 1 do yield v449.[i] }
                    let v461 : (string -> (string seq -> string)) = String.concat
                    let v462 : string = ""
                    let v463 : (string seq -> string) = v461 v462
                    let v464 : string = v463 v452
                    US16_0(v464, v444, v445, v446, v447)
            | US16_0(v409, v410, v411, v412, v413) -> (* Ok *)
                v408
        | US16_0(v175, v176, v177, v178, v179) -> (* Ok *)
            v174
    match v479 with
    | US16_1(v480) -> (* Error *)
        let v481 : UH2 = UH2_0
        let v482 : UH2 = method77(v0, v481)
        US23_0(v482, v1, v2, v3, v4)
    | US16_0(v484, v485, v486, v487, v488) -> (* Ok *)
        let v489 : int32 = 0
        let v490 : int32 = method80(v485, v489)
        let v491 : bool = 0 = v490
        let v502 : US18 =
            if v491 then
                let v492 : string = "spaces1 / expected at least one space"
                US18_1(v492)
            else
                let v494 : (string -> int32) = String.length
                let v495 : int32 = v494 v485
                let v496 : (int32 -> int32) = int32
                let v497 : int32 = v496 v490
                let v498 : (int32 -> int32) = int32
                let v499 : int32 = v498 v495
                let v500 : string = v485.[int v497..int v499]
                US18_0(v500, v486, v487, v488)
        match v502 with
        | US18_1(v503) -> (* Error *)
            let v504 : UH2 = UH2_0
            let v505 : UH2 = UH2_1(v484, v504)
            let v506 : UH2 = method77(v0, v505)
            US23_0(v506, v485, v486, v487, v488)
        | US18_0(v508, v509, v510, v511) -> (* Ok *)
            let v512 : UH2 = UH2_1(v484, v0)
            method71(v512, v508, v509, v510, v511)
and method70 (v0 : string) : US22 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v3 : (string -> string option) = Option.ofObj
    let v4 : string option = v3 v0
    v4 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v5 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v14 : string = ""
    let v15 : string = v5 |> Option.defaultValue v14 
    let v22 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v23 : System.Text.StringBuilder = v22 v14
    let v24 : UH2 = UH2_0
    let v25 : int32 = 1
    let v26 : int32 = 1
    let v27 : US23 = method71(v24, v15, v23, v25, v26)
    match v27 with
    | US23_1(v46) -> (* Error *)
        US22_1(v46)
    | US23_0(v28, v29, v30, v31, v32) -> (* Ok *)
        let v33 : string list = []
        let v34 : string list = method78(v28, v33)
        let v37 : (string list -> (string [])) = List.toArray
        let v38 : (string []) = v37 v34
        US22_0(v38)
and closure35 () () : string =
    let v0 : string = $"runtime.execute_with_options"
    v0
and closure36 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option) =
    struct (v7, v8, v0, v1, v2, v3, v4, v5, v6)
and method83 (v0 : Mut4, v1 : Vec<std_string_String>) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method85 (v0 : Mut4, v1 : System.Threading.CancellationToken option) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method86 (v0 : Mut4, v1 : (struct (string * string) [])) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method87 (v0 : Mut4, v1 : (struct (int32 * string * bool) -> Async<unit>) option) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method88 (v0 : Mut4, v1 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method89 (v0 : Mut4, v1 : bool) : unit =
    let v4 : string =
        if v1 then
            let v2 : string = "true"
            v2
        else
            let v3 : string = "false"
            v3
    let v7 : string = $"{v4}"
    let v14 : string = v0.l0
    let v15 : string = v14 + v7 
    v0.l0 <- v15
    ()
and method90 (v0 : Mut4, v1 : string option) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method84 (v0 : Mut4, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : unit =
    let v8 : string = "{ "
    method11(v0, v8)
    method12(v0)
    let v9 : string = "command"
    method11(v0, v9)
    let v10 : string = " = "
    method11(v0, v10)
    method11(v0, v1)
    let v11 : string = "; "
    method11(v0, v11)
    let v12 : string = "cancellation_token"
    method11(v0, v12)
    method11(v0, v10)
    method85(v0, v2)
    method11(v0, v11)
    let v13 : string = "environment_variables"
    method11(v0, v13)
    method11(v0, v10)
    method86(v0, v3)
    method11(v0, v11)
    let v14 : string = "on_line"
    method11(v0, v14)
    method11(v0, v10)
    method87(v0, v4)
    method11(v0, v11)
    let v15 : string = "stdin"
    method11(v0, v15)
    method11(v0, v10)
    method88(v0, v5)
    method11(v0, v11)
    let v16 : string = "trace"
    method11(v0, v16)
    method11(v0, v10)
    method89(v0, v6)
    method11(v0, v11)
    let v17 : string = "working_directory"
    method11(v0, v17)
    method11(v0, v10)
    method90(v0, v7)
    let v18 : string = " }"
    method11(v0, v18)
and method82 (v0 : Mut4, v1 : string, v2 : Vec<std_string_String>, v3 : string, v4 : System.Threading.CancellationToken option, v5 : (struct (string * string) []), v6 : (struct (int32 * string * bool) -> Async<unit>) option, v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v8 : bool, v9 : string option) : unit =
    let v10 : string = "{ "
    method11(v0, v10)
    method12(v0)
    let v11 : string = "file_name"
    method11(v0, v11)
    let v12 : string = " = "
    method11(v0, v12)
    method11(v0, v1)
    let v13 : string = "; "
    method11(v0, v13)
    let v14 : string = "arguments"
    method11(v0, v14)
    method11(v0, v12)
    method83(v0, v2)
    method11(v0, v13)
    let v15 : string = "options"
    method11(v0, v15)
    method11(v0, v12)
    method84(v0, v3, v4, v5, v6, v7, v8, v9)
    let v16 : string = " }"
    method11(v0, v16)
and closure37 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : string, v1162 : Vec<std_string_String>, v1163 : string, v1164 : System.Threading.CancellationToken option, v1165 : (struct (string * string) []), v1166 : (struct (int32 * string * bool) -> Async<unit>) option, v1167 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v1168 : bool, v1169 : string option) = v2 ()
    let v1170 : string = ""
    let v1171 : Mut4 = {l0 = v1170} : Mut4
    method82(v1171, v1161, v1162, v1163, v1164, v1165, v1166, v1167, v1168, v1169)
    let v1172 : string = v1171.l0
    let v1175 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1172}"
    let v1182 : char list = []
    let v1187 : (char list -> (char [])) = List.toArray
    let v1188 : (char []) = v1187 v1182
    let v1195 : string = v1175.TrimStart v1188 
    let v1234 : char list = []
    let v1237 : char list = '/' :: v1234 
    let v1246 : char list = ' ' :: v1237 
    let v1257 : (char list -> (char [])) = List.toArray
    let v1258 : (char []) = v1257 v1246
    let v1265 : string = v1195.TrimEnd v1258 
    v1265
and method81 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) : unit =
    let v3 : (unit -> string) = closure37(v0, v1, v2)
    method14(v0, v3)
and closure38 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US24 =
    US24_0(v0)
and method91 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) =
    closure38()
and closure39 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method92 () : (std_string_String -> US24) =
    closure39()
and closure40 () () : string =
    let v0 : string = $"runtime.execute_with_options / child error"
    v0
and closure41 (v0 : std_string_String) () : std_string_String =
    v0
and method94 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "error"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method40(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure42 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let v1161 : std_string_String = v2 ()
    let v1162 : string = ""
    let v1163 : Mut4 = {l0 = v1162} : Mut4
    method94(v1163, v1161)
    let v1164 : string = v1163.l0
    let v1167 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1164}"
    let v1174 : char list = []
    let v1179 : (char list -> (char [])) = List.toArray
    let v1180 : (char []) = v1179 v1174
    let v1187 : string = v1167.TrimStart v1180 
    let v1226 : char list = []
    let v1229 : char list = '/' :: v1226 
    let v1238 : char list = ' ' :: v1229 
    let v1249 : (char list -> (char [])) = List.toArray
    let v1250 : (char []) = v1249 v1238
    let v1257 : string = v1187.TrimEnd v1250 
    v1257
and method93 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) : unit =
    let v3 : (unit -> string) = closure42(v0, v1, v2)
    method14(v0, v3)
and method95 (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : std_sync_Arc<std_sync_Mutex<std_process_Child option>> =
    v0
and closure43 () (v0 : std_string_String) : US26 =
    US26_0(v0)
and method96 () : (std_string_String -> US26) =
    closure43()
and closure44 () (v0 : std_string_String) : US26 =
    US26_1(v0)
and method97 () : (std_string_String -> US26) =
    closure44()
and closure45 () () : string =
    let v0 : string = $"runtime.stdio_line"
    v0
and closure46 (v0 : std_string_String) () : std_string_String =
    v0
and method99 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "e"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method40(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure47 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let v1161 : std_string_String = v2 ()
    let v1162 : string = ""
    let v1163 : Mut4 = {l0 = v1162} : Mut4
    method99(v1163, v1161)
    let v1164 : string = v1163.l0
    let v1167 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1164}"
    let v1174 : char list = []
    let v1179 : (char list -> (char [])) = List.toArray
    let v1180 : (char []) = v1179 v1174
    let v1187 : string = v1167.TrimStart v1180 
    let v1226 : char list = []
    let v1229 : char list = '/' :: v1226 
    let v1238 : char list = ' ' :: v1229 
    let v1249 : (char list -> (char [])) = List.toArray
    let v1250 : (char []) = v1249 v1238
    let v1257 : string = v1187.TrimEnd v1250 
    v1257
and method98 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) : unit =
    let v3 : (unit -> string) = closure47(v0, v1, v2)
    method14(v0, v3)
and closure48 (v0 : string) () : string =
    v0
and closure49 () () : unit =
    ()
and closure50 (v0 : US0, v1 : (unit -> string), v2 : (unit -> unit)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    v2 ()
    let v1161 : string = ""
    let v1162 : Mut4 = {l0 = v1161} : Mut4
    method12(v1162)
    let v1163 : string = v1162.l0
    let v1166 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1163}"
    let v1173 : char list = []
    let v1178 : (char list -> (char [])) = List.toArray
    let v1179 : (char []) = v1178 v1173
    let v1186 : string = v1166.TrimStart v1179 
    let v1225 : char list = []
    let v1228 : char list = '/' :: v1225 
    let v1237 : char list = ' ' :: v1228 
    let v1248 : (char list -> (char [])) = List.toArray
    let v1249 : (char []) = v1248 v1237
    let v1256 : string = v1186.TrimEnd v1249 
    v1256
and method100 (v0 : US0, v1 : (unit -> string), v2 : (unit -> unit)) : unit =
    let v3 : (unit -> string) = closure50(v0, v1, v2)
    method14(v0, v3)
and method101 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>>) : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> =
    v0
and closure51 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v37
and method102 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure51()
and method103 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and method104 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> =
    v0
and method105 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> =
    v0
and method106 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and method107 (v0 : std_thread_JoinHandle<Result<unit, string>>) : std_thread_JoinHandle<Result<unit, string>> =
    v0
and closure52 () (v0 : std_process_Output) : US29 =
    US29_0(v0)
and closure53 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and closure54 () () : string =
    let v0 : string = $"runtime.execute_with_options / output error"
    v0
and closure55 (v0 : std_string_String) () : std_string_String =
    v0
and method108 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>) : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> =
    v0
and closure56 () () : string =
    let v0 : string = $"runtime.execute_with_options / result"
    v0
and closure57 (v0 : int32, v1 : string) () : struct (int32 * int32) =
    let v2 : int32 = v1.Length
    struct (v0, v2)
and method111 (v0 : Mut4, v1 : int32) : unit =
    let v4 : string = $"{v1}"
    let v11 : string = v0.l0
    let v12 : string = v11 + v4 
    v0.l0 <- v12
    ()
and method110 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method111(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "std_trace_length"
    method11(v0, v7)
    method11(v0, v5)
    method111(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure58 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : int32) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method110(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method109 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure58(v0, v1, v2)
    method14(v0, v3)
and closure59 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure60 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) () : struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option) =
    struct (v0, v1, v2, v3, v4, v5, v6)
and method114 (v0 : Mut4, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : unit =
    let v8 : string = "{ "
    method11(v0, v8)
    method12(v0)
    let v9 : string = "options"
    method11(v0, v9)
    let v10 : string = " = "
    method11(v0, v10)
    method84(v0, v1, v2, v3, v4, v5, v6, v7)
    let v11 : string = " }"
    method11(v0, v11)
and closure61 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : string, v1162 : System.Threading.CancellationToken option, v1163 : (struct (string * string) []), v1164 : (struct (int32 * string * bool) -> Async<unit>) option, v1165 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v1166 : bool, v1167 : string option) = v2 ()
    let v1168 : string = ""
    let v1169 : Mut4 = {l0 = v1168} : Mut4
    method114(v1169, v1161, v1162, v1163, v1164, v1165, v1166, v1167)
    let v1170 : string = v1169.l0
    let v1173 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1170}"
    let v1180 : char list = []
    let v1185 : (char list -> (char [])) = List.toArray
    let v1186 : (char []) = v1185 v1180
    let v1193 : string = v1173.TrimStart v1186 
    let v1232 : char list = []
    let v1235 : char list = '/' :: v1232 
    let v1244 : char list = ' ' :: v1235 
    let v1255 : (char list -> (char [])) = List.toArray
    let v1256 : (char []) = v1255 v1244
    let v1263 : string = v1193.TrimEnd v1256 
    v1263
and method113 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) : unit =
    let v3 : (unit -> string) = closure61(v0, v1, v2)
    method14(v0, v3)
and closure63 (v0 : string) () : string =
    v0
and closure62 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v12 : bool = true
    let mutable _v12 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : Async<unit> = null |> unbox<Async<unit>>
    v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : Async<unit> = null |> unbox<Async<unit>>
    v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : Async<unit> = null |> unbox<Async<unit>>
    v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : Async<unit> = null |> unbox<Async<unit>>
    v42 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : Async<unit> = null |> unbox<Async<unit>>
    v51 
    #endif
#else
    let v58 : Async<unit> option = None
    let mutable _v58 = v58 
    async {
    let v59 : string = v9.Data
    let v62 : string = null |> unbox<string>
    let v69 : bool = v59 = v62
    let v70 : bool = v69 <> true
    if v70 then
        let v73 : US31 option = None
        let _v73 = ref v73 
        match v3 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v74 : (struct (int32 * string * bool) -> Async<unit>) = x
        let v75 : US31 = US31_0(v74)
        v75 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v73.Value <- x
        let v76 : US31 option = _v73.Value 
        let v99 : US31 = US31_1
        let v100 : US31 = v76 |> Option.defaultValue v99 
        match v100 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v108) -> (* Some *)
            let v109 : int32 = v7.Id
            let v110 : Async<unit> = v108 struct (v109, v59, false)
            do! v110 
            ()
        let v111 : string = $"> {v59}"
        if v5 then
            let v112 : US0 = US0_0
            let v113 : (unit -> string) = closure63(v111)
            let v114 : (unit -> unit) = closure49()
            method100(v112, v113, v114)
        else
            let v117 : (string -> unit) = System.Console.WriteLine
            v117 v111
        let v122 : string = ""
        let v123 : string = $"{v122}{v59}{v122}"
        let v124 : (string -> unit) = v8.Push
        v124 v123
    }
    |> fun x -> _v58 <- Some x
    let v125 : Async<unit> = match _v58 with Some x -> x | None -> failwith "async.new_async_unit / _v58=None"
    v125 
    #endif
    |> fun x -> _v12 <- Some x
    let v126 : Async<unit> = match _v12 with Some x -> x | None -> failwith "base.run_target / _v12=None"
    let v143 : bool = true
    let mutable _v143 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v174 : (Async<unit> -> unit) = Async.StartImmediate
    v174 v126
    () 
    #endif
    |> fun x -> _v143 <- Some x
    match _v143 with Some x -> x | None -> failwith "base.run_target / _v143=None"
    ()
and closure64 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v12 : bool = true
    let mutable _v12 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : Async<unit> = null |> unbox<Async<unit>>
    v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : Async<unit> = null |> unbox<Async<unit>>
    v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : Async<unit> = null |> unbox<Async<unit>>
    v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : Async<unit> = null |> unbox<Async<unit>>
    v42 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : Async<unit> = null |> unbox<Async<unit>>
    v51 
    #endif
#else
    let v58 : Async<unit> option = None
    let mutable _v58 = v58 
    async {
    let v59 : string = v9.Data
    let v62 : string = null |> unbox<string>
    let v69 : bool = v59 = v62
    let v70 : bool = v69 <> true
    if v70 then
        let v73 : US31 option = None
        let _v73 = ref v73 
        match v3 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v74 : (struct (int32 * string * bool) -> Async<unit>) = x
        let v75 : US31 = US31_0(v74)
        v75 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v73.Value <- x
        let v76 : US31 option = _v73.Value 
        let v99 : US31 = US31_1
        let v100 : US31 = v76 |> Option.defaultValue v99 
        match v100 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v108) -> (* Some *)
            let v109 : int32 = v7.Id
            let v110 : Async<unit> = v108 struct (v109, v59, true)
            do! v110 
            ()
        let v111 : string = $"! {v59}"
        if v5 then
            let v112 : US0 = US0_0
            let v113 : (unit -> string) = closure63(v111)
            let v114 : (unit -> unit) = closure49()
            method100(v112, v113, v114)
        else
            let v117 : (string -> unit) = System.Console.WriteLine
            v117 v111
        let v122 : string = "\u001b[7;4m"
        let v123 : string = "\u001b[0m"
        let v124 : string = $"{v122}{v59}{v123}"
        let v125 : (string -> unit) = v8.Push
        v125 v124
    }
    |> fun x -> _v58 <- Some x
    let v126 : Async<unit> = match _v58 with Some x -> x | None -> failwith "async.new_async_unit / _v58=None"
    v126 
    #endif
    |> fun x -> _v12 <- Some x
    let v127 : Async<unit> = match _v12 with Some x -> x | None -> failwith "base.run_target / _v12=None"
    let v144 : bool = true
    let mutable _v144 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v175 : (Async<unit> -> unit) = Async.StartImmediate
    v175 v127
    () 
    #endif
    |> fun x -> _v144 <- Some x
    match _v144 with Some x -> x | None -> failwith "base.run_target / _v144=None"
    ()
and closure65 (v0 : System.Diagnostics.Process) () : unit =
    let v3 : bool = true
    let mutable _v3 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : bool = null |> unbox<bool>
    v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : bool = null |> unbox<bool>
    v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : bool = null |> unbox<bool>
    v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : bool = null |> unbox<bool>
    v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : bool = null |> unbox<bool>
    v42 
    #endif
#else
    let v49 : bool = v0.HasExited
    v49 
    #endif
    |> fun x -> _v3 <- Some x
    let v50 : bool = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    let v65 : bool = v50 = false
    if v65 then
        let v68 : bool = true
        let mutable _v68 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v99 : (unit -> unit) = v0.Kill
        v99 ()
        () 
        #endif
        |> fun x -> _v68 <- Some x
        match _v68 with Some x -> x | None -> failwith "base.run_target / _v68=None"
        ()
and closure66 () () : string =
    let v0 : string = $"runtime.execute_with_options_async / WaitForExitAsync"
    v0
and closure67 (v0 : System.Threading.Tasks.TaskCanceledException) () : System.Threading.Tasks.TaskCanceledException =
    v0
and method117 (v0 : Mut4, v1 : System.Threading.Tasks.TaskCanceledException) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method116 (v0 : Mut4, v1 : System.Threading.Tasks.TaskCanceledException) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "ex"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method117(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure68 (v0 : US0, v1 : (unit -> string), v2 : (unit -> System.Threading.Tasks.TaskCanceledException)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let v1161 : System.Threading.Tasks.TaskCanceledException = v2 ()
    let v1162 : string = ""
    let v1163 : Mut4 = {l0 = v1162} : Mut4
    method116(v1163, v1161)
    let v1164 : string = v1163.l0
    let v1167 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1164}"
    let v1174 : char list = []
    let v1179 : (char list -> (char [])) = List.toArray
    let v1180 : (char []) = v1179 v1174
    let v1187 : string = v1167.TrimStart v1180 
    let v1226 : char list = []
    let v1229 : char list = '/' :: v1226 
    let v1238 : char list = ' ' :: v1229 
    let v1249 : (char list -> (char [])) = List.toArray
    let v1250 : (char []) = v1249 v1238
    let v1257 : string = v1187.TrimEnd v1250 
    v1257
and method115 (v0 : US0, v1 : (unit -> string), v2 : (unit -> System.Threading.Tasks.TaskCanceledException)) : unit =
    let v3 : (unit -> string) = closure68(v0, v1, v2)
    method14(v0, v3)
and closure69 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure70 (v0 : int32, v1 : string) () : struct (int32 * int32) =
    let v2 : int32 = v1.Length
    struct (v0, v2)
and method119 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method111(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "output_length"
    method11(v0, v7)
    method11(v0, v5)
    method111(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure71 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : int32) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method119(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method118 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure71(v0, v1, v2)
    method14(v0, v3)
and method112 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    let v9 : bool = true
    let mutable _v9 : Async<struct (int32 * string)> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v39 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v39 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v48 
    #endif
#else
    let v57 : bool = true
    let mutable _v57 : Async<struct (int32 * string)> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v60 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v60 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v78 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v78 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v96 
    #endif
#else
    let v103 : Async<struct (int32 * string)> option = None
    let mutable _v103 = v103 
    async {
    let v104 : US14 = method58(v0)
    let struct (v113 : string, v114 : US3) =
        match v104 with
        | US14_1(v107) -> (* Error *)
            let v108 : string = $"resultm.get / Result value was Error: {v107}"
            failwith<struct (string * US3)> v108
        | US14_0(v105, v106) -> (* Ok *)
            struct (v105, v106)
    let v117 : US3 option = None
    let _v117 = ref v117 
    match v6 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v118 : string = x
    let v119 : US3 = US3_0(v118)
    v119 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v117.Value <- x
    let v120 : US3 option = _v117.Value 
    let v143 : US3 = US3_1
    let v144 : US3 = v120 |> Option.defaultValue v143 
    let v155 : string =
        match v144 with
        | US3_1 -> (* None *)
            let v153 : string = ""
            v153
        | US3_0(v152) -> (* Some *)
            v152
    let v156 : US0 = US0_1
    let v157 : (unit -> string) = closure59()
    let v158 : (unit -> struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option)) = closure60(v0, v1, v2, v3, v4, v5, v6)
    method113(v156, v157, v158)
    let v159 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v163 : string =
        match v114 with
        | US3_1 -> (* None *)
            let v161 : string = ""
            v161
        | US3_0(v160) -> (* Some *)
            v160
    let start_info = System.Diagnostics.ProcessStartInfo (
      Arguments = v163,
      StandardOutputEncoding = v159,
      WorkingDirectory = v155,
      FileName = v113,
      CreateNoWindow = true,
      RedirectStandardError = true,
      RedirectStandardOutput = true,
      UseShellExecute = false
    )
    let v164 : System.Diagnostics.ProcessStartInfo = start_info
    let v165 : int32 = v2.Length
    let v166 : Mut5 = {l0 = 0} : Mut5
    while method59(v165, v166) do
        let v168 : int32 = v166.l0
        let struct (v169 : string, v170 : string) = v2.[int v168]
        v164.EnvironmentVariables.[v169] <- v170 
        let v171 : int32 = v168 + 1
        v166.l0 <- v171
        ()
    let v172 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v164)
    use v172 = v172 
    let v173 : System.Diagnostics.Process = v172 
    let v174 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
    let v175 : System.Collections.Concurrent.ConcurrentStack<string> = v174 ()
    let v176 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v173, v175)
    v173.OutputDataReceived.Add v176 
    let v177 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure64(v0, v1, v2, v3, v4, v5, v6, v173, v175)
    v173.ErrorDataReceived.Add v177 
    let v178 : (unit -> bool) = v173.Start
    let v179 : bool = v178 ()
    let v180 : bool = v179 = false
    if v180 then
        let v181 : string = $"runtime.execute_with_options_async / process_start error"
        failwith<unit> v181
    let v182 : (unit -> unit) = v173.BeginErrorReadLine
    v182 ()
    let v183 : (unit -> unit) = v173.BeginOutputReadLine
    v183 ()
    let v186 : US32 option = None
    let _v186 = ref v186 
    match v1 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v187 : System.Threading.CancellationToken = x
    let v188 : US32 = US32_0(v187)
    v188 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v186.Value <- x
    let v189 : US32 option = _v186.Value 
    let v212 : US32 = US32_1
    let v213 : US32 = v189 |> Option.defaultValue v212 
    let v224 : System.Threading.CancellationToken =
        match v213 with
        | US32_1 -> (* None *)
            let v222 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
            v222
        | US32_0(v221) -> (* Some *)
            v221
    let v227 : bool = true
    let mutable _v227 : Async<System.Threading.CancellationToken> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v230 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v230 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v239 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v239 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v248 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v248 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v257 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v257 
    #endif
#if FABLE_COMPILER_PYTHON
    let v266 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v266 
    #endif
#else
    let v275 : bool = true
    let mutable _v275 : Async<System.Threading.CancellationToken> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v278 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v278 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v287 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v287 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v296 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v296 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v305 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v305 
    #endif
#if FABLE_COMPILER_PYTHON
    let v314 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v314 
    #endif
#else
    let v321 : Async<System.Threading.CancellationToken> option = None
    let mutable _v321 = v321 
    async {
    let v322 : Async<System.Threading.CancellationToken> = Async.CancellationToken
    let! v322 = v322 
    let v323 : System.Threading.CancellationToken = v322 
    let v324 : System.Threading.CancellationToken = Async.DefaultCancellationToken
    let v325 : (System.Threading.CancellationToken []) = [|v323; v324; v224|]
    let v326 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
    let v327 : System.Threading.CancellationTokenSource = v326 v325
    let v328 : System.Threading.CancellationToken = v327.Token
    return v328 
    }
    |> fun x -> _v321 <- Some x
    let v329 : Async<System.Threading.CancellationToken> = match _v321 with Some x -> x | None -> failwith "async.new_async_unit / _v321=None"
    v329 
    #endif
    |> fun x -> _v275 <- Some x
    let v330 : Async<System.Threading.CancellationToken> = match _v275 with Some x -> x | None -> failwith "base.run_target / _v275=None"
    v330 
    #endif
    |> fun x -> _v227 <- Some x
    let v345 : Async<System.Threading.CancellationToken> = match _v227 with Some x -> x | None -> failwith "base.run_target / _v227=None"
    let! v345 = v345 
    let v360 : System.Threading.CancellationToken = v345 
    let v361 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v360.Register
    let v362 : (unit -> unit) = closure65(v173)
    let v363 : System.Threading.CancellationTokenRegistration = v361 v362
    use v363 = v363 
    let v364 : System.Threading.CancellationTokenRegistration = v363 
    let v367 : bool = true
    let mutable _v367 : Async<int32> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v370 : Async<int32> = null |> unbox<Async<int32>>
    v370 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v379 : Async<int32> = null |> unbox<Async<int32>>
    v379 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v388 : Async<int32> = null |> unbox<Async<int32>>
    v388 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v397 : Async<int32> = null |> unbox<Async<int32>>
    v397 
    #endif
#if FABLE_COMPILER_PYTHON
    let v406 : Async<int32> = null |> unbox<Async<int32>>
    v406 
    #endif
#else
    let v413 : Async<int32> option = None
    let mutable _v413 = v413 
    async {
    try
    let v414 : System.Threading.Tasks.Task = v173.WaitForExitAsync v360 
    let v417 : bool = true
    let mutable _v417 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v420 : Async<unit> = null |> unbox<Async<unit>>
    v420 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v429 : Async<unit> = null |> unbox<Async<unit>>
    v429 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v438 : Async<unit> = null |> unbox<Async<unit>>
    v438 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v447 : Async<unit> = null |> unbox<Async<unit>>
    v447 
    #endif
#if FABLE_COMPILER_PYTHON
    let v456 : Async<unit> = null |> unbox<Async<unit>>
    v456 
    #endif
#else
    let v463 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
    let v464 : Async<unit> = v463 v414
    v464 
    #endif
    |> fun x -> _v417 <- Some x
    let v465 : Async<unit> = match _v417 with Some x -> x | None -> failwith "base.run_target / _v417=None"
    do! v465 
    let v480 : int32 = v173.ExitCode
    return v480 
    with ex ->
    let v481 : exn = ex
    let v484 : bool = true
    let mutable _v484 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v487 : string = $"%A{v481}"
    v487 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v496 : string = $"%A{v481}"
    v496 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v505 : string = $"%A{v481}"
    v505 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v514 : string = $"%A{v481}"
    v514 
    #endif
#if FABLE_COMPILER_PYTHON
    let v523 : string = $"%A{v481}"
    v523 
    #endif
#else
    let v530 : string = $"{v481.GetType ()}: {v481.Message}"
    v530 
    #endif
    |> fun x -> _v484 <- Some x
    let v531 : string = match _v484 with Some x -> x | None -> failwith "base.run_target / _v484=None"
    let v546 : (string -> unit) = v175.Push
    v546 v531
    let v549 : System.Threading.Tasks.TaskCanceledException = v481 |> unbox<System.Threading.Tasks.TaskCanceledException>
    let v556 : US0 = US0_3
    let v557 : (unit -> string) = closure66()
    let v558 : (unit -> System.Threading.Tasks.TaskCanceledException) = closure67(v549)
    method115(v556, v557, v558)
    return -2147483648 
    (*
    *)
    }
    |> fun x -> _v413 <- Some x
    let v559 : Async<int32> = match _v413 with Some x -> x | None -> failwith "async.new_async_unit / _v413=None"
    v559 
    #endif
    |> fun x -> _v367 <- Some x
    let v560 : Async<int32> = match _v367 with Some x -> x | None -> failwith "base.run_target / _v367=None"
    let! v560 = v560 
    let v575 : int32 = v560 
    let v578 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.rev
    let v579 : string seq = v578 v175
    let v588 : (string -> (string seq -> string)) = String.concat
    let v589 : string = "\n"
    let v590 : (string seq -> string) = v588 v589
    let v591 : string = v590 v579
    let v598 : US0 = US0_1
    let v599 : (unit -> string) = closure69()
    let v600 : (unit -> struct (int32 * int32)) = closure70(v575, v591)
    method118(v598, v599, v600)
    return struct (v575, v591) 
    }
    |> fun x -> _v103 <- Some x
    let v601 : Async<struct (int32 * string)> = match _v103 with Some x -> x | None -> failwith "async.new_async_unit / _v103=None"
    v601 
    #endif
    |> fun x -> _v57 <- Some x
    let v602 : Async<struct (int32 * string)> = match _v57 with Some x -> x | None -> failwith "base.run_target / _v57=None"
    v602 
    #endif
    |> fun x -> _v9 <- Some x
    let v617 : Async<struct (int32 * string)> = match _v9 with Some x -> x | None -> failwith "base.run_target / _v9=None"
    v617
and method56 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    let v9 : bool = true
    let mutable _v9 : struct (int32 * string) option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10 : string = method57(v0, v1, v2, v3, v4, v5, v6)
    let v11 : US14 = method58(v10)
    let struct (v20 : string, v21 : US3) =
        match v11 with
        | US14_1(v14) -> (* Error *)
            let v15 : string = $"resultm.get / Result value was Error: {v14}"
            failwith<struct (string * US3)> v15
        | US14_0(v12, v13) -> (* Ok *)
            struct (v12, v13)
    let v25 : string =
        match v21 with
        | US3_1 -> (* None *)
            let v23 : string = ""
            v23
        | US3_0(v22) -> (* Some *)
            v22
    let v26 : US22 = method70(v25)
    let v32 : (string []) =
        match v26 with
        | US22_1(v28) -> (* Error *)
            let v29 : string = $"resultm.get / Result value was Error: {v28}"
            failwith<(string [])> v29
        | US22_0(v27) -> (* Ok *)
            v27
    let v33 : string = "$0.to_vec()"
    let v34 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "true; let _result : Vec<_> = v34.into_iter().map(|x| { //"
    let v36 : bool = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "x"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "&*$0"
    let v40 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "true; $0 }).collect::<Vec<_>>()"
    let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let v45 : string = "_result"
    let v46 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v45 
    let v47 : US0 = US0_1
    let v48 : (unit -> string) = closure35()
    let v49 : (unit -> struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option)) = closure36(v0, v1, v2, v3, v4, v5, v6, v20, v46)
    method81(v47, v48, v49)
    let v50 : bool = true
    let mutable _v50 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v51 : string = "std::process::Command::new(&*$0)"
    let v52 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v20 v51 
    let v53 : string = "true; let mut v52 = v52"
    let v54 : bool = Fable.Core.RustInterop.emitRustExpr () v53 
    let v55 : string = "std::process::Command::args(&mut $0, &*$1)"
    let v56 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v52, v46) v55 
    let v57 : string = "std::process::Stdio::piped()"
    let v58 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "std::process::Command::stdout($0, std::process::Stdio::piped())"
    let v60 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v56 v59 
    let v61 : string = "std::process::Stdio::piped()"
    let v62 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "std::process::Command::stderr($0, std::process::Stdio::piped())"
    let v64 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v60 v63 
    let v65 : string = "std::process::Stdio::piped()"
    let v66 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "std::process::Command::stdin($0, std::process::Stdio::piped())"
    let v68 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v64 v67 
    let v71 : US3 option = None
    let _v71 = ref v71 
    match v6 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v72 : string = x
    let v73 : US3 = US3_0(v72)
    v73 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v71.Value <- x
    let v74 : US3 option = _v71.Value 
    let v97 : US3 = US3_1
    let v98 : US3 = v74 |> Option.defaultValue v97 
    let v110 : Ref<Mut<std_process_Command>> =
        match v98 with
        | US3_1 -> (* None *)
            v68
        | US3_0(v106) -> (* Some *)
            let v107 : string = "std::process::Command::current_dir(v68, &*$0)"
            let v108 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v106 v107 
            v108
    let v111 : uint64 = System.Convert.ToUInt64 v2.Length
    let v112 : bool = v111 = 0UL
    let v128 : Ref<Mut<std_process_Command>> =
        if v112 then
            v110
        else
            let v113 : string = "$0.to_vec()"
            let v114 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v113 
            let v115 : string = "true; let _result = $0.into_iter().fold(v110, |acc, x| { //"
            let v116 : bool = Fable.Core.RustInterop.emitRustExpr v114 v115 
            let v117 : string = "acc"
            let v118 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v117 
            let v119 : string = "x"
            let struct (v120 : string, v121 : string) = Fable.Core.RustInterop.emitRustExpr () v119 
            let v122 : string = "std::process::Command::env(v118, &*$0, &*$1)"
            let v123 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v120, v121) v122 
            let v124 : string = "true; $0 })"
            let v125 : bool = Fable.Core.RustInterop.emitRustExpr v123 v124 
            let v126 : string = "_result"
            let v127 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v126 
            v127
    let v129 : string = "std::process::Command::spawn($0)"
    let v130 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v128 v129 
    let v131 : (std_io_Error -> std_string_String) = method37()
    let v132 : string = "$0.map_err(|x| $1(x))"
    let v133 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v130, v131) v132 
    let v134 : string = "true; let _result = $0.map(|x| { //"
    let v135 : bool = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let v136 : string = "x"
    let v137 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v136 
    let v140 : std_process_Child option = Some v137 
    let v147 : string = "std::sync::Mutex::new($0)"
    let v148 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v140 v147 
    let v149 : string = "std::sync::Arc::new($0)"
    let v150 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v148 v149 
    let v151 : string = "true; $0 })"
    let v152 : bool = Fable.Core.RustInterop.emitRustExpr v150 v151 
    let v153 : string = "_result"
    let v154 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v153 
    let v155 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) = method91()
    let v156 : (std_string_String -> US24) = method92()
    let v157 : string = "match v154 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v158 : US24 = Fable.Core.RustInterop.emitRustExpr struct (v155, v156) v157 
    let struct (v667 : int32, v668 : US5, v669 : US25) =
        match v158 with
        | US24_1(v658) -> (* Error *)
            let v659 : US0 = US0_4
            let v660 : (unit -> string) = closure40()
            let v661 : (unit -> std_string_String) = closure41(v658)
            method93(v659, v660, v661)
            let v662 : US5 = US5_0(v658)
            let v663 : US25 = US25_1
            struct (-1, v662, v663)
        | US24_0(v159) -> (* Ok *)
            let v160 : string = "true; let _result = (|| { //"
            let v161 : bool = Fable.Core.RustInterop.emitRustExpr () v160 
            let v162 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method95(v159)
            let v163 : string = "v162.lock()"
            let v164 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v163 
            let v165 : string = "$0.unwrap()"
            let v166 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v164 v165 
            let v167 : string = "true; let mut v166 = v166"
            let v168 : bool = Fable.Core.RustInterop.emitRustExpr () v167 
            let v169 : string = "&mut $0"
            let v170 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v166 v169 
            let v171 : string = "$0.as_mut()"
            let v172 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v170 v171 
            let v173 : string = "$0.unwrap()"
            let v174 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v172 v173 
            let v175 : string = "&mut v174.stdout"
            let v176 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr () v175 
            let v177 : string = "Option::take($0)"
            let v178 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v176 v177 
            let v179 : string = "$0.unwrap()"
            let v180 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v178 v179 
            let v181 : string = "true; $0 })()"
            let v182 : bool = Fable.Core.RustInterop.emitRustExpr v180 v181 
            let v183 : string = "_result"
            let v184 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v183 
            let v185 : string = "true; let _result = (|| { //"
            let v186 : bool = Fable.Core.RustInterop.emitRustExpr () v185 
            let v187 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method95(v159)
            let v188 : string = "v187.lock()"
            let v189 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v188 
            let v190 : string = "$0.unwrap()"
            let v191 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v189 v190 
            let v192 : string = "true; let mut v191 = v191"
            let v193 : bool = Fable.Core.RustInterop.emitRustExpr () v192 
            let v194 : string = "&mut $0"
            let v195 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v191 v194 
            let v196 : string = "$0.as_mut()"
            let v197 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v195 v196 
            let v198 : string = "$0.unwrap()"
            let v199 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v197 v198 
            let v200 : string = "&mut v199.stderr"
            let v201 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr () v200 
            let v202 : string = "Option::take($0)"
            let v203 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v201 v202 
            let v204 : string = "$0.unwrap()"
            let v205 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v203 v204 
            let v206 : string = "true; $0 })()"
            let v207 : bool = Fable.Core.RustInterop.emitRustExpr v205 v206 
            let v208 : string = "_result"
            let v209 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v208 
            let v210 : string = "true; let _result = (|| { //"
            let v211 : bool = Fable.Core.RustInterop.emitRustExpr () v210 
            let v212 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method95(v159)
            let v213 : string = "v212.lock()"
            let v214 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v213 
            let v215 : string = "$0.unwrap()"
            let v216 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v214 v215 
            let v217 : string = "true; let mut v216 = v216"
            let v218 : bool = Fable.Core.RustInterop.emitRustExpr () v217 
            let v219 : string = "&mut $0"
            let v220 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v216 v219 
            let v221 : string = "$0.as_mut()"
            let v222 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v220 v221 
            let v223 : string = "$0.unwrap()"
            let v224 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v222 v223 
            let v225 : string = "&mut $0.stdin"
            let v226 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v224 v225 
            let v227 : string = "Option::take($0)"
            let v228 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v226 v227 
            let v229 : string = "$0.unwrap()"
            let v230 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v228 v229 
            let v233 : std_process_ChildStdin option = Some v230 
            let v240 : string = "std::sync::Mutex::new($0)"
            let v241 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v233 v240 
            let v242 : string = "std::sync::Arc::new($0)"
            let v243 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v241 v242 
            let v244 : string = "true; $0 })()"
            let v245 : bool = Fable.Core.RustInterop.emitRustExpr v243 v244 
            let v246 : string = "_result"
            let v247 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v246 
            let v248 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v249 : std_sync_mpsc_Sender<std_string_String>, v250 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v248 
            let v251 : string = "std::sync::Mutex::new($0)"
            let v252 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v249 v251 
            let v253 : string = "std::sync::Arc::new($0)"
            let v254 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "std::sync::Mutex::new($0)"
            let v256 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v249 v255 
            let v257 : string = "std::sync::Arc::new($0)"
            let v258 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "std::sync::Mutex::new($0)"
            let v260 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v250 v259 
            let v261 : string = "std::sync::Arc::new($0)"
            let v262 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; let __result = std::thread::spawn(move || { //"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v266 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v184 v265 
            let v267 : string = "std::io::BufReader::new(v266)"
            let v268 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v267 
            let v269 : string = "std::io::BufRead::lines(v268)"
            let v270 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "true; let mut v270 = v270; let _result = v270.try_for_each(|x| { //"
            let v272 : bool = Fable.Core.RustInterop.emitRustExpr () v271 
            let v273 : string = "x"
            let v274 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v273 
            let v275 : string = "$0.clone()"
            let v276 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v254 v275 
            let v277 : (std_io_Error -> std_string_String) = method37()
            let v278 : string = "$0.map_err(|x| $1(x))"
            let v279 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v274, v277) v278 
            let v280 : (std_string_String -> US26) = method96()
            let v281 : (std_string_String -> US26) = method97()
            let v282 : string = "match v279 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v283 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v280, v281) v282 
            let v322 : std_string_String =
                match v283 with
                | US26_1(v312) -> (* Error *)
                    let v313 : US0 = US0_4
                    let v314 : (unit -> string) = closure45()
                    let v315 : (unit -> std_string_String) = closure46(v312)
                    method98(v313, v314, v315)
                    let v316 : string = $"\u001b[4;7m{v312}\u001b[0m"
                    let v317 : string = "&*$0"
                    let v318 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v316 v317 
                    let v319 : string = "String::from($0)"
                    let v320 : std_string_String = Fable.Core.RustInterop.emitRustExpr v318 v319 
                    v320
                | US26_0(v284) -> (* Ok *)
                    let v285 : string = "fable_library_rust::String_::fromString($0)"
                    let v286 : string = Fable.Core.RustInterop.emitRustExpr v284 v285 
                    let v287 : string = "encoding_rs::UTF_8"
                    let v288 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v287 
                    let v289 : string = "$0.encode(&*$1).0"
                    let v290 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v288, v286) v289 
                    let v291 : string = "$0.as_ref()"
                    let v292 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v290 v291 
                    let v293 : string = "std::str::from_utf8($0)"
                    let v294 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v292 v293 
                    let v295 : string = "$0.unwrap()"
                    let v296 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v295 
                    let v297 : string = "String::from($0)"
                    let v298 : std_string_String = Fable.Core.RustInterop.emitRustExpr v296 v297 
                    let v299 : string = "fable_library_rust::String_::fromString($0)"
                    let v300 : string = Fable.Core.RustInterop.emitRustExpr v298 v299 
                    let v301 : string = $"> {v300}"
                    if v5 then
                        let v302 : US0 = US0_0
                        let v303 : (unit -> string) = closure48(v301)
                        let v304 : (unit -> unit) = closure49()
                        method100(v302, v303, v304)
                    else
                        let v307 : (string -> unit) = System.Console.WriteLine
                        v307 v301
                    v298
            let v323 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method101(v276)
            let v324 : string = "v323.lock()"
            let v325 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v324 
            let v326 : string = "$0.unwrap()"
            let v327 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v325 v326 
            let v328 : string = "&$0"
            let v329 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v327 v328 
            let v330 : string = "$0.send($1)"
            let v331 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v329, v322) v330 
            let v332 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method102()
            let v333 : string = "$0.map_err(|x| $1(x))"
            let v334 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v331, v332) v333 
            let v335 : string = "$0"
            let v336 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v334 v335 
            let v337 : string = "true; $0 }); //"
            let v338 : bool = Fable.Core.RustInterop.emitRustExpr v336 v337 
            let v339 : string = "_result.map_err(|x| x.into())"
            let v340 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v339 
            let v341 : Result<unit, string> = method103(v340)
            let v342 : string = ""
            let v343 : string = "}"
            let v344 : string = v342 + v343 
            let v345 : string = "v341 " + v344 + "); " + v342 + " //"
            Fable.Core.RustInterop.emitRustExpr () v345 
            let v346 : string = "__result"
            let v347 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v346 
            let v348 : string = "true; let __result = std::thread::spawn(move || { //"
            let v349 : bool = Fable.Core.RustInterop.emitRustExpr () v348 
            let v350 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v351 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v209 v350 
            let v352 : string = "std::io::BufReader::new(v351)"
            let v353 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v352 
            let v354 : string = "std::io::BufRead::lines(v353)"
            let v355 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v354 
            let v356 : string = "true; let mut v355 = v355; let _result = v355.try_for_each(|x| { //"
            let v357 : bool = Fable.Core.RustInterop.emitRustExpr () v356 
            let v358 : string = "x"
            let v359 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v358 
            let v360 : string = "$0.clone()"
            let v361 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v258 v360 
            let v362 : (std_io_Error -> std_string_String) = method37()
            let v363 : string = "$0.map_err(|x| $1(x))"
            let v364 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v359, v362) v363 
            let v365 : (std_string_String -> US26) = method96()
            let v366 : (std_string_String -> US26) = method97()
            let v367 : string = "match v364 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v368 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v365, v366) v367 
            let v412 : std_string_String =
                match v368 with
                | US26_1(v402) -> (* Error *)
                    let v403 : US0 = US0_4
                    let v404 : (unit -> string) = closure45()
                    let v405 : (unit -> std_string_String) = closure46(v402)
                    method98(v403, v404, v405)
                    let v406 : string = $"\u001b[4;7m{v402}\u001b[0m"
                    let v407 : string = "&*$0"
                    let v408 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v406 v407 
                    let v409 : string = "String::from($0)"
                    let v410 : std_string_String = Fable.Core.RustInterop.emitRustExpr v408 v409 
                    v410
                | US26_0(v369) -> (* Ok *)
                    let v370 : string = "fable_library_rust::String_::fromString($0)"
                    let v371 : string = Fable.Core.RustInterop.emitRustExpr v369 v370 
                    let v372 : string = "encoding_rs::UTF_8"
                    let v373 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v372 
                    let v374 : string = "$0.encode(&*$1).0"
                    let v375 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v373, v371) v374 
                    let v376 : string = "$0.as_ref()"
                    let v377 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v375 v376 
                    let v378 : string = "std::str::from_utf8($0)"
                    let v379 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v377 v378 
                    let v380 : string = "$0.unwrap()"
                    let v381 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v379 v380 
                    let v382 : string = "String::from($0)"
                    let v383 : std_string_String = Fable.Core.RustInterop.emitRustExpr v381 v382 
                    let v384 : string = "fable_library_rust::String_::fromString($0)"
                    let v385 : string = Fable.Core.RustInterop.emitRustExpr v383 v384 
                    let v386 : string = $"! {v385}"
                    if v5 then
                        let v387 : US0 = US0_0
                        let v388 : (unit -> string) = closure48(v386)
                        let v389 : (unit -> unit) = closure49()
                        method100(v387, v388, v389)
                    else
                        let v392 : (string -> unit) = System.Console.WriteLine
                        v392 v386
                    let v397 : string = $"\u001b[4;7m{v383}\u001b[0m"
                    let v398 : string = "&*$0"
                    let v399 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v397 v398 
                    let v400 : string = "String::from($0)"
                    let v401 : std_string_String = Fable.Core.RustInterop.emitRustExpr v399 v400 
                    v401
            let v413 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method101(v361)
            let v414 : string = "v413.lock()"
            let v415 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v414 
            let v416 : string = "$0.unwrap()"
            let v417 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v415 v416 
            let v418 : string = "&$0"
            let v419 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v417 v418 
            let v420 : string = "$0.send($1)"
            let v421 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v419, v412) v420 
            let v422 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method102()
            let v423 : string = "$0.map_err(|x| $1(x))"
            let v424 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v421, v422) v423 
            let v425 : string = "$0"
            let v426 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v424 v425 
            let v427 : string = "true; $0 }); //"
            let v428 : bool = Fable.Core.RustInterop.emitRustExpr v426 v427 
            let v429 : string = "_result.map_err(|x| x.into())"
            let v430 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v429 
            let v431 : Result<unit, string> = method103(v430)
            let v432 : string = v342 + v343 
            let v433 : string = "v431 " + v432 + "); " + v342 + " //"
            Fable.Core.RustInterop.emitRustExpr () v433 
            let v434 : string = "__result"
            let v435 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v434 
            let v438 : US27 option = None
            let _v438 = ref v438 
            match v4 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v439 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) = x
            let v440 : US27 = US27_0(v439)
            v440 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v438.Value <- x
            let v441 : US27 option = _v438.Value 
            let v464 : US27 = US27_1
            let v465 : US27 = v441 |> Option.defaultValue v464 
            match v465 with
            | US27_1 -> (* None *)
                ()
            | US27_0(v473) -> (* Some *)
                let v474 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = method104(v247)
                let v475 : string = "v474.lock()"
                let v476 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v475 
                let v477 : string = "$0.unwrap()"
                let v478 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v476 v477 
                let v479 : string = "true; let mut v478 = v478"
                let v480 : bool = Fable.Core.RustInterop.emitRustExpr () v479 
                let v481 : string = "&mut $0"
                let v482 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v478 v481 
                let v483 : string = "Option::take($0)"
                let v484 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v482 v483 
                let v485 : string = "true; let _result = v484.map(|x| { //"
                let v486 : bool = Fable.Core.RustInterop.emitRustExpr () v485 
                let v487 : string = "x"
                let v488 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v487 
                let v489 : string = "std::sync::Mutex::new($0)"
                let v490 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v488 v489 
                let v491 : string = "std::sync::Arc::new($0)"
                let v492 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v490 v491 
                let v493 : string = "true; $0 })"
                let v494 : bool = Fable.Core.RustInterop.emitRustExpr v492 v493 
                let v495 : string = "_result"
                let v496 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v495 
                let v499 : US28 option = None
                let _v499 = ref v499 
                match v496 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v500 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = x
                let v501 : US28 = US28_0(v500)
                v501 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v499.Value <- x
                let v502 : US28 option = _v499.Value 
                let v525 : US28 = US28_1
                let v526 : US28 = v502 |> Option.defaultValue v525 
                match v526 with
                | US28_1 -> (* None *)
                    ()
                | US28_0(v534) -> (* Some *)
                    v473 v534
                    let v535 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = method105(v534)
                    let v536 : string = "v535.lock()"
                    let v537 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v536 
                    let v538 : string = "$0.unwrap()"
                    let v539 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v537 v538 
                    let v540 : std_sync_MutexGuard<std_process_ChildStdin> = method106(v539)
                    let v541 : string = "true; let mut v540 = v540"
                    let v542 : bool = Fable.Core.RustInterop.emitRustExpr () v541 
                    let v543 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v544 : bool = Fable.Core.RustInterop.emitRustExpr v540 v543 
                    ()
            let v545 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method95(v159)
            let v546 : string = "v545.lock()"
            let v547 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v546 
            let v548 : string = "$0.unwrap()"
            let v549 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v547 v548 
            let v550 : string = "true; let mut v549 = v549"
            let v551 : bool = Fable.Core.RustInterop.emitRustExpr () v550 
            let v552 : string = "&mut $0"
            let v553 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v549 v552 
            let v554 : string = "Option::take($0)"
            let v555 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v553 v554 
            let v556 : string = "$0.unwrap()"
            let v557 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v555 v556 
            let v558 : string = "$0.wait_with_output()"
            let v559 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v557 v558 
            let v560 : (std_io_Error -> std_string_String) = method37()
            let v561 : string = "$0.map_err(|x| $1(x))"
            let v562 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v559, v560) v561 
            let v563 : std_thread_JoinHandle<Result<unit, string>> = method107(v435)
            let v564 : string = "v563"
            let v565 : string = v564 + v342 
            let v566 : string = v565 + v342 
            let v567 : std_thread_JoinHandle<Result<unit, string>> = method107(v347)
            let v568 : string = "v567"
            let v569 : string = ", "
            let v570 : string = v568 + v569 
            let v571 : string = v570 + v566 
            let v572 : string = "vec![" + v571 + "]"
            let v573 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v572 
            let v574 : string = "true; v573.into_iter().for_each(|x| { //"
            let v575 : bool = Fable.Core.RustInterop.emitRustExpr () v574 
            let v576 : string = "x"
            let v577 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v576 
            let v578 : string = "std::thread::JoinHandle::join($0)"
            let v579 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v577 v578 
            let v580 : string = "$0.unwrap()"
            let v581 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v579 v580 
            let v582 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v581 v582 
            let v583 : string = "true; () }}); { //"
            let v584 : bool = Fable.Core.RustInterop.emitRustExpr () v583 
            let v585 : (std_process_Output -> US29) = closure52()
            let v586 : (std_string_String -> US29) = closure53()
            let v587 : US29 = match v562 with Ok x -> v585 x | Error x -> v586 x
            match v587 with
            | US29_1(v646) -> (* Error *)
                let v647 : US0 = US0_4
                let v648 : (unit -> string) = closure54()
                let v649 : (unit -> std_string_String) = closure55(v646)
                method93(v647, v648, v649)
                let v650 : US5 = US5_0(v646)
                let v651 : US25 = US25_1
                struct (-2, v650, v651)
            | US29_0(v588) -> (* Ok *)
                let v589 : string = "$0.status"
                let v590 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v588 v589 
                let v591 : string = "$0.code()"
                let v592 : int32 option = Fable.Core.RustInterop.emitRustExpr v590 v591 
                let v595 : US30 option = None
                let _v595 = ref v595 
                match v592 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v596 : int32 = x
                let v597 : US30 = US30_0(v596)
                v597 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v595.Value <- x
                let v598 : US30 option = _v595.Value 
                let v621 : US30 = US30_1
                let v622 : US30 = v598 |> Option.defaultValue v621 
                match v622 with
                | US30_1 -> (* None *)
                    let v633 : string = "&*$0"
                    let v634 : string = "runtime.execute_with_options / exit_code=None"
                    let v635 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v634 v633 
                    let v636 : string = "String::from($0)"
                    let v637 : std_string_String = Fable.Core.RustInterop.emitRustExpr v635 v636 
                    let v638 : US5 = US5_0(v637)
                    let v639 : US25 = US25_0(v262)
                    struct (-1, v638, v639)
                | US30_0(v630) -> (* Some *)
                    let v631 : US5 = US5_1
                    let v632 : US25 = US25_0(v262)
                    struct (v630, v631, v632)
    let v682 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v669 with
        | US25_1 -> (* None *)
            let v680 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v680
        | US25_0(v670) -> (* Some *)
            let v673 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v670 
            v673
    let v683 : string = "true; let _result = v682.map(|x| { //"
    let v684 : bool = Fable.Core.RustInterop.emitRustExpr () v683 
    let v685 : string = "x"
    let v686 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v685 
    let v687 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = method108(v686)
    let v688 : string = "v687.lock()"
    let v689 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v688 
    let v690 : string = "$0.unwrap()"
    let v691 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v689 v690 
    let v692 : string = "v691.iter()"
    let v693 : _ = Fable.Core.RustInterop.emitRustExpr () v692 
    let v694 : string = "v693.collect::<Vec<_>>()"
    let v695 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v694 
    let v696 : string = "true; let _result : Vec<_> = v695.into_iter().map(|x| { //"
    let v697 : bool = Fable.Core.RustInterop.emitRustExpr () v696 
    let v698 : string = "x"
    let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v698 
    let v700 : string = "fable_library_rust::String_::fromString($0)"
    let v701 : string = Fable.Core.RustInterop.emitRustExpr v699 v700 
    let v702 : string = "true; $0 }).collect::<Vec<_>>()"
    let v703 : bool = Fable.Core.RustInterop.emitRustExpr v701 v702 
    let v704 : string = "_result"
    let v705 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v704 
    let v706 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v707 : (string []) = Fable.Core.RustInterop.emitRustExpr v705 v706 
    let v710 : string seq = v707 |> Seq.ofArray
    let v719 : (string -> (string seq -> string)) = String.concat
    let v720 : string = "\n"
    let v721 : (string seq -> string) = v719 v720
    let v722 : string = v721 v710
    let v729 : string = "true; $0 })"
    let v730 : bool = Fable.Core.RustInterop.emitRustExpr v722 v729 
    let v731 : string = "_result"
    let v732 : string option = Fable.Core.RustInterop.emitRustExpr () v731 
    let v739 : US3 =
        match v668 with
        | US5_1 -> (* None *)
            US3_1
        | US5_0(v733) -> (* Some *)
            let v734 : string = "fable_library_rust::String_::fromString($0)"
            let v735 : string = Fable.Core.RustInterop.emitRustExpr v733 v734 
            US3_0(v735)
    let v743 : string =
        match v739 with
        | US3_1 -> (* None *)
            let v741 : string = ""
            v741
        | US3_0(v740) -> (* Some *)
            v740
    let v746 : string = v732 |> Option.defaultValue v743 
    let v753 : US0 = US0_0
    let v754 : (unit -> string) = closure56()
    let v755 : (unit -> struct (int32 * int32)) = closure57(v667, v746)
    method109(v753, v754, v755)
    let v756 : (int32 * string) = v667, v746 
    v756 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _v50 <- Some x
    let v757 : (int32 * string) = match _v50 with Some x -> x | None -> failwith "base.capture / _v50=None"
    let (a, b) = v757 
    let v760 : int32 = a
    let v761 : string = b
    struct (v760, v761) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v772 : int32, v773 : string) = null |> unbox<struct (int32 * string)>
    struct (v772, v773) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v784 : int32, v785 : string) = null |> unbox<struct (int32 * string)>
    struct (v784, v785) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v796 : int32, v797 : string) = null |> unbox<struct (int32 * string)>
    struct (v796, v797) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v808 : int32, v809 : string) = null |> unbox<struct (int32 * string)>
    struct (v808, v809) 
    #endif
#else
    let v818 : Async<struct (int32 * string)> = method112(v0, v1, v2, v3, v4, v5, v6)
    let v821 : bool = true
    let mutable _v821 : struct (int32 * string) option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v824 : int32, v825 : string) = null |> unbox<struct (int32 * string)>
    struct (v824, v825) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v836 : int32, v837 : string) = null |> unbox<struct (int32 * string)>
    struct (v836, v837) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v848 : int32, v849 : string) = null |> unbox<struct (int32 * string)>
    struct (v848, v849) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v860 : int32, v861 : string) = null |> unbox<struct (int32 * string)>
    struct (v860, v861) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v872 : int32, v873 : string) = null |> unbox<struct (int32 * string)>
    struct (v872, v873) 
    #endif
#else
    let v882 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v883 : int32, v884 : string) = v882 v818
    struct (v883, v884) 
    #endif
    |> fun x -> _v821 <- Some x
    let struct (v885 : int32, v886 : string) = match _v821 with Some x -> x | None -> failwith "base.run_target / _v821=None"
    struct (v885, v886) 
    #endif
    |> fun x -> _v9 <- Some x
    let struct (v905 : int32, v906 : string) = match _v9 with Some x -> x | None -> failwith "base.run_target / _v9=None"
    struct (v905, v906)
and closure72 () () : string =
    let v0 : string = "spiral_builder.process_cuda / env install error"
    v0
and closure73 (v0 : US8, v1 : string, v2 : string, v3 : int32) () : struct (US8 * int32 * string * string) =
    struct (v0, v3, v2, v1)
and method122 (v0 : Mut4, v1 : US8) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method121 (v0 : Mut4, v1 : US8, v2 : int32, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "env"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method122(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "exit_code"
    method11(v0, v9)
    method11(v0, v7)
    method111(v0, v2)
    method11(v0, v8)
    let v10 : string = "run_result"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "new_code_path"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure74 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (US8 * int32 * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : US8, v1162 : int32, v1163 : string, v1164 : string) = v2 ()
    let v1165 : string = ""
    let v1166 : Mut4 = {l0 = v1165} : Mut4
    method121(v1166, v1161, v1162, v1163, v1164)
    let v1167 : string = v1166.l0
    let v1170 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1167}"
    let v1177 : char list = []
    let v1182 : (char list -> (char [])) = List.toArray
    let v1183 : (char []) = v1182 v1177
    let v1190 : string = v1170.TrimStart v1183 
    let v1229 : char list = []
    let v1232 : char list = '/' :: v1229 
    let v1241 : char list = ' ' :: v1232 
    let v1252 : (char list -> (char [])) = List.toArray
    let v1253 : (char []) = v1252 v1241
    let v1260 : string = v1190.TrimEnd v1253 
    v1260
and method120 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (US8 * int32 * string * string))) : unit =
    let v3 : (unit -> string) = closure74(v0, v1, v2)
    method14(v0, v3)
and closure75 () (v0 : string) : US3 =
    US3_0(v0)
and closure76 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v14 : (string -> (string seq -> string)) = String.concat
    let v15 : (string seq -> string) = v14 v1
    v15 v5
and closure78 () () : string =
    let v0 : string = "spiral_builder.process_cuda / Exception"
    v0
and closure79 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v1, v0, v2)
and method125 (v0 : Mut4, v1 : exn) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method124 (v0 : Mut4, v1 : exn, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "ex"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method125(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "run_result"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "new_code_path"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "external_command"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure80 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : exn, v1162 : string, v1163 : string, v1164 : string) = v2 ()
    let v1165 : string = ""
    let v1166 : Mut4 = {l0 = v1165} : Mut4
    method124(v1166, v1161, v1162, v1163, v1164)
    let v1167 : string = v1166.l0
    let v1170 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1167}"
    let v1177 : char list = []
    let v1182 : (char list -> (char [])) = List.toArray
    let v1183 : (char []) = v1182 v1177
    let v1190 : string = v1170.TrimStart v1183 
    let v1229 : char list = []
    let v1232 : char list = '/' :: v1229 
    let v1241 : char list = ' ' :: v1232 
    let v1252 : (char list -> (char [])) = List.toArray
    let v1253 : (char []) = v1252 v1241
    let v1260 : string = v1190.TrimEnd v1253 
    v1260
and method123 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) : unit =
    let v3 : (unit -> string) = closure80(v0, v1, v2)
    method14(v0, v3)
and closure77 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure78()
    let v6 : (unit -> struct (exn * string * string * string)) = closure79(v0, v1, v2, v3)
    method123(v4, v5, v6)
    US3_1
and closure81 () () : string =
    let v0 : string = "spiral_builder.process_cuda / error"
    v0
and closure82 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and method127 (v0 : Mut4, v1 : int32, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "exit_code"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method111(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "run_result"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "new_code_path"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "external_command"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure83 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : string, v1163 : string, v1164 : string) = v2 ()
    let v1165 : string = ""
    let v1166 : Mut4 = {l0 = v1165} : Mut4
    method127(v1166, v1161, v1162, v1163, v1164)
    let v1167 : string = v1166.l0
    let v1170 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1167}"
    let v1177 : char list = []
    let v1182 : (char list -> (char [])) = List.toArray
    let v1183 : (char []) = v1182 v1177
    let v1190 : string = v1170.TrimStart v1183 
    let v1229 : char list = []
    let v1232 : char list = '/' :: v1229 
    let v1241 : char list = ' ' :: v1232 
    let v1252 : (char list -> (char [])) = List.toArray
    let v1253 : (char []) = v1252 v1241
    let v1260 : string = v1190.TrimEnd v1253 
    v1260
and method126 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) : unit =
    let v3 : (unit -> string) = closure83(v0, v1, v2)
    method14(v0, v3)
and closure84 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and method128 () : string =
    let v0 : string = "fs-path"
    v0
and method129 () : string =
    let v0 : string = "command"
    v0
and method130 () : string =
    let v0 : string = "path"
    v0
and method134 (v0 : string) : string =
    v0
and method136 () : string =
    let v0 : string = ""
    v0
and method137 (v0 : string) : string =
    v0
and method138 () : string =
    let v0 : string = "^\\\\\\\\\\?\\\\"
    v0
and method135 (v0 : string) : string =
    let v2 : bool = v0 = ""
    if v2 then
        let v3 : string = ""
        v3
    else
        let v4 : string = method136()
        let v7 : bool = true
        let mutable _v7 : string option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v8 : string = method137(v0)
        let v9 : string = $"regex::Regex::new(&$0)"
        let v10 : string = "^\\\\\\\\\\?\\\\"
        let v11 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v10 v9 
        let v12 : string = "$0.unwrap()"
        let v13 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v11 v12 
        let v14 : string = $"$0.replace_all(&$1, &*$2)"
        let v15 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v13, v8, v4) v14 
        let v16 : string = "String::from($0)"
        let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v16 
        let v18 : string = "fable_library_rust::String_::fromString($0)"
        let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
        v19 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v22 : string = null |> unbox<string>
        v22 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v31 : string = null |> unbox<string>
        v31 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v40 : string = null |> unbox<string>
        v40 
        #endif
#if FABLE_COMPILER_PYTHON
        let v49 : string = null |> unbox<string>
        v49 
        #endif
#else
        let v56 : string = method138()
        let v57 : string = System.Text.RegularExpressions.Regex.Replace (v0, v56, v4)
        v57 
        #endif
        |> fun x -> _v7 <- Some x
        let v58 : string = match _v7 with Some x -> x | None -> failwith "base.run_target / _v7=None"
        let v73 : string = $"{v58.[0] |> string |> _.ToLower()}{v58.[1..]}"
        let v74 : string = "\\"
        let v75 : string = "/"
        let v76 : string = v73.Replace (v74, v75)
        v76
and method139 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method140 () : char =
    let v2 : bool = true
    let mutable _v2 : char option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "std::path::MAIN_SEPARATOR"
    let v4 : char = Fable.Core.RustInterop.emitRustExpr () v3 
    v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : char = System.IO.Path.DirectorySeparatorChar
    v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : char = System.IO.Path.DirectorySeparatorChar
    v6 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    v7 
    #endif
#if FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    v9 
    #endif
    |> fun x -> _v2 <- Some x
    let v10 : char = match _v2 with Some x -> x | None -> failwith "base.run_target / _v2=None"
    v10
and method141 (v0 : string) : string =
    v0
and method133 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = method134(v0)
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "String::from($0)"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "std::path::PathBuf::from($0)"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "$0.exists()"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : bool = v12 = false
    let v167 : string =
        if v13 then
            let v14 : string = method30()
            let v15 : string = method20(v14, v4)
            let v16 : string = method135(v15)
            let v17 : string = "/"
            let v18 : (string []) = v16.Split v17 
            let v19 : (string []) = [||]
            let v20 : int32 = v18.Length
            let v21 : Mut6 = {l0 = 0; l1 = 0; l2 = v19} : Mut6
            while method139(v20, v21) do
                let v23 : int32 = v21.l0
                let v24 : int32 =  -v23
                let v25 : int32 = v24 + v20
                let v26 : int32 = v25 - 1
                let struct (v27 : int32, v28 : (string [])) = v21.l1, v21.l2
                let v29 : string = v18.[int v26]
                let v30 : bool = ".." = v29
                let struct (v72 : int32, v73 : (string [])) =
                    if v30 then
                        let v31 : int32 = v27 + 1
                        struct (v31, v28)
                    else
                        let v32 : bool = "." = v29
                        if v32 then
                            struct (v27, v28)
                        else
                            let v33 : bool = 0 = v27
                            if v33 then
                                let v34 : string = ":"
                                let v35 : bool = v29.EndsWith v34 
                                if v35 then
                                    let v36 : string = $"{v14.[0]}:"
                                    let v37 : (string []) = [|v36|]
                                    let v38 : int32 = v37.Length
                                    let v39 : int32 = v28.Length
                                    let v40 : int32 = v38 + v39
                                    let v41 : (string []) = Array.zeroCreate<string> (v40)
                                    let v42 : Mut5 = {l0 = 0} : Mut5
                                    while method59(v40, v42) do
                                        let v44 : int32 = v42.l0
                                        let v45 : bool = v44 < v38
                                        let v49 : string =
                                            if v45 then
                                                let v46 : string = v37.[int v44]
                                                v46
                                            else
                                                let v47 : int32 = v44 - v38
                                                let v48 : string = v28.[int v47]
                                                v48
                                        v41.[int v44] <- v49
                                        let v50 : int32 = v44 + 1
                                        v42.l0 <- v50
                                        ()
                                    struct (0, v41)
                                else
                                    let v51 : (string []) = [|v29|]
                                    let v52 : int32 = v51.Length
                                    let v53 : int32 = v28.Length
                                    let v54 : int32 = v52 + v53
                                    let v55 : (string []) = Array.zeroCreate<string> (v54)
                                    let v56 : Mut5 = {l0 = 0} : Mut5
                                    while method59(v54, v56) do
                                        let v58 : int32 = v56.l0
                                        let v59 : bool = v58 < v52
                                        let v63 : string =
                                            if v59 then
                                                let v60 : string = v51.[int v58]
                                                v60
                                            else
                                                let v61 : int32 = v58 - v52
                                                let v62 : string = v28.[int v61]
                                                v62
                                        v55.[int v58] <- v63
                                        let v64 : int32 = v58 + 1
                                        v56.l0 <- v64
                                        ()
                                    struct (0, v55)
                            else
                                let v67 : int32 = v27 - 1
                                struct (v67, v28)
                let v74 : int32 = v23 + 1
                v21.l0 <- v74
                v21.l1 <- v72
                v21.l2 <- v73
                ()
            let struct (v75 : int32, v76 : (string [])) = v21.l1, v21.l2
            let v79 : string seq = seq { for i = 0 to v76.Length - 1 do yield v76.[i] }
            let v86 : char = method140()
            let v89 : (char -> string) = _.ToString()
            let v90 : string = v89 v86
            let v99 : (string -> (string seq -> string)) = String.concat
            let v100 : (string seq -> string) = v99 v90
            v100 v79
        else
            let v108 : string = "std::fs::canonicalize(&*$0)"
            let v109 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4 v108 
            let v110 : string = "$0.unwrap()"
            let v111 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v109 v110 
            let v112 : string = "$0.display()"
            let v113 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v111 v112 
            let v116 : bool = true
            let mutable _v116 : std_string_String option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v117 : string = "format!(\"{}\", $0)"
            let v118 : std_string_String = Fable.Core.RustInterop.emitRustExpr v113 v117 
            v118 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v119 : string = "format!(\"{}\", $0)"
            let v120 : std_string_String = Fable.Core.RustInterop.emitRustExpr v113 v119 
            v120 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v121 : string = "format!(\"{}\", $0)"
            let v122 : std_string_String = Fable.Core.RustInterop.emitRustExpr v113 v121 
            v122 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v125 : std_string_String = null |> unbox<std_string_String>
            v125 
            #endif
#if FABLE_COMPILER_PYTHON
            let v134 : std_string_String = null |> unbox<std_string_String>
            v134 
            #endif
#else
            let v143 : std_string_String = null |> unbox<std_string_String>
            v143 
            #endif
            |> fun x -> _v116 <- Some x
            let v150 : std_string_String = match _v116 with Some x -> x | None -> failwith "base.run_target / _v116=None"
            let v165 : string = "fable_library_rust::String_::fromString($0)"
            let v166 : string = Fable.Core.RustInterop.emitRustExpr v150 v165 
            v166
    v167 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v170 : string = null |> unbox<string>
    v170 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v179 : string = null |> unbox<string>
    v179 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v188 : string = null |> unbox<string>
    v188 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string = null |> unbox<string>
    v197 
    #endif
#else
    let v204 : string = method141(v0)
    let v205 : (string -> string) = System.IO.Path.GetFullPath
    let v206 : string = v205 v204
    v206 
    #endif
    |> fun x -> _v3 <- Some x
    let v207 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v207
and method132 (v0 : string) : string =
    let v1 : string = method133(v0)
    method135(v1)
and method131 (v0 : string) : string =
    let v1 : string = method30()
    let v2 : string = method20(v1, v0)
    method132(v2)
and closure85 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method131(v2)
and method142 () : string =
    let v0 : string = "retries"
    v0
and method143 () : string =
    let v0 : string = "working-directory"
    v0
and closure86 () () : string =
    let v0 : string = "spiral_builder.run / repl error"
    v0
and closure87 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : struct (int32 * string * string) =
    let v4 : string = $"{v1}/{v0}"
    struct (v3, v2, v4)
and method146 (v0 : Mut4, v1 : int32, v2 : string, v3 : string) : unit =
    let v4 : string = "{ "
    method11(v0, v4)
    method12(v0)
    let v5 : string = "exit_code"
    method11(v0, v5)
    let v6 : string = " = "
    method11(v0, v6)
    method111(v0, v1)
    let v7 : string = "; "
    method11(v0, v7)
    let v8 : string = "repl_result"
    method11(v0, v8)
    method11(v0, v6)
    method11(v0, v2)
    method11(v0, v7)
    let v9 : string = "retry"
    method11(v0, v9)
    method11(v0, v6)
    method11(v0, v3)
    let v10 : string = " }"
    method11(v0, v10)
and closure88 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : string, v1163 : string) = v2 ()
    let v1164 : string = ""
    let v1165 : Mut4 = {l0 = v1164} : Mut4
    method146(v1165, v1161, v1162, v1163)
    let v1166 : string = v1165.l0
    let v1169 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1166}"
    let v1176 : char list = []
    let v1181 : (char list -> (char [])) = List.toArray
    let v1182 : (char []) = v1181 v1176
    let v1189 : string = v1169.TrimStart v1182 
    let v1228 : char list = []
    let v1231 : char list = '/' :: v1228 
    let v1240 : char list = ' ' :: v1231 
    let v1251 : (char list -> (char [])) = List.toArray
    let v1252 : (char []) = v1251 v1240
    let v1259 : string = v1189.TrimEnd v1252 
    v1259
and method145 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string))) : unit =
    let v3 : (unit -> string) = closure88(v0, v1, v2)
    method14(v0, v3)
and method144 (v0 : string option, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v15 : bool = false
    let struct (v16 : int32, v17 : string) = method56(v9, v4, v14, v6, v7, v15, v0)
    let v18 : bool = v16 = 0
    let v20 : bool =
        if v18 then
            true
        else
            let v19 : bool = v3 >= v1
            v19
    if v20 then
        struct (v16, v17)
    else
        let v21 : US0 = US0_1
        let v22 : (unit -> string) = closure86()
        let v23 : (unit -> struct (int32 * string * string)) = closure87(v1, v3, v17, v16)
        method145(v21, v22, v23)
        let v24 : uint8 = v3 + 1uy
        method144(v0, v1, v2, v24)
and closure89 () () : string =
    let v0 : string = "spiral_builder.run / dib / jupyter nbconvert"
    v0
and closure90 (v0 : string, v1 : int32) () : struct (int32 * int32) =
    let v2 : int32 = v0.Length
    struct (v1, v2)
and method148 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method111(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "jupyter_result_length"
    method11(v0, v7)
    method11(v0, v5)
    method111(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure91 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : int32) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method148(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method147 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure91(v0, v1, v2)
    method14(v0, v3)
and closure92 () () : string =
    let v0 : string = "spiral_builder.run / dib / html cell ids"
    v0
and closure93 (v0 : string, v1 : int32) () : struct (int32 * int32) =
    let v2 : int32 = v0.Length
    struct (v1, v2)
and method150 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method111(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "pwsh_replace_html_result_length"
    method11(v0, v7)
    method11(v0, v5)
    method111(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure94 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : int32) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method150(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method149 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure94(v0, v1, v2)
    method14(v0, v3)
and closure95 () () : string =
    let v0 : string = "spiral_builder.run / dib"
    v0
and closure96 (v0 : string, v1 : int32) () : struct (int32 * int32) =
    let v2 : int32 = v0.Length
    struct (v1, v2)
and method152 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method111(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "result_length"
    method11(v0, v7)
    method11(v0, v5)
    method111(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure97 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : int32) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method152(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method151 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure97(v0, v1, v2)
    method14(v0, v3)
and method154 () : string =
    let v0 : string = ""
    v0
and method153 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v5 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v6 : (string -> (uint8 [])) = v5 v4
    let v7 : (uint8 []) = v6 v0
    let v8 : string = "$0.to_vec()"
    let v9 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "std::io::Cursor::new(v9)"
    let v11 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "std::io::BufReader::new(v11)"
    let v13 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "true; let mut v13 = v13"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v16 
    let v17 : string = "result"
    let v18 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = "true; let mut v18 = v18"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
    let v23 : unativeint = 0 |> unativeint 
    let v30 : string = "[$0; 1024]"
    let v31 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v30 
    let v32 : string = "true; loop { // rust.loop"
    let v33 : bool = Fable.Core.RustInterop.emitRustExpr () v32 
    let v34 : string = "true; let mut v31 = v31"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = "std::io::Read::read(&mut v13, &mut v31)"
    let v37 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "$0.unwrap()"
    let v39 : unativeint = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v42 : bool = v39 = v23 
    if v42 then
        let v49 : string = "true; break"
        let v50 : bool = Fable.Core.RustInterop.emitRustExpr () v49 
        ()
    let v51 : string = "v31.len()"
    let v52 : unativeint = Fable.Core.RustInterop.emitRustExpr () v51 
    let v55 : uint8 = v52 |> uint8 
    let v64 : unativeint = v39 |> unativeint 
    let v73 : unativeint = v64 |> unbox<unativeint>
    let v82 : bool = v73 = v52 
    let v93 : Ref<Slice'<uint8>> =
        if v82 then
            let v89 : string = "&v31[v23..]"
            let v90 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v89 
            v90
        else
            let v91 : string = "&v31[$0..$1]"
            let v92 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v23, v64) v91 
            v92
    let v94 : string = "sha2::Digest::update(&mut v18, v93)"
    Fable.Core.RustInterop.emitRustExpr () v94 
    let v95 : string = "true; } // rust.loop"
    let v96 : bool = Fable.Core.RustInterop.emitRustExpr () v95 
    let v97 : string = "true; } // rust.loop"
    let v98 : bool = Fable.Core.RustInterop.emitRustExpr () v97 
    let v99 : string = "true; } // rust.loop"
    let v100 : bool = Fable.Core.RustInterop.emitRustExpr () v99 
    let v101 : string = "true; { // rust.loop"
    let v102 : bool = Fable.Core.RustInterop.emitRustExpr () v101 
    let v103 : string = "true; { // rust.loop"
    let v104 : bool = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : string = "&sha2::Digest::finalize(v18)"
    let v106 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v105 
    let v107 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v108 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "true; let _result : Vec<_> = v108.into_iter().map(|x| { //"
    let v110 : bool = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "x"
    let v112 : uint8 = Fable.Core.RustInterop.emitRustExpr () v111 
    let v113 : string = "format!(\"{:02x}\", $0)"
    let v114 : std_string_String = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "fable_library_rust::String_::fromString($0)"
    let v116 : string = Fable.Core.RustInterop.emitRustExpr v114 v115 
    let v117 : string = "true; $0 }).collect::<Vec<_>>()"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v116 v117 
    let v119 : string = "_result"
    let v120 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v122 : (string []) = Fable.Core.RustInterop.emitRustExpr v120 v121 
    let v125 : string seq = seq { for i = 0 to v122.Length - 1 do yield v122.[i] }
    let v134 : (string -> (string seq -> string)) = String.concat
    let v135 : string = ""
    let v136 : (string seq -> string) = v134 v135
    let v137 : string = v136 v125
    let v144 : Result<string, std_io_Error> = Ok v137 
    let v145 : string = "$0.unwrap()"
    let v146 : string = Fable.Core.RustInterop.emitRustExpr v144 v145 
    v146 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v149 : string = null |> unbox<string>
    v149 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v158 : string = null |> unbox<string>
    v158 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v165 : string = "crypto"
    let v166 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v165 
    let v167 : string = "v166.createHash($0)"
    let v168 : string = "sha256"
    let v169 : obj = Fable.Core.JsInterop.emitJsExpr v168 v167 
    let v170 : string = "$0.update($1, 'utf8')"
    let v171 : obj = Fable.Core.JsInterop.emitJsExpr struct (v169, v0) v170 
    let v172 : string = "$0.digest($1)"
    let v173 : string = "hex"
    let v174 : string = Fable.Core.JsInterop.emitJsExpr struct (v171, v173) v172 
    v174 
    #endif
#if FABLE_COMPILER_PYTHON
    let v177 : string = "hashlib"
    let v178 : IHashlibSha256 = Fable.Core.PyInterop.importAll v177 
    let v179 : string = "v178.sha256()"
    let v180 : obj = Fable.Core.PyInterop.emitPyExpr () v179 
    let v189 : string = "$0.encode($1)"
    let v190 : string = "utf-8"
    let v191 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v190) v189 
    let v200 : string = "v180.update($0)"
    Fable.Core.PyInterop.emitPyExpr v191 v200 
    let v207 : string = "v180.hexdigest()"
    let v208 : string = Fable.Core.PyInterop.emitPyExpr () v207 
    v208 
    #endif
#else
    let v215 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v216 : System.Security.Cryptography.SHA256 = v215 ()
    use v216 = v216 
    let v217 : System.Security.Cryptography.SHA256 = v216 
    let v218 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v219 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v220 : (string -> (uint8 [])) = v219 v218
    let v221 : (uint8 []) = v220 v0
    let v222 : ((uint8 []) -> (uint8 [])) = v217.ComputeHash
    let v223 : (uint8 []) = v222 v221
    let v224 : int32 = v223.Length
    let v225 : (string []) = Array.zeroCreate<string> (v224)
    let v226 : Mut5 = {l0 = 0} : Mut5
    while method59(v224, v226) do
        let v228 : int32 = v226.l0
        let v229 : uint8 = v223.[int v228]
        let v230 : (string -> string) = v229.ToString
        let v231 : string = "x2"
        let v232 : string = v230 v231
        v225.[int v228] <- v232
        let v233 : int32 = v228 + 1
        v226.l0 <- v233
        ()
    let v236 : string seq = seq { for i = 0 to v225.Length - 1 do yield v225.[i] }
    let v243 : string = method154()
    let v246 : (string -> (string seq -> string)) = String.concat
    let v247 : (string seq -> string) = v246 v243
    let v248 : string = v247 v236
    v248 
    #endif
    |> fun x -> _v3 <- Some x
    let v255 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v255
and method156 () : string =
    let v0 : string = "hh:mm"
    v0
and method157 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method158 () : string =
    let v0 : string = "hhmm"
    v0
and method155 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    let v4 : bool = true
    let mutable _v4 : System.Guid option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v16 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v17 : System.DateTime = v16 v7
    let v24 : System.DateTimeKind = System.DateTimeKind.Local
    let v25 : System.DateTime = System.DateTime.SpecifyKind (v1, v24)
    let v28 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v29 : System.DateTime = v28 v25
    let v38 : (System.DateTime -> int64) = _.Ticks
    let v39 : int64 = v38 v29
    let v48 : (System.DateTime -> int64) = _.Ticks
    let v49 : int64 = v48 v17
    let v56 : int64 = v39 - v49
    let v57 : int64 = v56 / 10L
    let v58 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v59 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v62 : US33 option = None
    let _v62 = ref v62 
    match v59 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v63 : chrono_DateTime<chrono_Utc> = x
    let v64 : US33 = US33_0(v63)
    v64 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v62.Value <- x
    let v65 : US33 option = _v62.Value 
    let v88 : US33 = US33_1
    let v89 : US33 = v65 |> Option.defaultValue v88 
    let v113 : US3 =
        match v89 with
        | US33_1 -> (* None *)
            US3_1
        | US33_0(v97) -> (* Some *)
            let v98 : string = "$0.naive_utc()"
            let v99 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v97 v98 
            let v100 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v101 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v99 v100 
            let v102 : string = "%Y%m%d-%H%M-%S%f"
            let v103 : string = "r#\"" + v102 + "\"#"
            let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v103 
            let v105 : string = "$0.format($1).to_string()"
            let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v101, v104) v105 
            let v107 : string = "fable_library_rust::String_::fromString($0)"
            let v108 : string = Fable.Core.RustInterop.emitRustExpr v106 v107 
            let v109 : string = $"{v108.[0..17]}-{v108.[18..21]}-{v108.[22]}"
            US3_0(v109)
    let v117 : string =
        match v113 with
        | US3_1 -> (* None *)
            let v115 : string = ""
            v115
        | US3_0(v114) -> (* Some *)
            v114
    let v120 : bool = true
    let mutable _v120 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "0i64.into()"
    let v122 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v121 
    v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v125 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v134 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v134 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v152 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v152 
    #endif
#else
    let v159 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v159 
    #endif
    |> fun x -> _v120 <- Some x
    let v160 : System.TimeZoneInfo = match _v120 with Some x -> x | None -> failwith "base.run_target / _v120=None"
    let v177 : bool = true
    let mutable _v177 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v180 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v181 : System.TimeSpan = v180 ()
    v181 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v190 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v191 : System.TimeSpan = v190 ()
    v191 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v200 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v201 : System.TimeSpan = v200 ()
    v201 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v208 : US10 = US10_0
    let v209 : US11 = US11_3(v208)
    let v210 : string = $"date_time.get_utc_offset / target: {v209}"
    let v211 : System.TimeSpan = failwith<System.TimeSpan> v210
    v211 
    #endif
#if FABLE_COMPILER_PYTHON
    let v212 : US10 = US10_0
    let v213 : US11 = US11_4(v212)
    let v214 : string = $"date_time.get_utc_offset / target: {v213}"
    let v215 : System.TimeSpan = failwith<System.TimeSpan> v214
    v215 
    #endif
#else
    let v216 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v219 : bool = true
    let mutable _v219 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v220 : string = "0i64.into()"
    let v221 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v220 
    v221 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v224 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v224 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v233 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v233 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v242 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v242 
    #endif
#if FABLE_COMPILER_PYTHON
    let v251 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v251 
    #endif
#else
    let v258 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v258 
    #endif
    |> fun x -> _v219 <- Some x
    let v259 : System.TimeZoneInfo = match _v219 with Some x -> x | None -> failwith "base.run_target / _v219=None"
    let v274 : (System.DateTime -> System.TimeSpan) = v216 v259
    let v275 : System.TimeSpan = v274 v29
    v275 
    #endif
    |> fun x -> _v177 <- Some x
    let v276 : System.TimeSpan = match _v177 with Some x -> x | None -> failwith "base.run_target / _v177=None"
    let v288 : (System.TimeSpan -> int32) = _.Hours
    let v289 : int32 = v288 v276
    let v296 : bool = v289 > 0
    let v297 : uint8 =
        if v296 then
            1uy
        else
            0uy
    let v298 : string = method156()
    let v301 : bool = true
    let mutable _v301 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v302 : string = v276.ToString v298 
    v302 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v303 : string = v276.ToString v298 
    v303 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v304 : string = v276.ToString v298 
    v304 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v305 : string = v276.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v305 
    #endif
#if FABLE_COMPILER_PYTHON
    let v306 : string = v276.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v306 
    #endif
#else
    let v307 : string = v276.ToString v298 
    v307 
    #endif
    |> fun x -> _v301 <- Some x
    let v308 : string = match _v301 with Some x -> x | None -> failwith "base.run_target / _v301=None"
    let v315 : string = $"{v297}{v308.[0..1]}{v308.[3..4]}"
    let v318 : (System.Guid -> string) = _.ToString()
    let v319 : string = v318 v0
    let v326 : System.Guid = System.Guid $"{v117}{v315}{v319.[v117.Length + v315.Length..]}"
    v326 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v329 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v338 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v339 : System.DateTime = v338 v329
    let v346 : System.DateTimeKind = System.DateTimeKind.Local
    let v347 : System.DateTime = System.DateTime.SpecifyKind (v1, v346)
    let v350 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v351 : System.DateTime = v350 v347
    let v360 : (System.DateTime -> int64) = _.Ticks
    let v361 : int64 = v360 v351
    let v370 : (System.DateTime -> int64) = _.Ticks
    let v371 : int64 = v370 v339
    let v378 : int64 = v361 - v371
    let v379 : int64 = v378 / 10L
    let v380 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v381 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v379 v380 
    let v384 : US33 option = None
    let _v384 = ref v384 
    match v381 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v385 : chrono_DateTime<chrono_Utc> = x
    let v386 : US33 = US33_0(v385)
    v386 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v384.Value <- x
    let v387 : US33 option = _v384.Value 
    let v410 : US33 = US33_1
    let v411 : US33 = v387 |> Option.defaultValue v410 
    let v435 : US3 =
        match v411 with
        | US33_1 -> (* None *)
            US3_1
        | US33_0(v419) -> (* Some *)
            let v420 : string = "$0.naive_utc()"
            let v421 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v419 v420 
            let v422 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v423 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v421 v422 
            let v424 : string = "%Y%m%d-%H%M-%S%f"
            let v425 : string = "r#\"" + v424 + "\"#"
            let v426 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v425 
            let v427 : string = "$0.format($1).to_string()"
            let v428 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v423, v426) v427 
            let v429 : string = "fable_library_rust::String_::fromString($0)"
            let v430 : string = Fable.Core.RustInterop.emitRustExpr v428 v429 
            let v431 : string = $"{v430.[0..17]}-{v430.[18..21]}-{v430.[22]}"
            US3_0(v431)
    let v439 : string =
        match v435 with
        | US3_1 -> (* None *)
            let v437 : string = ""
            v437
        | US3_0(v436) -> (* Some *)
            v436
    let v442 : bool = true
    let mutable _v442 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v443 : string = "0i64.into()"
    let v444 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v443 
    v444 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v447 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v447 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v456 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v456 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v465 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v465 
    #endif
#if FABLE_COMPILER_PYTHON
    let v474 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v474 
    #endif
#else
    let v481 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v481 
    #endif
    |> fun x -> _v442 <- Some x
    let v482 : System.TimeZoneInfo = match _v442 with Some x -> x | None -> failwith "base.run_target / _v442=None"
    let v499 : bool = true
    let mutable _v499 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v502 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v503 : System.TimeSpan = v502 ()
    v503 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v512 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v513 : System.TimeSpan = v512 ()
    v513 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v522 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v523 : System.TimeSpan = v522 ()
    v523 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v530 : US10 = US10_0
    let v531 : US11 = US11_3(v530)
    let v532 : string = $"date_time.get_utc_offset / target: {v531}"
    let v533 : System.TimeSpan = failwith<System.TimeSpan> v532
    v533 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US10 = US10_0
    let v535 : US11 = US11_4(v534)
    let v536 : string = $"date_time.get_utc_offset / target: {v535}"
    let v537 : System.TimeSpan = failwith<System.TimeSpan> v536
    v537 
    #endif
#else
    let v538 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v541 : bool = true
    let mutable _v541 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v542 : string = "0i64.into()"
    let v543 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v542 
    v543 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v546 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v546 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v555 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v555 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v564 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v564 
    #endif
#if FABLE_COMPILER_PYTHON
    let v573 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v573 
    #endif
#else
    let v580 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v580 
    #endif
    |> fun x -> _v541 <- Some x
    let v581 : System.TimeZoneInfo = match _v541 with Some x -> x | None -> failwith "base.run_target / _v541=None"
    let v596 : (System.DateTime -> System.TimeSpan) = v538 v581
    let v597 : System.TimeSpan = v596 v351
    v597 
    #endif
    |> fun x -> _v499 <- Some x
    let v598 : System.TimeSpan = match _v499 with Some x -> x | None -> failwith "base.run_target / _v499=None"
    let v610 : (System.TimeSpan -> int32) = _.Hours
    let v611 : int32 = v610 v598
    let v618 : bool = v611 > 0
    let v619 : uint8 =
        if v618 then
            1uy
        else
            0uy
    let v620 : string = method156()
    let v623 : bool = true
    let mutable _v623 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v624 : string = v598.ToString v620 
    v624 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v625 : string = v598.ToString v620 
    v625 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v626 : string = v598.ToString v620 
    v626 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v627 : string = v598.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v627 
    #endif
#if FABLE_COMPILER_PYTHON
    let v628 : string = v598.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v628 
    #endif
#else
    let v629 : string = v598.ToString v620 
    v629 
    #endif
    |> fun x -> _v623 <- Some x
    let v630 : string = match _v623 with Some x -> x | None -> failwith "base.run_target / _v623=None"
    let v637 : string = $"{v619}{v630.[0..1]}{v630.[3..4]}"
    let v640 : (System.Guid -> string) = _.ToString()
    let v641 : string = v640 v0
    let v648 : System.Guid = System.Guid $"{v439}{v637}{v641.[v439.Length + v637.Length..]}"
    v648 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v651 : System.Guid = null |> unbox<System.Guid>
    v651 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v658 : string = method157()
    let v661 : (string -> string) = v1.ToString
    let v662 : string = v661 v658
    let v671 : bool = true
    let mutable _v671 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v672 : string = "0i64.into()"
    let v673 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v672 
    v673 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v676 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v676 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v685 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v685 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v694 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v694 
    #endif
#if FABLE_COMPILER_PYTHON
    let v703 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v703 
    #endif
#else
    let v710 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v710 
    #endif
    |> fun x -> _v671 <- Some x
    let v711 : System.TimeZoneInfo = match _v671 with Some x -> x | None -> failwith "base.run_target / _v671=None"
    let v728 : bool = true
    let mutable _v728 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v731 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v732 : System.TimeSpan = v731 ()
    v732 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v741 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v742 : System.TimeSpan = v741 ()
    v742 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v751 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v752 : System.TimeSpan = v751 ()
    v752 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v759 : US10 = US10_0
    let v760 : US11 = US11_3(v759)
    let v761 : string = $"date_time.get_utc_offset / target: {v760}"
    let v762 : System.TimeSpan = failwith<System.TimeSpan> v761
    v762 
    #endif
#if FABLE_COMPILER_PYTHON
    let v763 : US10 = US10_0
    let v764 : US11 = US11_4(v763)
    let v765 : string = $"date_time.get_utc_offset / target: {v764}"
    let v766 : System.TimeSpan = failwith<System.TimeSpan> v765
    v766 
    #endif
#else
    let v767 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v770 : bool = true
    let mutable _v770 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v771 : string = "0i64.into()"
    let v772 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v771 
    v772 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v775 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v775 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v784 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v784 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v793 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v793 
    #endif
#if FABLE_COMPILER_PYTHON
    let v802 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v802 
    #endif
#else
    let v809 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v809 
    #endif
    |> fun x -> _v770 <- Some x
    let v810 : System.TimeZoneInfo = match _v770 with Some x -> x | None -> failwith "base.run_target / _v770=None"
    let v825 : (System.DateTime -> System.TimeSpan) = v767 v810
    let v826 : System.TimeSpan = v825 v1
    v826 
    #endif
    |> fun x -> _v728 <- Some x
    let v827 : System.TimeSpan = match _v728 with Some x -> x | None -> failwith "base.run_target / _v728=None"
    let v839 : (System.TimeSpan -> int32) = _.Hours
    let v840 : int32 = v839 v827
    let v847 : bool = v840 > 0
    let v848 : uint8 =
        if v847 then
            1uy
        else
            0uy
    let v849 : string = method158()
    let v852 : bool = true
    let mutable _v852 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v853 : string = v827.ToString v849 
    v853 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v854 : string = v827.ToString v849 
    v854 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v855 : string = v827.ToString v849 
    v855 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v856 : string = v827.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v856 
    #endif
#if FABLE_COMPILER_PYTHON
    let v857 : string = v827.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v857 
    #endif
#else
    let v858 : string = v827.ToString v849 
    v858 
    #endif
    |> fun x -> _v852 <- Some x
    let v859 : string = match _v852 with Some x -> x | None -> failwith "base.run_target / _v852=None"
    let v866 : string = $"{v848}{v859}"
    let v869 : (System.Guid -> string) = _.ToString()
    let v870 : string = v869 v0
    let v877 : System.Guid = System.Guid $"{v662}{v866}{v870.[v662.Length + v866.Length..]}"
    v877 
    #endif
#if FABLE_COMPILER_PYTHON
    let v878 : string = method157()
    let v881 : (string -> string) = v1.ToString
    let v882 : string = v881 v878
    let v891 : bool = true
    let mutable _v891 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v892 : string = "0i64.into()"
    let v893 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v892 
    v893 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v896 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v896 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v905 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v905 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v914 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v914 
    #endif
#if FABLE_COMPILER_PYTHON
    let v923 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v923 
    #endif
#else
    let v930 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v930 
    #endif
    |> fun x -> _v891 <- Some x
    let v931 : System.TimeZoneInfo = match _v891 with Some x -> x | None -> failwith "base.run_target / _v891=None"
    let v948 : bool = true
    let mutable _v948 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v951 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v952 : System.TimeSpan = v951 ()
    v952 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v961 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v962 : System.TimeSpan = v961 ()
    v962 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v971 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v972 : System.TimeSpan = v971 ()
    v972 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v979 : US10 = US10_0
    let v980 : US11 = US11_3(v979)
    let v981 : string = $"date_time.get_utc_offset / target: {v980}"
    let v982 : System.TimeSpan = failwith<System.TimeSpan> v981
    v982 
    #endif
#if FABLE_COMPILER_PYTHON
    let v983 : US10 = US10_0
    let v984 : US11 = US11_4(v983)
    let v985 : string = $"date_time.get_utc_offset / target: {v984}"
    let v986 : System.TimeSpan = failwith<System.TimeSpan> v985
    v986 
    #endif
#else
    let v987 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v990 : bool = true
    let mutable _v990 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v991 : string = "0i64.into()"
    let v992 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v991 
    v992 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v995 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v995 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1004 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1004 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1013 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1013 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1022 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1022 
    #endif
#else
    let v1029 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v1029 
    #endif
    |> fun x -> _v990 <- Some x
    let v1030 : System.TimeZoneInfo = match _v990 with Some x -> x | None -> failwith "base.run_target / _v990=None"
    let v1045 : (System.DateTime -> System.TimeSpan) = v987 v1030
    let v1046 : System.TimeSpan = v1045 v1
    v1046 
    #endif
    |> fun x -> _v948 <- Some x
    let v1047 : System.TimeSpan = match _v948 with Some x -> x | None -> failwith "base.run_target / _v948=None"
    let v1059 : (System.TimeSpan -> int32) = _.Hours
    let v1060 : int32 = v1059 v1047
    let v1067 : bool = v1060 > 0
    let v1068 : uint8 =
        if v1067 then
            1uy
        else
            0uy
    let v1069 : string = method158()
    let v1072 : bool = true
    let mutable _v1072 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1073 : string = v1047.ToString v1069 
    v1073 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1074 : string = v1047.ToString v1069 
    v1074 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1075 : string = v1047.ToString v1069 
    v1075 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1076 : string = v1047.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v1076 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1077 : string = v1047.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v1077 
    #endif
#else
    let v1078 : string = v1047.ToString v1069 
    v1078 
    #endif
    |> fun x -> _v1072 <- Some x
    let v1079 : string = match _v1072 with Some x -> x | None -> failwith "base.run_target / _v1072=None"
    let v1086 : string = $"{v1068}{v1079}"
    let v1089 : (System.Guid -> string) = _.ToString()
    let v1090 : string = v1089 v0
    let v1097 : System.Guid = System.Guid $"{v882}{v1086}{v1090.[v882.Length + v1086.Length..]}"
    v1097 
    #endif
#else
    let v1098 : string = method157()
    let v1101 : (string -> string) = v1.ToString
    let v1102 : string = v1101 v1098
    let v1111 : bool = true
    let mutable _v1111 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1112 : string = "0i64.into()"
    let v1113 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1112 
    v1113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1116 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1125 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1134 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1134 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1143 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1143 
    #endif
#else
    let v1150 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v1150 
    #endif
    |> fun x -> _v1111 <- Some x
    let v1151 : System.TimeZoneInfo = match _v1111 with Some x -> x | None -> failwith "base.run_target / _v1111=None"
    let v1168 : bool = true
    let mutable _v1168 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1171 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v1172 : System.TimeSpan = v1171 ()
    v1172 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1181 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v1182 : System.TimeSpan = v1181 ()
    v1182 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1191 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v1192 : System.TimeSpan = v1191 ()
    v1192 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1199 : US10 = US10_0
    let v1200 : US11 = US11_3(v1199)
    let v1201 : string = $"date_time.get_utc_offset / target: {v1200}"
    let v1202 : System.TimeSpan = failwith<System.TimeSpan> v1201
    v1202 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1203 : US10 = US10_0
    let v1204 : US11 = US11_4(v1203)
    let v1205 : string = $"date_time.get_utc_offset / target: {v1204}"
    let v1206 : System.TimeSpan = failwith<System.TimeSpan> v1205
    v1206 
    #endif
#else
    let v1207 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1210 : bool = true
    let mutable _v1210 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1211 : string = "0i64.into()"
    let v1212 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1211 
    v1212 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1215 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1224 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1224 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1233 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1233 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1242 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1242 
    #endif
#else
    let v1249 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v1249 
    #endif
    |> fun x -> _v1210 <- Some x
    let v1250 : System.TimeZoneInfo = match _v1210 with Some x -> x | None -> failwith "base.run_target / _v1210=None"
    let v1265 : (System.DateTime -> System.TimeSpan) = v1207 v1250
    let v1266 : System.TimeSpan = v1265 v1
    v1266 
    #endif
    |> fun x -> _v1168 <- Some x
    let v1267 : System.TimeSpan = match _v1168 with Some x -> x | None -> failwith "base.run_target / _v1168=None"
    let v1279 : (System.TimeSpan -> int32) = _.Hours
    let v1280 : int32 = v1279 v1267
    let v1287 : bool = v1280 > 0
    let v1288 : uint8 =
        if v1287 then
            1uy
        else
            0uy
    let v1289 : string = method158()
    let v1292 : bool = true
    let mutable _v1292 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1293 : string = v1267.ToString v1289 
    v1293 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1294 : string = v1267.ToString v1289 
    v1294 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1295 : string = v1267.ToString v1289 
    v1295 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1296 : string = v1267.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v1296 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1297 : string = v1267.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v1297 
    #endif
#else
    let v1298 : string = v1267.ToString v1289 
    v1298 
    #endif
    |> fun x -> _v1292 <- Some x
    let v1299 : string = match _v1292 with Some x -> x | None -> failwith "base.run_target / _v1292=None"
    let v1306 : string = $"{v1288}{v1299}"
    let v1309 : (System.Guid -> string) = _.ToString()
    let v1310 : string = v1309 v0
    let v1317 : System.Guid = System.Guid $"{v1102}{v1306}{v1310.[v1102.Length + v1306.Length..]}"
    v1317 
    #endif
    |> fun x -> _v4 <- Some x
    let v1318 : System.Guid = match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    v1318
and method159 (v0 : string, v1 : string) : unit =
    let v2 : bool = method24(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method35(v0)
        ()
    let v5 : string = method31(v1)
    let v6 : bool = method24(v5)
    let v7 : bool = v6 = false
    if v7 then
        let v8 : System.IDisposable = method35(v5)
        ()
    let v9 : bool = method24(v1)
    let v14 : bool =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v10 
            let v12 : string = "v11.is_err()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
            v13
        else
            false
    if v14 then
        let v15 : bool = true
        method44(v15, v1)
    let v16 : bool = method24(v1)
    let v17 : bool = v16 = false
    if v17 then
        let v20 : bool = true
        let mutable _v20 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v21 : bool = true
        let mutable _v21 : unit option = None 
        
#if _FREEBSD
        let v22 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v22 
        () 
        #endif
#if _LINUX
        let v23 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v23 
        () 
        #endif
#if _OSX
        let v24 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v24 
        () 
        #endif
#if _WINDOWS
        let v25 : string = "std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v25 
        () 
        #endif
        |> fun x -> _v21 <- Some x
        match _v21 with Some x -> x | None -> failwith "runtime.run_platform / _v21=None"
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v50 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        () 
        #endif
        |> fun x -> _v20 <- Some x
        match _v20 with Some x -> x | None -> failwith "base.run_target / _v20=None"
        ()
and closure98 () () : string =
    let v0 : string = "common.retry_fn' / loop"
    v0
and closure99 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : struct (bool * string * int32 * string) =
    let v5 : string = $"{v1}/{v0}"
    struct (v4, v5, v2, v3)
and method165 (v0 : Mut4, v1 : int32, v2 : string) : unit =
    method111(v0, v1)
    let v3 : string = ", "
    method11(v0, v3)
    method11(v0, v2)
and method164 (v0 : Mut4, v1 : bool, v2 : string, v3 : int32, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "is_error"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method89(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "retry"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "result"
    method11(v0, v10)
    method11(v0, v7)
    method165(v0, v3, v4)
    let v11 : string = " }"
    method11(v0, v11)
and closure100 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (bool * string * int32 * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : bool, v1162 : string, v1163 : int32, v1164 : string) = v2 ()
    let v1165 : string = ""
    let v1166 : Mut4 = {l0 = v1165} : Mut4
    method164(v1166, v1161, v1162, v1163, v1164)
    let v1167 : string = v1166.l0
    let v1170 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1167}"
    let v1177 : char list = []
    let v1182 : (char list -> (char [])) = List.toArray
    let v1183 : (char []) = v1182 v1177
    let v1190 : string = v1170.TrimStart v1183 
    let v1229 : char list = []
    let v1232 : char list = '/' :: v1229 
    let v1241 : char list = ' ' :: v1232 
    let v1252 : (char list -> (char [])) = List.toArray
    let v1253 : (char []) = v1252 v1241
    let v1260 : string = v1190.TrimEnd v1253 
    v1260
and method163 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (bool * string * int32 * string))) : unit =
    let v3 : (unit -> string) = closure100(v0, v1, v2)
    method14(v0, v3)
and method162 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method56(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US34 =
        if v11 then
            US34_0(v9, v10)
        else
            US34_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US34_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US34_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : US0 = US0_1
        let v29 : (unit -> string) = closure98()
        let v30 : (unit -> struct (bool * string * int32 * string)) = closure99(v0, v8, v23, v24, v22)
        method163(v28, v29, v30)
        let v31 : uint8 = v8 + 1uy
        method162(v0, v1, v2, v3, v4, v5, v6, v7, v31)
and method161 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method162(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method160 (v0 : string, v1 : string, v2 : string, v3 : US12) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v11 : bool = true
    let mutable _v11 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "cfg!(windows)"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "cfg!(windows)"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr () v14 
    v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "cfg!(windows)"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : US10 = US10_0
    let v19 : US11 = US11_3(v18)
    let v20 : string = $"platform.is_windows / target: {v19}"
    let v21 : bool = failwith<bool> v20
    v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : US10 = US10_0
    let v23 : US11 = US11_4(v22)
    let v24 : string = $"platform.is_windows / target: {v23}"
    let v25 : bool = failwith<bool> v24
    v25 
    #endif
#else
    let v26 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v27 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v28 : bool = v27 v26
    v28 
    #endif
    |> fun x -> _v11 <- Some x
    let v29 : bool = match _v11 with Some x -> x | None -> failwith "base.run_target / _v11=None"
    let v41 : string =
        if v29 then
            let v39 : string = "_WINDOWS"
            v39
        else
            let v40 : string = "_LINUX"
            v40
    let v42 : string = $"dotnet fable \"{v2}\" --optimize --lang {v1} --extension .{v1} --outDir \"{v0}\" --define {v41}"
    let v48 : Result<string, string> =
        match v3 with
        | US12_1(v45) -> (* Error *)
            let v46 : Result<string, string> = Error v45 
            v46
        | US12_0(v43) -> (* Ok *)
            let v44 : Result<string, string> = Ok v43 
            v44
    let v49 : string = "v48.ok()"
    let v50 : string option = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : uint8 = 3uy
    let v52 : bool = true
    method161(v51, v42, v4, v5, v6, v7, v52, v50)
and closure101 () () : string =
    let v0 : string = "spiral_builder.process_rust / dotnet fable error"
    v0
and closure102 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and method167 (v0 : Mut4, v1 : int32, v2 : string) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method111(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "dotnet_fable_result"
    method11(v0, v7)
    method11(v0, v5)
    method11(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure103 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : string) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method167(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method166 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) : unit =
    let v3 : (unit -> string) = closure103(v0, v1, v2)
    method14(v0, v3)
and method169 () : string =
    let v0 : string = "a"
    v0
and closure104 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : struct (bool * string * int32 * string) =
    let v4 : string = $"{v0}/{3uy}"
    struct (v3, v4, v1, v2)
and method168 (v0 : US12, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US12_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US12_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    let v15 : string = "v14.ok()"
    let v16 : string option = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : bool = true
    let struct (v18 : int32, v19 : string) = method56(v8, v3, v4, v5, v6, v17, v16)
    let v22 : string = "failed to load manifest for workspace member"
    let v23 : bool = v19.Contains v22 
    let v30 : bool = v23 = false
    let v279 : US34 =
        if v30 then
            let v31 : bool = v18 = 0
            if v31 then
                US34_0(v18, v19)
            else
                US34_1(v18, v19)
        else
            let v35 : string = $"regex::Regex::new(&$0)"
            let v36 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v37 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v36 v35 
            let v38 : string = "$0.unwrap()"
            let v39 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v37 v38 
            let v40 : string = "&*$0"
            let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19 v40 
            let v42 : string = "String::from($0)"
            let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = "true; let _result = (move || { //"
            let v45 : bool = Fable.Core.RustInterop.emitRustExpr () v44 
            let v46 : string = "Box::new($0)"
            let v47 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v43 v46 
            let v48 : string = "Box::leak($0)"
            let v49 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v47 v48 
            let v50 : string = $"v39.captures_iter(v49)"
            let v51 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v50 
            let v52 : string = "true; let _result : Vec<_> = v51.map(|x| { //"
            let v53 : bool = Fable.Core.RustInterop.emitRustExpr () v52 
            let v54 : string = $"x"
            let v55 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v54 
            let v56 : string = "Box::new($0)"
            let v57 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v55 v56 
            let v58 : string = "Box::leak($0)"
            let v59 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v57 v58 
            let v60 : string = $"$0.capture_names()"
            let v61 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v39 v60 
            let v62 : string = "true; let _result : std::collections::HashMap<_, _> = v61.map(|x| { //"
            let v63 : bool = Fable.Core.RustInterop.emitRustExpr () v62 
            let v64 : string = "x.unwrap_or(\"\").to_string().into()"
            let v65 : string = Fable.Core.RustInterop.emitRustExpr () v64 
            let v66 : string = "$0.clone()"
            let v67 : string = Fable.Core.RustInterop.emitRustExpr v65 v66 
            let v68 : string = $"v59.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v69 : string = Fable.Core.RustInterop.emitRustExpr v65 v68 
            let v70 : (string * string) = v67, v69 
            let v71 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
            let v73 : string = "_result"
            let v74 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v73 
            let v75 : string = "true; $0 }).collect::<Vec<_>>()"
            let v76 : bool = Fable.Core.RustInterop.emitRustExpr v74 v75 
            let v77 : string = "_result"
            let v78 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v77 
            let v79 : string = "true; $0 })()"
            let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
            let v81 : string = "_result"
            let v82 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v81 
            let v83 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v84 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v82 v83 
            let v85 : std_collections_HashMap<string, string> option = v84 |> Array.tryItem 0 
            let v88 : US35 option = None
            let _v88 = ref v88 
            match v85 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v89 : std_collections_HashMap<string, string> = x
            let v90 : US35 = US35_0(v89)
            v90 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v88.Value <- x
            let v91 : US35 option = _v88.Value 
            let v114 : US35 = US35_1
            let v115 : US35 = v91 |> Option.defaultValue v114 
            let v167 : US36 =
                match v115 with
                | US35_1 -> (* None *)
                    US36_1
                | US35_0(v123) -> (* Some *)
                    let v124 : string = method169()
                    let v125 : string = "std::collections::HashMap::get(&$0, &v124).map(|x| x).cloned()"
                    let v126 : string option = Fable.Core.RustInterop.emitRustExpr v123 v125 
                    let v129 : US3 option = None
                    let _v129 = ref v129 
                    match v126 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v130 : string = x
                    let v131 : US3 = US3_0(v130)
                    v131 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v129.Value <- x
                    let v132 : US3 option = _v129.Value 
                    let v155 : US3 = US3_1
                    let v156 : US3 = v132 |> Option.defaultValue v155 
                    US36_0(v156)
            let v174 : US3 =
                match v167 with
                | US36_0(v168) -> (* Some *)
                    match v168 with
                    | US3_0(v169) -> (* Some *)
                        US3_0(v169)
                    | _ ->
                        US3_1
                | _ ->
                    US3_1
            match v174 with
            | US3_1 -> (* None *)
                US34_1(v18, v19)
            | US3_0(v176) -> (* Some *)
                let v177 : bool = method34(v176)
                let v178 : bool = v177 = false
                if v178 then
                    let v179 : string = method31(v176)
                    let v180 : System.IDisposable = method35(v179)
                    let v183 : System.DateTime = System.DateTime.Now
                    let v192 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v193 : System.Guid = v192 ()
                    let v200 : System.Guid = method155(v193, v183)
                    let v203 : (System.Guid -> string) = _.ToString()
                    let v204 : string = v203 v200
                    let v211 : string = $"[package]"
                    let v212 : string = $"name = \"spiral_builder_{v204}\""
                    let v213 : string = "\n"
                    let v214 : string = v211 + v213 
                    let v215 : string = v214 + v212 
                    let v216 : string = $"version = \"0.0.1\""
                    let v217 : string = v215 + v213 
                    let v218 : string = v217 + v216 
                    let v219 : string = $"edition = \"2021\""
                    let v220 : string = v218 + v213 
                    let v221 : string = v220 + v219 
                    let v222 : string = $""
                    let v223 : string = v221 + v213 
                    let v224 : string = v223 + v222 
                    let v225 : string = $"[[bin]]"
                    let v226 : string = v224 + v213 
                    let v227 : string = v226 + v225 
                    let v228 : string = $"name = \"spiral_builder_{v204}\""
                    let v229 : string = v227 + v213 
                    let v230 : string = v229 + v228 
                    let v231 : string = $"path = \"spiral_builder.rs\""
                    let v232 : string = v230 + v213 
                    let v233 : string = v232 + v231 
                    let v236 : bool = true
                    let mutable _v236 : unit option = None 
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v237 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v176, v233) v237 
                    () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    null |> unbox<unit>
                    () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    null |> unbox<unit>
                    () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    null |> unbox<unit>
                    () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    null |> unbox<unit>
                    () 
                    #endif
#else
                    let v262 : string = method55(v233)
                    System.IO.File.WriteAllText (v176, v262)
                    () 
                    #endif
                    |> fun x -> _v236 <- Some x
                    match _v236 with Some x -> x | None -> failwith "base.run_target / _v236=None"
                    ()
                let v273 : bool = v18 = 0
                if v273 then
                    US34_0(v18, v19)
                else
                    US34_1(v18, v19)
    let struct (v287 : bool, v288 : int32, v289 : string) =
        match v279 with
        | US34_1(v282, v283) -> (* Error *)
            struct (true, v282, v283)
        | US34_0(v280, v281) -> (* Ok *)
            struct (false, v280, v281)
    let v290 : bool = v287 = false
    let v292 : bool =
        if v290 then
            true
        else
            let v291 : bool = v2 >= 3uy
            v291
    if v292 then
        struct (v288, v289)
    else
        let v293 : US0 = US0_1
        let v294 : (unit -> string) = closure98()
        let v295 : (unit -> struct (bool * string * int32 * string)) = closure104(v2, v288, v289, v287)
        method163(v293, v294, v295)
        let v296 : uint8 = v2 + 1uy
        method168(v0, v1, v296)
and closure105 () () : string =
    let v0 : string = "spiral_builder.process_rust / cargo fmt error"
    v0
and closure106 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and method171 (v0 : Mut4, v1 : int32, v2 : string) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method111(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "cargo_fmt_result"
    method11(v0, v7)
    method11(v0, v5)
    method11(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure107 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : string) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method171(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method170 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) : unit =
    let v3 : (unit -> string) = closure107(v0, v1, v2)
    method14(v0, v3)
and method172 () : string =
    let v0 : string = " defaultOf::<()>();"
    v0
and method173 () : string =
    let v0 : string = "\\s\\sdefaultOf\\(\\);"
    v0
and closure108 () () : string =
    let v0 : string = "spiral_builder.process_rust"
    v0
and closure109 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool) () : struct (string * UH4) =
    let v9 : UH4 = UH4_0
    let v10 : UH4 = UH4_1(v7, v8, v9)
    let v11 : UH4 = UH4_1(v5, v6, v10)
    let v12 : UH4 = UH4_1(v3, v4, v11)
    let v13 : UH4 = UH4_1(v1, v2, v12)
    struct (v0, v13)
and method176 (v0 : Mut4, v1 : UH4) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method175 (v0 : Mut4, v1 : string, v2 : UH4) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "new_code_path"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method11(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "cleanup"
    method11(v0, v7)
    method11(v0, v5)
    method176(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure110 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * UH4))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : string, v1162 : UH4) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method175(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method174 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * UH4))) : unit =
    let v3 : (unit -> string) = closure110(v0, v1, v2)
    method14(v0, v3)
and method177 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        let v6 : bool = true
        let mutable _v6 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v7 : string = "std::fs::remove_file(&*$0).unwrap()"
        Fable.Core.RustInterop.emitRustExpr v1 v7 
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v32 : (string -> unit) = System.IO.File.Delete
        v32 v1
        () 
        #endif
        |> fun x -> _v6 <- Some x
        match _v6 with Some x -> x | None -> failwith "base.run_target / _v6=None"
        method177(v3)
    | UH4_0 -> (* Nil *)
        ()
and closure112 () (v0 : string) : bool =
    let v3 : string = "profile [optimized] target"
    let v4 : bool = v0.Contains v3 
    let v11 : bool = v4 = false
    if v11 then
        let v14 : string = "profile [unoptimized] target"
        let v15 : bool = v0.Contains v14 
        let v22 : bool = v15 = false
        if v22 then
            let v25 : string = "profile [unoptimized + debuginfo] target"
            let v26 : bool = v0.Contains v25 
            let v33 : bool = v26 = false
            v33
        else
            false
    else
        false
and closure111 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : (string -> bool) = closure112()
    let v4 : (string []) = v2 |> Array.skipWhile v3 
    let v5 : (string []) = v4 |> Array.skip 2 
    let v8 : string seq = v5 |> Seq.ofArray
    let v17 : (string -> (string seq -> string)) = String.concat
    let v18 : (string seq -> string) = v17 v1
    v18 v8
and closure114 () () : string =
    let v0 : string = "spiral_builder.process_rust / Exception"
    v0
and closure115 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v1, v0, v2)
and method179 (v0 : Mut4, v1 : exn, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "ex"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method125(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "cargo_run_result"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "new_code_path"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "external_command"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure116 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : exn, v1162 : string, v1163 : string, v1164 : string) = v2 ()
    let v1165 : string = ""
    let v1166 : Mut4 = {l0 = v1165} : Mut4
    method179(v1166, v1161, v1162, v1163, v1164)
    let v1167 : string = v1166.l0
    let v1170 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1167}"
    let v1177 : char list = []
    let v1182 : (char list -> (char [])) = List.toArray
    let v1183 : (char []) = v1182 v1177
    let v1190 : string = v1170.TrimStart v1183 
    let v1229 : char list = []
    let v1232 : char list = '/' :: v1229 
    let v1241 : char list = ' ' :: v1232 
    let v1252 : (char list -> (char [])) = List.toArray
    let v1253 : (char []) = v1252 v1241
    let v1260 : string = v1190.TrimEnd v1253 
    v1260
and method178 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) : unit =
    let v3 : (unit -> string) = closure116(v0, v1, v2)
    method14(v0, v3)
and closure113 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure114()
    let v6 : (unit -> struct (exn * string * string * string)) = closure115(v0, v1, v2, v3)
    method178(v4, v5, v6)
    US3_1
and closure117 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure118 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and method181 (v0 : Mut4, v1 : int32, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "exit_code"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method111(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "cargo_run_result"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "new_code_path"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "external_command"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure119 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : int32, v1162 : string, v1163 : string, v1164 : string) = v2 ()
    let v1165 : string = ""
    let v1166 : Mut4 = {l0 = v1165} : Mut4
    method181(v1166, v1161, v1162, v1163, v1164)
    let v1167 : string = v1166.l0
    let v1170 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1167}"
    let v1177 : char list = []
    let v1182 : (char list -> (char [])) = List.toArray
    let v1183 : (char []) = v1182 v1177
    let v1190 : string = v1170.TrimStart v1183 
    let v1229 : char list = []
    let v1232 : char list = '/' :: v1229 
    let v1241 : char list = ' ' :: v1232 
    let v1252 : (char list -> (char [])) = List.toArray
    let v1253 : (char []) = v1252 v1241
    let v1260 : string = v1190.TrimEnd v1253 
    v1260
and method180 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) : unit =
    let v3 : (unit -> string) = closure119(v0, v1, v2)
    method14(v0, v3)
and method184 (v0 : async_walkdir_DirEntry) : async_walkdir_DirEntry =
    v0
and closure121 () (v0 : std_fs_FileType) : US38 =
    US38_0(v0)
and closure122 () (v0 : std_string_String) : US38 =
    US38_1(v0)
and method185 (v0 : std_fs_FileType) : std_fs_FileType =
    v0
and method186 (v0 : US37) : US37 =
    v0
and method183 (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US37>>, Send<Dyn<std_future_Future<US37>>>>>> =
    let v1 : string = "let __result = Box::pin(async move { //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : async_walkdir_DirEntry = method184(v0)
    let v3 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v2))"
    let v4 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "v4.await"
    let v6 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : (std_io_Error -> std_string_String) = method37()
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v8 
    let v10 : (std_fs_FileType -> US38) = closure121()
    let v11 : (std_string_String -> US38) = closure122()
    let v12 : US38 = match v9 with Ok x -> v10 x | Error x -> v11 x
    let v22 : US37 =
        match v12 with
        | US38_0(v13) -> (* Ok *)
            let v14 : std_fs_FileType = method185(v13)
            let v15 : string = "std::fs::FileType::is_dir(&v14)"
            let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
            let v17 : bool = v16 = false
            if v17 then
                US37_0
            else
                US37_2
        | _ ->
            US37_2
    let v23 : US37 = method186(v22)
    let v24 : string = ""
    let v25 : string = "}"
    let v26 : string = v24 + v25 
    let v27 : string = v26 + v25 
    let v28 : string = "{"
    let v29 : string = v24 + v28 
    let v30 : string = "v23 " + v27 + "); " + v29 + " //"
    Fable.Core.RustInterop.emitRustExpr () v30 
    let v31 : string = "__result"
    let v32 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US37>>, Send<Dyn<std_future_Future<US37>>>>>> = Fable.Core.RustInterop.emitRustExpr () v31 
    v32
and method187 (v0 : async_walkdir_Filtering) : async_walkdir_Filtering =
    v0
and method182 (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v1 : string = "let __result = Box::pin(async { //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US37>>, Send<Dyn<std_future_Future<US37>>>>>> = method183(v0)
    let v3 : string = "v2.await"
    let v4 : US37 = Fable.Core.RustInterop.emitRustExpr () v3 
    let v13 : async_walkdir_Filtering =
        match v4 with
        | US37_2 -> (* Continue *)
            let v9 : string = "async_walkdir::Filtering::Continue"
            let v10 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v9 
            v10
        | US37_0 -> (* Ignore *)
            let v5 : string = "async_walkdir::Filtering::Ignore"
            let v6 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v5 
            v6
        | US37_1 -> (* IgnoreDir *)
            let v7 : string = "async_walkdir::Filtering::IgnoreDir"
            let v8 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v7 
            v8
    let v14 : async_walkdir_Filtering = method187(v13)
    let v15 : string = ""
    let v16 : string = "}"
    let v17 : string = v15 + v16 
    let v18 : string = v17 + v16 
    let v19 : string = "{"
    let v20 : string = v15 + v19 
    let v21 : string = "v14 " + v18 + "); " + v20 + " //"
    Fable.Core.RustInterop.emitRustExpr () v21 
    let v22 : string = "__result"
    let v23 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v22 
    v23
and closure120 () (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    method182(v0)
and closure124 () (v0 : async_walkdir_Error) : std_string_String =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v37
and method189 () : (async_walkdir_Error -> std_string_String) =
    closure124()
and closure125 () (v0 : async_walkdir_DirEntry) : US39 =
    US39_0(v0)
and closure126 () (v0 : std_string_String) : US39 =
    US39_1(v0)
and closure127 () () : string =
    let v0 : string = "spiral_builder.process_typescript / stream_filter_map"
    v0
and closure128 (v0 : std_string_String) () : std_string_String =
    v0
and closure123 () (v0 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v1 : (async_walkdir_Error -> std_string_String) = method189()
    let v2 : string = "$0.map_err(|x| $1(x))"
    let v3 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v2 
    let v4 : (async_walkdir_DirEntry -> US39) = closure125()
    let v5 : (std_string_String -> US39) = closure126()
    let v6 : US39 = match v3 with Ok x -> v4 x | Error x -> v5 x
    let v217 : US40 =
        match v6 with
        | US39_1(v211) -> (* Error *)
            let v212 : US0 = US0_4
            let v213 : (unit -> string) = closure127()
            let v214 : (unit -> std_string_String) = closure128(v211)
            method93(v212, v213, v214)
            US40_1
        | US39_0(v7) -> (* Ok *)
            let v8 : string = "async_walkdir::DirEntry::path(&$0)"
            let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
            let v10 : string = "$0.display()"
            let v11 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v9 v10 
            let v14 : bool = true
            let mutable _v14 : std_string_String option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v15 : string = "format!(\"{}\", $0)"
            let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v15 
            v16 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v17 : string = "format!(\"{}\", $0)"
            let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v17 
            v18 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v19 : string = "format!(\"{}\", $0)"
            let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v19 
            v20 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v23 : std_string_String = null |> unbox<std_string_String>
            v23 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : std_string_String = null |> unbox<std_string_String>
            v32 
            #endif
#else
            let v41 : std_string_String = null |> unbox<std_string_String>
            v41 
            #endif
            |> fun x -> _v14 <- Some x
            let v48 : std_string_String = match _v14 with Some x -> x | None -> failwith "base.run_target / _v14=None"
            let v63 : string = "fable_library_rust::String_::fromString($0)"
            let v64 : string = Fable.Core.RustInterop.emitRustExpr v48 v63 
            let v65 : string = "ts"
            let v66 : string = $"fable-library-{v65}\.(?<a>[\d.]+)$"
            let v67 : string = $"regex::Regex::new(&$0)"
            let v68 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v66 v67 
            let v69 : string = "$0.unwrap()"
            let v70 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v68 v69 
            let v71 : string = "&*$0"
            let v72 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v64 v71 
            let v73 : string = "String::from($0)"
            let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v73 
            let v75 : string = "true; let _result = (move || { //"
            let v76 : bool = Fable.Core.RustInterop.emitRustExpr () v75 
            let v77 : string = "Box::new($0)"
            let v78 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v74 v77 
            let v79 : string = "Box::leak($0)"
            let v80 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v78 v79 
            let v81 : string = $"v70.captures_iter(v80)"
            let v82 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v81 
            let v83 : string = "true; let _result : Vec<_> = v82.map(|x| { //"
            let v84 : bool = Fable.Core.RustInterop.emitRustExpr () v83 
            let v85 : string = $"x"
            let v86 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v85 
            let v87 : string = "Box::new($0)"
            let v88 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v86 v87 
            let v89 : string = "Box::leak($0)"
            let v90 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v88 v89 
            let v91 : string = $"$0.capture_names()"
            let v92 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v70 v91 
            let v93 : string = "true; let _result : std::collections::HashMap<_, _> = v92.map(|x| { //"
            let v94 : bool = Fable.Core.RustInterop.emitRustExpr () v93 
            let v95 : string = "x.unwrap_or(\"\").to_string().into()"
            let v96 : string = Fable.Core.RustInterop.emitRustExpr () v95 
            let v97 : string = "$0.clone()"
            let v98 : string = Fable.Core.RustInterop.emitRustExpr v96 v97 
            let v99 : string = $"v90.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v100 : string = Fable.Core.RustInterop.emitRustExpr v96 v99 
            let v101 : (string * string) = v98, v100 
            let v102 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
            let v104 : string = "_result"
            let v105 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : string = "true; $0 }).collect::<Vec<_>>()"
            let v107 : bool = Fable.Core.RustInterop.emitRustExpr v105 v106 
            let v108 : string = "_result"
            let v109 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v108 
            let v110 : string = "true; $0 })()"
            let v111 : bool = Fable.Core.RustInterop.emitRustExpr v109 v110 
            let v112 : string = "_result"
            let v113 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v112 
            let v114 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v115 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v113 v114 
            let v116 : std_collections_HashMap<string, string> option = v115 |> Array.tryItem 0 
            let v119 : US35 option = None
            let _v119 = ref v119 
            match v116 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v120 : std_collections_HashMap<string, string> = x
            let v121 : US35 = US35_0(v120)
            v121 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v119.Value <- x
            let v122 : US35 option = _v119.Value 
            let v145 : US35 = US35_1
            let v146 : US35 = v122 |> Option.defaultValue v145 
            let v198 : US36 =
                match v146 with
                | US35_1 -> (* None *)
                    US36_1
                | US35_0(v154) -> (* Some *)
                    let v155 : string = method169()
                    let v156 : string = "std::collections::HashMap::get(&$0, &v155).map(|x| x).cloned()"
                    let v157 : string option = Fable.Core.RustInterop.emitRustExpr v154 v156 
                    let v160 : US3 option = None
                    let _v160 = ref v160 
                    match v157 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v161 : string = x
                    let v162 : US3 = US3_0(v161)
                    v162 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v160.Value <- x
                    let v163 : US3 option = _v160.Value 
                    let v186 : US3 = US3_1
                    let v187 : US3 = v163 |> Option.defaultValue v186 
                    US36_0(v187)
            let v205 : US3 =
                match v198 with
                | US36_0(v199) -> (* Some *)
                    match v199 with
                    | US3_0(v200) -> (* Some *)
                        US3_0(v200)
                    | _ ->
                        US3_1
                | _ ->
                    US3_1
            match v205 with
            | US3_1 -> (* None *)
                US40_1
            | US3_0(v207) -> (* Some *)
                US40_0(v64, v207)
    match v217 with
    | US40_1 -> (* None *)
        let v229 : struct (string * string) option = None
        v229
    | US40_0(v218, v219) -> (* Some *)
        let v222 : struct (string * string) option = Some struct (v218, v219) 
        v222
and method188 () : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure123()
and closure129 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure130 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure131 (v0 : US40) () : std_string_String =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{:#?}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{:#?}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v37
and method191 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "version"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method40(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure132 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let v1161 : std_string_String = v2 ()
    let v1162 : string = ""
    let v1163 : Mut4 = {l0 = v1162} : Mut4
    method191(v1163, v1161)
    let v1164 : string = v1163.l0
    let v1167 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1164}"
    let v1174 : char list = []
    let v1179 : (char list -> (char [])) = List.toArray
    let v1180 : (char []) = v1179 v1174
    let v1187 : string = v1167.TrimStart v1180 
    let v1226 : char list = []
    let v1229 : char list = '/' :: v1226 
    let v1238 : char list = ' ' :: v1229 
    let v1249 : (char list -> (char [])) = List.toArray
    let v1250 : (char []) = v1249 v1238
    let v1257 : string = v1187.TrimEnd v1250 
    v1257
and method190 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) : unit =
    let v3 : (unit -> string) = closure132(v0, v1, v2)
    method14(v0, v3)
and closure133 () () : string =
    let v0 : string = $"spiral_builder.process_typescript"
    v0
and closure134 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and closure135 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure136 (v0 : string) () : string =
    v0
and method193 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "new_code_path"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method11(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure137 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let v1161 : string = v2 ()
    let v1162 : string = ""
    let v1163 : Mut4 = {l0 = v1162} : Mut4
    method193(v1163, v1161)
    let v1164 : string = v1163.l0
    let v1167 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1164}"
    let v1174 : char list = []
    let v1179 : (char list -> (char [])) = List.toArray
    let v1180 : (char []) = v1179 v1174
    let v1187 : string = v1167.TrimStart v1180 
    let v1226 : char list = []
    let v1229 : char list = '/' :: v1226 
    let v1238 : char list = ' ' :: v1229 
    let v1249 : (char list -> (char [])) = List.toArray
    let v1250 : (char []) = v1249 v1238
    let v1257 : string = v1187.TrimEnd v1250 
    v1257
and method192 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) : unit =
    let v3 : (unit -> string) = closure137(v0, v1, v2)
    method14(v0, v3)
and method194 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method194(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method195 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method195(v4, v1)
        let v8 : struct (string * string) list = struct (v2, v3) :: v5 
        v8
    | UH5_0 -> (* Nil *)
        v1
and closure138 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v14 : (string -> (string seq -> string)) = String.concat
    let v15 : (string seq -> string) = v14 v1
    v15 v5
and closure140 () () : string =
    let v0 : string = "spiral_builder.process_typescript / Exception"
    v0
and closure141 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v0, v2, v1)
and method197 (v0 : Mut4, v1 : exn, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "ex"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method125(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "new_code_path"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "external_command"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "run_result"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure142 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : exn, v1162 : string, v1163 : string, v1164 : string) = v2 ()
    let v1165 : string = ""
    let v1166 : Mut4 = {l0 = v1165} : Mut4
    method197(v1166, v1161, v1162, v1163, v1164)
    let v1167 : string = v1166.l0
    let v1170 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1167}"
    let v1177 : char list = []
    let v1182 : (char list -> (char [])) = List.toArray
    let v1183 : (char []) = v1182 v1177
    let v1190 : string = v1170.TrimStart v1183 
    let v1229 : char list = []
    let v1232 : char list = '/' :: v1229 
    let v1241 : char list = ' ' :: v1232 
    let v1252 : (char list -> (char [])) = List.toArray
    let v1253 : (char []) = v1252 v1241
    let v1260 : string = v1190.TrimEnd v1253 
    v1260
and method196 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) : unit =
    let v3 : (unit -> string) = closure142(v0, v1, v2)
    method14(v0, v3)
and closure139 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure140()
    let v6 : (unit -> struct (exn * string * string * string)) = closure141(v0, v1, v2, v3)
    method196(v4, v5, v6)
    US3_1
and closure143 () () : string =
    let v0 : string = "spiral_builder.process_typescript / error"
    v0
and closure144 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and closure145 () () : string =
    let v0 : string = $"spiral_builder.process_python"
    v0
and closure146 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and closure147 () () : string =
    let v0 : string = "spiral_builder.process_python"
    v0
and closure148 (v0 : string) () : string =
    v0
and closure149 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v14 : (string -> (string seq -> string)) = String.concat
    let v15 : (string seq -> string) = v14 v1
    v15 v5
and closure151 () () : string =
    let v0 : string = "spiral_builder.process_python / Exception"
    v0
and closure152 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v1, v0, v2)
and closure150 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure151()
    let v6 : (unit -> struct (exn * string * string * string)) = closure152(v0, v1, v2, v3)
    method123(v4, v5, v6)
    US3_1
and closure153 () () : string =
    let v0 : string = "spiral_builder.process_python / error"
    v0
and closure154 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and closure155 () () : string =
    let v0 : string = "spiral_builder.run / invalid subcommand"
    v0
and closure156 (v0 : clap_ArgMatches, v1 : std_string_String) () : struct (std_string_String * clap_ArgMatches) =
    struct (v1, v0)
and method200 (v0 : Mut4, v1 : clap_ArgMatches) : unit =
    let v4 : string = $"%A{v1}"
    method11(v0, v4)
and method199 (v0 : Mut4, v1 : std_string_String, v2 : clap_ArgMatches) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "subcommand"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method40(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "arg_matches"
    method11(v0, v7)
    method11(v0, v5)
    method200(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure157 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (std_string_String * clap_ArgMatches))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = method7()
    v330 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US2 option = None
    let _v333 = ref v333 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v334 : int64 = x
    let v335 : US2 = US2_0(v334)
    v335 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v333.Value <- x
    let v336 : US2 option = _v333.Value 
    let v359 : US2 = US2_1
    let v360 : US2 = v336 |> Option.defaultValue v359 
    let v458 : System.DateTime =
        match v360 with
        | US2_1 -> (* None *)
            let v450 : System.DateTime = System.DateTime.Now
            v450
        | US2_0(v368) -> (* Some *)
            let v371 : System.DateTime = System.DateTime.Now
            let v380 : (System.DateTime -> int64) = _.Ticks
            let v381 : int64 = v380 v371
            let v388 : int64 = v381 - v368
            let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v392 : System.TimeSpan = v391 v388
            let v401 : (System.TimeSpan -> int32) = _.Hours
            let v402 : int32 = v401 v392
            let v411 : (System.TimeSpan -> int32) = _.Minutes
            let v412 : int32 = v411 v392
            let v421 : (System.TimeSpan -> int32) = _.Seconds
            let v422 : int32 = v421 v392
            let v431 : (System.TimeSpan -> int32) = _.Milliseconds
            let v432 : int32 = v431 v392
            let v441 : System.DateTime = System.DateTime (1, 1, 1, v402, v412, v422, v432)
            v441
    let v461 : string = method8()
    let v470 : (string -> string) = v458.ToString
    let v471 : string = v470 v461
    v471 
    #endif
#if FABLE_COMPILER_PYTHON
    let v480 : US2 option = None
    let _v480 = ref v480 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v481 : int64 = x
    let v482 : US2 = US2_0(v481)
    v482 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v480.Value <- x
    let v483 : US2 option = _v480.Value 
    let v506 : US2 = US2_1
    let v507 : US2 = v483 |> Option.defaultValue v506 
    let v605 : System.DateTime =
        match v507 with
        | US2_1 -> (* None *)
            let v597 : System.DateTime = System.DateTime.Now
            v597
        | US2_0(v515) -> (* Some *)
            let v518 : System.DateTime = System.DateTime.Now
            let v527 : (System.DateTime -> int64) = _.Ticks
            let v528 : int64 = v527 v518
            let v535 : int64 = v528 - v515
            let v538 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v539 : System.TimeSpan = v538 v535
            let v548 : (System.TimeSpan -> int32) = _.Hours
            let v549 : int32 = v548 v539
            let v558 : (System.TimeSpan -> int32) = _.Minutes
            let v559 : int32 = v558 v539
            let v568 : (System.TimeSpan -> int32) = _.Seconds
            let v569 : int32 = v568 v539
            let v578 : (System.TimeSpan -> int32) = _.Milliseconds
            let v579 : int32 = v578 v539
            let v588 : System.DateTime = System.DateTime (1, 1, 1, v549, v559, v569, v579)
            v588
    let v608 : string = method8()
    let v617 : (string -> string) = v605.ToString
    let v618 : string = v617 v608
    v618 
    #endif
#else
    let v627 : US2 option = None
    let _v627 = ref v627 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v628 : int64 = x
    let v629 : US2 = US2_0(v628)
    v629 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v627.Value <- x
    let v630 : US2 option = _v627.Value 
    let v653 : US2 = US2_1
    let v654 : US2 = v630 |> Option.defaultValue v653 
    let v752 : System.DateTime =
        match v654 with
        | US2_1 -> (* None *)
            let v744 : System.DateTime = System.DateTime.Now
            v744
        | US2_0(v662) -> (* Some *)
            let v665 : System.DateTime = System.DateTime.Now
            let v674 : (System.DateTime -> int64) = _.Ticks
            let v675 : int64 = v674 v665
            let v682 : int64 = v675 - v662
            let v685 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v686 : System.TimeSpan = v685 v682
            let v695 : (System.TimeSpan -> int32) = _.Hours
            let v696 : int32 = v695 v686
            let v705 : (System.TimeSpan -> int32) = _.Minutes
            let v706 : int32 = v705 v686
            let v715 : (System.TimeSpan -> int32) = _.Seconds
            let v716 : int32 = v715 v686
            let v725 : (System.TimeSpan -> int32) = _.Milliseconds
            let v726 : int32 = v725 v686
            let v735 : System.DateTime = System.DateTime (1, 1, 1, v696, v706, v716, v726)
            v735
    let v755 : string = method8()
    let v764 : (string -> string) = v752.ToString
    let v765 : string = v764 v755
    v765 
    #endif
    |> fun x -> _v35 <- Some x
    let v772 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v927 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v931 : US3 =
        if v927 then
            let v928 : string = "Verbose"
            US3_0(v928)
        else
            US3_1
    let v980 : US3 =
        match v931 with
        | US3_1 -> (* None *)
            let v936 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v940 : US3 =
                if v936 then
                    let v937 : string = "Debug"
                    US3_0(v937)
                else
                    US3_1
            match v940 with
            | US3_1 -> (* None *)
                let v945 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v949 : US3 =
                    if v945 then
                        let v946 : string = "Info"
                        US3_0(v946)
                    else
                        US3_1
                match v949 with
                | US3_1 -> (* None *)
                    let v954 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v958 : US3 =
                        if v954 then
                            let v955 : string = "Warning"
                            US3_0(v955)
                        else
                            US3_1
                    match v958 with
                    | US3_1 -> (* None *)
                        let v963 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v967 : US3 =
                            if v963 then
                                let v964 : string = "Critical"
                                US3_0(v964)
                            else
                                US3_1
                        match v967 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v968) -> (* Some *)
                            US3_0(v968)
                    | US3_0(v959) -> (* Some *)
                        US3_0(v959)
                | US3_0(v950) -> (* Some *)
                    US3_0(v950)
            | US3_0(v941) -> (* Some *)
                US3_0(v941)
        | US3_0(v932) -> (* Some *)
            US3_0(v932)
    let v984 : string =
        match v980 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v981) -> (* Some *)
            v981
    let v987 : (unit -> string) = v984.ToLower
    let v988 : string = v987 ()
    let v997 : string = v988.PadLeft (7, ' ')
    let v1029 : bool = true
    let mutable _v1029 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1044 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1038 : string = "inline_colorization::color_bright_red"
            let v1039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1038 
            v1039
        | US0_1 -> (* Debug *)
            let v1032 : string = "inline_colorization::color_bright_blue"
            let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1032 
            v1033
        | US0_2 -> (* Info *)
            let v1034 : string = "inline_colorization::color_bright_green"
            let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1034 
            v1035
        | US0_0 -> (* Verbose *)
            let v1030 : string = "inline_colorization::color_bright_black"
            let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1030 
            v1031
        | US0_3 -> (* Warning *)
            let v1036 : string = "inline_colorization::color_yellow"
            let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1036 
            v1037
    let v1045 : string = "&*$0"
    let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1045 
    let v1047 : string = "inline_colorization::color_reset"
    let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1047 
    let v1049 : string = "\"{v1044}{v1046}{v1048}\""
    let v1050 : string = @$"format!(" + v1049 + ")"
    let v1051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1050 
    let v1052 : string = "fable_library_rust::String_::fromString($0)"
    let v1053 : string = Fable.Core.RustInterop.emitRustExpr v1051 v1052 
    v1053 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1068 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1062 : string = "inline_colorization::color_bright_red"
            let v1063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1062 
            v1063
        | US0_1 -> (* Debug *)
            let v1056 : string = "inline_colorization::color_bright_blue"
            let v1057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1056 
            v1057
        | US0_2 -> (* Info *)
            let v1058 : string = "inline_colorization::color_bright_green"
            let v1059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1058 
            v1059
        | US0_0 -> (* Verbose *)
            let v1054 : string = "inline_colorization::color_bright_black"
            let v1055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1054 
            v1055
        | US0_3 -> (* Warning *)
            let v1060 : string = "inline_colorization::color_yellow"
            let v1061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1060 
            v1061
    let v1069 : string = "&*$0"
    let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1069 
    let v1071 : string = "inline_colorization::color_reset"
    let v1072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1071 
    let v1073 : string = "\"{v1068}{v1070}{v1072}\""
    let v1074 : string = @$"format!(" + v1073 + ")"
    let v1075 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1074 
    let v1076 : string = "fable_library_rust::String_::fromString($0)"
    let v1077 : string = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
    v1077 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1092 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1086 : string = "inline_colorization::color_bright_red"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_1 -> (* Debug *)
            let v1080 : string = "inline_colorization::color_bright_blue"
            let v1081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1080 
            v1081
        | US0_2 -> (* Info *)
            let v1082 : string = "inline_colorization::color_bright_green"
            let v1083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1082 
            v1083
        | US0_0 -> (* Verbose *)
            let v1078 : string = "inline_colorization::color_bright_black"
            let v1079 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1078 
            v1079
        | US0_3 -> (* Warning *)
            let v1084 : string = "inline_colorization::color_yellow"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
    let v1093 : string = "&*$0"
    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v997 v1093 
    let v1095 : string = "inline_colorization::color_reset"
    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1095 
    let v1097 : string = "\"{v1092}{v1094}{v1096}\""
    let v1098 : string = @$"format!(" + v1097 + ")"
    let v1099 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1098 
    let v1100 : string = "fable_library_rust::String_::fromString($0)"
    let v1101 : string = Fable.Core.RustInterop.emitRustExpr v1099 v1100 
    v1101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1111 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1106 : string = "\u001b[91m"
            v1106
        | US0_1 -> (* Debug *)
            let v1103 : string = "\u001b[94m"
            v1103
        | US0_2 -> (* Info *)
            let v1104 : string = "\u001b[92m"
            v1104
        | US0_0 -> (* Verbose *)
            let v1102 : string = "\u001b[90m"
            v1102
        | US0_3 -> (* Warning *)
            let v1105 : string = "\u001b[93m"
            v1105
    let v1112 : string = method9()
    let v1113 : string = v1111 + v997 
    let v1114 : string = v1113 + v1112 
    v1114 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1124 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1119 : string = "\u001b[91m"
            v1119
        | US0_1 -> (* Debug *)
            let v1116 : string = "\u001b[94m"
            v1116
        | US0_2 -> (* Info *)
            let v1117 : string = "\u001b[92m"
            v1117
        | US0_0 -> (* Verbose *)
            let v1115 : string = "\u001b[90m"
            v1115
        | US0_3 -> (* Warning *)
            let v1118 : string = "\u001b[93m"
            v1118
    let v1125 : string = method9()
    let v1126 : string = v1124 + v997 
    let v1127 : string = v1126 + v1125 
    v1127 
    #endif
#else
    let v1137 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1132 : string = "\u001b[91m"
            v1132
        | US0_1 -> (* Debug *)
            let v1129 : string = "\u001b[94m"
            v1129
        | US0_2 -> (* Info *)
            let v1130 : string = "\u001b[92m"
            v1130
        | US0_0 -> (* Verbose *)
            let v1128 : string = "\u001b[90m"
            v1128
        | US0_3 -> (* Warning *)
            let v1131 : string = "\u001b[93m"
            v1131
    let v1138 : string = method9()
    let v1139 : string = v1137 + v997 
    let v1140 : string = v1139 + v1138 
    v1140 
    #endif
    |> fun x -> _v1029 <- Some x
    let v1141 : string = match _v1029 with Some x -> x | None -> failwith "base.run_target / _v1029=None"
    let v1160 : int64 = v14.l0
    let struct (v1161 : std_string_String, v1162 : clap_ArgMatches) = v2 ()
    let v1163 : string = ""
    let v1164 : Mut4 = {l0 = v1163} : Mut4
    method199(v1164, v1161, v1162)
    let v1165 : string = v1164.l0
    let v1168 : string = $"{v772} {v1141} #{v1160} %s{v1 ()} / {v1165}"
    let v1175 : char list = []
    let v1180 : (char list -> (char [])) = List.toArray
    let v1181 : (char []) = v1180 v1175
    let v1188 : string = v1168.TrimStart v1181 
    let v1227 : char list = []
    let v1230 : char list = '/' :: v1227 
    let v1239 : char list = ' ' :: v1230 
    let v1250 : (char list -> (char [])) = List.toArray
    let v1251 : (char []) = v1250 v1239
    let v1258 : string = v1188.TrimEnd v1251 
    v1258
and method198 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (std_string_String * clap_ArgMatches))) : unit =
    let v3 : (unit -> string) = closure157(v0, v1, v2)
    method14(v0, v3)
and closure158 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and closure159 () (v0 : serde_json_Error) : string =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v37 v52 
    v53
and method201 () : (serde_json_Error -> string) =
    closure159()
and method202 (v0 : Result<string, string>) : Result<string, string> =
    v0
and method15 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "let __result = Box::pin(async move { //"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v4 : (Ref<Str> -> std_string_String) = closure7()
    let v5 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v4) v3 
    let v8 : US4 option = None
    let _v8 = ref v8 
    match v5 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v9 : std_string_String, v10 : clap_ArgMatches) = x
    let v11 : US4 = US4_0(v9, v10)
    v11 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v8.Value <- x
    let v12 : US4 option = _v8.Value 
    let v36 : US4 = US4_1
    let v37 : US4 = v12 |> Option.defaultValue v36 
    let v4586 : (struct (string * string) []) =
        match v37 with
        | US4_0(v45, v46) -> (* Some *)
            let v47 : string = "fable_library_rust::String_::fromString($0)"
            let v48 : string = Fable.Core.RustInterop.emitRustExpr v45 v47 
            let v50 : bool = v48 = "cuda"
            if v50 then
                let v51 : string = method16()
                let v52 : string = "&*$0"
                let v53 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v51 v52 
                let v54 : string = "clap::ArgMatches::get_one(&$0, v53).cloned()"
                let v55 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v54 
                let v58 : US5 option = None
                let _v58 = ref v58 
                match v55 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v59 : std_string_String = x
                let v60 : US5 = US5_0(v59)
                v60 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v58.Value <- x
                let v61 : US5 option = _v58.Value 
                let v84 : US5 = US5_1
                let v85 : US5 = v61 |> Option.defaultValue v84 
                let v96 : std_string_String =
                    match v85 with
                    | US5_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US5_0(v93) -> (* Some *)
                        v93
                let v97 : string = "fable_library_rust::String_::fromString($0)"
                let v98 : string = Fable.Core.RustInterop.emitRustExpr v96 v97 
                let v99 : string = method17()
                let v100 : string = "&*$0"
                let v101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v99 v100 
                let v102 : string = "clap::ArgMatches::get_one(&$0, v101).cloned()"
                let v103 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v102 
                let v106 : US5 option = None
                let _v106 = ref v106 
                match v103 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v107 : std_string_String = x
                let v108 : US5 = US5_0(v107)
                v108 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v106.Value <- x
                let v109 : US5 option = _v106.Value 
                let v132 : US5 = US5_1
                let v133 : US5 = v109 |> Option.defaultValue v132 
                let v168 : US6 =
                    match v133 with
                    | US5_1 -> (* None *)
                        US6_1
                    | US5_0(v141) -> (* Some *)
                        let v142 : string = "fable_library_rust::String_::fromString($0)"
                        let v143 : string = Fable.Core.RustInterop.emitRustExpr v141 v142 
                        let v145 : bool = "Pip" = v143
                        let v149 : US7 =
                            if v145 then
                                let v146 : US8 = US8_0
                                US7_0(v146)
                            else
                                US7_1
                        let v164 : US7 =
                            match v149 with
                            | US7_1 -> (* None *)
                                let v153 : bool = "Poetry" = v143
                                let v157 : US7 =
                                    if v153 then
                                        let v154 : US8 = US8_1
                                        US7_0(v154)
                                    else
                                        US7_1
                                match v157 with
                                | US7_1 -> (* None *)
                                    US7_1
                                | US7_0(v158) -> (* Some *)
                                    US7_0(v158)
                            | US7_0(v150) -> (* Some *)
                                US7_0(v150)
                        US6_0(v164)
                let v175 : US7 =
                    match v168 with
                    | US6_0(v169) -> (* Some *)
                        match v169 with
                        | US7_0(v170) -> (* Some *)
                            US7_0(v170)
                        | _ ->
                            US7_1
                    | _ ->
                        US7_1
                let v179 : US8 =
                    match v175 with
                    | US7_1 -> (* None *)
                        US8_0
                    | US7_0(v176) -> (* Some *)
                        v176
                let v180 : string = method18()
                let v181 : string = "&*$0"
                let v182 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v180 v181 
                let v183 : string = "clap::ArgMatches::get_many(&$0, v182).map(|x| x.cloned().into_iter().collect())"
                let v184 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v46 v183 
                let v187 : US9 option = None
                let _v187 = ref v187 
                match v184 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v188 : Vec<std_string_String> = x
                let v189 : US9 = US9_0(v188)
                v189 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v187.Value <- x
                let v190 : US9 option = _v187.Value 
                let v213 : US9 = US9_1
                let v214 : US9 = v190 |> Option.defaultValue v213 
                let v222 : (std_string_String []) = [||]
                let v223 : string = "$0.to_vec()"
                let v224 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v222 v223 
                let v227 : Vec<std_string_String> =
                    match v214 with
                    | US9_1 -> (* None *)
                        v224
                    | US9_0(v225) -> (* Some *)
                        v225
                let v230 : bool = true
                let mutable _v230 : string option = None 
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v233 : bool = true
                let mutable _v233 : Vec<uint8> option = None 
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v234 : string = "std::fs::read(&*$0).unwrap()"
                let v235 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v98 v234 
                v235 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v238 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v238 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v247 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v247 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v256 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v256 
                #endif
#if FABLE_COMPILER_PYTHON
                let v265 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v265 
                #endif
#else
                let v272 : (uint8 []) = v98 |> System.IO.File.ReadAllBytes
                let v273 : string = "$0.to_vec()"
                let v274 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v272 v273 
                v274 
                #endif
                |> fun x -> _v233 <- Some x
                let v275 : Vec<uint8> = match _v233 with Some x -> x | None -> failwith "base.run_target / _v233=None"
                let v290 : Vec<uint8> = method19(v275)
                let v291 : string = "std::string::String::from_utf8($0)"
                let v292 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = "$0.unwrap()"
                let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = "fable_library_rust::String_::fromString($0)"
                let v296 : string = Fable.Core.RustInterop.emitRustExpr v294 v295 
                v296 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v299 : string = null |> unbox<string>
                v299 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v308 : string = null |> unbox<string>
                v308 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v317 : string = null |> unbox<string>
                v317 
                #endif
#if FABLE_COMPILER_PYTHON
                let v326 : string = null |> unbox<string>
                v326 
                #endif
#else
                let v333 : string = v98 |> System.IO.File.ReadAllText
                v333 
                #endif
                |> fun x -> _v230 <- Some x
                let v334 : string = match _v230 with Some x -> x | None -> failwith "base.run_target / _v230=None"
                let v349 : string = __SOURCE_DIRECTORY__
                let v350 : string = "polyglot"
                let v351 : string = ".devcontainer"
                let v352 : string = method20(v350, v351)
                let v353 : US12 = method23(v352, v349)
                let v362 : US3 =
                    match v353 with
                    | US12_1(v356) -> (* Error *)
                        let v357 : US0 = US0_3
                        let v358 : (unit -> string) = closure9()
                        let v359 : (unit -> string) = closure10(v356)
                        method28(v357, v358, v359)
                        US3_1
                    | US12_0(v354) -> (* Ok *)
                        US3_0(v354)
                let v378 : US3 =
                    match v362 with
                    | US3_1 -> (* None *)
                        let v365 : string = method30()
                        let v366 : string = method20(v350, v351)
                        let v367 : US12 = method23(v366, v365)
                        match v367 with
                        | US12_1(v370) -> (* Error *)
                            let v371 : US0 = US0_3
                            let v372 : (unit -> string) = closure9()
                            let v373 : (unit -> string) = closure10(v370)
                            method28(v371, v372, v373)
                            US3_1
                        | US12_0(v368) -> (* Ok *)
                            US3_0(v368)
                    | US3_0(v363) -> (* Some *)
                        US3_0(v363)
                let v382 : string =
                    match v378 with
                    | US3_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US3_0(v379) -> (* Some *)
                        v379
                let v383 : string = method20(v382, v350)
                let v384 : string = method30()
                let v387 : (unit -> string) = v384.ToLower
                let v388 : string = v387 ()
                let v397 : (unit -> string) = v383.ToLower
                let v398 : string = v397 ()
                let v405 : bool = v388.StartsWith v398 
                let v408 : US12 =
                    if v405 then
                        US12_1(v398)
                    else
                        US12_0(v398)
                let v414 : Result<string, string> =
                    match v408 with
                    | US12_1(v411) -> (* Error *)
                        let v412 : Result<string, string> = Error v411 
                        v412
                    | US12_0(v409) -> (* Ok *)
                        let v410 : Result<string, string> = Ok v409 
                        v410
                let v415 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                let v416 : bool = Fable.Core.RustInterop.emitRustExpr v414 v415 
                let v417 : string = "x"
                let v418 : string = Fable.Core.RustInterop.emitRustExpr () v417 
                let v419 : string = "true; $0 })"
                let v420 : bool = Fable.Core.RustInterop.emitRustExpr v418 v419 
                let v421 : string = "_result"
                let v422 : string = Fable.Core.RustInterop.emitRustExpr () v421 
                let v423 : string = method31(v98)
                let v429 : string =
                    match v179 with
                    | US8_0 -> (* Pip *)
                        let v424 : string = "requirements.txt"
                        method20(v423, v424)
                    | US8_1 -> (* Poetry *)
                        let v426 : string = "pyproject.toml"
                        method20(v423, v426)
                let v430 : string = "true; let _result : Vec<_> = v227.into_iter().map(|x| { //"
                let v431 : bool = Fable.Core.RustInterop.emitRustExpr () v430 
                let v432 : string = "x"
                let v433 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v432 
                let v434 : string = "fable_library_rust::String_::fromString($0)"
                let v435 : string = Fable.Core.RustInterop.emitRustExpr v433 v434 
                let v438 : string = "="
                let v439 : bool = v435.Contains v438 
                let v454 : string =
                    if v439 then
                        v435
                    else
                        let v446 : string = "]"
                        let v447 : bool = v435.EndsWith v446 
                        if v447 then
                            let v448 : string = $"={{version='*',features=["
                            let v449 : string = "["
                            let v450 : string = v435.Replace (v449, v448)
                            let v451 : string = $"{v450}}}"
                            v451
                        else
                            let v452 : string = $"{v435}='*'"
                            v452
                let v455 : string = "true; $0 }).collect::<Vec<_>>()"
                let v456 : bool = Fable.Core.RustInterop.emitRustExpr v454 v455 
                let v457 : string = "_result"
                let v458 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v457 
                let v459 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v460 : (string []) = Fable.Core.RustInterop.emitRustExpr v458 v459 
                let v463 : string seq = seq { for i = 0 to v460.Length - 1 do yield v460.[i] }
                let v472 : (string -> (string seq -> string)) = String.concat
                let v473 : string = "\n"
                let v474 : (string seq -> string) = v472 v473
                let v475 : string = v474 v463
                let v483 : bool = v475 = ""
                let struct (v545 : int32, v546 : string) =
                    if v483 then
                        let v484 : string = ""
                        struct (0, v484)
                    else
                        let v523 : string =
                            match v179 with
                            | US8_0 -> (* Pip *)
                                v475
                            | US8_1 -> (* Poetry *)
                                let v485 : string = $"[tool.poetry]"
                                let v486 : string = $"name = \"test\""
                                let v487 : string = v485 + v473 
                                let v488 : string = v487 + v486 
                                let v489 : string = $"version = \"0.0.1\""
                                let v490 : string = v488 + v473 
                                let v491 : string = v490 + v489 
                                let v492 : string = $"description = \"\""
                                let v493 : string = v491 + v473 
                                let v494 : string = v493 + v492 
                                let v495 : string = $"authors = []"
                                let v496 : string = v494 + v473 
                                let v497 : string = v496 + v495 
                                let v498 : string = $""
                                let v499 : string = v497 + v473 
                                let v500 : string = v499 + v498 
                                let v501 : string = $"[tool.poetry.dependencies]"
                                let v502 : string = v500 + v473 
                                let v503 : string = v502 + v501 
                                let v504 : string = $"python=\"~3.12\""
                                let v505 : string = v503 + v473 
                                let v506 : string = v505 + v504 
                                let v507 : string = $"{v475}"
                                let v508 : string = v506 + v473 
                                let v509 : string = v508 + v507 
                                let v510 : string = $""
                                let v511 : string = v509 + v473 
                                let v512 : string = v511 + v510 
                                let v513 : string = $"[build-system]"
                                let v514 : string = v512 + v473 
                                let v515 : string = v514 + v513 
                                let v516 : string = $"requires = [\"poetry-core\"]"
                                let v517 : string = v515 + v473 
                                let v518 : string = v517 + v516 
                                let v519 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v520 : string = v518 + v473 
                                let v521 : string = v520 + v519 
                                v521
                        method32(v429, v523)
                        let v524 : System.Threading.CancellationToken option = None
                        let v525 : (struct (string * string) []) = [||]
                        let v526 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v527 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v528 : string option = None
                        let v532 : string =
                            match v179 with
                            | US8_0 -> (* Pip *)
                                let v529 : string = $"pip install -r requirements.txt"
                                v529
                            | US8_1 -> (* Poetry *)
                                let v530 : string = $"poetry install"
                                v530
                        let v535 : string option = Some v423 
                        let v542 : bool = true
                        method56(v532, v524, v525, v526, v527, v542, v535)
                let v549 : bool = v545 <> 0 
                let struct (v673 : US3, v674 : US3, v675 : US3) =
                    if v549 then
                        let v556 : US0 = US0_4
                        let v557 : (unit -> string) = closure72()
                        let v558 : (unit -> struct (US8 * int32 * string * string)) = closure73(v179, v98, v546, v545)
                        method120(v556, v557, v558)
                        let v559 : string = "py"
                        let v560 : US3 = US3_0(v559)
                        let v561 : US3 = US3_1
                        let v562 : US3 = US3_1
                        struct (v560, v561, v562)
                    else
                        let v566 : string =
                            match v179 with
                            | US8_0 -> (* Pip *)
                                let v563 : string = $"python \"{v98}\""
                                v563
                            | US8_1 -> (* Poetry *)
                                let v564 : string = $"poetry run python \"{v98}\""
                                v564
                        let v567 : string = "TRACE_LEVEL"
                        let v568 : string = "Verbose"
                        let v569 : (struct (string * string) []) = [|struct (v567, v568)|]
                        let v570 : System.Threading.CancellationToken option = None
                        let v571 : (struct (string * string) []) = [||]
                        let v572 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v573 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v574 : string option = None
                        let v577 : string option = Some v423 
                        let v584 : bool = true
                        let struct (v585 : int32, v586 : string) = method56(v566, v570, v569, v572, v573, v584, v577)
                        let v587 : int32 = v569.Length
                        let v588 : (string []) = Array.zeroCreate<string> (v587)
                        let v589 : Mut5 = {l0 = 0} : Mut5
                        while method59(v587, v589) do
                            let v591 : int32 = v589.l0
                            let struct (v592 : string, v593 : string) = v569.[int v591]
                            let v594 : string = $"$env:{v592}=''{v593}''"
                            v588.[int v591] <- v594
                            let v595 : int32 = v591 + 1
                            v589.l0 <- v595
                            ()
                        let v598 : string seq = v588 |> Seq.ofArray
                        let v607 : (string -> (string seq -> string)) = String.concat
                        let v608 : string = ";"
                        let v609 : (string seq -> string) = v607 v608
                        let v610 : string = v609 v598
                        let v617 : string = $"pwsh -c '{v610}; {v566}'"
                        let v618 : bool = v585 = 0
                        let v629 : bool =
                            if v618 then
                                true
                            else
                                let v621 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v622 : bool = v586.Contains v621 
                                v622
                        let struct (v670 : US3, v671 : US3, v672 : US3) =
                            if v629 then
                                let v632 : (string -> US3) = closure75()
                                let v633 : (unit -> string) = closure76(v586)
                                let v634 : (exn -> US3) = closure77(v98, v586, v617)
                                let v635 : US3 = US3_1
                                let result = ref v635
                                try
                                    result.Value <- v633 () |> v632 
                                with ex ->
                                    result.Value <- v634 ex 
                                let v636 : US3 = result.Value
                                let v656 : string option =
                                    match v636 with
                                    | US3_1 -> (* None *)
                                        let v654 : string option = None
                                        v654
                                    | US3_0(v644) -> (* Some *)
                                        let v647 : string option = Some v644 
                                        v647
                                let v657 : string = "$0.unwrap()"
                                let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
                                let v659 : string = "py"
                                let v660 : US3 = US3_0(v659)
                                let v661 : US3 = US3_0(v334)
                                let v662 : US3 = US3_0(v658)
                                struct (v660, v661, v662)
                            else
                                let v663 : US0 = US0_4
                                let v664 : (unit -> string) = closure81()
                                let v665 : (unit -> struct (int32 * string * string * string)) = closure82(v98, v586, v585, v617)
                                method126(v663, v664, v665)
                                let v666 : string = "py"
                                let v667 : US3 = US3_0(v666)
                                let v668 : US3 = US3_1
                                let v669 : US3 = US3_1
                                struct (v667, v668, v669)
                        struct (v670, v671, v672)
                let v679 : string =
                    match v673 with
                    | US3_1 -> (* None *)
                        let v677 : string = ""
                        v677
                    | US3_0(v676) -> (* Some *)
                        v676
                let v680 : string = "extension"
                let v684 : string =
                    match v674 with
                    | US3_1 -> (* None *)
                        let v682 : string = ""
                        v682
                    | US3_0(v681) -> (* Some *)
                        v681
                let v685 : string = "code"
                let v689 : string =
                    match v675 with
                    | US3_1 -> (* None *)
                        let v687 : string = ""
                        v687
                    | US3_0(v686) -> (* Some *)
                        v686
                let v690 : string = "output"
                let v691 : (struct (string * string) []) = [|struct (v680, v679); struct (v685, v684); struct (v690, v689)|]
                let v692 : string = "$0.to_vec()"
                let v693 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v691 v692 
                let v694 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v695 : (struct (string * string) -> (std_string_String * std_string_String)) = closure84()
                let v696 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v693, v695) v694 
                let v697 : string = "std::collections::BTreeMap::from_iter(v696.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v698 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v697 
                let v699 : string = "serde_json::to_string(&v698)"
                let v700 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v699 
                let v701 : string = "$0.unwrap()"
                let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v700 v701 
                let v703 : string = "fable_library_rust::String_::fromString($0)"
                let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
                let v705 : string = "command_result"
                [|struct (v705, v704)|]
            else
                let v707 : string = "fable_library_rust::String_::fromString($0)"
                let v708 : string = Fable.Core.RustInterop.emitRustExpr v45 v707 
                let v710 : bool = v708 = "fable"
                if v710 then
                    let v711 : string = method128()
                    let v712 : string = "&*$0"
                    let v713 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v711 v712 
                    let v714 : string = "clap::ArgMatches::get_one(&$0, v713).cloned()"
                    let v715 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v714 
                    let v718 : US5 option = None
                    let _v718 = ref v718 
                    match v715 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v719 : std_string_String = x
                    let v720 : US5 = US5_0(v719)
                    v720 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v718.Value <- x
                    let v721 : US5 option = _v718.Value 
                    let v744 : US5 = US5_1
                    let v745 : US5 = v721 |> Option.defaultValue v744 
                    let v756 : std_string_String =
                        match v745 with
                        | US5_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US5_0(v753) -> (* Some *)
                            v753
                    let v757 : string = "fable_library_rust::String_::fromString($0)"
                    let v758 : string = Fable.Core.RustInterop.emitRustExpr v756 v757 
                    let v759 : string = method129()
                    let v760 : string = "&*$0"
                    let v761 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v759 v760 
                    let v762 : string = "clap::ArgMatches::get_one(&$0, v761).cloned()"
                    let v763 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v762 
                    let v766 : US5 option = None
                    let _v766 = ref v766 
                    match v763 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v767 : std_string_String = x
                    let v768 : US5 = US5_0(v767)
                    v768 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v766.Value <- x
                    let v769 : US5 option = _v766.Value 
                    let v792 : US5 = US5_1
                    let v793 : US5 = v769 |> Option.defaultValue v792 
                    let v807 : US3 =
                        match v793 with
                        | US5_1 -> (* None *)
                            US3_1
                        | US5_0(v801) -> (* Some *)
                            let v802 : string = "fable_library_rust::String_::fromString($0)"
                            let v803 : string = Fable.Core.RustInterop.emitRustExpr v801 v802 
                            US3_0(v803)
                    let v841 : string =
                        match v807 with
                        | US3_1 -> (* None *)
                            let v839 : string = "{}"
                            v839
                        | US3_0(v808) -> (* Some *)
                            let v809 : clap_Command = method0()
                            let v810 : string = $"_ {v808} --fs-path \"{v758}\""
                            let v811 : US22 = method70(v810)
                            let v817 : (string []) =
                                match v811 with
                                | US22_1(v813) -> (* Error *)
                                    let v814 : string = $"resultm.get / Result value was Error: {v813}"
                                    failwith<(string [])> v814
                                | US22_0(v812) -> (* Ok *)
                                    v812
                            let v818 : string = "$0.to_vec()"
                            let v819 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v817 v818 
                            let v820 : string = "true; let _result : Vec<_> = v819.into_iter().map(|x| { //"
                            let v821 : bool = Fable.Core.RustInterop.emitRustExpr () v820 
                            let v822 : string = "x"
                            let v823 : string = Fable.Core.RustInterop.emitRustExpr () v822 
                            let v824 : string = "&*$0"
                            let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v823 v824 
                            let v826 : string = "String::from($0)"
                            let v827 : std_string_String = Fable.Core.RustInterop.emitRustExpr v825 v826 
                            let v828 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v829 : bool = Fable.Core.RustInterop.emitRustExpr v827 v828 
                            let v830 : string = "_result"
                            let v831 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v830 
                            let v832 : string = "clap::Command::get_matches_from($0, v831)"
                            let v833 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v809 v832 
                            let v834 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method15(v0, v833)
                            let v835 : string = "v834.await"
                            let v836 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v835 
                            let v837 : string = "$0.unwrap()"
                            let v838 : string = Fable.Core.RustInterop.emitRustExpr v836 v837 
                            v838
                    let v842 : string = "command_result"
                    [|struct (v842, v841)|]
                else
                    let v844 : string = "fable_library_rust::String_::fromString($0)"
                    let v845 : string = Fable.Core.RustInterop.emitRustExpr v45 v844 
                    let v847 : bool = v845 = "dib"
                    if v847 then
                        let v848 : string = method130()
                        let v849 : string = "&*$0"
                        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v848 v849 
                        let v851 : string = "clap::ArgMatches::get_one(&$0, v850).cloned()"
                        let v852 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v851 
                        let v855 : (std_string_String -> string) = closure85()
                        let v856 : string option = v852 |> Option.map v855 
                        let v892 : string = "$0.unwrap()"
                        let v893 : string = Fable.Core.RustInterop.emitRustExpr v856 v892 
                        let v894 : string = method142()
                        let v895 : string = "&*$0"
                        let v896 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v894 v895 
                        let v897 : string = "clap::ArgMatches::get_one(&$0, v896).cloned()"
                        let v898 : uint8 option = Fable.Core.RustInterop.emitRustExpr v46 v897 
                        let v901 : uint8 = v898 |> Option.defaultValue 1uy 
                        let v908 : string = method143()
                        let v909 : string = "&*$0"
                        let v910 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v908 v909 
                        let v911 : string = "clap::ArgMatches::get_one(&$0, v910).cloned()"
                        let v912 : string option = Fable.Core.RustInterop.emitRustExpr v46 v911 
                        let v913 : uint8 = 1uy
                        let struct (v914 : int32, v915 : string) = method144(v912, v901, v893, v913)
                        let v918 : bool = v914 <> 0 
                        let struct (v1296 : int32, v1297 : string) =
                            if v918 then
                                struct (v914, v915)
                            else
                                let v925 : System.Threading.CancellationToken option = None
                                let v926 : (struct (string * string) []) = [||]
                                let v927 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v928 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v929 : string option = None
                                let v930 : string = $"jupyter nbconvert \"{v893}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v931 : bool = true
                                let struct (v932 : int32, v933 : string) = method56(v930, v925, v926, v927, v928, v931, v929)
                                let v934 : US0 = US0_1
                                let v935 : (unit -> string) = closure89()
                                let v936 : (unit -> struct (int32 * int32)) = closure90(v933, v932)
                                method147(v934, v935, v936)
                                let v939 : bool = v932 <> 0 
                                if v939 then
                                    let v946 : string = $"repl_result: {v915}

jupyter_result: {v933}"
                                    struct (v932, v946)
                                else
                                    let v947 : string = "'"
                                    let v948 : string = "''"
                                    let v949 : string = v893.Replace (v947, v948)
                                    let v950 : System.Threading.CancellationToken option = None
                                    let v951 : (struct (string * string) []) = [||]
                                    let v952 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v953 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v954 : string option = None
                                    let v955 : string = $"pwsh -c \"$counter = 1; $path = '{v949}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v956 : bool = true
                                    let struct (v957 : int32, v958 : string) = method56(v955, v950, v951, v952, v953, v956, v954)
                                    let v959 : US0 = US0_1
                                    let v960 : (unit -> string) = closure92()
                                    let v961 : (unit -> struct (int32 * int32)) = closure93(v958, v957)
                                    method149(v959, v960, v961)
                                    let v962 : string = $"{v893}.html"
                                    let v965 : bool = true
                                    let mutable _v965 : string option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v968 : bool = true
                                    let mutable _v968 : Vec<uint8> option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v969 : string = "std::fs::read(&*$0).unwrap()"
                                    let v970 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v962 v969 
                                    v970 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v973 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v973 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v982 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v982 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v991 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v991 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1000 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1000 
                                    #endif
#else
                                    let v1007 : (uint8 []) = v962 |> System.IO.File.ReadAllBytes
                                    let v1008 : string = "$0.to_vec()"
                                    let v1009 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1007 v1008 
                                    v1009 
                                    #endif
                                    |> fun x -> _v968 <- Some x
                                    let v1010 : Vec<uint8> = match _v968 with Some x -> x | None -> failwith "base.run_target / _v968=None"
                                    let v1025 : Vec<uint8> = method19(v1010)
                                    let v1026 : string = "std::string::String::from_utf8($0)"
                                    let v1027 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1025 v1026 
                                    let v1028 : string = "$0.unwrap()"
                                    let v1029 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1027 v1028 
                                    let v1030 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1031 : string = Fable.Core.RustInterop.emitRustExpr v1029 v1030 
                                    v1031 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1034 : string = null |> unbox<string>
                                    v1034 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1043 : string = null |> unbox<string>
                                    v1043 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1052 : string = null |> unbox<string>
                                    v1052 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1061 : string = null |> unbox<string>
                                    v1061 
                                    #endif
#else
                                    let v1068 : string = v962 |> System.IO.File.ReadAllText
                                    v1068 
                                    #endif
                                    |> fun x -> _v965 <- Some x
                                    let v1069 : string = match _v965 with Some x -> x | None -> failwith "base.run_target / _v965=None"
                                    let v1084 : string = "\r\n"
                                    let v1085 : string = "\n"
                                    let v1086 : string = v1069.Replace (v1084, v1085)
                                    let v1087 : string = $"{v893}.html"
                                    let v1090 : bool = true
                                    let mutable _v1090 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1091 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1087, v1086) v1091 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v1116 : string = method55(v1086)
                                    System.IO.File.WriteAllText (v1087, v1116)
                                    () 
                                    #endif
                                    |> fun x -> _v1090 <- Some x
                                    match _v1090 with Some x -> x | None -> failwith "base.run_target / _v1090=None"
                                    let v1127 : string = $"{v893}.ipynb"
                                    let v1130 : bool = true
                                    let mutable _v1130 : string option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1133 : bool = true
                                    let mutable _v1133 : Vec<uint8> option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1134 : string = "std::fs::read(&*$0).unwrap()"
                                    let v1135 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1127 v1134 
                                    v1135 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1138 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1138 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1147 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1147 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1156 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1156 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1165 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1165 
                                    #endif
#else
                                    let v1172 : (uint8 []) = v1127 |> System.IO.File.ReadAllBytes
                                    let v1173 : string = "$0.to_vec()"
                                    let v1174 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1172 v1173 
                                    v1174 
                                    #endif
                                    |> fun x -> _v1133 <- Some x
                                    let v1175 : Vec<uint8> = match _v1133 with Some x -> x | None -> failwith "base.run_target / _v1133=None"
                                    let v1190 : Vec<uint8> = method19(v1175)
                                    let v1191 : string = "std::string::String::from_utf8($0)"
                                    let v1192 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1190 v1191 
                                    let v1193 : string = "$0.unwrap()"
                                    let v1194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1192 v1193 
                                    let v1195 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1196 : string = Fable.Core.RustInterop.emitRustExpr v1194 v1195 
                                    v1196 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1199 : string = null |> unbox<string>
                                    v1199 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1208 : string = null |> unbox<string>
                                    v1208 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1217 : string = null |> unbox<string>
                                    v1217 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1226 : string = null |> unbox<string>
                                    v1226 
                                    #endif
#else
                                    let v1233 : string = v1127 |> System.IO.File.ReadAllText
                                    v1233 
                                    #endif
                                    |> fun x -> _v1130 <- Some x
                                    let v1234 : string = match _v1130 with Some x -> x | None -> failwith "base.run_target / _v1130=None"
                                    let v1249 : string = v1234.Replace (v1084, v1085)
                                    let v1250 : string = "\\r\\n"
                                    let v1251 : string = "\\n"
                                    let v1252 : string = v1249.Replace (v1250, v1251)
                                    let v1253 : string = $"{v893}.ipynb"
                                    let v1256 : bool = true
                                    let mutable _v1256 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1257 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1253, v1252) v1257 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v1282 : string = method55(v1252)
                                    System.IO.File.WriteAllText (v1253, v1282)
                                    () 
                                    #endif
                                    |> fun x -> _v1256 <- Some x
                                    match _v1256 with Some x -> x | None -> failwith "base.run_target / _v1256=None"
                                    let v1293 : string = $"repl_result: {v915}

jupyter_result: {v933}

pwsh_replace_html_result: {v958}"
                                    struct (v957, v1293)
                        let v1298 : US0 = US0_1
                        let v1299 : (unit -> string) = closure95()
                        let v1300 : (unit -> struct (int32 * int32)) = closure96(v1297, v1296)
                        method151(v1298, v1299, v1300)
                        let v1303 : bool = v1296 <> 0 
                        if v1303 then
                            let v1310 : string = $"spiral_builder.run / dib / exit_code: {v1296} / result: {v1297}"
                            failwith<unit> v1310
                        let v1311 : string = "stdio"
                        [|struct (v1311, v1297)|]
                    else
                        let v1313 : string = "fable_library_rust::String_::fromString($0)"
                        let v1314 : string = Fable.Core.RustInterop.emitRustExpr v45 v1313 
                        let v1316 : bool = v1314 = "rust"
                        let struct (v4559 : US3, v4560 : US3, v4561 : US3) =
                            if v1316 then
                                let v1317 : string = method128()
                                let v1318 : string = "&*$0"
                                let v1319 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1317 v1318 
                                let v1320 : string = "clap::ArgMatches::get_one(&$0, v1319).cloned()"
                                let v1321 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v1320 
                                let v1324 : US5 option = None
                                let _v1324 = ref v1324 
                                match v1321 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v1325 : std_string_String = x
                                let v1326 : US5 = US5_0(v1325)
                                v1326 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v1324.Value <- x
                                let v1327 : US5 option = _v1324.Value 
                                let v1350 : US5 = US5_1
                                let v1351 : US5 = v1327 |> Option.defaultValue v1350 
                                let v1362 : std_string_String =
                                    match v1351 with
                                    | US5_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US5_0(v1359) -> (* Some *)
                                        v1359
                                let v1363 : string = "fable_library_rust::String_::fromString($0)"
                                let v1364 : string = Fable.Core.RustInterop.emitRustExpr v1362 v1363 
                                let v1365 : string = method18()
                                let v1366 : string = "&*$0"
                                let v1367 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1365 v1366 
                                let v1368 : string = "clap::ArgMatches::get_many(&$0, v1367).map(|x| x.cloned().into_iter().collect())"
                                let v1369 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v46 v1368 
                                let v1372 : US9 option = None
                                let _v1372 = ref v1372 
                                match v1369 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v1373 : Vec<std_string_String> = x
                                let v1374 : US9 = US9_0(v1373)
                                v1374 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v1372.Value <- x
                                let v1375 : US9 option = _v1372.Value 
                                let v1398 : US9 = US9_1
                                let v1399 : US9 = v1375 |> Option.defaultValue v1398 
                                let v1407 : (std_string_String []) = [||]
                                let v1408 : string = "$0.to_vec()"
                                let v1409 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1407 v1408 
                                let v1412 : Vec<std_string_String> =
                                    match v1399 with
                                    | US9_1 -> (* None *)
                                        v1409
                                    | US9_0(v1410) -> (* Some *)
                                        v1410
                                let v1414 : bool =
                                    match v0 with
                                    | US0_0 -> (* Verbose *)
                                        true
                                    | _ ->
                                        false
                                let v1417 : bool = true
                                let mutable _v1417 : string option = None 
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1420 : bool = true
                                let mutable _v1420 : Vec<uint8> option = None 
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1421 : string = "std::fs::read(&*$0).unwrap()"
                                let v1422 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1364 v1421 
                                v1422 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1425 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v1425 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1434 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v1434 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1443 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v1443 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1452 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v1452 
                                #endif
#else
                                let v1459 : (uint8 []) = v1364 |> System.IO.File.ReadAllBytes
                                let v1460 : string = "$0.to_vec()"
                                let v1461 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1459 v1460 
                                v1461 
                                #endif
                                |> fun x -> _v1420 <- Some x
                                let v1462 : Vec<uint8> = match _v1420 with Some x -> x | None -> failwith "base.run_target / _v1420=None"
                                let v1477 : Vec<uint8> = method19(v1462)
                                let v1478 : string = "std::string::String::from_utf8($0)"
                                let v1479 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1477 v1478 
                                let v1480 : string = "$0.unwrap()"
                                let v1481 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1479 v1480 
                                let v1482 : string = "fable_library_rust::String_::fromString($0)"
                                let v1483 : string = Fable.Core.RustInterop.emitRustExpr v1481 v1482 
                                v1483 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1486 : string = null |> unbox<string>
                                v1486 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1495 : string = null |> unbox<string>
                                v1495 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1504 : string = null |> unbox<string>
                                v1504 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1513 : string = null |> unbox<string>
                                v1513 
                                #endif
#else
                                let v1520 : string = v1364 |> System.IO.File.ReadAllText
                                v1520 
                                #endif
                                |> fun x -> _v1417 <- Some x
                                let v1521 : string = match _v1417 with Some x -> x | None -> failwith "base.run_target / _v1417=None"
                                let v1538 : string = "rs"
                                let v1539 : string = $"%A{struct (v1538, v1521)}"
                                let v1546 : string = method153(v1539)
                                let v1547 : string = __SOURCE_DIRECTORY__
                                let v1548 : string = "polyglot"
                                let v1549 : string = ".devcontainer"
                                let v1550 : string = method20(v1548, v1549)
                                let v1551 : US12 = method23(v1550, v1547)
                                let v1560 : US3 =
                                    match v1551 with
                                    | US12_1(v1554) -> (* Error *)
                                        let v1555 : US0 = US0_3
                                        let v1556 : (unit -> string) = closure9()
                                        let v1557 : (unit -> string) = closure10(v1554)
                                        method28(v1555, v1556, v1557)
                                        US3_1
                                    | US12_0(v1552) -> (* Ok *)
                                        US3_0(v1552)
                                let v1576 : US3 =
                                    match v1560 with
                                    | US3_1 -> (* None *)
                                        let v1563 : string = method30()
                                        let v1564 : string = method20(v1548, v1549)
                                        let v1565 : US12 = method23(v1564, v1563)
                                        match v1565 with
                                        | US12_1(v1568) -> (* Error *)
                                            let v1569 : US0 = US0_3
                                            let v1570 : (unit -> string) = closure9()
                                            let v1571 : (unit -> string) = closure10(v1568)
                                            method28(v1569, v1570, v1571)
                                            US3_1
                                        | US12_0(v1566) -> (* Ok *)
                                            US3_0(v1566)
                                    | US3_0(v1561) -> (* Some *)
                                        US3_0(v1561)
                                let v1580 : string =
                                    match v1576 with
                                    | US3_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US3_0(v1577) -> (* Some *)
                                        v1577
                                let v1581 : string = method20(v1580, v1548)
                                let v1582 : string = method30()
                                let v1585 : (unit -> string) = v1582.ToLower
                                let v1586 : string = v1585 ()
                                let v1595 : (unit -> string) = v1581.ToLower
                                let v1596 : string = v1595 ()
                                let v1603 : bool = v1586.StartsWith v1596 
                                let v1606 : US12 =
                                    if v1603 then
                                        US12_1(v1596)
                                    else
                                        US12_0(v1596)
                                let v1612 : Result<string, string> =
                                    match v1606 with
                                    | US12_1(v1609) -> (* Error *)
                                        let v1610 : Result<string, string> = Error v1609 
                                        v1610
                                    | US12_0(v1607) -> (* Ok *)
                                        let v1608 : Result<string, string> = Ok v1607 
                                        v1608
                                let v1613 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                let v1614 : bool = Fable.Core.RustInterop.emitRustExpr v1612 v1613 
                                let v1615 : string = "x"
                                let v1616 : string = Fable.Core.RustInterop.emitRustExpr () v1615 
                                let v1617 : string = "true; $0 })"
                                let v1618 : bool = Fable.Core.RustInterop.emitRustExpr v1616 v1617 
                                let v1619 : string = "_result"
                                let v1620 : string = Fable.Core.RustInterop.emitRustExpr () v1619 
                                let v1621 : string = "target/spiral_builder"
                                let v1622 : string = method20(v1620, v1621)
                                let v1623 : string = "spiral_builder"
                                let v1624 : string = method20(v1622, v1623)
                                let v1625 : string = "packages"
                                let v1626 : string = method20(v1624, v1625)
                                let v1630 : string = "Rust"
                                let v1631 : string = method20(v1626, v1630)
                                let v1632 : string = method20(v1631, v1546)
                                let v1633 : System.IDisposable = method35(v1632)
                                let v1634 : string = $"{v1623}.fs"
                                let v1635 : string = method20(v1632, v1634)
                                let v1636 : string = method135(v1635)
                                method32(v1636, v1521)
                                let v1637 : string list = []
                                let v1640 : string seq = seq { for i = 0 to v1637.Length - 1 do yield v1637.[i] }
                                let v1649 : (string -> (string seq -> string)) = String.concat
                                let v1650 : string = "\\n        "
                                let v1651 : (string seq -> string) = v1649 v1650
                                let v1652 : string = v1651 v1640
                                let v1659 : string = "Fable.Core"
                                let v1660 : string = $"<PackageReference Include=\"{v1659}\" Version=\"*\" />"
                                let v1661 : string list = []
                                let v1664 : string list = v1660 :: v1661 
                                let v1673 : string seq = seq { for i = 0 to v1664.Length - 1 do yield v1664.[i] }
                                let v1682 : (string -> (string seq -> string)) = String.concat
                                let v1683 : (string seq -> string) = v1682 v1650
                                let v1684 : string = v1683 v1673
                                let v1691 : string = $"{v1623}.fsproj"
                                let v1692 : string = method20(v1632, v1691)
                                let v1693 : string = method135(v1692)
                                let v1694 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                let v1695 : string = $"<PropertyGroup>"
                                let v1696 : string = "\n"
                                let v1697 : string = v1694 + v1696 
                                let v1698 : string = v1697 + v1695 
                                let v1699 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                let v1700 : string = v1698 + v1696 
                                let v1701 : string = v1700 + v1699 
                                let v1702 : string = $"    <LangVersion>preview</LangVersion>"
                                let v1703 : string = v1701 + v1696 
                                let v1704 : string = v1703 + v1702 
                                let v1705 : string = $"    <RollForward>Major</RollForward>"
                                let v1706 : string = v1704 + v1696 
                                let v1707 : string = v1706 + v1705 
                                let v1708 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                let v1709 : string = v1707 + v1696 
                                let v1710 : string = v1709 + v1708 
                                let v1711 : string = $"    <PublishAot>false</PublishAot>"
                                let v1712 : string = v1710 + v1696 
                                let v1713 : string = v1712 + v1711 
                                let v1714 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                let v1715 : string = v1713 + v1696 
                                let v1716 : string = v1715 + v1714 
                                let v1717 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                let v1718 : string = v1716 + v1696 
                                let v1719 : string = v1718 + v1717 
                                let v1720 : string = $"    <SelfContained>true</SelfContained>"
                                let v1721 : string = v1719 + v1696 
                                let v1722 : string = v1721 + v1720 
                                let v1723 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                let v1724 : string = v1722 + v1696 
                                let v1725 : string = v1724 + v1723 
                                let v1726 : string = $"    <OutputType>Exe</OutputType>"
                                let v1727 : string = v1725 + v1696 
                                let v1728 : string = v1727 + v1726 
                                let v1729 : string = $"</PropertyGroup>"
                                let v1730 : string = v1728 + v1696 
                                let v1731 : string = v1730 + v1729 
                                let v1732 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                let v1733 : string = v1731 + v1696 
                                let v1734 : string = v1733 + v1732 
                                let v1735 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                let v1736 : string = v1734 + v1696 
                                let v1737 : string = v1736 + v1735 
                                let v1738 : string = $"</PropertyGroup>"
                                let v1739 : string = v1737 + v1696 
                                let v1740 : string = v1739 + v1738 
                                let v1741 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                let v1742 : string = v1740 + v1696 
                                let v1743 : string = v1742 + v1741 
                                let v1744 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                let v1745 : string = v1743 + v1696 
                                let v1746 : string = v1745 + v1744 
                                let v1747 : string = $"</PropertyGroup>"
                                let v1748 : string = v1746 + v1696 
                                let v1749 : string = v1748 + v1747 
                                let v1750 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                let v1751 : string = v1749 + v1696 
                                let v1752 : string = v1751 + v1750 
                                let v1753 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                let v1754 : string = v1752 + v1696 
                                let v1755 : string = v1754 + v1753 
                                let v1756 : string = $"</PropertyGroup>"
                                let v1757 : string = v1755 + v1696 
                                let v1758 : string = v1757 + v1756 
                                let v1759 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                let v1760 : string = v1758 + v1696 
                                let v1761 : string = v1760 + v1759 
                                let v1762 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                let v1763 : string = v1761 + v1696 
                                let v1764 : string = v1763 + v1762 
                                let v1765 : string = $"</PropertyGroup>"
                                let v1766 : string = v1764 + v1696 
                                let v1767 : string = v1766 + v1765 
                                let v1768 : string = $"<ItemGroup>"
                                let v1769 : string = v1767 + v1696 
                                let v1770 : string = v1769 + v1768 
                                let v1771 : string = $"    {v1652}"
                                let v1772 : string = v1770 + v1696 
                                let v1773 : string = v1772 + v1771 
                                let v1774 : string = $"    <Compile Include=\"{v1636}\" />"
                                let v1775 : string = v1773 + v1696 
                                let v1776 : string = v1775 + v1774 
                                let v1777 : string = $"</ItemGroup>"
                                let v1778 : string = v1776 + v1696 
                                let v1779 : string = v1778 + v1777 
                                let v1780 : string = $"<ItemGroup>"
                                let v1781 : string = v1779 + v1696 
                                let v1782 : string = v1781 + v1780 
                                let v1783 : string = $"    {v1684}"
                                let v1784 : string = v1782 + v1696 
                                let v1785 : string = v1784 + v1783 
                                let v1786 : string = $"</ItemGroup>"
                                let v1787 : string = v1785 + v1696 
                                let v1788 : string = v1787 + v1786 
                                let v1789 : string = $"</Project>"
                                let v1790 : string = v1788 + v1696 
                                let v1791 : string = v1790 + v1789 
                                method32(v1693, v1791)
                                let v1792 : string = "../../.."
                                let v1793 : string = method20(v1632, v1792)
                                let v1794 : string = "Cargo.toml"
                                let v1795 : string = method20(v1793, v1794)
                                let v1796 : bool = method34(v1795)
                                let v1797 : bool = v1796 = false
                                if v1797 then
                                    let v1800 : System.DateTime = System.DateTime.Now
                                    let v1809 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1810 : System.Guid = v1809 ()
                                    let v1817 : System.Guid = method155(v1810, v1800)
                                    let v1820 : (System.Guid -> string) = _.ToString()
                                    let v1821 : string = v1820 v1817
                                    let v1828 : string = $"[package]"
                                    let v1829 : string = $"name = \"spiral_builder_{v1821}\""
                                    let v1830 : string = v1828 + v1696 
                                    let v1831 : string = v1830 + v1829 
                                    let v1832 : string = $"version = \"0.0.1\""
                                    let v1833 : string = v1831 + v1696 
                                    let v1834 : string = v1833 + v1832 
                                    let v1835 : string = $"edition = \"2021\""
                                    let v1836 : string = v1834 + v1696 
                                    let v1837 : string = v1836 + v1835 
                                    let v1838 : string = $""
                                    let v1839 : string = v1837 + v1696 
                                    let v1840 : string = v1839 + v1838 
                                    let v1841 : string = $"[[bin]]"
                                    let v1842 : string = v1840 + v1696 
                                    let v1843 : string = v1842 + v1841 
                                    let v1844 : string = $"name = \"spiral_builder_{v1821}\""
                                    let v1845 : string = v1843 + v1696 
                                    let v1846 : string = v1845 + v1844 
                                    let v1847 : string = $"path = \"spiral_builder.rs\""
                                    let v1848 : string = v1846 + v1696 
                                    let v1849 : string = v1848 + v1847 
                                    let v1852 : bool = true
                                    let mutable _v1852 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1853 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1795, v1849) v1853 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v1878 : string = method55(v1849)
                                    System.IO.File.WriteAllText (v1795, v1878)
                                    () 
                                    #endif
                                    |> fun x -> _v1852 <- Some x
                                    match _v1852 with Some x -> x | None -> failwith "base.run_target / _v1852=None"
                                    ()
                                let v1889 : string = method20(v1632, v1794)
                                let v1890 : bool = method34(v1889)
                                let v1891 : bool = v1890 = false
                                if v1891 then
                                    let v1894 : System.DateTime = System.DateTime.Now
                                    let v1903 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1904 : System.Guid = v1903 ()
                                    let v1911 : System.Guid = method155(v1904, v1894)
                                    let v1914 : (System.Guid -> string) = _.ToString()
                                    let v1915 : string = v1914 v1911
                                    let v1922 : string = $"[package]"
                                    let v1923 : string = $"name = \"spiral_builder_{v1915}\""
                                    let v1924 : string = v1922 + v1696 
                                    let v1925 : string = v1924 + v1923 
                                    let v1926 : string = $"version = \"0.0.1\""
                                    let v1927 : string = v1925 + v1696 
                                    let v1928 : string = v1927 + v1926 
                                    let v1929 : string = $"edition = \"2021\""
                                    let v1930 : string = v1928 + v1696 
                                    let v1931 : string = v1930 + v1929 
                                    let v1932 : string = $""
                                    let v1933 : string = v1931 + v1696 
                                    let v1934 : string = v1933 + v1932 
                                    let v1935 : string = $"[[bin]]"
                                    let v1936 : string = v1934 + v1696 
                                    let v1937 : string = v1936 + v1935 
                                    let v1938 : string = $"name = \"spiral_builder_{v1915}\""
                                    let v1939 : string = v1937 + v1696 
                                    let v1940 : string = v1939 + v1938 
                                    let v1941 : string = $"path = \"spiral_builder.rs\""
                                    let v1942 : string = v1940 + v1696 
                                    let v1943 : string = v1942 + v1941 
                                    let v1946 : bool = true
                                    let mutable _v1946 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1947 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1889, v1943) v1947 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v1972 : string = method55(v1943)
                                    System.IO.File.WriteAllText (v1889, v1972)
                                    () 
                                    #endif
                                    |> fun x -> _v1946 <- Some x
                                    match _v1946 with Some x -> x | None -> failwith "base.run_target / _v1946=None"
                                    ()
                                let v1983 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v1984 : string = method20(v1620, v1983)
                                let v1985 : string = "fable_modules/fable-library-rust"
                                let v1986 : string = method20(v1632, v1985)
                                method159(v1984, v1986)
                                let struct (v1987 : int32, v1988 : string) = method160(v1632, v1538, v1693, v1606)
                                let v1991 : bool = v1987 <> 0 
                                let struct (v2661 : US3, v2662 : US3, v2663 : US3) =
                                    if v1991 then
                                        let v1998 : US0 = US0_4
                                        let v1999 : (unit -> string) = closure101()
                                        let v2000 : (unit -> struct (int32 * string)) = closure102(v1988, v1987)
                                        method166(v1998, v1999, v2000)
                                        let v2001 : US3 = US3_0(v1538)
                                        let v2002 : US3 = US3_1
                                        let v2003 : US3 = US3_0(v1988)
                                        struct (v2001, v2002, v2003)
                                    else
                                        let v2004 : string = "true; let _result : Vec<_> = v1412.into_iter().map(|x| { //"
                                        let v2005 : bool = Fable.Core.RustInterop.emitRustExpr () v2004 
                                        let v2006 : string = "x"
                                        let v2007 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2006 
                                        let v2008 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2009 : string = Fable.Core.RustInterop.emitRustExpr v2007 v2008 
                                        let v2012 : string = "="
                                        let v2013 : bool = v2009.Contains v2012 
                                        let v2028 : string =
                                            if v2013 then
                                                v2009
                                            else
                                                let v2020 : string = "]"
                                                let v2021 : bool = v2009.EndsWith v2020 
                                                if v2021 then
                                                    let v2022 : string = $"={{version='*',features=["
                                                    let v2023 : string = "["
                                                    let v2024 : string = v2009.Replace (v2023, v2022)
                                                    let v2025 : string = $"{v2024}}}"
                                                    v2025
                                                else
                                                    let v2026 : string = $"{v2009}='*'"
                                                    v2026
                                        let v2029 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v2030 : bool = Fable.Core.RustInterop.emitRustExpr v2028 v2029 
                                        let v2031 : string = "_result"
                                        let v2032 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2031 
                                        let v2033 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v2034 : (string []) = Fable.Core.RustInterop.emitRustExpr v2032 v2033 
                                        let v2037 : string seq = seq { for i = 0 to v2034.Length - 1 do yield v2034.[i] }
                                        let v2046 : (string -> (string seq -> string)) = String.concat
                                        let v2047 : (string seq -> string) = v2046 v1696
                                        let v2048 : string = v2047 v2037
                                        let v2055 : string = $"[package]"
                                        let v2056 : string = $"name = \"spiral_builder_{v1546}\""
                                        let v2057 : string = v2055 + v1696 
                                        let v2058 : string = v2057 + v2056 
                                        let v2059 : string = $"version = \"0.0.1\""
                                        let v2060 : string = v2058 + v1696 
                                        let v2061 : string = v2060 + v2059 
                                        let v2062 : string = $"edition = \"2021\""
                                        let v2063 : string = v2061 + v1696 
                                        let v2064 : string = v2063 + v2062 
                                        let v2065 : string = $""
                                        let v2066 : string = v2064 + v1696 
                                        let v2067 : string = v2066 + v2065 
                                        let v2068 : string = $"[dependencies]"
                                        let v2069 : string = v2067 + v1696 
                                        let v2070 : string = v2069 + v2068 
                                        let v2071 : string = $"fable_library_rust = {{ workspace = true }}"
                                        let v2072 : string = v2070 + v1696 
                                        let v2073 : string = v2072 + v2071 
                                        let v2074 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v2075 : string = v2073 + v1696 
                                        let v2076 : string = v2075 + v2074 
                                        let v2077 : string = $"{v2048}"
                                        let v2078 : string = v2076 + v1696 
                                        let v2079 : string = v2078 + v2077 
                                        let v2080 : string = $""
                                        let v2081 : string = v2079 + v1696 
                                        let v2082 : string = v2081 + v2080 
                                        let v2083 : string = $"[[bin]]"
                                        let v2084 : string = v2082 + v1696 
                                        let v2085 : string = v2084 + v2083 
                                        let v2086 : string = $"name = \"spiral_builder_{v1546}\""
                                        let v2087 : string = v2085 + v1696 
                                        let v2088 : string = v2087 + v2086 
                                        let v2089 : string = $"path = \"spiral_builder.rs\" "
                                        let v2090 : string = v2088 + v1696 
                                        let v2091 : string = v2090 + v2089 
                                        let v2092 : string = method135(v1620)
                                        let v2093 : string = $"[workspace]"
                                        let v2094 : string = $"resolver = \"2\""
                                        let v2095 : string = v2093 + v1696 
                                        let v2096 : string = v2095 + v2094 
                                        let v2097 : string = $"members = [\"packages/Rust/*\"]"
                                        let v2098 : string = v2096 + v1696 
                                        let v2099 : string = v2098 + v2097 
                                        let v2100 : string = $""
                                        let v2101 : string = v2099 + v1696 
                                        let v2102 : string = v2101 + v2100 
                                        let v2103 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v2104 : string = v2102 + v1696 
                                        let v2105 : string = v2104 + v2103 
                                        let v2106 : string = $"path = \"{v2092}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v2107 : string = v2105 + v1696 
                                        let v2108 : string = v2107 + v2106 
                                        let v2109 : string = $"default-features = false"
                                        let v2110 : string = v2108 + v1696 
                                        let v2111 : string = v2110 + v2109 
                                        let v2112 : string = $"features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"]"
                                        let v2113 : string = v2111 + v1696 
                                        let v2114 : string = v2113 + v2112 
                                        let v2115 : string = $""
                                        let v2116 : string = v2114 + v1696 
                                        let v2117 : string = v2116 + v2115 
                                        let v2118 : string = $"[workspace.dependencies]"
                                        let v2119 : string = v2117 + v1696 
                                        let v2120 : string = v2119 + v2118 
                                        let v2121 : string = $"inline_colorization = \"~0.1\""
                                        let v2122 : string = v2120 + v1696 
                                        let v2123 : string = v2122 + v2121 
                                        method32(v1889, v2091)
                                        method32(v1795, v2123)
                                        let v2124 : string = "src/Range.rs"
                                        let v2125 : string = method20(v1986, v2124)
                                        let v2126 : bool = method34(v2125)
                                        if v2126 then
                                            let v2129 : bool = true
                                            let mutable _v2129 : string option = None 
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2132 : bool = true
                                            let mutable _v2132 : Vec<uint8> option = None 
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2133 : string = "std::fs::read(&*$0).unwrap()"
                                            let v2134 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2125 v2133 
                                            v2134 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2137 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v2137 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2146 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v2146 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2155 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v2155 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2164 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v2164 
                                            #endif
#else
                                            let v2171 : (uint8 []) = v2125 |> System.IO.File.ReadAllBytes
                                            let v2172 : string = "$0.to_vec()"
                                            let v2173 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2171 v2172 
                                            v2173 
                                            #endif
                                            |> fun x -> _v2132 <- Some x
                                            let v2174 : Vec<uint8> = match _v2132 with Some x -> x | None -> failwith "base.run_target / _v2132=None"
                                            let v2189 : Vec<uint8> = method19(v2174)
                                            let v2190 : string = "std::string::String::from_utf8($0)"
                                            let v2191 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2189 v2190 
                                            let v2192 : string = "$0.unwrap()"
                                            let v2193 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2191 v2192 
                                            let v2194 : string = "fable_library_rust::String_::fromString($0)"
                                            let v2195 : string = Fable.Core.RustInterop.emitRustExpr v2193 v2194 
                                            v2195 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2198 : string = null |> unbox<string>
                                            v2198 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2207 : string = null |> unbox<string>
                                            v2207 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2216 : string = null |> unbox<string>
                                            v2216 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2225 : string = null |> unbox<string>
                                            v2225 
                                            #endif
#else
                                            let v2232 : string = v2125 |> System.IO.File.ReadAllText
                                            v2232 
                                            #endif
                                            |> fun x -> _v2129 <- Some x
                                            let v2233 : string = match _v2129 with Some x -> x | None -> failwith "base.run_target / _v2129=None"
                                            let v2248 : string = "use crate::String_::fromCharCode;"
                                            let v2249 : string = "use crate::String_::fromChar;"
                                            let v2250 : string = v2233.Replace (v2248, v2249)
                                            let v2251 : string = "fromCharCode(c)"
                                            let v2252 : string = "std::char::from_u32(c).unwrap()"
                                            let v2253 : string = v2250.Replace (v2251, v2252)
                                            method32(v2125, v2253)
                                        let v2254 : uint8 = 1uy
                                        let struct (v2255 : int32, v2256 : string) = method168(v1606, v1889, v2254)
                                        let v2259 : bool = v2255 <> 0 
                                        if v2259 then
                                            let v2266 : US0 = US0_4
                                            let v2267 : (unit -> string) = closure105()
                                            let v2268 : (unit -> struct (int32 * string)) = closure106(v2256, v2255)
                                            method170(v2266, v2267, v2268)
                                        let v2269 : string = $"{v1623}.{v1538}"
                                        let v2270 : string = method20(v1632, v2269)
                                        let v2273 : bool = true
                                        let mutable _v2273 : string option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2276 : bool = true
                                        let mutable _v2276 : Vec<uint8> option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2277 : string = "std::fs::read(&*$0).unwrap()"
                                        let v2278 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2270 v2277 
                                        v2278 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2281 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2281 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2290 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2290 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2299 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2299 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2308 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2308 
                                        #endif
#else
                                        let v2315 : (uint8 []) = v2270 |> System.IO.File.ReadAllBytes
                                        let v2316 : string = "$0.to_vec()"
                                        let v2317 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2315 v2316 
                                        v2317 
                                        #endif
                                        |> fun x -> _v2276 <- Some x
                                        let v2318 : Vec<uint8> = match _v2276 with Some x -> x | None -> failwith "base.run_target / _v2276=None"
                                        let v2333 : Vec<uint8> = method19(v2318)
                                        let v2334 : string = "std::string::String::from_utf8($0)"
                                        let v2335 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2333 v2334 
                                        let v2336 : string = "$0.unwrap()"
                                        let v2337 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2335 v2336 
                                        let v2338 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2339 : string = Fable.Core.RustInterop.emitRustExpr v2337 v2338 
                                        v2339 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2342 : string = null |> unbox<string>
                                        v2342 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2351 : string = null |> unbox<string>
                                        v2351 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2360 : string = null |> unbox<string>
                                        v2360 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2369 : string = null |> unbox<string>
                                        v2369 
                                        #endif
#else
                                        let v2376 : string = v2270 |> System.IO.File.ReadAllText
                                        v2376 
                                        #endif
                                        |> fun x -> _v2273 <- Some x
                                        let v2377 : string = match _v2273 with Some x -> x | None -> failwith "base.run_target / _v2273=None"
                                        let v2392 : string = "\"{\".into()"
                                        let v2393 : string = Fable.Core.RustInterop.emitRustExpr () v2392 
                                        let v2394 : string = "pub fn main() -> Result<(), String> "
                                        let v2395 : string = v2394 + v2393 
                                        let v2396 : string = $"{v2395} Ok(()) }}"
                                        let v2399 : bool = v2377.Contains v2395 
                                        let v2532 : string =
                                            if v2399 then
                                                v2377
                                            else
                                                let v2406 : string = "\";\".into()"
                                                let v2407 : string = Fable.Core.RustInterop.emitRustExpr () v2406 
                                                let v2408 : string = "),)"
                                                let v2409 : string = v2408 + v2407 
                                                let v2410 : string = "));"
                                                let v2411 : string = v2377.Replace (v2409, v2410)
                                                let v2412 : string = "\";\".into()"
                                                let v2413 : string = Fable.Core.RustInterop.emitRustExpr () v2412 
                                                let v2414 : string = "},)"
                                                let v2415 : string = v2414 + v2413 
                                                let v2416 : string = "});"
                                                let v2417 : string = v2411.Replace (v2415, v2416)
                                                let v2418 : string = method172()
                                                let v2421 : bool = true
                                                let mutable _v2421 : string option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v2422 : string = method137(v2417)
                                                let v2423 : string = $"regex::Regex::new(&$0)"
                                                let v2424 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v2425 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v2424 v2423 
                                                let v2426 : string = "$0.unwrap()"
                                                let v2427 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v2425 v2426 
                                                let v2428 : string = $"$0.replace_all(&$1, &*$2)"
                                                let v2429 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v2427, v2422, v2418) v2428 
                                                let v2430 : string = "String::from($0)"
                                                let v2431 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2429 v2430 
                                                let v2432 : string = "fable_library_rust::String_::fromString($0)"
                                                let v2433 : string = Fable.Core.RustInterop.emitRustExpr v2431 v2432 
                                                v2433 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2436 : string = null |> unbox<string>
                                                v2436 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2445 : string = null |> unbox<string>
                                                v2445 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2454 : string = null |> unbox<string>
                                                v2454 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2463 : string = null |> unbox<string>
                                                v2463 
                                                #endif
#else
                                                let v2470 : string = method173()
                                                let v2471 : string = System.Text.RegularExpressions.Regex.Replace (v2417, v2470, v2418)
                                                v2471 
                                                #endif
                                                |> fun x -> _v2421 <- Some x
                                                let v2472 : string = match _v2421 with Some x -> x | None -> failwith "base.run_target / _v2421=None"
                                                let v2487 : string = "::Slice'_"
                                                let v2488 : string = "::Slice__"
                                                let v2489 : string = v2472.Replace (v2487, v2488)
                                                let v2490 : string = "\",\".into()"
                                                let v2491 : string = Fable.Core.RustInterop.emitRustExpr () v2490 
                                                let v2492 : string = "defaultOf()"
                                                let v2493 : string = v2492 + v2491 
                                                let v2494 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v2495 : string = v2489.Replace (v2493, v2494)
                                                let v2496 : string = "\"_.\".into()"
                                                let v2497 : string = Fable.Core.RustInterop.emitRustExpr () v2496 
                                                let v2498 : string = "_self"
                                                let v2499 : string = v2498 + v2497 
                                                let v2500 : string = "self."
                                                let v2501 : string = v2495.Replace (v2499, v2500)
                                                let v2502 : string = "\"h\".into()"
                                                let v2503 : string = Fable.Core.RustInterop.emitRustExpr () v2502 
                                                let v2504 : string = "get_or_insert_wit"
                                                let v2505 : string = v2504 + v2503 
                                                let v2506 : string = "get_or_init"
                                                let v2507 : string = v2501.Replace (v2505, v2506)
                                                let v2508 : string = "\";\".into()"
                                                let v2509 : string = Fable.Core.RustInterop.emitRustExpr () v2508 
                                                let v2510 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v2511 : string = v2510 + v2509 
                                                let v2512 : string = "type ConcurrentStack_1<T> = T;"
                                                let v2513 : string = v2507.Replace (v2511, v2512)
                                                let v2514 : string = "\";\".into()"
                                                let v2515 : string = Fable.Core.RustInterop.emitRustExpr () v2514 
                                                let v2516 : string = "use fable_library_rust::System::Threading::CancellationToken"
                                                let v2517 : string = v2516 + v2515 
                                                let v2518 : string = "type CancellationToken = ();"
                                                let v2519 : string = v2513.Replace (v2517, v2518)
                                                let v2520 : string = "\";\".into()"
                                                let v2521 : string = Fable.Core.RustInterop.emitRustExpr () v2520 
                                                let v2522 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v2523 : string = v2522 + v2521 
                                                let v2524 : string = "type TimeZoneInfo = i64;"
                                                let v2525 : string = v2519.Replace (v2523, v2524)
                                                let v2526 : string = "\";\".into()"
                                                let v2527 : string = Fable.Core.RustInterop.emitRustExpr () v2526 
                                                let v2528 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v2529 : string = v2528 + v2527 
                                                let v2530 : string = "type TaskCanceledException = ();"
                                                let v2531 : string = v2525.Replace (v2529, v2530)
                                                v2531
                                        let v2533 : bool = v2399 = false
                                        if v2533 then
                                            let v2534 : string = $"{v2532}\n\n{v2396}\n"
                                            method32(v2270, v2534)
                                        let v2535 : string = $"cargo +nightly run --manifest-path \"{v1889}\""
                                        let v2536 : string = "TRACE_LEVEL"
                                        let v2537 : string = "Verbose"
                                        let v2538 : string = "RUSTC_WRAPPER"
                                        let v2539 : string = "sccache"
                                        let v2540 : string = "RUSTFLAGS"
                                        let v2541 : string = "-C prefer-dynamic"
                                        let v2542 : (struct (string * string) []) = [|struct (v2536, v2537); struct (v2538, v2539); struct (v2540, v2541)|]
                                        let v2543 : System.Threading.CancellationToken option = None
                                        let v2544 : (struct (string * string) []) = [||]
                                        let v2545 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2546 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2547 : string option = None
                                        let v2553 : Result<string, string> =
                                            match v1606 with
                                            | US12_1(v2550) -> (* Error *)
                                                let v2551 : Result<string, string> = Error v2550 
                                                v2551
                                            | US12_0(v2548) -> (* Ok *)
                                                let v2549 : Result<string, string> = Ok v2548 
                                                v2549
                                        let v2554 : string = "v2553.ok()"
                                        let v2555 : string option = Fable.Core.RustInterop.emitRustExpr () v2554 
                                        let v2556 : bool = true
                                        let struct (v2557 : int32, v2558 : string) = method56(v2535, v2543, v2542, v2545, v2546, v2556, v2555)
                                        let v2559 : string = ""
                                        let v2560 : string = $"target/debug/spiral_builder_{v1546}{v2559}"
                                        let v2561 : string = method20(v1793, v2560)
                                        let v2562 : string = ".pdb"
                                        let v2563 : string = $"target/debug/spiral_builder_{v1546}{v2562}"
                                        let v2564 : string = method20(v1793, v2563)
                                        let v2565 : string = ".exe"
                                        let v2566 : string = $"target/debug/spiral_builder_{v1546}{v2565}"
                                        let v2567 : string = method20(v1793, v2566)
                                        let v2568 : string = ".d"
                                        let v2569 : string = $"target/debug/spiral_builder_{v1546}{v2568}"
                                        let v2570 : string = method20(v1793, v2569)
                                        let v2571 : bool = method34(v2561)
                                        let v2572 : bool = method34(v2564)
                                        let v2573 : bool = method34(v2567)
                                        let v2574 : bool = method34(v2570)
                                        let v2575 : US0 = US0_0
                                        let v2576 : (unit -> string) = closure108()
                                        let v2577 : (unit -> struct (string * UH4)) = closure109(v2270, v2570, v2574, v2567, v2573, v2564, v2572, v2561, v2571)
                                        method174(v2575, v2576, v2577)
                                        let v2581 : UH4 =
                                            if v2571 then
                                                let v2578 : UH4 = UH4_0
                                                UH4_1(v2561, v2571, v2578)
                                            else
                                                UH4_0
                                        let v2583 : UH4 =
                                            if v2572 then
                                                UH4_1(v2564, v2572, v2581)
                                            else
                                                v2581
                                        let v2585 : UH4 =
                                            if v2573 then
                                                UH4_1(v2567, v2573, v2583)
                                            else
                                                v2583
                                        let v2587 : UH4 =
                                            if v2574 then
                                                UH4_1(v2570, v2574, v2585)
                                            else
                                                v2585
                                        method177(v2587)
                                        let v2588 : int32 = v2542.Length
                                        let v2589 : (string []) = Array.zeroCreate<string> (v2588)
                                        let v2590 : Mut5 = {l0 = 0} : Mut5
                                        while method59(v2588, v2590) do
                                            let v2592 : int32 = v2590.l0
                                            let struct (v2593 : string, v2594 : string) = v2542.[int v2592]
                                            let v2595 : string = $"$env:{v2593}=''{v2594}''"
                                            v2589.[int v2592] <- v2595
                                            let v2596 : int32 = v2592 + 1
                                            v2590.l0 <- v2596
                                            ()
                                        let v2599 : string seq = v2589 |> Seq.ofArray
                                        let v2608 : (string -> (string seq -> string)) = String.concat
                                        let v2609 : string = ";"
                                        let v2610 : (string seq -> string) = v2608 v2609
                                        let v2611 : string = v2610 v2599
                                        let v2618 : string = $"pwsh -c '{v2611}; {v2535}'"
                                        let v2619 : bool = v2557 = 0
                                        let struct (v2658 : US3, v2659 : US3, v2660 : US3) =
                                            if v2619 then
                                                let v2622 : (string -> US3) = closure75()
                                                let v2623 : (unit -> string) = closure111(v2558)
                                                let v2624 : (exn -> US3) = closure113(v2270, v2558, v2618)
                                                let v2625 : US3 = US3_1
                                                let result = ref v2625
                                                try
                                                    result.Value <- v2623 () |> v2622 
                                                with ex ->
                                                    result.Value <- v2624 ex 
                                                let v2626 : US3 = result.Value
                                                let v2646 : string option =
                                                    match v2626 with
                                                    | US3_1 -> (* None *)
                                                        let v2644 : string option = None
                                                        v2644
                                                    | US3_0(v2634) -> (* Some *)
                                                        let v2637 : string option = Some v2634 
                                                        v2637
                                                let v2647 : string = "$0.unwrap()"
                                                let v2648 : string = Fable.Core.RustInterop.emitRustExpr v2646 v2647 
                                                let v2649 : US3 = US3_0(v1538)
                                                let v2650 : US3 = US3_0(v2532)
                                                let v2651 : US3 = US3_0(v2648)
                                                struct (v2649, v2650, v2651)
                                            else
                                                let v2652 : US0 = US0_4
                                                let v2653 : (unit -> string) = closure117()
                                                let v2654 : (unit -> struct (int32 * string * string * string)) = closure118(v2270, v2558, v2557, v2618)
                                                method180(v2652, v2653, v2654)
                                                let v2655 : US3 = US3_0(v1538)
                                                let v2656 : US3 = US3_1
                                                let v2657 : US3 = US3_1
                                                struct (v2655, v2656, v2657)
                                        struct (v2658, v2659, v2660)
                                struct (v2661, v2662, v2663)
                            else
                                let v2664 : string = "fable_library_rust::String_::fromString($0)"
                                let v2665 : string = Fable.Core.RustInterop.emitRustExpr v45 v2664 
                                let v2667 : bool = v2665 = "typescript"
                                let struct (v4556 : US3, v4557 : US3, v4558 : US3) =
                                    if v2667 then
                                        let v2668 : string = method128()
                                        let v2669 : string = "&*$0"
                                        let v2670 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2668 v2669 
                                        let v2671 : string = "clap::ArgMatches::get_one(&$0, v2670).cloned()"
                                        let v2672 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v2671 
                                        let v2675 : US5 option = None
                                        let _v2675 = ref v2675 
                                        match v2672 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v2676 : std_string_String = x
                                        let v2677 : US5 = US5_0(v2676)
                                        v2677 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v2675.Value <- x
                                        let v2678 : US5 option = _v2675.Value 
                                        let v2701 : US5 = US5_1
                                        let v2702 : US5 = v2678 |> Option.defaultValue v2701 
                                        let v2713 : std_string_String =
                                            match v2702 with
                                            | US5_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US5_0(v2710) -> (* Some *)
                                                v2710
                                        let v2714 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2715 : string = Fable.Core.RustInterop.emitRustExpr v2713 v2714 
                                        let v2716 : string = method18()
                                        let v2717 : string = "&*$0"
                                        let v2718 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2716 v2717 
                                        let v2719 : string = "clap::ArgMatches::get_many(&$0, v2718).map(|x| x.cloned().into_iter().collect())"
                                        let v2720 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v46 v2719 
                                        let v2723 : US9 option = None
                                        let _v2723 = ref v2723 
                                        match v2720 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v2724 : Vec<std_string_String> = x
                                        let v2725 : US9 = US9_0(v2724)
                                        v2725 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v2723.Value <- x
                                        let v2726 : US9 option = _v2723.Value 
                                        let v2749 : US9 = US9_1
                                        let v2750 : US9 = v2726 |> Option.defaultValue v2749 
                                        let v2758 : (std_string_String []) = [||]
                                        let v2759 : string = "$0.to_vec()"
                                        let v2760 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2758 v2759 
                                        let v2763 : Vec<std_string_String> =
                                            match v2750 with
                                            | US9_1 -> (* None *)
                                                v2760
                                            | US9_0(v2761) -> (* Some *)
                                                v2761
                                        let v2765 : bool =
                                            match v0 with
                                            | US0_0 -> (* Verbose *)
                                                true
                                            | _ ->
                                                false
                                        let v2768 : bool = true
                                        let mutable _v2768 : string option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2771 : bool = true
                                        let mutable _v2771 : Vec<uint8> option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2772 : string = "std::fs::read(&*$0).unwrap()"
                                        let v2773 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2715 v2772 
                                        v2773 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2776 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2776 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2785 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2785 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2794 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2794 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2803 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2803 
                                        #endif
#else
                                        let v2810 : (uint8 []) = v2715 |> System.IO.File.ReadAllBytes
                                        let v2811 : string = "$0.to_vec()"
                                        let v2812 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2810 v2811 
                                        v2812 
                                        #endif
                                        |> fun x -> _v2771 <- Some x
                                        let v2813 : Vec<uint8> = match _v2771 with Some x -> x | None -> failwith "base.run_target / _v2771=None"
                                        let v2828 : Vec<uint8> = method19(v2813)
                                        let v2829 : string = "std::string::String::from_utf8($0)"
                                        let v2830 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2828 v2829 
                                        let v2831 : string = "$0.unwrap()"
                                        let v2832 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2830 v2831 
                                        let v2833 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2834 : string = Fable.Core.RustInterop.emitRustExpr v2832 v2833 
                                        v2834 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2837 : string = null |> unbox<string>
                                        v2837 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2846 : string = null |> unbox<string>
                                        v2846 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2855 : string = null |> unbox<string>
                                        v2855 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2864 : string = null |> unbox<string>
                                        v2864 
                                        #endif
#else
                                        let v2871 : string = v2715 |> System.IO.File.ReadAllText
                                        v2871 
                                        #endif
                                        |> fun x -> _v2768 <- Some x
                                        let v2872 : string = match _v2768 with Some x -> x | None -> failwith "base.run_target / _v2768=None"
                                        let v2889 : string = "ts"
                                        let v2890 : string = $"%A{struct (v2889, v2872)}"
                                        let v2897 : string = method153(v2890)
                                        let v2898 : string = __SOURCE_DIRECTORY__
                                        let v2899 : string = "polyglot"
                                        let v2900 : string = ".devcontainer"
                                        let v2901 : string = method20(v2899, v2900)
                                        let v2902 : US12 = method23(v2901, v2898)
                                        let v2911 : US3 =
                                            match v2902 with
                                            | US12_1(v2905) -> (* Error *)
                                                let v2906 : US0 = US0_3
                                                let v2907 : (unit -> string) = closure9()
                                                let v2908 : (unit -> string) = closure10(v2905)
                                                method28(v2906, v2907, v2908)
                                                US3_1
                                            | US12_0(v2903) -> (* Ok *)
                                                US3_0(v2903)
                                        let v2927 : US3 =
                                            match v2911 with
                                            | US3_1 -> (* None *)
                                                let v2914 : string = method30()
                                                let v2915 : string = method20(v2899, v2900)
                                                let v2916 : US12 = method23(v2915, v2914)
                                                match v2916 with
                                                | US12_1(v2919) -> (* Error *)
                                                    let v2920 : US0 = US0_3
                                                    let v2921 : (unit -> string) = closure9()
                                                    let v2922 : (unit -> string) = closure10(v2919)
                                                    method28(v2920, v2921, v2922)
                                                    US3_1
                                                | US12_0(v2917) -> (* Ok *)
                                                    US3_0(v2917)
                                            | US3_0(v2912) -> (* Some *)
                                                US3_0(v2912)
                                        let v2931 : string =
                                            match v2927 with
                                            | US3_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US3_0(v2928) -> (* Some *)
                                                v2928
                                        let v2932 : string = method20(v2931, v2899)
                                        let v2933 : string = method30()
                                        let v2936 : (unit -> string) = v2933.ToLower
                                        let v2937 : string = v2936 ()
                                        let v2946 : (unit -> string) = v2932.ToLower
                                        let v2947 : string = v2946 ()
                                        let v2954 : bool = v2937.StartsWith v2947 
                                        let v2957 : US12 =
                                            if v2954 then
                                                US12_1(v2947)
                                            else
                                                US12_0(v2947)
                                        let v2963 : Result<string, string> =
                                            match v2957 with
                                            | US12_1(v2960) -> (* Error *)
                                                let v2961 : Result<string, string> = Error v2960 
                                                v2961
                                            | US12_0(v2958) -> (* Ok *)
                                                let v2959 : Result<string, string> = Ok v2958 
                                                v2959
                                        let v2964 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                        let v2965 : bool = Fable.Core.RustInterop.emitRustExpr v2963 v2964 
                                        let v2966 : string = "x"
                                        let v2967 : string = Fable.Core.RustInterop.emitRustExpr () v2966 
                                        let v2968 : string = "true; $0 })"
                                        let v2969 : bool = Fable.Core.RustInterop.emitRustExpr v2967 v2968 
                                        let v2970 : string = "_result"
                                        let v2971 : string = Fable.Core.RustInterop.emitRustExpr () v2970 
                                        let v2972 : string = "target/spiral_builder"
                                        let v2973 : string = method20(v2971, v2972)
                                        let v2974 : string = "spiral_builder"
                                        let v2975 : string = method20(v2973, v2974)
                                        let v2976 : string = "packages"
                                        let v2977 : string = method20(v2975, v2976)
                                        let v2984 : string = "TypeScript"
                                        let v2985 : string = method20(v2977, v2984)
                                        let v2986 : string = method20(v2985, v2897)
                                        let v2987 : System.IDisposable = method35(v2986)
                                        let v2988 : string = $"{v2974}.fs"
                                        let v2989 : string = method20(v2986, v2988)
                                        let v2990 : string = method135(v2989)
                                        method32(v2990, v2872)
                                        let v2991 : string list = []
                                        let v2994 : string seq = seq { for i = 0 to v2991.Length - 1 do yield v2991.[i] }
                                        let v3003 : (string -> (string seq -> string)) = String.concat
                                        let v3004 : string = "\\n        "
                                        let v3005 : (string seq -> string) = v3003 v3004
                                        let v3006 : string = v3005 v2994
                                        let v3013 : string = "Fable.Core"
                                        let v3014 : string = $"<PackageReference Include=\"{v3013}\" Version=\"*\" />"
                                        let v3015 : string list = []
                                        let v3018 : string list = v3014 :: v3015 
                                        let v3027 : string seq = seq { for i = 0 to v3018.Length - 1 do yield v3018.[i] }
                                        let v3036 : (string -> (string seq -> string)) = String.concat
                                        let v3037 : (string seq -> string) = v3036 v3004
                                        let v3038 : string = v3037 v3027
                                        let v3045 : string = $"{v2974}.fsproj"
                                        let v3046 : string = method20(v2986, v3045)
                                        let v3047 : string = method135(v3046)
                                        let v3048 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                        let v3049 : string = $"<PropertyGroup>"
                                        let v3050 : string = "\n"
                                        let v3051 : string = v3048 + v3050 
                                        let v3052 : string = v3051 + v3049 
                                        let v3053 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                        let v3054 : string = v3052 + v3050 
                                        let v3055 : string = v3054 + v3053 
                                        let v3056 : string = $"    <LangVersion>preview</LangVersion>"
                                        let v3057 : string = v3055 + v3050 
                                        let v3058 : string = v3057 + v3056 
                                        let v3059 : string = $"    <RollForward>Major</RollForward>"
                                        let v3060 : string = v3058 + v3050 
                                        let v3061 : string = v3060 + v3059 
                                        let v3062 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                        let v3063 : string = v3061 + v3050 
                                        let v3064 : string = v3063 + v3062 
                                        let v3065 : string = $"    <PublishAot>false</PublishAot>"
                                        let v3066 : string = v3064 + v3050 
                                        let v3067 : string = v3066 + v3065 
                                        let v3068 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                        let v3069 : string = v3067 + v3050 
                                        let v3070 : string = v3069 + v3068 
                                        let v3071 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                        let v3072 : string = v3070 + v3050 
                                        let v3073 : string = v3072 + v3071 
                                        let v3074 : string = $"    <SelfContained>true</SelfContained>"
                                        let v3075 : string = v3073 + v3050 
                                        let v3076 : string = v3075 + v3074 
                                        let v3077 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                        let v3078 : string = v3076 + v3050 
                                        let v3079 : string = v3078 + v3077 
                                        let v3080 : string = $"    <OutputType>Exe</OutputType>"
                                        let v3081 : string = v3079 + v3050 
                                        let v3082 : string = v3081 + v3080 
                                        let v3083 : string = $"</PropertyGroup>"
                                        let v3084 : string = v3082 + v3050 
                                        let v3085 : string = v3084 + v3083 
                                        let v3086 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                        let v3087 : string = v3085 + v3050 
                                        let v3088 : string = v3087 + v3086 
                                        let v3089 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                        let v3090 : string = v3088 + v3050 
                                        let v3091 : string = v3090 + v3089 
                                        let v3092 : string = $"</PropertyGroup>"
                                        let v3093 : string = v3091 + v3050 
                                        let v3094 : string = v3093 + v3092 
                                        let v3095 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                        let v3096 : string = v3094 + v3050 
                                        let v3097 : string = v3096 + v3095 
                                        let v3098 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                        let v3099 : string = v3097 + v3050 
                                        let v3100 : string = v3099 + v3098 
                                        let v3101 : string = $"</PropertyGroup>"
                                        let v3102 : string = v3100 + v3050 
                                        let v3103 : string = v3102 + v3101 
                                        let v3104 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                        let v3105 : string = v3103 + v3050 
                                        let v3106 : string = v3105 + v3104 
                                        let v3107 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                        let v3108 : string = v3106 + v3050 
                                        let v3109 : string = v3108 + v3107 
                                        let v3110 : string = $"</PropertyGroup>"
                                        let v3111 : string = v3109 + v3050 
                                        let v3112 : string = v3111 + v3110 
                                        let v3113 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                        let v3114 : string = v3112 + v3050 
                                        let v3115 : string = v3114 + v3113 
                                        let v3116 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                        let v3117 : string = v3115 + v3050 
                                        let v3118 : string = v3117 + v3116 
                                        let v3119 : string = $"</PropertyGroup>"
                                        let v3120 : string = v3118 + v3050 
                                        let v3121 : string = v3120 + v3119 
                                        let v3122 : string = $"<ItemGroup>"
                                        let v3123 : string = v3121 + v3050 
                                        let v3124 : string = v3123 + v3122 
                                        let v3125 : string = $"    {v3006}"
                                        let v3126 : string = v3124 + v3050 
                                        let v3127 : string = v3126 + v3125 
                                        let v3128 : string = $"    <Compile Include=\"{v2990}\" />"
                                        let v3129 : string = v3127 + v3050 
                                        let v3130 : string = v3129 + v3128 
                                        let v3131 : string = $"</ItemGroup>"
                                        let v3132 : string = v3130 + v3050 
                                        let v3133 : string = v3132 + v3131 
                                        let v3134 : string = $"<ItemGroup>"
                                        let v3135 : string = v3133 + v3050 
                                        let v3136 : string = v3135 + v3134 
                                        let v3137 : string = $"    {v3038}"
                                        let v3138 : string = v3136 + v3050 
                                        let v3139 : string = v3138 + v3137 
                                        let v3140 : string = $"</ItemGroup>"
                                        let v3141 : string = v3139 + v3050 
                                        let v3142 : string = v3141 + v3140 
                                        let v3143 : string = $"</Project>"
                                        let v3144 : string = v3142 + v3050 
                                        let v3145 : string = v3144 + v3143 
                                        method32(v3047, v3145)
                                        let v3146 : string = "lib/typescript/fable/fable_modules"
                                        let v3147 : string = method20(v2971, v3146)
                                        let v3148 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v3149 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v3147 v3148 
                                        let v3150 : string = "async_walkdir::WalkDir::filter($0, |x| $1(x))"
                                        let v3151 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure120()
                                        let v3152 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v3149, v3151) v3150 
                                        let v3153 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method188()
                                        let v3154 : string = "tokio_stream::StreamExt::collect(tokio_stream::StreamExt::filter_map(v3152, |x| v3153(x))).await"
                                        let v3155 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v3154 
                                        let v3156 : string = "rayon::iter::IntoParallelIterator::into_par_iter(v3155)"
                                        let v3157 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v3156 
                                        let v3158 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v3159 : (struct (string * string) -> struct (string * string)) = closure129()
                                        let v3160 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v3157, v3159) v3158 
                                        let v3161 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v3162 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3160 v3161 
                                        let v3163 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v3164 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v3162 v3163 
                                        let v3165 : struct (string * string) option = v3164 |> Array.tryItem 0 
                                        let v3168 : US40 option = None
                                        let _v3168 = ref v3168 
                                        match v3165 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let struct (v3169 : string, v3170 : string) = x
                                        let v3171 : US40 = US40_0(v3169, v3170)
                                        v3171 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v3168.Value <- x
                                        let v3172 : US40 option = _v3168.Value 
                                        let v3196 : US40 = US40_1
                                        let v3197 : US40 = v3172 |> Option.defaultValue v3196 
                                        let v3205 : US0 = US0_1
                                        let v3206 : (unit -> string) = closure130()
                                        let v3207 : (unit -> std_string_String) = closure131(v3197)
                                        method190(v3205, v3206, v3207)
                                        match v3197 with
                                        | US40_1 -> (* None *)
                                            ()
                                        | US40_0(v3208, v3209) -> (* Some *)
                                            let v3210 : string = $"fable-library-{v2889}.{v3209}"
                                            let v3211 : string = method20(v3147, v3210)
                                            let v3212 : string = $"fable_modules/fable-library-{v2889}.{v3209}"
                                            let v3213 : string = method20(v2986, v3212)
                                            method159(v3211, v3213)
                                        let struct (v3214 : int32, v3215 : string) = method160(v2986, v2889, v3047, v2957)
                                        let v3218 : bool = v3214 <> 0 
                                        let struct (v3661 : US3, v3662 : US3, v3663 : US3) =
                                            if v3218 then
                                                let v3225 : US0 = US0_4
                                                let v3226 : (unit -> string) = closure133()
                                                let v3227 : (unit -> struct (int32 * string)) = closure134(v3215, v3214)
                                                method166(v3225, v3226, v3227)
                                                let v3228 : US3 = US3_0(v2889)
                                                let v3229 : US3 = US3_1
                                                let v3230 : US3 = US3_0(v3215)
                                                struct (v3228, v3229, v3230)
                                            else
                                                let v3231 : string = "true; let _result : Vec<_> = v2763.into_iter().map(|x| { //"
                                                let v3232 : bool = Fable.Core.RustInterop.emitRustExpr () v3231 
                                                let v3233 : string = "x"
                                                let v3234 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3233 
                                                let v3235 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3236 : string = Fable.Core.RustInterop.emitRustExpr v3234 v3235 
                                                let v3239 : string = "="
                                                let v3240 : bool = v3236.Contains v3239 
                                                let v3248 : string =
                                                    if v3240 then
                                                        v3236
                                                    else
                                                        let v3247 : string = $"\"{v3236}\":\"*\""
                                                        v3247
                                                let v3249 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v3250 : bool = Fable.Core.RustInterop.emitRustExpr v3248 v3249 
                                                let v3251 : string = "_result"
                                                let v3252 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v3251 
                                                let v3253 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                let v3254 : (string []) = Fable.Core.RustInterop.emitRustExpr v3252 v3253 
                                                let v3257 : string seq = seq { for i = 0 to v3254.Length - 1 do yield v3254.[i] }
                                                let v3266 : (string -> (string seq -> string)) = String.concat
                                                let v3267 : string = ",\n"
                                                let v3268 : (string seq -> string) = v3266 v3267
                                                let v3269 : string = v3268 v3257
                                                let v3276 : string = $"{{"
                                                let v3277 : string = $"  \"name\": \"spiral_builder_{v2897}\","
                                                let v3278 : string = v3276 + v3277 
                                                let v3279 : string = $"  \"dependencies\": {{"
                                                let v3280 : string = v3278 + v3279 
                                                let v3281 : string = v3280 + v3269 
                                                let v3282 : string = $"  }},"
                                                let v3283 : string = v3281 + v3282 
                                                let v3284 : string = $"    \"devDependencies\": {{"
                                                let v3285 : string = v3283 + v3284 
                                                let v3286 : string = $"  }},"
                                                let v3287 : string = v3285 + v3286 
                                                let v3288 : string = $"}}"
                                                let v3289 : string = v3287 + v3288 
                                                let v3290 : string = "package.json"
                                                let v3291 : string = method20(v2986, v3290)
                                                let v3292 : string = "../.."
                                                let v3293 : string = method20(v2986, v3292)
                                                let v3294 : string = method20(v3293, v3290)
                                                method32(v3291, v3289)
                                                let v3295 : string = ""
                                                method32(v3294, v3295)
                                                let v3296 : string = $"{v2974}.{v2889}"
                                                let v3297 : string = method20(v2986, v3296)
                                                let v3298 : US0 = US0_1
                                                let v3299 : (unit -> string) = closure135()
                                                let v3300 : (unit -> string) = closure136(v3297)
                                                method192(v3298, v3299, v3300)
                                                let v3303 : bool = true
                                                let mutable _v3303 : string option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3306 : bool = true
                                                let mutable _v3306 : Vec<uint8> option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3307 : string = "std::fs::read(&*$0).unwrap()"
                                                let v3308 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3297 v3307 
                                                v3308 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3311 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3311 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3320 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3320 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3329 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3329 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3338 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3338 
                                                #endif
#else
                                                let v3345 : (uint8 []) = v3297 |> System.IO.File.ReadAllBytes
                                                let v3346 : string = "$0.to_vec()"
                                                let v3347 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3345 v3346 
                                                v3347 
                                                #endif
                                                |> fun x -> _v3306 <- Some x
                                                let v3348 : Vec<uint8> = match _v3306 with Some x -> x | None -> failwith "base.run_target / _v3306=None"
                                                let v3363 : Vec<uint8> = method19(v3348)
                                                let v3364 : string = "std::string::String::from_utf8($0)"
                                                let v3365 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3363 v3364 
                                                let v3366 : string = "$0.unwrap()"
                                                let v3367 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3365 v3366 
                                                let v3368 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3369 : string = Fable.Core.RustInterop.emitRustExpr v3367 v3368 
                                                v3369 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3372 : string = null |> unbox<string>
                                                v3372 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3381 : string = null |> unbox<string>
                                                v3381 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3390 : string = null |> unbox<string>
                                                v3390 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3399 : string = null |> unbox<string>
                                                v3399 
                                                #endif
#else
                                                let v3406 : string = v3297 |> System.IO.File.ReadAllText
                                                v3406 
                                                #endif
                                                |> fun x -> _v3303 <- Some x
                                                let v3407 : string = match _v3303 with Some x -> x | None -> failwith "base.run_target / _v3303=None"
                                                let v3424 : string = "// spiral_builder.process_typescript"
                                                let v3425 : bool = v3407.Contains v3424 
                                                let v3504 : string =
                                                    if v3425 then
                                                        v3407
                                                    else
                                                        let v3432 : string = $"\"./fable_modules/fable-library-ts.{v3197}/"
                                                        let v3433 : string = $"\"{v2971}/lib/typescript/fable/fable_modules/fable-library-ts.{v3197}/"
                                                        let v3434 : string = v3407.Replace (v3432, v3433)
                                                        let v3435 : string = method172()
                                                        let v3438 : bool = true
                                                        let mutable _v3438 : string option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3439 : string = method137(v3434)
                                                        let v3440 : string = $"regex::Regex::new(&$0)"
                                                        let v3441 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v3442 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v3441 v3440 
                                                        let v3443 : string = "$0.unwrap()"
                                                        let v3444 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v3442 v3443 
                                                        let v3445 : string = $"$0.replace_all(&$1, &*$2)"
                                                        let v3446 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v3444, v3439, v3435) v3445 
                                                        let v3447 : string = "String::from($0)"
                                                        let v3448 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3446 v3447 
                                                        let v3449 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v3450 : string = Fable.Core.RustInterop.emitRustExpr v3448 v3449 
                                                        v3450 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3453 : string = null |> unbox<string>
                                                        v3453 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3462 : string = null |> unbox<string>
                                                        v3462 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3471 : string = null |> unbox<string>
                                                        v3471 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3480 : string = null |> unbox<string>
                                                        v3480 
                                                        #endif
#else
                                                        let v3487 : string = method173()
                                                        let v3488 : string = System.Text.RegularExpressions.Regex.Replace (v3434, v3487, v3435)
                                                        v3488 
                                                        #endif
                                                        |> fun x -> _v3438 <- Some x
                                                        let v3489 : string = match _v3438 with Some x -> x | None -> failwith "base.run_target / _v3438=None"
                                                        v3489
                                                let v3505 : bool = v3425 = false
                                                if v3505 then
                                                    let v3506 : string = $"{v3504}\n\n{v3424}\n"
                                                    method32(v3297, v3506)
                                                let v3507 : string = $"bun run \"{v3297}\""
                                                let v3508 : string = "PATH"
                                                let v3509 : string = method2(v3508)
                                                let v3510 : bool = v3509 = ""
                                                let v3548 : US3 =
                                                    if v3510 then
                                                        US3_1
                                                    else
                                                        let v3514 : bool = true
                                                        let mutable _v3514 : bool option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3515 : string = "cfg!(windows)"
                                                        let v3516 : bool = Fable.Core.RustInterop.emitRustExpr () v3515 
                                                        v3516 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3517 : string = "cfg!(windows)"
                                                        let v3518 : bool = Fable.Core.RustInterop.emitRustExpr () v3517 
                                                        v3518 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3519 : string = "cfg!(windows)"
                                                        let v3520 : bool = Fable.Core.RustInterop.emitRustExpr () v3519 
                                                        v3520 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3521 : US10 = US10_0
                                                        let v3522 : US11 = US11_3(v3521)
                                                        let v3523 : string = $"platform.is_windows / target: {v3522}"
                                                        let v3524 : bool = failwith<bool> v3523
                                                        v3524 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3525 : US10 = US10_0
                                                        let v3526 : US11 = US11_4(v3525)
                                                        let v3527 : string = $"platform.is_windows / target: {v3526}"
                                                        let v3528 : bool = failwith<bool> v3527
                                                        v3528 
                                                        #endif
#else
                                                        let v3529 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v3530 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v3531 : bool = v3530 v3529
                                                        v3531 
                                                        #endif
                                                        |> fun x -> _v3514 <- Some x
                                                        let v3532 : bool = match _v3514 with Some x -> x | None -> failwith "base.run_target / _v3514=None"
                                                        let v3544 : string =
                                                            if v3532 then
                                                                let v3542 : string = ";"
                                                                v3542
                                                            else
                                                                let v3543 : string = ":"
                                                                v3543
                                                        let v3545 : string = "~/.bun/bin"
                                                        let v3546 : string = $"{v3545}{v3544}{v3509}"
                                                        US3_0(v3546)
                                                let v3554 : UH5 =
                                                    match v3548 with
                                                    | US3_1 -> (* None *)
                                                        UH5_0
                                                    | US3_0(v3549) -> (* Some *)
                                                        let v3550 : UH5 = UH5_0
                                                        UH5_1(v3508, v3549, v3550)
                                                let v3555 : string = "TRACE_LEVEL"
                                                let v3556 : string = "Verbose"
                                                let v3557 : UH5 = UH5_0
                                                let v3558 : UH5 = UH5_1(v3555, v3556, v3557)
                                                let v3559 : UH5 = method194(v3554, v3558)
                                                let v3560 : struct (string * string) list = []
                                                let v3561 : struct (string * string) list = method195(v3559, v3560)
                                                let v3564 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v3565 : (struct (string * string) []) = v3564 v3561
                                                let v3572 : System.Threading.CancellationToken option = None
                                                let v3573 : (struct (string * string) []) = [||]
                                                let v3574 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v3575 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v3576 : string option = None
                                                let v3582 : Result<string, string> =
                                                    match v2957 with
                                                    | US12_1(v3579) -> (* Error *)
                                                        let v3580 : Result<string, string> = Error v3579 
                                                        v3580
                                                    | US12_0(v3577) -> (* Ok *)
                                                        let v3578 : Result<string, string> = Ok v3577 
                                                        v3578
                                                let v3583 : string = "v3582.ok()"
                                                let v3584 : string option = Fable.Core.RustInterop.emitRustExpr () v3583 
                                                let v3585 : bool = true
                                                let struct (v3586 : int32, v3587 : string) = method56(v3507, v3572, v3565, v3574, v3575, v3585, v3584)
                                                let v3588 : int32 = v3565.Length
                                                let v3589 : (string []) = Array.zeroCreate<string> (v3588)
                                                let v3590 : Mut5 = {l0 = 0} : Mut5
                                                while method59(v3588, v3590) do
                                                    let v3592 : int32 = v3590.l0
                                                    let struct (v3593 : string, v3594 : string) = v3565.[int v3592]
                                                    let v3595 : string = $"$env:{v3593}=''{v3594}''"
                                                    v3589.[int v3592] <- v3595
                                                    let v3596 : int32 = v3592 + 1
                                                    v3590.l0 <- v3596
                                                    ()
                                                let v3599 : string seq = v3589 |> Seq.ofArray
                                                let v3608 : (string -> (string seq -> string)) = String.concat
                                                let v3609 : string = ";"
                                                let v3610 : (string seq -> string) = v3608 v3609
                                                let v3611 : string = v3610 v3599
                                                let v3618 : string = $"pwsh -c '{v3611}; {v3507}'"
                                                let v3619 : bool = v3586 = 0
                                                let struct (v3658 : US3, v3659 : US3, v3660 : US3) =
                                                    if v3619 then
                                                        let v3622 : (string -> US3) = closure75()
                                                        let v3623 : (unit -> string) = closure138(v3587)
                                                        let v3624 : (exn -> US3) = closure139(v3297, v3587, v3618)
                                                        let v3625 : US3 = US3_1
                                                        let result = ref v3625
                                                        try
                                                            result.Value <- v3623 () |> v3622 
                                                        with ex ->
                                                            result.Value <- v3624 ex 
                                                        let v3626 : US3 = result.Value
                                                        let v3646 : string option =
                                                            match v3626 with
                                                            | US3_1 -> (* None *)
                                                                let v3644 : string option = None
                                                                v3644
                                                            | US3_0(v3634) -> (* Some *)
                                                                let v3637 : string option = Some v3634 
                                                                v3637
                                                        let v3647 : string = "$0.unwrap()"
                                                        let v3648 : string = Fable.Core.RustInterop.emitRustExpr v3646 v3647 
                                                        let v3649 : US3 = US3_0(v2889)
                                                        let v3650 : US3 = US3_0(v3504)
                                                        let v3651 : US3 = US3_0(v3648)
                                                        struct (v3649, v3650, v3651)
                                                    else
                                                        let v3652 : US0 = US0_4
                                                        let v3653 : (unit -> string) = closure143()
                                                        let v3654 : (unit -> struct (int32 * string * string * string)) = closure144(v3297, v3587, v3586, v3618)
                                                        method126(v3652, v3653, v3654)
                                                        let v3655 : US3 = US3_0(v2889)
                                                        let v3656 : US3 = US3_1
                                                        let v3657 : US3 = US3_1
                                                        struct (v3655, v3656, v3657)
                                                struct (v3658, v3659, v3660)
                                        struct (v3661, v3662, v3663)
                                    else
                                        let v3664 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3665 : string = Fable.Core.RustInterop.emitRustExpr v45 v3664 
                                        let v3667 : bool = v3665 = "python"
                                        let struct (v4553 : US3, v4554 : US3, v4555 : US3) =
                                            if v3667 then
                                                let v3668 : string = method128()
                                                let v3669 : string = "&*$0"
                                                let v3670 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3668 v3669 
                                                let v3671 : string = "clap::ArgMatches::get_one(&$0, v3670).cloned()"
                                                let v3672 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v3671 
                                                let v3675 : US5 option = None
                                                let _v3675 = ref v3675 
                                                match v3672 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v3676 : std_string_String = x
                                                let v3677 : US5 = US5_0(v3676)
                                                v3677 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v3675.Value <- x
                                                let v3678 : US5 option = _v3675.Value 
                                                let v3701 : US5 = US5_1
                                                let v3702 : US5 = v3678 |> Option.defaultValue v3701 
                                                let v3713 : std_string_String =
                                                    match v3702 with
                                                    | US5_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US5_0(v3710) -> (* Some *)
                                                        v3710
                                                let v3714 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3715 : string = Fable.Core.RustInterop.emitRustExpr v3713 v3714 
                                                let v3716 : string = method18()
                                                let v3717 : string = "&*$0"
                                                let v3718 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3716 v3717 
                                                let v3719 : string = "clap::ArgMatches::get_many(&$0, v3718).map(|x| x.cloned().into_iter().collect())"
                                                let v3720 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v46 v3719 
                                                let v3723 : US9 option = None
                                                let _v3723 = ref v3723 
                                                match v3720 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v3724 : Vec<std_string_String> = x
                                                let v3725 : US9 = US9_0(v3724)
                                                v3725 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v3723.Value <- x
                                                let v3726 : US9 option = _v3723.Value 
                                                let v3749 : US9 = US9_1
                                                let v3750 : US9 = v3726 |> Option.defaultValue v3749 
                                                let v3758 : (std_string_String []) = [||]
                                                let v3759 : string = "$0.to_vec()"
                                                let v3760 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3758 v3759 
                                                let v3763 : Vec<std_string_String> =
                                                    match v3750 with
                                                    | US9_1 -> (* None *)
                                                        v3760
                                                    | US9_0(v3761) -> (* Some *)
                                                        v3761
                                                let v3765 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v3768 : bool = true
                                                let mutable _v3768 : string option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3771 : bool = true
                                                let mutable _v3771 : Vec<uint8> option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3772 : string = "std::fs::read(&*$0).unwrap()"
                                                let v3773 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3715 v3772 
                                                v3773 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3776 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3776 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3785 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3785 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3794 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3794 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3803 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3803 
                                                #endif
#else
                                                let v3810 : (uint8 []) = v3715 |> System.IO.File.ReadAllBytes
                                                let v3811 : string = "$0.to_vec()"
                                                let v3812 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3810 v3811 
                                                v3812 
                                                #endif
                                                |> fun x -> _v3771 <- Some x
                                                let v3813 : Vec<uint8> = match _v3771 with Some x -> x | None -> failwith "base.run_target / _v3771=None"
                                                let v3828 : Vec<uint8> = method19(v3813)
                                                let v3829 : string = "std::string::String::from_utf8($0)"
                                                let v3830 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3828 v3829 
                                                let v3831 : string = "$0.unwrap()"
                                                let v3832 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3830 v3831 
                                                let v3833 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3834 : string = Fable.Core.RustInterop.emitRustExpr v3832 v3833 
                                                v3834 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3837 : string = null |> unbox<string>
                                                v3837 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3846 : string = null |> unbox<string>
                                                v3846 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3855 : string = null |> unbox<string>
                                                v3855 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3864 : string = null |> unbox<string>
                                                v3864 
                                                #endif
#else
                                                let v3871 : string = v3715 |> System.IO.File.ReadAllText
                                                v3871 
                                                #endif
                                                |> fun x -> _v3768 <- Some x
                                                let v3872 : string = match _v3768 with Some x -> x | None -> failwith "base.run_target / _v3768=None"
                                                let v3889 : string = "py"
                                                let v3890 : string = $"%A{struct (v3889, v3872)}"
                                                let v3897 : string = method153(v3890)
                                                let v3898 : string = __SOURCE_DIRECTORY__
                                                let v3899 : string = "polyglot"
                                                let v3900 : string = ".devcontainer"
                                                let v3901 : string = method20(v3899, v3900)
                                                let v3902 : US12 = method23(v3901, v3898)
                                                let v3911 : US3 =
                                                    match v3902 with
                                                    | US12_1(v3905) -> (* Error *)
                                                        let v3906 : US0 = US0_3
                                                        let v3907 : (unit -> string) = closure9()
                                                        let v3908 : (unit -> string) = closure10(v3905)
                                                        method28(v3906, v3907, v3908)
                                                        US3_1
                                                    | US12_0(v3903) -> (* Ok *)
                                                        US3_0(v3903)
                                                let v3927 : US3 =
                                                    match v3911 with
                                                    | US3_1 -> (* None *)
                                                        let v3914 : string = method30()
                                                        let v3915 : string = method20(v3899, v3900)
                                                        let v3916 : US12 = method23(v3915, v3914)
                                                        match v3916 with
                                                        | US12_1(v3919) -> (* Error *)
                                                            let v3920 : US0 = US0_3
                                                            let v3921 : (unit -> string) = closure9()
                                                            let v3922 : (unit -> string) = closure10(v3919)
                                                            method28(v3920, v3921, v3922)
                                                            US3_1
                                                        | US12_0(v3917) -> (* Ok *)
                                                            US3_0(v3917)
                                                    | US3_0(v3912) -> (* Some *)
                                                        US3_0(v3912)
                                                let v3931 : string =
                                                    match v3927 with
                                                    | US3_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US3_0(v3928) -> (* Some *)
                                                        v3928
                                                let v3932 : string = method20(v3931, v3899)
                                                let v3933 : string = method30()
                                                let v3936 : (unit -> string) = v3933.ToLower
                                                let v3937 : string = v3936 ()
                                                let v3946 : (unit -> string) = v3932.ToLower
                                                let v3947 : string = v3946 ()
                                                let v3954 : bool = v3937.StartsWith v3947 
                                                let v3957 : US12 =
                                                    if v3954 then
                                                        US12_1(v3947)
                                                    else
                                                        US12_0(v3947)
                                                let v3963 : Result<string, string> =
                                                    match v3957 with
                                                    | US12_1(v3960) -> (* Error *)
                                                        let v3961 : Result<string, string> = Error v3960 
                                                        v3961
                                                    | US12_0(v3958) -> (* Ok *)
                                                        let v3959 : Result<string, string> = Ok v3958 
                                                        v3959
                                                let v3964 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                                let v3965 : bool = Fable.Core.RustInterop.emitRustExpr v3963 v3964 
                                                let v3966 : string = "x"
                                                let v3967 : string = Fable.Core.RustInterop.emitRustExpr () v3966 
                                                let v3968 : string = "true; $0 })"
                                                let v3969 : bool = Fable.Core.RustInterop.emitRustExpr v3967 v3968 
                                                let v3970 : string = "_result"
                                                let v3971 : string = Fable.Core.RustInterop.emitRustExpr () v3970 
                                                let v3972 : string = "target/spiral_builder"
                                                let v3973 : string = method20(v3971, v3972)
                                                let v3974 : string = "spiral_builder"
                                                let v3975 : string = method20(v3973, v3974)
                                                let v3976 : string = "packages"
                                                let v3977 : string = method20(v3975, v3976)
                                                let v3987 : string = "Python"
                                                let v3988 : string = method20(v3977, v3987)
                                                let v3989 : string = method20(v3988, v3897)
                                                let v3990 : System.IDisposable = method35(v3989)
                                                let v3991 : string = $"{v3974}.fs"
                                                let v3992 : string = method20(v3989, v3991)
                                                let v3993 : string = method135(v3992)
                                                method32(v3993, v3872)
                                                let v3994 : string list = []
                                                let v3997 : string seq = seq { for i = 0 to v3994.Length - 1 do yield v3994.[i] }
                                                let v4006 : (string -> (string seq -> string)) = String.concat
                                                let v4007 : string = "\\n        "
                                                let v4008 : (string seq -> string) = v4006 v4007
                                                let v4009 : string = v4008 v3997
                                                let v4016 : string = "Fable.Core"
                                                let v4017 : string = $"<PackageReference Include=\"{v4016}\" Version=\"*\" />"
                                                let v4018 : string list = []
                                                let v4021 : string list = v4017 :: v4018 
                                                let v4030 : string seq = seq { for i = 0 to v4021.Length - 1 do yield v4021.[i] }
                                                let v4039 : (string -> (string seq -> string)) = String.concat
                                                let v4040 : (string seq -> string) = v4039 v4007
                                                let v4041 : string = v4040 v4030
                                                let v4048 : string = $"{v3974}.fsproj"
                                                let v4049 : string = method20(v3989, v4048)
                                                let v4050 : string = method135(v4049)
                                                let v4051 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                                let v4052 : string = $"<PropertyGroup>"
                                                let v4053 : string = "\n"
                                                let v4054 : string = v4051 + v4053 
                                                let v4055 : string = v4054 + v4052 
                                                let v4056 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                                let v4057 : string = v4055 + v4053 
                                                let v4058 : string = v4057 + v4056 
                                                let v4059 : string = $"    <LangVersion>preview</LangVersion>"
                                                let v4060 : string = v4058 + v4053 
                                                let v4061 : string = v4060 + v4059 
                                                let v4062 : string = $"    <RollForward>Major</RollForward>"
                                                let v4063 : string = v4061 + v4053 
                                                let v4064 : string = v4063 + v4062 
                                                let v4065 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                                let v4066 : string = v4064 + v4053 
                                                let v4067 : string = v4066 + v4065 
                                                let v4068 : string = $"    <PublishAot>false</PublishAot>"
                                                let v4069 : string = v4067 + v4053 
                                                let v4070 : string = v4069 + v4068 
                                                let v4071 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                                let v4072 : string = v4070 + v4053 
                                                let v4073 : string = v4072 + v4071 
                                                let v4074 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                                let v4075 : string = v4073 + v4053 
                                                let v4076 : string = v4075 + v4074 
                                                let v4077 : string = $"    <SelfContained>true</SelfContained>"
                                                let v4078 : string = v4076 + v4053 
                                                let v4079 : string = v4078 + v4077 
                                                let v4080 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                                let v4081 : string = v4079 + v4053 
                                                let v4082 : string = v4081 + v4080 
                                                let v4083 : string = $"    <OutputType>Exe</OutputType>"
                                                let v4084 : string = v4082 + v4053 
                                                let v4085 : string = v4084 + v4083 
                                                let v4086 : string = $"</PropertyGroup>"
                                                let v4087 : string = v4085 + v4053 
                                                let v4088 : string = v4087 + v4086 
                                                let v4089 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                                let v4090 : string = v4088 + v4053 
                                                let v4091 : string = v4090 + v4089 
                                                let v4092 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                                let v4093 : string = v4091 + v4053 
                                                let v4094 : string = v4093 + v4092 
                                                let v4095 : string = $"</PropertyGroup>"
                                                let v4096 : string = v4094 + v4053 
                                                let v4097 : string = v4096 + v4095 
                                                let v4098 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                                let v4099 : string = v4097 + v4053 
                                                let v4100 : string = v4099 + v4098 
                                                let v4101 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                                let v4102 : string = v4100 + v4053 
                                                let v4103 : string = v4102 + v4101 
                                                let v4104 : string = $"</PropertyGroup>"
                                                let v4105 : string = v4103 + v4053 
                                                let v4106 : string = v4105 + v4104 
                                                let v4107 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                                let v4108 : string = v4106 + v4053 
                                                let v4109 : string = v4108 + v4107 
                                                let v4110 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                                let v4111 : string = v4109 + v4053 
                                                let v4112 : string = v4111 + v4110 
                                                let v4113 : string = $"</PropertyGroup>"
                                                let v4114 : string = v4112 + v4053 
                                                let v4115 : string = v4114 + v4113 
                                                let v4116 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                                let v4117 : string = v4115 + v4053 
                                                let v4118 : string = v4117 + v4116 
                                                let v4119 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                                let v4120 : string = v4118 + v4053 
                                                let v4121 : string = v4120 + v4119 
                                                let v4122 : string = $"</PropertyGroup>"
                                                let v4123 : string = v4121 + v4053 
                                                let v4124 : string = v4123 + v4122 
                                                let v4125 : string = $"<ItemGroup>"
                                                let v4126 : string = v4124 + v4053 
                                                let v4127 : string = v4126 + v4125 
                                                let v4128 : string = $"    {v4009}"
                                                let v4129 : string = v4127 + v4053 
                                                let v4130 : string = v4129 + v4128 
                                                let v4131 : string = $"    <Compile Include=\"{v3993}\" />"
                                                let v4132 : string = v4130 + v4053 
                                                let v4133 : string = v4132 + v4131 
                                                let v4134 : string = $"</ItemGroup>"
                                                let v4135 : string = v4133 + v4053 
                                                let v4136 : string = v4135 + v4134 
                                                let v4137 : string = $"<ItemGroup>"
                                                let v4138 : string = v4136 + v4053 
                                                let v4139 : string = v4138 + v4137 
                                                let v4140 : string = $"    {v4041}"
                                                let v4141 : string = v4139 + v4053 
                                                let v4142 : string = v4141 + v4140 
                                                let v4143 : string = $"</ItemGroup>"
                                                let v4144 : string = v4142 + v4053 
                                                let v4145 : string = v4144 + v4143 
                                                let v4146 : string = $"</Project>"
                                                let v4147 : string = v4145 + v4053 
                                                let v4148 : string = v4147 + v4146 
                                                method32(v4050, v4148)
                                                let v4149 : string = "lib/python/fable/fable_modules"
                                                let v4150 : string = method20(v3971, v4149)
                                                let v4151 : string = $"fable_library"
                                                let v4152 : string = method20(v4150, v4151)
                                                let v4153 : string = $"fable_modules/fable_library"
                                                let v4154 : string = method20(v3989, v4153)
                                                method159(v4152, v4154)
                                                let struct (v4155 : int32, v4156 : string) = method160(v3989, v3889, v4050, v3957)
                                                let v4159 : bool = v4155 <> 0 
                                                let struct (v4544 : US3, v4545 : US3, v4546 : US3) =
                                                    if v4159 then
                                                        let v4166 : US0 = US0_4
                                                        let v4167 : (unit -> string) = closure145()
                                                        let v4168 : (unit -> struct (int32 * string)) = closure146(v4156, v4155)
                                                        method166(v4166, v4167, v4168)
                                                        let v4169 : US3 = US3_0(v3889)
                                                        let v4170 : US3 = US3_1
                                                        let v4171 : US3 = US3_0(v4156)
                                                        struct (v4169, v4170, v4171)
                                                    else
                                                        let v4172 : string = "true; let _result : Vec<_> = v3763.into_iter().map(|x| { //"
                                                        let v4173 : bool = Fable.Core.RustInterop.emitRustExpr () v4172 
                                                        let v4174 : string = "x"
                                                        let v4175 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4174 
                                                        let v4176 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4177 : string = Fable.Core.RustInterop.emitRustExpr v4175 v4176 
                                                        let v4180 : string = "="
                                                        let v4181 : bool = v4177.Contains v4180 
                                                        let v4189 : string =
                                                            if v4181 then
                                                                v4177
                                                            else
                                                                let v4188 : string = $"\"{v4177}\":\"*\""
                                                                v4188
                                                        let v4190 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v4191 : bool = Fable.Core.RustInterop.emitRustExpr v4189 v4190 
                                                        let v4192 : string = "_result"
                                                        let v4193 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4192 
                                                        let v4194 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                        let v4195 : (string []) = Fable.Core.RustInterop.emitRustExpr v4193 v4194 
                                                        let v4198 : string seq = seq { for i = 0 to v4195.Length - 1 do yield v4195.[i] }
                                                        let v4207 : (string -> (string seq -> string)) = String.concat
                                                        let v4208 : string = ",\n"
                                                        let v4209 : (string seq -> string) = v4207 v4208
                                                        let v4210 : string = v4209 v4198
                                                        let v4217 : string = $"{{"
                                                        let v4218 : string = $"  \"name\": \"spiral_builder_{v3897}\","
                                                        let v4219 : string = v4217 + v4218 
                                                        let v4220 : string = $"  \"dependencies\": {{"
                                                        let v4221 : string = v4219 + v4220 
                                                        let v4222 : string = v4221 + v4210 
                                                        let v4223 : string = $"  }},"
                                                        let v4224 : string = v4222 + v4223 
                                                        let v4225 : string = $"    \"devDependencies\": {{"
                                                        let v4226 : string = v4224 + v4225 
                                                        let v4227 : string = $"  }},"
                                                        let v4228 : string = v4226 + v4227 
                                                        let v4229 : string = $"}}"
                                                        let v4230 : string = v4228 + v4229 
                                                        let v4231 : string = "package.json"
                                                        let v4232 : string = method20(v3989, v4231)
                                                        let v4233 : string = "../.."
                                                        let v4234 : string = method20(v3989, v4233)
                                                        let v4235 : string = method20(v4234, v4231)
                                                        method32(v4232, v4230)
                                                        let v4236 : string = ""
                                                        method32(v4235, v4236)
                                                        let v4237 : string = $"{v3974}.{v3889}"
                                                        let v4238 : string = method20(v3989, v4237)
                                                        let v4239 : US0 = US0_1
                                                        let v4240 : (unit -> string) = closure147()
                                                        let v4241 : (unit -> string) = closure148(v4238)
                                                        method192(v4239, v4240, v4241)
                                                        let v4244 : bool = true
                                                        let mutable _v4244 : string option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4247 : bool = true
                                                        let mutable _v4247 : Vec<uint8> option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4248 : string = "std::fs::read(&*$0).unwrap()"
                                                        let v4249 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4238 v4248 
                                                        v4249 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4252 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v4252 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4261 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v4261 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4270 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v4270 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4279 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v4279 
                                                        #endif
#else
                                                        let v4286 : (uint8 []) = v4238 |> System.IO.File.ReadAllBytes
                                                        let v4287 : string = "$0.to_vec()"
                                                        let v4288 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4286 v4287 
                                                        v4288 
                                                        #endif
                                                        |> fun x -> _v4247 <- Some x
                                                        let v4289 : Vec<uint8> = match _v4247 with Some x -> x | None -> failwith "base.run_target / _v4247=None"
                                                        let v4304 : Vec<uint8> = method19(v4289)
                                                        let v4305 : string = "std::string::String::from_utf8($0)"
                                                        let v4306 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4304 v4305 
                                                        let v4307 : string = "$0.unwrap()"
                                                        let v4308 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4306 v4307 
                                                        let v4309 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4310 : string = Fable.Core.RustInterop.emitRustExpr v4308 v4309 
                                                        v4310 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4313 : string = null |> unbox<string>
                                                        v4313 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4322 : string = null |> unbox<string>
                                                        v4322 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4331 : string = null |> unbox<string>
                                                        v4331 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4340 : string = null |> unbox<string>
                                                        v4340 
                                                        #endif
#else
                                                        let v4347 : string = v4238 |> System.IO.File.ReadAllText
                                                        v4347 
                                                        #endif
                                                        |> fun x -> _v4244 <- Some x
                                                        let v4348 : string = match _v4244 with Some x -> x | None -> failwith "base.run_target / _v4244=None"
                                                        let v4365 : string = "# spiral_builder.process_python"
                                                        let v4366 : bool = v4348.Contains v4365 
                                                        let v4448 : string =
                                                            if v4366 then
                                                                v4348
                                                            else
                                                                let v4373 : string = "\";\".into()"
                                                                let v4374 : string = Fable.Core.RustInterop.emitRustExpr () v4373 
                                                                let v4375 : string = "),)"
                                                                let v4376 : string = v4375 + v4374 
                                                                let v4377 : string = "));"
                                                                let v4378 : string = v4348.Replace (v4376, v4377)
                                                                let v4379 : string = method172()
                                                                let v4382 : bool = true
                                                                let mutable _v4382 : string option = None 
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v4383 : string = method137(v4378)
                                                                let v4384 : string = $"regex::Regex::new(&$0)"
                                                                let v4385 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v4386 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v4385 v4384 
                                                                let v4387 : string = "$0.unwrap()"
                                                                let v4388 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v4386 v4387 
                                                                let v4389 : string = $"$0.replace_all(&$1, &*$2)"
                                                                let v4390 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v4388, v4383, v4379) v4389 
                                                                let v4391 : string = "String::from($0)"
                                                                let v4392 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4390 v4391 
                                                                let v4393 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v4394 : string = Fable.Core.RustInterop.emitRustExpr v4392 v4393 
                                                                v4394 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v4397 : string = null |> unbox<string>
                                                                v4397 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v4406 : string = null |> unbox<string>
                                                                v4406 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                let v4415 : string = null |> unbox<string>
                                                                v4415 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                let v4424 : string = null |> unbox<string>
                                                                v4424 
                                                                #endif
#else
                                                                let v4431 : string = method173()
                                                                let v4432 : string = System.Text.RegularExpressions.Regex.Replace (v4378, v4431, v4379)
                                                                v4432 
                                                                #endif
                                                                |> fun x -> _v4382 <- Some x
                                                                let v4433 : string = match _v4382 with Some x -> x | None -> failwith "base.run_target / _v4382=None"
                                                                v4433
                                                        let v4449 : bool = v4366 = false
                                                        if v4449 then
                                                            let v4450 : string = $"{v4448}\n\n{v4365}\n"
                                                            method32(v4238, v4450)
                                                        let v4451 : string = $"python \"{v4238}\""
                                                        let v4452 : string = "TRACE_LEVEL"
                                                        let v4453 : string = "Verbose"
                                                        let v4454 : (struct (string * string) []) = [|struct (v4452, v4453)|]
                                                        let v4455 : System.Threading.CancellationToken option = None
                                                        let v4456 : (struct (string * string) []) = [||]
                                                        let v4457 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v4458 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v4459 : string option = None
                                                        let v4465 : Result<string, string> =
                                                            match v3957 with
                                                            | US12_1(v4462) -> (* Error *)
                                                                let v4463 : Result<string, string> = Error v4462 
                                                                v4463
                                                            | US12_0(v4460) -> (* Ok *)
                                                                let v4461 : Result<string, string> = Ok v4460 
                                                                v4461
                                                        let v4466 : string = "v4465.ok()"
                                                        let v4467 : string option = Fable.Core.RustInterop.emitRustExpr () v4466 
                                                        let v4468 : bool = true
                                                        let struct (v4469 : int32, v4470 : string) = method56(v4451, v4455, v4454, v4457, v4458, v4468, v4467)
                                                        let v4471 : int32 = v4454.Length
                                                        let v4472 : (string []) = Array.zeroCreate<string> (v4471)
                                                        let v4473 : Mut5 = {l0 = 0} : Mut5
                                                        while method59(v4471, v4473) do
                                                            let v4475 : int32 = v4473.l0
                                                            let struct (v4476 : string, v4477 : string) = v4454.[int v4475]
                                                            let v4478 : string = $"$env:{v4476}=''{v4477}''"
                                                            v4472.[int v4475] <- v4478
                                                            let v4479 : int32 = v4475 + 1
                                                            v4473.l0 <- v4479
                                                            ()
                                                        let v4482 : string seq = v4472 |> Seq.ofArray
                                                        let v4491 : (string -> (string seq -> string)) = String.concat
                                                        let v4492 : string = ";"
                                                        let v4493 : (string seq -> string) = v4491 v4492
                                                        let v4494 : string = v4493 v4482
                                                        let v4501 : string = $"pwsh -c '{v4494}; {v4451}'"
                                                        let v4502 : bool = v4469 = 0
                                                        let struct (v4541 : US3, v4542 : US3, v4543 : US3) =
                                                            if v4502 then
                                                                let v4505 : (string -> US3) = closure75()
                                                                let v4506 : (unit -> string) = closure149(v4470)
                                                                let v4507 : (exn -> US3) = closure150(v4238, v4470, v4501)
                                                                let v4508 : US3 = US3_1
                                                                let result = ref v4508
                                                                try
                                                                    result.Value <- v4506 () |> v4505 
                                                                with ex ->
                                                                    result.Value <- v4507 ex 
                                                                let v4509 : US3 = result.Value
                                                                let v4529 : string option =
                                                                    match v4509 with
                                                                    | US3_1 -> (* None *)
                                                                        let v4527 : string option = None
                                                                        v4527
                                                                    | US3_0(v4517) -> (* Some *)
                                                                        let v4520 : string option = Some v4517 
                                                                        v4520
                                                                let v4530 : string = "$0.unwrap()"
                                                                let v4531 : string = Fable.Core.RustInterop.emitRustExpr v4529 v4530 
                                                                let v4532 : US3 = US3_0(v3889)
                                                                let v4533 : US3 = US3_0(v4448)
                                                                let v4534 : US3 = US3_0(v4531)
                                                                struct (v4532, v4533, v4534)
                                                            else
                                                                let v4535 : US0 = US0_4
                                                                let v4536 : (unit -> string) = closure153()
                                                                let v4537 : (unit -> struct (int32 * string * string * string)) = closure154(v4238, v4470, v4469, v4501)
                                                                method126(v4535, v4536, v4537)
                                                                let v4538 : US3 = US3_0(v3889)
                                                                let v4539 : US3 = US3_1
                                                                let v4540 : US3 = US3_1
                                                                struct (v4538, v4539, v4540)
                                                        struct (v4541, v4542, v4543)
                                                struct (v4544, v4545, v4546)
                                            else
                                                let v4547 : US0 = US0_1
                                                let v4548 : (unit -> string) = closure155()
                                                let v4549 : (unit -> struct (std_string_String * clap_ArgMatches)) = closure156(v46, v45)
                                                method198(v4547, v4548, v4549)
                                                let v4550 : US3 = US3_1
                                                let v4551 : US3 = US3_1
                                                let v4552 : US3 = US3_1
                                                struct (v4550, v4551, v4552)
                                        struct (v4553, v4554, v4555)
                                struct (v4556, v4557, v4558)
                        let v4565 : string =
                            match v4559 with
                            | US3_1 -> (* None *)
                                let v4563 : string = ""
                                v4563
                            | US3_0(v4562) -> (* Some *)
                                v4562
                        let v4566 : string = "extension"
                        let v4570 : string =
                            match v4560 with
                            | US3_1 -> (* None *)
                                let v4568 : string = ""
                                v4568
                            | US3_0(v4567) -> (* Some *)
                                v4567
                        let v4571 : string = "code"
                        let v4575 : string =
                            match v4561 with
                            | US3_1 -> (* None *)
                                let v4573 : string = ""
                                v4573
                            | US3_0(v4572) -> (* Some *)
                                v4572
                        let v4576 : string = "output"
                        [|struct (v4566, v4565); struct (v4571, v4570); struct (v4576, v4575)|]
        | _ ->
            let v4581 : string = "extension"
            let v4582 : string = ""
            let v4583 : string = "code"
            let v4584 : string = "output"
            [|struct (v4581, v4582); struct (v4583, v4582); struct (v4584, v4582)|]
    let v4587 : string = "$0.to_vec()"
    let v4588 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4586 v4587 
    let v4589 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4590 : (struct (string * string) -> (std_string_String * std_string_String)) = closure158()
    let v4591 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v4588, v4590) v4589 
    let v4592 : string = "std::collections::BTreeMap::from_iter(v4591.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v4593 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4592 
    let v4594 : string = "serde_json::to_string(&v4593)"
    let v4595 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v4594 
    let v4596 : (serde_json_Error -> string) = method201()
    let v4597 : string = "$0.map_err(|x| $1(x))"
    let v4598 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4595, v4596) v4597 
    let v4599 : string = "true; let _result = $0.map(|x| { //"
    let v4600 : bool = Fable.Core.RustInterop.emitRustExpr v4598 v4599 
    let v4601 : string = "x"
    let v4602 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4601 
    let v4603 : string = "fable_library_rust::String_::fromString($0)"
    let v4604 : string = Fable.Core.RustInterop.emitRustExpr v4602 v4603 
    let v4605 : string = "true; $0 })"
    let v4606 : bool = Fable.Core.RustInterop.emitRustExpr v4604 v4605 
    let v4607 : string = "_result"
    let v4608 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v4607 
    let v4609 : Result<string, string> = method202(v4608)
    let v4610 : string = ""
    let v4611 : string = "}"
    let v4612 : string = v4610 + v4611 
    let v4613 : string = v4612 + v4611 
    let v4614 : string = v4613 + v4611 
    let v4615 : string = "{"
    let v4616 : string = v4610 + v4615 
    let v4617 : string = v4616 + v4615 
    let v4618 : string = "v4609 " + v4614 + "); " + v4617 + " //"
    Fable.Core.RustInterop.emitRustExpr () v4618 
    let v4619 : string = "__result"
    let v4620 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v4619 
    v4620
and closure1 () (v0 : (string [])) : int32 =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v12 : Mut0, v13 : Mut1, v14 : Mut2, v15 : Mut3, v16 : int64 option) = State.trace_state.Value
    let v31 : US0 = US0_1
    let v32 : (unit -> string) = closure4()
    let v33 : (unit -> (string [])) = closure5(v0)
    method5(v31, v32, v33)
    let v34 : clap_Command = method0()
    let v35 : string = "clap::Command::get_matches($0)"
    let v36 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : US0 = v15.l0
    let v38 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method15(v37, v36)
    let v39 : string = $"tokio::runtime::Builder::new_multi_thread().enable_all().build().unwrap()"
    let v40 : _ = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : string = "v40.handle().block_on($0)"
    let v42 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v38 v41 
    let v43 : string = "$0.unwrap()"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let v45 : US0 = v15.l0
    let v47 : bool =
        match v45 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v47 then
        let v50 : (string -> unit) = System.Console.WriteLine
        v50 v44
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
