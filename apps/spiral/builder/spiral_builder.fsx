#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
#endif
type std_path_PathBuf = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
#endif
type std_path_Display = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
module State = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Path")>]
#endif
type std_path_Path = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
#endif
type core_any_Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = unit
  type DataReceivedEventArgs = unit
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : string
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : US0
    | US2_1
and [<Struct>] US3 =
    | US3_0 of f0_0 : int64
    | US3_1
and Mut4 = {mutable l0 : string}
and [<Struct>] US4 =
    | US4_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : std_string_String
    | US5_1
and [<Struct>] US8 =
    | US8_0
    | US8_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : US8
    | US7_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : US7
    | US6_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : Vec<std_string_String>
    | US9_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
    | US10_2
and [<Struct>] US11 =
    | US11_0 of f0_0 : US10
    | US11_1 of f1_0 : US10
    | US11_2 of f2_0 : US10
    | US11_3 of f3_0 : US10
    | US11_4 of f4_0 : US10
and [<Struct>] US12 =
    | US12_0 of f0_0 : string
    | US12_1 of f1_0 : string
and [<Struct>] US13 =
    | US13_0
    | US13_1 of f1_0 : std_string_String
and [<Struct>] US14 =
    | US14_0 of f0_0 : string * f0_1 : US1
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH1
and [<Struct>] US16 =
    | US16_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US16_1 of f1_0 : string
and [<Struct>] US17 =
    | US17_0 of f0_0 : char
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : US1 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US17 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : US1 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : (string [])
    | US22_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US23 =
    | US23_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) * UH3
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : std_string_String
    | US26_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_process_Output
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : int32
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : System.Threading.CancellationToken
    | US32_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US34 =
    | US34_0 of f0_0 : string
    | US34_1 of f1_0 : string
and [<Struct>] US33 =
    | US33_0 of f0_0 : US34
    | US33_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US35_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : int32 * f0_1 : string
    | US36_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US37 =
    | US37_0 of f0_0 : std_collections_HashMap<string, string>
    | US37_1
and [<Struct>] US38 =
    | US38_0 of f0_0 : US1
    | US38_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US39 =
    | US39_0
    | US39_1
    | US39_2
and [<Struct>] US40 =
    | US40_0 of f0_0 : std_fs_FileType
    | US40_1 of f1_0 : std_string_String
and [<Struct>] US41 =
    | US41_0
    | US41_1
    | US41_2
and [<Struct>] US42 =
    | US42_0 of f0_0 : async_walkdir_DirEntry
    | US42_1 of f1_0 : std_string_String
and [<Struct>] US43 =
    | US43_0 of f0_0 : string * f0_1 : string
    | US43_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v60 : string list = []
    let v61 : string = "Poetry"
    let v62 : string list = v61 :: v60 
    let v65 : string = "Pip"
    let v66 : string list = v65 :: v62 
    let v69 : (string list -> (string [])) = List.toArray
    let v70 : (string []) = v69 v66
    let v73 : string = "$0.to_vec()"
    let v74 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v70 v73 
    let v75 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "x"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr () v77 
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "Box::new($0)"
    let v84 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "Box::leak($0)"
    let v86 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let v87 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v88 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : string = "true; $0 }).collect::<Vec<_>>()"
    let v90 : bool = Fable.Core.RustInterop.emitRustExpr v88 v89 
    let v91 : string = "_vec_map"
    let v92 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v94 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let v95 : string = "$0.value_parser($1)"
    let v96 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v94) v95 
    let v97 : string = "clap::Command::arg($0, $1)"
    let v98 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v96) v97 
    let v99 : string = "NAME"
    let v100 : string = "r#\"" + v99 + "\"#"
    let v101 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "VERSION"
    let v103 : string = "r#\"" + v102 + "\"#"
    let v104 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v101; v104|]
    let v106 : unativeint = 1 |> unativeint 
    let v109 : unativeint = 0 |> unativeint 
    let v112 : bool = v109 = v109 
    let v120 : clap_builder_ValueRange =
        if v112 then
            let v115 : string = "clap::builder::ValueRange::new($0..)"
            let v116 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v106 v115 
            v116
        else
            let v117 : string = ""
            let v118 : string = "clap::builder::ValueRange::new($0.." + v117 + "$1)"
            let v119 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v106, v109) v118 
            v119
    let v121 : string = "deps"
    let v122 : string = "r#\"" + v121 + "\"#"
    let v123 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v122 
    let v124 : string = "clap::Arg::new($0)"
    let v125 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v123 v124 
    let v126 : string = "$0.short($1)"
    let v127 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v125, 'd') v126 
    let v128 : string = "r#\"" + v121 + "\"#"
    let v129 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v128 
    let v130 : string = "$0.long($1)"
    let v131 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v127, v129) v130 
    let v132 : string = "$0.to_vec()"
    let v133 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v105 v132 
    let v134 : string = "$0.value_names($1)"
    let v135 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v131, v133) v134 
    let v136 : string = "$0.num_args($1)"
    let v137 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v135, v120) v136 
    let v138 : string = "clap::ArgAction::Append"
    let v139 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v138 
    let v140 : string = "$0.action($1)"
    let v141 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v137, v139) v140 
    let v142 : string = "clap::Command::arg($0, $1)"
    let v143 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v98, v141) v142 
    let v144 : string = "clap::Command::subcommand($0, v143)"
    let v145 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v144 
    let v146 : string = "fable"
    let v147 : string = "r#\"" + v146 + "\"#"
    let v148 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : string = "clap::Command::new($0)"
    let v150 : clap_Command = Fable.Core.RustInterop.emitRustExpr v148 v149 
    let v151 : string = "fs-path"
    let v152 : string = "r#\"" + v151 + "\"#"
    let v153 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = "clap::Arg::new($0)"
    let v155 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v153 v154 
    let v156 : string = "$0.short($1)"
    let v157 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v155, 'f') v156 
    let v158 : string = "r#\"" + v151 + "\"#"
    let v159 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v158 
    let v160 : string = "$0.long($1)"
    let v161 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v157, v159) v160 
    let v162 : string = "$0.required($1)"
    let v163 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v161, true) v162 
    let v164 : string = "clap::Command::arg($0, $1)"
    let v165 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v150, v163) v164 
    let v166 : string = "r#\"" + v0 + "\"#"
    let v167 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v166 
    let v168 : string = "clap::Arg::new($0)"
    let v169 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v167 v168 
    let v170 : string = "$0.short($1)"
    let v171 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v169, 'c') v170 
    let v172 : string = "r#\"" + v0 + "\"#"
    let v173 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v172 
    let v174 : string = "$0.long($1)"
    let v175 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v171, v173) v174 
    let v176 : string = "clap::Command::arg($0, $1)"
    let v177 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v165, v175) v176 
    let v178 : string = "clap::Command::subcommand($0, v177)"
    let v179 : clap_Command = Fable.Core.RustInterop.emitRustExpr v145 v178 
    let v180 : string = "rust"
    let v181 : string = "r#\"" + v180 + "\"#"
    let v182 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v181 
    let v183 : string = "clap::Command::new($0)"
    let v184 : clap_Command = Fable.Core.RustInterop.emitRustExpr v182 v183 
    let v185 : string = "r#\"" + v151 + "\"#"
    let v186 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v185 
    let v187 : string = "clap::Arg::new($0)"
    let v188 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v186 v187 
    let v189 : string = "$0.short($1)"
    let v190 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v188, 'f') v189 
    let v191 : string = "r#\"" + v151 + "\"#"
    let v192 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v191 
    let v193 : string = "$0.long($1)"
    let v194 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v190, v192) v193 
    let v195 : string = "$0.required($1)"
    let v196 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v194, true) v195 
    let v197 : string = "clap::Command::arg($0, $1)"
    let v198 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v184, v196) v197 
    let v199 : string = "r#\"" + v99 + "\"#"
    let v200 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v199 
    let v201 : string = "r#\"" + v102 + "\"#"
    let v202 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v201 
    let v203 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v200; v202|]
    let v204 : unativeint = 1 |> unativeint 
    let v207 : unativeint = 0 |> unativeint 
    let v210 : bool = v207 = v207 
    let v218 : clap_builder_ValueRange =
        if v210 then
            let v213 : string = "clap::builder::ValueRange::new($0..)"
            let v214 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v204 v213 
            v214
        else
            let v215 : string = ""
            let v216 : string = "clap::builder::ValueRange::new($0.." + v215 + "$1)"
            let v217 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v204, v207) v216 
            v217
    let v219 : string = "r#\"" + v121 + "\"#"
    let v220 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v219 
    let v221 : string = "clap::Arg::new($0)"
    let v222 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v220 v221 
    let v223 : string = "$0.short($1)"
    let v224 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v222, 'd') v223 
    let v225 : string = "r#\"" + v121 + "\"#"
    let v226 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v225 
    let v227 : string = "$0.long($1)"
    let v228 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v224, v226) v227 
    let v229 : string = "$0.to_vec()"
    let v230 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v203 v229 
    let v231 : string = "$0.value_names($1)"
    let v232 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v228, v230) v231 
    let v233 : string = "$0.num_args($1)"
    let v234 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v232, v218) v233 
    let v235 : string = "clap::ArgAction::Append"
    let v236 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v235 
    let v237 : string = "$0.action($1)"
    let v238 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v234, v236) v237 
    let v239 : string = "clap::Command::arg($0, $1)"
    let v240 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v198, v238) v239 
    let v241 : unativeint = 0 |> unativeint 
    let v244 : unativeint = 1 |> unativeint 
    let v247 : bool = v244 = v241 
    let v255 : clap_builder_ValueRange =
        if v247 then
            let v250 : string = "clap::builder::ValueRange::new($0..)"
            let v251 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v241 v250 
            v251
        else
            let v252 : string = "="
            let v253 : string = "clap::builder::ValueRange::new($0.." + v252 + "$1)"
            let v254 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v241, v244) v253 
            v254
    let v256 : string = "wasm"
    let v257 : string = "r#\"" + v256 + "\"#"
    let v258 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "clap::Arg::new($0)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v258 v259 
    let v261 : string = "$0.short($1)"
    let v262 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, 'w') v261 
    let v263 : string = "r#\"" + v256 + "\"#"
    let v264 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v263 
    let v265 : string = "$0.long($1)"
    let v266 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v262, v264) v265 
    let v267 : string = "$0.num_args($1)"
    let v268 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v266, v255) v267 
    let v269 : string = "$0.require_equals($1)"
    let v270 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v268, true) v269 
    let v271 : string = ""
    let v272 : string = "r#\"" + v271 + "\"#"
    let v273 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v272 
    let v274 : string = "$0.default_missing_value($1)"
    let v275 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v270, v273) v274 
    let v276 : string = "clap::Command::arg($0, $1)"
    let v277 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v240, v275) v276 
    let v278 : unativeint = 0 |> unativeint 
    let v281 : unativeint = 1 |> unativeint 
    let v284 : bool = v281 = v278 
    let v292 : clap_builder_ValueRange =
        if v284 then
            let v287 : string = "clap::builder::ValueRange::new($0..)"
            let v288 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v278 v287 
            v288
        else
            let v289 : string = "="
            let v290 : string = "clap::builder::ValueRange::new($0.." + v289 + "$1)"
            let v291 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v278, v281) v290 
            v291
    let v293 : string = "contract"
    let v294 : string = "r#\"" + v293 + "\"#"
    let v295 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v294 
    let v296 : string = "clap::Arg::new($0)"
    let v297 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v295 v296 
    let v298 : string = "$0.short($1)"
    let v299 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v297, 'c') v298 
    let v300 : string = "r#\"" + v293 + "\"#"
    let v301 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v300 
    let v302 : string = "$0.long($1)"
    let v303 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v299, v301) v302 
    let v304 : string = "$0.num_args($1)"
    let v305 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v303, v292) v304 
    let v306 : string = "$0.require_equals($1)"
    let v307 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v305, true) v306 
    let v308 : string = "r#\"" + v271 + "\"#"
    let v309 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v308 
    let v310 : string = "$0.default_missing_value($1)"
    let v311 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v307, v309) v310 
    let v312 : string = "clap::Command::arg($0, $1)"
    let v313 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v277, v311) v312 
    let v314 : string = "clap::Command::subcommand($0, v313)"
    let v315 : clap_Command = Fable.Core.RustInterop.emitRustExpr v179 v314 
    let v316 : string = "typescript"
    let v317 : string = "r#\"" + v316 + "\"#"
    let v318 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v317 
    let v319 : string = "clap::Command::new($0)"
    let v320 : clap_Command = Fable.Core.RustInterop.emitRustExpr v318 v319 
    let v321 : string = "r#\"" + v151 + "\"#"
    let v322 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v321 
    let v323 : string = "clap::Arg::new($0)"
    let v324 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v322 v323 
    let v325 : string = "$0.short($1)"
    let v326 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v324, 'f') v325 
    let v327 : string = "r#\"" + v151 + "\"#"
    let v328 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v327 
    let v329 : string = "$0.long($1)"
    let v330 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v326, v328) v329 
    let v331 : string = "$0.required($1)"
    let v332 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v330, true) v331 
    let v333 : string = "clap::Command::arg($0, $1)"
    let v334 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v320, v332) v333 
    let v335 : string = "r#\"" + v99 + "\"#"
    let v336 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v335 
    let v337 : string = "r#\"" + v102 + "\"#"
    let v338 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v337 
    let v339 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v336; v338|]
    let v340 : unativeint = 1 |> unativeint 
    let v343 : unativeint = 0 |> unativeint 
    let v346 : bool = v343 = v343 
    let v353 : clap_builder_ValueRange =
        if v346 then
            let v349 : string = "clap::builder::ValueRange::new($0..)"
            let v350 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v340 v349 
            v350
        else
            let v351 : string = "clap::builder::ValueRange::new($0.." + v271 + "$1)"
            let v352 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v340, v343) v351 
            v352
    let v354 : string = "r#\"" + v121 + "\"#"
    let v355 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v354 
    let v356 : string = "clap::Arg::new($0)"
    let v357 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v355 v356 
    let v358 : string = "$0.short($1)"
    let v359 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v357, 'd') v358 
    let v360 : string = "r#\"" + v121 + "\"#"
    let v361 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v360 
    let v362 : string = "$0.long($1)"
    let v363 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v359, v361) v362 
    let v364 : string = "$0.to_vec()"
    let v365 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v339 v364 
    let v366 : string = "$0.value_names($1)"
    let v367 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v363, v365) v366 
    let v368 : string = "$0.num_args($1)"
    let v369 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v367, v353) v368 
    let v370 : string = "clap::ArgAction::Append"
    let v371 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v370 
    let v372 : string = "$0.action($1)"
    let v373 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v369, v371) v372 
    let v374 : string = "clap::Command::arg($0, $1)"
    let v375 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v334, v373) v374 
    let v376 : string = "clap::Command::subcommand($0, v375)"
    let v377 : clap_Command = Fable.Core.RustInterop.emitRustExpr v315 v376 
    let v378 : string = "python"
    let v379 : string = "r#\"" + v378 + "\"#"
    let v380 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v379 
    let v381 : string = "clap::Command::new($0)"
    let v382 : clap_Command = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let v383 : string = "r#\"" + v151 + "\"#"
    let v384 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v383 
    let v385 : string = "clap::Arg::new($0)"
    let v386 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let v387 : string = "$0.short($1)"
    let v388 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v386, 'f') v387 
    let v389 : string = "r#\"" + v151 + "\"#"
    let v390 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v389 
    let v391 : string = "$0.long($1)"
    let v392 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v388, v390) v391 
    let v393 : string = "$0.required($1)"
    let v394 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v392, true) v393 
    let v395 : string = "clap::Command::arg($0, $1)"
    let v396 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v382, v394) v395 
    let v397 : string = "r#\"" + v99 + "\"#"
    let v398 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v397 
    let v399 : string = "r#\"" + v102 + "\"#"
    let v400 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v399 
    let v401 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v398; v400|]
    let v402 : unativeint = 1 |> unativeint 
    let v405 : unativeint = 0 |> unativeint 
    let v408 : bool = v405 = v405 
    let v415 : clap_builder_ValueRange =
        if v408 then
            let v411 : string = "clap::builder::ValueRange::new($0..)"
            let v412 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v402 v411 
            v412
        else
            let v413 : string = "clap::builder::ValueRange::new($0.." + v271 + "$1)"
            let v414 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v402, v405) v413 
            v414
    let v416 : string = "r#\"" + v121 + "\"#"
    let v417 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v416 
    let v418 : string = "clap::Arg::new($0)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v417 v418 
    let v420 : string = "$0.short($1)"
    let v421 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v419, 'd') v420 
    let v422 : string = "r#\"" + v121 + "\"#"
    let v423 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v422 
    let v424 : string = "$0.long($1)"
    let v425 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v421, v423) v424 
    let v426 : string = "$0.to_vec()"
    let v427 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v401 v426 
    let v428 : string = "$0.value_names($1)"
    let v429 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v425, v427) v428 
    let v430 : string = "$0.num_args($1)"
    let v431 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v429, v415) v430 
    let v432 : string = "clap::ArgAction::Append"
    let v433 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v432 
    let v434 : string = "$0.action($1)"
    let v435 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v431, v433) v434 
    let v436 : string = "clap::Command::arg($0, $1)"
    let v437 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v396, v435) v436 
    let v438 : string = "clap::Command::subcommand($0, v437)"
    let v439 : clap_Command = Fable.Core.RustInterop.emitRustExpr v377 v438 
    let v440 : string = "dib"
    let v441 : string = "r#\"" + v440 + "\"#"
    let v442 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v441 
    let v443 : string = "clap::Command::new($0)"
    let v444 : clap_Command = Fable.Core.RustInterop.emitRustExpr v442 v443 
    let v445 : string = "path"
    let v446 : string = "r#\"" + v445 + "\"#"
    let v447 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v446 
    let v448 : string = "clap::Arg::new($0)"
    let v449 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v447 v448 
    let v450 : string = "$0.short($1)"
    let v451 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v449, 'p') v450 
    let v452 : string = "r#\"" + v445 + "\"#"
    let v453 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v452 
    let v454 : string = "$0.long($1)"
    let v455 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v451, v453) v454 
    let v456 : string = "$0.required($1)"
    let v457 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v455, true) v456 
    let v458 : string = "clap::Command::arg($0, $1)"
    let v459 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v444, v457) v458 
    let v460 : string = "u8"
    let v461 : string = "clap::value_parser!(" + v460 + ").into()"
    let v462 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v461 
    let v463 : string = "retries"
    let v464 : string = "r#\"" + v463 + "\"#"
    let v465 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v464 
    let v466 : string = "clap::Arg::new($0)"
    let v467 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v465 v466 
    let v468 : string = "$0.short($1)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v467, 'r') v468 
    let v470 : string = "r#\"" + v463 + "\"#"
    let v471 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v470 
    let v472 : string = "$0.long($1)"
    let v473 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v469, v471) v472 
    let v474 : string = "$0.value_parser($1)"
    let v475 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v473, v462) v474 
    let v476 : string = "clap::Command::arg($0, $1)"
    let v477 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v459, v475) v476 
    let v478 : string = "working-directory"
    let v479 : string = "r#\"" + v478 + "\"#"
    let v480 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v479 
    let v481 : string = "clap::Arg::new($0)"
    let v482 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v480 v481 
    let v483 : string = "$0.short($1)"
    let v484 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v482, 'w') v483 
    let v485 : string = "r#\"" + v478 + "\"#"
    let v486 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v485 
    let v487 : string = "$0.long($1)"
    let v488 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v484, v486) v487 
    let v489 : string = "clap::Command::arg($0, $1)"
    let v490 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v477, v488) v489 
    let v491 : string = "clap::Command::subcommand($0, v490)"
    let v492 : clap_Command = Fable.Core.RustInterop.emitRustExpr v439 v491 
    v492
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method2 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method4 () : string =
    let v0 : string = ""
    v0
and closure3 (v0 : US1 option ref) (v1 : US1 option) : US1 option ref =
    v0.Value <- v1 
    v0
and closure4 (v0 : string option, v1 : (US1 option -> US1 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : string = x
    let v3 : US1 = US1_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method3 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::env::var(&*$0)"
    let v3 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "fable_library_rust::String_::fromString($0)"
    let v9 : string = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_result_map_"
    let v13 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = method4()
    let v15 : string = "$0.unwrap_or($1)"
    let v16 : string = Fable.Core.RustInterop.emitRustExpr struct (v13, v14) v15 
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "std::env::var(&*$0)"
    let v18 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "x"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = "fable_library_rust::String_::fromString($0)"
    let v24 : string = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "true; $0 })"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "_result_map_"
    let v28 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = method4()
    let v30 : string = "$0.unwrap_or($1)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr struct (v28, v29) v30 
    let _v1 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "std::env::var(&*$0)"
    let v33 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "x"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "true; $0 })"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "_result_map_"
    let v43 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = method4()
    let v45 : string = "$0.unwrap_or($1)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr struct (v43, v44) v45 
    let _v1 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "process.env[$0] ?? \"\""
    let v48 : string = Fable.Core.JsInterop.emitJsExpr v0 v47 
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = "os"
    let v50 : IOsEnviron = Fable.Core.PyInterop.importAll v49 
    let v51 : string = "v50.environ"
    let v52 : obj = Fable.Core.PyInterop.emitPyExpr () v51 
    let v55 : string = "v52.get($0)"
    let v56 : string = Fable.Core.PyInterop.emitPyExpr v0 v55 
    let mutable _v56 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v59 : (string -> string option) = Option.ofObj
    let v60 : string option = v59 v56
    v60 
    #else
    Some v56 
    #endif
    |> fun x -> _v56 <- Some x
    let v61 : string option = match _v56 with Some x -> x | None -> failwith "optionm'.of_obj / _v56=None"
    let v64 : US1 option = None
    let _v64 = ref v64 
    let v65 : US1 option ref = _v64 
    let v66 : (US1 option -> US1 option ref) = closure3(v65)
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure4(v61, v66)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : US1 option = _v64.Value 
    let v83 : US1 = US1_1
    let v84 : US1 = v72 |> Option.defaultValue v83 
    let v91 : string =
        match v84 with
        | US1_1 -> (* None *)
            let v89 : string = ""
            v89
        | US1_0(v88) -> (* Some *)
            v88
    let _v1 = v91 
    #endif
#else
    let v92 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v93 : string = v92 v0
    let mutable _v93 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v94 : (string -> string option) = Option.ofObj
    let v95 : string option = v94 v93
    v95 
    #else
    Some v93 
    #endif
    |> fun x -> _v93 <- Some x
    let v96 : string option = match _v93 with Some x -> x | None -> failwith "optionm'.of_obj / _v93=None"
    let v99 : US1 option = None
    let _v99 = ref v99 
    let v100 : US1 option ref = _v99 
    let v101 : (US1 option -> US1 option ref) = closure3(v100)
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure4(v96, v101)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v107 : US1 option = _v99.Value 
    let v118 : US1 = US1_1
    let v119 : US1 = v107 |> Option.defaultValue v118 
    let v126 : string =
        match v119 with
        | US1_1 -> (* None *)
            let v124 : string = ""
            v124
        | US1_0(v123) -> (* Some *)
            v123
    let _v1 = v126 
    #endif
    let v127 : string = _v1 
    v127
and method5 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure5 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method2()
    let v3 : string = method3(v2)
    
    
    
    
    
    let v4 : bool = "Verbose" = v3
    let v8 : US2 =
        if v4 then
            let v5 : US0 = US0_0
            US2_0(v5)
        else
            US2_1
    let v49 : US2 =
        match v8 with
        | US2_1 -> (* None *)
            let v11 : bool = "Debug" = v3
            let v15 : US2 =
                if v11 then
                    let v12 : US0 = US0_1
                    US2_0(v12)
                else
                    US2_1
            match v15 with
            | US2_1 -> (* None *)
                let v18 : bool = "Info" = v3
                let v22 : US2 =
                    if v18 then
                        let v19 : US0 = US0_2
                        US2_0(v19)
                    else
                        US2_1
                match v22 with
                | US2_1 -> (* None *)
                    let v25 : bool = "Warning" = v3
                    let v29 : US2 =
                        if v25 then
                            let v26 : US0 = US0_3
                            US2_0(v26)
                        else
                            US2_1
                    match v29 with
                    | US2_1 -> (* None *)
                        let v32 : bool = "Critical" = v3
                        let v36 : US2 =
                            if v32 then
                                let v33 : US0 = US0_4
                                US2_0(v33)
                            else
                                US2_1
                        match v36 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v37) -> (* Some *)
                            US2_0(v37)
                    | US2_0(v30) -> (* Some *)
                        US2_0(v30)
                | US2_0(v23) -> (* Some *)
                    US2_0(v23)
            | US2_0(v16) -> (* Some *)
                US2_0(v16)
        | US2_0(v9) -> (* Some *)
            US2_0(v9)
    let v50 : string = method5()
    let v51 : string = method3(v50)
    let v52 : bool = v51 = "True"
    let v62 : US3 =
        if v52 then
            let v53 : System.DateTime = System.DateTime.Now
            let v56 : (System.DateTime -> int64) = _.Ticks
            let v57 : int64 = v56 v53
            US3_0(v57)
        else
            US3_1
    let _v1 = struct (v49, v62) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : US2 = US2_1
    let v64 : US3 = US3_1
    let _v1 = struct (v63, v64) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "AUTOMATION"
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "env!(\"" + v65 + "\")"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "env!(\"" + v65 + "\")"
    let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _v66 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "env!(\"" + v65 + "\")"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _v66 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = null |> unbox<string>
    let _v66 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : string = null |> unbox<string>
    let _v66 = v88 
    #endif
#else
    let v91 : string = null |> unbox<string>
    let _v66 = v91 
    #endif
    let v94 : string = _v66 
    let v99 : string = "True"
    let v100 : bool = v94 <> v99 
    let v109 : US3 =
        if v100 then
            US3_1
        else
            let v104 : string = $"near_sdk::env::block_timestamp()"
            let v105 : uint64 = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : (uint64 -> int64) = int64
            let v107 : int64 = v106 v105
            US3_0(v107)
    let v110 : US2 = US2_1
    let _v1 = struct (v110, v109) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : string = method2()
    let v112 : string = method3(v111)
    
    
    
    
    
    let v113 : bool = "Verbose" = v112
    let v117 : US2 =
        if v113 then
            let v114 : US0 = US0_0
            US2_0(v114)
        else
            US2_1
    let v158 : US2 =
        match v117 with
        | US2_1 -> (* None *)
            let v120 : bool = "Debug" = v112
            let v124 : US2 =
                if v120 then
                    let v121 : US0 = US0_1
                    US2_0(v121)
                else
                    US2_1
            match v124 with
            | US2_1 -> (* None *)
                let v127 : bool = "Info" = v112
                let v131 : US2 =
                    if v127 then
                        let v128 : US0 = US0_2
                        US2_0(v128)
                    else
                        US2_1
                match v131 with
                | US2_1 -> (* None *)
                    let v134 : bool = "Warning" = v112
                    let v138 : US2 =
                        if v134 then
                            let v135 : US0 = US0_3
                            US2_0(v135)
                        else
                            US2_1
                    match v138 with
                    | US2_1 -> (* None *)
                        let v141 : bool = "Critical" = v112
                        let v145 : US2 =
                            if v141 then
                                let v142 : US0 = US0_4
                                US2_0(v142)
                            else
                                US2_1
                        match v145 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v146) -> (* Some *)
                            US2_0(v146)
                    | US2_0(v139) -> (* Some *)
                        US2_0(v139)
                | US2_0(v132) -> (* Some *)
                    US2_0(v132)
            | US2_0(v125) -> (* Some *)
                US2_0(v125)
        | US2_0(v118) -> (* Some *)
            US2_0(v118)
    let v159 : string = method5()
    let v160 : string = method3(v159)
    let v161 : bool = v160 = "True"
    let v171 : US3 =
        if v161 then
            let v162 : System.DateTime = System.DateTime.Now
            let v165 : (System.DateTime -> int64) = _.Ticks
            let v166 : int64 = v165 v162
            US3_0(v166)
        else
            US3_1
    let _v1 = struct (v158, v171) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : string = method2()
    let v173 : string = method3(v172)
    
    
    
    
    
    let v174 : bool = "Verbose" = v173
    let v178 : US2 =
        if v174 then
            let v175 : US0 = US0_0
            US2_0(v175)
        else
            US2_1
    let v219 : US2 =
        match v178 with
        | US2_1 -> (* None *)
            let v181 : bool = "Debug" = v173
            let v185 : US2 =
                if v181 then
                    let v182 : US0 = US0_1
                    US2_0(v182)
                else
                    US2_1
            match v185 with
            | US2_1 -> (* None *)
                let v188 : bool = "Info" = v173
                let v192 : US2 =
                    if v188 then
                        let v189 : US0 = US0_2
                        US2_0(v189)
                    else
                        US2_1
                match v192 with
                | US2_1 -> (* None *)
                    let v195 : bool = "Warning" = v173
                    let v199 : US2 =
                        if v195 then
                            let v196 : US0 = US0_3
                            US2_0(v196)
                        else
                            US2_1
                    match v199 with
                    | US2_1 -> (* None *)
                        let v202 : bool = "Critical" = v173
                        let v206 : US2 =
                            if v202 then
                                let v203 : US0 = US0_4
                                US2_0(v203)
                            else
                                US2_1
                        match v206 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v207) -> (* Some *)
                            US2_0(v207)
                    | US2_0(v200) -> (* Some *)
                        US2_0(v200)
                | US2_0(v193) -> (* Some *)
                    US2_0(v193)
            | US2_0(v186) -> (* Some *)
                US2_0(v186)
        | US2_0(v179) -> (* Some *)
            US2_0(v179)
    let v220 : string = method5()
    let v221 : string = method3(v220)
    let v222 : bool = v221 = "True"
    let v232 : US3 =
        if v222 then
            let v223 : System.DateTime = System.DateTime.Now
            let v226 : (System.DateTime -> int64) = _.Ticks
            let v227 : int64 = v226 v223
            US3_0(v227)
        else
            US3_1
    let _v1 = struct (v219, v232) 
    #endif
#else
    let v233 : string = method2()
    let v234 : string = method3(v233)
    
    
    
    
    
    let v235 : bool = "Verbose" = v234
    let v239 : US2 =
        if v235 then
            let v236 : US0 = US0_0
            US2_0(v236)
        else
            US2_1
    let v280 : US2 =
        match v239 with
        | US2_1 -> (* None *)
            let v242 : bool = "Debug" = v234
            let v246 : US2 =
                if v242 then
                    let v243 : US0 = US0_1
                    US2_0(v243)
                else
                    US2_1
            match v246 with
            | US2_1 -> (* None *)
                let v249 : bool = "Info" = v234
                let v253 : US2 =
                    if v249 then
                        let v250 : US0 = US0_2
                        US2_0(v250)
                    else
                        US2_1
                match v253 with
                | US2_1 -> (* None *)
                    let v256 : bool = "Warning" = v234
                    let v260 : US2 =
                        if v256 then
                            let v257 : US0 = US0_3
                            US2_0(v257)
                        else
                            US2_1
                    match v260 with
                    | US2_1 -> (* None *)
                        let v263 : bool = "Critical" = v234
                        let v267 : US2 =
                            if v263 then
                                let v264 : US0 = US0_4
                                US2_0(v264)
                            else
                                US2_1
                        match v267 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v268) -> (* Some *)
                            US2_0(v268)
                    | US2_0(v261) -> (* Some *)
                        US2_0(v261)
                | US2_0(v254) -> (* Some *)
                    US2_0(v254)
            | US2_0(v247) -> (* Some *)
                US2_0(v247)
        | US2_0(v240) -> (* Some *)
            US2_0(v240)
    let v281 : string = method5()
    let v282 : string = method3(v281)
    let v283 : bool = v282 = "True"
    let v293 : US3 =
        if v283 then
            let v284 : System.DateTime = System.DateTime.Now
            let v287 : (System.DateTime -> int64) = _.Ticks
            let v288 : int64 = v287 v284
            US3_0(v288)
        else
            US3_1
    let _v1 = struct (v280, v293) 
    #endif
    let struct (v294 : US2, v295 : US3) = _v1 
    let v359 : Mut2 = {l0 = true} : Mut2
    let v360 : Mut0 = {l0 = 0L} : Mut0
    let v363 : US0 =
        match v294 with
        | US2_1 -> (* None *)
            v0
        | US2_0(v361) -> (* Some *)
            v361
    let v364 : Mut3 = {l0 = v363} : Mut3
    let v365 : (string -> unit) = closure5()
    let v366 : Mut1 = {l0 = v365} : Mut1
    let v373 : int64 option =
        match v295 with
        | US3_1 -> (* None *)
            let v371 : int64 option = None
            v371
        | US3_0(v367) -> (* Some *)
            let v368 : int64 option = Some v367 
            v368
    struct (v360, v366, v359, v364, v373)
and closure2 () () : unit =
    let v0 : bool = State.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : int64 option) = method1(v1)
        let v7 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2, v3, v4, v5, v6) 
        State.trace_state <- v7 
        ()
and closure7 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure8 (v0 : US3 option ref) (v1 : US3 option) : US3 option ref =
    v0.Value <- v1 
    v0
and closure9 (v0 : int64 option, v1 : (US3 option -> US3 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : int64 = x
    let v3 : US3 = US3_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method6 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method7 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 () : string =
    let v0 : string = "("
    v0
and method9 () : string =
    let v0 : string = " "
    v0
and method10 () : string =
    let v0 : string = ""
    v0
and closure10 (v0 : Mut4, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and method11 () : string =
    let v0 : string = "\u001b[0m"
    v0
and closure11 () () : string =
    let v0 : string = $"spiral_builder.main"
    v0
and closure13 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure12 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure13(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and closure6 (v0 : (string [])) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 1 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_1
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v615 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : string = "Debug"
                US1_0(v612)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v619 : string =
            match v615 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v616) -> (* Some *)
                v616
        let v620 : (unit -> string) = v619.ToLower
        let v621 : string = v620 ()
        let v624 : string = v621.PadLeft (7, ' ')
        let v638 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v639 : string = "inline_colorization::color_bright_blue"
        let v640 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v639 
        let v641 : string = "&*$0"
        let v642 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v641 
        let v643 : string = "inline_colorization::color_reset"
        let v644 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v643 
        let v645 : string = "\"{v640}{v642}{v644}\""
        let v646 : string = @$"format!(" + v645 + ")"
        let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v646 
        let v648 : string = "fable_library_rust::String_::fromString($0)"
        let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
        let _v638 = v649 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v650 : string = "inline_colorization::color_bright_blue"
        let v651 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v650 
        let v652 : string = "&*$0"
        let v653 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v652 
        let v654 : string = "inline_colorization::color_reset"
        let v655 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v654 
        let v656 : string = "\"{v651}{v653}{v655}\""
        let v657 : string = @$"format!(" + v656 + ")"
        let v658 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v657 
        let v659 : string = "fable_library_rust::String_::fromString($0)"
        let v660 : string = Fable.Core.RustInterop.emitRustExpr v658 v659 
        let _v638 = v660 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v661 : string = "inline_colorization::color_bright_blue"
        let v662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v661 
        let v663 : string = "&*$0"
        let v664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v663 
        let v665 : string = "inline_colorization::color_reset"
        let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v665 
        let v667 : string = "\"{v662}{v664}{v666}\""
        let v668 : string = @$"format!(" + v667 + ")"
        let v669 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v668 
        let v670 : string = "fable_library_rust::String_::fromString($0)"
        let v671 : string = Fable.Core.RustInterop.emitRustExpr v669 v670 
        let _v638 = v671 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v672 : string = "\u001b[94m"
        let v673 : string = method11()
        let v674 : string = v672 + v624 
        let v675 : string = v674 + v673 
        let _v638 = v675 
        #endif
#if FABLE_COMPILER_PYTHON
        let v676 : string = "\u001b[94m"
        let v677 : string = method11()
        let v678 : string = v676 + v624 
        let v679 : string = v678 + v677 
        let _v638 = v679 
        #endif
#else
        let v680 : string = "\u001b[94m"
        let v681 : string = method11()
        let v682 : string = v680 + v624 
        let v683 : string = v682 + v681 
        let _v638 = v683 
        #endif
        let v684 : string = _v638 
        let v690 : int64 = v85.l0
        let v691 : string = method10()
        let v692 : Mut4 = {l0 = v691} : Mut4
        let v693 : string = "{ "
        let v694 : string = $"{v693}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v692, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = "args"
        let v703 : string = $"{v702}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v692, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = " = "
        let v712 : string = $"{v711}"
        let v715 : unit = ()
        let v716 : (unit -> unit) = closure10(v692, v712)
        let v717 : unit = (fun () -> v716 (); v715) ()
        let v720 : string = $"%A{v0}"
        let v723 : string = $"{v720}"
        let v726 : unit = ()
        let v727 : (unit -> unit) = closure10(v692, v723)
        let v728 : unit = (fun () -> v727 (); v726) ()
        let v731 : string = " }"
        let v732 : string = $"{v731}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure10(v692, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = v692.l0
        let v741 : (unit -> string) = closure11()
        let v742 : string = $"{v483} {v684} #{v690} %s{v741 ()} / {v740}"
        let v745 : char list = []
        let v746 : (char list -> (char [])) = List.toArray
        let v747 : (char []) = v746 v745
        let v750 : string = v742.TrimStart v747 
        let v768 : char list = []
        let v769 : char list = '/' :: v768 
        let v772 : char list = ' ' :: v769 
        let v775 : (char list -> (char [])) = List.toArray
        let v776 : (char []) = v775 v772
        let v779 : string = v750.TrimEnd v776 
        let v797 : (string -> unit) = closure12()
        let v798 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v799 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v779 v799 
        let _v798 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v800 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v779 v800 
        let _v798 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v801 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v779 v801 
        let _v798 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v797 v779
        let _v798 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v797 v779
        let _v798 = () 
        #endif
#else
        v797 v779
        let _v798 = () 
        #endif
        _v798 
        let v802 : (string -> unit) = v17.l0
        v802 v779
and closure14 () (v0 : Ref<Str>) : std_string_String =
    let v1 : string = "String::from($0)"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure15 (v0 : US4 option ref) (v1 : US4 option) : US4 option ref =
    v0.Value <- v1 
    v0
and closure16 (v0 : struct (std_string_String * clap_ArgMatches) option, v1 : (US4 option -> US4 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v2 : std_string_String, v3 : clap_ArgMatches) = x
    let v4 : US4 = US4_0(v2, v3)
    v4 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method13 () : string =
    let v0 : string = "py-path"
    v0
and closure17 (v0 : US5 option ref) (v1 : US5 option) : US5 option ref =
    v0.Value <- v1 
    v0
and closure18 (v0 : std_string_String option, v1 : (US5 option -> US5 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_string_String = x
    let v3 : US5 = US5_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method14 () : string =
    let v0 : string = "env"
    v0
and method15 () : string =
    let v0 : string = "deps"
    v0
and closure19 (v0 : US9 option ref) (v1 : US9 option) : US9 option ref =
    v0.Value <- v1 
    v0
and closure20 (v0 : Vec<std_string_String> option, v1 : (US9 option -> US9 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : Vec<std_string_String> = x
    let v3 : US9 = US9_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method16 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method19 (v0 : string) : string =
    v0
and method18 (v0 : string, v1 : string) : struct (string * string) =
    let v2 : string = method19(v0)
    struct (v1, v2)
and method17 (v0 : string, v1 : string) : string =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "String::from($0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "std::path::PathBuf::from($0)"
    let v8 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v9 
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "$0.join($1)"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v8, v12) v13 
    let v15 : string = "$0.display()"
    let v16 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : string = "format!(\"{}\", $0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v18 
    let _v17 = v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = "format!(\"{}\", $0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v20 
    let _v17 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : string = "format!(\"{}\", $0)"
    let v23 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v22 
    let _v17 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v27 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v30 
    #endif
    let v33 : std_string_String = _v17 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v33 v38 
    let _v2 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : US10 = US10_1
    let v41 : US11 = US11_2(v40)
    let v42 : string = $"file_system.(</>) / target: {v41} / a: {v0} / b: {v1}"
    let v43 : string = failwith<string> v42
    let _v2 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = null |> unbox<string>
    let _v2 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "path"
    let v48 : IPathJoin = Fable.Core.JsInterop.importAll v47 
    let struct (v49 : string, v50 : string) = method18(v1, v0)
    let v51 : string = "v48.join($0, $1)"
    let v52 : string = Fable.Core.JsInterop.emitJsExpr struct (v49, v50) v51 
    let _v2 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : US10 = US10_0
    let v54 : US11 = US11_4(v53)
    let v55 : string = $"file_system.(</>) / target: {v54} / a: {v0} / b: {v1}"
    let v56 : string = failwith<string> v55
    let _v2 = v56 
    #endif
#else
    let v57 : string = System.IO.Path.Combine (v0, v1)
    let _v2 = v57 
    #endif
    let v58 : string = _v2 
    v58
and method21 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v15 : bool =
        if v9 then
            true
        else
            let v10 : string = "$0.is_dir()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            if v11 then
                true
            else
                let v12 : string = "$0.is_symlink()"
                let v13 : bool = Fable.Core.RustInterop.emitRustExpr v7 v12 
                v13
    let _v1 = v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : bool = null |> unbox<bool>
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : bool = null |> unbox<bool>
    let _v1 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22 : string = "fs"
    let v23 : IFsExistsSync = Fable.Core.JsInterop.importAll v22 
    let v24 : string = "$0.existsSync($1)"
    let v25 : bool = Fable.Core.JsInterop.emitJsExpr struct (v23, v0) v24 
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : bool = null |> unbox<bool>
    let _v1 = v26 
    #endif
#else
    let v29 : (string -> bool) = System.IO.Directory.Exists
    let v30 : bool = v29 v0
    let _v1 = v30 
    #endif
    let v31 : bool = _v1 
    v31
and method23 (v0 : string) : string option =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0?"
    let v11 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v24 
    #endif
#else
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v27 
    #endif
    let v30 : std_string_String = _v14 
    let v35 : string = "fable_library_rust::String_::fromString($0)"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr v30 v35 
    let v37 : US1 = US1_0(v36)
    let _v1 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : US1 = null |> unbox<US1>
    let _v1 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : US1 = null |> unbox<US1>
    let _v1 = v41 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : string = "path"
    let v45 : IPathDirname = Fable.Core.JsInterop.importAll v44 
    let v46 : string = "v45.dirname($0)"
    let v47 : string = Fable.Core.JsInterop.emitJsExpr v0 v46 
    let v48 : US1 = US1_0(v47)
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : US1 = null |> unbox<US1>
    let _v1 = v49 
    #endif
#else
    let v52 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.GetParent
    let v53 : System.IO.DirectoryInfo = v52 v0
    let v54 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let v57 : bool = v53 = v54 
    let v84 : US1 =
        if v57 then
            US1_1
        else
            let v61 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v62 : string = null |> unbox<string>
            let _v61 = v62 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v65 : string = null |> unbox<string>
            let _v61 = v65 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v68 : string = null |> unbox<string>
            let _v61 = v68 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : string = null |> unbox<string>
            let _v61 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : string = null |> unbox<string>
            let _v61 = v74 
            #endif
#else
            let v77 : string = v53.FullName
            let _v61 = v77 
            #endif
            let v78 : string = _v61 
            US1_0(v78)
    let _v1 = v84 
    #endif
    let v85 : US1 = _v1 
    match v85 with
    | US1_1 -> (* None *)
        let v94 : string option = None
        v94
    | US1_0(v90) -> (* Some *)
        let v91 : string option = Some v90 
        v91
and closure21 () (v0 : string) : string option =
    method23(v0)
and method22 () : (string -> string option) =
    closure21()
and method24 (v0 : string, v1 : string, v2 : string) : US12 =
    let v3 : string = method17(v2, v0)
    let v4 : bool = method21(v3)
    if v4 then
        US12_0(v2)
    else
        let v6 : (string -> string option) = method22()
        let v7 : string option = v6 v2
        let v8 : US1 option = None
        let _v8 = ref v8 
        let v9 : US1 option ref = _v8 
        let v10 : (US1 option -> US1 option ref) = closure3(v9)
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure4(v7, v10)
        let v13 : unit = (fun () -> v12 (); v11) ()
        let v16 : US1 option = _v8.Value 
        let v27 : US1 = US1_1
        let v28 : US1 = v16 |> Option.defaultValue v27 
        match v28 with
        | US1_1 -> (* None *)
            let v34 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v2}')"""
            US12_1(v34)
        | US1_0(v32) -> (* Some *)
            method24(v0, v1, v32)
and method20 (v0 : string, v1 : string) : US12 =
    let v2 : string = method17(v1, v0)
    let v3 : bool = method21(v2)
    if v3 then
        US12_0(v1)
    else
        let v5 : (string -> string option) = method22()
        let v6 : string option = v5 v1
        let v7 : US1 option = None
        let _v7 = ref v7 
        let v8 : US1 option ref = _v7 
        let v9 : (US1 option -> US1 option ref) = closure3(v8)
        let v10 : unit = ()
        let v11 : (unit -> unit) = closure4(v6, v9)
        let v12 : unit = (fun () -> v11 (); v10) ()
        let v15 : US1 option = _v7.Value 
        let v26 : US1 = US1_1
        let v27 : US1 = v15 |> Option.defaultValue v26 
        match v27 with
        | US1_1 -> (* None *)
            let v33 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v1}')"""
            US12_1(v33)
        | US1_0(v31) -> (* Some *)
            method24(v0, v1, v31)
and closure23 () () : string =
    let v0 : string = "file_system.get_workspace_root"
    v0
and closure22 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v737 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method8()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method8()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method8()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method9()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method9()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method9()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US0 = US0_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure10(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US0 = US0_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure10(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US1 =
                    if v662 then
                        let v665 : string = "Debug"
                        US1_0(v665)
                    else
                        US1_1
                match v668 with
                | US1_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method8()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method8()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method8()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method9()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method9()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method9()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US0 = US0_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure10(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US0 = US0_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure10(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US1 =
                        if v721 then
                            let v724 : string = "Info"
                            US1_0(v724)
                        else
                            US1_1
                    match v727 with
                    | US1_1 -> (* None *)
                        let v730 : string = "Warning"
                        US1_0(v730)
                    | US1_0(v728) -> (* Some *)
                        US1_0(v728)
                | US1_0(v669) -> (* Some *)
                    US1_0(v669)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v741 : string =
            match v737 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method11()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method11()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method11()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure10(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "error"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure10(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure10(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{v0}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure10(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = " }"
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure10(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = v814.l0
        let v860 : (unit -> string) = closure23()
        let v861 : string = $"{v483} {v806} #{v812} %s{v860 ()} / {v859}"
        let v864 : char list = []
        let v865 : (char list -> (char [])) = List.toArray
        let v866 : (char []) = v865 v864
        let v869 : string = v861.TrimStart v866 
        let v887 : char list = []
        let v888 : char list = '/' :: v887 
        let v891 : char list = ' ' :: v888 
        let v894 : (char list -> (char [])) = List.toArray
        let v895 : (char []) = v894 v891
        let v898 : string = v869.TrimEnd v895 
        let v916 : (string -> unit) = closure12()
        let v917 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v918 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v898 v918 
        let _v917 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v919 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v898 v919 
        let _v917 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v920 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v898 v920 
        let _v917 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v916 v898
        let _v917 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v916 v898
        let _v917 = () 
        #endif
#else
        v916 v898
        let _v917 = () 
        #endif
        _v917 
        let v921 : (string -> unit) = v17.l0
        v921 v898
and method25 () : string =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::env::current_dir()"
    let v2 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "$0.unwrap()"
    let v4 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "$0.display()"
    let v6 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v8 
    let _v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v10 
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v12 
    let _v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v17 
    #endif
#else
    let v20 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v20 
    #endif
    let v23 : std_string_String = _v7 
    let v28 : string = "fable_library_rust::String_::fromString($0)"
    let v29 : string = Fable.Core.RustInterop.emitRustExpr v23 v28 
    let _v0 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = null |> unbox<string>
    let _v0 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = null |> unbox<string>
    let _v0 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : string = null |> unbox<string>
    let _v0 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : string = null |> unbox<string>
    let _v0 = v39 
    #endif
#else
    let v42 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v43 : string = v42 ()
    let _v0 = v43 
    #endif
    let v44 : string = _v0 
    v44
and method26 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent()"
    let v9 : Ref<std_path_Path> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_path_Path> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v24 
    #endif
#else
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v27 
    #endif
    let v30 : std_string_String = _v14 
    let v35 : string = "fable_library_rust::String_::fromString($0)"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr v30 v35 
    let _v1 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : (string -> string) = System.IO.Path.GetDirectoryName
    let v38 : string = v37 v0
    let _v1 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = null |> unbox<string>
    let _v1 = v39 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : (string -> string) = System.IO.Path.GetDirectoryName
    let v43 : string = v42 v0
    let _v1 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : (string -> string) = System.IO.Path.GetDirectoryName
    let v45 : string = v44 v0
    let _v1 = v45 
    #endif
#else
    let v46 : (string -> string) = System.IO.Path.GetDirectoryName
    let v47 : string = v46 v0
    let _v1 = v47 
    #endif
    let v48 : string = _v1 
    v48
and method29 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v12 : bool =
        if v9 then
            let v10 : string = "$0.is_file()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            v11
        else
            false
    let _v1 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : bool = null |> unbox<bool>
    let _v1 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = "fs"
    let v20 : IFsExistsSync = Fable.Core.JsInterop.importAll v19 
    let v21 : string = "$0.existsSync($1)"
    let v22 : bool = Fable.Core.JsInterop.emitJsExpr struct (v20, v0) v21 
    let _v1 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _v1 = v23 
    #endif
#else
    let v26 : (string -> bool) = System.IO.File.Exists
    let v27 : bool = v26 v0
    let _v1 = v27 
    #endif
    let v28 : bool = _v1 
    v28
and method28 (v0 : string, v1 : string) : bool =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method29(v0)
    let v4 : bool = v3 = false
    let v57 : bool =
        if v4 then
            false
        else
            let v5 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v6 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v7 : string = "std::fs::read(&*$0)"
            let v8 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
            let v9 : string = "$0.unwrap()"
            let v10 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v9 
            let _v6 = v10 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v11 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v11 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v14 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v14 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v17 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v17 
            #endif
#if FABLE_COMPILER_PYTHON
            let v20 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v20 
            #endif
#else
            let v23 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v24 : string = "$0.to_vec()"
            let v25 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v23 v24 
            let _v6 = v25 
            #endif
            let v26 : Vec<uint8> = _v6 
            let v31 : Vec<uint8> = method16(v26)
            let v32 : string = "std::string::String::from_utf8($0)"
            let v33 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "$0.unwrap()"
            let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v34 
            let v36 : string = "fable_library_rust::String_::fromString($0)"
            let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let _v5 = v37 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v38 : string = null |> unbox<string>
            let _v5 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : string = null |> unbox<string>
            let _v5 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v44 : string = null |> unbox<string>
            let _v5 = v44 
            #endif
#if FABLE_COMPILER_PYTHON
            let v47 : string = null |> unbox<string>
            let _v5 = v47 
            #endif
#else
            let v50 : string = v0 |> System.IO.File.ReadAllText
            let _v5 = v50 
            #endif
            let v51 : string = _v5 
            let v56 : bool = v1 = v51
            v56
    let _v2 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : bool = null |> unbox<bool>
    let _v2 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : bool = null |> unbox<bool>
    let _v2 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : bool = null |> unbox<bool>
    let _v2 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : bool = null |> unbox<bool>
    let _v2 = v67 
    #endif
#else
    let v70 : bool = null |> unbox<bool>
    let _v2 = v70 
    #endif
    let v73 : bool = _v2 
    v73
and method31 (v0 : string) : string =
    v0
and closure24 () (v0 : std_io_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method32 () : (std_io_Error -> std_string_String) =
    closure24()
and closure25 () () : US13 =
    US13_0
and closure26 () (v0 : std_string_String) : US13 =
    US13_1(v0)
and closure28 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure27 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_4
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v799 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v614 : string = method8()
                let _v613 = v614 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v615 : string = method8()
                let _v613 = v615 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v616 : string = method8()
                let _v613 = v616 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v617 : string = method9()
                let _v613 = v617 
                #endif
#if FABLE_COMPILER_PYTHON
                let v618 : string = method9()
                let _v613 = v618 
                #endif
#else
                let v619 : string = method9()
                let _v613 = v619 
                #endif
                let v620 : string = _v613 
                let v625 : string = method10()
                let v626 : Mut4 = {l0 = v625} : Mut4
                let v627 : US0 = US0_1
                let v628 : string = $"%A{v627}"
                let v632 : string = $"{v628}"
                let v635 : unit = ()
                let v636 : (unit -> unit) = closure10(v626, v632)
                let v637 : unit = (fun () -> v636 (); v635) ()
                let v640 : string = v626.l0
                let v641 : (string []) = v640.Split v620 
                let v644 : string = v641.[int 0]
                let v647 : string = method10()
                let v648 : Mut4 = {l0 = v647} : Mut4
                let v649 : US0 = US0_4
                let v650 : string = $"%A{v649}"
                let v654 : string = $"{v650}"
                let v657 : unit = ()
                let v658 : (unit -> unit) = closure10(v648, v654)
                let v659 : unit = (fun () -> v658 (); v657) ()
                let v662 : string = v648.l0
                let v663 : bool = v662.StartsWith v644 
                let v669 : US1 =
                    if v663 then
                        let v666 : string = "Debug"
                        US1_0(v666)
                    else
                        US1_1
                match v669 with
                | US1_1 -> (* None *)
                    let v672 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v673 : string = method8()
                    let _v672 = v673 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v674 : string = method8()
                    let _v672 = v674 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v675 : string = method8()
                    let _v672 = v675 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v676 : string = method9()
                    let _v672 = v676 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v677 : string = method9()
                    let _v672 = v677 
                    #endif
#else
                    let v678 : string = method9()
                    let _v672 = v678 
                    #endif
                    let v679 : string = _v672 
                    let v684 : string = method10()
                    let v685 : Mut4 = {l0 = v684} : Mut4
                    let v686 : US0 = US0_2
                    let v687 : string = $"%A{v686}"
                    let v691 : string = $"{v687}"
                    let v694 : unit = ()
                    let v695 : (unit -> unit) = closure10(v685, v691)
                    let v696 : unit = (fun () -> v695 (); v694) ()
                    let v699 : string = v685.l0
                    let v700 : (string []) = v699.Split v679 
                    let v703 : string = v700.[int 0]
                    let v706 : string = method10()
                    let v707 : Mut4 = {l0 = v706} : Mut4
                    let v708 : US0 = US0_4
                    let v709 : string = $"%A{v708}"
                    let v713 : string = $"{v709}"
                    let v716 : unit = ()
                    let v717 : (unit -> unit) = closure10(v707, v713)
                    let v718 : unit = (fun () -> v717 (); v716) ()
                    let v721 : string = v707.l0
                    let v722 : bool = v721.StartsWith v703 
                    let v728 : US1 =
                        if v722 then
                            let v725 : string = "Info"
                            US1_0(v725)
                        else
                            US1_1
                    match v728 with
                    | US1_1 -> (* None *)
                        let v731 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v732 : string = method8()
                        let _v731 = v732 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v733 : string = method8()
                        let _v731 = v733 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v734 : string = method8()
                        let _v731 = v734 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v735 : string = method9()
                        let _v731 = v735 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v736 : string = method9()
                        let _v731 = v736 
                        #endif
#else
                        let v737 : string = method9()
                        let _v731 = v737 
                        #endif
                        let v738 : string = _v731 
                        let v743 : string = method10()
                        let v744 : Mut4 = {l0 = v743} : Mut4
                        let v745 : US0 = US0_3
                        let v746 : string = $"%A{v745}"
                        let v750 : string = $"{v746}"
                        let v753 : unit = ()
                        let v754 : (unit -> unit) = closure10(v744, v750)
                        let v755 : unit = (fun () -> v754 (); v753) ()
                        let v758 : string = v744.l0
                        let v759 : (string []) = v758.Split v738 
                        let v762 : string = v759.[int 0]
                        let v765 : string = method10()
                        let v766 : Mut4 = {l0 = v765} : Mut4
                        let v767 : US0 = US0_4
                        let v768 : string = $"%A{v767}"
                        let v772 : string = $"{v768}"
                        let v775 : unit = ()
                        let v776 : (unit -> unit) = closure10(v766, v772)
                        let v777 : unit = (fun () -> v776 (); v775) ()
                        let v780 : string = v766.l0
                        let v781 : bool = v780.StartsWith v762 
                        let v787 : US1 =
                            if v781 then
                                let v784 : string = "Warning"
                                US1_0(v784)
                            else
                                US1_1
                        match v787 with
                        | US1_1 -> (* None *)
                            let v790 : string = "Critical"
                            US1_0(v790)
                        | US1_0(v788) -> (* Some *)
                            US1_0(v788)
                    | US1_0(v729) -> (* Some *)
                        US1_0(v729)
                | US1_0(v670) -> (* Some *)
                    US1_0(v670)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v803 : string =
            match v799 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v800) -> (* Some *)
                v800
        let v804 : (unit -> string) = v803.ToLower
        let v805 : string = v804 ()
        let v808 : string = v805.PadLeft (7, ' ')
        let v822 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v823 : string = "inline_colorization::color_bright_red"
        let v824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v823 
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v825 
        let v827 : string = "inline_colorization::color_reset"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "\"{v824}{v826}{v828}\""
        let v830 : string = @$"format!(" + v829 + ")"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v830 
        let v832 : string = "fable_library_rust::String_::fromString($0)"
        let v833 : string = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let _v822 = v833 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = "inline_colorization::color_bright_red"
        let v835 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "&*$0"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v836 
        let v838 : string = "inline_colorization::color_reset"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v838 
        let v840 : string = "\"{v835}{v837}{v839}\""
        let v841 : string = @$"format!(" + v840 + ")"
        let v842 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v841 
        let v843 : string = "fable_library_rust::String_::fromString($0)"
        let v844 : string = Fable.Core.RustInterop.emitRustExpr v842 v843 
        let _v822 = v844 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v845 : string = "inline_colorization::color_bright_red"
        let v846 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v845 
        let v847 : string = "&*$0"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v847 
        let v849 : string = "inline_colorization::color_reset"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v849 
        let v851 : string = "\"{v846}{v848}{v850}\""
        let v852 : string = @$"format!(" + v851 + ")"
        let v853 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v852 
        let v854 : string = "fable_library_rust::String_::fromString($0)"
        let v855 : string = Fable.Core.RustInterop.emitRustExpr v853 v854 
        let _v822 = v855 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v856 : string = "\u001b[91m"
        let v857 : string = method11()
        let v858 : string = v856 + v808 
        let v859 : string = v858 + v857 
        let _v822 = v859 
        #endif
#if FABLE_COMPILER_PYTHON
        let v860 : string = "\u001b[91m"
        let v861 : string = method11()
        let v862 : string = v860 + v808 
        let v863 : string = v862 + v861 
        let _v822 = v863 
        #endif
#else
        let v864 : string = "\u001b[91m"
        let v865 : string = method11()
        let v866 : string = v864 + v808 
        let v867 : string = v866 + v865 
        let _v822 = v867 
        #endif
        let v868 : string = _v822 
        let v874 : int64 = v86.l0
        let v875 : string = method10()
        let v876 : Mut4 = {l0 = v875} : Mut4
        let v877 : string = "{ "
        let v878 : string = $"{v877}"
        let v881 : unit = ()
        let v882 : (unit -> unit) = closure10(v876, v878)
        let v883 : unit = (fun () -> v882 (); v881) ()
        let v886 : string = "dir"
        let v887 : string = $"{v886}"
        let v890 : unit = ()
        let v891 : (unit -> unit) = closure10(v876, v887)
        let v892 : unit = (fun () -> v891 (); v890) ()
        let v895 : string = " = "
        let v896 : string = $"{v895}"
        let v899 : unit = ()
        let v900 : (unit -> unit) = closure10(v876, v896)
        let v901 : unit = (fun () -> v900 (); v899) ()
        let v904 : string = $"{v0}"
        let v907 : unit = ()
        let v908 : (unit -> unit) = closure10(v876, v904)
        let v909 : unit = (fun () -> v908 (); v907) ()
        let v912 : string = "; "
        let v913 : string = $"{v912}"
        let v916 : unit = ()
        let v917 : (unit -> unit) = closure10(v876, v913)
        let v918 : unit = (fun () -> v917 (); v916) ()
        let v921 : string = "error"
        let v922 : string = $"{v921}"
        let v925 : unit = ()
        let v926 : (unit -> unit) = closure10(v876, v922)
        let v927 : unit = (fun () -> v926 (); v925) ()
        let v930 : string = $"{v895}"
        let v933 : unit = ()
        let v934 : (unit -> unit) = closure10(v876, v930)
        let v935 : unit = (fun () -> v934 (); v933) ()
        let v938 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v939 : string = "format!(\"{:#?}\", $0)"
        let v940 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v939 
        let v941 : string = "fable_library_rust::String_::fromString($0)"
        let v942 : string = Fable.Core.RustInterop.emitRustExpr v940 v941 
        let _v938 = v942 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v943 : string = "format!(\"{:#?}\", $0)"
        let v944 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v943 
        let v945 : string = "fable_library_rust::String_::fromString($0)"
        let v946 : string = Fable.Core.RustInterop.emitRustExpr v944 v945 
        let _v938 = v946 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v947 : string = "format!(\"{:#?}\", $0)"
        let v948 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v947 
        let v949 : string = "fable_library_rust::String_::fromString($0)"
        let v950 : string = Fable.Core.RustInterop.emitRustExpr v948 v949 
        let _v938 = v950 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v951 : string = $"%A{v1}"
        let _v938 = v951 
        #endif
#if FABLE_COMPILER_PYTHON
        let v954 : string = $"%A{v1}"
        let _v938 = v954 
        #endif
#else
        let v957 : string = $"%A{v1}"
        let _v938 = v957 
        #endif
        let v960 : string = _v938 
        let v965 : string = $"{v960}"
        let v968 : unit = ()
        let v969 : (unit -> unit) = closure10(v876, v965)
        let v970 : unit = (fun () -> v969 (); v968) ()
        let v973 : string = " }"
        let v974 : string = $"{v973}"
        let v977 : unit = ()
        let v978 : (unit -> unit) = closure10(v876, v974)
        let v979 : unit = (fun () -> v978 (); v977) ()
        let v982 : string = v876.l0
        let v983 : (unit -> string) = closure28()
        let v984 : string = $"{v484} {v868} #{v874} %s{v983 ()} / {v982}"
        let v987 : char list = []
        let v988 : (char list -> (char [])) = List.toArray
        let v989 : (char []) = v988 v987
        let v992 : string = v984.TrimStart v989 
        let v1010 : char list = []
        let v1011 : char list = '/' :: v1010 
        let v1014 : char list = ' ' :: v1011 
        let v1017 : (char list -> (char [])) = List.toArray
        let v1018 : (char []) = v1017 v1014
        let v1021 : string = v992.TrimEnd v1018 
        let v1039 : (string -> unit) = closure12()
        let v1040 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1041 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1021 v1041 
        let _v1040 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1042 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1021 v1042 
        let _v1040 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1043 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1021 v1043 
        let _v1040 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1039 v1021
        let _v1040 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1039 v1021
        let _v1040 = () 
        #endif
#else
        v1039 v1021
        let _v1040 = () 
        #endif
        _v1040 
        let v1044 : (string -> unit) = v18.l0
        v1044 v1021
and closure30 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure29 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method11()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method11()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method11()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method10()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure10(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "dir"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure10(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"{v0}"
        let v657 : unit = ()
        let v658 : (unit -> unit) = closure10(v626, v654)
        let v659 : unit = (fun () -> v658 (); v657) ()
        let v662 : string = " }"
        let v663 : string = $"{v662}"
        let v666 : unit = ()
        let v667 : (unit -> unit) = closure10(v626, v663)
        let v668 : unit = (fun () -> v667 (); v666) ()
        let v671 : string = v626.l0
        let v672 : (unit -> string) = closure30()
        let v673 : string = $"{v483} {v618} #{v624} %s{v672 ()} / {v671}"
        let v676 : char list = []
        let v677 : (char list -> (char [])) = List.toArray
        let v678 : (char []) = v677 v676
        let v681 : string = v673.TrimStart v678 
        let v699 : char list = []
        let v700 : char list = '/' :: v699 
        let v703 : char list = ' ' :: v700 
        let v706 : (char list -> (char [])) = List.toArray
        let v707 : (char []) = v706 v703
        let v710 : string = v681.TrimEnd v707 
        let v728 : (string -> unit) = closure12()
        let v729 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v730 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v730 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v731 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v731 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v732 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v732 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v728 v710
        let _v729 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v728 v710
        let _v729 = () 
        #endif
#else
        v728 v710
        let _v729 = () 
        #endif
        _v729 
        let v733 : (string -> unit) = v17.l0
        v733 v710
and method35 (v0 : string) : string =
    v0
and method34 (v0 : bool, v1 : string) : unit =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method35(v1)
    let v4 : bool = method21(v3)
    if v4 then
        if v0 then
            let v5 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v5 
            ()
        else
            let v6 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v6 
            ()
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let _v2 = () 
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    let _v2 = () 
    #endif
    _v2 
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method34(v1, v0)
and method33 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method36 (v0 : string) : (unit -> unit) =
    closure31(v0)
and closure33 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure32 (v0 : string, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_1
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v616 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : string = "Debug"
                US1_0(v613)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v620 : string =
            match v616 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v617) -> (* Some *)
                v617
        let v621 : (unit -> string) = v620.ToLower
        let v622 : string = v621 ()
        let v625 : string = v622.PadLeft (7, ' ')
        let v639 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v640 : string = "inline_colorization::color_bright_blue"
        let v641 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v640 
        let v642 : string = "&*$0"
        let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v642 
        let v644 : string = "inline_colorization::color_reset"
        let v645 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v644 
        let v646 : string = "\"{v641}{v643}{v645}\""
        let v647 : string = @$"format!(" + v646 + ")"
        let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "fable_library_rust::String_::fromString($0)"
        let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
        let _v639 = v650 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v651 : string = "inline_colorization::color_bright_blue"
        let v652 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v651 
        let v653 : string = "&*$0"
        let v654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v653 
        let v655 : string = "inline_colorization::color_reset"
        let v656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v655 
        let v657 : string = "\"{v652}{v654}{v656}\""
        let v658 : string = @$"format!(" + v657 + ")"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v639 = v661 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v662 : string = "inline_colorization::color_bright_blue"
        let v663 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v662 
        let v664 : string = "&*$0"
        let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v664 
        let v666 : string = "inline_colorization::color_reset"
        let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v666 
        let v668 : string = "\"{v663}{v665}{v667}\""
        let v669 : string = @$"format!(" + v668 + ")"
        let v670 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "fable_library_rust::String_::fromString($0)"
        let v672 : string = Fable.Core.RustInterop.emitRustExpr v670 v671 
        let _v639 = v672 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v673 : string = "\u001b[94m"
        let v674 : string = method11()
        let v675 : string = v673 + v625 
        let v676 : string = v675 + v674 
        let _v639 = v676 
        #endif
#if FABLE_COMPILER_PYTHON
        let v677 : string = "\u001b[94m"
        let v678 : string = method11()
        let v679 : string = v677 + v625 
        let v680 : string = v679 + v678 
        let _v639 = v680 
        #endif
#else
        let v681 : string = "\u001b[94m"
        let v682 : string = method11()
        let v683 : string = v681 + v625 
        let v684 : string = v683 + v682 
        let _v639 = v684 
        #endif
        let v685 : string = _v639 
        let v691 : int64 = v86.l0
        let v692 : string = method10()
        let v693 : Mut4 = {l0 = v692} : Mut4
        let v694 : string = "{ "
        let v695 : string = $"{v694}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure10(v693, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = "dir"
        let v704 : string = $"{v703}"
        let v707 : unit = ()
        let v708 : (unit -> unit) = closure10(v693, v704)
        let v709 : unit = (fun () -> v708 (); v707) ()
        let v712 : string = " = "
        let v713 : string = $"{v712}"
        let v716 : unit = ()
        let v717 : (unit -> unit) = closure10(v693, v713)
        let v718 : unit = (fun () -> v717 (); v716) ()
        let v721 : string = $"{v0}"
        let v724 : unit = ()
        let v725 : (unit -> unit) = closure10(v693, v721)
        let v726 : unit = (fun () -> v725 (); v724) ()
        let v729 : string = "; "
        let v730 : string = $"{v729}"
        let v733 : unit = ()
        let v734 : (unit -> unit) = closure10(v693, v730)
        let v735 : unit = (fun () -> v734 (); v733) ()
        let v738 : string = "result"
        let v739 : string = $"{v738}"
        let v742 : unit = ()
        let v743 : (unit -> unit) = closure10(v693, v739)
        let v744 : unit = (fun () -> v743 (); v742) ()
        let v747 : string = $"{v712}"
        let v750 : unit = ()
        let v751 : (unit -> unit) = closure10(v693, v747)
        let v752 : unit = (fun () -> v751 (); v750) ()
        let v755 : string = $"{v1}"
        let v758 : unit = ()
        let v759 : (unit -> unit) = closure10(v693, v755)
        let v760 : unit = (fun () -> v759 (); v758) ()
        let v763 : string = " }"
        let v764 : string = $"{v763}"
        let v767 : unit = ()
        let v768 : (unit -> unit) = closure10(v693, v764)
        let v769 : unit = (fun () -> v768 (); v767) ()
        let v772 : string = v693.l0
        let v773 : (unit -> string) = closure33()
        let v774 : string = $"{v484} {v685} #{v691} %s{v773 ()} / {v772}"
        let v777 : char list = []
        let v778 : (char list -> (char [])) = List.toArray
        let v779 : (char []) = v778 v777
        let v782 : string = v774.TrimStart v779 
        let v800 : char list = []
        let v801 : char list = '/' :: v800 
        let v804 : char list = ' ' :: v801 
        let v807 : (char list -> (char [])) = List.toArray
        let v808 : (char []) = v807 v804
        let v811 : string = v782.TrimEnd v808 
        let v829 : (string -> unit) = closure12()
        let v830 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v831 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v811 v831 
        let _v830 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v832 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v811 v832 
        let _v830 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v833 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v811 v833 
        let _v830 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v829 v811
        let _v830 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v829 v811
        let _v830 = () 
        #endif
#else
        v829 v811
        let _v830 = () 
        #endif
        _v830 
        let v834 : (string -> unit) = v18.l0
        v834 v811
and method39 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.file_name()"
    let v9 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.to_os_string()"
    let v13 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.to_str()"
    let v15 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "$0.unwrap()"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "String::from($0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "fable_library_rust::String_::fromString($0)"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let _v1 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : US10 = US10_1
    let v23 : US11 = US11_2(v22)
    let v24 : string = $"file_system.get_file_name / target: {v23} / path: {v0}"
    let v25 : string = failwith<string> v24
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : string = null |> unbox<string>
    let _v1 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : US10 = US10_0
    let v30 : US11 = US11_3(v29)
    let v31 : string = $"file_system.get_file_name / target: {v30} / path: {v0}"
    let v32 : string = failwith<string> v31
    let _v1 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v33 : US10 = US10_0
    let v34 : US11 = US11_4(v33)
    let v35 : string = $"file_system.get_file_name / target: {v34} / path: {v0}"
    let v36 : string = failwith<string> v35
    let _v1 = v36 
    #endif
#else
    let v37 : (string -> string) = System.IO.Path.GetFileName
    let v38 : string = v37 v0
    let _v1 = v38 
    #endif
    let v39 : string = _v1 
    v39
and closure36 () () : string =
    let v0 : string = "file_system.delete_directory_async"
    v0
and closure35 (v0 : string, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_1
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v616 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : string = "Debug"
                US1_0(v613)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v620 : string =
            match v616 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v617) -> (* Some *)
                v617
        let v621 : (unit -> string) = v620.ToLower
        let v622 : string = v621 ()
        let v625 : string = v622.PadLeft (7, ' ')
        let v639 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v640 : string = "inline_colorization::color_bright_blue"
        let v641 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v640 
        let v642 : string = "&*$0"
        let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v642 
        let v644 : string = "inline_colorization::color_reset"
        let v645 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v644 
        let v646 : string = "\"{v641}{v643}{v645}\""
        let v647 : string = @$"format!(" + v646 + ")"
        let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "fable_library_rust::String_::fromString($0)"
        let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
        let _v639 = v650 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v651 : string = "inline_colorization::color_bright_blue"
        let v652 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v651 
        let v653 : string = "&*$0"
        let v654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v653 
        let v655 : string = "inline_colorization::color_reset"
        let v656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v655 
        let v657 : string = "\"{v652}{v654}{v656}\""
        let v658 : string = @$"format!(" + v657 + ")"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v639 = v661 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v662 : string = "inline_colorization::color_bright_blue"
        let v663 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v662 
        let v664 : string = "&*$0"
        let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v664 
        let v666 : string = "inline_colorization::color_reset"
        let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v666 
        let v668 : string = "\"{v663}{v665}{v667}\""
        let v669 : string = @$"format!(" + v668 + ")"
        let v670 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "fable_library_rust::String_::fromString($0)"
        let v672 : string = Fable.Core.RustInterop.emitRustExpr v670 v671 
        let _v639 = v672 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v673 : string = "\u001b[94m"
        let v674 : string = method11()
        let v675 : string = v673 + v625 
        let v676 : string = v675 + v674 
        let _v639 = v676 
        #endif
#if FABLE_COMPILER_PYTHON
        let v677 : string = "\u001b[94m"
        let v678 : string = method11()
        let v679 : string = v677 + v625 
        let v680 : string = v679 + v678 
        let _v639 = v680 
        #endif
#else
        let v681 : string = "\u001b[94m"
        let v682 : string = method11()
        let v683 : string = v681 + v625 
        let v684 : string = v683 + v682 
        let _v639 = v684 
        #endif
        let v685 : string = _v639 
        let v691 : int64 = v86.l0
        let v692 : string = method39(v0)
        let v693 : string = method10()
        let v694 : Mut4 = {l0 = v693} : Mut4
        let v695 : string = "{ "
        let v696 : string = $"{v695}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v694, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "ex"
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure10(v694, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = " = "
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v694, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v1}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v694, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = "; "
        let v731 : string = $"{v730}"
        let v734 : unit = ()
        let v735 : (unit -> unit) = closure10(v694, v731)
        let v736 : unit = (fun () -> v735 (); v734) ()
        let v739 : string = "path"
        let v740 : string = $"{v739}"
        let v743 : unit = ()
        let v744 : (unit -> unit) = closure10(v694, v740)
        let v745 : unit = (fun () -> v744 (); v743) ()
        let v748 : string = $"{v713}"
        let v751 : unit = ()
        let v752 : (unit -> unit) = closure10(v694, v748)
        let v753 : unit = (fun () -> v752 (); v751) ()
        let v756 : string = $"{v692}"
        let v759 : unit = ()
        let v760 : (unit -> unit) = closure10(v694, v756)
        let v761 : unit = (fun () -> v760 (); v759) ()
        let v764 : string = " }"
        let v765 : string = $"{v764}"
        let v768 : unit = ()
        let v769 : (unit -> unit) = closure10(v694, v765)
        let v770 : unit = (fun () -> v769 (); v768) ()
        let v773 : string = v694.l0
        let v774 : (unit -> string) = closure36()
        let v775 : string = $"{v484} {v685} #{v691} %s{v774 ()} / {v773}"
        let v778 : char list = []
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v778
        let v783 : string = v775.TrimStart v780 
        let v801 : char list = []
        let v802 : char list = '/' :: v801 
        let v805 : char list = ' ' :: v802 
        let v808 : (char list -> (char [])) = List.toArray
        let v809 : (char []) = v808 v805
        let v812 : string = v783.TrimEnd v809 
        let v830 : (string -> unit) = closure12()
        let v831 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v832 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v832 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v833 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v834 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v834 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v830 v812
        let _v831 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v830 v812
        let _v831 = () 
        #endif
#else
        v830 v812
        let _v831 = () 
        #endif
        _v831 
        let v835 : (string -> unit) = v18.l0
        v835 v812
and method38 (v0 : string, v1 : int64) : Async<int64> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v15 
    #endif
#else
    let v18 : Async<int64> option = None
    let mutable _v18 = v18 
    async {
    try
    let v19 : bool = true
    method34(v19, v0)
    return v1 
    with ex ->
    let v20 : exn = ex
    let v21 : int64 = v1 % 100L
    let v22 : bool = v21 = 0L
    if v22 then
        let v23 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v24 : string = $"%A{v20}"
        let _v23 = v24 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v27 : string = $"%A{v20}"
        let _v23 = v27 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v30 : string = $"%A{v20}"
        let _v23 = v30 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v33 : string = $"%A{v20}"
        let _v23 = v33 
        #endif
#if FABLE_COMPILER_PYTHON
        let v36 : string = $"%A{v20}"
        let _v23 = v36 
        #endif
#else
        let v39 : string = $"{v20.GetType ()}: {v20.Message}"
        let _v23 = v39 
        #endif
        let v40 : string = _v23 
        let v45 : unit = ()
        let v46 : (unit -> unit) = closure35(v0, v40)
        let v47 : unit = (fun () -> v46 (); v45) ()
        ()
    let v882 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v883 : Async<unit> = null |> unbox<Async<unit>>
    let _v882 = v883 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v886 : Async<unit> = null |> unbox<Async<unit>>
    let _v882 = v886 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v889 : Async<unit> = null |> unbox<Async<unit>>
    let _v882 = v889 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v892 : Async<unit> = null |> unbox<Async<unit>>
    let _v882 = v892 
    #endif
#if FABLE_COMPILER_PYTHON
    let v895 : Async<unit> = null |> unbox<Async<unit>>
    let _v882 = v895 
    #endif
#else
    let v898 : (int32 -> Async<unit>) = Async.Sleep
    let v899 : Async<unit> = v898 10
    let _v882 = v899 
    #endif
    let v900 : Async<unit> = _v882 
    do! v900 
    let v905 : int64 = v1 + 1L
    let v906 : Async<int64> = method38(v0, v905)
    return! v906 
    (*
    let v907 : int64 = *)
    }
    |> fun x -> _v18 <- Some x
    let v908 : Async<int64> = match _v18 with Some x -> x | None -> failwith "async.new_async_unit / _v18=None"
    let _v2 = v908 
    #endif
    let v909 : Async<int64> = _v2 
    v909
and closure34 (v0 : string) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v14 
    #endif
#else
    let v17 : int64 = 0L
    let v18 : Async<int64> = method38(v0, v17)
    let _v1 = v18 
    #endif
    let v19 : Async<int64> = _v1 
    let v24 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v28 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v37 
    #endif
#else
    let v40 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v41 : Async<unit> = v40 v19
    let _v24 = v41 
    #endif
    let v42 : Async<unit> = _v24 
    let v47 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v47 = () 
    #endif
#else
    let v48 : (Async<unit> -> unit) = Async.RunSynchronously
    v48 v42
    let _v47 = () 
    #endif
    _v47 
    ()
and method37 (v0 : string) : (unit -> unit) =
    closure34(v0)
and method40 (v0 : string) : (unit -> unit) =
    closure34(v0)
and method30 (v0 : string) : System.IDisposable =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method31(v0)
    let v3 : string = "std::fs::create_dir_all(&*$0)"
    let v4 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (std_io_Error -> std_string_String) = method32()
    let v6 : string = "$0.map_err(|x| $1(x))"
    let v7 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v6 
    let v8 : (unit -> US13) = closure25()
    let v9 : (std_string_String -> US13) = closure26()
    let v10 : US13 = match v7 with Ok () -> v8 () | Error x -> v9 x
    match v10 with
    | US13_1(v747) -> (* Error *)
        let v748 : unit = ()
        let v749 : (unit -> unit) = closure27(v2, v747)
        let v750 : unit = (fun () -> v749 (); v748) ()
        ()
    | US13_0 -> (* Ok *)
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure29(v2)
        let v13 : unit = (fun () -> v12 (); v11) ()
        ()
    let v1794 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1795 : (unit -> unit) = method33(v2)
    let v1796 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1795 "$0()" )
    let _v1794 = v1796 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1797 : (unit -> unit) = method33(v2)
    let v1798 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1797 "$0()" )
    let _v1794 = v1798 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1799 : (unit -> unit) = method33(v2)
    let v1800 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1799 "$0()" )
    let _v1794 = v1800 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1801 : (unit -> unit) = method36(v2)
    let v1802 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1801 () }
    let _v1794 = v1802 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1803 : (unit -> unit) = method36(v2)
    let v1804 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1803 () }
    let _v1794 = v1804 
    #endif
#else
    let v1805 : (unit -> unit) = method36(v2)
    let v1806 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1805 () }
    let _v1794 = v1806 
    #endif
    let v1807 : System.IDisposable = _v1794 
    let _v1 = v1807 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1811 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v1811 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1814 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v1814 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1817 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1818 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1817 = v1818 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1821 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1817 = v1821 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1824 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1817 = v1824 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1827 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1817 = v1827 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1830 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1817 = v1830 
    #endif
#else
    let v1833 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v1834 : System.IO.DirectoryInfo = v1833 v0
    let _v1817 = v1834 
    #endif
    let v1835 : System.IO.DirectoryInfo = _v1817 
    let v1840 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1841 : bool = null |> unbox<bool>
    let _v1840 = v1841 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1844 : bool = null |> unbox<bool>
    let _v1840 = v1844 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1847 : bool = null |> unbox<bool>
    let _v1840 = v1847 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1850 : bool = null |> unbox<bool>
    let _v1840 = v1850 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1853 : bool = null |> unbox<bool>
    let _v1840 = v1853 
    #endif
#else
    let v1856 : bool = v1835.Exists
    let _v1840 = v1856 
    #endif
    let v1857 : bool = _v1840 
    let v1862 : bool = v1857 = false
    if v1862 then
        let v1863 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1864 : System.DateTime = null |> unbox<System.DateTime>
        let _v1863 = v1864 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1867 : System.DateTime = null |> unbox<System.DateTime>
        let _v1863 = v1867 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1870 : System.DateTime = null |> unbox<System.DateTime>
        let _v1863 = v1870 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1873 : System.DateTime = null |> unbox<System.DateTime>
        let _v1863 = v1873 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1876 : System.DateTime = null |> unbox<System.DateTime>
        let _v1863 = v1876 
        #endif
#else
        let v1879 : System.DateTime = v1835.CreationTime
        let _v1863 = v1879 
        #endif
        let v1880 : System.DateTime = _v1863 
        let v1885 : obj = {| Exists = v1857; CreationTime = v1880 |}
        let v1886 : string = $"%A{v1885}"
        let v1889 : unit = ()
        let v1890 : (unit -> unit) = closure32(v0, v1886)
        let v1891 : unit = (fun () -> v1890 (); v1889) ()
        ()
    let v2725 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2726 : (unit -> unit) = method37(v0)
    let v2727 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2726 "$0()" )
    let _v2725 = v2727 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2728 : (unit -> unit) = method37(v0)
    let v2729 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2728 "$0()" )
    let _v2725 = v2729 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2730 : (unit -> unit) = method37(v0)
    let v2731 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2730 "$0()" )
    let _v2725 = v2731 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2732 : (unit -> unit) = method40(v0)
    let v2733 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2732 () }
    let _v2725 = v2733 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2734 : (unit -> unit) = method40(v0)
    let v2735 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2734 () }
    let _v2725 = v2735 
    #endif
#else
    let v2736 : (unit -> unit) = method40(v0)
    let v2737 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2736 () }
    let _v2725 = v2737 
    #endif
    let v2738 : System.IDisposable = _v2725 
    let _v1 = v2738 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2742 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2743 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2742 = v2743 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2746 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2742 = v2746 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2749 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2742 = v2749 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2752 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2742 = v2752 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2755 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2742 = v2755 
    #endif
#else
    let v2758 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v2759 : System.IO.DirectoryInfo = v2758 v0
    let _v2742 = v2759 
    #endif
    let v2760 : System.IO.DirectoryInfo = _v2742 
    let v2765 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2766 : bool = null |> unbox<bool>
    let _v2765 = v2766 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2769 : bool = null |> unbox<bool>
    let _v2765 = v2769 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2772 : bool = null |> unbox<bool>
    let _v2765 = v2772 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2775 : bool = null |> unbox<bool>
    let _v2765 = v2775 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2778 : bool = null |> unbox<bool>
    let _v2765 = v2778 
    #endif
#else
    let v2781 : bool = v2760.Exists
    let _v2765 = v2781 
    #endif
    let v2782 : bool = _v2765 
    let v2787 : bool = v2782 = false
    if v2787 then
        let v2788 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2789 : System.DateTime = null |> unbox<System.DateTime>
        let _v2788 = v2789 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2792 : System.DateTime = null |> unbox<System.DateTime>
        let _v2788 = v2792 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2795 : System.DateTime = null |> unbox<System.DateTime>
        let _v2788 = v2795 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2798 : System.DateTime = null |> unbox<System.DateTime>
        let _v2788 = v2798 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2801 : System.DateTime = null |> unbox<System.DateTime>
        let _v2788 = v2801 
        #endif
#else
        let v2804 : System.DateTime = v2760.CreationTime
        let _v2788 = v2804 
        #endif
        let v2805 : System.DateTime = _v2788 
        let v2810 : obj = {| Exists = v2782; CreationTime = v2805 |}
        let v2811 : string = $"%A{v2810}"
        let v2814 : unit = ()
        let v2815 : (unit -> unit) = closure32(v0, v2811)
        let v2816 : unit = (fun () -> v2815 (); v2814) ()
        ()
    let v3650 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3651 : (unit -> unit) = method37(v0)
    let v3652 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3651 "$0()" )
    let _v3650 = v3652 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3653 : (unit -> unit) = method37(v0)
    let v3654 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3653 "$0()" )
    let _v3650 = v3654 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3655 : (unit -> unit) = method37(v0)
    let v3656 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3655 "$0()" )
    let _v3650 = v3656 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3657 : (unit -> unit) = method40(v0)
    let v3658 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3657 () }
    let _v3650 = v3658 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3659 : (unit -> unit) = method40(v0)
    let v3660 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3659 () }
    let _v3650 = v3660 
    #endif
#else
    let v3661 : (unit -> unit) = method40(v0)
    let v3662 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3661 () }
    let _v3650 = v3662 
    #endif
    let v3663 : System.IDisposable = _v3650 
    let _v1 = v3663 
    #endif
#else
    let v3667 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3668 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3667 = v3668 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3671 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3667 = v3671 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3674 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3667 = v3674 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3677 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3667 = v3677 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3680 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3667 = v3680 
    #endif
#else
    let v3683 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v3684 : System.IO.DirectoryInfo = v3683 v0
    let _v3667 = v3684 
    #endif
    let v3685 : System.IO.DirectoryInfo = _v3667 
    let v3690 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3691 : bool = null |> unbox<bool>
    let _v3690 = v3691 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3694 : bool = null |> unbox<bool>
    let _v3690 = v3694 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3697 : bool = null |> unbox<bool>
    let _v3690 = v3697 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3700 : bool = null |> unbox<bool>
    let _v3690 = v3700 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3703 : bool = null |> unbox<bool>
    let _v3690 = v3703 
    #endif
#else
    let v3706 : bool = v3685.Exists
    let _v3690 = v3706 
    #endif
    let v3707 : bool = _v3690 
    let v3712 : bool = v3707 = false
    if v3712 then
        let v3713 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v3714 : System.DateTime = null |> unbox<System.DateTime>
        let _v3713 = v3714 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v3717 : System.DateTime = null |> unbox<System.DateTime>
        let _v3713 = v3717 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v3720 : System.DateTime = null |> unbox<System.DateTime>
        let _v3713 = v3720 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v3723 : System.DateTime = null |> unbox<System.DateTime>
        let _v3713 = v3723 
        #endif
#if FABLE_COMPILER_PYTHON
        let v3726 : System.DateTime = null |> unbox<System.DateTime>
        let _v3713 = v3726 
        #endif
#else
        let v3729 : System.DateTime = v3685.CreationTime
        let _v3713 = v3729 
        #endif
        let v3730 : System.DateTime = _v3713 
        let v3735 : obj = {| Exists = v3707; CreationTime = v3730 |}
        let v3736 : string = $"%A{v3735}"
        let v3739 : unit = ()
        let v3740 : (unit -> unit) = closure32(v0, v3736)
        let v3741 : unit = (fun () -> v3740 (); v3739) ()
        ()
    let v4575 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4576 : (unit -> unit) = method37(v0)
    let v4577 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4576 "$0()" )
    let _v4575 = v4577 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4578 : (unit -> unit) = method37(v0)
    let v4579 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4578 "$0()" )
    let _v4575 = v4579 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4580 : (unit -> unit) = method37(v0)
    let v4581 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4580 "$0()" )
    let _v4575 = v4581 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4582 : (unit -> unit) = method40(v0)
    let v4583 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4582 () }
    let _v4575 = v4583 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4584 : (unit -> unit) = method40(v0)
    let v4585 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4584 () }
    let _v4575 = v4585 
    #endif
#else
    let v4586 : (unit -> unit) = method40(v0)
    let v4587 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4586 () }
    let _v4575 = v4587 
    #endif
    let v4588 : System.IDisposable = _v4575 
    let _v1 = v4588 
    #endif
    let v4592 : System.IDisposable = _v1 
    v4592
and method41 (v0 : string) : string =
    v0
and method27 (v0 : string, v1 : string) : unit =
    let v2 : bool = method28(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string = method26(v0)
        let v5 : bool = method21(v4)
        let v6 : bool = v5 = false
        if v6 then
            let v7 : System.IDisposable = method30(v4)
            ()
        let v8 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v9 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v9 
        let _v8 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v8 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v8 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v8 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v8 = () 
        #endif
#else
        let v10 : string = method41(v1)
        System.IO.File.WriteAllText (v0, v10)
        let _v8 = () 
        #endif
        _v8 
        ()
and method43 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method45 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure39 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure38 () (v0 : char) : (UH0 -> UH0) =
    closure39(v0)
and method46 () : (char -> (UH0 -> UH0)) =
    closure38()
and method47 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v19 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v13 : (char -> string) = _.ToString()
                let v14 : string = v13 v4
                let v17 : (string -> System.Text.StringBuilder) = v1.Append
                let v18 : System.Text.StringBuilder = v17 v14
                v1
        method47(v5, v19, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure37 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '"'
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method45(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method46()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method47(v33, v1, v2, v3)
            US15_0(v7, v15, v38, v39, v40)
        else
            let v42 : (string -> int32) = String.length
            let v43 : int32 = v42 v0
            let v44 : string = "\n"
            let v45 : int32 = v0.IndexOf v44 
            let v46 : int32 = v45 - 1
            let v47 : bool = -2 = v46
            let v48 : int32 =
                if v47 then
                    v43
                else
                    v46
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 0
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v0.[int v50..int v52]
            let v54 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v53}"
            let v55 : int32 = v3 - 1
            let v56 : (int32 -> (string -> string)) = String.replicate
            let v57 : (string -> string) = v56 v55
            let v58 : string = " "
            let v59 : string = v57 v58
            let v62 : string = "^"
            let v63 : string = v59 + v62 
            let v64 : string = $"{v54}
{v63}
"
            US15_1(v64)
and closure40 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '''
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method45(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method46()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method47(v33, v1, v2, v3)
            US15_0(v7, v15, v38, v39, v40)
        else
            let v42 : (string -> int32) = String.length
            let v43 : int32 = v42 v0
            let v44 : string = "\n"
            let v45 : int32 = v0.IndexOf v44 
            let v46 : int32 = v45 - 1
            let v47 : bool = -2 = v46
            let v48 : int32 =
                if v47 then
                    v43
                else
                    v46
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 0
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v0.[int v50..int v52]
            let v54 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v53}"
            let v55 : int32 = v3 - 1
            let v56 : (int32 -> (string -> string)) = String.replicate
            let v57 : (string -> string) = v56 v55
            let v58 : string = " "
            let v59 : string = v57 v58
            let v62 : string = "^"
            let v63 : string = v59 + v62 
            let v64 : string = $"{v54}
{v63}
"
            US15_1(v64)
and method48 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US15 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US15 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US15_1(v13) -> (* Error *)
            method48(v0, v1, v6)
        | US15_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "choice / no parsers succeeded"
        US15_1(v3)
and method49 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US17_1
        let v15 : char =
            match v11 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method49(v0, v17)
and method50 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v70 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ''' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : (char list -> (char [])) = List.toArray
            let v14 : (char []) = v13 v10
            let v17 : string = $"parsing.none_of / unexpected end of input / chars: %A{v14} / s: %A{struct (v2, v3, v4)}"
            US15_1(v17)
        else
            let v19 : char = v1.[int 0]
            let v20 : (string -> int32) = String.length
            let v21 : int32 = v20 v1
            let v22 : (int32 -> int32) = int32
            let v23 : int32 = v22 1
            let v24 : (int32 -> int32) = int32
            let v25 : int32 = v24 v21
            let v26 : string = v1.[int v23..int v25]
            let v27 : int64 = 0L
            let v28 : bool = method49(v19, v27)
            let v29 : bool = v28 = false
            if v29 then
                let v30 : (char -> string) = _.ToString()
                let v31 : string = v30 v19
                let v34 : int32 = v31.Length
                let v35 : (char []) = Array.zeroCreate<char> (v34)
                let v36 : Mut5 = {l0 = 0} : Mut5
                while method45(v34, v36) do
                    let v38 : int32 = v36.l0
                    let v39 : char = v31.[int v38]
                    v35.[int v38] <- v39
                    let v40 : int32 = v38 + 1
                    v36.l0 <- v40
                    ()
                let v41 : char list = v35 |> Array.toList
                let v42 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v43 : (char -> (UH0 -> UH0)) = method46()
                let v44 : (char list -> (UH0 -> UH0)) = v42 v43
                let v45 : (UH0 -> UH0) = v44 v41
                let v46 : UH0 = UH0_0
                let v47 : UH0 = v45 v46
                let struct (v52 : System.Text.StringBuilder, v53 : int32, v54 : int32) = method47(v47, v2, v3, v4)
                US15_0(v19, v26, v52, v53, v54)
            else
                let v56 : char list = []
                let v57 : char list = ''' :: v56 
                let v60 : char list = '"' :: v57 
                let v63 : (char list -> (char [])) = List.toArray
                let v64 : (char []) = v63 v60
                let v67 : string = $"parsing.none_of / unexpected char: '{v19}' / chars: %A{v64} / s: %A{struct (v2, v3, v4)}"
                US15_1(v67)
    let v82 : US15 =
        match v70 with
        | US15_1(v79) -> (* Error *)
            US15_1(v79)
        | US15_0(v71, v72, v73, v74, v75) -> (* Ok *)
            let v76 : bool = '\\' = v71
            let v77 : char =
                if v76 then
                    '/'
                else
                    v71
            US15_0(v77, v72, v73, v74, v75)
    match v82 with
    | US15_1(v94) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v83, v84, v85, v86, v87) -> (* Ok *)
        let v88 : (char -> string) = _.ToString()
        let v89 : string = v88 v83
        let v92 : string = v0 + v89 
        method50(v92, v84, v85, v86, v87)
and method51 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US15 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method51(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US15_1(v5)
and method52 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method52(v0, v21)
and method53 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = ''' :: v7 
            let v13 : char list = '"' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method52(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method45(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method46()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method47(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = ' ' :: v59 
                let v63 : char list = ''' :: v60 
                let v66 : char list = '"' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v88 : US15 =
        match v76 with
        | US15_1(v85) -> (* Error *)
            US15_1(v85)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : bool = '\\' = v77
            let v83 : char =
                if v82 then
                    '/'
                else
                    v77
            US15_0(v83, v78, v79, v80, v81)
    match v88 with
    | US15_1(v100) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v89, v90, v91, v92, v93) -> (* Ok *)
        let v94 : (char -> string) = _.ToString()
        let v95 : string = v94 v89
        let v98 : string = v0 + v95 
        method53(v98, v90, v91, v92, v93)
and method54 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method54(v0, v6)
        else
            v1
and method55 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v42 : US15 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US15_1(v6)
        else
            let v8 : char = v1.[int 0]
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v1
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v1.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v8
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method45(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method46()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method47(v33, v2, v3, v4)
            US15_0(v8, v15, v38, v39, v40)
    match v42 with
    | US15_1(v54) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v43, v44, v45, v46, v47) -> (* Ok *)
        let v48 : (char -> string) = _.ToString()
        let v49 : string = v48 v43
        let v52 : string = v0 + v49 
        method55(v52, v44, v45, v46, v47)
and method44 (v0 : string) : US14 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v11 : System.Text.StringBuilder = v10 v6
    let v12 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure37()
    let v13 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure40()
    let v14 : UH1 = UH1_0
    let v15 : UH1 = UH1_1(v13, v14)
    let v16 : UH1 = UH1_1(v12, v15)
    let v17 : US15 = method48(v7, v11, v16)
    let v153 : US16 =
        match v17 with
        | US15_1(v150) -> (* Error *)
            US16_1(v150)
        | US15_0(v18, v19, v20, v21, v22) -> (* Ok *)
            let v23 : bool = "" = v19
            let v88 : US15 =
                if v23 then
                    let v24 : char list = []
                    let v25 : char list = ''' :: v24 
                    let v28 : char list = '"' :: v25 
                    let v31 : (char list -> (char [])) = List.toArray
                    let v32 : (char []) = v31 v28
                    let v35 : string = $"parsing.none_of / unexpected end of input / chars: %A{v32} / s: %A{struct (v20, v21, v22)}"
                    US15_1(v35)
                else
                    let v37 : char = v19.[int 0]
                    let v38 : (string -> int32) = String.length
                    let v39 : int32 = v38 v19
                    let v40 : (int32 -> int32) = int32
                    let v41 : int32 = v40 1
                    let v42 : (int32 -> int32) = int32
                    let v43 : int32 = v42 v39
                    let v44 : string = v19.[int v41..int v43]
                    let v45 : int64 = 0L
                    let v46 : bool = method49(v37, v45)
                    let v47 : bool = v46 = false
                    if v47 then
                        let v48 : (char -> string) = _.ToString()
                        let v49 : string = v48 v37
                        let v52 : int32 = v49.Length
                        let v53 : (char []) = Array.zeroCreate<char> (v52)
                        let v54 : Mut5 = {l0 = 0} : Mut5
                        while method45(v52, v54) do
                            let v56 : int32 = v54.l0
                            let v57 : char = v49.[int v56]
                            v53.[int v56] <- v57
                            let v58 : int32 = v56 + 1
                            v54.l0 <- v58
                            ()
                        let v59 : char list = v53 |> Array.toList
                        let v60 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v61 : (char -> (UH0 -> UH0)) = method46()
                        let v62 : (char list -> (UH0 -> UH0)) = v60 v61
                        let v63 : (UH0 -> UH0) = v62 v59
                        let v64 : UH0 = UH0_0
                        let v65 : UH0 = v63 v64
                        let struct (v70 : System.Text.StringBuilder, v71 : int32, v72 : int32) = method47(v65, v20, v21, v22)
                        US15_0(v37, v44, v70, v71, v72)
                    else
                        let v74 : char list = []
                        let v75 : char list = ''' :: v74 
                        let v78 : char list = '"' :: v75 
                        let v81 : (char list -> (char [])) = List.toArray
                        let v82 : (char []) = v81 v78
                        let v85 : string = $"parsing.none_of / unexpected char: '{v37}' / chars: %A{v82} / s: %A{struct (v20, v21, v22)}"
                        US15_1(v85)
            let v100 : US15 =
                match v88 with
                | US15_1(v97) -> (* Error *)
                    US15_1(v97)
                | US15_0(v89, v90, v91, v92, v93) -> (* Ok *)
                    let v94 : bool = '\\' = v89
                    let v95 : char =
                        if v94 then
                            '/'
                        else
                            v89
                    US15_0(v95, v90, v91, v92, v93)
            let v114 : US16 =
                match v100 with
                | US15_1(v101) -> (* Error *)
                    US16_1(v101)
                | US15_0(v103, v104, v105, v106, v107) -> (* Ok *)
                    let v108 : (char -> string) = _.ToString()
                    let v109 : string = v108 v103
                    method50(v109, v104, v105, v106, v107)
            let v124 : US16 =
                match v114 with
                | US16_1(v121) -> (* Error *)
                    US16_0(v6, v19, v20, v21, v22)
                | US16_0(v115, v116, v117, v118, v119) -> (* Ok *)
                    US16_0(v115, v116, v117, v118, v119)
            match v124 with
            | US16_1(v145) -> (* Error *)
                let v146 : string = "between / expected content"
                US16_1(v146)
            | US16_0(v125, v126, v127, v128, v129) -> (* Ok *)
                let v130 : UH1 = UH1_0
                let v131 : UH1 = UH1_1(v13, v130)
                let v132 : UH1 = UH1_1(v12, v131)
                let v133 : US15 = method51(v126, v127, v128, v129, v132)
                match v133 with
                | US15_1(v140) -> (* Error *)
                    let v141 : string = $"between / expected closing delimiter / e: %A{v140} / input: %A{struct (v7, v11, 1, 1)} / rest1: %A{struct (v19, v20, v21, v22)} / rest2: %A{struct (v126, v127, v128, v129)}"
                    US16_1(v141)
                | US15_0(v134, v135, v136, v137, v138) -> (* Ok *)
                    US16_0(v125, v135, v136, v137, v138)
    let v303 : US16 =
        match v153 with
        | US16_1(v159) -> (* Error *)
            let v160 : bool = "" = v7
            let v233 : US15 =
                if v160 then
                    let v161 : char list = []
                    let v162 : char list = ' ' :: v161 
                    let v165 : char list = ''' :: v162 
                    let v168 : char list = '"' :: v165 
                    let v171 : (char list -> (char [])) = List.toArray
                    let v172 : (char []) = v171 v168
                    let v175 : string = $"parsing.none_of / unexpected end of input / chars: %A{v172} / s: %A{struct (v11, 1, 1)}"
                    US15_1(v175)
                else
                    let v177 : char = v7.[int 0]
                    let v178 : (string -> int32) = String.length
                    let v179 : int32 = v178 v7
                    let v180 : (int32 -> int32) = int32
                    let v181 : int32 = v180 1
                    let v182 : (int32 -> int32) = int32
                    let v183 : int32 = v182 v179
                    let v184 : string = v7.[int v181..int v183]
                    let v185 : int64 = 0L
                    let v186 : bool = method52(v177, v185)
                    let v187 : bool = v186 = false
                    if v187 then
                        let v188 : (char -> string) = _.ToString()
                        let v189 : string = v188 v177
                        let v192 : int32 = v189.Length
                        let v193 : (char []) = Array.zeroCreate<char> (v192)
                        let v194 : Mut5 = {l0 = 0} : Mut5
                        while method45(v192, v194) do
                            let v196 : int32 = v194.l0
                            let v197 : char = v189.[int v196]
                            v193.[int v196] <- v197
                            let v198 : int32 = v196 + 1
                            v194.l0 <- v198
                            ()
                        let v199 : char list = v193 |> Array.toList
                        let v200 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v201 : (char -> (UH0 -> UH0)) = method46()
                        let v202 : (char list -> (UH0 -> UH0)) = v200 v201
                        let v203 : (UH0 -> UH0) = v202 v199
                        let v204 : UH0 = UH0_0
                        let v205 : UH0 = v203 v204
                        let v210 : int32 = 1
                        let v211 : int32 = 1
                        let struct (v212 : System.Text.StringBuilder, v213 : int32, v214 : int32) = method47(v205, v11, v210, v211)
                        US15_0(v177, v184, v212, v213, v214)
                    else
                        let v216 : char list = []
                        let v217 : char list = ' ' :: v216 
                        let v220 : char list = ''' :: v217 
                        let v223 : char list = '"' :: v220 
                        let v226 : (char list -> (char [])) = List.toArray
                        let v227 : (char []) = v226 v223
                        let v230 : string = $"parsing.none_of / unexpected char: '{v177}' / chars: %A{v227} / s: %A{struct (v11, 1, 1)}"
                        US15_1(v230)
            let v245 : US15 =
                match v233 with
                | US15_1(v242) -> (* Error *)
                    US15_1(v242)
                | US15_0(v234, v235, v236, v237, v238) -> (* Ok *)
                    let v239 : bool = '\\' = v234
                    let v240 : char =
                        if v239 then
                            '/'
                        else
                            v234
                    US15_0(v240, v235, v236, v237, v238)
            let v259 : US16 =
                match v245 with
                | US15_1(v246) -> (* Error *)
                    US16_1(v246)
                | US15_0(v248, v249, v250, v251, v252) -> (* Ok *)
                    let v253 : (char -> string) = _.ToString()
                    let v254 : string = v253 v248
                    method53(v254, v249, v250, v251, v252)
            match v259 with
            | US16_1(v265) -> (* Error *)
                let v266 : int32 = v7.Length
                let v267 : bool = v266 = 0
                let v271 : US18 =
                    if v267 then
                        US18_0(v7, v11, 1, 1)
                    else
                        let v269 : string = $"parsing.eof / expected end of input / input: %A{v7}"
                        US18_1(v269)
                let v280 : US16 =
                    match v271 with
                    | US18_1(v277) -> (* Error *)
                        US16_1(v277)
                    | US18_0(v272, v273, v274, v275) -> (* Ok *)
                        US16_0(v6, v272, v273, v274, v275)
                match v280 with
                | US16_1(v296) -> (* Error *)
                    US16_1(v296)
                | US16_0(v281, v282, v283, v284, v285) -> (* Ok *)
                    let v286 : int32 = 0
                    let v287 : int32 = method54(v282, v286)
                    let v288 : (string -> int32) = String.length
                    let v289 : int32 = v288 v282
                    let v290 : (int32 -> int32) = int32
                    let v291 : int32 = v290 v287
                    let v292 : (int32 -> int32) = int32
                    let v293 : int32 = v292 v289
                    let v294 : string = v282.[int v291..int v293]
                    US16_0(v281, v294, v283, v284, v285)
            | US16_0(v260, v261, v262, v263, v264) -> (* Ok *)
                v259
        | US16_0(v154, v155, v156, v157, v158) -> (* Ok *)
            v153
    let v471 : US19 =
        match v303 with
        | US16_1(v468) -> (* Error *)
            US19_1(v468)
        | US16_0(v304, v305, v306, v307, v308) -> (* Ok *)
            let v309 : bool = "" = v305
            let v372 : US15 =
                if v309 then
                    let v310 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v306, v307, v308)}"
                    US15_1(v310)
                else
                    let v312 : char = v305.[int 0]
                    let v313 : bool = v312 = ' '
                    if v313 then
                        let v314 : (string -> int32) = String.length
                        let v315 : int32 = v314 v305
                        let v316 : (int32 -> int32) = int32
                        let v317 : int32 = v316 1
                        let v318 : (int32 -> int32) = int32
                        let v319 : int32 = v318 v315
                        let v320 : string = v305.[int v317..int v319]
                        let v321 : (char -> string) = _.ToString()
                        let v322 : string = v321 v312
                        let v325 : int32 = v322.Length
                        let v326 : (char []) = Array.zeroCreate<char> (v325)
                        let v327 : Mut5 = {l0 = 0} : Mut5
                        while method45(v325, v327) do
                            let v329 : int32 = v327.l0
                            let v330 : char = v322.[int v329]
                            v326.[int v329] <- v330
                            let v331 : int32 = v329 + 1
                            v327.l0 <- v331
                            ()
                        let v332 : char list = v326 |> Array.toList
                        let v333 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v334 : (char -> (UH0 -> UH0)) = method46()
                        let v335 : (char list -> (UH0 -> UH0)) = v333 v334
                        let v336 : (UH0 -> UH0) = v335 v332
                        let v337 : UH0 = UH0_0
                        let v338 : UH0 = v336 v337
                        let struct (v343 : System.Text.StringBuilder, v344 : int32, v345 : int32) = method47(v338, v306, v307, v308)
                        US15_0(v312, v320, v343, v344, v345)
                    else
                        let v347 : (string -> int32) = String.length
                        let v348 : int32 = v347 v305
                        let v349 : string = "\n"
                        let v350 : int32 = v305.IndexOf v349 
                        let v351 : int32 = v350 - 1
                        let v352 : bool = -2 = v351
                        let v353 : int32 =
                            if v352 then
                                v348
                            else
                                v351
                        let v354 : (int32 -> int32) = int32
                        let v355 : int32 = v354 0
                        let v356 : (int32 -> int32) = int32
                        let v357 : int32 = v356 v353
                        let v358 : string = v305.[int v355..int v357]
                        let v359 : string = $"parsing.p_char / expected: '{' '}' / line: {v307} / col: {v308}
{v306}{v358}"
                        let v360 : int32 = v308 - 1
                        let v361 : (int32 -> (string -> string)) = String.replicate
                        let v362 : (string -> string) = v361 v360
                        let v363 : string = " "
                        let v364 : string = v362 v363
                        let v367 : string = "^"
                        let v368 : string = v364 + v367 
                        let v369 : string = $"{v359}
{v368}
"
                        US15_1(v369)
            let v384 : US20 =
                match v372 with
                | US15_1(v380) -> (* Error *)
                    let v381 : US17 = US17_1
                    US20_0(v381, v305, v306, v307, v308)
                | US15_0(v373, v374, v375, v376, v377) -> (* Ok *)
                    let v378 : US17 = US17_0(v373)
                    US20_0(v378, v374, v375, v376, v377)
            let v445 : US16 =
                match v384 with
                | US20_1(v442) -> (* Error *)
                    US16_1(v442)
                | US20_0(v385, v386, v387, v388, v389) -> (* Ok *)
                    let v390 : bool = "" = v386
                    let v427 : US15 =
                        if v390 then
                            let v391 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v387, v388, v389)}"
                            US15_1(v391)
                        else
                            let v393 : char = v386.[int 0]
                            let v394 : (string -> int32) = String.length
                            let v395 : int32 = v394 v386
                            let v396 : (int32 -> int32) = int32
                            let v397 : int32 = v396 1
                            let v398 : (int32 -> int32) = int32
                            let v399 : int32 = v398 v395
                            let v400 : string = v386.[int v397..int v399]
                            let v401 : (char -> string) = _.ToString()
                            let v402 : string = v401 v393
                            let v405 : int32 = v402.Length
                            let v406 : (char []) = Array.zeroCreate<char> (v405)
                            let v407 : Mut5 = {l0 = 0} : Mut5
                            while method45(v405, v407) do
                                let v409 : int32 = v407.l0
                                let v410 : char = v402.[int v409]
                                v406.[int v409] <- v410
                                let v411 : int32 = v409 + 1
                                v407.l0 <- v411
                                ()
                            let v412 : char list = v406 |> Array.toList
                            let v413 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v414 : (char -> (UH0 -> UH0)) = method46()
                            let v415 : (char list -> (UH0 -> UH0)) = v413 v414
                            let v416 : (UH0 -> UH0) = v415 v412
                            let v417 : UH0 = UH0_0
                            let v418 : UH0 = v416 v417
                            let struct (v423 : System.Text.StringBuilder, v424 : int32, v425 : int32) = method47(v418, v387, v388, v389)
                            US15_0(v393, v400, v423, v424, v425)
                    match v427 with
                    | US15_1(v428) -> (* Error *)
                        US16_1(v428)
                    | US15_0(v430, v431, v432, v433, v434) -> (* Ok *)
                        let v435 : (char -> string) = _.ToString()
                        let v436 : string = v435 v430
                        method55(v436, v431, v432, v433, v434)
            let v457 : US21 =
                match v445 with
                | US16_1(v453) -> (* Error *)
                    let v454 : US1 = US1_1
                    US21_0(v454, v305, v306, v307, v308)
                | US16_0(v446, v447, v448, v449, v450) -> (* Ok *)
                    let v451 : US1 = US1_0(v446)
                    US21_0(v451, v447, v448, v449, v450)
            match v457 with
            | US21_1(v464) -> (* Error *)
                US19_1(v464)
            | US21_0(v458, v459, v460, v461, v462) -> (* Ok *)
                US19_0(v304, v458, v459, v460, v461, v462)
    match v471 with
    | US19_1(v479) -> (* Error *)
        US14_1(v479)
    | US19_0(v472, v473, v474, v475, v476, v477) -> (* Ok *)
        US14_0(v472, v473)
and method58 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US17_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US17_1
        let v23 : char =
            match v19 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method58(v0, v25)
and method59 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v82 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v25 : char = v1.[int 0]
            let v26 : (string -> int32) = String.length
            let v27 : int32 = v26 v1
            let v28 : (int32 -> int32) = int32
            let v29 : int32 = v28 1
            let v30 : (int32 -> int32) = int32
            let v31 : int32 = v30 v27
            let v32 : string = v1.[int v29..int v31]
            let v33 : int64 = 0L
            let v34 : bool = method58(v25, v33)
            let v35 : bool = v34 = false
            if v35 then
                let v36 : (char -> string) = _.ToString()
                let v37 : string = v36 v25
                let v40 : int32 = v37.Length
                let v41 : (char []) = Array.zeroCreate<char> (v40)
                let v42 : Mut5 = {l0 = 0} : Mut5
                while method45(v40, v42) do
                    let v44 : int32 = v42.l0
                    let v45 : char = v37.[int v44]
                    v41.[int v44] <- v45
                    let v46 : int32 = v44 + 1
                    v42.l0 <- v46
                    ()
                let v47 : char list = v41 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method46()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v47
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v58 : System.Text.StringBuilder, v59 : int32, v60 : int32) = method47(v53, v2, v3, v4)
                US15_0(v25, v32, v58, v59, v60)
            else
                let v62 : char list = []
                let v63 : char list = ' ' :: v62 
                let v66 : char list = '"' :: v63 
                let v69 : char list = '`' :: v66 
                let v72 : char list = '\\' :: v69 
                let v75 : (char list -> (char [])) = List.toArray
                let v76 : (char []) = v75 v72
                let v79 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v76} / s: %A{struct (v2, v3, v4)}"
                US15_1(v79)
    match v82 with
    | US15_1(v94) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v83, v84, v85, v86, v87) -> (* Ok *)
        let v88 : (char -> string) = _.ToString()
        let v89 : string = v88 v83
        let v92 : string = v0 + v89 
        method59(v92, v84, v85, v86, v87)
and method61 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method61(v0, v21)
and closure41 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v67 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '\\'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v20 : int32 = v17.Length
                let v21 : (char []) = Array.zeroCreate<char> (v20)
                let v22 : Mut5 = {l0 = 0} : Mut5
                while method45(v20, v22) do
                    let v24 : int32 = v22.l0
                    let v25 : char = v17.[int v24]
                    v21.[int v24] <- v25
                    let v26 : int32 = v24 + 1
                    v22.l0 <- v26
                    ()
                let v27 : char list = v21 |> Array.toList
                let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v29 : (char -> (UH0 -> UH0)) = method46()
                let v30 : (char list -> (UH0 -> UH0)) = v28 v29
                let v31 : (UH0 -> UH0) = v30 v27
                let v32 : UH0 = UH0_0
                let v33 : UH0 = v31 v32
                let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method47(v33, v1, v2, v3)
                US15_0(v7, v15, v38, v39, v40)
            else
                let v42 : (string -> int32) = String.length
                let v43 : int32 = v42 v0
                let v44 : string = "\n"
                let v45 : int32 = v0.IndexOf v44 
                let v46 : int32 = v45 - 1
                let v47 : bool = -2 = v46
                let v48 : int32 =
                    if v47 then
                        v43
                    else
                        v46
                let v49 : (int32 -> int32) = int32
                let v50 : int32 = v49 0
                let v51 : (int32 -> int32) = int32
                let v52 : int32 = v51 v48
                let v53 : string = v0.[int v50..int v52]
                let v54 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v53}"
                let v55 : int32 = v3 - 1
                let v56 : (int32 -> (string -> string)) = String.replicate
                let v57 : (string -> string) = v56 v55
                let v58 : string = " "
                let v59 : string = v57 v58
                let v62 : string = "^"
                let v63 : string = v59 + v62 
                let v64 : string = $"{v54}
{v63}
"
                US15_1(v64)
    let v114 : US15 =
        match v67 with
        | US15_1(v111) -> (* Error *)
            US15_1(v111)
        | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
            let v73 : bool = "" = v69
            if v73 then
                let v74 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v70, v71, v72)}"
                US15_1(v74)
            else
                let v76 : char = v69.[int 0]
                let v77 : (string -> int32) = String.length
                let v78 : int32 = v77 v69
                let v79 : (int32 -> int32) = int32
                let v80 : int32 = v79 1
                let v81 : (int32 -> int32) = int32
                let v82 : int32 = v81 v78
                let v83 : string = v69.[int v80..int v82]
                let v84 : (char -> string) = _.ToString()
                let v85 : string = v84 v76
                let v88 : int32 = v85.Length
                let v89 : (char []) = Array.zeroCreate<char> (v88)
                let v90 : Mut5 = {l0 = 0} : Mut5
                while method45(v88, v90) do
                    let v92 : int32 = v90.l0
                    let v93 : char = v85.[int v92]
                    v89.[int v92] <- v93
                    let v94 : int32 = v92 + 1
                    v90.l0 <- v94
                    ()
                let v95 : char list = v89 |> Array.toList
                let v96 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v97 : (char -> (UH0 -> UH0)) = method46()
                let v98 : (char list -> (UH0 -> UH0)) = v96 v97
                let v99 : (UH0 -> UH0) = v98 v95
                let v100 : UH0 = UH0_0
                let v101 : UH0 = v99 v100
                let struct (v106 : System.Text.StringBuilder, v107 : int32, v108 : int32) = method47(v101, v70, v71, v72)
                US15_0(v76, v83, v106, v107, v108)
    match v114 with
    | US15_1(v122) -> (* Error *)
        US16_1(v122)
    | US15_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v120 : string = $"{'\\'}{v115}"
        US16_0(v120, v116, v117, v118, v119)
and closure42 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v67 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '`'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v20 : int32 = v17.Length
                let v21 : (char []) = Array.zeroCreate<char> (v20)
                let v22 : Mut5 = {l0 = 0} : Mut5
                while method45(v20, v22) do
                    let v24 : int32 = v22.l0
                    let v25 : char = v17.[int v24]
                    v21.[int v24] <- v25
                    let v26 : int32 = v24 + 1
                    v22.l0 <- v26
                    ()
                let v27 : char list = v21 |> Array.toList
                let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v29 : (char -> (UH0 -> UH0)) = method46()
                let v30 : (char list -> (UH0 -> UH0)) = v28 v29
                let v31 : (UH0 -> UH0) = v30 v27
                let v32 : UH0 = UH0_0
                let v33 : UH0 = v31 v32
                let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method47(v33, v1, v2, v3)
                US15_0(v7, v15, v38, v39, v40)
            else
                let v42 : (string -> int32) = String.length
                let v43 : int32 = v42 v0
                let v44 : string = "\n"
                let v45 : int32 = v0.IndexOf v44 
                let v46 : int32 = v45 - 1
                let v47 : bool = -2 = v46
                let v48 : int32 =
                    if v47 then
                        v43
                    else
                        v46
                let v49 : (int32 -> int32) = int32
                let v50 : int32 = v49 0
                let v51 : (int32 -> int32) = int32
                let v52 : int32 = v51 v48
                let v53 : string = v0.[int v50..int v52]
                let v54 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v53}"
                let v55 : int32 = v3 - 1
                let v56 : (int32 -> (string -> string)) = String.replicate
                let v57 : (string -> string) = v56 v55
                let v58 : string = " "
                let v59 : string = v57 v58
                let v62 : string = "^"
                let v63 : string = v59 + v62 
                let v64 : string = $"{v54}
{v63}
"
                US15_1(v64)
    let v114 : US15 =
        match v67 with
        | US15_1(v111) -> (* Error *)
            US15_1(v111)
        | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
            let v73 : bool = "" = v69
            if v73 then
                let v74 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v70, v71, v72)}"
                US15_1(v74)
            else
                let v76 : char = v69.[int 0]
                let v77 : (string -> int32) = String.length
                let v78 : int32 = v77 v69
                let v79 : (int32 -> int32) = int32
                let v80 : int32 = v79 1
                let v81 : (int32 -> int32) = int32
                let v82 : int32 = v81 v78
                let v83 : string = v69.[int v80..int v82]
                let v84 : (char -> string) = _.ToString()
                let v85 : string = v84 v76
                let v88 : int32 = v85.Length
                let v89 : (char []) = Array.zeroCreate<char> (v88)
                let v90 : Mut5 = {l0 = 0} : Mut5
                while method45(v88, v90) do
                    let v92 : int32 = v90.l0
                    let v93 : char = v85.[int v92]
                    v89.[int v92] <- v93
                    let v94 : int32 = v92 + 1
                    v90.l0 <- v94
                    ()
                let v95 : char list = v89 |> Array.toList
                let v96 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v97 : (char -> (UH0 -> UH0)) = method46()
                let v98 : (char list -> (UH0 -> UH0)) = v96 v97
                let v99 : (UH0 -> UH0) = v98 v95
                let v100 : UH0 = UH0_0
                let v101 : UH0 = v99 v100
                let struct (v106 : System.Text.StringBuilder, v107 : int32, v108 : int32) = method47(v101, v70, v71, v72)
                US15_0(v76, v83, v106, v107, v108)
    match v114 with
    | US15_1(v122) -> (* Error *)
        US16_1(v122)
    | US15_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v120 : string = $"{'`'}{v115}"
        US16_0(v120, v116, v117, v118, v119)
and method62 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US16 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US16 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US16_1(v15) -> (* Error *)
            method62(v0, v1, v2, v3, v8)
        | US16_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US16_1(v5)
and method63 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method63(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method60 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method61(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method45(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method46()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method47(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = '"' :: v59 
                let v63 : char list = '`' :: v60 
                let v66 : char list = '\\' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v90 : US16 =
        match v76 with
        | US15_1(v87) -> (* Error *)
            US16_1(v87)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : (char -> string) = _.ToString()
            let v83 : string = v82 v77
            US16_0(v83, v78, v79, v80, v81)
    let v104 : US16 =
        match v90 with
        | US16_1(v96) -> (* Error *)
            let v97 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure41()
            let v98 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure42()
            let v99 : UH3 = UH3_0
            let v100 : UH3 = UH3_1(v98, v99)
            let v101 : UH3 = UH3_1(v97, v100)
            method62(v1, v2, v3, v4, v101)
        | US16_0(v91, v92, v93, v94, v95) -> (* Ok *)
            v90
    match v104 with
    | US16_1(v112) -> (* Error *)
        let v113 : UH2 = UH2_0
        let v114 : UH2 = method63(v0, v113)
        US23_0(v114, v1, v2, v3, v4)
    | US16_0(v105, v106, v107, v108, v109) -> (* Ok *)
        let v110 : UH2 = UH2_1(v105, v0)
        method60(v110, v106, v107, v108, v109)
and method64 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method64(v3, v1)
        let v5 : string list = v2 :: v4 
        v5
    | UH2_0 -> (* Nil *)
        v1
and method65 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method61(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method45(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method46()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method47(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = '"' :: v59 
                let v63 : char list = '`' :: v60 
                let v66 : char list = '\\' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v90 : US16 =
        match v76 with
        | US15_1(v87) -> (* Error *)
            US16_1(v87)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : (char -> string) = _.ToString()
            let v83 : string = v82 v77
            US16_0(v83, v78, v79, v80, v81)
    match v90 with
    | US16_1(v98) -> (* Error *)
        let v99 : UH2 = UH2_0
        let v100 : UH2 = method63(v0, v99)
        US23_0(v100, v1, v2, v3, v4)
    | US16_0(v91, v92, v93, v94, v95) -> (* Ok *)
        let v96 : UH2 = UH2_1(v91, v0)
        method65(v96, v92, v93, v94, v95)
and method66 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method66(v0, v6)
        else
            v1
and method57 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v82 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v25 : char = v1.[int 0]
            let v26 : (string -> int32) = String.length
            let v27 : int32 = v26 v1
            let v28 : (int32 -> int32) = int32
            let v29 : int32 = v28 1
            let v30 : (int32 -> int32) = int32
            let v31 : int32 = v30 v27
            let v32 : string = v1.[int v29..int v31]
            let v33 : int64 = 0L
            let v34 : bool = method58(v25, v33)
            let v35 : bool = v34 = false
            if v35 then
                let v36 : (char -> string) = _.ToString()
                let v37 : string = v36 v25
                let v40 : int32 = v37.Length
                let v41 : (char []) = Array.zeroCreate<char> (v40)
                let v42 : Mut5 = {l0 = 0} : Mut5
                while method45(v40, v42) do
                    let v44 : int32 = v42.l0
                    let v45 : char = v37.[int v44]
                    v41.[int v44] <- v45
                    let v46 : int32 = v44 + 1
                    v42.l0 <- v46
                    ()
                let v47 : char list = v41 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method46()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v47
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v58 : System.Text.StringBuilder, v59 : int32, v60 : int32) = method47(v53, v2, v3, v4)
                US15_0(v25, v32, v58, v59, v60)
            else
                let v62 : char list = []
                let v63 : char list = ' ' :: v62 
                let v66 : char list = '"' :: v63 
                let v69 : char list = '`' :: v66 
                let v72 : char list = '\\' :: v69 
                let v75 : (char list -> (char [])) = List.toArray
                let v76 : (char []) = v75 v72
                let v79 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v76} / s: %A{struct (v2, v3, v4)}"
                US15_1(v79)
    let v96 : US16 =
        match v82 with
        | US15_1(v83) -> (* Error *)
            US16_1(v83)
        | US15_0(v85, v86, v87, v88, v89) -> (* Ok *)
            let v90 : (char -> string) = _.ToString()
            let v91 : string = v90 v85
            method59(v91, v86, v87, v88, v89)
    let v341 : US16 =
        match v96 with
        | US16_1(v102) -> (* Error *)
            let v165 : US15 =
                if v5 then
                    let v103 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
                    US15_1(v103)
                else
                    let v105 : char = v1.[int 0]
                    let v106 : bool = v105 = '"'
                    if v106 then
                        let v107 : (string -> int32) = String.length
                        let v108 : int32 = v107 v1
                        let v109 : (int32 -> int32) = int32
                        let v110 : int32 = v109 1
                        let v111 : (int32 -> int32) = int32
                        let v112 : int32 = v111 v108
                        let v113 : string = v1.[int v110..int v112]
                        let v114 : (char -> string) = _.ToString()
                        let v115 : string = v114 v105
                        let v118 : int32 = v115.Length
                        let v119 : (char []) = Array.zeroCreate<char> (v118)
                        let v120 : Mut5 = {l0 = 0} : Mut5
                        while method45(v118, v120) do
                            let v122 : int32 = v120.l0
                            let v123 : char = v115.[int v122]
                            v119.[int v122] <- v123
                            let v124 : int32 = v122 + 1
                            v120.l0 <- v124
                            ()
                        let v125 : char list = v119 |> Array.toList
                        let v126 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v127 : (char -> (UH0 -> UH0)) = method46()
                        let v128 : (char list -> (UH0 -> UH0)) = v126 v127
                        let v129 : (UH0 -> UH0) = v128 v125
                        let v130 : UH0 = UH0_0
                        let v131 : UH0 = v129 v130
                        let struct (v136 : System.Text.StringBuilder, v137 : int32, v138 : int32) = method47(v131, v2, v3, v4)
                        US15_0(v105, v113, v136, v137, v138)
                    else
                        let v140 : (string -> int32) = String.length
                        let v141 : int32 = v140 v1
                        let v142 : string = "\n"
                        let v143 : int32 = v1.IndexOf v142 
                        let v144 : int32 = v143 - 1
                        let v145 : bool = -2 = v144
                        let v146 : int32 =
                            if v145 then
                                v141
                            else
                                v144
                        let v147 : (int32 -> int32) = int32
                        let v148 : int32 = v147 0
                        let v149 : (int32 -> int32) = int32
                        let v150 : int32 = v149 v146
                        let v151 : string = v1.[int v148..int v150]
                        let v152 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v151}"
                        let v153 : int32 = v4 - 1
                        let v154 : (int32 -> (string -> string)) = String.replicate
                        let v155 : (string -> string) = v154 v153
                        let v156 : string = " "
                        let v157 : string = v155 v156
                        let v160 : string = "^"
                        let v161 : string = v157 + v160 
                        let v162 : string = $"{v152}
{v161}
"
                        US15_1(v162)
            let v282 : US16 =
                match v165 with
                | US15_1(v279) -> (* Error *)
                    US16_1(v279)
                | US15_0(v166, v167, v168, v169, v170) -> (* Ok *)
                    let v171 : UH2 = UH2_0
                    let v172 : US23 = method60(v171, v167, v168, v169, v170)
                    let v193 : US16 =
                        match v172 with
                        | US23_1(v190) -> (* Error *)
                            US16_1(v190)
                        | US23_0(v173, v174, v175, v176, v177) -> (* Ok *)
                            let v178 : string list = []
                            let v179 : string list = method64(v173, v178)
                            let v180 : string seq = seq { for i = 0 to v179.Length - 1 do yield v179.[i] }
                            let v183 : (string -> (string seq -> string)) = String.concat
                            let v184 : string = ""
                            let v185 : (string seq -> string) = v183 v184
                            let v186 : string = v185 v180
                            US16_0(v186, v174, v175, v176, v177)
                    match v193 with
                    | US16_1(v274) -> (* Error *)
                        let v275 : string = "between / expected content"
                        US16_1(v275)
                    | US16_0(v194, v195, v196, v197, v198) -> (* Ok *)
                        let v199 : bool = "" = v195
                        let v262 : US15 =
                            if v199 then
                                let v200 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v196, v197, v198)}"
                                US15_1(v200)
                            else
                                let v202 : char = v195.[int 0]
                                let v203 : bool = v202 = '"'
                                if v203 then
                                    let v204 : (string -> int32) = String.length
                                    let v205 : int32 = v204 v195
                                    let v206 : (int32 -> int32) = int32
                                    let v207 : int32 = v206 1
                                    let v208 : (int32 -> int32) = int32
                                    let v209 : int32 = v208 v205
                                    let v210 : string = v195.[int v207..int v209]
                                    let v211 : (char -> string) = _.ToString()
                                    let v212 : string = v211 v202
                                    let v215 : int32 = v212.Length
                                    let v216 : (char []) = Array.zeroCreate<char> (v215)
                                    let v217 : Mut5 = {l0 = 0} : Mut5
                                    while method45(v215, v217) do
                                        let v219 : int32 = v217.l0
                                        let v220 : char = v212.[int v219]
                                        v216.[int v219] <- v220
                                        let v221 : int32 = v219 + 1
                                        v217.l0 <- v221
                                        ()
                                    let v222 : char list = v216 |> Array.toList
                                    let v223 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v224 : (char -> (UH0 -> UH0)) = method46()
                                    let v225 : (char list -> (UH0 -> UH0)) = v223 v224
                                    let v226 : (UH0 -> UH0) = v225 v222
                                    let v227 : UH0 = UH0_0
                                    let v228 : UH0 = v226 v227
                                    let struct (v233 : System.Text.StringBuilder, v234 : int32, v235 : int32) = method47(v228, v196, v197, v198)
                                    US15_0(v202, v210, v233, v234, v235)
                                else
                                    let v237 : (string -> int32) = String.length
                                    let v238 : int32 = v237 v195
                                    let v239 : string = "\n"
                                    let v240 : int32 = v195.IndexOf v239 
                                    let v241 : int32 = v240 - 1
                                    let v242 : bool = -2 = v241
                                    let v243 : int32 =
                                        if v242 then
                                            v238
                                        else
                                            v241
                                    let v244 : (int32 -> int32) = int32
                                    let v245 : int32 = v244 0
                                    let v246 : (int32 -> int32) = int32
                                    let v247 : int32 = v246 v243
                                    let v248 : string = v195.[int v245..int v247]
                                    let v249 : string = $"parsing.p_char / expected: '{'"'}' / line: {v197} / col: {v198}
{v196}{v248}"
                                    let v250 : int32 = v198 - 1
                                    let v251 : (int32 -> (string -> string)) = String.replicate
                                    let v252 : (string -> string) = v251 v250
                                    let v253 : string = " "
                                    let v254 : string = v252 v253
                                    let v257 : string = "^"
                                    let v258 : string = v254 + v257 
                                    let v259 : string = $"{v249}
{v258}
"
                                    US15_1(v259)
                        match v262 with
                        | US15_1(v269) -> (* Error *)
                            let v270 : string = $"between / expected closing delimiter / e: %A{v269} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v167, v168, v169, v170)} / rest2: %A{struct (v195, v196, v197, v198)}"
                            US16_1(v270)
                        | US15_0(v263, v264, v265, v266, v267) -> (* Ok *)
                            US16_0(v194, v264, v265, v266, v267)
            match v282 with
            | US16_1(v288) -> (* Error *)
                let v289 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure41()
                let v290 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure42()
                let v291 : UH3 = UH3_0
                let v292 : UH3 = UH3_1(v290, v291)
                let v293 : UH3 = UH3_1(v289, v292)
                let v294 : US16 = method62(v1, v2, v3, v4, v293)
                let v305 : US16 =
                    match v294 with
                    | US16_1(v302) -> (* Error *)
                        US16_1(v302)
                    | US16_0(v295, v296, v297, v298, v299) -> (* Ok *)
                        let v300 : string = ""
                        US16_0(v300, v296, v297, v298, v299)
                let v316 : US23 =
                    match v305 with
                    | US16_1(v313) -> (* Error *)
                        US23_1(v313)
                    | US16_0(v306, v307, v308, v309, v310) -> (* Ok *)
                        let v311 : UH2 = UH2_0
                        method65(v311, v307, v308, v309, v310)
                match v316 with
                | US23_1(v334) -> (* Error *)
                    US16_1(v334)
                | US23_0(v317, v318, v319, v320, v321) -> (* Ok *)
                    let v322 : string list = []
                    let v323 : string list = method64(v317, v322)
                    let v324 : string seq = seq { for i = 0 to v323.Length - 1 do yield v323.[i] }
                    let v327 : (string -> (string seq -> string)) = String.concat
                    let v328 : string = ""
                    let v329 : (string seq -> string) = v327 v328
                    let v330 : string = v329 v324
                    US16_0(v330, v318, v319, v320, v321)
            | US16_0(v283, v284, v285, v286, v287) -> (* Ok *)
                v282
        | US16_0(v97, v98, v99, v100, v101) -> (* Ok *)
            v96
    match v341 with
    | US16_1(v342) -> (* Error *)
        let v343 : UH2 = UH2_0
        let v344 : UH2 = method63(v0, v343)
        US23_0(v344, v1, v2, v3, v4)
    | US16_0(v346, v347, v348, v349, v350) -> (* Ok *)
        let v351 : int32 = 0
        let v352 : int32 = method66(v347, v351)
        let v353 : bool = 0 = v352
        let v364 : US18 =
            if v353 then
                let v354 : string = "spaces1 / expected at least one space"
                US18_1(v354)
            else
                let v356 : (string -> int32) = String.length
                let v357 : int32 = v356 v347
                let v358 : (int32 -> int32) = int32
                let v359 : int32 = v358 v352
                let v360 : (int32 -> int32) = int32
                let v361 : int32 = v360 v357
                let v362 : string = v347.[int v359..int v361]
                US18_0(v362, v348, v349, v350)
        match v364 with
        | US18_1(v365) -> (* Error *)
            let v366 : UH2 = UH2_0
            let v367 : UH2 = UH2_1(v346, v366)
            let v368 : UH2 = method63(v0, v367)
            US23_0(v368, v347, v348, v349, v350)
        | US18_0(v370, v371, v372, v373) -> (* Ok *)
            let v374 : UH2 = UH2_1(v346, v0)
            method57(v374, v370, v371, v372, v373)
and method56 (v0 : string) : US22 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v11 : System.Text.StringBuilder = v10 v6
    let v12 : UH2 = UH2_0
    let v13 : int32 = 1
    let v14 : int32 = 1
    let v15 : US23 = method57(v12, v7, v11, v13, v14)
    match v15 with
    | US23_1(v28) -> (* Error *)
        US22_1(v28)
    | US23_0(v16, v17, v18, v19, v20) -> (* Ok *)
        let v21 : string list = []
        let v22 : string list = method64(v16, v21)
        let v23 : (string list -> (string [])) = List.toArray
        let v24 : (string []) = v23 v22
        US22_0(v24)
and closure44 () () : string =
    let v0 : string = $"runtime.execute_with_options"
    v0
and closure43 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure2()
    let v11 : unit = (fun () -> v10 (); v9) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : int64 option) = State.trace_state.Value
    let v39 : unit = ()
    let v40 : unit = (fun () -> v10 (); v39) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : int64 option) = State.trace_state.Value
    let v68 : US0 = v56.l0
    let v69 : bool = v55.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 1 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v24)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v10 (); v79) ()
        let struct (v93 : Mut0, v94 : Mut1, v95 : Mut2, v96 : Mut3, v97 : int64 option) = State.trace_state.Value
        let v108 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v109 : US3 option = None
        let _v109 = ref v109 
        let v110 : US3 option ref = _v109 
        let v111 : (US3 option -> US3 option ref) = closure8(v110)
        let v112 : unit = ()
        let v113 : (unit -> unit) = closure9(v97, v111)
        let v114 : unit = (fun () -> v113 (); v112) ()
        let v117 : US3 option = _v109.Value 
        let v128 : US3 = US3_1
        let v129 : US3 = v117 |> Option.defaultValue v128 
        let v169 : System.DateTime =
            match v129 with
            | US3_1 -> (* None *)
                let v165 : System.DateTime = System.DateTime.Now
                v165
            | US3_0(v133) -> (* Some *)
                let v134 : System.DateTime = System.DateTime.Now
                let v137 : (System.DateTime -> int64) = _.Ticks
                let v138 : int64 = v137 v134
                let v141 : int64 = v138 - v133
                let v142 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v143 : System.TimeSpan = v142 v141
                let v146 : (System.TimeSpan -> int32) = _.Hours
                let v147 : int32 = v146 v143
                let v150 : (System.TimeSpan -> int32) = _.Minutes
                let v151 : int32 = v150 v143
                let v154 : (System.TimeSpan -> int32) = _.Seconds
                let v155 : int32 = v154 v143
                let v158 : (System.TimeSpan -> int32) = _.Milliseconds
                let v159 : int32 = v158 v143
                let v162 : System.DateTime = System.DateTime (1, 1, 1, v147, v151, v155, v159)
                v162
        let v170 : string = method6()
        let v173 : (string -> string) = v169.ToString
        let v174 : string = v173 v170
        let _v108 = v174 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v177 : US3 option = None
        let _v177 = ref v177 
        let v178 : US3 option ref = _v177 
        let v179 : (US3 option -> US3 option ref) = closure8(v178)
        let v180 : unit = ()
        let v181 : (unit -> unit) = closure9(v97, v179)
        let v182 : unit = (fun () -> v181 (); v180) ()
        let v185 : US3 option = _v177.Value 
        let v196 : US3 = US3_1
        let v197 : US3 = v185 |> Option.defaultValue v196 
        let v237 : System.DateTime =
            match v197 with
            | US3_1 -> (* None *)
                let v233 : System.DateTime = System.DateTime.Now
                v233
            | US3_0(v201) -> (* Some *)
                let v202 : System.DateTime = System.DateTime.Now
                let v205 : (System.DateTime -> int64) = _.Ticks
                let v206 : int64 = v205 v202
                let v209 : int64 = v206 - v201
                let v210 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v211 : System.TimeSpan = v210 v209
                let v214 : (System.TimeSpan -> int32) = _.Hours
                let v215 : int32 = v214 v211
                let v218 : (System.TimeSpan -> int32) = _.Minutes
                let v219 : int32 = v218 v211
                let v222 : (System.TimeSpan -> int32) = _.Seconds
                let v223 : int32 = v222 v211
                let v226 : (System.TimeSpan -> int32) = _.Milliseconds
                let v227 : int32 = v226 v211
                let v230 : System.DateTime = System.DateTime (1, 1, 1, v215, v219, v223, v227)
                v230
        let v238 : string = method6()
        let v241 : (string -> string) = v237.ToString
        let v242 : string = v241 v238
        let _v108 = v242 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v245 : string = $"near_sdk::env::block_timestamp()"
        let v246 : uint64 = Fable.Core.RustInterop.emitRustExpr () v245 
        let v247 : US3 option = None
        let _v247 = ref v247 
        let v248 : US3 option ref = _v247 
        let v249 : (US3 option -> US3 option ref) = closure8(v248)
        let v250 : unit = ()
        let v251 : (unit -> unit) = closure9(v97, v249)
        let v252 : unit = (fun () -> v251 (); v250) ()
        let v255 : US3 option = _v247.Value 
        let v266 : US3 = US3_1
        let v267 : US3 = v255 |> Option.defaultValue v266 
        let v276 : uint64 =
            match v267 with
            | US3_1 -> (* None *)
                v246
            | US3_0(v271) -> (* Some *)
                let v272 : (int64 -> uint64) = uint64
                let v273 : uint64 = v272 v271
                let v274 : uint64 = v246 - v273
                v274
        let v277 : uint64 = v276 / 1000000000UL
        let v278 : uint64 = v277 % 60UL
        let v279 : uint64 = v277 / 60UL
        let v280 : uint64 = v279 % 60UL
        let v281 : uint64 = v277 / 3600UL
        let v282 : uint64 = v281 % 24UL
        let v283 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v284 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v282, v280, v278) v283 
        let v285 : string = "fable_library_rust::String_::fromString($0)"
        let v286 : string = Fable.Core.RustInterop.emitRustExpr v284 v285 
        let _v108 = v286 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v287 : US3 option = None
        let _v287 = ref v287 
        let v288 : US3 option ref = _v287 
        let v289 : (US3 option -> US3 option ref) = closure8(v288)
        let v290 : unit = ()
        let v291 : (unit -> unit) = closure9(v97, v289)
        let v292 : unit = (fun () -> v291 (); v290) ()
        let v295 : US3 option = _v287.Value 
        let v306 : US3 = US3_1
        let v307 : US3 = v295 |> Option.defaultValue v306 
        let v347 : System.DateTime =
            match v307 with
            | US3_1 -> (* None *)
                let v343 : System.DateTime = System.DateTime.Now
                v343
            | US3_0(v311) -> (* Some *)
                let v312 : System.DateTime = System.DateTime.Now
                let v315 : (System.DateTime -> int64) = _.Ticks
                let v316 : int64 = v315 v312
                let v319 : int64 = v316 - v311
                let v320 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v321 : System.TimeSpan = v320 v319
                let v324 : (System.TimeSpan -> int32) = _.Hours
                let v325 : int32 = v324 v321
                let v328 : (System.TimeSpan -> int32) = _.Minutes
                let v329 : int32 = v328 v321
                let v332 : (System.TimeSpan -> int32) = _.Seconds
                let v333 : int32 = v332 v321
                let v336 : (System.TimeSpan -> int32) = _.Milliseconds
                let v337 : int32 = v336 v321
                let v340 : System.DateTime = System.DateTime (1, 1, 1, v325, v329, v333, v337)
                v340
        let v348 : string = method7()
        let v351 : (string -> string) = v347.ToString
        let v352 : string = v351 v348
        let _v108 = v352 
        #endif
#if FABLE_COMPILER_PYTHON
        let v355 : US3 option = None
        let _v355 = ref v355 
        let v356 : US3 option ref = _v355 
        let v357 : (US3 option -> US3 option ref) = closure8(v356)
        let v358 : unit = ()
        let v359 : (unit -> unit) = closure9(v97, v357)
        let v360 : unit = (fun () -> v359 (); v358) ()
        let v363 : US3 option = _v355.Value 
        let v374 : US3 = US3_1
        let v375 : US3 = v363 |> Option.defaultValue v374 
        let v415 : System.DateTime =
            match v375 with
            | US3_1 -> (* None *)
                let v411 : System.DateTime = System.DateTime.Now
                v411
            | US3_0(v379) -> (* Some *)
                let v380 : System.DateTime = System.DateTime.Now
                let v383 : (System.DateTime -> int64) = _.Ticks
                let v384 : int64 = v383 v380
                let v387 : int64 = v384 - v379
                let v388 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v389 : System.TimeSpan = v388 v387
                let v392 : (System.TimeSpan -> int32) = _.Hours
                let v393 : int32 = v392 v389
                let v396 : (System.TimeSpan -> int32) = _.Minutes
                let v397 : int32 = v396 v389
                let v400 : (System.TimeSpan -> int32) = _.Seconds
                let v401 : int32 = v400 v389
                let v404 : (System.TimeSpan -> int32) = _.Milliseconds
                let v405 : int32 = v404 v389
                let v408 : System.DateTime = System.DateTime (1, 1, 1, v393, v397, v401, v405)
                v408
        let v416 : string = method7()
        let v419 : (string -> string) = v415.ToString
        let v420 : string = v419 v416
        let _v108 = v420 
        #endif
#else
        let v423 : US3 option = None
        let _v423 = ref v423 
        let v424 : US3 option ref = _v423 
        let v425 : (US3 option -> US3 option ref) = closure8(v424)
        let v426 : unit = ()
        let v427 : (unit -> unit) = closure9(v97, v425)
        let v428 : unit = (fun () -> v427 (); v426) ()
        let v431 : US3 option = _v423.Value 
        let v442 : US3 = US3_1
        let v443 : US3 = v431 |> Option.defaultValue v442 
        let v483 : System.DateTime =
            match v443 with
            | US3_1 -> (* None *)
                let v479 : System.DateTime = System.DateTime.Now
                v479
            | US3_0(v447) -> (* Some *)
                let v448 : System.DateTime = System.DateTime.Now
                let v451 : (System.DateTime -> int64) = _.Ticks
                let v452 : int64 = v451 v448
                let v455 : int64 = v452 - v447
                let v456 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v457 : System.TimeSpan = v456 v455
                let v460 : (System.TimeSpan -> int32) = _.Hours
                let v461 : int32 = v460 v457
                let v464 : (System.TimeSpan -> int32) = _.Minutes
                let v465 : int32 = v464 v457
                let v468 : (System.TimeSpan -> int32) = _.Seconds
                let v469 : int32 = v468 v457
                let v472 : (System.TimeSpan -> int32) = _.Milliseconds
                let v473 : int32 = v472 v457
                let v476 : System.DateTime = System.DateTime (1, 1, 1, v461, v465, v469, v473)
                v476
        let v484 : string = method7()
        let v487 : (string -> string) = v483.ToString
        let v488 : string = v487 v484
        let _v108 = v488 
        #endif
        let v491 : string = _v108 
        
        
        
        
        
        let v561 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v562 : string = method8()
        let _v561 = v562 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v563 : string = method8()
        let _v561 = v563 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v564 : string = method8()
        let _v561 = v564 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v565 : string = method9()
        let _v561 = v565 
        #endif
#if FABLE_COMPILER_PYTHON
        let v566 : string = method9()
        let _v561 = v566 
        #endif
#else
        let v567 : string = method9()
        let _v561 = v567 
        #endif
        let v568 : string = _v561 
        let v573 : string = method10()
        let v574 : Mut4 = {l0 = v573} : Mut4
        let v575 : US0 = US0_0
        let v576 : string = $"%A{v575}"
        let v580 : string = $"{v576}"
        let v583 : unit = ()
        let v584 : (unit -> unit) = closure10(v574, v580)
        let v585 : unit = (fun () -> v584 (); v583) ()
        let v588 : string = v574.l0
        let v589 : (string []) = v588.Split v568 
        let v592 : string = v589.[int 0]
        let v595 : string = method10()
        let v596 : Mut4 = {l0 = v595} : Mut4
        let v597 : US0 = US0_1
        let v598 : string = $"%A{v597}"
        let v602 : string = $"{v598}"
        let v605 : unit = ()
        let v606 : (unit -> unit) = closure10(v596, v602)
        let v607 : unit = (fun () -> v606 (); v605) ()
        let v610 : string = v596.l0
        let v611 : bool = v610.StartsWith v592 
        let v617 : US1 =
            if v611 then
                let v614 : string = "Verbose"
                US1_0(v614)
            else
                US1_1
        let v623 : US1 =
            match v617 with
            | US1_1 -> (* None *)
                let v620 : string = "Debug"
                US1_0(v620)
            | US1_0(v618) -> (* Some *)
                US1_0(v618)
        let v627 : string =
            match v623 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v624) -> (* Some *)
                v624
        let v628 : (unit -> string) = v627.ToLower
        let v629 : string = v628 ()
        let v632 : string = v629.PadLeft (7, ' ')
        let v646 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v647 : string = "inline_colorization::color_bright_blue"
        let v648 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "&*$0"
        let v650 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v632 v649 
        let v651 : string = "inline_colorization::color_reset"
        let v652 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v651 
        let v653 : string = "\"{v648}{v650}{v652}\""
        let v654 : string = @$"format!(" + v653 + ")"
        let v655 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v654 
        let v656 : string = "fable_library_rust::String_::fromString($0)"
        let v657 : string = Fable.Core.RustInterop.emitRustExpr v655 v656 
        let _v646 = v657 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v658 : string = "inline_colorization::color_bright_blue"
        let v659 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "&*$0"
        let v661 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v632 v660 
        let v662 : string = "inline_colorization::color_reset"
        let v663 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v662 
        let v664 : string = "\"{v659}{v661}{v663}\""
        let v665 : string = @$"format!(" + v664 + ")"
        let v666 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v665 
        let v667 : string = "fable_library_rust::String_::fromString($0)"
        let v668 : string = Fable.Core.RustInterop.emitRustExpr v666 v667 
        let _v646 = v668 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v669 : string = "inline_colorization::color_bright_blue"
        let v670 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "&*$0"
        let v672 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v632 v671 
        let v673 : string = "inline_colorization::color_reset"
        let v674 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v673 
        let v675 : string = "\"{v670}{v672}{v674}\""
        let v676 : string = @$"format!(" + v675 + ")"
        let v677 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v676 
        let v678 : string = "fable_library_rust::String_::fromString($0)"
        let v679 : string = Fable.Core.RustInterop.emitRustExpr v677 v678 
        let _v646 = v679 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v680 : string = "\u001b[94m"
        let v681 : string = method11()
        let v682 : string = v680 + v632 
        let v683 : string = v682 + v681 
        let _v646 = v683 
        #endif
#if FABLE_COMPILER_PYTHON
        let v684 : string = "\u001b[94m"
        let v685 : string = method11()
        let v686 : string = v684 + v632 
        let v687 : string = v686 + v685 
        let _v646 = v687 
        #endif
#else
        let v688 : string = "\u001b[94m"
        let v689 : string = method11()
        let v690 : string = v688 + v632 
        let v691 : string = v690 + v689 
        let _v646 = v691 
        #endif
        let v692 : string = _v646 
        let v698 : int64 = v93.l0
        let v699 : string = method10()
        let v700 : Mut4 = {l0 = v699} : Mut4
        let v701 : string = "{ "
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v700, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = "file_name"
        let v711 : string = $"{v710}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v700, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = " = "
        let v720 : string = $"{v719}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v700, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = $"{v7}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure10(v700, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = "; "
        let v737 : string = $"{v736}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure10(v700, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = "arguments"
        let v746 : string = $"{v745}"
        let v749 : unit = ()
        let v750 : (unit -> unit) = closure10(v700, v746)
        let v751 : unit = (fun () -> v750 (); v749) ()
        let v754 : string = $"{v719}"
        let v757 : unit = ()
        let v758 : (unit -> unit) = closure10(v700, v754)
        let v759 : unit = (fun () -> v758 (); v757) ()
        let v762 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v763 : string = "format!(\"{:#?}\", $0)"
        let v764 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v763 
        let v765 : string = "fable_library_rust::String_::fromString($0)"
        let v766 : string = Fable.Core.RustInterop.emitRustExpr v764 v765 
        let _v762 = v766 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v767 : string = "format!(\"{:#?}\", $0)"
        let v768 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v767 
        let v769 : string = "fable_library_rust::String_::fromString($0)"
        let v770 : string = Fable.Core.RustInterop.emitRustExpr v768 v769 
        let _v762 = v770 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v771 : string = "format!(\"{:#?}\", $0)"
        let v772 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v771 
        let v773 : string = "fable_library_rust::String_::fromString($0)"
        let v774 : string = Fable.Core.RustInterop.emitRustExpr v772 v773 
        let _v762 = v774 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v775 : string = $"%A{v8}"
        let _v762 = v775 
        #endif
#if FABLE_COMPILER_PYTHON
        let v778 : string = $"%A{v8}"
        let _v762 = v778 
        #endif
#else
        let v781 : string = $"%A{v8}"
        let _v762 = v781 
        #endif
        let v784 : string = _v762 
        let v789 : string = $"{v784}"
        let v792 : unit = ()
        let v793 : (unit -> unit) = closure10(v700, v789)
        let v794 : unit = (fun () -> v793 (); v792) ()
        let v797 : string = $"{v736}"
        let v800 : unit = ()
        let v801 : (unit -> unit) = closure10(v700, v797)
        let v802 : unit = (fun () -> v801 (); v800) ()
        let v805 : string = "options"
        let v806 : string = $"{v805}"
        let v809 : unit = ()
        let v810 : (unit -> unit) = closure10(v700, v806)
        let v811 : unit = (fun () -> v810 (); v809) ()
        let v814 : string = $"{v719}"
        let v817 : unit = ()
        let v818 : (unit -> unit) = closure10(v700, v814)
        let v819 : unit = (fun () -> v818 (); v817) ()
        let v822 : string = $"{v701}"
        let v825 : unit = ()
        let v826 : (unit -> unit) = closure10(v700, v822)
        let v827 : unit = (fun () -> v826 (); v825) ()
        let v830 : string = "command"
        let v831 : string = $"{v830}"
        let v834 : unit = ()
        let v835 : (unit -> unit) = closure10(v700, v831)
        let v836 : unit = (fun () -> v835 (); v834) ()
        let v839 : string = $"{v719}"
        let v842 : unit = ()
        let v843 : (unit -> unit) = closure10(v700, v839)
        let v844 : unit = (fun () -> v843 (); v842) ()
        let v847 : string = $"{v0}"
        let v850 : unit = ()
        let v851 : (unit -> unit) = closure10(v700, v847)
        let v852 : unit = (fun () -> v851 (); v850) ()
        let v855 : string = $"{v736}"
        let v858 : unit = ()
        let v859 : (unit -> unit) = closure10(v700, v855)
        let v860 : unit = (fun () -> v859 (); v858) ()
        let v863 : string = "cancellation_token"
        let v864 : string = $"{v863}"
        let v867 : unit = ()
        let v868 : (unit -> unit) = closure10(v700, v864)
        let v869 : unit = (fun () -> v868 (); v867) ()
        let v872 : string = $"{v719}"
        let v875 : unit = ()
        let v876 : (unit -> unit) = closure10(v700, v872)
        let v877 : unit = (fun () -> v876 (); v875) ()
        let v880 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v880 = v884 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v880 = v888 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v889 : string = "format!(\"{:#?}\", $0)"
        let v890 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v889 
        let v891 : string = "fable_library_rust::String_::fromString($0)"
        let v892 : string = Fable.Core.RustInterop.emitRustExpr v890 v891 
        let _v880 = v892 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v893 : string = $"%A{v1}"
        let _v880 = v893 
        #endif
#if FABLE_COMPILER_PYTHON
        let v896 : string = $"%A{v1}"
        let _v880 = v896 
        #endif
#else
        let v899 : string = $"%A{v1}"
        let _v880 = v899 
        #endif
        let v902 : string = _v880 
        let v907 : string = $"{v902}"
        let v910 : unit = ()
        let v911 : (unit -> unit) = closure10(v700, v907)
        let v912 : unit = (fun () -> v911 (); v910) ()
        let v915 : string = $"{v736}"
        let v918 : unit = ()
        let v919 : (unit -> unit) = closure10(v700, v915)
        let v920 : unit = (fun () -> v919 (); v918) ()
        let v923 : string = "environment_variables"
        let v924 : string = $"{v923}"
        let v927 : unit = ()
        let v928 : (unit -> unit) = closure10(v700, v924)
        let v929 : unit = (fun () -> v928 (); v927) ()
        let v932 : string = $"{v719}"
        let v935 : unit = ()
        let v936 : (unit -> unit) = closure10(v700, v932)
        let v937 : unit = (fun () -> v936 (); v935) ()
        let v940 : string = $"%A{v2}"
        let v943 : string = $"{v940}"
        let v946 : unit = ()
        let v947 : (unit -> unit) = closure10(v700, v943)
        let v948 : unit = (fun () -> v947 (); v946) ()
        let v951 : string = $"{v736}"
        let v954 : unit = ()
        let v955 : (unit -> unit) = closure10(v700, v951)
        let v956 : unit = (fun () -> v955 (); v954) ()
        let v959 : string = "on_line"
        let v960 : string = $"{v959}"
        let v963 : unit = ()
        let v964 : (unit -> unit) = closure10(v700, v960)
        let v965 : unit = (fun () -> v964 (); v963) ()
        let v968 : string = $"{v719}"
        let v971 : unit = ()
        let v972 : (unit -> unit) = closure10(v700, v968)
        let v973 : unit = (fun () -> v972 (); v971) ()
        let v976 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v977 : string = "format!(\"{:#?}\", $0)"
        let v978 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v977 
        let v979 : string = "fable_library_rust::String_::fromString($0)"
        let v980 : string = Fable.Core.RustInterop.emitRustExpr v978 v979 
        let _v976 = v980 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v981 : string = "format!(\"{:#?}\", $0)"
        let v982 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v981 
        let v983 : string = "fable_library_rust::String_::fromString($0)"
        let v984 : string = Fable.Core.RustInterop.emitRustExpr v982 v983 
        let _v976 = v984 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v985 : string = "format!(\"{:#?}\", $0)"
        let v986 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v985 
        let v987 : string = "fable_library_rust::String_::fromString($0)"
        let v988 : string = Fable.Core.RustInterop.emitRustExpr v986 v987 
        let _v976 = v988 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v989 : string = $"%A{v3}"
        let _v976 = v989 
        #endif
#if FABLE_COMPILER_PYTHON
        let v992 : string = $"%A{v3}"
        let _v976 = v992 
        #endif
#else
        let v995 : string = $"%A{v3}"
        let _v976 = v995 
        #endif
        let v998 : string = _v976 
        let v1003 : string = $"{v998}"
        let v1006 : unit = ()
        let v1007 : (unit -> unit) = closure10(v700, v1003)
        let v1008 : unit = (fun () -> v1007 (); v1006) ()
        let v1011 : string = $"{v736}"
        let v1014 : unit = ()
        let v1015 : (unit -> unit) = closure10(v700, v1011)
        let v1016 : unit = (fun () -> v1015 (); v1014) ()
        let v1019 : string = "stdin"
        let v1020 : string = $"{v1019}"
        let v1023 : unit = ()
        let v1024 : (unit -> unit) = closure10(v700, v1020)
        let v1025 : unit = (fun () -> v1024 (); v1023) ()
        let v1028 : string = $"{v719}"
        let v1031 : unit = ()
        let v1032 : (unit -> unit) = closure10(v700, v1028)
        let v1033 : unit = (fun () -> v1032 (); v1031) ()
        let v1036 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1037 : string = "format!(\"{:#?}\", $0)"
        let v1038 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v1037 
        let v1039 : string = "fable_library_rust::String_::fromString($0)"
        let v1040 : string = Fable.Core.RustInterop.emitRustExpr v1038 v1039 
        let _v1036 = v1040 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1041 : string = "format!(\"{:#?}\", $0)"
        let v1042 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v1041 
        let v1043 : string = "fable_library_rust::String_::fromString($0)"
        let v1044 : string = Fable.Core.RustInterop.emitRustExpr v1042 v1043 
        let _v1036 = v1044 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1045 : string = "format!(\"{:#?}\", $0)"
        let v1046 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v1045 
        let v1047 : string = "fable_library_rust::String_::fromString($0)"
        let v1048 : string = Fable.Core.RustInterop.emitRustExpr v1046 v1047 
        let _v1036 = v1048 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1049 : string = $"%A{v4}"
        let _v1036 = v1049 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1052 : string = $"%A{v4}"
        let _v1036 = v1052 
        #endif
#else
        let v1055 : string = $"%A{v4}"
        let _v1036 = v1055 
        #endif
        let v1058 : string = _v1036 
        let v1063 : string = $"{v1058}"
        let v1066 : unit = ()
        let v1067 : (unit -> unit) = closure10(v700, v1063)
        let v1068 : unit = (fun () -> v1067 (); v1066) ()
        let v1071 : string = $"{v736}"
        let v1074 : unit = ()
        let v1075 : (unit -> unit) = closure10(v700, v1071)
        let v1076 : unit = (fun () -> v1075 (); v1074) ()
        let v1079 : string = "trace"
        let v1080 : string = $"{v1079}"
        let v1083 : unit = ()
        let v1084 : (unit -> unit) = closure10(v700, v1080)
        let v1085 : unit = (fun () -> v1084 (); v1083) ()
        let v1088 : string = $"{v719}"
        let v1091 : unit = ()
        let v1092 : (unit -> unit) = closure10(v700, v1088)
        let v1093 : unit = (fun () -> v1092 (); v1091) ()
        let v1098 : string =
            if v5 then
                let v1096 : string = "true"
                v1096
            else
                let v1097 : string = "false"
                v1097
        let v1099 : string = $"{v1098}"
        let v1102 : unit = ()
        let v1103 : (unit -> unit) = closure10(v700, v1099)
        let v1104 : unit = (fun () -> v1103 (); v1102) ()
        let v1107 : string = $"{v736}"
        let v1110 : unit = ()
        let v1111 : (unit -> unit) = closure10(v700, v1107)
        let v1112 : unit = (fun () -> v1111 (); v1110) ()
        let v1115 : string = "working_directory"
        let v1116 : string = $"{v1115}"
        let v1119 : unit = ()
        let v1120 : (unit -> unit) = closure10(v700, v1116)
        let v1121 : unit = (fun () -> v1120 (); v1119) ()
        let v1124 : string = $"{v719}"
        let v1127 : unit = ()
        let v1128 : (unit -> unit) = closure10(v700, v1124)
        let v1129 : unit = (fun () -> v1128 (); v1127) ()
        let v1132 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1133 : string = "format!(\"{:#?}\", $0)"
        let v1134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1133 
        let v1135 : string = "fable_library_rust::String_::fromString($0)"
        let v1136 : string = Fable.Core.RustInterop.emitRustExpr v1134 v1135 
        let _v1132 = v1136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1137 : string = "format!(\"{:#?}\", $0)"
        let v1138 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1137 
        let v1139 : string = "fable_library_rust::String_::fromString($0)"
        let v1140 : string = Fable.Core.RustInterop.emitRustExpr v1138 v1139 
        let _v1132 = v1140 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1141 : string = "format!(\"{:#?}\", $0)"
        let v1142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1141 
        let v1143 : string = "fable_library_rust::String_::fromString($0)"
        let v1144 : string = Fable.Core.RustInterop.emitRustExpr v1142 v1143 
        let _v1132 = v1144 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1145 : string = $"%A{v6}"
        let _v1132 = v1145 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1148 : string = $"%A{v6}"
        let _v1132 = v1148 
        #endif
#else
        let v1151 : string = $"%A{v6}"
        let _v1132 = v1151 
        #endif
        let v1154 : string = _v1132 
        let v1159 : string = $"{v1154}"
        let v1162 : unit = ()
        let v1163 : (unit -> unit) = closure10(v700, v1159)
        let v1164 : unit = (fun () -> v1163 (); v1162) ()
        let v1167 : string = " }"
        let v1168 : string = $"{v1167}"
        let v1171 : unit = ()
        let v1172 : (unit -> unit) = closure10(v700, v1168)
        let v1173 : unit = (fun () -> v1172 (); v1171) ()
        let v1176 : string = $"{v1167}"
        let v1179 : unit = ()
        let v1180 : (unit -> unit) = closure10(v700, v1176)
        let v1181 : unit = (fun () -> v1180 (); v1179) ()
        let v1184 : string = v700.l0
        let v1185 : (unit -> string) = closure44()
        let v1186 : string = $"{v491} {v692} #{v698} %s{v1185 ()} / {v1184}"
        let v1189 : char list = []
        let v1190 : (char list -> (char [])) = List.toArray
        let v1191 : (char []) = v1190 v1189
        let v1194 : string = v1186.TrimStart v1191 
        let v1212 : char list = []
        let v1213 : char list = '/' :: v1212 
        let v1216 : char list = ' ' :: v1213 
        let v1219 : (char list -> (char [])) = List.toArray
        let v1220 : (char []) = v1219 v1216
        let v1223 : string = v1194.TrimEnd v1220 
        let v1241 : (string -> unit) = closure12()
        let v1242 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1243 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1223 v1243 
        let _v1242 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1244 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1223 v1244 
        let _v1242 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1245 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1223 v1245 
        let _v1242 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1241 v1223
        let _v1242 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1241 v1223
        let _v1242 = () 
        #endif
#else
        v1241 v1223
        let _v1242 = () 
        #endif
        _v1242 
        let v1246 : (string -> unit) = v25.l0
        v1246 v1223
and closure45 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US24 =
    US24_0(v0)
and method67 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) =
    closure45()
and closure46 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method68 () : (std_string_String -> US24) =
    closure46()
and closure48 () () : string =
    let v0 : string = $"runtime.execute_with_options / child error"
    v0
and closure47 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v798 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method8()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method8()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method8()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method9()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method9()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method9()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US0 = US0_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure10(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US0 = US0_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure10(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US1 =
                    if v662 then
                        let v665 : string = "Debug"
                        US1_0(v665)
                    else
                        US1_1
                match v668 with
                | US1_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method8()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method8()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method8()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method9()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method9()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method9()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US0 = US0_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure10(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US0 = US0_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure10(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US1 =
                        if v721 then
                            let v724 : string = "Info"
                            US1_0(v724)
                        else
                            US1_1
                    match v727 with
                    | US1_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method8()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method8()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method8()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method9()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method9()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method9()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US0 = US0_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure10(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US0 = US0_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure10(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US1 =
                            if v780 then
                                let v783 : string = "Warning"
                                US1_0(v783)
                            else
                                US1_1
                        match v786 with
                        | US1_1 -> (* None *)
                            let v789 : string = "Critical"
                            US1_0(v789)
                        | US1_0(v787) -> (* Some *)
                            US1_0(v787)
                    | US1_0(v728) -> (* Some *)
                        US1_0(v728)
                | US1_0(v669) -> (* Some *)
                    US1_0(v669)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v802 : string =
            match v798 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method11()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method11()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method11()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure10(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "error"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure10(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure10(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v904 : string = "format!(\"{:#?}\", $0)"
        let v905 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v904 
        let v906 : string = "fable_library_rust::String_::fromString($0)"
        let v907 : string = Fable.Core.RustInterop.emitRustExpr v905 v906 
        let _v903 = v907 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v908 : string = "format!(\"{:#?}\", $0)"
        let v909 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v908 
        let v910 : string = "fable_library_rust::String_::fromString($0)"
        let v911 : string = Fable.Core.RustInterop.emitRustExpr v909 v910 
        let _v903 = v911 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v912 : string = "format!(\"{:#?}\", $0)"
        let v913 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v912 
        let v914 : string = "fable_library_rust::String_::fromString($0)"
        let v915 : string = Fable.Core.RustInterop.emitRustExpr v913 v914 
        let _v903 = v915 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v916 : string = $"%A{v0}"
        let _v903 = v916 
        #endif
#if FABLE_COMPILER_PYTHON
        let v919 : string = $"%A{v0}"
        let _v903 = v919 
        #endif
#else
        let v922 : string = $"%A{v0}"
        let _v903 = v922 
        #endif
        let v925 : string = _v903 
        let v930 : string = $"{v925}"
        let v933 : unit = ()
        let v934 : (unit -> unit) = closure10(v875, v930)
        let v935 : unit = (fun () -> v934 (); v933) ()
        let v938 : string = " }"
        let v939 : string = $"{v938}"
        let v942 : unit = ()
        let v943 : (unit -> unit) = closure10(v875, v939)
        let v944 : unit = (fun () -> v943 (); v942) ()
        let v947 : string = v875.l0
        let v948 : (unit -> string) = closure48()
        let v949 : string = $"{v483} {v867} #{v873} %s{v948 ()} / {v947}"
        let v952 : char list = []
        let v953 : (char list -> (char [])) = List.toArray
        let v954 : (char []) = v953 v952
        let v957 : string = v949.TrimStart v954 
        let v975 : char list = []
        let v976 : char list = '/' :: v975 
        let v979 : char list = ' ' :: v976 
        let v982 : (char list -> (char [])) = List.toArray
        let v983 : (char []) = v982 v979
        let v986 : string = v957.TrimEnd v983 
        let v1004 : (string -> unit) = closure12()
        let v1005 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1006 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1006 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1007 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1007 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1008 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1008 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1004 v986
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1004 v986
        let _v1005 = () 
        #endif
#else
        v1004 v986
        let _v1005 = () 
        #endif
        _v1005 
        let v1009 : (string -> unit) = v17.l0
        v1009 v986
and closure49 () (v0 : std_string_String) : US26 =
    US26_0(v0)
and method69 () : (std_string_String -> US26) =
    closure49()
and closure50 () (v0 : std_string_String) : US26 =
    US26_1(v0)
and method70 () : (std_string_String -> US26) =
    closure50()
and closure52 () () : string =
    let v0 : string = $"runtime.stdio_line"
    v0
and closure51 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v798 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method8()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method8()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method8()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method9()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method9()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method9()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US0 = US0_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure10(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US0 = US0_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure10(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US1 =
                    if v662 then
                        let v665 : string = "Debug"
                        US1_0(v665)
                    else
                        US1_1
                match v668 with
                | US1_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method8()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method8()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method8()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method9()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method9()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method9()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US0 = US0_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure10(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US0 = US0_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure10(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US1 =
                        if v721 then
                            let v724 : string = "Info"
                            US1_0(v724)
                        else
                            US1_1
                    match v727 with
                    | US1_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method8()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method8()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method8()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method9()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method9()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method9()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US0 = US0_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure10(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US0 = US0_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure10(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US1 =
                            if v780 then
                                let v783 : string = "Warning"
                                US1_0(v783)
                            else
                                US1_1
                        match v786 with
                        | US1_1 -> (* None *)
                            let v789 : string = "Critical"
                            US1_0(v789)
                        | US1_0(v787) -> (* Some *)
                            US1_0(v787)
                    | US1_0(v728) -> (* Some *)
                        US1_0(v728)
                | US1_0(v669) -> (* Some *)
                    US1_0(v669)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v802 : string =
            match v798 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method11()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method11()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method11()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure10(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "e"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure10(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure10(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v904 : string = "format!(\"{:#?}\", $0)"
        let v905 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v904 
        let v906 : string = "fable_library_rust::String_::fromString($0)"
        let v907 : string = Fable.Core.RustInterop.emitRustExpr v905 v906 
        let _v903 = v907 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v908 : string = "format!(\"{:#?}\", $0)"
        let v909 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v908 
        let v910 : string = "fable_library_rust::String_::fromString($0)"
        let v911 : string = Fable.Core.RustInterop.emitRustExpr v909 v910 
        let _v903 = v911 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v912 : string = "format!(\"{:#?}\", $0)"
        let v913 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v912 
        let v914 : string = "fable_library_rust::String_::fromString($0)"
        let v915 : string = Fable.Core.RustInterop.emitRustExpr v913 v914 
        let _v903 = v915 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v916 : string = $"%A{v0}"
        let _v903 = v916 
        #endif
#if FABLE_COMPILER_PYTHON
        let v919 : string = $"%A{v0}"
        let _v903 = v919 
        #endif
#else
        let v922 : string = $"%A{v0}"
        let _v903 = v922 
        #endif
        let v925 : string = _v903 
        let v930 : string = $"{v925}"
        let v933 : unit = ()
        let v934 : (unit -> unit) = closure10(v875, v930)
        let v935 : unit = (fun () -> v934 (); v933) ()
        let v938 : string = " }"
        let v939 : string = $"{v938}"
        let v942 : unit = ()
        let v943 : (unit -> unit) = closure10(v875, v939)
        let v944 : unit = (fun () -> v943 (); v942) ()
        let v947 : string = v875.l0
        let v948 : (unit -> string) = closure52()
        let v949 : string = $"{v483} {v867} #{v873} %s{v948 ()} / {v947}"
        let v952 : char list = []
        let v953 : (char list -> (char [])) = List.toArray
        let v954 : (char []) = v953 v952
        let v957 : string = v949.TrimStart v954 
        let v975 : char list = []
        let v976 : char list = '/' :: v975 
        let v979 : char list = ' ' :: v976 
        let v982 : (char list -> (char [])) = List.toArray
        let v983 : (char []) = v982 v979
        let v986 : string = v957.TrimEnd v983 
        let v1004 : (string -> unit) = closure12()
        let v1005 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1006 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1006 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1007 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1007 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1008 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1008 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1004 v986
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1004 v986
        let _v1005 = () 
        #endif
#else
        v1004 v986
        let _v1005 = () 
        #endif
        _v1005 
        let v1009 : (string -> unit) = v17.l0
        v1009 v986
and closure54 (v0 : string) () : string =
    v0
and closure53 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method11()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method11()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method11()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method10()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = v626.l0
        let v628 : (unit -> string) = closure54(v0)
        let v629 : string = $"{v483} {v618} #{v624} %s{v628 ()} / {v627}"
        let v632 : char list = []
        let v633 : (char list -> (char [])) = List.toArray
        let v634 : (char []) = v633 v632
        let v637 : string = v629.TrimStart v634 
        let v655 : char list = []
        let v656 : char list = '/' :: v655 
        let v659 : char list = ' ' :: v656 
        let v662 : (char list -> (char [])) = List.toArray
        let v663 : (char []) = v662 v659
        let v666 : string = v637.TrimEnd v663 
        let v684 : (string -> unit) = closure12()
        let v685 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v686 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v686 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v687 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v687 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v688 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v688 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v684 v666
        let _v685 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v684 v666
        let _v685 = () 
        #endif
#else
        v684 v666
        let _v685 = () 
        #endif
        _v685 
        let v689 : (string -> unit) = v17.l0
        v689 v666
and closure55 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method71 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure55()
and method72 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure56 (v0 : US27 option ref) (v1 : US27 option) : US27 option ref =
    v0.Value <- v1 
    v0
and closure57 (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v1 : (US27 option -> US27 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) = x
    let v3 : US27 = US27_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure58 (v0 : US28 option ref) (v1 : US28 option) : US28 option ref =
    v0.Value <- v1 
    v0
and closure59 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option, v1 : (US28 option -> US28 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = x
    let v3 : US28 = US28_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method73 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and method74 (v0 : std_thread_JoinHandle<Result<unit, string>>) : std_thread_JoinHandle<Result<unit, string>> =
    v0
and closure60 () (v0 : std_process_Output) : US29 =
    US29_0(v0)
and closure61 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and closure63 () () : string =
    let v0 : string = $"runtime.execute_with_options / output error"
    v0
and closure62 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v798 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method8()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method8()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method8()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method9()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method9()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method9()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US0 = US0_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure10(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US0 = US0_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure10(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US1 =
                    if v662 then
                        let v665 : string = "Debug"
                        US1_0(v665)
                    else
                        US1_1
                match v668 with
                | US1_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method8()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method8()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method8()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method9()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method9()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method9()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US0 = US0_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure10(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US0 = US0_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure10(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US1 =
                        if v721 then
                            let v724 : string = "Info"
                            US1_0(v724)
                        else
                            US1_1
                    match v727 with
                    | US1_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method8()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method8()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method8()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method9()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method9()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method9()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US0 = US0_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure10(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US0 = US0_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure10(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US1 =
                            if v780 then
                                let v783 : string = "Warning"
                                US1_0(v783)
                            else
                                US1_1
                        match v786 with
                        | US1_1 -> (* None *)
                            let v789 : string = "Critical"
                            US1_0(v789)
                        | US1_0(v787) -> (* Some *)
                            US1_0(v787)
                    | US1_0(v728) -> (* Some *)
                        US1_0(v728)
                | US1_0(v669) -> (* Some *)
                    US1_0(v669)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v802 : string =
            match v798 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method11()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method11()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method11()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure10(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "error"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure10(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure10(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v904 : string = "format!(\"{:#?}\", $0)"
        let v905 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v904 
        let v906 : string = "fable_library_rust::String_::fromString($0)"
        let v907 : string = Fable.Core.RustInterop.emitRustExpr v905 v906 
        let _v903 = v907 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v908 : string = "format!(\"{:#?}\", $0)"
        let v909 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v908 
        let v910 : string = "fable_library_rust::String_::fromString($0)"
        let v911 : string = Fable.Core.RustInterop.emitRustExpr v909 v910 
        let _v903 = v911 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v912 : string = "format!(\"{:#?}\", $0)"
        let v913 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v912 
        let v914 : string = "fable_library_rust::String_::fromString($0)"
        let v915 : string = Fable.Core.RustInterop.emitRustExpr v913 v914 
        let _v903 = v915 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v916 : string = $"%A{v0}"
        let _v903 = v916 
        #endif
#if FABLE_COMPILER_PYTHON
        let v919 : string = $"%A{v0}"
        let _v903 = v919 
        #endif
#else
        let v922 : string = $"%A{v0}"
        let _v903 = v922 
        #endif
        let v925 : string = _v903 
        let v930 : string = $"{v925}"
        let v933 : unit = ()
        let v934 : (unit -> unit) = closure10(v875, v930)
        let v935 : unit = (fun () -> v934 (); v933) ()
        let v938 : string = " }"
        let v939 : string = $"{v938}"
        let v942 : unit = ()
        let v943 : (unit -> unit) = closure10(v875, v939)
        let v944 : unit = (fun () -> v943 (); v942) ()
        let v947 : string = v875.l0
        let v948 : (unit -> string) = closure63()
        let v949 : string = $"{v483} {v867} #{v873} %s{v948 ()} / {v947}"
        let v952 : char list = []
        let v953 : (char list -> (char [])) = List.toArray
        let v954 : (char []) = v953 v952
        let v957 : string = v949.TrimStart v954 
        let v975 : char list = []
        let v976 : char list = '/' :: v975 
        let v979 : char list = ' ' :: v976 
        let v982 : (char list -> (char [])) = List.toArray
        let v983 : (char []) = v982 v979
        let v986 : string = v957.TrimEnd v983 
        let v1004 : (string -> unit) = closure12()
        let v1005 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1006 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1006 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1007 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1007 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1008 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1008 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1004 v986
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1004 v986
        let _v1005 = () 
        #endif
#else
        v1004 v986
        let _v1005 = () 
        #endif
        _v1005 
        let v1009 : (string -> unit) = v17.l0
        v1009 v986
and closure64 (v0 : US30 option ref) (v1 : US30 option) : US30 option ref =
    v0.Value <- v1 
    v0
and closure65 (v0 : int32 option, v1 : (US30 option -> US30 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : int32 = x
    let v3 : US30 = US30_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure67 () () : string =
    let v0 : string = $"runtime.execute_with_options / result"
    v0
and closure66 (v0 : int32, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 0 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : string = "Verbose"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_black"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[90m"
        let v608 : string = method11()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[90m"
        let v612 : string = method11()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[90m"
        let v616 : string = method11()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : int32 = v1.Length
        let v627 : string = method10()
        let v628 : Mut4 = {l0 = v627} : Mut4
        let v629 : string = "{ "
        let v630 : string = $"{v629}"
        let v633 : unit = ()
        let v634 : (unit -> unit) = closure10(v628, v630)
        let v635 : unit = (fun () -> v634 (); v633) ()
        let v638 : string = "exit_code"
        let v639 : string = $"{v638}"
        let v642 : unit = ()
        let v643 : (unit -> unit) = closure10(v628, v639)
        let v644 : unit = (fun () -> v643 (); v642) ()
        let v647 : string = " = "
        let v648 : string = $"{v647}"
        let v651 : unit = ()
        let v652 : (unit -> unit) = closure10(v628, v648)
        let v653 : unit = (fun () -> v652 (); v651) ()
        let v656 : string = $"{v0}"
        let v659 : unit = ()
        let v660 : (unit -> unit) = closure10(v628, v656)
        let v661 : unit = (fun () -> v660 (); v659) ()
        let v664 : string = "; "
        let v665 : string = $"{v664}"
        let v668 : unit = ()
        let v669 : (unit -> unit) = closure10(v628, v665)
        let v670 : unit = (fun () -> v669 (); v668) ()
        let v673 : string = "std_trace_length"
        let v674 : string = $"{v673}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure10(v628, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = $"{v647}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v628, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = $"{v626}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v628, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = " }"
        let v699 : string = $"{v698}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v628, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = v628.l0
        let v708 : (unit -> string) = closure67()
        let v709 : string = $"{v484} {v619} #{v625} %s{v708 ()} / {v707}"
        let v712 : char list = []
        let v713 : (char list -> (char [])) = List.toArray
        let v714 : (char []) = v713 v712
        let v717 : string = v709.TrimStart v714 
        let v735 : char list = []
        let v736 : char list = '/' :: v735 
        let v739 : char list = ' ' :: v736 
        let v742 : (char list -> (char [])) = List.toArray
        let v743 : (char []) = v742 v739
        let v746 : string = v717.TrimEnd v743 
        let v764 : (string -> unit) = closure12()
        let v765 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v766 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v766 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v767 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v767 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v768 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v746 v768 
        let _v765 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v764 v746
        let _v765 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v764 v746
        let _v765 = () 
        #endif
#else
        v764 v746
        let _v765 = () 
        #endif
        _v765 
        let v769 : (string -> unit) = v18.l0
        v769 v746
and closure69 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure68 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) () : unit =
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure2()
    let v9 : unit = (fun () -> v8 (); v7) ()
    let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : int64 option) = State.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v8 (); v37) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : int64 option) = State.trace_state.Value
    let v66 : US0 = v54.l0
    let v67 : bool = v53.l0
    let v68 : bool = v67 = false
    let v71 : bool =
        if v68 then
            false
        else
            let v69 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v66
            let v70 : bool = 1 >= v69
            v70
    if v71 then
        let v72 : unit = ()
        let v73 : (unit -> unit) = closure7(v22)
        let v74 : unit = (fun () -> v73 (); v72) ()
        let v77 : unit = ()
        let v78 : unit = (fun () -> v8 (); v77) ()
        let struct (v91 : Mut0, v92 : Mut1, v93 : Mut2, v94 : Mut3, v95 : int64 option) = State.trace_state.Value
        let v106 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v107 : US3 option = None
        let _v107 = ref v107 
        let v108 : US3 option ref = _v107 
        let v109 : (US3 option -> US3 option ref) = closure8(v108)
        let v110 : unit = ()
        let v111 : (unit -> unit) = closure9(v95, v109)
        let v112 : unit = (fun () -> v111 (); v110) ()
        let v115 : US3 option = _v107.Value 
        let v126 : US3 = US3_1
        let v127 : US3 = v115 |> Option.defaultValue v126 
        let v167 : System.DateTime =
            match v127 with
            | US3_1 -> (* None *)
                let v163 : System.DateTime = System.DateTime.Now
                v163
            | US3_0(v131) -> (* Some *)
                let v132 : System.DateTime = System.DateTime.Now
                let v135 : (System.DateTime -> int64) = _.Ticks
                let v136 : int64 = v135 v132
                let v139 : int64 = v136 - v131
                let v140 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v141 : System.TimeSpan = v140 v139
                let v144 : (System.TimeSpan -> int32) = _.Hours
                let v145 : int32 = v144 v141
                let v148 : (System.TimeSpan -> int32) = _.Minutes
                let v149 : int32 = v148 v141
                let v152 : (System.TimeSpan -> int32) = _.Seconds
                let v153 : int32 = v152 v141
                let v156 : (System.TimeSpan -> int32) = _.Milliseconds
                let v157 : int32 = v156 v141
                let v160 : System.DateTime = System.DateTime (1, 1, 1, v145, v149, v153, v157)
                v160
        let v168 : string = method6()
        let v171 : (string -> string) = v167.ToString
        let v172 : string = v171 v168
        let _v106 = v172 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v175 : US3 option = None
        let _v175 = ref v175 
        let v176 : US3 option ref = _v175 
        let v177 : (US3 option -> US3 option ref) = closure8(v176)
        let v178 : unit = ()
        let v179 : (unit -> unit) = closure9(v95, v177)
        let v180 : unit = (fun () -> v179 (); v178) ()
        let v183 : US3 option = _v175.Value 
        let v194 : US3 = US3_1
        let v195 : US3 = v183 |> Option.defaultValue v194 
        let v235 : System.DateTime =
            match v195 with
            | US3_1 -> (* None *)
                let v231 : System.DateTime = System.DateTime.Now
                v231
            | US3_0(v199) -> (* Some *)
                let v200 : System.DateTime = System.DateTime.Now
                let v203 : (System.DateTime -> int64) = _.Ticks
                let v204 : int64 = v203 v200
                let v207 : int64 = v204 - v199
                let v208 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v209 : System.TimeSpan = v208 v207
                let v212 : (System.TimeSpan -> int32) = _.Hours
                let v213 : int32 = v212 v209
                let v216 : (System.TimeSpan -> int32) = _.Minutes
                let v217 : int32 = v216 v209
                let v220 : (System.TimeSpan -> int32) = _.Seconds
                let v221 : int32 = v220 v209
                let v224 : (System.TimeSpan -> int32) = _.Milliseconds
                let v225 : int32 = v224 v209
                let v228 : System.DateTime = System.DateTime (1, 1, 1, v213, v217, v221, v225)
                v228
        let v236 : string = method6()
        let v239 : (string -> string) = v235.ToString
        let v240 : string = v239 v236
        let _v106 = v240 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v243 : string = $"near_sdk::env::block_timestamp()"
        let v244 : uint64 = Fable.Core.RustInterop.emitRustExpr () v243 
        let v245 : US3 option = None
        let _v245 = ref v245 
        let v246 : US3 option ref = _v245 
        let v247 : (US3 option -> US3 option ref) = closure8(v246)
        let v248 : unit = ()
        let v249 : (unit -> unit) = closure9(v95, v247)
        let v250 : unit = (fun () -> v249 (); v248) ()
        let v253 : US3 option = _v245.Value 
        let v264 : US3 = US3_1
        let v265 : US3 = v253 |> Option.defaultValue v264 
        let v274 : uint64 =
            match v265 with
            | US3_1 -> (* None *)
                v244
            | US3_0(v269) -> (* Some *)
                let v270 : (int64 -> uint64) = uint64
                let v271 : uint64 = v270 v269
                let v272 : uint64 = v244 - v271
                v272
        let v275 : uint64 = v274 / 1000000000UL
        let v276 : uint64 = v275 % 60UL
        let v277 : uint64 = v275 / 60UL
        let v278 : uint64 = v277 % 60UL
        let v279 : uint64 = v275 / 3600UL
        let v280 : uint64 = v279 % 24UL
        let v281 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v282 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v280, v278, v276) v281 
        let v283 : string = "fable_library_rust::String_::fromString($0)"
        let v284 : string = Fable.Core.RustInterop.emitRustExpr v282 v283 
        let _v106 = v284 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v285 : US3 option = None
        let _v285 = ref v285 
        let v286 : US3 option ref = _v285 
        let v287 : (US3 option -> US3 option ref) = closure8(v286)
        let v288 : unit = ()
        let v289 : (unit -> unit) = closure9(v95, v287)
        let v290 : unit = (fun () -> v289 (); v288) ()
        let v293 : US3 option = _v285.Value 
        let v304 : US3 = US3_1
        let v305 : US3 = v293 |> Option.defaultValue v304 
        let v345 : System.DateTime =
            match v305 with
            | US3_1 -> (* None *)
                let v341 : System.DateTime = System.DateTime.Now
                v341
            | US3_0(v309) -> (* Some *)
                let v310 : System.DateTime = System.DateTime.Now
                let v313 : (System.DateTime -> int64) = _.Ticks
                let v314 : int64 = v313 v310
                let v317 : int64 = v314 - v309
                let v318 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v319 : System.TimeSpan = v318 v317
                let v322 : (System.TimeSpan -> int32) = _.Hours
                let v323 : int32 = v322 v319
                let v326 : (System.TimeSpan -> int32) = _.Minutes
                let v327 : int32 = v326 v319
                let v330 : (System.TimeSpan -> int32) = _.Seconds
                let v331 : int32 = v330 v319
                let v334 : (System.TimeSpan -> int32) = _.Milliseconds
                let v335 : int32 = v334 v319
                let v338 : System.DateTime = System.DateTime (1, 1, 1, v323, v327, v331, v335)
                v338
        let v346 : string = method7()
        let v349 : (string -> string) = v345.ToString
        let v350 : string = v349 v346
        let _v106 = v350 
        #endif
#if FABLE_COMPILER_PYTHON
        let v353 : US3 option = None
        let _v353 = ref v353 
        let v354 : US3 option ref = _v353 
        let v355 : (US3 option -> US3 option ref) = closure8(v354)
        let v356 : unit = ()
        let v357 : (unit -> unit) = closure9(v95, v355)
        let v358 : unit = (fun () -> v357 (); v356) ()
        let v361 : US3 option = _v353.Value 
        let v372 : US3 = US3_1
        let v373 : US3 = v361 |> Option.defaultValue v372 
        let v413 : System.DateTime =
            match v373 with
            | US3_1 -> (* None *)
                let v409 : System.DateTime = System.DateTime.Now
                v409
            | US3_0(v377) -> (* Some *)
                let v378 : System.DateTime = System.DateTime.Now
                let v381 : (System.DateTime -> int64) = _.Ticks
                let v382 : int64 = v381 v378
                let v385 : int64 = v382 - v377
                let v386 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v387 : System.TimeSpan = v386 v385
                let v390 : (System.TimeSpan -> int32) = _.Hours
                let v391 : int32 = v390 v387
                let v394 : (System.TimeSpan -> int32) = _.Minutes
                let v395 : int32 = v394 v387
                let v398 : (System.TimeSpan -> int32) = _.Seconds
                let v399 : int32 = v398 v387
                let v402 : (System.TimeSpan -> int32) = _.Milliseconds
                let v403 : int32 = v402 v387
                let v406 : System.DateTime = System.DateTime (1, 1, 1, v391, v395, v399, v403)
                v406
        let v414 : string = method7()
        let v417 : (string -> string) = v413.ToString
        let v418 : string = v417 v414
        let _v106 = v418 
        #endif
#else
        let v421 : US3 option = None
        let _v421 = ref v421 
        let v422 : US3 option ref = _v421 
        let v423 : (US3 option -> US3 option ref) = closure8(v422)
        let v424 : unit = ()
        let v425 : (unit -> unit) = closure9(v95, v423)
        let v426 : unit = (fun () -> v425 (); v424) ()
        let v429 : US3 option = _v421.Value 
        let v440 : US3 = US3_1
        let v441 : US3 = v429 |> Option.defaultValue v440 
        let v481 : System.DateTime =
            match v441 with
            | US3_1 -> (* None *)
                let v477 : System.DateTime = System.DateTime.Now
                v477
            | US3_0(v445) -> (* Some *)
                let v446 : System.DateTime = System.DateTime.Now
                let v449 : (System.DateTime -> int64) = _.Ticks
                let v450 : int64 = v449 v446
                let v453 : int64 = v450 - v445
                let v454 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v455 : System.TimeSpan = v454 v453
                let v458 : (System.TimeSpan -> int32) = _.Hours
                let v459 : int32 = v458 v455
                let v462 : (System.TimeSpan -> int32) = _.Minutes
                let v463 : int32 = v462 v455
                let v466 : (System.TimeSpan -> int32) = _.Seconds
                let v467 : int32 = v466 v455
                let v470 : (System.TimeSpan -> int32) = _.Milliseconds
                let v471 : int32 = v470 v455
                let v474 : System.DateTime = System.DateTime (1, 1, 1, v459, v463, v467, v471)
                v474
        let v482 : string = method7()
        let v485 : (string -> string) = v481.ToString
        let v486 : string = v485 v482
        let _v106 = v486 
        #endif
        let v489 : string = _v106 
        
        
        
        
        
        let v559 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v560 : string = method8()
        let _v559 = v560 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v561 : string = method8()
        let _v559 = v561 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v562 : string = method8()
        let _v559 = v562 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v563 : string = method9()
        let _v559 = v563 
        #endif
#if FABLE_COMPILER_PYTHON
        let v564 : string = method9()
        let _v559 = v564 
        #endif
#else
        let v565 : string = method9()
        let _v559 = v565 
        #endif
        let v566 : string = _v559 
        let v571 : string = method10()
        let v572 : Mut4 = {l0 = v571} : Mut4
        let v573 : US0 = US0_0
        let v574 : string = $"%A{v573}"
        let v578 : string = $"{v574}"
        let v581 : unit = ()
        let v582 : (unit -> unit) = closure10(v572, v578)
        let v583 : unit = (fun () -> v582 (); v581) ()
        let v586 : string = v572.l0
        let v587 : (string []) = v586.Split v566 
        let v590 : string = v587.[int 0]
        let v593 : string = method10()
        let v594 : Mut4 = {l0 = v593} : Mut4
        let v595 : US0 = US0_1
        let v596 : string = $"%A{v595}"
        let v600 : string = $"{v596}"
        let v603 : unit = ()
        let v604 : (unit -> unit) = closure10(v594, v600)
        let v605 : unit = (fun () -> v604 (); v603) ()
        let v608 : string = v594.l0
        let v609 : bool = v608.StartsWith v590 
        let v615 : US1 =
            if v609 then
                let v612 : string = "Verbose"
                US1_0(v612)
            else
                US1_1
        let v621 : US1 =
            match v615 with
            | US1_1 -> (* None *)
                let v618 : string = "Debug"
                US1_0(v618)
            | US1_0(v616) -> (* Some *)
                US1_0(v616)
        let v625 : string =
            match v621 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v622) -> (* Some *)
                v622
        let v626 : (unit -> string) = v625.ToLower
        let v627 : string = v626 ()
        let v630 : string = v627.PadLeft (7, ' ')
        let v644 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v645 : string = "inline_colorization::color_bright_blue"
        let v646 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v645 
        let v647 : string = "&*$0"
        let v648 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v630 v647 
        let v649 : string = "inline_colorization::color_reset"
        let v650 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v649 
        let v651 : string = "\"{v646}{v648}{v650}\""
        let v652 : string = @$"format!(" + v651 + ")"
        let v653 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v652 
        let v654 : string = "fable_library_rust::String_::fromString($0)"
        let v655 : string = Fable.Core.RustInterop.emitRustExpr v653 v654 
        let _v644 = v655 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v656 : string = "inline_colorization::color_bright_blue"
        let v657 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v656 
        let v658 : string = "&*$0"
        let v659 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v630 v658 
        let v660 : string = "inline_colorization::color_reset"
        let v661 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v660 
        let v662 : string = "\"{v657}{v659}{v661}\""
        let v663 : string = @$"format!(" + v662 + ")"
        let v664 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v663 
        let v665 : string = "fable_library_rust::String_::fromString($0)"
        let v666 : string = Fable.Core.RustInterop.emitRustExpr v664 v665 
        let _v644 = v666 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v667 : string = "inline_colorization::color_bright_blue"
        let v668 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v667 
        let v669 : string = "&*$0"
        let v670 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v630 v669 
        let v671 : string = "inline_colorization::color_reset"
        let v672 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v671 
        let v673 : string = "\"{v668}{v670}{v672}\""
        let v674 : string = @$"format!(" + v673 + ")"
        let v675 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v674 
        let v676 : string = "fable_library_rust::String_::fromString($0)"
        let v677 : string = Fable.Core.RustInterop.emitRustExpr v675 v676 
        let _v644 = v677 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v678 : string = "\u001b[94m"
        let v679 : string = method11()
        let v680 : string = v678 + v630 
        let v681 : string = v680 + v679 
        let _v644 = v681 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = "\u001b[94m"
        let v683 : string = method11()
        let v684 : string = v682 + v630 
        let v685 : string = v684 + v683 
        let _v644 = v685 
        #endif
#else
        let v686 : string = "\u001b[94m"
        let v687 : string = method11()
        let v688 : string = v686 + v630 
        let v689 : string = v688 + v687 
        let _v644 = v689 
        #endif
        let v690 : string = _v644 
        let v696 : int64 = v91.l0
        let v697 : string = method10()
        let v698 : Mut4 = {l0 = v697} : Mut4
        let v699 : string = "{ "
        let v700 : string = $"{v699}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure10(v698, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = "options"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure10(v698, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = " = "
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure10(v698, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v699}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure10(v698, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = "command"
        let v735 : string = $"{v734}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure10(v698, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v717}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure10(v698, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = $"{v0}"
        let v754 : unit = ()
        let v755 : (unit -> unit) = closure10(v698, v751)
        let v756 : unit = (fun () -> v755 (); v754) ()
        let v759 : string = "; "
        let v760 : string = $"{v759}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure10(v698, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = "cancellation_token"
        let v769 : string = $"{v768}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure10(v698, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = $"{v717}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure10(v698, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v786 : string = "format!(\"{:#?}\", $0)"
        let v787 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v786 
        let v788 : string = "fable_library_rust::String_::fromString($0)"
        let v789 : string = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let _v785 = v789 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v790 : string = "format!(\"{:#?}\", $0)"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v785 = v793 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v794 : string = "format!(\"{:#?}\", $0)"
        let v795 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v794 
        let v796 : string = "fable_library_rust::String_::fromString($0)"
        let v797 : string = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let _v785 = v797 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v798 : string = $"%A{v1}"
        let _v785 = v798 
        #endif
#if FABLE_COMPILER_PYTHON
        let v801 : string = $"%A{v1}"
        let _v785 = v801 
        #endif
#else
        let v804 : string = $"%A{v1}"
        let _v785 = v804 
        #endif
        let v807 : string = _v785 
        let v812 : string = $"{v807}"
        let v815 : unit = ()
        let v816 : (unit -> unit) = closure10(v698, v812)
        let v817 : unit = (fun () -> v816 (); v815) ()
        let v820 : string = $"{v759}"
        let v823 : unit = ()
        let v824 : (unit -> unit) = closure10(v698, v820)
        let v825 : unit = (fun () -> v824 (); v823) ()
        let v828 : string = "environment_variables"
        let v829 : string = $"{v828}"
        let v832 : unit = ()
        let v833 : (unit -> unit) = closure10(v698, v829)
        let v834 : unit = (fun () -> v833 (); v832) ()
        let v837 : string = $"{v717}"
        let v840 : unit = ()
        let v841 : (unit -> unit) = closure10(v698, v837)
        let v842 : unit = (fun () -> v841 (); v840) ()
        let v845 : string = $"%A{v2}"
        let v848 : string = $"{v845}"
        let v851 : unit = ()
        let v852 : (unit -> unit) = closure10(v698, v848)
        let v853 : unit = (fun () -> v852 (); v851) ()
        let v856 : string = $"{v759}"
        let v859 : unit = ()
        let v860 : (unit -> unit) = closure10(v698, v856)
        let v861 : unit = (fun () -> v860 (); v859) ()
        let v864 : string = "on_line"
        let v865 : string = $"{v864}"
        let v868 : unit = ()
        let v869 : (unit -> unit) = closure10(v698, v865)
        let v870 : unit = (fun () -> v869 (); v868) ()
        let v873 : string = $"{v717}"
        let v876 : unit = ()
        let v877 : (unit -> unit) = closure10(v698, v873)
        let v878 : unit = (fun () -> v877 (); v876) ()
        let v881 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v882 : string = "format!(\"{:#?}\", $0)"
        let v883 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v882 
        let v884 : string = "fable_library_rust::String_::fromString($0)"
        let v885 : string = Fable.Core.RustInterop.emitRustExpr v883 v884 
        let _v881 = v885 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v886 : string = "format!(\"{:#?}\", $0)"
        let v887 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v886 
        let v888 : string = "fable_library_rust::String_::fromString($0)"
        let v889 : string = Fable.Core.RustInterop.emitRustExpr v887 v888 
        let _v881 = v889 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v890 : string = "format!(\"{:#?}\", $0)"
        let v891 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v890 
        let v892 : string = "fable_library_rust::String_::fromString($0)"
        let v893 : string = Fable.Core.RustInterop.emitRustExpr v891 v892 
        let _v881 = v893 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v894 : string = $"%A{v3}"
        let _v881 = v894 
        #endif
#if FABLE_COMPILER_PYTHON
        let v897 : string = $"%A{v3}"
        let _v881 = v897 
        #endif
#else
        let v900 : string = $"%A{v3}"
        let _v881 = v900 
        #endif
        let v903 : string = _v881 
        let v908 : string = $"{v903}"
        let v911 : unit = ()
        let v912 : (unit -> unit) = closure10(v698, v908)
        let v913 : unit = (fun () -> v912 (); v911) ()
        let v916 : string = $"{v759}"
        let v919 : unit = ()
        let v920 : (unit -> unit) = closure10(v698, v916)
        let v921 : unit = (fun () -> v920 (); v919) ()
        let v924 : string = "stdin"
        let v925 : string = $"{v924}"
        let v928 : unit = ()
        let v929 : (unit -> unit) = closure10(v698, v925)
        let v930 : unit = (fun () -> v929 (); v928) ()
        let v933 : string = $"{v717}"
        let v936 : unit = ()
        let v937 : (unit -> unit) = closure10(v698, v933)
        let v938 : unit = (fun () -> v937 (); v936) ()
        let v941 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v942 : string = "format!(\"{:#?}\", $0)"
        let v943 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v942 
        let v944 : string = "fable_library_rust::String_::fromString($0)"
        let v945 : string = Fable.Core.RustInterop.emitRustExpr v943 v944 
        let _v941 = v945 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v946 : string = "format!(\"{:#?}\", $0)"
        let v947 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v946 
        let v948 : string = "fable_library_rust::String_::fromString($0)"
        let v949 : string = Fable.Core.RustInterop.emitRustExpr v947 v948 
        let _v941 = v949 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v950 : string = "format!(\"{:#?}\", $0)"
        let v951 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v950 
        let v952 : string = "fable_library_rust::String_::fromString($0)"
        let v953 : string = Fable.Core.RustInterop.emitRustExpr v951 v952 
        let _v941 = v953 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v954 : string = $"%A{v4}"
        let _v941 = v954 
        #endif
#if FABLE_COMPILER_PYTHON
        let v957 : string = $"%A{v4}"
        let _v941 = v957 
        #endif
#else
        let v960 : string = $"%A{v4}"
        let _v941 = v960 
        #endif
        let v963 : string = _v941 
        let v968 : string = $"{v963}"
        let v971 : unit = ()
        let v972 : (unit -> unit) = closure10(v698, v968)
        let v973 : unit = (fun () -> v972 (); v971) ()
        let v976 : string = $"{v759}"
        let v979 : unit = ()
        let v980 : (unit -> unit) = closure10(v698, v976)
        let v981 : unit = (fun () -> v980 (); v979) ()
        let v984 : string = "trace"
        let v985 : string = $"{v984}"
        let v988 : unit = ()
        let v989 : (unit -> unit) = closure10(v698, v985)
        let v990 : unit = (fun () -> v989 (); v988) ()
        let v993 : string = $"{v717}"
        let v996 : unit = ()
        let v997 : (unit -> unit) = closure10(v698, v993)
        let v998 : unit = (fun () -> v997 (); v996) ()
        let v1003 : string =
            if v5 then
                let v1001 : string = "true"
                v1001
            else
                let v1002 : string = "false"
                v1002
        let v1004 : string = $"{v1003}"
        let v1007 : unit = ()
        let v1008 : (unit -> unit) = closure10(v698, v1004)
        let v1009 : unit = (fun () -> v1008 (); v1007) ()
        let v1012 : string = $"{v759}"
        let v1015 : unit = ()
        let v1016 : (unit -> unit) = closure10(v698, v1012)
        let v1017 : unit = (fun () -> v1016 (); v1015) ()
        let v1020 : string = "working_directory"
        let v1021 : string = $"{v1020}"
        let v1024 : unit = ()
        let v1025 : (unit -> unit) = closure10(v698, v1021)
        let v1026 : unit = (fun () -> v1025 (); v1024) ()
        let v1029 : string = $"{v717}"
        let v1032 : unit = ()
        let v1033 : (unit -> unit) = closure10(v698, v1029)
        let v1034 : unit = (fun () -> v1033 (); v1032) ()
        let v1037 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1038 : string = "format!(\"{:#?}\", $0)"
        let v1039 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1038 
        let v1040 : string = "fable_library_rust::String_::fromString($0)"
        let v1041 : string = Fable.Core.RustInterop.emitRustExpr v1039 v1040 
        let _v1037 = v1041 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1042 : string = "format!(\"{:#?}\", $0)"
        let v1043 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1042 
        let v1044 : string = "fable_library_rust::String_::fromString($0)"
        let v1045 : string = Fable.Core.RustInterop.emitRustExpr v1043 v1044 
        let _v1037 = v1045 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1046 : string = "format!(\"{:#?}\", $0)"
        let v1047 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1046 
        let v1048 : string = "fable_library_rust::String_::fromString($0)"
        let v1049 : string = Fable.Core.RustInterop.emitRustExpr v1047 v1048 
        let _v1037 = v1049 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1050 : string = $"%A{v6}"
        let _v1037 = v1050 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1053 : string = $"%A{v6}"
        let _v1037 = v1053 
        #endif
#else
        let v1056 : string = $"%A{v6}"
        let _v1037 = v1056 
        #endif
        let v1059 : string = _v1037 
        let v1064 : string = $"{v1059}"
        let v1067 : unit = ()
        let v1068 : (unit -> unit) = closure10(v698, v1064)
        let v1069 : unit = (fun () -> v1068 (); v1067) ()
        let v1072 : string = " }"
        let v1073 : string = $"{v1072}"
        let v1076 : unit = ()
        let v1077 : (unit -> unit) = closure10(v698, v1073)
        let v1078 : unit = (fun () -> v1077 (); v1076) ()
        let v1081 : string = $"{v1072}"
        let v1084 : unit = ()
        let v1085 : (unit -> unit) = closure10(v698, v1081)
        let v1086 : unit = (fun () -> v1085 (); v1084) ()
        let v1089 : string = v698.l0
        let v1090 : (unit -> string) = closure69()
        let v1091 : string = $"{v489} {v690} #{v696} %s{v1090 ()} / {v1089}"
        let v1094 : char list = []
        let v1095 : (char list -> (char [])) = List.toArray
        let v1096 : (char []) = v1095 v1094
        let v1099 : string = v1091.TrimStart v1096 
        let v1117 : char list = []
        let v1118 : char list = '/' :: v1117 
        let v1121 : char list = ' ' :: v1118 
        let v1124 : (char list -> (char [])) = List.toArray
        let v1125 : (char []) = v1124 v1121
        let v1128 : string = v1099.TrimEnd v1125 
        let v1146 : (string -> unit) = closure12()
        let v1147 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1148 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1128 v1148 
        let _v1147 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1149 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1128 v1149 
        let _v1147 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1150 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1128 v1150 
        let _v1147 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1146 v1128
        let _v1147 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1146 v1128
        let _v1147 = () 
        #endif
#else
        v1146 v1128
        let _v1147 = () 
        #endif
        _v1147 
        let v1151 : (string -> unit) = v23.l0
        v1151 v1128
and closure71 (v0 : US31 option ref) (v1 : US31 option) : US31 option ref =
    v0.Value <- v1 
    v0
and closure72 (v0 : (struct (int32 * string * bool) -> Async<unit>) option, v1 : (US31 option -> US31 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : (struct (int32 * string * bool) -> Async<unit>) = x
    let v3 : US31 = US31_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure74 (v0 : string) () : string =
    v0
and closure73 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method11()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method11()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method11()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method10()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = v626.l0
        let v628 : (unit -> string) = closure74(v0)
        let v629 : string = $"{v483} {v618} #{v624} %s{v628 ()} / {v627}"
        let v632 : char list = []
        let v633 : (char list -> (char [])) = List.toArray
        let v634 : (char []) = v633 v632
        let v637 : string = v629.TrimStart v634 
        let v655 : char list = []
        let v656 : char list = '/' :: v655 
        let v659 : char list = ' ' :: v656 
        let v662 : (char list -> (char [])) = List.toArray
        let v663 : (char []) = v662 v659
        let v666 : string = v637.TrimEnd v663 
        let v684 : (string -> unit) = closure12()
        let v685 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v686 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v686 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v687 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v687 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v688 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v666 v688 
        let _v685 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v684 v666
        let _v685 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v684 v666
        let _v685 = () 
        #endif
#else
        v684 v666
        let _v685 = () 
        #endif
        _v685 
        let v689 : (string -> unit) = v17.l0
        v689 v666
and closure70 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v23 
    #endif
#else
    let v26 : Async<unit> option = None
    let mutable _v26 = v26 
    async {
    let v27 : string = v9.Data
    let v28 : string = null |> unbox<string>
    let v31 : bool = v27 = v28
    let v32 : bool = v31 <> true
    if v32 then
        let v33 : US31 option = None
        let _v33 = ref v33 
        let v34 : US31 option ref = _v33 
        let v35 : (US31 option -> US31 option ref) = closure71(v34)
        let v36 : unit = ()
        let v37 : (unit -> unit) = closure72(v3, v35)
        let v38 : unit = (fun () -> v37 (); v36) ()
        let v41 : US31 option = _v33.Value 
        let v52 : US31 = US31_1
        let v53 : US31 = v41 |> Option.defaultValue v52 
        match v53 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v57) -> (* Some *)
            let v58 : int32 = v7.Id
            let v59 : Async<unit> = v57 struct (v58, v27, false)
            do! v59 
            ()
        let v60 : string = $"> {v27}"
        if v5 then
            let v61 : unit = ()
            let v62 : (unit -> unit) = closure73(v60)
            let v63 : unit = (fun () -> v62 (); v61) ()
            ()
        else
            let v753 : unit = ()
            let v754 : (unit -> unit) = closure13(v60)
            let v755 : unit = (fun () -> v754 (); v753) ()
            ()
        let v757 : string = ""
        let v758 : string = $"{v757}{v27}{v757}"
        let v759 : (string -> unit) = v8.Push
        v759 v758
    ()
    }
    |> fun x -> _v26 <- Some x
    let v760 : Async<unit> = match _v26 with Some x -> x | None -> failwith "async.new_async_unit / _v26=None"
    let _v10 = v760 
    #endif
    let v761 : Async<unit> = _v10 
    let v766 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v766 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v766 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v766 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v766 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v766 = () 
    #endif
#else
    let v767 : (Async<unit> -> unit) = Async.StartImmediate
    v767 v761
    let _v766 = () 
    #endif
    _v766 
    ()
and closure75 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v23 
    #endif
#else
    let v26 : Async<unit> option = None
    let mutable _v26 = v26 
    async {
    let v27 : string = v9.Data
    let v28 : string = null |> unbox<string>
    let v31 : bool = v27 = v28
    let v32 : bool = v31 <> true
    if v32 then
        let v33 : US31 option = None
        let _v33 = ref v33 
        let v34 : US31 option ref = _v33 
        let v35 : (US31 option -> US31 option ref) = closure71(v34)
        let v36 : unit = ()
        let v37 : (unit -> unit) = closure72(v3, v35)
        let v38 : unit = (fun () -> v37 (); v36) ()
        let v41 : US31 option = _v33.Value 
        let v52 : US31 = US31_1
        let v53 : US31 = v41 |> Option.defaultValue v52 
        match v53 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v57) -> (* Some *)
            let v58 : int32 = v7.Id
            let v59 : Async<unit> = v57 struct (v58, v27, true)
            do! v59 
            ()
        let v60 : string = $"! {v27}"
        if v5 then
            let v61 : unit = ()
            let v62 : (unit -> unit) = closure73(v60)
            let v63 : unit = (fun () -> v62 (); v61) ()
            ()
        else
            let v753 : unit = ()
            let v754 : (unit -> unit) = closure13(v60)
            let v755 : unit = (fun () -> v754 (); v753) ()
            ()
        let v757 : string = "\u001b[7;4m"
        let v758 : string = "\u001b[0m"
        let v759 : string = $"{v757}{v27}{v758}"
        let v760 : (string -> unit) = v8.Push
        v760 v759
    ()
    }
    |> fun x -> _v26 <- Some x
    let v761 : Async<unit> = match _v26 with Some x -> x | None -> failwith "async.new_async_unit / _v26=None"
    let _v10 = v761 
    #endif
    let v762 : Async<unit> = _v10 
    let v767 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v767 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v767 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v767 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v767 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v767 = () 
    #endif
#else
    let v768 : (Async<unit> -> unit) = Async.StartImmediate
    v768 v762
    let _v767 = () 
    #endif
    _v767 
    ()
and closure76 (v0 : US32 option ref) (v1 : US32 option) : US32 option ref =
    v0.Value <- v1 
    v0
and closure77 (v0 : System.Threading.CancellationToken option, v1 : (US32 option -> US32 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : System.Threading.CancellationToken = x
    let v3 : US32 = US32_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure78 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = null |> unbox<bool>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : bool = null |> unbox<bool>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : bool = null |> unbox<bool>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : bool = null |> unbox<bool>
    let _v1 = v14 
    #endif
#else
    let v17 : bool = v0.HasExited
    let _v1 = v17 
    #endif
    let v18 : bool = _v1 
    let v23 : bool = v18 = false
    if v23 then
        let v24 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v24 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v24 = () 
        #endif
#else
        let v25 : (unit -> unit) = v0.Kill
        v25 ()
        let _v24 = () 
        #endif
        _v24 
        ()
and closure80 () () : string =
    let v0 : string = $"runtime.execute_with_options_async / WaitForExitAsync"
    v0
and closure79 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v737 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method8()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method8()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method8()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method9()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method9()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method9()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US0 = US0_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure10(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US0 = US0_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure10(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US1 =
                    if v662 then
                        let v665 : string = "Debug"
                        US1_0(v665)
                    else
                        US1_1
                match v668 with
                | US1_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method8()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method8()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method8()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method9()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method9()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method9()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US0 = US0_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure10(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US0 = US0_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure10(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US1 =
                        if v721 then
                            let v724 : string = "Info"
                            US1_0(v724)
                        else
                            US1_1
                    match v727 with
                    | US1_1 -> (* None *)
                        let v730 : string = "Warning"
                        US1_0(v730)
                    | US1_0(v728) -> (* Some *)
                        US1_0(v728)
                | US1_0(v669) -> (* Some *)
                    US1_0(v669)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v741 : string =
            match v737 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method11()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method11()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method11()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure10(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "ex"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure10(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure10(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v843 : string = "format!(\"{:#?}\", $0)"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v842 = v846 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v847 : string = "format!(\"{:#?}\", $0)"
        let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v847 
        let v849 : string = "fable_library_rust::String_::fromString($0)"
        let v850 : string = Fable.Core.RustInterop.emitRustExpr v848 v849 
        let _v842 = v850 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v851 : string = "format!(\"{:#?}\", $0)"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v842 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = $"%A{v0}"
        let _v842 = v855 
        #endif
#if FABLE_COMPILER_PYTHON
        let v858 : string = $"%A{v0}"
        let _v842 = v858 
        #endif
#else
        let v861 : string = $"%A{v0}"
        let _v842 = v861 
        #endif
        let v864 : string = _v842 
        let v869 : string = $"{v864}"
        let v872 : unit = ()
        let v873 : (unit -> unit) = closure10(v814, v869)
        let v874 : unit = (fun () -> v873 (); v872) ()
        let v877 : string = " }"
        let v878 : string = $"{v877}"
        let v881 : unit = ()
        let v882 : (unit -> unit) = closure10(v814, v878)
        let v883 : unit = (fun () -> v882 (); v881) ()
        let v886 : string = v814.l0
        let v887 : (unit -> string) = closure80()
        let v888 : string = $"{v483} {v806} #{v812} %s{v887 ()} / {v886}"
        let v891 : char list = []
        let v892 : (char list -> (char [])) = List.toArray
        let v893 : (char []) = v892 v891
        let v896 : string = v888.TrimStart v893 
        let v914 : char list = []
        let v915 : char list = '/' :: v914 
        let v918 : char list = ' ' :: v915 
        let v921 : (char list -> (char [])) = List.toArray
        let v922 : (char []) = v921 v918
        let v925 : string = v896.TrimEnd v922 
        let v943 : (string -> unit) = closure12()
        let v944 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v945 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v925 v945 
        let _v944 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v946 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v925 v946 
        let _v944 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v947 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v925 v947 
        let _v944 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v943 v925
        let _v944 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v943 v925
        let _v944 = () 
        #endif
#else
        v943 v925
        let _v944 = () 
        #endif
        _v944 
        let v948 : (string -> unit) = v17.l0
        v948 v925
and closure82 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure81 (v0 : int32, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_1
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v616 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : string = "Debug"
                US1_0(v613)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v620 : string =
            match v616 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v617) -> (* Some *)
                v617
        let v621 : (unit -> string) = v620.ToLower
        let v622 : string = v621 ()
        let v625 : string = v622.PadLeft (7, ' ')
        let v639 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v640 : string = "inline_colorization::color_bright_blue"
        let v641 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v640 
        let v642 : string = "&*$0"
        let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v642 
        let v644 : string = "inline_colorization::color_reset"
        let v645 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v644 
        let v646 : string = "\"{v641}{v643}{v645}\""
        let v647 : string = @$"format!(" + v646 + ")"
        let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "fable_library_rust::String_::fromString($0)"
        let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
        let _v639 = v650 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v651 : string = "inline_colorization::color_bright_blue"
        let v652 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v651 
        let v653 : string = "&*$0"
        let v654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v653 
        let v655 : string = "inline_colorization::color_reset"
        let v656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v655 
        let v657 : string = "\"{v652}{v654}{v656}\""
        let v658 : string = @$"format!(" + v657 + ")"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v639 = v661 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v662 : string = "inline_colorization::color_bright_blue"
        let v663 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v662 
        let v664 : string = "&*$0"
        let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v664 
        let v666 : string = "inline_colorization::color_reset"
        let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v666 
        let v668 : string = "\"{v663}{v665}{v667}\""
        let v669 : string = @$"format!(" + v668 + ")"
        let v670 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "fable_library_rust::String_::fromString($0)"
        let v672 : string = Fable.Core.RustInterop.emitRustExpr v670 v671 
        let _v639 = v672 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v673 : string = "\u001b[94m"
        let v674 : string = method11()
        let v675 : string = v673 + v625 
        let v676 : string = v675 + v674 
        let _v639 = v676 
        #endif
#if FABLE_COMPILER_PYTHON
        let v677 : string = "\u001b[94m"
        let v678 : string = method11()
        let v679 : string = v677 + v625 
        let v680 : string = v679 + v678 
        let _v639 = v680 
        #endif
#else
        let v681 : string = "\u001b[94m"
        let v682 : string = method11()
        let v683 : string = v681 + v625 
        let v684 : string = v683 + v682 
        let _v639 = v684 
        #endif
        let v685 : string = _v639 
        let v691 : int64 = v86.l0
        let v692 : int32 = v1.Length
        let v693 : string = method10()
        let v694 : Mut4 = {l0 = v693} : Mut4
        let v695 : string = "{ "
        let v696 : string = $"{v695}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v694, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "exit_code"
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure10(v694, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = " = "
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v694, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v0}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v694, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = "; "
        let v731 : string = $"{v730}"
        let v734 : unit = ()
        let v735 : (unit -> unit) = closure10(v694, v731)
        let v736 : unit = (fun () -> v735 (); v734) ()
        let v739 : string = "output_length"
        let v740 : string = $"{v739}"
        let v743 : unit = ()
        let v744 : (unit -> unit) = closure10(v694, v740)
        let v745 : unit = (fun () -> v744 (); v743) ()
        let v748 : string = $"{v713}"
        let v751 : unit = ()
        let v752 : (unit -> unit) = closure10(v694, v748)
        let v753 : unit = (fun () -> v752 (); v751) ()
        let v756 : string = $"{v692}"
        let v759 : unit = ()
        let v760 : (unit -> unit) = closure10(v694, v756)
        let v761 : unit = (fun () -> v760 (); v759) ()
        let v764 : string = " }"
        let v765 : string = $"{v764}"
        let v768 : unit = ()
        let v769 : (unit -> unit) = closure10(v694, v765)
        let v770 : unit = (fun () -> v769 (); v768) ()
        let v773 : string = v694.l0
        let v774 : (unit -> string) = closure82()
        let v775 : string = $"{v484} {v685} #{v691} %s{v774 ()} / {v773}"
        let v778 : char list = []
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v778
        let v783 : string = v775.TrimStart v780 
        let v801 : char list = []
        let v802 : char list = '/' :: v801 
        let v805 : char list = ' ' :: v802 
        let v808 : (char list -> (char [])) = List.toArray
        let v809 : (char []) = v808 v805
        let v812 : string = v783.TrimEnd v809 
        let v830 : (string -> unit) = closure12()
        let v831 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v832 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v832 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v833 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v834 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v834 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v830 v812
        let _v831 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v830 v812
        let _v831 = () 
        #endif
#else
        v830 v812
        let _v831 = () 
        #endif
        _v831 
        let v835 : (string -> unit) = v18.l0
        v835 v812
and method75 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v20 
    #endif
#else
    let v23 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v27 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v36 
    #endif
#else
    let v39 : Async<struct (int32 * string)> option = None
    let mutable _v39 = v39 
    async {
    let v40 : US14 = method44(v0)
    let struct (v49 : string, v50 : US1) =
        match v40 with
        | US14_1(v43) -> (* Error *)
            let v44 : string = $"resultm.get / Result value was Error: {v43}"
            failwith<struct (string * US1)> v44
        | US14_0(v41, v42) -> (* Ok *)
            struct (v41, v42)
    let v51 : US1 option = None
    let _v51 = ref v51 
    let v52 : US1 option ref = _v51 
    let v53 : (US1 option -> US1 option ref) = closure3(v52)
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure4(v6, v53)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v59 : US1 option = _v51.Value 
    let v70 : US1 = US1_1
    let v71 : US1 = v59 |> Option.defaultValue v70 
    let v78 : string =
        match v71 with
        | US1_1 -> (* None *)
            let v76 : string = ""
            v76
        | US1_0(v75) -> (* Some *)
            v75
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure68(v0, v1, v2, v3, v4, v5, v6)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v1227 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v1231 : string =
        match v50 with
        | US1_1 -> (* None *)
            let v1229 : string = ""
            v1229
        | US1_0(v1228) -> (* Some *)
            v1228
    let start_info = System.Diagnostics.ProcessStartInfo (
      Arguments = v1231,
      StandardOutputEncoding = v1227,
      WorkingDirectory = v78,
      FileName = v49,
      CreateNoWindow = true,
      RedirectStandardError = true,
      RedirectStandardOutput = true,
      UseShellExecute = false
    )
    let v1232 : System.Diagnostics.ProcessStartInfo = start_info
    let v1233 : int32 = v2.Length
    let v1234 : Mut5 = {l0 = 0} : Mut5
    while method45(v1233, v1234) do
        let v1236 : int32 = v1234.l0
        let struct (v1237 : string, v1238 : string) = v2.[int v1236]
        v1232.EnvironmentVariables.[v1237] <- v1238 
        let v1239 : int32 = v1236 + 1
        v1234.l0 <- v1239
        ()
    let v1240 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v1232)
    use v1240 = v1240 
    let v1241 : System.Diagnostics.Process = v1240 
    let v1242 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
    let v1243 : System.Collections.Concurrent.ConcurrentStack<string> = v1242 ()
    let v1244 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure70(v0, v1, v2, v3, v4, v5, v6, v1241, v1243)
    v1241.OutputDataReceived.Add v1244 
    let v1245 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure75(v0, v1, v2, v3, v4, v5, v6, v1241, v1243)
    v1241.ErrorDataReceived.Add v1245 
    let v1246 : (unit -> bool) = v1241.Start
    let v1247 : bool = v1246 ()
    let v1248 : bool = v1247 = false
    if v1248 then
        let v1249 : string = $"runtime.execute_with_options_async / process_start error"
        failwith<unit> v1249
    let v1250 : (unit -> unit) = v1241.BeginErrorReadLine
    v1250 ()
    let v1251 : (unit -> unit) = v1241.BeginOutputReadLine
    v1251 ()
    let v1252 : US32 option = None
    let _v1252 = ref v1252 
    let v1253 : US32 option ref = _v1252 
    let v1254 : (US32 option -> US32 option ref) = closure76(v1253)
    let v1255 : unit = ()
    let v1256 : (unit -> unit) = closure77(v1, v1254)
    let v1257 : unit = (fun () -> v1256 (); v1255) ()
    let v1260 : US32 option = _v1252.Value 
    let v1271 : US32 = US32_1
    let v1272 : US32 = v1260 |> Option.defaultValue v1271 
    let v1279 : System.Threading.CancellationToken =
        match v1272 with
        | US32_1 -> (* None *)
            let v1277 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
            v1277
        | US32_0(v1276) -> (* Some *)
            v1276
    let v1280 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1281 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1280 = v1281 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1284 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1280 = v1284 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1287 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1280 = v1287 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1290 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1280 = v1290 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1293 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1280 = v1293 
    #endif
#else
    let v1296 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1297 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1296 = v1297 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1300 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1296 = v1300 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1303 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1296 = v1303 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1306 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1296 = v1306 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1309 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1296 = v1309 
    #endif
#else
    let v1312 : Async<System.Threading.CancellationToken> option = None
    let mutable _v1312 = v1312 
    async {
    let v1313 : Async<System.Threading.CancellationToken> = Async.CancellationToken
    let! v1313 = v1313 
    let v1314 : System.Threading.CancellationToken = v1313 
    let v1315 : System.Threading.CancellationToken = Async.DefaultCancellationToken
    let v1316 : (System.Threading.CancellationToken []) = [|v1314; v1315; v1279|]
    let v1317 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
    let v1318 : System.Threading.CancellationTokenSource = v1317 v1316
    let v1319 : System.Threading.CancellationToken = v1318.Token
    return v1319 
    }
    |> fun x -> _v1312 <- Some x
    let v1320 : Async<System.Threading.CancellationToken> = match _v1312 with Some x -> x | None -> failwith "async.new_async_unit / _v1312=None"
    let _v1296 = v1320 
    #endif
    let v1321 : Async<System.Threading.CancellationToken> = _v1296 
    let _v1280 = v1321 
    #endif
    let v1326 : Async<System.Threading.CancellationToken> = _v1280 
    let! v1326 = v1326 
    let v1331 : System.Threading.CancellationToken = v1326 
    let v1332 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v1331.Register
    let v1333 : (unit -> unit) = closure78(v1241)
    let v1334 : System.Threading.CancellationTokenRegistration = v1332 v1333
    use v1334 = v1334 
    let v1335 : System.Threading.CancellationTokenRegistration = v1334 
    let v1336 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1337 : Async<int32> = null |> unbox<Async<int32>>
    let _v1336 = v1337 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1340 : Async<int32> = null |> unbox<Async<int32>>
    let _v1336 = v1340 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1343 : Async<int32> = null |> unbox<Async<int32>>
    let _v1336 = v1343 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1346 : Async<int32> = null |> unbox<Async<int32>>
    let _v1336 = v1346 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1349 : Async<int32> = null |> unbox<Async<int32>>
    let _v1336 = v1349 
    #endif
#else
    let v1352 : Async<int32> option = None
    let mutable _v1352 = v1352 
    async {
    try
    let v1353 : System.Threading.Tasks.Task = v1241.WaitForExitAsync v1331 
    let v1354 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1355 : Async<unit> = null |> unbox<Async<unit>>
    let _v1354 = v1355 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1358 : Async<unit> = null |> unbox<Async<unit>>
    let _v1354 = v1358 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1361 : Async<unit> = null |> unbox<Async<unit>>
    let _v1354 = v1361 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1364 : Async<unit> = null |> unbox<Async<unit>>
    let _v1354 = v1364 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1367 : Async<unit> = null |> unbox<Async<unit>>
    let _v1354 = v1367 
    #endif
#else
    let v1370 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
    let v1371 : Async<unit> = v1370 v1353
    let _v1354 = v1371 
    #endif
    let v1372 : Async<unit> = _v1354 
    do! v1372 
    let v1377 : int32 = v1241.ExitCode
    return v1377 
    with ex ->
    let v1378 : exn = ex
    let v1379 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1380 : string = $"%A{v1378}"
    let _v1379 = v1380 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1383 : string = $"%A{v1378}"
    let _v1379 = v1383 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1386 : string = $"%A{v1378}"
    let _v1379 = v1386 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1389 : string = $"%A{v1378}"
    let _v1379 = v1389 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1392 : string = $"%A{v1378}"
    let _v1379 = v1392 
    #endif
#else
    let v1395 : string = $"{v1378.GetType ()}: {v1378.Message}"
    let _v1379 = v1395 
    #endif
    let v1396 : string = _v1379 
    let v1401 : (string -> unit) = v1243.Push
    v1401 v1396
    let v1402 : System.Threading.Tasks.TaskCanceledException = v1378 |> unbox<System.Threading.Tasks.TaskCanceledException>
    let v1405 : unit = ()
    let v1406 : (unit -> unit) = closure79(v1402)
    let v1407 : unit = (fun () -> v1406 (); v1405) ()
    return -2147483648 
    (*
    *)
    }
    |> fun x -> _v1352 <- Some x
    let v2356 : Async<int32> = match _v1352 with Some x -> x | None -> failwith "async.new_async_unit / _v1352=None"
    let _v1336 = v2356 
    #endif
    let v2357 : Async<int32> = _v1336 
    let! v2357 = v2357 
    let v2362 : int32 = v2357 
    let v2363 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.rev
    let v2364 : string seq = v2363 v1243
    let v2367 : (string -> (string seq -> string)) = String.concat
    let v2368 : string = "\n"
    let v2369 : (string seq -> string) = v2367 v2368
    let v2370 : string = v2369 v2364
    let v2373 : unit = ()
    let v2374 : (unit -> unit) = closure81(v2362, v2370)
    let v2375 : unit = (fun () -> v2374 (); v2373) ()
    return struct (v2362, v2370) 
    }
    |> fun x -> _v39 <- Some x
    let v3210 : Async<struct (int32 * string)> = match _v39 with Some x -> x | None -> failwith "async.new_async_unit / _v39=None"
    let _v23 = v3210 
    #endif
    let v3211 : Async<struct (int32 * string)> = _v23 
    let _v7 = v3211 
    #endif
    let v3216 : Async<struct (int32 * string)> = _v7 
    v3216
and method42 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = method43(v0, v1, v2, v3, v4, v5, v6)
    let v9 : US14 = method44(v8)
    let struct (v18 : string, v19 : US1) =
        match v9 with
        | US14_1(v12) -> (* Error *)
            let v13 : string = $"resultm.get / Result value was Error: {v12}"
            failwith<struct (string * US1)> v13
        | US14_0(v10, v11) -> (* Ok *)
            struct (v10, v11)
    let v23 : string =
        match v19 with
        | US1_1 -> (* None *)
            let v21 : string = ""
            v21
        | US1_0(v20) -> (* Some *)
            v20
    let v24 : US22 = method56(v23)
    let v30 : (string []) =
        match v24 with
        | US22_1(v26) -> (* Error *)
            let v27 : string = $"resultm.get / Result value was Error: {v26}"
            failwith<(string [])> v27
        | US22_0(v25) -> (* Ok *)
            v25
    let v31 : string = "$0.to_vec()"
    let v32 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v34 : bool = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "x"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "true; $0 }).collect::<Vec<_>>()"
    let v42 : bool = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "_vec_map"
    let v44 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure43(v0, v1, v2, v3, v4, v5, v6, v18, v44)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v1286 : bool = true
    let mutable _v1286 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v1287 : string = "std::process::Command::new(&*$0)"
    let v1288 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v18 v1287 
    let v1289 : string = "true; let mut v1288 = v1288"
    let v1290 : bool = Fable.Core.RustInterop.emitRustExpr () v1289 
    let v1291 : string = "std::process::Command::args(&mut $0, &*$1)"
    let v1292 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v1288, v44) v1291 
    let v1293 : string = "std::process::Stdio::piped()"
    let v1294 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1293 
    let v1295 : string = "std::process::Command::stdout($0, std::process::Stdio::piped())"
    let v1296 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1292 v1295 
    let v1297 : string = "std::process::Stdio::piped()"
    let v1298 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1297 
    let v1299 : string = "std::process::Command::stderr($0, std::process::Stdio::piped())"
    let v1300 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1296 v1299 
    let v1301 : string = "std::process::Stdio::piped()"
    let v1302 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1301 
    let v1303 : string = "std::process::Command::stdin($0, std::process::Stdio::piped())"
    let v1304 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1300 v1303 
    let v1305 : US1 option = None
    let _v1305 = ref v1305 
    let v1306 : US1 option ref = _v1305 
    let v1307 : (US1 option -> US1 option ref) = closure3(v1306)
    let v1308 : unit = ()
    let v1309 : (unit -> unit) = closure4(v6, v1307)
    let v1310 : unit = (fun () -> v1309 (); v1308) ()
    let v1313 : US1 option = _v1305.Value 
    let v1324 : US1 = US1_1
    let v1325 : US1 = v1313 |> Option.defaultValue v1324 
    let v1333 : Ref<Mut<std_process_Command>> =
        match v1325 with
        | US1_1 -> (* None *)
            v1304
        | US1_0(v1329) -> (* Some *)
            let v1330 : string = "std::process::Command::current_dir(v1304, &*$0)"
            let v1331 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1329 v1330 
            v1331
    let v1334 : uint64 = System.Convert.ToUInt64 v2.Length
    let v1335 : bool = v1334 = 0UL
    let v1351 : Ref<Mut<std_process_Command>> =
        if v1335 then
            v1333
        else
            let v1336 : string = "$0.to_vec()"
            let v1337 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v1336 
            let v1338 : string = "true; let _vec_fold_ = $0.into_iter().fold(v1333, |acc, x| { //"
            let v1339 : bool = Fable.Core.RustInterop.emitRustExpr v1337 v1338 
            let v1340 : string = "acc"
            let v1341 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v1340 
            let v1342 : string = "x"
            let struct (v1343 : string, v1344 : string) = Fable.Core.RustInterop.emitRustExpr () v1342 
            let v1345 : string = "std::process::Command::env(v1341, &*$0, &*$1)"
            let v1346 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v1343, v1344) v1345 
            let v1347 : string = "true; $0 })"
            let v1348 : bool = Fable.Core.RustInterop.emitRustExpr v1346 v1347 
            let v1349 : string = "_vec_fold_"
            let v1350 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v1349 
            v1350
    let v1352 : string = "std::process::Command::spawn($0)"
    let v1353 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1351 v1352 
    let v1354 : (std_io_Error -> std_string_String) = method32()
    let v1355 : string = "$0.map_err(|x| $1(x))"
    let v1356 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1353, v1354) v1355 
    let v1357 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v1358 : bool = Fable.Core.RustInterop.emitRustExpr v1356 v1357 
    let v1359 : string = "x"
    let v1360 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v1359 
    let v1361 : std_process_Child option = Some v1360 
    let v1364 : string = "std::sync::Mutex::new($0)"
    let v1365 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1361 v1364 
    let v1366 : string = "std::sync::Arc::new($0)"
    let v1367 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1365 v1366 
    let v1368 : string = "true; $0 })"
    let v1369 : bool = Fable.Core.RustInterop.emitRustExpr v1367 v1368 
    let v1370 : string = "_result_map_"
    let v1371 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1370 
    let v1372 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) = method67()
    let v1373 : (std_string_String -> US24) = method68()
    let v1374 : string = "match v1371 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v1375 : US24 = Fable.Core.RustInterop.emitRustExpr struct (v1372, v1373) v1374 
    let struct (v7253 : int32, v7254 : US5, v7255 : US25) =
        match v1375 with
        | US24_1(v6235) -> (* Error *)
            let v6236 : unit = ()
            let v6237 : (unit -> unit) = closure47(v6235)
            let v6238 : unit = (fun () -> v6237 (); v6236) ()
            let v7248 : US5 = US5_0(v6235)
            let v7249 : US25 = US25_1
            struct (-1, v7248, v7249)
        | US24_0(v1376) -> (* Ok *)
            let v1377 : string = "true; let _capture = (|| { //"
            let v1378 : bool = Fable.Core.RustInterop.emitRustExpr () v1377 
            let v1379 : string = "$0"
            let v1380 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1376 v1379 
            let v1381 : string = "v1380.lock()"
            let v1382 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1381 
            let v1383 : string = "$0.unwrap()"
            let v1384 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1382 v1383 
            let v1385 : string = "true; let mut v1384 = v1384"
            let v1386 : bool = Fable.Core.RustInterop.emitRustExpr () v1385 
            let v1387 : string = "&mut $0"
            let v1388 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1384 v1387 
            let v1389 : string = "$0.as_mut()"
            let v1390 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1388 v1389 
            let v1391 : string = "$0.unwrap()"
            let v1392 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1390 v1391 
            let v1393 : string = "&mut v1392.stdout"
            let v1394 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr () v1393 
            let v1395 : string = "Option::take($0)"
            let v1396 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v1394 v1395 
            let v1397 : string = "$0.unwrap()"
            let v1398 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v1396 v1397 
            let v1399 : string = "true; $0 })()"
            let v1400 : bool = Fable.Core.RustInterop.emitRustExpr v1398 v1399 
            let v1401 : string = "_capture"
            let v1402 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v1401 
            let v1403 : string = "true; let _capture = (|| { //"
            let v1404 : bool = Fable.Core.RustInterop.emitRustExpr () v1403 
            let v1405 : string = "$0"
            let v1406 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1376 v1405 
            let v1407 : string = "v1406.lock()"
            let v1408 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1407 
            let v1409 : string = "$0.unwrap()"
            let v1410 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1408 v1409 
            let v1411 : string = "true; let mut v1410 = v1410"
            let v1412 : bool = Fable.Core.RustInterop.emitRustExpr () v1411 
            let v1413 : string = "&mut $0"
            let v1414 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1410 v1413 
            let v1415 : string = "$0.as_mut()"
            let v1416 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1414 v1415 
            let v1417 : string = "$0.unwrap()"
            let v1418 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1416 v1417 
            let v1419 : string = "&mut v1418.stderr"
            let v1420 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr () v1419 
            let v1421 : string = "Option::take($0)"
            let v1422 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v1420 v1421 
            let v1423 : string = "$0.unwrap()"
            let v1424 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v1422 v1423 
            let v1425 : string = "true; $0 })()"
            let v1426 : bool = Fable.Core.RustInterop.emitRustExpr v1424 v1425 
            let v1427 : string = "_capture"
            let v1428 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v1427 
            let v1429 : string = "true; let _capture = (|| { //"
            let v1430 : bool = Fable.Core.RustInterop.emitRustExpr () v1429 
            let v1431 : string = "$0"
            let v1432 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1376 v1431 
            let v1433 : string = "v1432.lock()"
            let v1434 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1433 
            let v1435 : string = "$0.unwrap()"
            let v1436 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1434 v1435 
            let v1437 : string = "true; let mut v1436 = v1436"
            let v1438 : bool = Fable.Core.RustInterop.emitRustExpr () v1437 
            let v1439 : string = "&mut $0"
            let v1440 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1436 v1439 
            let v1441 : string = "$0.as_mut()"
            let v1442 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1440 v1441 
            let v1443 : string = "$0.unwrap()"
            let v1444 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1442 v1443 
            let v1445 : string = "&mut $0.stdin"
            let v1446 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1444 v1445 
            let v1447 : string = "Option::take($0)"
            let v1448 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1446 v1447 
            let v1449 : string = "$0.unwrap()"
            let v1450 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v1448 v1449 
            let v1451 : std_process_ChildStdin option = Some v1450 
            let v1454 : string = "std::sync::Mutex::new($0)"
            let v1455 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1451 v1454 
            let v1456 : string = "std::sync::Arc::new($0)"
            let v1457 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1455 v1456 
            let v1458 : string = "true; $0 })()"
            let v1459 : bool = Fable.Core.RustInterop.emitRustExpr v1457 v1458 
            let v1460 : string = "_capture"
            let v1461 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1460 
            let v1462 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v1463 : std_sync_mpsc_Sender<std_string_String>, v1464 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v1462 
            let v1465 : string = "std::sync::Mutex::new($0)"
            let v1466 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1463 v1465 
            let v1467 : string = "std::sync::Arc::new($0)"
            let v1468 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1466 v1467 
            let v1469 : string = "std::sync::Mutex::new($0)"
            let v1470 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1463 v1469 
            let v1471 : string = "std::sync::Arc::new($0)"
            let v1472 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1470 v1471 
            let v1473 : string = "std::sync::Mutex::new($0)"
            let v1474 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1464 v1473 
            let v1475 : string = "std::sync::Arc::new($0)"
            let v1476 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1474 v1475 
            let v1477 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v1478 : bool = Fable.Core.RustInterop.emitRustExpr () v1477 
            let v1479 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v1480 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v1402 v1479 
            let v1481 : string = "std::io::BufReader::new(v1480)"
            let v1482 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v1481 
            let v1483 : string = "std::io::BufRead::lines(v1482)"
            let v1484 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1483 
            let v1485 : string = "true; let mut v1484 = v1484; let _iter_try_for_each = v1484.try_for_each(|x| { //"
            let v1486 : bool = Fable.Core.RustInterop.emitRustExpr () v1485 
            let v1487 : string = "x"
            let v1488 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1487 
            let v1489 : string = "$0.clone()"
            let v1490 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1468 v1489 
            let v1491 : (std_io_Error -> std_string_String) = method32()
            let v1492 : string = "$0.map_err(|x| $1(x))"
            let v1493 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1488, v1491) v1492 
            let v1494 : (std_string_String -> US26) = method69()
            let v1495 : (std_string_String -> US26) = method70()
            let v1496 : string = "match v1493 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v1497 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v1494, v1495) v1496 
            let v3231 : std_string_String =
                match v1497 with
                | US26_1(v2212) -> (* Error *)
                    let v2213 : unit = ()
                    let v2214 : (unit -> unit) = closure51(v2212)
                    let v2215 : unit = (fun () -> v2214 (); v2213) ()
                    let v3225 : string = $"\u001b[4;7m{v2212}\u001b[0m"
                    let v3226 : string = "&*$0"
                    let v3227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3225 v3226 
                    let v3228 : string = "String::from($0)"
                    let v3229 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3227 v3228 
                    v3229
                | US26_0(v1498) -> (* Ok *)
                    let v1499 : string = "fable_library_rust::String_::fromString($0)"
                    let v1500 : string = Fable.Core.RustInterop.emitRustExpr v1498 v1499 
                    let v1501 : string = "encoding_rs::UTF_8"
                    let v1502 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v1501 
                    let v1503 : string = "$0.encode(&*$1).0"
                    let v1504 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v1502, v1500) v1503 
                    let v1505 : string = "$0.as_ref()"
                    let v1506 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v1504 v1505 
                    let v1507 : string = "std::str::from_utf8($0)"
                    let v1508 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v1506 v1507 
                    let v1509 : string = "$0.unwrap()"
                    let v1510 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1508 v1509 
                    let v1511 : string = "String::from($0)"
                    let v1512 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1510 v1511 
                    let v1513 : string = "fable_library_rust::String_::fromString($0)"
                    let v1514 : string = Fable.Core.RustInterop.emitRustExpr v1512 v1513 
                    let v1515 : string = $"> {v1514}"
                    if v5 then
                        let v1516 : unit = ()
                        let v1517 : (unit -> unit) = closure53(v1515)
                        let v1518 : unit = (fun () -> v1517 (); v1516) ()
                        ()
                    else
                        let v2208 : unit = ()
                        let v2209 : (unit -> unit) = closure13(v1515)
                        let v2210 : unit = (fun () -> v2209 (); v2208) ()
                        ()
                    v1512
            let v3232 : string = "$0"
            let v3233 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1490 v3232 
            let v3234 : string = "v3233.lock()"
            let v3235 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v3234 
            let v3236 : string = "$0.unwrap()"
            let v3237 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v3235 v3236 
            let v3238 : string = "&$0"
            let v3239 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v3237 v3238 
            let v3240 : string = "$0.send($1)"
            let v3241 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v3239, v3231) v3240 
            let v3242 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method71()
            let v3243 : string = "$0.map_err(|x| $1(x))"
            let v3244 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v3241, v3242) v3243 
            let v3245 : string = "$0"
            let v3246 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v3244 v3245 
            let v3247 : string = "true; $0 }); //"
            let v3248 : bool = Fable.Core.RustInterop.emitRustExpr v3246 v3247 
            let v3249 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v3250 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v3249 
            let v3251 : Result<unit, string> = method72(v3250)
            let v3252 : string = ""
            let v3253 : string = "}"
            let v3254 : string = v3252 + v3253 
            let v3255 : string = "true; v3251 " + v3254 + "); " + v3252 + " // rust.fix_closure'"
            let v3256 : bool = Fable.Core.RustInterop.emitRustExpr () v3255 
            let v3257 : string = "__spawn"
            let v3258 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v3257 
            let v3259 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v3260 : bool = Fable.Core.RustInterop.emitRustExpr () v3259 
            let v3261 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v3262 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v1428 v3261 
            let v3263 : string = "std::io::BufReader::new(v3262)"
            let v3264 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v3263 
            let v3265 : string = "std::io::BufRead::lines(v3264)"
            let v3266 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v3265 
            let v3267 : string = "true; let mut v3266 = v3266; let _iter_try_for_each = v3266.try_for_each(|x| { //"
            let v3268 : bool = Fable.Core.RustInterop.emitRustExpr () v3267 
            let v3269 : string = "x"
            let v3270 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v3269 
            let v3271 : string = "$0.clone()"
            let v3272 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1472 v3271 
            let v3273 : (std_io_Error -> std_string_String) = method32()
            let v3274 : string = "$0.map_err(|x| $1(x))"
            let v3275 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v3270, v3273) v3274 
            let v3276 : (std_string_String -> US26) = method69()
            let v3277 : (std_string_String -> US26) = method70()
            let v3278 : string = "match v3275 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v3279 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v3276, v3277) v3278 
            let v5014 : std_string_String =
                match v3279 with
                | US26_1(v3997) -> (* Error *)
                    let v3998 : unit = ()
                    let v3999 : (unit -> unit) = closure51(v3997)
                    let v4000 : unit = (fun () -> v3999 (); v3998) ()
                    let v5008 : string = $"\u001b[4;7m{v3997}\u001b[0m"
                    let v5009 : string = "&*$0"
                    let v5010 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5008 v5009 
                    let v5011 : string = "String::from($0)"
                    let v5012 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5010 v5011 
                    v5012
                | US26_0(v3280) -> (* Ok *)
                    let v3281 : string = "fable_library_rust::String_::fromString($0)"
                    let v3282 : string = Fable.Core.RustInterop.emitRustExpr v3280 v3281 
                    let v3283 : string = "encoding_rs::UTF_8"
                    let v3284 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v3283 
                    let v3285 : string = "$0.encode(&*$1).0"
                    let v3286 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v3284, v3282) v3285 
                    let v3287 : string = "$0.as_ref()"
                    let v3288 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v3286 v3287 
                    let v3289 : string = "std::str::from_utf8($0)"
                    let v3290 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v3288 v3289 
                    let v3291 : string = "$0.unwrap()"
                    let v3292 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3290 v3291 
                    let v3293 : string = "String::from($0)"
                    let v3294 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3292 v3293 
                    let v3295 : string = "fable_library_rust::String_::fromString($0)"
                    let v3296 : string = Fable.Core.RustInterop.emitRustExpr v3294 v3295 
                    let v3297 : string = $"! {v3296}"
                    if v5 then
                        let v3298 : unit = ()
                        let v3299 : (unit -> unit) = closure53(v3297)
                        let v3300 : unit = (fun () -> v3299 (); v3298) ()
                        ()
                    else
                        let v3988 : unit = ()
                        let v3989 : (unit -> unit) = closure13(v3297)
                        let v3990 : unit = (fun () -> v3989 (); v3988) ()
                        ()
                    let v3992 : string = $"\u001b[4;7m{v3294}\u001b[0m"
                    let v3993 : string = "&*$0"
                    let v3994 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3992 v3993 
                    let v3995 : string = "String::from($0)"
                    let v3996 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3994 v3995 
                    v3996
            let v5015 : string = "$0"
            let v5016 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v3272 v5015 
            let v5017 : string = "v5016.lock()"
            let v5018 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v5017 
            let v5019 : string = "$0.unwrap()"
            let v5020 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v5018 v5019 
            let v5021 : string = "&$0"
            let v5022 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v5020 v5021 
            let v5023 : string = "$0.send($1)"
            let v5024 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v5022, v5014) v5023 
            let v5025 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method71()
            let v5026 : string = "$0.map_err(|x| $1(x))"
            let v5027 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v5024, v5025) v5026 
            let v5028 : string = "$0"
            let v5029 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v5027 v5028 
            let v5030 : string = "true; $0 }); //"
            let v5031 : bool = Fable.Core.RustInterop.emitRustExpr v5029 v5030 
            let v5032 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v5033 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v5032 
            let v5034 : Result<unit, string> = method72(v5033)
            let v5035 : string = v3252 + v3253 
            let v5036 : string = "true; v5034 " + v5035 + "); " + v3252 + " // rust.fix_closure'"
            let v5037 : bool = Fable.Core.RustInterop.emitRustExpr () v5036 
            let v5038 : string = "__spawn"
            let v5039 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v5038 
            let v5040 : US27 option = None
            let _v5040 = ref v5040 
            let v5041 : US27 option ref = _v5040 
            let v5042 : (US27 option -> US27 option ref) = closure56(v5041)
            let v5043 : unit = ()
            let v5044 : (unit -> unit) = closure57(v4, v5042)
            let v5045 : unit = (fun () -> v5044 (); v5043) ()
            let v5048 : US27 option = _v5040.Value 
            let v5059 : US27 = US27_1
            let v5060 : US27 = v5048 |> Option.defaultValue v5059 
            match v5060 with
            | US27_1 -> (* None *)
                ()
            | US27_0(v5064) -> (* Some *)
                let v5065 : string = "$0"
                let v5066 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1461 v5065 
                let v5067 : string = "v5066.lock()"
                let v5068 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v5067 
                let v5069 : string = "$0.unwrap()"
                let v5070 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v5068 v5069 
                let v5071 : string = "true; let mut v5070 = v5070"
                let v5072 : bool = Fable.Core.RustInterop.emitRustExpr () v5071 
                let v5073 : string = "&mut $0"
                let v5074 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v5070 v5073 
                let v5075 : string = "Option::take($0)"
                let v5076 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v5074 v5075 
                let v5077 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v5078 : bool = Fable.Core.RustInterop.emitRustExpr v5076 v5077 
                let v5079 : string = "x"
                let v5080 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v5079 
                let v5081 : string = "std::sync::Mutex::new($0)"
                let v5082 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v5080 v5081 
                let v5083 : string = "std::sync::Arc::new($0)"
                let v5084 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v5082 v5083 
                let v5085 : string = "true; $0 })"
                let v5086 : bool = Fable.Core.RustInterop.emitRustExpr v5084 v5085 
                let v5087 : string = "_optionm_map_"
                let v5088 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v5087 
                let v5089 : US28 option = None
                let _v5089 = ref v5089 
                let v5090 : US28 option ref = _v5089 
                let v5091 : (US28 option -> US28 option ref) = closure58(v5090)
                let v5092 : unit = ()
                let v5093 : (unit -> unit) = closure59(v5088, v5091)
                let v5094 : unit = (fun () -> v5093 (); v5092) ()
                let v5097 : US28 option = _v5089.Value 
                let v5108 : US28 = US28_1
                let v5109 : US28 = v5097 |> Option.defaultValue v5108 
                match v5109 with
                | US28_1 -> (* None *)
                    ()
                | US28_0(v5113) -> (* Some *)
                    v5064 v5113
                    let v5114 : string = "$0"
                    let v5115 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v5113 v5114 
                    let v5116 : string = "v5115.lock()"
                    let v5117 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v5116 
                    let v5118 : string = "$0.unwrap()"
                    let v5119 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v5117 v5118 
                    let v5120 : std_sync_MutexGuard<std_process_ChildStdin> = method73(v5119)
                    let v5121 : string = "true; let mut v5120 = v5120"
                    let v5122 : bool = Fable.Core.RustInterop.emitRustExpr () v5121 
                    let v5123 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v5124 : bool = Fable.Core.RustInterop.emitRustExpr v5120 v5123 
                    ()
            let v5125 : string = "$0"
            let v5126 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1376 v5125 
            let v5127 : string = "v5126.lock()"
            let v5128 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v5127 
            let v5129 : string = "$0.unwrap()"
            let v5130 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v5128 v5129 
            let v5131 : string = "true; let mut v5130 = v5130"
            let v5132 : bool = Fable.Core.RustInterop.emitRustExpr () v5131 
            let v5133 : string = "&mut $0"
            let v5134 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v5130 v5133 
            let v5135 : string = "Option::take($0)"
            let v5136 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v5134 v5135 
            let v5137 : string = "$0.unwrap()"
            let v5138 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v5136 v5137 
            let v5139 : string = "$0.wait_with_output()"
            let v5140 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5138 v5139 
            let v5141 : (std_io_Error -> std_string_String) = method32()
            let v5142 : string = "$0.map_err(|x| $1(x))"
            let v5143 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v5140, v5141) v5142 
            let v5144 : std_thread_JoinHandle<Result<unit, string>> = method74(v5039)
            let v5145 : string = "v5144"
            let v5146 : string = v5145 + v3252 
            let v5147 : string = v5146 + v3252 
            let v5148 : std_thread_JoinHandle<Result<unit, string>> = method74(v3258)
            let v5149 : string = "v5148"
            let v5150 : string = ", "
            let v5151 : string = v5149 + v5150 
            let v5152 : string = v5151 + v5147 
            let v5153 : string = "vec![" + v5152 + "]"
            let v5154 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v5153 
            let v5155 : string = "true; $0.into_iter().for_each(|x| { //"
            let v5156 : bool = Fable.Core.RustInterop.emitRustExpr v5154 v5155 
            let v5157 : string = "x"
            let v5158 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v5157 
            let v5159 : string = "std::thread::JoinHandle::join($0)"
            let v5160 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v5158 v5159 
            let v5161 : string = "$0.unwrap()"
            let v5162 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v5160 v5161 
            let v5163 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v5162 v5163 
            let v5164 : string = $"true;"
            let v5165 : bool = Fable.Core.RustInterop.emitRustExpr () v5164 
            let v5166 : string = "true; }}); { //"
            let v5167 : bool = Fable.Core.RustInterop.emitRustExpr () v5166 
            let v5168 : (std_process_Output -> US29) = closure60()
            let v5169 : (std_string_String -> US29) = closure61()
            let v5170 : US29 = match v5143 with Ok x -> v5168 x | Error x -> v5169 x
            match v5170 with
            | US29_1(v5216) -> (* Error *)
                let v5217 : unit = ()
                let v5218 : (unit -> unit) = closure62(v5216)
                let v5219 : unit = (fun () -> v5218 (); v5217) ()
                let v6227 : US5 = US5_0(v5216)
                let v6228 : US25 = US25_1
                struct (-2, v6227, v6228)
            | US29_0(v5171) -> (* Ok *)
                let v5172 : string = "$0.status"
                let v5173 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v5171 v5172 
                let v5174 : string = "$0.code()"
                let v5175 : int32 option = Fable.Core.RustInterop.emitRustExpr v5173 v5174 
                let v5176 : US30 option = None
                let _v5176 = ref v5176 
                let v5177 : US30 option ref = _v5176 
                let v5178 : (US30 option -> US30 option ref) = closure64(v5177)
                let v5179 : unit = ()
                let v5180 : (unit -> unit) = closure65(v5175, v5178)
                let v5181 : unit = (fun () -> v5180 (); v5179) ()
                let v5184 : US30 option = _v5176.Value 
                let v5195 : US30 = US30_1
                let v5196 : US30 = v5184 |> Option.defaultValue v5195 
                match v5196 with
                | US30_1 -> (* None *)
                    let v5203 : string = "&*$0"
                    let v5204 : string = "runtime.execute_with_options / exit_code=None"
                    let v5205 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5204 v5203 
                    let v5206 : string = "String::from($0)"
                    let v5207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5205 v5206 
                    let v5208 : US5 = US5_0(v5207)
                    let v5209 : US25 = US25_0(v1476)
                    struct (-1, v5208, v5209)
                | US30_0(v5200) -> (* Some *)
                    let v5201 : US5 = US5_1
                    let v5202 : US25 = US25_0(v1476)
                    struct (v5200, v5201, v5202)
    let v7262 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v7255 with
        | US25_1 -> (* None *)
            let v7260 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v7260
        | US25_0(v7256) -> (* Some *)
            let v7257 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v7256 
            v7257
    let v7263 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v7264 : bool = Fable.Core.RustInterop.emitRustExpr v7262 v7263 
    let v7265 : string = "x"
    let v7266 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v7265 
    let v7267 : string = "$0"
    let v7268 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v7266 v7267 
    let v7269 : string = "v7268.lock()"
    let v7270 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v7269 
    let v7271 : string = "$0.unwrap()"
    let v7272 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v7270 v7271 
    let v7273 : string = "v7272.iter()"
    let v7274 : _ = Fable.Core.RustInterop.emitRustExpr () v7273 
    let v7275 : string = "v7274.collect::<Vec<_>>()"
    let v7276 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v7275 
    let v7277 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v7278 : bool = Fable.Core.RustInterop.emitRustExpr v7276 v7277 
    let v7279 : string = "x"
    let v7280 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v7279 
    let v7281 : string = "fable_library_rust::String_::fromString($0)"
    let v7282 : string = Fable.Core.RustInterop.emitRustExpr v7280 v7281 
    let v7283 : string = "true; $0 }).collect::<Vec<_>>()"
    let v7284 : bool = Fable.Core.RustInterop.emitRustExpr v7282 v7283 
    let v7285 : string = "_vec_map"
    let v7286 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v7285 
    let v7287 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v7288 : (string []) = Fable.Core.RustInterop.emitRustExpr v7286 v7287 
    let v7289 : string seq = v7288 |> Seq.ofArray
    let v7292 : (string -> (string seq -> string)) = String.concat
    let v7293 : string = "\n"
    let v7294 : (string seq -> string) = v7292 v7293
    let v7295 : string = v7294 v7289
    let v7298 : string = "true; $0 })"
    let v7299 : bool = Fable.Core.RustInterop.emitRustExpr v7295 v7298 
    let v7300 : string = "_optionm_map_"
    let v7301 : string option = Fable.Core.RustInterop.emitRustExpr () v7300 
    let v7308 : US1 =
        match v7254 with
        | US5_1 -> (* None *)
            US1_1
        | US5_0(v7302) -> (* Some *)
            let v7303 : string = "fable_library_rust::String_::fromString($0)"
            let v7304 : string = Fable.Core.RustInterop.emitRustExpr v7302 v7303 
            US1_0(v7304)
    let v7312 : string =
        match v7308 with
        | US1_1 -> (* None *)
            let v7310 : string = ""
            v7310
        | US1_0(v7309) -> (* Some *)
            v7309
    let v7313 : string = v7301 |> Option.defaultValue v7312 
    let v7316 : unit = ()
    let v7317 : (unit -> unit) = closure66(v7253, v7313)
    let v7318 : unit = (fun () -> v7317 (); v7316) ()
    let v8087 : (int32 * string) = v7253, v7313 
    v8087 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _v1286 <- Some x
    let v8088 : (int32 * string) = match _v1286 with Some x -> x | None -> failwith "base.capture / _v1286=None"
    let (a, b) = v8088 
    let v8089 : int32 = a
    let v8090 : string = b
    let _v7 = struct (v8089, v8090) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v8095 : int32, v8096 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v8095, v8096) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v8101 : int32, v8102 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v8101, v8102) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v8107 : int32, v8108 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v8107, v8108) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v8113 : int32, v8114 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v8113, v8114) 
    #endif
#else
    let v8119 : Async<struct (int32 * string)> = method75(v0, v1, v2, v3, v4, v5, v6)
    let v8120 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v8121 : int32, v8122 : string) = null |> unbox<struct (int32 * string)>
    let _v8120 = struct (v8121, v8122) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v8127 : int32, v8128 : string) = null |> unbox<struct (int32 * string)>
    let _v8120 = struct (v8127, v8128) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v8133 : int32, v8134 : string) = null |> unbox<struct (int32 * string)>
    let _v8120 = struct (v8133, v8134) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v8139 : int32, v8140 : string) = null |> unbox<struct (int32 * string)>
    let _v8120 = struct (v8139, v8140) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v8145 : int32, v8146 : string) = null |> unbox<struct (int32 * string)>
    let _v8120 = struct (v8145, v8146) 
    #endif
#else
    let v8151 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v8152 : int32, v8153 : string) = v8151 v8119
    let _v8120 = struct (v8152, v8153) 
    #endif
    let struct (v8154 : int32, v8155 : string) = _v8120 
    let _v7 = struct (v8154, v8155) 
    #endif
    let struct (v8164 : int32, v8165 : string) = _v7 
    struct (v8164, v8165)
and closure84 () () : string =
    let v0 : string = "spiral_builder.process_cuda / env install error"
    v0
and closure83 (v0 : US8, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "env"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : string = $"%A{v0}"
        let v909 : string = $"{v906}"
        let v912 : unit = ()
        let v913 : (unit -> unit) = closure10(v878, v909)
        let v914 : unit = (fun () -> v913 (); v912) ()
        let v917 : string = "; "
        let v918 : string = $"{v917}"
        let v921 : unit = ()
        let v922 : (unit -> unit) = closure10(v878, v918)
        let v923 : unit = (fun () -> v922 (); v921) ()
        let v926 : string = "exit_code"
        let v927 : string = $"{v926}"
        let v930 : unit = ()
        let v931 : (unit -> unit) = closure10(v878, v927)
        let v932 : unit = (fun () -> v931 (); v930) ()
        let v935 : string = $"{v897}"
        let v938 : unit = ()
        let v939 : (unit -> unit) = closure10(v878, v935)
        let v940 : unit = (fun () -> v939 (); v938) ()
        let v943 : string = $"{v3}"
        let v946 : unit = ()
        let v947 : (unit -> unit) = closure10(v878, v943)
        let v948 : unit = (fun () -> v947 (); v946) ()
        let v951 : string = $"{v917}"
        let v954 : unit = ()
        let v955 : (unit -> unit) = closure10(v878, v951)
        let v956 : unit = (fun () -> v955 (); v954) ()
        let v959 : string = "run_result"
        let v960 : string = $"{v959}"
        let v963 : unit = ()
        let v964 : (unit -> unit) = closure10(v878, v960)
        let v965 : unit = (fun () -> v964 (); v963) ()
        let v968 : string = $"{v897}"
        let v971 : unit = ()
        let v972 : (unit -> unit) = closure10(v878, v968)
        let v973 : unit = (fun () -> v972 (); v971) ()
        let v976 : string = $"{v2}"
        let v979 : unit = ()
        let v980 : (unit -> unit) = closure10(v878, v976)
        let v981 : unit = (fun () -> v980 (); v979) ()
        let v984 : string = $"{v917}"
        let v987 : unit = ()
        let v988 : (unit -> unit) = closure10(v878, v984)
        let v989 : unit = (fun () -> v988 (); v987) ()
        let v992 : string = "new_code_path"
        let v993 : string = $"{v992}"
        let v996 : unit = ()
        let v997 : (unit -> unit) = closure10(v878, v993)
        let v998 : unit = (fun () -> v997 (); v996) ()
        let v1001 : string = $"{v897}"
        let v1004 : unit = ()
        let v1005 : (unit -> unit) = closure10(v878, v1001)
        let v1006 : unit = (fun () -> v1005 (); v1004) ()
        let v1009 : string = $"{v1}"
        let v1012 : unit = ()
        let v1013 : (unit -> unit) = closure10(v878, v1009)
        let v1014 : unit = (fun () -> v1013 (); v1012) ()
        let v1017 : string = " }"
        let v1018 : string = $"{v1017}"
        let v1021 : unit = ()
        let v1022 : (unit -> unit) = closure10(v878, v1018)
        let v1023 : unit = (fun () -> v1022 (); v1021) ()
        let v1026 : string = v878.l0
        let v1027 : (unit -> string) = closure84()
        let v1028 : string = $"{v486} {v870} #{v876} %s{v1027 ()} / {v1026}"
        let v1031 : char list = []
        let v1032 : (char list -> (char [])) = List.toArray
        let v1033 : (char []) = v1032 v1031
        let v1036 : string = v1028.TrimStart v1033 
        let v1054 : char list = []
        let v1055 : char list = '/' :: v1054 
        let v1058 : char list = ' ' :: v1055 
        let v1061 : (char list -> (char [])) = List.toArray
        let v1062 : (char []) = v1061 v1058
        let v1065 : string = v1036.TrimEnd v1062 
        let v1083 : (string -> unit) = closure12()
        let v1084 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1085 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1065 v1085 
        let _v1084 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1086 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1065 v1086 
        let _v1084 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1087 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1065 v1087 
        let _v1084 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1083 v1065
        let _v1084 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1083 v1065
        let _v1084 = () 
        #endif
#else
        v1083 v1065
        let _v1084 = () 
        #endif
        _v1084 
        let v1088 : (string -> unit) = v20.l0
        v1088 v1065
and closure85 () (v0 : string) : US1 =
    US1_0(v0)
and closure86 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : (string -> (string seq -> string)) = String.concat
    let v9 : (string seq -> string) = v8 v1
    v9 v5
and closure89 () () : string =
    let v0 : string = "spiral_builder.process_cuda / Exception"
    v0
and closure88 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "ex"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v907 : string = "format!(\"{:#?}\", $0)"
        let v908 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v907 
        let v909 : string = "fable_library_rust::String_::fromString($0)"
        let v910 : string = Fable.Core.RustInterop.emitRustExpr v908 v909 
        let _v906 = v910 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v911 : string = "format!(\"{:#?}\", $0)"
        let v912 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v911 
        let v913 : string = "fable_library_rust::String_::fromString($0)"
        let v914 : string = Fable.Core.RustInterop.emitRustExpr v912 v913 
        let _v906 = v914 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v915 : string = "format!(\"{:#?}\", $0)"
        let v916 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v915 
        let v917 : string = "fable_library_rust::String_::fromString($0)"
        let v918 : string = Fable.Core.RustInterop.emitRustExpr v916 v917 
        let _v906 = v918 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v919 : string = $"%A{v3}"
        let _v906 = v919 
        #endif
#if FABLE_COMPILER_PYTHON
        let v922 : string = $"%A{v3}"
        let _v906 = v922 
        #endif
#else
        let v925 : string = $"%A{v3}"
        let _v906 = v925 
        #endif
        let v928 : string = _v906 
        let v933 : string = $"{v928}"
        let v936 : unit = ()
        let v937 : (unit -> unit) = closure10(v878, v933)
        let v938 : unit = (fun () -> v937 (); v936) ()
        let v941 : string = "; "
        let v942 : string = $"{v941}"
        let v945 : unit = ()
        let v946 : (unit -> unit) = closure10(v878, v942)
        let v947 : unit = (fun () -> v946 (); v945) ()
        let v950 : string = "run_result"
        let v951 : string = $"{v950}"
        let v954 : unit = ()
        let v955 : (unit -> unit) = closure10(v878, v951)
        let v956 : unit = (fun () -> v955 (); v954) ()
        let v959 : string = $"{v897}"
        let v962 : unit = ()
        let v963 : (unit -> unit) = closure10(v878, v959)
        let v964 : unit = (fun () -> v963 (); v962) ()
        let v967 : string = $"{v1}"
        let v970 : unit = ()
        let v971 : (unit -> unit) = closure10(v878, v967)
        let v972 : unit = (fun () -> v971 (); v970) ()
        let v975 : string = $"{v941}"
        let v978 : unit = ()
        let v979 : (unit -> unit) = closure10(v878, v975)
        let v980 : unit = (fun () -> v979 (); v978) ()
        let v983 : string = "new_code_path"
        let v984 : string = $"{v983}"
        let v987 : unit = ()
        let v988 : (unit -> unit) = closure10(v878, v984)
        let v989 : unit = (fun () -> v988 (); v987) ()
        let v992 : string = $"{v897}"
        let v995 : unit = ()
        let v996 : (unit -> unit) = closure10(v878, v992)
        let v997 : unit = (fun () -> v996 (); v995) ()
        let v1000 : string = $"{v0}"
        let v1003 : unit = ()
        let v1004 : (unit -> unit) = closure10(v878, v1000)
        let v1005 : unit = (fun () -> v1004 (); v1003) ()
        let v1008 : string = $"{v941}"
        let v1011 : unit = ()
        let v1012 : (unit -> unit) = closure10(v878, v1008)
        let v1013 : unit = (fun () -> v1012 (); v1011) ()
        let v1016 : string = "external_command"
        let v1017 : string = $"{v1016}"
        let v1020 : unit = ()
        let v1021 : (unit -> unit) = closure10(v878, v1017)
        let v1022 : unit = (fun () -> v1021 (); v1020) ()
        let v1025 : string = $"{v897}"
        let v1028 : unit = ()
        let v1029 : (unit -> unit) = closure10(v878, v1025)
        let v1030 : unit = (fun () -> v1029 (); v1028) ()
        let v1033 : string = $"{v2}"
        let v1036 : unit = ()
        let v1037 : (unit -> unit) = closure10(v878, v1033)
        let v1038 : unit = (fun () -> v1037 (); v1036) ()
        let v1041 : string = " }"
        let v1042 : string = $"{v1041}"
        let v1045 : unit = ()
        let v1046 : (unit -> unit) = closure10(v878, v1042)
        let v1047 : unit = (fun () -> v1046 (); v1045) ()
        let v1050 : string = v878.l0
        let v1051 : (unit -> string) = closure89()
        let v1052 : string = $"{v486} {v870} #{v876} %s{v1051 ()} / {v1050}"
        let v1055 : char list = []
        let v1056 : (char list -> (char [])) = List.toArray
        let v1057 : (char []) = v1056 v1055
        let v1060 : string = v1052.TrimStart v1057 
        let v1078 : char list = []
        let v1079 : char list = '/' :: v1078 
        let v1082 : char list = ' ' :: v1079 
        let v1085 : (char list -> (char [])) = List.toArray
        let v1086 : (char []) = v1085 v1082
        let v1089 : string = v1060.TrimEnd v1086 
        let v1107 : (string -> unit) = closure12()
        let v1108 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1109 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1109 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1110 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1110 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1111 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1111 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1107 v1089
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1107 v1089
        let _v1108 = () 
        #endif
#else
        v1107 v1089
        let _v1108 = () 
        #endif
        _v1108 
        let v1112 : (string -> unit) = v20.l0
        v1112 v1089
and closure87 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure88(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure91 () () : string =
    let v0 : string = "spiral_builder.process_cuda / error"
    v0
and closure90 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "exit_code"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : string = $"{v2}"
        let v909 : unit = ()
        let v910 : (unit -> unit) = closure10(v878, v906)
        let v911 : unit = (fun () -> v910 (); v909) ()
        let v914 : string = "; "
        let v915 : string = $"{v914}"
        let v918 : unit = ()
        let v919 : (unit -> unit) = closure10(v878, v915)
        let v920 : unit = (fun () -> v919 (); v918) ()
        let v923 : string = "run_result"
        let v924 : string = $"{v923}"
        let v927 : unit = ()
        let v928 : (unit -> unit) = closure10(v878, v924)
        let v929 : unit = (fun () -> v928 (); v927) ()
        let v932 : string = $"{v897}"
        let v935 : unit = ()
        let v936 : (unit -> unit) = closure10(v878, v932)
        let v937 : unit = (fun () -> v936 (); v935) ()
        let v940 : string = $"{v1}"
        let v943 : unit = ()
        let v944 : (unit -> unit) = closure10(v878, v940)
        let v945 : unit = (fun () -> v944 (); v943) ()
        let v948 : string = $"{v914}"
        let v951 : unit = ()
        let v952 : (unit -> unit) = closure10(v878, v948)
        let v953 : unit = (fun () -> v952 (); v951) ()
        let v956 : string = "new_code_path"
        let v957 : string = $"{v956}"
        let v960 : unit = ()
        let v961 : (unit -> unit) = closure10(v878, v957)
        let v962 : unit = (fun () -> v961 (); v960) ()
        let v965 : string = $"{v897}"
        let v968 : unit = ()
        let v969 : (unit -> unit) = closure10(v878, v965)
        let v970 : unit = (fun () -> v969 (); v968) ()
        let v973 : string = $"{v0}"
        let v976 : unit = ()
        let v977 : (unit -> unit) = closure10(v878, v973)
        let v978 : unit = (fun () -> v977 (); v976) ()
        let v981 : string = $"{v914}"
        let v984 : unit = ()
        let v985 : (unit -> unit) = closure10(v878, v981)
        let v986 : unit = (fun () -> v985 (); v984) ()
        let v989 : string = "external_command"
        let v990 : string = $"{v989}"
        let v993 : unit = ()
        let v994 : (unit -> unit) = closure10(v878, v990)
        let v995 : unit = (fun () -> v994 (); v993) ()
        let v998 : string = $"{v897}"
        let v1001 : unit = ()
        let v1002 : (unit -> unit) = closure10(v878, v998)
        let v1003 : unit = (fun () -> v1002 (); v1001) ()
        let v1006 : string = $"{v3}"
        let v1009 : unit = ()
        let v1010 : (unit -> unit) = closure10(v878, v1006)
        let v1011 : unit = (fun () -> v1010 (); v1009) ()
        let v1014 : string = " }"
        let v1015 : string = $"{v1014}"
        let v1018 : unit = ()
        let v1019 : (unit -> unit) = closure10(v878, v1015)
        let v1020 : unit = (fun () -> v1019 (); v1018) ()
        let v1023 : string = v878.l0
        let v1024 : (unit -> string) = closure91()
        let v1025 : string = $"{v486} {v870} #{v876} %s{v1024 ()} / {v1023}"
        let v1028 : char list = []
        let v1029 : (char list -> (char [])) = List.toArray
        let v1030 : (char []) = v1029 v1028
        let v1033 : string = v1025.TrimStart v1030 
        let v1051 : char list = []
        let v1052 : char list = '/' :: v1051 
        let v1055 : char list = ' ' :: v1052 
        let v1058 : (char list -> (char [])) = List.toArray
        let v1059 : (char []) = v1058 v1055
        let v1062 : string = v1033.TrimEnd v1059 
        let v1080 : (string -> unit) = closure12()
        let v1081 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1082 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1082 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1083 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1083 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1084 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1084 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1080 v1062
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1080 v1062
        let _v1081 = () 
        #endif
#else
        v1080 v1062
        let _v1081 = () 
        #endif
        _v1081 
        let v1085 : (string -> unit) = v20.l0
        v1085 v1062
and closure92 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and method76 () : string =
    let v0 : string = "fs-path"
    v0
and method77 () : string =
    let v0 : string = "command"
    v0
and method78 () : string =
    let v0 : string = "path"
    v0
and method83 (v0 : string) : string =
    v0
and method82 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : string = "^\\\\\\\\\\?\\\\"
        let v4 : string = ""
        let v5 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = $"regex::Regex::new(&$0)"
        let v7 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let v8 : string = "$0.unwrap()"
        let v9 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v7 v8 
        let v10 : string = method83(v0)
        let v11 : string = $"$0.replace_all(&*$1, &*$2)"
        let v12 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10, v4) v11 
        let v13 : string = "String::from($0)"
        let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v13 
        let v15 : string = "fable_library_rust::String_::fromString($0)"
        let v16 : string = Fable.Core.RustInterop.emitRustExpr v14 v15 
        let _v5 = v16 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v17 : string = null |> unbox<string>
        let _v5 = v17 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v20 : string = null |> unbox<string>
        let _v5 = v20 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v23 : string = null |> unbox<string>
        let _v5 = v23 
        #endif
#if FABLE_COMPILER_PYTHON
        let v26 : string = null |> unbox<string>
        let _v5 = v26 
        #endif
#else
        let v29 : string = System.Text.RegularExpressions.Regex.Replace (v0, v3, v4)
        let _v5 = v29 
        #endif
        let v30 : string = _v5 
        let v35 : string = $"{v30.[0] |> string |> _.ToLower()}{v30.[1..]}"
        let v36 : string = "\\"
        let v37 : string = "/"
        let v38 : string = v35.Replace (v36, v37)
        v38
and method84 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method85 () : char =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::path::MAIN_SEPARATOR"
    let v2 : char = Fable.Core.RustInterop.emitRustExpr () v1 
    let _v0 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v6 
    #endif
#else
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v7 
    #endif
    let v8 : char = _v0 
    v8
and method81 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : bool = v9 = false
    let v118 : string =
        if v10 then
            let v11 : string = method25()
            let v12 : string = method17(v11, v0)
            let v13 : string = method82(v12)
            let v14 : string = "/"
            let v15 : (string []) = v13.Split v14 
            let v18 : (string []) = [||]
            let v19 : int32 = v15.Length
            let v20 : Mut6 = {l0 = 0; l1 = 0; l2 = v18} : Mut6
            while method84(v19, v20) do
                let v22 : int32 = v20.l0
                let v23 : int32 =  -v22
                let v24 : int32 = v23 + v19
                let v25 : int32 = v24 - 1
                let struct (v26 : int32, v27 : (string [])) = v20.l1, v20.l2
                let v28 : string = v15.[int v25]
                let v29 : bool = ".." = v28
                let struct (v71 : int32, v72 : (string [])) =
                    if v29 then
                        let v30 : int32 = v26 + 1
                        struct (v30, v27)
                    else
                        let v31 : bool = "." = v28
                        if v31 then
                            struct (v26, v27)
                        else
                            let v32 : bool = 0 = v26
                            if v32 then
                                let v33 : string = ":"
                                let v34 : bool = v28.EndsWith v33 
                                if v34 then
                                    let v35 : string = $"{v11.[0]}:"
                                    let v36 : (string []) = [|v35|]
                                    let v37 : int32 = v36.Length
                                    let v38 : int32 = v27.Length
                                    let v39 : int32 = v37 + v38
                                    let v40 : (string []) = Array.zeroCreate<string> (v39)
                                    let v41 : Mut5 = {l0 = 0} : Mut5
                                    while method45(v39, v41) do
                                        let v43 : int32 = v41.l0
                                        let v44 : bool = v43 < v37
                                        let v48 : string =
                                            if v44 then
                                                let v45 : string = v36.[int v43]
                                                v45
                                            else
                                                let v46 : int32 = v43 - v37
                                                let v47 : string = v27.[int v46]
                                                v47
                                        v40.[int v43] <- v48
                                        let v49 : int32 = v43 + 1
                                        v41.l0 <- v49
                                        ()
                                    struct (0, v40)
                                else
                                    let v50 : (string []) = [|v28|]
                                    let v51 : int32 = v50.Length
                                    let v52 : int32 = v27.Length
                                    let v53 : int32 = v51 + v52
                                    let v54 : (string []) = Array.zeroCreate<string> (v53)
                                    let v55 : Mut5 = {l0 = 0} : Mut5
                                    while method45(v53, v55) do
                                        let v57 : int32 = v55.l0
                                        let v58 : bool = v57 < v51
                                        let v62 : string =
                                            if v58 then
                                                let v59 : string = v50.[int v57]
                                                v59
                                            else
                                                let v60 : int32 = v57 - v51
                                                let v61 : string = v27.[int v60]
                                                v61
                                        v54.[int v57] <- v62
                                        let v63 : int32 = v57 + 1
                                        v55.l0 <- v63
                                        ()
                                    struct (0, v54)
                            else
                                let v66 : int32 = v26 - 1
                                struct (v66, v27)
                let v73 : int32 = v22 + 1
                v20.l0 <- v73
                v20.l1 <- v71
                v20.l2 <- v72
                ()
            let struct (v74 : int32, v75 : (string [])) = v20.l1, v20.l2
            let v76 : string seq = seq { for i = 0 to v75.Length - 1 do yield v75.[i] }
            let v79 : char = method85()
            let v80 : (char -> string) = _.ToString()
            let v81 : string = v80 v79
            let v84 : (string -> (string seq -> string)) = String.concat
            let v85 : (string seq -> string) = v84 v81
            v85 v76
        else
            let v89 : string = "std::fs::canonicalize(&*$0)"
            let v90 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v89 
            let v91 : string = "$0.unwrap()"
            let v92 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : string = "$0.display()"
            let v94 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v92 v93 
            let v95 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v96 : string = "format!(\"{}\", $0)"
            let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v96 
            let _v95 = v97 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v98 : string = "format!(\"{}\", $0)"
            let v99 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v98 
            let _v95 = v99 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v100 : string = "format!(\"{}\", $0)"
            let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v100 
            let _v95 = v101 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v102 : std_string_String = null |> unbox<std_string_String>
            let _v95 = v102 
            #endif
#if FABLE_COMPILER_PYTHON
            let v105 : std_string_String = null |> unbox<std_string_String>
            let _v95 = v105 
            #endif
#else
            let v108 : std_string_String = null |> unbox<std_string_String>
            let _v95 = v108 
            #endif
            let v111 : std_string_String = _v95 
            let v116 : string = "fable_library_rust::String_::fromString($0)"
            let v117 : string = Fable.Core.RustInterop.emitRustExpr v111 v116 
            v117
    let _v1 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v119 : string = null |> unbox<string>
    let _v1 = v119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v122 : string = null |> unbox<string>
    let _v1 = v122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v125 : string = null |> unbox<string>
    let _v1 = v125 
    #endif
#if FABLE_COMPILER_PYTHON
    let v128 : string = null |> unbox<string>
    let _v1 = v128 
    #endif
#else
    let v131 : (string -> string) = System.IO.Path.GetFullPath
    let v132 : string = v131 v0
    let _v1 = v132 
    #endif
    let v133 : string = _v1 
    v133
and method80 (v0 : string) : string =
    let v1 : string = method81(v0)
    method82(v1)
and method79 (v0 : string) : string =
    let v1 : string = method25()
    let v2 : string = method17(v1, v0)
    method80(v2)
and closure93 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method79(v2)
and method86 () : string =
    let v0 : string = "retries"
    v0
and method87 () : string =
    let v0 : string = "working-directory"
    v0
and closure95 () () : string =
    let v0 : string = "spiral_builder.run / repl error"
    v0
and closure94 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 1 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_1
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v618 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : string = "Debug"
                US1_0(v615)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v622 : string =
            match v618 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v619) -> (* Some *)
                v619
        let v623 : (unit -> string) = v622.ToLower
        let v624 : string = v623 ()
        let v627 : string = v624.PadLeft (7, ' ')
        let v641 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v642 : string = "inline_colorization::color_bright_blue"
        let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v642 
        let v644 : string = "&*$0"
        let v645 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v627 v644 
        let v646 : string = "inline_colorization::color_reset"
        let v647 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v646 
        let v648 : string = "\"{v643}{v645}{v647}\""
        let v649 : string = @$"format!(" + v648 + ")"
        let v650 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v649 
        let v651 : string = "fable_library_rust::String_::fromString($0)"
        let v652 : string = Fable.Core.RustInterop.emitRustExpr v650 v651 
        let _v641 = v652 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v653 : string = "inline_colorization::color_bright_blue"
        let v654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v653 
        let v655 : string = "&*$0"
        let v656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v627 v655 
        let v657 : string = "inline_colorization::color_reset"
        let v658 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v657 
        let v659 : string = "\"{v654}{v656}{v658}\""
        let v660 : string = @$"format!(" + v659 + ")"
        let v661 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v660 
        let v662 : string = "fable_library_rust::String_::fromString($0)"
        let v663 : string = Fable.Core.RustInterop.emitRustExpr v661 v662 
        let _v641 = v663 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v664 : string = "inline_colorization::color_bright_blue"
        let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v664 
        let v666 : string = "&*$0"
        let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v627 v666 
        let v668 : string = "inline_colorization::color_reset"
        let v669 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v668 
        let v670 : string = "\"{v665}{v667}{v669}\""
        let v671 : string = @$"format!(" + v670 + ")"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v641 = v674 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v675 : string = "\u001b[94m"
        let v676 : string = method11()
        let v677 : string = v675 + v627 
        let v678 : string = v677 + v676 
        let _v641 = v678 
        #endif
#if FABLE_COMPILER_PYTHON
        let v679 : string = "\u001b[94m"
        let v680 : string = method11()
        let v681 : string = v679 + v627 
        let v682 : string = v681 + v680 
        let _v641 = v682 
        #endif
#else
        let v683 : string = "\u001b[94m"
        let v684 : string = method11()
        let v685 : string = v683 + v627 
        let v686 : string = v685 + v684 
        let _v641 = v686 
        #endif
        let v687 : string = _v641 
        let v693 : int64 = v88.l0
        let v694 : string = $"{v1}/{v0}"
        let v695 : string = method10()
        let v696 : Mut4 = {l0 = v695} : Mut4
        let v697 : string = "{ "
        let v698 : string = $"{v697}"
        let v701 : unit = ()
        let v702 : (unit -> unit) = closure10(v696, v698)
        let v703 : unit = (fun () -> v702 (); v701) ()
        let v706 : string = "exit_code"
        let v707 : string = $"{v706}"
        let v710 : unit = ()
        let v711 : (unit -> unit) = closure10(v696, v707)
        let v712 : unit = (fun () -> v711 (); v710) ()
        let v715 : string = " = "
        let v716 : string = $"{v715}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure10(v696, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = $"{v3}"
        let v727 : unit = ()
        let v728 : (unit -> unit) = closure10(v696, v724)
        let v729 : unit = (fun () -> v728 (); v727) ()
        let v732 : string = "; "
        let v733 : string = $"{v732}"
        let v736 : unit = ()
        let v737 : (unit -> unit) = closure10(v696, v733)
        let v738 : unit = (fun () -> v737 (); v736) ()
        let v741 : string = "repl_result"
        let v742 : string = $"{v741}"
        let v745 : unit = ()
        let v746 : (unit -> unit) = closure10(v696, v742)
        let v747 : unit = (fun () -> v746 (); v745) ()
        let v750 : string = $"{v715}"
        let v753 : unit = ()
        let v754 : (unit -> unit) = closure10(v696, v750)
        let v755 : unit = (fun () -> v754 (); v753) ()
        let v758 : string = $"{v2}"
        let v761 : unit = ()
        let v762 : (unit -> unit) = closure10(v696, v758)
        let v763 : unit = (fun () -> v762 (); v761) ()
        let v766 : string = $"{v732}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v696, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = "retry"
        let v775 : string = $"{v774}"
        let v778 : unit = ()
        let v779 : (unit -> unit) = closure10(v696, v775)
        let v780 : unit = (fun () -> v779 (); v778) ()
        let v783 : string = $"{v715}"
        let v786 : unit = ()
        let v787 : (unit -> unit) = closure10(v696, v783)
        let v788 : unit = (fun () -> v787 (); v786) ()
        let v791 : string = $"{v694}"
        let v794 : unit = ()
        let v795 : (unit -> unit) = closure10(v696, v791)
        let v796 : unit = (fun () -> v795 (); v794) ()
        let v799 : string = " }"
        let v800 : string = $"{v799}"
        let v803 : unit = ()
        let v804 : (unit -> unit) = closure10(v696, v800)
        let v805 : unit = (fun () -> v804 (); v803) ()
        let v808 : string = v696.l0
        let v809 : (unit -> string) = closure95()
        let v810 : string = $"{v486} {v687} #{v693} %s{v809 ()} / {v808}"
        let v813 : char list = []
        let v814 : (char list -> (char [])) = List.toArray
        let v815 : (char []) = v814 v813
        let v818 : string = v810.TrimStart v815 
        let v836 : char list = []
        let v837 : char list = '/' :: v836 
        let v840 : char list = ' ' :: v837 
        let v843 : (char list -> (char [])) = List.toArray
        let v844 : (char []) = v843 v840
        let v847 : string = v818.TrimEnd v844 
        let v865 : (string -> unit) = closure12()
        let v866 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v867 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v847 v867 
        let _v866 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v868 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v847 v868 
        let _v866 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v869 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v847 v869 
        let _v866 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v865 v847
        let _v866 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v865 v847
        let _v866 = () 
        #endif
#else
        v865 v847
        let _v866 = () 
        #endif
        _v866 
        let v870 : (string -> unit) = v20.l0
        v870 v847
and method88 (v0 : US1, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v21 : string option =
        match v0 with
        | US1_1 -> (* None *)
            let v19 : string option = None
            v19
        | US1_0(v15) -> (* Some *)
            let v16 : string option = Some v15 
            v16
    let v22 : bool = false
    let struct (v23 : int32, v24 : string) = method42(v9, v4, v14, v6, v7, v22, v21)
    let v25 : bool = v23 = 0
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v3 >= v1
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure94(v1, v3, v24, v23)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v897 : uint8 = v3 + 1uy
        method88(v0, v1, v2, v897)
and closure97 () () : string =
    let v0 : string = "spiral_builder.run / dib / jupyter nbconvert"
    v0
and closure96 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_1
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v616 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : string = "Debug"
                US1_0(v613)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v620 : string =
            match v616 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v617) -> (* Some *)
                v617
        let v621 : (unit -> string) = v620.ToLower
        let v622 : string = v621 ()
        let v625 : string = v622.PadLeft (7, ' ')
        let v639 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v640 : string = "inline_colorization::color_bright_blue"
        let v641 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v640 
        let v642 : string = "&*$0"
        let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v642 
        let v644 : string = "inline_colorization::color_reset"
        let v645 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v644 
        let v646 : string = "\"{v641}{v643}{v645}\""
        let v647 : string = @$"format!(" + v646 + ")"
        let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "fable_library_rust::String_::fromString($0)"
        let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
        let _v639 = v650 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v651 : string = "inline_colorization::color_bright_blue"
        let v652 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v651 
        let v653 : string = "&*$0"
        let v654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v653 
        let v655 : string = "inline_colorization::color_reset"
        let v656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v655 
        let v657 : string = "\"{v652}{v654}{v656}\""
        let v658 : string = @$"format!(" + v657 + ")"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v639 = v661 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v662 : string = "inline_colorization::color_bright_blue"
        let v663 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v662 
        let v664 : string = "&*$0"
        let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v664 
        let v666 : string = "inline_colorization::color_reset"
        let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v666 
        let v668 : string = "\"{v663}{v665}{v667}\""
        let v669 : string = @$"format!(" + v668 + ")"
        let v670 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "fable_library_rust::String_::fromString($0)"
        let v672 : string = Fable.Core.RustInterop.emitRustExpr v670 v671 
        let _v639 = v672 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v673 : string = "\u001b[94m"
        let v674 : string = method11()
        let v675 : string = v673 + v625 
        let v676 : string = v675 + v674 
        let _v639 = v676 
        #endif
#if FABLE_COMPILER_PYTHON
        let v677 : string = "\u001b[94m"
        let v678 : string = method11()
        let v679 : string = v677 + v625 
        let v680 : string = v679 + v678 
        let _v639 = v680 
        #endif
#else
        let v681 : string = "\u001b[94m"
        let v682 : string = method11()
        let v683 : string = v681 + v625 
        let v684 : string = v683 + v682 
        let _v639 = v684 
        #endif
        let v685 : string = _v639 
        let v691 : int64 = v86.l0
        let v692 : int32 = v0.Length
        let v693 : string = method10()
        let v694 : Mut4 = {l0 = v693} : Mut4
        let v695 : string = "{ "
        let v696 : string = $"{v695}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v694, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "exit_code"
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure10(v694, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = " = "
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v694, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v1}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v694, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = "; "
        let v731 : string = $"{v730}"
        let v734 : unit = ()
        let v735 : (unit -> unit) = closure10(v694, v731)
        let v736 : unit = (fun () -> v735 (); v734) ()
        let v739 : string = "jupyter_result_length"
        let v740 : string = $"{v739}"
        let v743 : unit = ()
        let v744 : (unit -> unit) = closure10(v694, v740)
        let v745 : unit = (fun () -> v744 (); v743) ()
        let v748 : string = $"{v713}"
        let v751 : unit = ()
        let v752 : (unit -> unit) = closure10(v694, v748)
        let v753 : unit = (fun () -> v752 (); v751) ()
        let v756 : string = $"{v692}"
        let v759 : unit = ()
        let v760 : (unit -> unit) = closure10(v694, v756)
        let v761 : unit = (fun () -> v760 (); v759) ()
        let v764 : string = " }"
        let v765 : string = $"{v764}"
        let v768 : unit = ()
        let v769 : (unit -> unit) = closure10(v694, v765)
        let v770 : unit = (fun () -> v769 (); v768) ()
        let v773 : string = v694.l0
        let v774 : (unit -> string) = closure97()
        let v775 : string = $"{v484} {v685} #{v691} %s{v774 ()} / {v773}"
        let v778 : char list = []
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v778
        let v783 : string = v775.TrimStart v780 
        let v801 : char list = []
        let v802 : char list = '/' :: v801 
        let v805 : char list = ' ' :: v802 
        let v808 : (char list -> (char [])) = List.toArray
        let v809 : (char []) = v808 v805
        let v812 : string = v783.TrimEnd v809 
        let v830 : (string -> unit) = closure12()
        let v831 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v832 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v832 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v833 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v834 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v834 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v830 v812
        let _v831 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v830 v812
        let _v831 = () 
        #endif
#else
        v830 v812
        let _v831 = () 
        #endif
        _v831 
        let v835 : (string -> unit) = v18.l0
        v835 v812
and closure99 () () : string =
    let v0 : string = "spiral_builder.run / dib / html cell ids"
    v0
and closure98 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_1
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v616 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : string = "Debug"
                US1_0(v613)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v620 : string =
            match v616 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v617) -> (* Some *)
                v617
        let v621 : (unit -> string) = v620.ToLower
        let v622 : string = v621 ()
        let v625 : string = v622.PadLeft (7, ' ')
        let v639 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v640 : string = "inline_colorization::color_bright_blue"
        let v641 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v640 
        let v642 : string = "&*$0"
        let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v642 
        let v644 : string = "inline_colorization::color_reset"
        let v645 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v644 
        let v646 : string = "\"{v641}{v643}{v645}\""
        let v647 : string = @$"format!(" + v646 + ")"
        let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "fable_library_rust::String_::fromString($0)"
        let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
        let _v639 = v650 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v651 : string = "inline_colorization::color_bright_blue"
        let v652 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v651 
        let v653 : string = "&*$0"
        let v654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v653 
        let v655 : string = "inline_colorization::color_reset"
        let v656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v655 
        let v657 : string = "\"{v652}{v654}{v656}\""
        let v658 : string = @$"format!(" + v657 + ")"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v639 = v661 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v662 : string = "inline_colorization::color_bright_blue"
        let v663 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v662 
        let v664 : string = "&*$0"
        let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v664 
        let v666 : string = "inline_colorization::color_reset"
        let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v666 
        let v668 : string = "\"{v663}{v665}{v667}\""
        let v669 : string = @$"format!(" + v668 + ")"
        let v670 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "fable_library_rust::String_::fromString($0)"
        let v672 : string = Fable.Core.RustInterop.emitRustExpr v670 v671 
        let _v639 = v672 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v673 : string = "\u001b[94m"
        let v674 : string = method11()
        let v675 : string = v673 + v625 
        let v676 : string = v675 + v674 
        let _v639 = v676 
        #endif
#if FABLE_COMPILER_PYTHON
        let v677 : string = "\u001b[94m"
        let v678 : string = method11()
        let v679 : string = v677 + v625 
        let v680 : string = v679 + v678 
        let _v639 = v680 
        #endif
#else
        let v681 : string = "\u001b[94m"
        let v682 : string = method11()
        let v683 : string = v681 + v625 
        let v684 : string = v683 + v682 
        let _v639 = v684 
        #endif
        let v685 : string = _v639 
        let v691 : int64 = v86.l0
        let v692 : int32 = v0.Length
        let v693 : string = method10()
        let v694 : Mut4 = {l0 = v693} : Mut4
        let v695 : string = "{ "
        let v696 : string = $"{v695}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v694, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "exit_code"
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure10(v694, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = " = "
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v694, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v1}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v694, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = "; "
        let v731 : string = $"{v730}"
        let v734 : unit = ()
        let v735 : (unit -> unit) = closure10(v694, v731)
        let v736 : unit = (fun () -> v735 (); v734) ()
        let v739 : string = "pwsh_replace_html_result_length"
        let v740 : string = $"{v739}"
        let v743 : unit = ()
        let v744 : (unit -> unit) = closure10(v694, v740)
        let v745 : unit = (fun () -> v744 (); v743) ()
        let v748 : string = $"{v713}"
        let v751 : unit = ()
        let v752 : (unit -> unit) = closure10(v694, v748)
        let v753 : unit = (fun () -> v752 (); v751) ()
        let v756 : string = $"{v692}"
        let v759 : unit = ()
        let v760 : (unit -> unit) = closure10(v694, v756)
        let v761 : unit = (fun () -> v760 (); v759) ()
        let v764 : string = " }"
        let v765 : string = $"{v764}"
        let v768 : unit = ()
        let v769 : (unit -> unit) = closure10(v694, v765)
        let v770 : unit = (fun () -> v769 (); v768) ()
        let v773 : string = v694.l0
        let v774 : (unit -> string) = closure99()
        let v775 : string = $"{v484} {v685} #{v691} %s{v774 ()} / {v773}"
        let v778 : char list = []
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v778
        let v783 : string = v775.TrimStart v780 
        let v801 : char list = []
        let v802 : char list = '/' :: v801 
        let v805 : char list = ' ' :: v802 
        let v808 : (char list -> (char [])) = List.toArray
        let v809 : (char []) = v808 v805
        let v812 : string = v783.TrimEnd v809 
        let v830 : (string -> unit) = closure12()
        let v831 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v832 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v832 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v833 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v834 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v834 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v830 v812
        let _v831 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v830 v812
        let _v831 = () 
        #endif
#else
        v830 v812
        let _v831 = () 
        #endif
        _v831 
        let v835 : (string -> unit) = v18.l0
        v835 v812
and closure101 () () : string =
    let v0 : string = "spiral_builder.run / dib"
    v0
and closure100 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_1
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v616 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : string = "Debug"
                US1_0(v613)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v620 : string =
            match v616 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v617) -> (* Some *)
                v617
        let v621 : (unit -> string) = v620.ToLower
        let v622 : string = v621 ()
        let v625 : string = v622.PadLeft (7, ' ')
        let v639 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v640 : string = "inline_colorization::color_bright_blue"
        let v641 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v640 
        let v642 : string = "&*$0"
        let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v642 
        let v644 : string = "inline_colorization::color_reset"
        let v645 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v644 
        let v646 : string = "\"{v641}{v643}{v645}\""
        let v647 : string = @$"format!(" + v646 + ")"
        let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "fable_library_rust::String_::fromString($0)"
        let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
        let _v639 = v650 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v651 : string = "inline_colorization::color_bright_blue"
        let v652 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v651 
        let v653 : string = "&*$0"
        let v654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v653 
        let v655 : string = "inline_colorization::color_reset"
        let v656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v655 
        let v657 : string = "\"{v652}{v654}{v656}\""
        let v658 : string = @$"format!(" + v657 + ")"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v639 = v661 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v662 : string = "inline_colorization::color_bright_blue"
        let v663 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v662 
        let v664 : string = "&*$0"
        let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v664 
        let v666 : string = "inline_colorization::color_reset"
        let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v666 
        let v668 : string = "\"{v663}{v665}{v667}\""
        let v669 : string = @$"format!(" + v668 + ")"
        let v670 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "fable_library_rust::String_::fromString($0)"
        let v672 : string = Fable.Core.RustInterop.emitRustExpr v670 v671 
        let _v639 = v672 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v673 : string = "\u001b[94m"
        let v674 : string = method11()
        let v675 : string = v673 + v625 
        let v676 : string = v675 + v674 
        let _v639 = v676 
        #endif
#if FABLE_COMPILER_PYTHON
        let v677 : string = "\u001b[94m"
        let v678 : string = method11()
        let v679 : string = v677 + v625 
        let v680 : string = v679 + v678 
        let _v639 = v680 
        #endif
#else
        let v681 : string = "\u001b[94m"
        let v682 : string = method11()
        let v683 : string = v681 + v625 
        let v684 : string = v683 + v682 
        let _v639 = v684 
        #endif
        let v685 : string = _v639 
        let v691 : int64 = v86.l0
        let v692 : int32 = v0.Length
        let v693 : string = method10()
        let v694 : Mut4 = {l0 = v693} : Mut4
        let v695 : string = "{ "
        let v696 : string = $"{v695}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v694, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "exit_code"
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure10(v694, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = " = "
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v694, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v1}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v694, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = "; "
        let v731 : string = $"{v730}"
        let v734 : unit = ()
        let v735 : (unit -> unit) = closure10(v694, v731)
        let v736 : unit = (fun () -> v735 (); v734) ()
        let v739 : string = "result_length"
        let v740 : string = $"{v739}"
        let v743 : unit = ()
        let v744 : (unit -> unit) = closure10(v694, v740)
        let v745 : unit = (fun () -> v744 (); v743) ()
        let v748 : string = $"{v713}"
        let v751 : unit = ()
        let v752 : (unit -> unit) = closure10(v694, v748)
        let v753 : unit = (fun () -> v752 (); v751) ()
        let v756 : string = $"{v692}"
        let v759 : unit = ()
        let v760 : (unit -> unit) = closure10(v694, v756)
        let v761 : unit = (fun () -> v760 (); v759) ()
        let v764 : string = " }"
        let v765 : string = $"{v764}"
        let v768 : unit = ()
        let v769 : (unit -> unit) = closure10(v694, v765)
        let v770 : unit = (fun () -> v769 (); v768) ()
        let v773 : string = v694.l0
        let v774 : (unit -> string) = closure101()
        let v775 : string = $"{v484} {v685} #{v691} %s{v774 ()} / {v773}"
        let v778 : char list = []
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v778
        let v783 : string = v775.TrimStart v780 
        let v801 : char list = []
        let v802 : char list = '/' :: v801 
        let v805 : char list = ' ' :: v802 
        let v808 : (char list -> (char [])) = List.toArray
        let v809 : (char []) = v808 v805
        let v812 : string = v783.TrimEnd v809 
        let v830 : (string -> unit) = closure12()
        let v831 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v832 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v832 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v833 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v834 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v812 v834 
        let _v831 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v830 v812
        let _v831 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v830 v812
        let _v831 = () 
        #endif
#else
        v830 v812
        let _v831 = () 
        #endif
        _v831 
        let v835 : (string -> unit) = v18.l0
        v835 v812
and method89 () : string =
    let v0 : string = "wasm"
    v0
and method90 () : string =
    let v0 : string = "contract"
    v0
and method92 () : string =
    let v0 : string = ""
    v0
and method93 () : string =
    let v0 : string = ""
    v0
and method91 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v3 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v4 : (string -> (uint8 [])) = v3 v2
    let v5 : (uint8 []) = v4 v0
    let v6 : string = "$0.to_vec()"
    let v7 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::io::Cursor::new(v7)"
    let v9 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "std::io::BufReader::new(v9)"
    let v11 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "true; let mut v11 = v11"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v14 
    let v15 : string = "result"
    let v16 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "true; let mut v16 = v16"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : unativeint = 0 |> unativeint 
    let v22 : string = "[$0; 1024]"
    let v23 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v22 
    let v24 : string = "true; loop { // rust.loop"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = "true; let mut v23 = v23"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "std::io::Read::read(&mut v11, &mut v23)"
    let v29 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = "$0.unwrap()"
    let v31 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : bool = v31 = v19 
    if v32 then
        let v35 : string = "true; break"
        let v36 : bool = Fable.Core.RustInterop.emitRustExpr () v35 
        ()
    let v37 : string = "v23.len()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : uint8 = v38 |> uint8 
    let v42 : unativeint = v31 |> unativeint 
    let v45 : unativeint = v42 |> unbox<unativeint>
    let v48 : bool = v45 = v38 
    let v55 : Ref<Slice'<uint8>> =
        if v48 then
            let v51 : string = "&v23[v19..]"
            let v52 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v51 
            v52
        else
            let v53 : string = "&v23[$0..$1]"
            let v54 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v19, v42) v53 
            v54
    let v56 : string = "sha2::Digest::update(&mut v16, v55)"
    Fable.Core.RustInterop.emitRustExpr () v56 
    let v57 : string = "true; } // rust.loop"
    let v58 : bool = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "true; } // rust.loop"
    let v60 : bool = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "true; } // rust.loop"
    let v62 : bool = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "true; { // rust.loop"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr () v63 
    let v65 : string = "true; { // rust.loop"
    let v66 : bool = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "&sha2::Digest::finalize(v16)"
    let v68 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v70 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v73 : string = "x"
    let v74 : uint8 = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "format!(\"{:02x}\", $0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : string = "true; $0 }).collect::<Vec<_>>()"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "_vec_map"
    let v82 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v81 
    let v83 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v84 : (string []) = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string seq = seq { for i = 0 to v84.Length - 1 do yield v84.[i] }
    let v88 : string = method92()
    let v89 : (string -> (string seq -> string)) = String.concat
    let v90 : (string seq -> string) = v89 v88
    let v91 : string = v90 v85
    let v94 : Result<string, std_io_Error> = Ok v91 
    let v95 : string = "$0.unwrap()"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr v94 v95 
    let _v1 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = null |> unbox<string>
    let _v1 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v100 : string = null |> unbox<string>
    let _v1 = v100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v103 : string = "crypto"
    let v104 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v103 
    let v105 : string = "v104.createHash($0)"
    let v106 : string = "sha256"
    let v107 : obj = Fable.Core.JsInterop.emitJsExpr v106 v105 
    let v108 : string = "$0.update($1, 'utf8')"
    let v109 : obj = Fable.Core.JsInterop.emitJsExpr struct (v107, v0) v108 
    let v110 : string = "$0.digest($1)"
    let v111 : string = "hex"
    let v112 : string = Fable.Core.JsInterop.emitJsExpr struct (v109, v111) v110 
    let _v1 = v112 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : string = "hashlib"
    let v114 : IHashlibSha256 = Fable.Core.PyInterop.importAll v113 
    let v115 : string = "v114.sha256()"
    let v116 : obj = Fable.Core.PyInterop.emitPyExpr () v115 
    let v119 : string = "$0.encode($1)"
    let v120 : string = "utf-8"
    let v121 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v120) v119 
    let v124 : string = "v116.update($0)"
    Fable.Core.PyInterop.emitPyExpr v121 v124 
    let v125 : string = "v116.hexdigest()"
    let v126 : string = Fable.Core.PyInterop.emitPyExpr () v125 
    let _v1 = v126 
    #endif
#else
    let v129 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v130 : System.Security.Cryptography.SHA256 = v129 ()
    use v130 = v130 
    let v131 : System.Security.Cryptography.SHA256 = v130 
    let v132 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v133 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v134 : (string -> (uint8 [])) = v133 v132
    let v135 : (uint8 []) = v134 v0
    let v136 : ((uint8 []) -> (uint8 [])) = v131.ComputeHash
    let v137 : (uint8 []) = v136 v135
    let v138 : int32 = v137.Length
    let v139 : (string []) = Array.zeroCreate<string> (v138)
    let v140 : Mut5 = {l0 = 0} : Mut5
    while method45(v138, v140) do
        let v142 : int32 = v140.l0
        let v143 : uint8 = v137.[int v142]
        let v144 : (string -> string) = v143.ToString
        let v145 : string = "x2"
        let v146 : string = v144 v145
        v139.[int v142] <- v146
        let v147 : int32 = v142 + 1
        v140.l0 <- v147
        ()
    let v148 : string seq = seq { for i = 0 to v139.Length - 1 do yield v139.[i] }
    let v151 : string = method93()
    let v152 : (string -> (string seq -> string)) = String.concat
    let v153 : (string seq -> string) = v152 v151
    let v154 : string = v153 v148
    let _v1 = v154 
    #endif
    let v157 : string = _v1 
    v157
and closure102 (v0 : US35 option ref) (v1 : US35 option) : US35 option ref =
    v0.Value <- v1 
    v0
and closure103 (v0 : chrono_DateTime<chrono_Utc> option, v1 : (US35 option -> US35 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : chrono_DateTime<chrono_Utc> = x
    let v3 : US35 = US35_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method95 () : string =
    let v0 : string = "hh:mm"
    v0
and method96 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method97 () : string =
    let v0 : string = "hhmm"
    v0
and method94 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v6 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v7 : System.DateTime = v6 v3
    let v10 : System.DateTimeKind = System.DateTimeKind.Local
    let v11 : System.DateTime = System.DateTime.SpecifyKind (v1, v10)
    let v12 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v13 : System.DateTime = v12 v11
    let v16 : (System.DateTime -> int64) = _.Ticks
    let v17 : int64 = v16 v13
    let v20 : (System.DateTime -> int64) = _.Ticks
    let v21 : int64 = v20 v7
    let v24 : int64 = v17 - v21
    let v25 : int64 = v24 / 10L
    let v26 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v27 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : US35 option = None
    let _v28 = ref v28 
    let v29 : US35 option ref = _v28 
    let v30 : (US35 option -> US35 option ref) = closure102(v29)
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure103(v27, v30)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v36 : US35 option = _v28.Value 
    let v47 : US35 = US35_1
    let v48 : US35 = v36 |> Option.defaultValue v47 
    let v68 : US1 =
        match v48 with
        | US35_1 -> (* None *)
            US1_1
        | US35_0(v52) -> (* Some *)
            let v53 : string = "$0.naive_utc()"
            let v54 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v52 v53 
            let v55 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v56 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v54 v55 
            let v57 : string = "%Y%m%d-%H%M-%S%f"
            let v58 : string = "r#\"" + v57 + "\"#"
            let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v58 
            let v60 : string = "$0.format($1).to_string()"
            let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v59) v60 
            let v62 : string = "fable_library_rust::String_::fromString($0)"
            let v63 : string = Fable.Core.RustInterop.emitRustExpr v61 v62 
            let v64 : string = $"{v63.[0..17]}-{v63.[18..21]}-{v63.[22]}"
            US1_0(v64)
    let v72 : string =
        match v68 with
        | US1_1 -> (* None *)
            let v70 : string = ""
            v70
        | US1_0(v69) -> (* Some *)
            v69
    let v73 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "0i64.into()"
    let v75 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v74 
    let _v73 = v75 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v76 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v76 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v82 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v82 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v85 
    #endif
#else
    let v88 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v73 = v88 
    #endif
    let v89 : System.TimeZoneInfo = _v73 
    let v94 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v95 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v96 : System.TimeSpan = v95 ()
    let _v94 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v99 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v100 : System.TimeSpan = v99 ()
    let _v94 = v100 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v104 : System.TimeSpan = v103 ()
    let _v94 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v107 : US10 = US10_0
    let v108 : US11 = US11_3(v107)
    let v109 : string = $"date_time.get_utc_offset / target: {v108}"
    let v110 : System.TimeSpan = failwith<System.TimeSpan> v109
    let _v94 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v111 : US10 = US10_0
    let v112 : US11 = US11_4(v111)
    let v113 : string = $"date_time.get_utc_offset / target: {v112}"
    let v114 : System.TimeSpan = failwith<System.TimeSpan> v113
    let _v94 = v114 
    #endif
#else
    let v115 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v116 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v117 : string = "0i64.into()"
    let v118 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v117 
    let _v116 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v119 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v122 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v125 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v125 
    #endif
#if FABLE_COMPILER_PYTHON
    let v128 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v128 
    #endif
#else
    let v131 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v116 = v131 
    #endif
    let v132 : System.TimeZoneInfo = _v116 
    let v137 : (System.DateTime -> System.TimeSpan) = v115 v132
    let v138 : System.TimeSpan = v137 v13
    let _v94 = v138 
    #endif
    let v139 : System.TimeSpan = _v94 
    let v145 : (System.TimeSpan -> int32) = _.Hours
    let v146 : int32 = v145 v139
    let v149 : bool = v146 > 0
    let v150 : uint8 =
        if v149 then
            1uy
        else
            0uy
    let v151 : string = method95()
    let v152 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v153 : string = v139.ToString v151 
    let _v152 = v153 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v154 : string = v139.ToString v151 
    let _v152 = v154 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v155 : string = v139.ToString v151 
    let _v152 = v155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : string = v139.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v152 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v157 : string = v139.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v152 = v157 
    #endif
#else
    let v158 : string = v139.ToString v151 
    let _v152 = v158 
    #endif
    let v159 : string = _v152 
    let v162 : string = $"{v150}{v159.[0..1]}{v159.[3..4]}"
    let v163 : (System.Guid -> string) = _.ToString()
    let v164 : string = v163 v0
    let v167 : System.Guid = System.Guid $"{v72}{v162}{v164.[v72.Length + v162.Length..]}"
    let _v2 = v167 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v168 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v171 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v172 : System.DateTime = v171 v168
    let v175 : System.DateTimeKind = System.DateTimeKind.Local
    let v176 : System.DateTime = System.DateTime.SpecifyKind (v1, v175)
    let v177 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v178 : System.DateTime = v177 v176
    let v181 : (System.DateTime -> int64) = _.Ticks
    let v182 : int64 = v181 v178
    let v185 : (System.DateTime -> int64) = _.Ticks
    let v186 : int64 = v185 v172
    let v189 : int64 = v182 - v186
    let v190 : int64 = v189 / 10L
    let v191 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v192 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v190 v191 
    let v193 : US35 option = None
    let _v193 = ref v193 
    let v194 : US35 option ref = _v193 
    let v195 : (US35 option -> US35 option ref) = closure102(v194)
    let v196 : unit = ()
    let v197 : (unit -> unit) = closure103(v192, v195)
    let v198 : unit = (fun () -> v197 (); v196) ()
    let v201 : US35 option = _v193.Value 
    let v212 : US35 = US35_1
    let v213 : US35 = v201 |> Option.defaultValue v212 
    let v233 : US1 =
        match v213 with
        | US35_1 -> (* None *)
            US1_1
        | US35_0(v217) -> (* Some *)
            let v218 : string = "$0.naive_utc()"
            let v219 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v217 v218 
            let v220 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v221 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v219 v220 
            let v222 : string = "%Y%m%d-%H%M-%S%f"
            let v223 : string = "r#\"" + v222 + "\"#"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            let v225 : string = "$0.format($1).to_string()"
            let v226 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v221, v224) v225 
            let v227 : string = "fable_library_rust::String_::fromString($0)"
            let v228 : string = Fable.Core.RustInterop.emitRustExpr v226 v227 
            let v229 : string = $"{v228.[0..17]}-{v228.[18..21]}-{v228.[22]}"
            US1_0(v229)
    let v237 : string =
        match v233 with
        | US1_1 -> (* None *)
            let v235 : string = ""
            v235
        | US1_0(v234) -> (* Some *)
            v234
    let v238 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v239 : string = "0i64.into()"
    let v240 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v239 
    let _v238 = v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v241 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v241 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v244 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v244 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v247 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v247 
    #endif
#if FABLE_COMPILER_PYTHON
    let v250 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v250 
    #endif
#else
    let v253 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v238 = v253 
    #endif
    let v254 : System.TimeZoneInfo = _v238 
    let v259 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v260 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v261 : System.TimeSpan = v260 ()
    let _v259 = v261 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v264 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v265 : System.TimeSpan = v264 ()
    let _v259 = v265 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v268 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v269 : System.TimeSpan = v268 ()
    let _v259 = v269 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v272 : US10 = US10_0
    let v273 : US11 = US11_3(v272)
    let v274 : string = $"date_time.get_utc_offset / target: {v273}"
    let v275 : System.TimeSpan = failwith<System.TimeSpan> v274
    let _v259 = v275 
    #endif
#if FABLE_COMPILER_PYTHON
    let v276 : US10 = US10_0
    let v277 : US11 = US11_4(v276)
    let v278 : string = $"date_time.get_utc_offset / target: {v277}"
    let v279 : System.TimeSpan = failwith<System.TimeSpan> v278
    let _v259 = v279 
    #endif
#else
    let v280 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v281 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v282 : string = "0i64.into()"
    let v283 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v282 
    let _v281 = v283 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v284 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v284 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v287 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v287 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v290 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v290 
    #endif
#if FABLE_COMPILER_PYTHON
    let v293 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v293 
    #endif
#else
    let v296 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v281 = v296 
    #endif
    let v297 : System.TimeZoneInfo = _v281 
    let v302 : (System.DateTime -> System.TimeSpan) = v280 v297
    let v303 : System.TimeSpan = v302 v178
    let _v259 = v303 
    #endif
    let v304 : System.TimeSpan = _v259 
    let v310 : (System.TimeSpan -> int32) = _.Hours
    let v311 : int32 = v310 v304
    let v314 : bool = v311 > 0
    let v315 : uint8 =
        if v314 then
            1uy
        else
            0uy
    let v316 : string = method95()
    let v317 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v318 : string = v304.ToString v316 
    let _v317 = v318 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v319 : string = v304.ToString v316 
    let _v317 = v319 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v320 : string = v304.ToString v316 
    let _v317 = v320 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v321 : string = v304.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v317 = v321 
    #endif
#if FABLE_COMPILER_PYTHON
    let v322 : string = v304.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v317 = v322 
    #endif
#else
    let v323 : string = v304.ToString v316 
    let _v317 = v323 
    #endif
    let v324 : string = _v317 
    let v327 : string = $"{v315}{v324.[0..1]}{v324.[3..4]}"
    let v328 : (System.Guid -> string) = _.ToString()
    let v329 : string = v328 v0
    let v332 : System.Guid = System.Guid $"{v237}{v327}{v329.[v237.Length + v327.Length..]}"
    let _v2 = v332 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v333 : System.Guid = null |> unbox<System.Guid>
    let _v2 = v333 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v336 : string = method96()
    let v337 : (string -> string) = v1.ToString
    let v338 : string = v337 v336
    let v341 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v342 : string = "0i64.into()"
    let v343 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v342 
    let _v341 = v343 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v344 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v344 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v347 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v347 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v350 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v350 
    #endif
#if FABLE_COMPILER_PYTHON
    let v353 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v353 
    #endif
#else
    let v356 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v341 = v356 
    #endif
    let v357 : System.TimeZoneInfo = _v341 
    let v362 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v363 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v364 : System.TimeSpan = v363 ()
    let _v362 = v364 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v367 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v368 : System.TimeSpan = v367 ()
    let _v362 = v368 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v371 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v372 : System.TimeSpan = v371 ()
    let _v362 = v372 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v375 : US10 = US10_0
    let v376 : US11 = US11_3(v375)
    let v377 : string = $"date_time.get_utc_offset / target: {v376}"
    let v378 : System.TimeSpan = failwith<System.TimeSpan> v377
    let _v362 = v378 
    #endif
#if FABLE_COMPILER_PYTHON
    let v379 : US10 = US10_0
    let v380 : US11 = US11_4(v379)
    let v381 : string = $"date_time.get_utc_offset / target: {v380}"
    let v382 : System.TimeSpan = failwith<System.TimeSpan> v381
    let _v362 = v382 
    #endif
#else
    let v383 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v384 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v385 : string = "0i64.into()"
    let v386 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v385 
    let _v384 = v386 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v387 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v387 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v390 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v390 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v393 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v393 
    #endif
#if FABLE_COMPILER_PYTHON
    let v396 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v396 
    #endif
#else
    let v399 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v384 = v399 
    #endif
    let v400 : System.TimeZoneInfo = _v384 
    let v405 : (System.DateTime -> System.TimeSpan) = v383 v400
    let v406 : System.TimeSpan = v405 v1
    let _v362 = v406 
    #endif
    let v407 : System.TimeSpan = _v362 
    let v413 : (System.TimeSpan -> int32) = _.Hours
    let v414 : int32 = v413 v407
    let v417 : bool = v414 > 0
    let v418 : uint8 =
        if v417 then
            1uy
        else
            0uy
    let v419 : string = method97()
    let v420 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v421 : string = v407.ToString v419 
    let _v420 = v421 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v422 : string = v407.ToString v419 
    let _v420 = v422 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v423 : string = v407.ToString v419 
    let _v420 = v423 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v424 : string = v407.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v420 = v424 
    #endif
#if FABLE_COMPILER_PYTHON
    let v425 : string = v407.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v420 = v425 
    #endif
#else
    let v426 : string = v407.ToString v419 
    let _v420 = v426 
    #endif
    let v427 : string = _v420 
    let v430 : string = $"{v418}{v427}"
    let v431 : (System.Guid -> string) = _.ToString()
    let v432 : string = v431 v0
    let v435 : System.Guid = System.Guid $"{v338}{v430}{v432.[v338.Length + v430.Length..]}"
    let _v2 = v435 
    #endif
#if FABLE_COMPILER_PYTHON
    let v436 : string = method96()
    let v437 : (string -> string) = v1.ToString
    let v438 : string = v437 v436
    let v441 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v442 : string = "0i64.into()"
    let v443 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v442 
    let _v441 = v443 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v444 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v444 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v447 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v447 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v450 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v450 
    #endif
#if FABLE_COMPILER_PYTHON
    let v453 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v453 
    #endif
#else
    let v456 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v441 = v456 
    #endif
    let v457 : System.TimeZoneInfo = _v441 
    let v462 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v463 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v464 : System.TimeSpan = v463 ()
    let _v462 = v464 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v467 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v468 : System.TimeSpan = v467 ()
    let _v462 = v468 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v471 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v472 : System.TimeSpan = v471 ()
    let _v462 = v472 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v475 : US10 = US10_0
    let v476 : US11 = US11_3(v475)
    let v477 : string = $"date_time.get_utc_offset / target: {v476}"
    let v478 : System.TimeSpan = failwith<System.TimeSpan> v477
    let _v462 = v478 
    #endif
#if FABLE_COMPILER_PYTHON
    let v479 : US10 = US10_0
    let v480 : US11 = US11_4(v479)
    let v481 : string = $"date_time.get_utc_offset / target: {v480}"
    let v482 : System.TimeSpan = failwith<System.TimeSpan> v481
    let _v462 = v482 
    #endif
#else
    let v483 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v484 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v485 : string = "0i64.into()"
    let v486 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v485 
    let _v484 = v486 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v487 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v487 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v490 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v490 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v493 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v493 
    #endif
#if FABLE_COMPILER_PYTHON
    let v496 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v496 
    #endif
#else
    let v499 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v484 = v499 
    #endif
    let v500 : System.TimeZoneInfo = _v484 
    let v505 : (System.DateTime -> System.TimeSpan) = v483 v500
    let v506 : System.TimeSpan = v505 v1
    let _v462 = v506 
    #endif
    let v507 : System.TimeSpan = _v462 
    let v513 : (System.TimeSpan -> int32) = _.Hours
    let v514 : int32 = v513 v507
    let v517 : bool = v514 > 0
    let v518 : uint8 =
        if v517 then
            1uy
        else
            0uy
    let v519 : string = method97()
    let v520 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v521 : string = v507.ToString v519 
    let _v520 = v521 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v522 : string = v507.ToString v519 
    let _v520 = v522 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v523 : string = v507.ToString v519 
    let _v520 = v523 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v524 : string = v507.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v520 = v524 
    #endif
#if FABLE_COMPILER_PYTHON
    let v525 : string = v507.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v520 = v525 
    #endif
#else
    let v526 : string = v507.ToString v519 
    let _v520 = v526 
    #endif
    let v527 : string = _v520 
    let v530 : string = $"{v518}{v527}"
    let v531 : (System.Guid -> string) = _.ToString()
    let v532 : string = v531 v0
    let v535 : System.Guid = System.Guid $"{v438}{v530}{v532.[v438.Length + v530.Length..]}"
    let _v2 = v535 
    #endif
#else
    let v536 : string = method96()
    let v537 : (string -> string) = v1.ToString
    let v538 : string = v537 v536
    let v541 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v542 : string = "0i64.into()"
    let v543 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v542 
    let _v541 = v543 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v544 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v544 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v547 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v547 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v550 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v550 
    #endif
#if FABLE_COMPILER_PYTHON
    let v553 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v553 
    #endif
#else
    let v556 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v541 = v556 
    #endif
    let v557 : System.TimeZoneInfo = _v541 
    let v562 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v563 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v564 : System.TimeSpan = v563 ()
    let _v562 = v564 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v567 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v568 : System.TimeSpan = v567 ()
    let _v562 = v568 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v571 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v572 : System.TimeSpan = v571 ()
    let _v562 = v572 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v575 : US10 = US10_0
    let v576 : US11 = US11_3(v575)
    let v577 : string = $"date_time.get_utc_offset / target: {v576}"
    let v578 : System.TimeSpan = failwith<System.TimeSpan> v577
    let _v562 = v578 
    #endif
#if FABLE_COMPILER_PYTHON
    let v579 : US10 = US10_0
    let v580 : US11 = US11_4(v579)
    let v581 : string = $"date_time.get_utc_offset / target: {v580}"
    let v582 : System.TimeSpan = failwith<System.TimeSpan> v581
    let _v562 = v582 
    #endif
#else
    let v583 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v584 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v585 : string = "0i64.into()"
    let v586 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v585 
    let _v584 = v586 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v587 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v587 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v590 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v590 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v593 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v593 
    #endif
#if FABLE_COMPILER_PYTHON
    let v596 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v596 
    #endif
#else
    let v599 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v584 = v599 
    #endif
    let v600 : System.TimeZoneInfo = _v584 
    let v605 : (System.DateTime -> System.TimeSpan) = v583 v600
    let v606 : System.TimeSpan = v605 v1
    let _v562 = v606 
    #endif
    let v607 : System.TimeSpan = _v562 
    let v613 : (System.TimeSpan -> int32) = _.Hours
    let v614 : int32 = v613 v607
    let v617 : bool = v614 > 0
    let v618 : uint8 =
        if v617 then
            1uy
        else
            0uy
    let v619 : string = method97()
    let v620 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v621 : string = v607.ToString v619 
    let _v620 = v621 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v622 : string = v607.ToString v619 
    let _v620 = v622 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v623 : string = v607.ToString v619 
    let _v620 = v623 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v624 : string = v607.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v620 = v624 
    #endif
#if FABLE_COMPILER_PYTHON
    let v625 : string = v607.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v620 = v625 
    #endif
#else
    let v626 : string = v607.ToString v619 
    let _v620 = v626 
    #endif
    let v627 : string = _v620 
    let v630 : string = $"{v618}{v627}"
    let v631 : (System.Guid -> string) = _.ToString()
    let v632 : string = v631 v0
    let v635 : System.Guid = System.Guid $"{v538}{v630}{v632.[v538.Length + v630.Length..]}"
    let _v2 = v635 
    #endif
    let v636 : System.Guid = _v2 
    v636
and method98 (v0 : string, v1 : string) : unit =
    let v2 : bool = method21(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method30(v0)
        ()
    let v5 : string = method26(v1)
    let v6 : bool = method21(v5)
    let v7 : bool = v6 = false
    if v7 then
        let v8 : System.IDisposable = method30(v5)
        ()
    let v9 : bool = method21(v1)
    let v14 : bool =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v10 
            let v12 : string = "v11.is_err()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
            v13
        else
            false
    if v14 then
        let v15 : bool = true
        method34(v15, v1)
    let v16 : bool = method21(v1)
    let v17 : bool = v16 = false
    if v17 then
        let v18 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v19 : bool = true
        let mutable _v19 : unit option = None 
        
#if _FREEBSD
        let v20 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v20 
        () 
        #endif
#if _LINUX
        let v21 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v21 
        () 
        #endif
#if _OSX
        let v22 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v22 
        () 
        #endif
#if _WINDOWS
        let v23 : string = "std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v23 
        () 
        #endif
        |> fun x -> _v19 <- Some x
        match _v19 with Some x -> x | None -> failwith "runtime.run_platform / _v19=None"
        let _v18 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v18 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v18 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v18 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v18 = () 
        #endif
#else
        let v24 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        let _v18 = () 
        #endif
        _v18 
        ()
and closure105 () () : string =
    let v0 : string = "common.retry_fn' / loop"
    v0
and closure104 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : unit = ()
    let v6 : (unit -> unit) = closure2()
    let v7 : unit = (fun () -> v6 (); v5) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : int64 option) = State.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v6 (); v35) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : int64 option) = State.trace_state.Value
    let v64 : US0 = v52.l0
    let v65 : bool = v51.l0
    let v66 : bool = v65 = false
    let v69 : bool =
        if v66 then
            false
        else
            let v67 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v64
            let v68 : bool = 1 >= v67
            v68
    if v69 then
        let v70 : unit = ()
        let v71 : (unit -> unit) = closure7(v20)
        let v72 : unit = (fun () -> v71 (); v70) ()
        let v75 : unit = ()
        let v76 : unit = (fun () -> v6 (); v75) ()
        let struct (v89 : Mut0, v90 : Mut1, v91 : Mut2, v92 : Mut3, v93 : int64 option) = State.trace_state.Value
        let v104 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v105 : US3 option = None
        let _v105 = ref v105 
        let v106 : US3 option ref = _v105 
        let v107 : (US3 option -> US3 option ref) = closure8(v106)
        let v108 : unit = ()
        let v109 : (unit -> unit) = closure9(v93, v107)
        let v110 : unit = (fun () -> v109 (); v108) ()
        let v113 : US3 option = _v105.Value 
        let v124 : US3 = US3_1
        let v125 : US3 = v113 |> Option.defaultValue v124 
        let v165 : System.DateTime =
            match v125 with
            | US3_1 -> (* None *)
                let v161 : System.DateTime = System.DateTime.Now
                v161
            | US3_0(v129) -> (* Some *)
                let v130 : System.DateTime = System.DateTime.Now
                let v133 : (System.DateTime -> int64) = _.Ticks
                let v134 : int64 = v133 v130
                let v137 : int64 = v134 - v129
                let v138 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v139 : System.TimeSpan = v138 v137
                let v142 : (System.TimeSpan -> int32) = _.Hours
                let v143 : int32 = v142 v139
                let v146 : (System.TimeSpan -> int32) = _.Minutes
                let v147 : int32 = v146 v139
                let v150 : (System.TimeSpan -> int32) = _.Seconds
                let v151 : int32 = v150 v139
                let v154 : (System.TimeSpan -> int32) = _.Milliseconds
                let v155 : int32 = v154 v139
                let v158 : System.DateTime = System.DateTime (1, 1, 1, v143, v147, v151, v155)
                v158
        let v166 : string = method6()
        let v169 : (string -> string) = v165.ToString
        let v170 : string = v169 v166
        let _v104 = v170 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v173 : US3 option = None
        let _v173 = ref v173 
        let v174 : US3 option ref = _v173 
        let v175 : (US3 option -> US3 option ref) = closure8(v174)
        let v176 : unit = ()
        let v177 : (unit -> unit) = closure9(v93, v175)
        let v178 : unit = (fun () -> v177 (); v176) ()
        let v181 : US3 option = _v173.Value 
        let v192 : US3 = US3_1
        let v193 : US3 = v181 |> Option.defaultValue v192 
        let v233 : System.DateTime =
            match v193 with
            | US3_1 -> (* None *)
                let v229 : System.DateTime = System.DateTime.Now
                v229
            | US3_0(v197) -> (* Some *)
                let v198 : System.DateTime = System.DateTime.Now
                let v201 : (System.DateTime -> int64) = _.Ticks
                let v202 : int64 = v201 v198
                let v205 : int64 = v202 - v197
                let v206 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v207 : System.TimeSpan = v206 v205
                let v210 : (System.TimeSpan -> int32) = _.Hours
                let v211 : int32 = v210 v207
                let v214 : (System.TimeSpan -> int32) = _.Minutes
                let v215 : int32 = v214 v207
                let v218 : (System.TimeSpan -> int32) = _.Seconds
                let v219 : int32 = v218 v207
                let v222 : (System.TimeSpan -> int32) = _.Milliseconds
                let v223 : int32 = v222 v207
                let v226 : System.DateTime = System.DateTime (1, 1, 1, v211, v215, v219, v223)
                v226
        let v234 : string = method6()
        let v237 : (string -> string) = v233.ToString
        let v238 : string = v237 v234
        let _v104 = v238 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v241 : string = $"near_sdk::env::block_timestamp()"
        let v242 : uint64 = Fable.Core.RustInterop.emitRustExpr () v241 
        let v243 : US3 option = None
        let _v243 = ref v243 
        let v244 : US3 option ref = _v243 
        let v245 : (US3 option -> US3 option ref) = closure8(v244)
        let v246 : unit = ()
        let v247 : (unit -> unit) = closure9(v93, v245)
        let v248 : unit = (fun () -> v247 (); v246) ()
        let v251 : US3 option = _v243.Value 
        let v262 : US3 = US3_1
        let v263 : US3 = v251 |> Option.defaultValue v262 
        let v272 : uint64 =
            match v263 with
            | US3_1 -> (* None *)
                v242
            | US3_0(v267) -> (* Some *)
                let v268 : (int64 -> uint64) = uint64
                let v269 : uint64 = v268 v267
                let v270 : uint64 = v242 - v269
                v270
        let v273 : uint64 = v272 / 1000000000UL
        let v274 : uint64 = v273 % 60UL
        let v275 : uint64 = v273 / 60UL
        let v276 : uint64 = v275 % 60UL
        let v277 : uint64 = v273 / 3600UL
        let v278 : uint64 = v277 % 24UL
        let v279 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v280 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v278, v276, v274) v279 
        let v281 : string = "fable_library_rust::String_::fromString($0)"
        let v282 : string = Fable.Core.RustInterop.emitRustExpr v280 v281 
        let _v104 = v282 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v283 : US3 option = None
        let _v283 = ref v283 
        let v284 : US3 option ref = _v283 
        let v285 : (US3 option -> US3 option ref) = closure8(v284)
        let v286 : unit = ()
        let v287 : (unit -> unit) = closure9(v93, v285)
        let v288 : unit = (fun () -> v287 (); v286) ()
        let v291 : US3 option = _v283.Value 
        let v302 : US3 = US3_1
        let v303 : US3 = v291 |> Option.defaultValue v302 
        let v343 : System.DateTime =
            match v303 with
            | US3_1 -> (* None *)
                let v339 : System.DateTime = System.DateTime.Now
                v339
            | US3_0(v307) -> (* Some *)
                let v308 : System.DateTime = System.DateTime.Now
                let v311 : (System.DateTime -> int64) = _.Ticks
                let v312 : int64 = v311 v308
                let v315 : int64 = v312 - v307
                let v316 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v317 : System.TimeSpan = v316 v315
                let v320 : (System.TimeSpan -> int32) = _.Hours
                let v321 : int32 = v320 v317
                let v324 : (System.TimeSpan -> int32) = _.Minutes
                let v325 : int32 = v324 v317
                let v328 : (System.TimeSpan -> int32) = _.Seconds
                let v329 : int32 = v328 v317
                let v332 : (System.TimeSpan -> int32) = _.Milliseconds
                let v333 : int32 = v332 v317
                let v336 : System.DateTime = System.DateTime (1, 1, 1, v321, v325, v329, v333)
                v336
        let v344 : string = method7()
        let v347 : (string -> string) = v343.ToString
        let v348 : string = v347 v344
        let _v104 = v348 
        #endif
#if FABLE_COMPILER_PYTHON
        let v351 : US3 option = None
        let _v351 = ref v351 
        let v352 : US3 option ref = _v351 
        let v353 : (US3 option -> US3 option ref) = closure8(v352)
        let v354 : unit = ()
        let v355 : (unit -> unit) = closure9(v93, v353)
        let v356 : unit = (fun () -> v355 (); v354) ()
        let v359 : US3 option = _v351.Value 
        let v370 : US3 = US3_1
        let v371 : US3 = v359 |> Option.defaultValue v370 
        let v411 : System.DateTime =
            match v371 with
            | US3_1 -> (* None *)
                let v407 : System.DateTime = System.DateTime.Now
                v407
            | US3_0(v375) -> (* Some *)
                let v376 : System.DateTime = System.DateTime.Now
                let v379 : (System.DateTime -> int64) = _.Ticks
                let v380 : int64 = v379 v376
                let v383 : int64 = v380 - v375
                let v384 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v385 : System.TimeSpan = v384 v383
                let v388 : (System.TimeSpan -> int32) = _.Hours
                let v389 : int32 = v388 v385
                let v392 : (System.TimeSpan -> int32) = _.Minutes
                let v393 : int32 = v392 v385
                let v396 : (System.TimeSpan -> int32) = _.Seconds
                let v397 : int32 = v396 v385
                let v400 : (System.TimeSpan -> int32) = _.Milliseconds
                let v401 : int32 = v400 v385
                let v404 : System.DateTime = System.DateTime (1, 1, 1, v389, v393, v397, v401)
                v404
        let v412 : string = method7()
        let v415 : (string -> string) = v411.ToString
        let v416 : string = v415 v412
        let _v104 = v416 
        #endif
#else
        let v419 : US3 option = None
        let _v419 = ref v419 
        let v420 : US3 option ref = _v419 
        let v421 : (US3 option -> US3 option ref) = closure8(v420)
        let v422 : unit = ()
        let v423 : (unit -> unit) = closure9(v93, v421)
        let v424 : unit = (fun () -> v423 (); v422) ()
        let v427 : US3 option = _v419.Value 
        let v438 : US3 = US3_1
        let v439 : US3 = v427 |> Option.defaultValue v438 
        let v479 : System.DateTime =
            match v439 with
            | US3_1 -> (* None *)
                let v475 : System.DateTime = System.DateTime.Now
                v475
            | US3_0(v443) -> (* Some *)
                let v444 : System.DateTime = System.DateTime.Now
                let v447 : (System.DateTime -> int64) = _.Ticks
                let v448 : int64 = v447 v444
                let v451 : int64 = v448 - v443
                let v452 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v453 : System.TimeSpan = v452 v451
                let v456 : (System.TimeSpan -> int32) = _.Hours
                let v457 : int32 = v456 v453
                let v460 : (System.TimeSpan -> int32) = _.Minutes
                let v461 : int32 = v460 v453
                let v464 : (System.TimeSpan -> int32) = _.Seconds
                let v465 : int32 = v464 v453
                let v468 : (System.TimeSpan -> int32) = _.Milliseconds
                let v469 : int32 = v468 v453
                let v472 : System.DateTime = System.DateTime (1, 1, 1, v457, v461, v465, v469)
                v472
        let v480 : string = method7()
        let v483 : (string -> string) = v479.ToString
        let v484 : string = v483 v480
        let _v104 = v484 
        #endif
        let v487 : string = _v104 
        
        
        
        
        
        let v557 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v558 : string = method8()
        let _v557 = v558 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v559 : string = method8()
        let _v557 = v559 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v560 : string = method8()
        let _v557 = v560 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v561 : string = method9()
        let _v557 = v561 
        #endif
#if FABLE_COMPILER_PYTHON
        let v562 : string = method9()
        let _v557 = v562 
        #endif
#else
        let v563 : string = method9()
        let _v557 = v563 
        #endif
        let v564 : string = _v557 
        let v569 : string = method10()
        let v570 : Mut4 = {l0 = v569} : Mut4
        let v571 : US0 = US0_0
        let v572 : string = $"%A{v571}"
        let v576 : string = $"{v572}"
        let v579 : unit = ()
        let v580 : (unit -> unit) = closure10(v570, v576)
        let v581 : unit = (fun () -> v580 (); v579) ()
        let v584 : string = v570.l0
        let v585 : (string []) = v584.Split v564 
        let v588 : string = v585.[int 0]
        let v591 : string = method10()
        let v592 : Mut4 = {l0 = v591} : Mut4
        let v593 : US0 = US0_1
        let v594 : string = $"%A{v593}"
        let v598 : string = $"{v594}"
        let v601 : unit = ()
        let v602 : (unit -> unit) = closure10(v592, v598)
        let v603 : unit = (fun () -> v602 (); v601) ()
        let v606 : string = v592.l0
        let v607 : bool = v606.StartsWith v588 
        let v613 : US1 =
            if v607 then
                let v610 : string = "Verbose"
                US1_0(v610)
            else
                US1_1
        let v619 : US1 =
            match v613 with
            | US1_1 -> (* None *)
                let v616 : string = "Debug"
                US1_0(v616)
            | US1_0(v614) -> (* Some *)
                US1_0(v614)
        let v623 : string =
            match v619 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v620) -> (* Some *)
                v620
        let v624 : (unit -> string) = v623.ToLower
        let v625 : string = v624 ()
        let v628 : string = v625.PadLeft (7, ' ')
        let v642 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v643 : string = "inline_colorization::color_bright_blue"
        let v644 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v643 
        let v645 : string = "&*$0"
        let v646 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v628 v645 
        let v647 : string = "inline_colorization::color_reset"
        let v648 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "\"{v644}{v646}{v648}\""
        let v650 : string = @$"format!(" + v649 + ")"
        let v651 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v650 
        let v652 : string = "fable_library_rust::String_::fromString($0)"
        let v653 : string = Fable.Core.RustInterop.emitRustExpr v651 v652 
        let _v642 = v653 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v654 : string = "inline_colorization::color_bright_blue"
        let v655 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v654 
        let v656 : string = "&*$0"
        let v657 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v628 v656 
        let v658 : string = "inline_colorization::color_reset"
        let v659 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "\"{v655}{v657}{v659}\""
        let v661 : string = @$"format!(" + v660 + ")"
        let v662 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v661 
        let v663 : string = "fable_library_rust::String_::fromString($0)"
        let v664 : string = Fable.Core.RustInterop.emitRustExpr v662 v663 
        let _v642 = v664 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v665 : string = "inline_colorization::color_bright_blue"
        let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v665 
        let v667 : string = "&*$0"
        let v668 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v628 v667 
        let v669 : string = "inline_colorization::color_reset"
        let v670 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "\"{v666}{v668}{v670}\""
        let v672 : string = @$"format!(" + v671 + ")"
        let v673 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v672 
        let v674 : string = "fable_library_rust::String_::fromString($0)"
        let v675 : string = Fable.Core.RustInterop.emitRustExpr v673 v674 
        let _v642 = v675 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v676 : string = "\u001b[94m"
        let v677 : string = method11()
        let v678 : string = v676 + v628 
        let v679 : string = v678 + v677 
        let _v642 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v680 : string = "\u001b[94m"
        let v681 : string = method11()
        let v682 : string = v680 + v628 
        let v683 : string = v682 + v681 
        let _v642 = v683 
        #endif
#else
        let v684 : string = "\u001b[94m"
        let v685 : string = method11()
        let v686 : string = v684 + v628 
        let v687 : string = v686 + v685 
        let _v642 = v687 
        #endif
        let v688 : string = _v642 
        let v694 : int64 = v89.l0
        let v695 : string = $"{v1}/{v0}"
        let v696 : string = method10()
        let v697 : Mut4 = {l0 = v696} : Mut4
        let v698 : string = "{ "
        let v699 : string = $"{v698}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v697, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = "is_error"
        let v708 : string = $"{v707}"
        let v711 : unit = ()
        let v712 : (unit -> unit) = closure10(v697, v708)
        let v713 : unit = (fun () -> v712 (); v711) ()
        let v716 : string = " = "
        let v717 : string = $"{v716}"
        let v720 : unit = ()
        let v721 : (unit -> unit) = closure10(v697, v717)
        let v722 : unit = (fun () -> v721 (); v720) ()
        let v727 : string =
            if v4 then
                let v725 : string = "true"
                v725
            else
                let v726 : string = "false"
                v726
        let v728 : string = $"{v727}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure10(v697, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = "; "
        let v737 : string = $"{v736}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure10(v697, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = "retry"
        let v746 : string = $"{v745}"
        let v749 : unit = ()
        let v750 : (unit -> unit) = closure10(v697, v746)
        let v751 : unit = (fun () -> v750 (); v749) ()
        let v754 : string = $"{v716}"
        let v757 : unit = ()
        let v758 : (unit -> unit) = closure10(v697, v754)
        let v759 : unit = (fun () -> v758 (); v757) ()
        let v762 : string = $"{v695}"
        let v765 : unit = ()
        let v766 : (unit -> unit) = closure10(v697, v762)
        let v767 : unit = (fun () -> v766 (); v765) ()
        let v770 : string = $"{v736}"
        let v773 : unit = ()
        let v774 : (unit -> unit) = closure10(v697, v770)
        let v775 : unit = (fun () -> v774 (); v773) ()
        let v778 : string = "result"
        let v779 : string = $"{v778}"
        let v782 : unit = ()
        let v783 : (unit -> unit) = closure10(v697, v779)
        let v784 : unit = (fun () -> v783 (); v782) ()
        let v787 : string = $"{v716}"
        let v790 : unit = ()
        let v791 : (unit -> unit) = closure10(v697, v787)
        let v792 : unit = (fun () -> v791 (); v790) ()
        let v795 : string = $"{v2}"
        let v798 : unit = ()
        let v799 : (unit -> unit) = closure10(v697, v795)
        let v800 : unit = (fun () -> v799 (); v798) ()
        let v803 : string = ", "
        let v804 : string = $"{v803}"
        let v807 : unit = ()
        let v808 : (unit -> unit) = closure10(v697, v804)
        let v809 : unit = (fun () -> v808 (); v807) ()
        let v812 : string = $"{v3}"
        let v815 : unit = ()
        let v816 : (unit -> unit) = closure10(v697, v812)
        let v817 : unit = (fun () -> v816 (); v815) ()
        let v820 : string = " }"
        let v821 : string = $"{v820}"
        let v824 : unit = ()
        let v825 : (unit -> unit) = closure10(v697, v821)
        let v826 : unit = (fun () -> v825 (); v824) ()
        let v829 : string = v697.l0
        let v830 : (unit -> string) = closure105()
        let v831 : string = $"{v487} {v688} #{v694} %s{v830 ()} / {v829}"
        let v834 : char list = []
        let v835 : (char list -> (char [])) = List.toArray
        let v836 : (char []) = v835 v834
        let v839 : string = v831.TrimStart v836 
        let v857 : char list = []
        let v858 : char list = '/' :: v857 
        let v861 : char list = ' ' :: v858 
        let v864 : (char list -> (char [])) = List.toArray
        let v865 : (char []) = v864 v861
        let v868 : string = v839.TrimEnd v865 
        let v886 : (string -> unit) = closure12()
        let v887 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v888 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v868 v888 
        let _v887 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v889 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v868 v889 
        let _v887 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v890 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v868 v890 
        let _v887 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v886 v868
        let _v887 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v886 v868
        let _v887 = () 
        #endif
#else
        v886 v868
        let _v887 = () 
        #endif
        _v887 
        let v891 : (string -> unit) = v21.l0
        v891 v868
and method101 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method42(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US36 =
        if v11 then
            US36_0(v9, v10)
        else
            US36_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US36_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US36_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure104(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v918 : uint8 = v8 + 1uy
        method101(v0, v1, v2, v3, v4, v5, v6, v7, v918)
and method100 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method101(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method99 (v0 : US33, v1 : string, v2 : string, v3 : string, v4 : US12) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "cfg!(windows)"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "cfg!(windows)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : US10 = US10_0
    let v18 : US11 = US11_3(v17)
    let v19 : string = $"platform.is_windows / target: {v18}"
    let v20 : bool = failwith<bool> v19
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : US10 = US10_0
    let v22 : US11 = US11_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _v10 = v24 
    #endif
#else
    let v25 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v26 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v27 : bool = v26 v25
    let _v10 = v27 
    #endif
    let v28 : bool = _v10 
    let v36 : string =
        if v28 then
            let v34 : string = "_WINDOWS"
            v34
        else
            let v35 : string = "_LINUX"
            v35
    let v37 : string = $" --define {v36}"
    let v185 : string =
        match v0 with
        | US33_1 -> (* None *)
            let v183 : string = ""
            v183
        | US33_0(v38) -> (* Some *)
            let v39 : string = Unchecked.defaultof<_>
            let v42 : string = Unchecked.defaultof<_>
            let v47 : bool =
                match v38 with
                | US34_0(v45) -> (* Wasm *)
                    let v46 : bool = v39 = v45
                    v46
                | _ ->
                    false
            let v105 : US1 =
                if v47 then
                    let v48 : string = "Wasm"
                    US1_0(v48)
                else
                    let v50 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v51 : string = method8()
                    let _v50 = v51 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v52 : string = method8()
                    let _v50 = v52 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v53 : string = method8()
                    let _v50 = v53 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v54 : string = method9()
                    let _v50 = v54 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v55 : string = method9()
                    let _v50 = v55 
                    #endif
#else
                    let v56 : string = method9()
                    let _v50 = v56 
                    #endif
                    let v57 : string = _v50 
                    let v62 : string = method10()
                    let v63 : Mut4 = {l0 = v62} : Mut4
                    let v64 : US34 = US34_0(v39)
                    let v65 : string = $"%A{v64}"
                    let v69 : string = $"{v65}"
                    let v72 : unit = ()
                    let v73 : (unit -> unit) = closure10(v63, v69)
                    let v74 : unit = (fun () -> v73 (); v72) ()
                    let v77 : string = v63.l0
                    let v78 : (string []) = v77.Split v57 
                    let v81 : string = v78.[int 0]
                    let v84 : string = method10()
                    let v85 : Mut4 = {l0 = v84} : Mut4
                    let v86 : string = $"%A{v38}"
                    let v89 : string = $"{v86}"
                    let v92 : unit = ()
                    let v93 : (unit -> unit) = closure10(v85, v89)
                    let v94 : unit = (fun () -> v93 (); v92) ()
                    let v97 : string = v85.l0
                    let v98 : bool = v97.StartsWith v81 
                    if v98 then
                        let v101 : string = "Wasm"
                        US1_0(v101)
                    else
                        US1_1
            let v175 : US1 =
                match v105 with
                | US1_1 -> (* None *)
                    let v110 : bool =
                        match v38 with
                        | US34_1(v108) -> (* Contract *)
                            let v109 : bool = v42 = v108
                            v109
                        | _ ->
                            false
                    let v168 : US1 =
                        if v110 then
                            let v111 : string = "Contract"
                            US1_0(v111)
                        else
                            let v113 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v114 : string = method8()
                            let _v113 = v114 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v115 : string = method8()
                            let _v113 = v115 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v116 : string = method8()
                            let _v113 = v116 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v117 : string = method9()
                            let _v113 = v117 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v118 : string = method9()
                            let _v113 = v118 
                            #endif
#else
                            let v119 : string = method9()
                            let _v113 = v119 
                            #endif
                            let v120 : string = _v113 
                            let v125 : string = method10()
                            let v126 : Mut4 = {l0 = v125} : Mut4
                            let v127 : US34 = US34_1(v42)
                            let v128 : string = $"%A{v127}"
                            let v132 : string = $"{v128}"
                            let v135 : unit = ()
                            let v136 : (unit -> unit) = closure10(v126, v132)
                            let v137 : unit = (fun () -> v136 (); v135) ()
                            let v140 : string = v126.l0
                            let v141 : (string []) = v140.Split v120 
                            let v144 : string = v141.[int 0]
                            let v147 : string = method10()
                            let v148 : Mut4 = {l0 = v147} : Mut4
                            let v149 : string = $"%A{v38}"
                            let v152 : string = $"{v149}"
                            let v155 : unit = ()
                            let v156 : (unit -> unit) = closure10(v148, v152)
                            let v157 : unit = (fun () -> v156 (); v155) ()
                            let v160 : string = v148.l0
                            let v161 : bool = v160.StartsWith v144 
                            if v161 then
                                let v164 : string = "Contract"
                                US1_0(v164)
                            else
                                US1_1
                    match v168 with
                    | US1_1 -> (* None *)
                        US1_1
                    | US1_0(v169) -> (* Some *)
                        US1_0(v169)
                | US1_0(v106) -> (* Some *)
                    US1_0(v106)
            let v179 : string =
                match v175 with
                | US1_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US1_0(v176) -> (* Some *)
                    v176
            let v180 : (unit -> string) = v179.ToUpper
            let v181 : string = v180 ()
            let v182 : string = $" --define {v181}"
            v182
    let v186 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v37}{v185}"
    let v192 : Result<string, string> =
        match v4 with
        | US12_1(v189) -> (* Error *)
            let v190 : Result<string, string> = Error v189 
            v190
        | US12_0(v187) -> (* Ok *)
            let v188 : Result<string, string> = Ok v187 
            v188
    let v193 : string = "v192.ok()"
    let v194 : string option = Fable.Core.RustInterop.emitRustExpr () v193 
    let v195 : uint8 = 3uy
    let v196 : bool = true
    method100(v195, v186, v5, v6, v7, v8, v196, v194)
and closure107 () () : string =
    let v0 : string = "spiral_builder.process_rust / dotnet fable error"
    v0
and closure106 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_4
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v799 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v614 : string = method8()
                let _v613 = v614 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v615 : string = method8()
                let _v613 = v615 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v616 : string = method8()
                let _v613 = v616 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v617 : string = method9()
                let _v613 = v617 
                #endif
#if FABLE_COMPILER_PYTHON
                let v618 : string = method9()
                let _v613 = v618 
                #endif
#else
                let v619 : string = method9()
                let _v613 = v619 
                #endif
                let v620 : string = _v613 
                let v625 : string = method10()
                let v626 : Mut4 = {l0 = v625} : Mut4
                let v627 : US0 = US0_1
                let v628 : string = $"%A{v627}"
                let v632 : string = $"{v628}"
                let v635 : unit = ()
                let v636 : (unit -> unit) = closure10(v626, v632)
                let v637 : unit = (fun () -> v636 (); v635) ()
                let v640 : string = v626.l0
                let v641 : (string []) = v640.Split v620 
                let v644 : string = v641.[int 0]
                let v647 : string = method10()
                let v648 : Mut4 = {l0 = v647} : Mut4
                let v649 : US0 = US0_4
                let v650 : string = $"%A{v649}"
                let v654 : string = $"{v650}"
                let v657 : unit = ()
                let v658 : (unit -> unit) = closure10(v648, v654)
                let v659 : unit = (fun () -> v658 (); v657) ()
                let v662 : string = v648.l0
                let v663 : bool = v662.StartsWith v644 
                let v669 : US1 =
                    if v663 then
                        let v666 : string = "Debug"
                        US1_0(v666)
                    else
                        US1_1
                match v669 with
                | US1_1 -> (* None *)
                    let v672 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v673 : string = method8()
                    let _v672 = v673 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v674 : string = method8()
                    let _v672 = v674 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v675 : string = method8()
                    let _v672 = v675 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v676 : string = method9()
                    let _v672 = v676 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v677 : string = method9()
                    let _v672 = v677 
                    #endif
#else
                    let v678 : string = method9()
                    let _v672 = v678 
                    #endif
                    let v679 : string = _v672 
                    let v684 : string = method10()
                    let v685 : Mut4 = {l0 = v684} : Mut4
                    let v686 : US0 = US0_2
                    let v687 : string = $"%A{v686}"
                    let v691 : string = $"{v687}"
                    let v694 : unit = ()
                    let v695 : (unit -> unit) = closure10(v685, v691)
                    let v696 : unit = (fun () -> v695 (); v694) ()
                    let v699 : string = v685.l0
                    let v700 : (string []) = v699.Split v679 
                    let v703 : string = v700.[int 0]
                    let v706 : string = method10()
                    let v707 : Mut4 = {l0 = v706} : Mut4
                    let v708 : US0 = US0_4
                    let v709 : string = $"%A{v708}"
                    let v713 : string = $"{v709}"
                    let v716 : unit = ()
                    let v717 : (unit -> unit) = closure10(v707, v713)
                    let v718 : unit = (fun () -> v717 (); v716) ()
                    let v721 : string = v707.l0
                    let v722 : bool = v721.StartsWith v703 
                    let v728 : US1 =
                        if v722 then
                            let v725 : string = "Info"
                            US1_0(v725)
                        else
                            US1_1
                    match v728 with
                    | US1_1 -> (* None *)
                        let v731 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v732 : string = method8()
                        let _v731 = v732 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v733 : string = method8()
                        let _v731 = v733 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v734 : string = method8()
                        let _v731 = v734 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v735 : string = method9()
                        let _v731 = v735 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v736 : string = method9()
                        let _v731 = v736 
                        #endif
#else
                        let v737 : string = method9()
                        let _v731 = v737 
                        #endif
                        let v738 : string = _v731 
                        let v743 : string = method10()
                        let v744 : Mut4 = {l0 = v743} : Mut4
                        let v745 : US0 = US0_3
                        let v746 : string = $"%A{v745}"
                        let v750 : string = $"{v746}"
                        let v753 : unit = ()
                        let v754 : (unit -> unit) = closure10(v744, v750)
                        let v755 : unit = (fun () -> v754 (); v753) ()
                        let v758 : string = v744.l0
                        let v759 : (string []) = v758.Split v738 
                        let v762 : string = v759.[int 0]
                        let v765 : string = method10()
                        let v766 : Mut4 = {l0 = v765} : Mut4
                        let v767 : US0 = US0_4
                        let v768 : string = $"%A{v767}"
                        let v772 : string = $"{v768}"
                        let v775 : unit = ()
                        let v776 : (unit -> unit) = closure10(v766, v772)
                        let v777 : unit = (fun () -> v776 (); v775) ()
                        let v780 : string = v766.l0
                        let v781 : bool = v780.StartsWith v762 
                        let v787 : US1 =
                            if v781 then
                                let v784 : string = "Warning"
                                US1_0(v784)
                            else
                                US1_1
                        match v787 with
                        | US1_1 -> (* None *)
                            let v790 : string = "Critical"
                            US1_0(v790)
                        | US1_0(v788) -> (* Some *)
                            US1_0(v788)
                    | US1_0(v729) -> (* Some *)
                        US1_0(v729)
                | US1_0(v670) -> (* Some *)
                    US1_0(v670)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v803 : string =
            match v799 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v800) -> (* Some *)
                v800
        let v804 : (unit -> string) = v803.ToLower
        let v805 : string = v804 ()
        let v808 : string = v805.PadLeft (7, ' ')
        let v822 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v823 : string = "inline_colorization::color_bright_red"
        let v824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v823 
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v825 
        let v827 : string = "inline_colorization::color_reset"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "\"{v824}{v826}{v828}\""
        let v830 : string = @$"format!(" + v829 + ")"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v830 
        let v832 : string = "fable_library_rust::String_::fromString($0)"
        let v833 : string = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let _v822 = v833 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = "inline_colorization::color_bright_red"
        let v835 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "&*$0"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v836 
        let v838 : string = "inline_colorization::color_reset"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v838 
        let v840 : string = "\"{v835}{v837}{v839}\""
        let v841 : string = @$"format!(" + v840 + ")"
        let v842 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v841 
        let v843 : string = "fable_library_rust::String_::fromString($0)"
        let v844 : string = Fable.Core.RustInterop.emitRustExpr v842 v843 
        let _v822 = v844 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v845 : string = "inline_colorization::color_bright_red"
        let v846 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v845 
        let v847 : string = "&*$0"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v847 
        let v849 : string = "inline_colorization::color_reset"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v849 
        let v851 : string = "\"{v846}{v848}{v850}\""
        let v852 : string = @$"format!(" + v851 + ")"
        let v853 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v852 
        let v854 : string = "fable_library_rust::String_::fromString($0)"
        let v855 : string = Fable.Core.RustInterop.emitRustExpr v853 v854 
        let _v822 = v855 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v856 : string = "\u001b[91m"
        let v857 : string = method11()
        let v858 : string = v856 + v808 
        let v859 : string = v858 + v857 
        let _v822 = v859 
        #endif
#if FABLE_COMPILER_PYTHON
        let v860 : string = "\u001b[91m"
        let v861 : string = method11()
        let v862 : string = v860 + v808 
        let v863 : string = v862 + v861 
        let _v822 = v863 
        #endif
#else
        let v864 : string = "\u001b[91m"
        let v865 : string = method11()
        let v866 : string = v864 + v808 
        let v867 : string = v866 + v865 
        let _v822 = v867 
        #endif
        let v868 : string = _v822 
        let v874 : int64 = v86.l0
        let v875 : string = method10()
        let v876 : Mut4 = {l0 = v875} : Mut4
        let v877 : string = "{ "
        let v878 : string = $"{v877}"
        let v881 : unit = ()
        let v882 : (unit -> unit) = closure10(v876, v878)
        let v883 : unit = (fun () -> v882 (); v881) ()
        let v886 : string = "exit_code"
        let v887 : string = $"{v886}"
        let v890 : unit = ()
        let v891 : (unit -> unit) = closure10(v876, v887)
        let v892 : unit = (fun () -> v891 (); v890) ()
        let v895 : string = " = "
        let v896 : string = $"{v895}"
        let v899 : unit = ()
        let v900 : (unit -> unit) = closure10(v876, v896)
        let v901 : unit = (fun () -> v900 (); v899) ()
        let v904 : string = $"{v1}"
        let v907 : unit = ()
        let v908 : (unit -> unit) = closure10(v876, v904)
        let v909 : unit = (fun () -> v908 (); v907) ()
        let v912 : string = "; "
        let v913 : string = $"{v912}"
        let v916 : unit = ()
        let v917 : (unit -> unit) = closure10(v876, v913)
        let v918 : unit = (fun () -> v917 (); v916) ()
        let v921 : string = "dotnet_fable_result"
        let v922 : string = $"{v921}"
        let v925 : unit = ()
        let v926 : (unit -> unit) = closure10(v876, v922)
        let v927 : unit = (fun () -> v926 (); v925) ()
        let v930 : string = $"{v895}"
        let v933 : unit = ()
        let v934 : (unit -> unit) = closure10(v876, v930)
        let v935 : unit = (fun () -> v934 (); v933) ()
        let v938 : string = $"{v0}"
        let v941 : unit = ()
        let v942 : (unit -> unit) = closure10(v876, v938)
        let v943 : unit = (fun () -> v942 (); v941) ()
        let v946 : string = " }"
        let v947 : string = $"{v946}"
        let v950 : unit = ()
        let v951 : (unit -> unit) = closure10(v876, v947)
        let v952 : unit = (fun () -> v951 (); v950) ()
        let v955 : string = v876.l0
        let v956 : (unit -> string) = closure107()
        let v957 : string = $"{v484} {v868} #{v874} %s{v956 ()} / {v955}"
        let v960 : char list = []
        let v961 : (char list -> (char [])) = List.toArray
        let v962 : (char []) = v961 v960
        let v965 : string = v957.TrimStart v962 
        let v983 : char list = []
        let v984 : char list = '/' :: v983 
        let v987 : char list = ' ' :: v984 
        let v990 : (char list -> (char [])) = List.toArray
        let v991 : (char []) = v990 v987
        let v994 : string = v965.TrimEnd v991 
        let v1012 : (string -> unit) = closure12()
        let v1013 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1014 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1015 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1015 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1016 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1016 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1012 v994
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1012 v994
        let _v1013 = () 
        #endif
#else
        v1012 v994
        let _v1013 = () 
        #endif
        _v1013 
        let v1017 : (string -> unit) = v18.l0
        v1017 v994
and closure108 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "near-sdk"
    let v4 : bool = v2.Contains v3 
    v4
and method102 () : (std_string_String -> bool) =
    closure108()
and method103 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method104 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method105 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and closure109 (v0 : US37 option ref) (v1 : US37 option) : US37 option ref =
    v0.Value <- v1 
    v0
and closure110 (v0 : std_collections_HashMap<string, string> option, v1 : (US37 option -> US37 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_collections_HashMap<string, string> = x
    let v3 : US37 = US37_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method107 () : string =
    let v0 : string = "a"
    v0
and closure111 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 1 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_1
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v618 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : string = "Debug"
                US1_0(v615)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v622 : string =
            match v618 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v619) -> (* Some *)
                v619
        let v623 : (unit -> string) = v622.ToLower
        let v624 : string = v623 ()
        let v627 : string = v624.PadLeft (7, ' ')
        let v641 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v642 : string = "inline_colorization::color_bright_blue"
        let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v642 
        let v644 : string = "&*$0"
        let v645 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v627 v644 
        let v646 : string = "inline_colorization::color_reset"
        let v647 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v646 
        let v648 : string = "\"{v643}{v645}{v647}\""
        let v649 : string = @$"format!(" + v648 + ")"
        let v650 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v649 
        let v651 : string = "fable_library_rust::String_::fromString($0)"
        let v652 : string = Fable.Core.RustInterop.emitRustExpr v650 v651 
        let _v641 = v652 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v653 : string = "inline_colorization::color_bright_blue"
        let v654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v653 
        let v655 : string = "&*$0"
        let v656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v627 v655 
        let v657 : string = "inline_colorization::color_reset"
        let v658 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v657 
        let v659 : string = "\"{v654}{v656}{v658}\""
        let v660 : string = @$"format!(" + v659 + ")"
        let v661 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v660 
        let v662 : string = "fable_library_rust::String_::fromString($0)"
        let v663 : string = Fable.Core.RustInterop.emitRustExpr v661 v662 
        let _v641 = v663 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v664 : string = "inline_colorization::color_bright_blue"
        let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v664 
        let v666 : string = "&*$0"
        let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v627 v666 
        let v668 : string = "inline_colorization::color_reset"
        let v669 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v668 
        let v670 : string = "\"{v665}{v667}{v669}\""
        let v671 : string = @$"format!(" + v670 + ")"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v641 = v674 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v675 : string = "\u001b[94m"
        let v676 : string = method11()
        let v677 : string = v675 + v627 
        let v678 : string = v677 + v676 
        let _v641 = v678 
        #endif
#if FABLE_COMPILER_PYTHON
        let v679 : string = "\u001b[94m"
        let v680 : string = method11()
        let v681 : string = v679 + v627 
        let v682 : string = v681 + v680 
        let _v641 = v682 
        #endif
#else
        let v683 : string = "\u001b[94m"
        let v684 : string = method11()
        let v685 : string = v683 + v627 
        let v686 : string = v685 + v684 
        let _v641 = v686 
        #endif
        let v687 : string = _v641 
        let v693 : int64 = v88.l0
        let v694 : string = $"{v0}/{3uy}"
        let v695 : string = method10()
        let v696 : Mut4 = {l0 = v695} : Mut4
        let v697 : string = "{ "
        let v698 : string = $"{v697}"
        let v701 : unit = ()
        let v702 : (unit -> unit) = closure10(v696, v698)
        let v703 : unit = (fun () -> v702 (); v701) ()
        let v706 : string = "is_error"
        let v707 : string = $"{v706}"
        let v710 : unit = ()
        let v711 : (unit -> unit) = closure10(v696, v707)
        let v712 : unit = (fun () -> v711 (); v710) ()
        let v715 : string = " = "
        let v716 : string = $"{v715}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure10(v696, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v726 : string =
            if v3 then
                let v724 : string = "true"
                v724
            else
                let v725 : string = "false"
                v725
        let v727 : string = $"{v726}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure10(v696, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = "; "
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure10(v696, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = "retry"
        let v745 : string = $"{v744}"
        let v748 : unit = ()
        let v749 : (unit -> unit) = closure10(v696, v745)
        let v750 : unit = (fun () -> v749 (); v748) ()
        let v753 : string = $"{v715}"
        let v756 : unit = ()
        let v757 : (unit -> unit) = closure10(v696, v753)
        let v758 : unit = (fun () -> v757 (); v756) ()
        let v761 : string = $"{v694}"
        let v764 : unit = ()
        let v765 : (unit -> unit) = closure10(v696, v761)
        let v766 : unit = (fun () -> v765 (); v764) ()
        let v769 : string = $"{v735}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure10(v696, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = "result"
        let v778 : string = $"{v777}"
        let v781 : unit = ()
        let v782 : (unit -> unit) = closure10(v696, v778)
        let v783 : unit = (fun () -> v782 (); v781) ()
        let v786 : string = $"{v715}"
        let v789 : unit = ()
        let v790 : (unit -> unit) = closure10(v696, v786)
        let v791 : unit = (fun () -> v790 (); v789) ()
        let v794 : string = $"{v1}"
        let v797 : unit = ()
        let v798 : (unit -> unit) = closure10(v696, v794)
        let v799 : unit = (fun () -> v798 (); v797) ()
        let v802 : string = ", "
        let v803 : string = $"{v802}"
        let v806 : unit = ()
        let v807 : (unit -> unit) = closure10(v696, v803)
        let v808 : unit = (fun () -> v807 (); v806) ()
        let v811 : string = $"{v2}"
        let v814 : unit = ()
        let v815 : (unit -> unit) = closure10(v696, v811)
        let v816 : unit = (fun () -> v815 (); v814) ()
        let v819 : string = " }"
        let v820 : string = $"{v819}"
        let v823 : unit = ()
        let v824 : (unit -> unit) = closure10(v696, v820)
        let v825 : unit = (fun () -> v824 (); v823) ()
        let v828 : string = v696.l0
        let v829 : (unit -> string) = closure105()
        let v830 : string = $"{v486} {v687} #{v693} %s{v829 ()} / {v828}"
        let v833 : char list = []
        let v834 : (char list -> (char [])) = List.toArray
        let v835 : (char []) = v834 v833
        let v838 : string = v830.TrimStart v835 
        let v856 : char list = []
        let v857 : char list = '/' :: v856 
        let v860 : char list = ' ' :: v857 
        let v863 : (char list -> (char [])) = List.toArray
        let v864 : (char []) = v863 v860
        let v867 : string = v838.TrimEnd v864 
        let v885 : (string -> unit) = closure12()
        let v886 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v887 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v867 v887 
        let _v886 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v888 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v867 v888 
        let _v886 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v889 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v867 v889 
        let _v886 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v885 v867
        let _v886 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v885 v867
        let _v886 = () 
        #endif
#else
        v885 v867
        let _v886 = () 
        #endif
        _v886 
        let v890 : (string -> unit) = v20.l0
        v890 v867
and method106 (v0 : US12, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US12_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US12_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    let v15 : string = "v14.ok()"
    let v16 : string option = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : bool = true
    let struct (v18 : int32, v19 : string) = method42(v8, v3, v4, v5, v6, v17, v16)
    let v20 : string = "failed to load manifest for workspace member"
    let v21 : bool = v19.Contains v20 
    let v24 : bool = v21 = false
    let v193 : US36 =
        if v24 then
            let v25 : bool = v18 = 0
            if v25 then
                US36_0(v18, v19)
            else
                US36_1(v18, v19)
        else
            let v29 : string = $"regex::Regex::new(&$0)"
            let v30 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v31 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v30 v29 
            let v32 : string = "$0.unwrap()"
            let v33 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "&*$0"
            let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19 v34 
            let v36 : string = "String::from($0)"
            let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let v38 : string = "true; let _capture_move = (move || { //"
            let v39 : bool = Fable.Core.RustInterop.emitRustExpr () v38 
            let v40 : string = "Box::new($0)"
            let v41 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v37 v40 
            let v42 : string = "Box::leak($0)"
            let v43 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = $"v33.captures_iter(v43)"
            let v45 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v44 
            let v46 : string = "true; let _regex_captures : Vec<_> = v45.map(|x| { //"
            let v47 : bool = Fable.Core.RustInterop.emitRustExpr () v46 
            let v48 : string = $"x"
            let v49 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v48 
            let v50 : string = "Box::new($0)"
            let v51 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v49 v50 
            let v52 : string = "Box::leak($0)"
            let v53 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v51 v52 
            let v54 : string = $"$0.capture_names()"
            let v55 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v33 v54 
            let v56 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v55.map(|x| { //"
            let v57 : bool = Fable.Core.RustInterop.emitRustExpr () v56 
            let v58 : string = "x.unwrap_or(\"\").to_string().into()"
            let v59 : string = Fable.Core.RustInterop.emitRustExpr () v58 
            let v60 : string = "$0.clone()"
            let v61 : string = Fable.Core.RustInterop.emitRustExpr v59 v60 
            let v62 : string = $"v53.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v63 : string = Fable.Core.RustInterop.emitRustExpr v59 v62 
            let v64 : (string * string) = v61, v63 
            let v65 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v66 : bool = Fable.Core.RustInterop.emitRustExpr v64 v65 
            let v67 : string = "_regex_captures"
            let v68 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v67 
            let v69 : string = "true; $0 }).collect::<Vec<_>>()"
            let v70 : bool = Fable.Core.RustInterop.emitRustExpr v68 v69 
            let v71 : string = "_regex_captures"
            let v72 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v71 
            let v73 : string = "true; $0 })()"
            let v74 : bool = Fable.Core.RustInterop.emitRustExpr v72 v73 
            let v75 : string = "_capture_move"
            let v76 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v75 
            let v77 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v78 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v76 v77 
            let v79 : std_collections_HashMap<string, string> option = v78 |> Array.tryItem 0 
            let v80 : US37 option = None
            let _v80 = ref v80 
            let v81 : US37 option ref = _v80 
            let v82 : (US37 option -> US37 option ref) = closure109(v81)
            let v83 : unit = ()
            let v84 : (unit -> unit) = closure110(v79, v82)
            let v85 : unit = (fun () -> v84 (); v83) ()
            let v88 : US37 option = _v80.Value 
            let v99 : US37 = US37_1
            let v100 : US37 = v88 |> Option.defaultValue v99 
            let v135 : US38 =
                match v100 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v104) -> (* Some *)
                    let v105 : string = method107()
                    let v106 : string = "std::collections::HashMap::get(&$0, &v105).map(|x| x).cloned()"
                    let v107 : string option = Fable.Core.RustInterop.emitRustExpr v104 v106 
                    let v108 : US1 option = None
                    let _v108 = ref v108 
                    let v109 : US1 option ref = _v108 
                    let v110 : (US1 option -> US1 option ref) = closure3(v109)
                    let v111 : unit = ()
                    let v112 : (unit -> unit) = closure4(v107, v110)
                    let v113 : unit = (fun () -> v112 (); v111) ()
                    let v116 : US1 option = _v108.Value 
                    let v127 : US1 = US1_1
                    let v128 : US1 = v116 |> Option.defaultValue v127 
                    US38_0(v128)
            let v142 : US1 =
                match v135 with
                | US38_0(v136) -> (* Some *)
                    match v136 with
                    | US1_0(v137) -> (* Some *)
                        US1_0(v137)
                    | _ ->
                        US1_1
                | _ ->
                    US1_1
            match v142 with
            | US1_1 -> (* None *)
                US36_1(v18, v19)
            | US1_0(v144) -> (* Some *)
                let v145 : bool = method29(v144)
                let v146 : bool = v145 = false
                if v146 then
                    let v147 : string = method26(v144)
                    let v148 : System.IDisposable = method30(v147)
                    let v149 : System.DateTime = System.DateTime.Now
                    let v152 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v153 : System.Guid = v152 ()
                    let v156 : System.Guid = method94(v153, v149)
                    let v157 : (System.Guid -> string) = _.ToString()
                    let v158 : string = v157 v156
                    let v161 : string = $"[package]"
                    let v162 : string = $"name = \"spiral_builder_{v158}\""
                    let v163 : string = "\n"
                    let v164 : string = v161 + v163 
                    let v165 : string = v164 + v162 
                    let v166 : string = $"version = \"0.0.1\""
                    let v167 : string = v165 + v163 
                    let v168 : string = v167 + v166 
                    let v169 : string = $"edition = \"2021\""
                    let v170 : string = v168 + v163 
                    let v171 : string = v170 + v169 
                    let v172 : string = $""
                    let v173 : string = v171 + v163 
                    let v174 : string = v173 + v172 
                    let v175 : string = $"[[bin]]"
                    let v176 : string = v174 + v163 
                    let v177 : string = v176 + v175 
                    let v178 : string = $"name = \"spiral_builder_{v158}\""
                    let v179 : string = v177 + v163 
                    let v180 : string = v179 + v178 
                    let v181 : string = $"path = \"spiral_builder.rs\""
                    let v182 : string = v180 + v163 
                    let v183 : string = v182 + v181 
                    let v184 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v185 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v144, v183) v185 
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let _v184 = () 
                    #endif
#else
                    let v186 : string = method41(v183)
                    System.IO.File.WriteAllText (v144, v186)
                    let _v184 = () 
                    #endif
                    _v184 
                    ()
                let v187 : bool = v18 = 0
                if v187 then
                    US36_0(v18, v19)
                else
                    US36_1(v18, v19)
    let struct (v201 : bool, v202 : int32, v203 : string) =
        match v193 with
        | US36_1(v196, v197) -> (* Error *)
            struct (true, v196, v197)
        | US36_0(v194, v195) -> (* Ok *)
            struct (false, v194, v195)
    let v204 : bool = v201 = false
    let v206 : bool =
        if v204 then
            true
        else
            let v205 : bool = v2 >= 3uy
            v205
    if v206 then
        struct (v202, v203)
    else
        let v207 : unit = ()
        let v208 : (unit -> unit) = closure111(v2, v202, v203, v201)
        let v209 : unit = (fun () -> v208 (); v207) ()
        let v1097 : uint8 = v2 + 1uy
        method106(v0, v1, v1097)
and closure113 () () : string =
    let v0 : string = "spiral_builder.process_rust / cargo fmt error"
    v0
and closure112 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_4
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v799 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v614 : string = method8()
                let _v613 = v614 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v615 : string = method8()
                let _v613 = v615 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v616 : string = method8()
                let _v613 = v616 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v617 : string = method9()
                let _v613 = v617 
                #endif
#if FABLE_COMPILER_PYTHON
                let v618 : string = method9()
                let _v613 = v618 
                #endif
#else
                let v619 : string = method9()
                let _v613 = v619 
                #endif
                let v620 : string = _v613 
                let v625 : string = method10()
                let v626 : Mut4 = {l0 = v625} : Mut4
                let v627 : US0 = US0_1
                let v628 : string = $"%A{v627}"
                let v632 : string = $"{v628}"
                let v635 : unit = ()
                let v636 : (unit -> unit) = closure10(v626, v632)
                let v637 : unit = (fun () -> v636 (); v635) ()
                let v640 : string = v626.l0
                let v641 : (string []) = v640.Split v620 
                let v644 : string = v641.[int 0]
                let v647 : string = method10()
                let v648 : Mut4 = {l0 = v647} : Mut4
                let v649 : US0 = US0_4
                let v650 : string = $"%A{v649}"
                let v654 : string = $"{v650}"
                let v657 : unit = ()
                let v658 : (unit -> unit) = closure10(v648, v654)
                let v659 : unit = (fun () -> v658 (); v657) ()
                let v662 : string = v648.l0
                let v663 : bool = v662.StartsWith v644 
                let v669 : US1 =
                    if v663 then
                        let v666 : string = "Debug"
                        US1_0(v666)
                    else
                        US1_1
                match v669 with
                | US1_1 -> (* None *)
                    let v672 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v673 : string = method8()
                    let _v672 = v673 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v674 : string = method8()
                    let _v672 = v674 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v675 : string = method8()
                    let _v672 = v675 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v676 : string = method9()
                    let _v672 = v676 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v677 : string = method9()
                    let _v672 = v677 
                    #endif
#else
                    let v678 : string = method9()
                    let _v672 = v678 
                    #endif
                    let v679 : string = _v672 
                    let v684 : string = method10()
                    let v685 : Mut4 = {l0 = v684} : Mut4
                    let v686 : US0 = US0_2
                    let v687 : string = $"%A{v686}"
                    let v691 : string = $"{v687}"
                    let v694 : unit = ()
                    let v695 : (unit -> unit) = closure10(v685, v691)
                    let v696 : unit = (fun () -> v695 (); v694) ()
                    let v699 : string = v685.l0
                    let v700 : (string []) = v699.Split v679 
                    let v703 : string = v700.[int 0]
                    let v706 : string = method10()
                    let v707 : Mut4 = {l0 = v706} : Mut4
                    let v708 : US0 = US0_4
                    let v709 : string = $"%A{v708}"
                    let v713 : string = $"{v709}"
                    let v716 : unit = ()
                    let v717 : (unit -> unit) = closure10(v707, v713)
                    let v718 : unit = (fun () -> v717 (); v716) ()
                    let v721 : string = v707.l0
                    let v722 : bool = v721.StartsWith v703 
                    let v728 : US1 =
                        if v722 then
                            let v725 : string = "Info"
                            US1_0(v725)
                        else
                            US1_1
                    match v728 with
                    | US1_1 -> (* None *)
                        let v731 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v732 : string = method8()
                        let _v731 = v732 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v733 : string = method8()
                        let _v731 = v733 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v734 : string = method8()
                        let _v731 = v734 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v735 : string = method9()
                        let _v731 = v735 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v736 : string = method9()
                        let _v731 = v736 
                        #endif
#else
                        let v737 : string = method9()
                        let _v731 = v737 
                        #endif
                        let v738 : string = _v731 
                        let v743 : string = method10()
                        let v744 : Mut4 = {l0 = v743} : Mut4
                        let v745 : US0 = US0_3
                        let v746 : string = $"%A{v745}"
                        let v750 : string = $"{v746}"
                        let v753 : unit = ()
                        let v754 : (unit -> unit) = closure10(v744, v750)
                        let v755 : unit = (fun () -> v754 (); v753) ()
                        let v758 : string = v744.l0
                        let v759 : (string []) = v758.Split v738 
                        let v762 : string = v759.[int 0]
                        let v765 : string = method10()
                        let v766 : Mut4 = {l0 = v765} : Mut4
                        let v767 : US0 = US0_4
                        let v768 : string = $"%A{v767}"
                        let v772 : string = $"{v768}"
                        let v775 : unit = ()
                        let v776 : (unit -> unit) = closure10(v766, v772)
                        let v777 : unit = (fun () -> v776 (); v775) ()
                        let v780 : string = v766.l0
                        let v781 : bool = v780.StartsWith v762 
                        let v787 : US1 =
                            if v781 then
                                let v784 : string = "Warning"
                                US1_0(v784)
                            else
                                US1_1
                        match v787 with
                        | US1_1 -> (* None *)
                            let v790 : string = "Critical"
                            US1_0(v790)
                        | US1_0(v788) -> (* Some *)
                            US1_0(v788)
                    | US1_0(v729) -> (* Some *)
                        US1_0(v729)
                | US1_0(v670) -> (* Some *)
                    US1_0(v670)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v803 : string =
            match v799 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v800) -> (* Some *)
                v800
        let v804 : (unit -> string) = v803.ToLower
        let v805 : string = v804 ()
        let v808 : string = v805.PadLeft (7, ' ')
        let v822 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v823 : string = "inline_colorization::color_bright_red"
        let v824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v823 
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v825 
        let v827 : string = "inline_colorization::color_reset"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "\"{v824}{v826}{v828}\""
        let v830 : string = @$"format!(" + v829 + ")"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v830 
        let v832 : string = "fable_library_rust::String_::fromString($0)"
        let v833 : string = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let _v822 = v833 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = "inline_colorization::color_bright_red"
        let v835 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "&*$0"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v836 
        let v838 : string = "inline_colorization::color_reset"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v838 
        let v840 : string = "\"{v835}{v837}{v839}\""
        let v841 : string = @$"format!(" + v840 + ")"
        let v842 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v841 
        let v843 : string = "fable_library_rust::String_::fromString($0)"
        let v844 : string = Fable.Core.RustInterop.emitRustExpr v842 v843 
        let _v822 = v844 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v845 : string = "inline_colorization::color_bright_red"
        let v846 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v845 
        let v847 : string = "&*$0"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v847 
        let v849 : string = "inline_colorization::color_reset"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v849 
        let v851 : string = "\"{v846}{v848}{v850}\""
        let v852 : string = @$"format!(" + v851 + ")"
        let v853 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v852 
        let v854 : string = "fable_library_rust::String_::fromString($0)"
        let v855 : string = Fable.Core.RustInterop.emitRustExpr v853 v854 
        let _v822 = v855 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v856 : string = "\u001b[91m"
        let v857 : string = method11()
        let v858 : string = v856 + v808 
        let v859 : string = v858 + v857 
        let _v822 = v859 
        #endif
#if FABLE_COMPILER_PYTHON
        let v860 : string = "\u001b[91m"
        let v861 : string = method11()
        let v862 : string = v860 + v808 
        let v863 : string = v862 + v861 
        let _v822 = v863 
        #endif
#else
        let v864 : string = "\u001b[91m"
        let v865 : string = method11()
        let v866 : string = v864 + v808 
        let v867 : string = v866 + v865 
        let _v822 = v867 
        #endif
        let v868 : string = _v822 
        let v874 : int64 = v86.l0
        let v875 : string = method10()
        let v876 : Mut4 = {l0 = v875} : Mut4
        let v877 : string = "{ "
        let v878 : string = $"{v877}"
        let v881 : unit = ()
        let v882 : (unit -> unit) = closure10(v876, v878)
        let v883 : unit = (fun () -> v882 (); v881) ()
        let v886 : string = "exit_code"
        let v887 : string = $"{v886}"
        let v890 : unit = ()
        let v891 : (unit -> unit) = closure10(v876, v887)
        let v892 : unit = (fun () -> v891 (); v890) ()
        let v895 : string = " = "
        let v896 : string = $"{v895}"
        let v899 : unit = ()
        let v900 : (unit -> unit) = closure10(v876, v896)
        let v901 : unit = (fun () -> v900 (); v899) ()
        let v904 : string = $"{v1}"
        let v907 : unit = ()
        let v908 : (unit -> unit) = closure10(v876, v904)
        let v909 : unit = (fun () -> v908 (); v907) ()
        let v912 : string = "; "
        let v913 : string = $"{v912}"
        let v916 : unit = ()
        let v917 : (unit -> unit) = closure10(v876, v913)
        let v918 : unit = (fun () -> v917 (); v916) ()
        let v921 : string = "cargo_fmt_result"
        let v922 : string = $"{v921}"
        let v925 : unit = ()
        let v926 : (unit -> unit) = closure10(v876, v922)
        let v927 : unit = (fun () -> v926 (); v925) ()
        let v930 : string = $"{v895}"
        let v933 : unit = ()
        let v934 : (unit -> unit) = closure10(v876, v930)
        let v935 : unit = (fun () -> v934 (); v933) ()
        let v938 : string = $"{v0}"
        let v941 : unit = ()
        let v942 : (unit -> unit) = closure10(v876, v938)
        let v943 : unit = (fun () -> v942 (); v941) ()
        let v946 : string = " }"
        let v947 : string = $"{v946}"
        let v950 : unit = ()
        let v951 : (unit -> unit) = closure10(v876, v947)
        let v952 : unit = (fun () -> v951 (); v950) ()
        let v955 : string = v876.l0
        let v956 : (unit -> string) = closure113()
        let v957 : string = $"{v484} {v868} #{v874} %s{v956 ()} / {v955}"
        let v960 : char list = []
        let v961 : (char list -> (char [])) = List.toArray
        let v962 : (char []) = v961 v960
        let v965 : string = v957.TrimStart v962 
        let v983 : char list = []
        let v984 : char list = '/' :: v983 
        let v987 : char list = ' ' :: v984 
        let v990 : (char list -> (char [])) = List.toArray
        let v991 : (char []) = v990 v987
        let v994 : string = v965.TrimEnd v991 
        let v1012 : (string -> unit) = closure12()
        let v1013 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1014 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1015 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1015 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1016 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1016 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1012 v994
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1012 v994
        let _v1013 = () 
        #endif
#else
        v1012 v994
        let _v1013 = () 
        #endif
        _v1013 
        let v1017 : (string -> unit) = v18.l0
        v1017 v994
and closure115 () (v0 : string) : bool =
    let v1 : string = "profile [optimized] target"
    let v2 : bool = v0.Contains v1 
    let v5 : bool = v2 = false
    if v5 then
        let v6 : string = "profile [unoptimized] target"
        let v7 : bool = v0.Contains v6 
        let v10 : bool = v7 = false
        if v10 then
            let v11 : string = "profile [unoptimized + debuginfo] target"
            let v12 : bool = v0.Contains v11 
            let v15 : bool = v12 = false
            v15
        else
            false
    else
        false
and closure114 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : (string -> bool) = closure115()
    let v6 : (string []) = v2 |> Array.skipWhile v5 
    let v7 : (string []) = v6 |> Array.skip 2 
    let v8 : string seq = v7 |> Seq.ofArray
    let v11 : (string -> (string seq -> string)) = String.concat
    let v12 : (string seq -> string) = v11 v1
    v12 v8
and closure118 () () : string =
    let v0 : string = "spiral_builder.process_rust / Exception"
    v0
and closure117 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "ex"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v907 : string = "format!(\"{:#?}\", $0)"
        let v908 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v907 
        let v909 : string = "fable_library_rust::String_::fromString($0)"
        let v910 : string = Fable.Core.RustInterop.emitRustExpr v908 v909 
        let _v906 = v910 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v911 : string = "format!(\"{:#?}\", $0)"
        let v912 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v911 
        let v913 : string = "fable_library_rust::String_::fromString($0)"
        let v914 : string = Fable.Core.RustInterop.emitRustExpr v912 v913 
        let _v906 = v914 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v915 : string = "format!(\"{:#?}\", $0)"
        let v916 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v915 
        let v917 : string = "fable_library_rust::String_::fromString($0)"
        let v918 : string = Fable.Core.RustInterop.emitRustExpr v916 v917 
        let _v906 = v918 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v919 : string = $"%A{v3}"
        let _v906 = v919 
        #endif
#if FABLE_COMPILER_PYTHON
        let v922 : string = $"%A{v3}"
        let _v906 = v922 
        #endif
#else
        let v925 : string = $"%A{v3}"
        let _v906 = v925 
        #endif
        let v928 : string = _v906 
        let v933 : string = $"{v928}"
        let v936 : unit = ()
        let v937 : (unit -> unit) = closure10(v878, v933)
        let v938 : unit = (fun () -> v937 (); v936) ()
        let v941 : string = "; "
        let v942 : string = $"{v941}"
        let v945 : unit = ()
        let v946 : (unit -> unit) = closure10(v878, v942)
        let v947 : unit = (fun () -> v946 (); v945) ()
        let v950 : string = "cargo_result"
        let v951 : string = $"{v950}"
        let v954 : unit = ()
        let v955 : (unit -> unit) = closure10(v878, v951)
        let v956 : unit = (fun () -> v955 (); v954) ()
        let v959 : string = $"{v897}"
        let v962 : unit = ()
        let v963 : (unit -> unit) = closure10(v878, v959)
        let v964 : unit = (fun () -> v963 (); v962) ()
        let v967 : string = $"{v1}"
        let v970 : unit = ()
        let v971 : (unit -> unit) = closure10(v878, v967)
        let v972 : unit = (fun () -> v971 (); v970) ()
        let v975 : string = $"{v941}"
        let v978 : unit = ()
        let v979 : (unit -> unit) = closure10(v878, v975)
        let v980 : unit = (fun () -> v979 (); v978) ()
        let v983 : string = "new_code_path"
        let v984 : string = $"{v983}"
        let v987 : unit = ()
        let v988 : (unit -> unit) = closure10(v878, v984)
        let v989 : unit = (fun () -> v988 (); v987) ()
        let v992 : string = $"{v897}"
        let v995 : unit = ()
        let v996 : (unit -> unit) = closure10(v878, v992)
        let v997 : unit = (fun () -> v996 (); v995) ()
        let v1000 : string = $"{v0}"
        let v1003 : unit = ()
        let v1004 : (unit -> unit) = closure10(v878, v1000)
        let v1005 : unit = (fun () -> v1004 (); v1003) ()
        let v1008 : string = $"{v941}"
        let v1011 : unit = ()
        let v1012 : (unit -> unit) = closure10(v878, v1008)
        let v1013 : unit = (fun () -> v1012 (); v1011) ()
        let v1016 : string = "external_command"
        let v1017 : string = $"{v1016}"
        let v1020 : unit = ()
        let v1021 : (unit -> unit) = closure10(v878, v1017)
        let v1022 : unit = (fun () -> v1021 (); v1020) ()
        let v1025 : string = $"{v897}"
        let v1028 : unit = ()
        let v1029 : (unit -> unit) = closure10(v878, v1025)
        let v1030 : unit = (fun () -> v1029 (); v1028) ()
        let v1033 : string = $"{v2}"
        let v1036 : unit = ()
        let v1037 : (unit -> unit) = closure10(v878, v1033)
        let v1038 : unit = (fun () -> v1037 (); v1036) ()
        let v1041 : string = " }"
        let v1042 : string = $"{v1041}"
        let v1045 : unit = ()
        let v1046 : (unit -> unit) = closure10(v878, v1042)
        let v1047 : unit = (fun () -> v1046 (); v1045) ()
        let v1050 : string = v878.l0
        let v1051 : (unit -> string) = closure118()
        let v1052 : string = $"{v486} {v870} #{v876} %s{v1051 ()} / {v1050}"
        let v1055 : char list = []
        let v1056 : (char list -> (char [])) = List.toArray
        let v1057 : (char []) = v1056 v1055
        let v1060 : string = v1052.TrimStart v1057 
        let v1078 : char list = []
        let v1079 : char list = '/' :: v1078 
        let v1082 : char list = ' ' :: v1079 
        let v1085 : (char list -> (char [])) = List.toArray
        let v1086 : (char []) = v1085 v1082
        let v1089 : string = v1060.TrimEnd v1086 
        let v1107 : (string -> unit) = closure12()
        let v1108 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1109 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1109 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1110 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1110 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1111 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1111 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1107 v1089
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1107 v1089
        let _v1108 = () 
        #endif
#else
        v1107 v1089
        let _v1108 = () 
        #endif
        _v1108 
        let v1112 : (string -> unit) = v20.l0
        v1112 v1089
and closure116 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure117(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure120 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure119 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "exit_code"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : string = $"{v2}"
        let v909 : unit = ()
        let v910 : (unit -> unit) = closure10(v878, v906)
        let v911 : unit = (fun () -> v910 (); v909) ()
        let v914 : string = "; "
        let v915 : string = $"{v914}"
        let v918 : unit = ()
        let v919 : (unit -> unit) = closure10(v878, v915)
        let v920 : unit = (fun () -> v919 (); v918) ()
        let v923 : string = "cargo_result"
        let v924 : string = $"{v923}"
        let v927 : unit = ()
        let v928 : (unit -> unit) = closure10(v878, v924)
        let v929 : unit = (fun () -> v928 (); v927) ()
        let v932 : string = $"{v897}"
        let v935 : unit = ()
        let v936 : (unit -> unit) = closure10(v878, v932)
        let v937 : unit = (fun () -> v936 (); v935) ()
        let v940 : string = $"{v1}"
        let v943 : unit = ()
        let v944 : (unit -> unit) = closure10(v878, v940)
        let v945 : unit = (fun () -> v944 (); v943) ()
        let v948 : string = $"{v914}"
        let v951 : unit = ()
        let v952 : (unit -> unit) = closure10(v878, v948)
        let v953 : unit = (fun () -> v952 (); v951) ()
        let v956 : string = "new_code_path"
        let v957 : string = $"{v956}"
        let v960 : unit = ()
        let v961 : (unit -> unit) = closure10(v878, v957)
        let v962 : unit = (fun () -> v961 (); v960) ()
        let v965 : string = $"{v897}"
        let v968 : unit = ()
        let v969 : (unit -> unit) = closure10(v878, v965)
        let v970 : unit = (fun () -> v969 (); v968) ()
        let v973 : string = $"{v0}"
        let v976 : unit = ()
        let v977 : (unit -> unit) = closure10(v878, v973)
        let v978 : unit = (fun () -> v977 (); v976) ()
        let v981 : string = $"{v914}"
        let v984 : unit = ()
        let v985 : (unit -> unit) = closure10(v878, v981)
        let v986 : unit = (fun () -> v985 (); v984) ()
        let v989 : string = "external_command"
        let v990 : string = $"{v989}"
        let v993 : unit = ()
        let v994 : (unit -> unit) = closure10(v878, v990)
        let v995 : unit = (fun () -> v994 (); v993) ()
        let v998 : string = $"{v897}"
        let v1001 : unit = ()
        let v1002 : (unit -> unit) = closure10(v878, v998)
        let v1003 : unit = (fun () -> v1002 (); v1001) ()
        let v1006 : string = $"{v3}"
        let v1009 : unit = ()
        let v1010 : (unit -> unit) = closure10(v878, v1006)
        let v1011 : unit = (fun () -> v1010 (); v1009) ()
        let v1014 : string = " }"
        let v1015 : string = $"{v1014}"
        let v1018 : unit = ()
        let v1019 : (unit -> unit) = closure10(v878, v1015)
        let v1020 : unit = (fun () -> v1019 (); v1018) ()
        let v1023 : string = v878.l0
        let v1024 : (unit -> string) = closure120()
        let v1025 : string = $"{v486} {v870} #{v876} %s{v1024 ()} / {v1023}"
        let v1028 : char list = []
        let v1029 : (char list -> (char [])) = List.toArray
        let v1030 : (char []) = v1029 v1028
        let v1033 : string = v1025.TrimStart v1030 
        let v1051 : char list = []
        let v1052 : char list = '/' :: v1051 
        let v1055 : char list = ' ' :: v1052 
        let v1058 : (char list -> (char [])) = List.toArray
        let v1059 : (char []) = v1058 v1055
        let v1062 : string = v1033.TrimEnd v1059 
        let v1080 : (string -> unit) = closure12()
        let v1081 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1082 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1082 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1083 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1083 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1084 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1084 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1080 v1062
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1080 v1062
        let _v1081 = () 
        #endif
#else
        v1080 v1062
        let _v1081 = () 
        #endif
        _v1081 
        let v1085 : (string -> unit) = v20.l0
        v1085 v1062
and closure122 () () : string =
    let v0 : string = "spiral_builder.process_rust / wasm error"
    v0
and closure121 (v0 : string, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "exit_code"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : string = $"{v3}"
        let v909 : unit = ()
        let v910 : (unit -> unit) = closure10(v878, v906)
        let v911 : unit = (fun () -> v910 (); v909) ()
        let v914 : string = "; "
        let v915 : string = $"{v914}"
        let v918 : unit = ()
        let v919 : (unit -> unit) = closure10(v878, v915)
        let v920 : unit = (fun () -> v919 (); v918) ()
        let v923 : string = "spiral_wasm_result"
        let v924 : string = $"{v923}"
        let v927 : unit = ()
        let v928 : (unit -> unit) = closure10(v878, v924)
        let v929 : unit = (fun () -> v928 (); v927) ()
        let v932 : string = $"{v897}"
        let v935 : unit = ()
        let v936 : (unit -> unit) = closure10(v878, v932)
        let v937 : unit = (fun () -> v936 (); v935) ()
        let v940 : string = $"{v2}"
        let v943 : unit = ()
        let v944 : (unit -> unit) = closure10(v878, v940)
        let v945 : unit = (fun () -> v944 (); v943) ()
        let v948 : string = $"{v914}"
        let v951 : unit = ()
        let v952 : (unit -> unit) = closure10(v878, v948)
        let v953 : unit = (fun () -> v952 (); v951) ()
        let v956 : string = "cargo_result"
        let v957 : string = $"{v956}"
        let v960 : unit = ()
        let v961 : (unit -> unit) = closure10(v878, v957)
        let v962 : unit = (fun () -> v961 (); v960) ()
        let v965 : string = $"{v897}"
        let v968 : unit = ()
        let v969 : (unit -> unit) = closure10(v878, v965)
        let v970 : unit = (fun () -> v969 (); v968) ()
        let v973 : string = $"{v1}"
        let v976 : unit = ()
        let v977 : (unit -> unit) = closure10(v878, v973)
        let v978 : unit = (fun () -> v977 (); v976) ()
        let v981 : string = $"{v914}"
        let v984 : unit = ()
        let v985 : (unit -> unit) = closure10(v878, v981)
        let v986 : unit = (fun () -> v985 (); v984) ()
        let v989 : string = "new_code_path"
        let v990 : string = $"{v989}"
        let v993 : unit = ()
        let v994 : (unit -> unit) = closure10(v878, v990)
        let v995 : unit = (fun () -> v994 (); v993) ()
        let v998 : string = $"{v897}"
        let v1001 : unit = ()
        let v1002 : (unit -> unit) = closure10(v878, v998)
        let v1003 : unit = (fun () -> v1002 (); v1001) ()
        let v1006 : string = $"{v0}"
        let v1009 : unit = ()
        let v1010 : (unit -> unit) = closure10(v878, v1006)
        let v1011 : unit = (fun () -> v1010 (); v1009) ()
        let v1014 : string = " }"
        let v1015 : string = $"{v1014}"
        let v1018 : unit = ()
        let v1019 : (unit -> unit) = closure10(v878, v1015)
        let v1020 : unit = (fun () -> v1019 (); v1018) ()
        let v1023 : string = v878.l0
        let v1024 : (unit -> string) = closure122()
        let v1025 : string = $"{v486} {v870} #{v876} %s{v1024 ()} / {v1023}"
        let v1028 : char list = []
        let v1029 : (char list -> (char [])) = List.toArray
        let v1030 : (char []) = v1029 v1028
        let v1033 : string = v1025.TrimStart v1030 
        let v1051 : char list = []
        let v1052 : char list = '/' :: v1051 
        let v1055 : char list = ' ' :: v1052 
        let v1058 : (char list -> (char [])) = List.toArray
        let v1059 : (char []) = v1058 v1055
        let v1062 : string = v1033.TrimEnd v1059 
        let v1080 : (string -> unit) = closure12()
        let v1081 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1082 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1082 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1083 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1083 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1084 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1084 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1080 v1062
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1080 v1062
        let _v1081 = () 
        #endif
#else
        v1080 v1062
        let _v1081 = () 
        #endif
        _v1081 
        let v1085 : (string -> unit) = v20.l0
        v1085 v1062
and closure124 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure123 (v0 : string, v1 : string, v2 : int32, v3 : string, v4 : string) () : unit =
    let v5 : unit = ()
    let v6 : (unit -> unit) = closure2()
    let v7 : unit = (fun () -> v6 (); v5) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : int64 option) = State.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v6 (); v35) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : int64 option) = State.trace_state.Value
    let v64 : US0 = v52.l0
    let v65 : bool = v51.l0
    let v66 : bool = v65 = false
    let v69 : bool =
        if v66 then
            false
        else
            let v67 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v64
            let v68 : bool = 4 >= v67
            v68
    if v69 then
        let v70 : unit = ()
        let v71 : (unit -> unit) = closure7(v20)
        let v72 : unit = (fun () -> v71 (); v70) ()
        let v75 : unit = ()
        let v76 : unit = (fun () -> v6 (); v75) ()
        let struct (v89 : Mut0, v90 : Mut1, v91 : Mut2, v92 : Mut3, v93 : int64 option) = State.trace_state.Value
        let v104 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v105 : US3 option = None
        let _v105 = ref v105 
        let v106 : US3 option ref = _v105 
        let v107 : (US3 option -> US3 option ref) = closure8(v106)
        let v108 : unit = ()
        let v109 : (unit -> unit) = closure9(v93, v107)
        let v110 : unit = (fun () -> v109 (); v108) ()
        let v113 : US3 option = _v105.Value 
        let v124 : US3 = US3_1
        let v125 : US3 = v113 |> Option.defaultValue v124 
        let v165 : System.DateTime =
            match v125 with
            | US3_1 -> (* None *)
                let v161 : System.DateTime = System.DateTime.Now
                v161
            | US3_0(v129) -> (* Some *)
                let v130 : System.DateTime = System.DateTime.Now
                let v133 : (System.DateTime -> int64) = _.Ticks
                let v134 : int64 = v133 v130
                let v137 : int64 = v134 - v129
                let v138 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v139 : System.TimeSpan = v138 v137
                let v142 : (System.TimeSpan -> int32) = _.Hours
                let v143 : int32 = v142 v139
                let v146 : (System.TimeSpan -> int32) = _.Minutes
                let v147 : int32 = v146 v139
                let v150 : (System.TimeSpan -> int32) = _.Seconds
                let v151 : int32 = v150 v139
                let v154 : (System.TimeSpan -> int32) = _.Milliseconds
                let v155 : int32 = v154 v139
                let v158 : System.DateTime = System.DateTime (1, 1, 1, v143, v147, v151, v155)
                v158
        let v166 : string = method6()
        let v169 : (string -> string) = v165.ToString
        let v170 : string = v169 v166
        let _v104 = v170 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v173 : US3 option = None
        let _v173 = ref v173 
        let v174 : US3 option ref = _v173 
        let v175 : (US3 option -> US3 option ref) = closure8(v174)
        let v176 : unit = ()
        let v177 : (unit -> unit) = closure9(v93, v175)
        let v178 : unit = (fun () -> v177 (); v176) ()
        let v181 : US3 option = _v173.Value 
        let v192 : US3 = US3_1
        let v193 : US3 = v181 |> Option.defaultValue v192 
        let v233 : System.DateTime =
            match v193 with
            | US3_1 -> (* None *)
                let v229 : System.DateTime = System.DateTime.Now
                v229
            | US3_0(v197) -> (* Some *)
                let v198 : System.DateTime = System.DateTime.Now
                let v201 : (System.DateTime -> int64) = _.Ticks
                let v202 : int64 = v201 v198
                let v205 : int64 = v202 - v197
                let v206 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v207 : System.TimeSpan = v206 v205
                let v210 : (System.TimeSpan -> int32) = _.Hours
                let v211 : int32 = v210 v207
                let v214 : (System.TimeSpan -> int32) = _.Minutes
                let v215 : int32 = v214 v207
                let v218 : (System.TimeSpan -> int32) = _.Seconds
                let v219 : int32 = v218 v207
                let v222 : (System.TimeSpan -> int32) = _.Milliseconds
                let v223 : int32 = v222 v207
                let v226 : System.DateTime = System.DateTime (1, 1, 1, v211, v215, v219, v223)
                v226
        let v234 : string = method6()
        let v237 : (string -> string) = v233.ToString
        let v238 : string = v237 v234
        let _v104 = v238 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v241 : string = $"near_sdk::env::block_timestamp()"
        let v242 : uint64 = Fable.Core.RustInterop.emitRustExpr () v241 
        let v243 : US3 option = None
        let _v243 = ref v243 
        let v244 : US3 option ref = _v243 
        let v245 : (US3 option -> US3 option ref) = closure8(v244)
        let v246 : unit = ()
        let v247 : (unit -> unit) = closure9(v93, v245)
        let v248 : unit = (fun () -> v247 (); v246) ()
        let v251 : US3 option = _v243.Value 
        let v262 : US3 = US3_1
        let v263 : US3 = v251 |> Option.defaultValue v262 
        let v272 : uint64 =
            match v263 with
            | US3_1 -> (* None *)
                v242
            | US3_0(v267) -> (* Some *)
                let v268 : (int64 -> uint64) = uint64
                let v269 : uint64 = v268 v267
                let v270 : uint64 = v242 - v269
                v270
        let v273 : uint64 = v272 / 1000000000UL
        let v274 : uint64 = v273 % 60UL
        let v275 : uint64 = v273 / 60UL
        let v276 : uint64 = v275 % 60UL
        let v277 : uint64 = v273 / 3600UL
        let v278 : uint64 = v277 % 24UL
        let v279 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v280 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v278, v276, v274) v279 
        let v281 : string = "fable_library_rust::String_::fromString($0)"
        let v282 : string = Fable.Core.RustInterop.emitRustExpr v280 v281 
        let _v104 = v282 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v283 : US3 option = None
        let _v283 = ref v283 
        let v284 : US3 option ref = _v283 
        let v285 : (US3 option -> US3 option ref) = closure8(v284)
        let v286 : unit = ()
        let v287 : (unit -> unit) = closure9(v93, v285)
        let v288 : unit = (fun () -> v287 (); v286) ()
        let v291 : US3 option = _v283.Value 
        let v302 : US3 = US3_1
        let v303 : US3 = v291 |> Option.defaultValue v302 
        let v343 : System.DateTime =
            match v303 with
            | US3_1 -> (* None *)
                let v339 : System.DateTime = System.DateTime.Now
                v339
            | US3_0(v307) -> (* Some *)
                let v308 : System.DateTime = System.DateTime.Now
                let v311 : (System.DateTime -> int64) = _.Ticks
                let v312 : int64 = v311 v308
                let v315 : int64 = v312 - v307
                let v316 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v317 : System.TimeSpan = v316 v315
                let v320 : (System.TimeSpan -> int32) = _.Hours
                let v321 : int32 = v320 v317
                let v324 : (System.TimeSpan -> int32) = _.Minutes
                let v325 : int32 = v324 v317
                let v328 : (System.TimeSpan -> int32) = _.Seconds
                let v329 : int32 = v328 v317
                let v332 : (System.TimeSpan -> int32) = _.Milliseconds
                let v333 : int32 = v332 v317
                let v336 : System.DateTime = System.DateTime (1, 1, 1, v321, v325, v329, v333)
                v336
        let v344 : string = method7()
        let v347 : (string -> string) = v343.ToString
        let v348 : string = v347 v344
        let _v104 = v348 
        #endif
#if FABLE_COMPILER_PYTHON
        let v351 : US3 option = None
        let _v351 = ref v351 
        let v352 : US3 option ref = _v351 
        let v353 : (US3 option -> US3 option ref) = closure8(v352)
        let v354 : unit = ()
        let v355 : (unit -> unit) = closure9(v93, v353)
        let v356 : unit = (fun () -> v355 (); v354) ()
        let v359 : US3 option = _v351.Value 
        let v370 : US3 = US3_1
        let v371 : US3 = v359 |> Option.defaultValue v370 
        let v411 : System.DateTime =
            match v371 with
            | US3_1 -> (* None *)
                let v407 : System.DateTime = System.DateTime.Now
                v407
            | US3_0(v375) -> (* Some *)
                let v376 : System.DateTime = System.DateTime.Now
                let v379 : (System.DateTime -> int64) = _.Ticks
                let v380 : int64 = v379 v376
                let v383 : int64 = v380 - v375
                let v384 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v385 : System.TimeSpan = v384 v383
                let v388 : (System.TimeSpan -> int32) = _.Hours
                let v389 : int32 = v388 v385
                let v392 : (System.TimeSpan -> int32) = _.Minutes
                let v393 : int32 = v392 v385
                let v396 : (System.TimeSpan -> int32) = _.Seconds
                let v397 : int32 = v396 v385
                let v400 : (System.TimeSpan -> int32) = _.Milliseconds
                let v401 : int32 = v400 v385
                let v404 : System.DateTime = System.DateTime (1, 1, 1, v389, v393, v397, v401)
                v404
        let v412 : string = method7()
        let v415 : (string -> string) = v411.ToString
        let v416 : string = v415 v412
        let _v104 = v416 
        #endif
#else
        let v419 : US3 option = None
        let _v419 = ref v419 
        let v420 : US3 option ref = _v419 
        let v421 : (US3 option -> US3 option ref) = closure8(v420)
        let v422 : unit = ()
        let v423 : (unit -> unit) = closure9(v93, v421)
        let v424 : unit = (fun () -> v423 (); v422) ()
        let v427 : US3 option = _v419.Value 
        let v438 : US3 = US3_1
        let v439 : US3 = v427 |> Option.defaultValue v438 
        let v479 : System.DateTime =
            match v439 with
            | US3_1 -> (* None *)
                let v475 : System.DateTime = System.DateTime.Now
                v475
            | US3_0(v443) -> (* Some *)
                let v444 : System.DateTime = System.DateTime.Now
                let v447 : (System.DateTime -> int64) = _.Ticks
                let v448 : int64 = v447 v444
                let v451 : int64 = v448 - v443
                let v452 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v453 : System.TimeSpan = v452 v451
                let v456 : (System.TimeSpan -> int32) = _.Hours
                let v457 : int32 = v456 v453
                let v460 : (System.TimeSpan -> int32) = _.Minutes
                let v461 : int32 = v460 v453
                let v464 : (System.TimeSpan -> int32) = _.Seconds
                let v465 : int32 = v464 v453
                let v468 : (System.TimeSpan -> int32) = _.Milliseconds
                let v469 : int32 = v468 v453
                let v472 : System.DateTime = System.DateTime (1, 1, 1, v457, v461, v465, v469)
                v472
        let v480 : string = method7()
        let v483 : (string -> string) = v479.ToString
        let v484 : string = v483 v480
        let _v104 = v484 
        #endif
        let v487 : string = _v104 
        
        
        
        
        
        let v557 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v558 : string = method8()
        let _v557 = v558 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v559 : string = method8()
        let _v557 = v559 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v560 : string = method8()
        let _v557 = v560 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v561 : string = method9()
        let _v557 = v561 
        #endif
#if FABLE_COMPILER_PYTHON
        let v562 : string = method9()
        let _v557 = v562 
        #endif
#else
        let v563 : string = method9()
        let _v557 = v563 
        #endif
        let v564 : string = _v557 
        let v569 : string = method10()
        let v570 : Mut4 = {l0 = v569} : Mut4
        let v571 : US0 = US0_0
        let v572 : string = $"%A{v571}"
        let v576 : string = $"{v572}"
        let v579 : unit = ()
        let v580 : (unit -> unit) = closure10(v570, v576)
        let v581 : unit = (fun () -> v580 (); v579) ()
        let v584 : string = v570.l0
        let v585 : (string []) = v584.Split v564 
        let v588 : string = v585.[int 0]
        let v591 : string = method10()
        let v592 : Mut4 = {l0 = v591} : Mut4
        let v593 : US0 = US0_4
        let v594 : string = $"%A{v593}"
        let v598 : string = $"{v594}"
        let v601 : unit = ()
        let v602 : (unit -> unit) = closure10(v592, v598)
        let v603 : unit = (fun () -> v602 (); v601) ()
        let v606 : string = v592.l0
        let v607 : bool = v606.StartsWith v588 
        let v613 : US1 =
            if v607 then
                let v610 : string = "Verbose"
                US1_0(v610)
            else
                US1_1
        let v802 : US1 =
            match v613 with
            | US1_1 -> (* None *)
                let v616 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v617 : string = method8()
                let _v616 = v617 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v618 : string = method8()
                let _v616 = v618 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v619 : string = method8()
                let _v616 = v619 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v620 : string = method9()
                let _v616 = v620 
                #endif
#if FABLE_COMPILER_PYTHON
                let v621 : string = method9()
                let _v616 = v621 
                #endif
#else
                let v622 : string = method9()
                let _v616 = v622 
                #endif
                let v623 : string = _v616 
                let v628 : string = method10()
                let v629 : Mut4 = {l0 = v628} : Mut4
                let v630 : US0 = US0_1
                let v631 : string = $"%A{v630}"
                let v635 : string = $"{v631}"
                let v638 : unit = ()
                let v639 : (unit -> unit) = closure10(v629, v635)
                let v640 : unit = (fun () -> v639 (); v638) ()
                let v643 : string = v629.l0
                let v644 : (string []) = v643.Split v623 
                let v647 : string = v644.[int 0]
                let v650 : string = method10()
                let v651 : Mut4 = {l0 = v650} : Mut4
                let v652 : US0 = US0_4
                let v653 : string = $"%A{v652}"
                let v657 : string = $"{v653}"
                let v660 : unit = ()
                let v661 : (unit -> unit) = closure10(v651, v657)
                let v662 : unit = (fun () -> v661 (); v660) ()
                let v665 : string = v651.l0
                let v666 : bool = v665.StartsWith v647 
                let v672 : US1 =
                    if v666 then
                        let v669 : string = "Debug"
                        US1_0(v669)
                    else
                        US1_1
                match v672 with
                | US1_1 -> (* None *)
                    let v675 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v676 : string = method8()
                    let _v675 = v676 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v677 : string = method8()
                    let _v675 = v677 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v678 : string = method8()
                    let _v675 = v678 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v679 : string = method9()
                    let _v675 = v679 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v680 : string = method9()
                    let _v675 = v680 
                    #endif
#else
                    let v681 : string = method9()
                    let _v675 = v681 
                    #endif
                    let v682 : string = _v675 
                    let v687 : string = method10()
                    let v688 : Mut4 = {l0 = v687} : Mut4
                    let v689 : US0 = US0_2
                    let v690 : string = $"%A{v689}"
                    let v694 : string = $"{v690}"
                    let v697 : unit = ()
                    let v698 : (unit -> unit) = closure10(v688, v694)
                    let v699 : unit = (fun () -> v698 (); v697) ()
                    let v702 : string = v688.l0
                    let v703 : (string []) = v702.Split v682 
                    let v706 : string = v703.[int 0]
                    let v709 : string = method10()
                    let v710 : Mut4 = {l0 = v709} : Mut4
                    let v711 : US0 = US0_4
                    let v712 : string = $"%A{v711}"
                    let v716 : string = $"{v712}"
                    let v719 : unit = ()
                    let v720 : (unit -> unit) = closure10(v710, v716)
                    let v721 : unit = (fun () -> v720 (); v719) ()
                    let v724 : string = v710.l0
                    let v725 : bool = v724.StartsWith v706 
                    let v731 : US1 =
                        if v725 then
                            let v728 : string = "Info"
                            US1_0(v728)
                        else
                            US1_1
                    match v731 with
                    | US1_1 -> (* None *)
                        let v734 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v735 : string = method8()
                        let _v734 = v735 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v736 : string = method8()
                        let _v734 = v736 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v737 : string = method8()
                        let _v734 = v737 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v738 : string = method9()
                        let _v734 = v738 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v739 : string = method9()
                        let _v734 = v739 
                        #endif
#else
                        let v740 : string = method9()
                        let _v734 = v740 
                        #endif
                        let v741 : string = _v734 
                        let v746 : string = method10()
                        let v747 : Mut4 = {l0 = v746} : Mut4
                        let v748 : US0 = US0_3
                        let v749 : string = $"%A{v748}"
                        let v753 : string = $"{v749}"
                        let v756 : unit = ()
                        let v757 : (unit -> unit) = closure10(v747, v753)
                        let v758 : unit = (fun () -> v757 (); v756) ()
                        let v761 : string = v747.l0
                        let v762 : (string []) = v761.Split v741 
                        let v765 : string = v762.[int 0]
                        let v768 : string = method10()
                        let v769 : Mut4 = {l0 = v768} : Mut4
                        let v770 : US0 = US0_4
                        let v771 : string = $"%A{v770}"
                        let v775 : string = $"{v771}"
                        let v778 : unit = ()
                        let v779 : (unit -> unit) = closure10(v769, v775)
                        let v780 : unit = (fun () -> v779 (); v778) ()
                        let v783 : string = v769.l0
                        let v784 : bool = v783.StartsWith v765 
                        let v790 : US1 =
                            if v784 then
                                let v787 : string = "Warning"
                                US1_0(v787)
                            else
                                US1_1
                        match v790 with
                        | US1_1 -> (* None *)
                            let v793 : string = "Critical"
                            US1_0(v793)
                        | US1_0(v791) -> (* Some *)
                            US1_0(v791)
                    | US1_0(v732) -> (* Some *)
                        US1_0(v732)
                | US1_0(v673) -> (* Some *)
                    US1_0(v673)
            | US1_0(v614) -> (* Some *)
                US1_0(v614)
        let v806 : string =
            match v802 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v803) -> (* Some *)
                v803
        let v807 : (unit -> string) = v806.ToLower
        let v808 : string = v807 ()
        let v811 : string = v808.PadLeft (7, ' ')
        let v825 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v826 : string = "inline_colorization::color_bright_red"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "&*$0"
        let v829 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v811 v828 
        let v830 : string = "inline_colorization::color_reset"
        let v831 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v830 
        let v832 : string = "\"{v827}{v829}{v831}\""
        let v833 : string = @$"format!(" + v832 + ")"
        let v834 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "fable_library_rust::String_::fromString($0)"
        let v836 : string = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let _v825 = v836 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v837 : string = "inline_colorization::color_bright_red"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "&*$0"
        let v840 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v811 v839 
        let v841 : string = "inline_colorization::color_reset"
        let v842 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v841 
        let v843 : string = "\"{v838}{v840}{v842}\""
        let v844 : string = @$"format!(" + v843 + ")"
        let v845 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "fable_library_rust::String_::fromString($0)"
        let v847 : string = Fable.Core.RustInterop.emitRustExpr v845 v846 
        let _v825 = v847 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v848 : string = "inline_colorization::color_bright_red"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "&*$0"
        let v851 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v811 v850 
        let v852 : string = "inline_colorization::color_reset"
        let v853 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v852 
        let v854 : string = "\"{v849}{v851}{v853}\""
        let v855 : string = @$"format!(" + v854 + ")"
        let v856 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v855 
        let v857 : string = "fable_library_rust::String_::fromString($0)"
        let v858 : string = Fable.Core.RustInterop.emitRustExpr v856 v857 
        let _v825 = v858 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v859 : string = "\u001b[91m"
        let v860 : string = method11()
        let v861 : string = v859 + v811 
        let v862 : string = v861 + v860 
        let _v825 = v862 
        #endif
#if FABLE_COMPILER_PYTHON
        let v863 : string = "\u001b[91m"
        let v864 : string = method11()
        let v865 : string = v863 + v811 
        let v866 : string = v865 + v864 
        let _v825 = v866 
        #endif
#else
        let v867 : string = "\u001b[91m"
        let v868 : string = method11()
        let v869 : string = v867 + v811 
        let v870 : string = v869 + v868 
        let _v825 = v870 
        #endif
        let v871 : string = _v825 
        let v877 : int64 = v89.l0
        let v878 : string = method10()
        let v879 : Mut4 = {l0 = v878} : Mut4
        let v880 : string = "{ "
        let v881 : string = $"{v880}"
        let v884 : unit = ()
        let v885 : (unit -> unit) = closure10(v879, v881)
        let v886 : unit = (fun () -> v885 (); v884) ()
        let v889 : string = "exit_code"
        let v890 : string = $"{v889}"
        let v893 : unit = ()
        let v894 : (unit -> unit) = closure10(v879, v890)
        let v895 : unit = (fun () -> v894 (); v893) ()
        let v898 : string = " = "
        let v899 : string = $"{v898}"
        let v902 : unit = ()
        let v903 : (unit -> unit) = closure10(v879, v899)
        let v904 : unit = (fun () -> v903 (); v902) ()
        let v907 : string = $"{v2}"
        let v910 : unit = ()
        let v911 : (unit -> unit) = closure10(v879, v907)
        let v912 : unit = (fun () -> v911 (); v910) ()
        let v915 : string = "; "
        let v916 : string = $"{v915}"
        let v919 : unit = ()
        let v920 : (unit -> unit) = closure10(v879, v916)
        let v921 : unit = (fun () -> v920 (); v919) ()
        let v924 : string = "cargo_result"
        let v925 : string = $"{v924}"
        let v928 : unit = ()
        let v929 : (unit -> unit) = closure10(v879, v925)
        let v930 : unit = (fun () -> v929 (); v928) ()
        let v933 : string = $"{v898}"
        let v936 : unit = ()
        let v937 : (unit -> unit) = closure10(v879, v933)
        let v938 : unit = (fun () -> v937 (); v936) ()
        let v941 : string = $"{v1}"
        let v944 : unit = ()
        let v945 : (unit -> unit) = closure10(v879, v941)
        let v946 : unit = (fun () -> v945 (); v944) ()
        let v949 : string = $"{v915}"
        let v952 : unit = ()
        let v953 : (unit -> unit) = closure10(v879, v949)
        let v954 : unit = (fun () -> v953 (); v952) ()
        let v957 : string = "new_code_path"
        let v958 : string = $"{v957}"
        let v961 : unit = ()
        let v962 : (unit -> unit) = closure10(v879, v958)
        let v963 : unit = (fun () -> v962 (); v961) ()
        let v966 : string = $"{v898}"
        let v969 : unit = ()
        let v970 : (unit -> unit) = closure10(v879, v966)
        let v971 : unit = (fun () -> v970 (); v969) ()
        let v974 : string = $"{v0}"
        let v977 : unit = ()
        let v978 : (unit -> unit) = closure10(v879, v974)
        let v979 : unit = (fun () -> v978 (); v977) ()
        let v982 : string = $"{v915}"
        let v985 : unit = ()
        let v986 : (unit -> unit) = closure10(v879, v982)
        let v987 : unit = (fun () -> v986 (); v985) ()
        let v990 : string = "wasm_path"
        let v991 : string = $"{v990}"
        let v994 : unit = ()
        let v995 : (unit -> unit) = closure10(v879, v991)
        let v996 : unit = (fun () -> v995 (); v994) ()
        let v999 : string = $"{v898}"
        let v1002 : unit = ()
        let v1003 : (unit -> unit) = closure10(v879, v999)
        let v1004 : unit = (fun () -> v1003 (); v1002) ()
        let v1007 : string = $"{v3}"
        let v1010 : unit = ()
        let v1011 : (unit -> unit) = closure10(v879, v1007)
        let v1012 : unit = (fun () -> v1011 (); v1010) ()
        let v1015 : string = $"{v915}"
        let v1018 : unit = ()
        let v1019 : (unit -> unit) = closure10(v879, v1015)
        let v1020 : unit = (fun () -> v1019 (); v1018) ()
        let v1023 : string = "command"
        let v1024 : string = $"{v1023}"
        let v1027 : unit = ()
        let v1028 : (unit -> unit) = closure10(v879, v1024)
        let v1029 : unit = (fun () -> v1028 (); v1027) ()
        let v1032 : string = $"{v898}"
        let v1035 : unit = ()
        let v1036 : (unit -> unit) = closure10(v879, v1032)
        let v1037 : unit = (fun () -> v1036 (); v1035) ()
        let v1040 : string = $"{v4}"
        let v1043 : unit = ()
        let v1044 : (unit -> unit) = closure10(v879, v1040)
        let v1045 : unit = (fun () -> v1044 (); v1043) ()
        let v1048 : string = " }"
        let v1049 : string = $"{v1048}"
        let v1052 : unit = ()
        let v1053 : (unit -> unit) = closure10(v879, v1049)
        let v1054 : unit = (fun () -> v1053 (); v1052) ()
        let v1057 : string = v879.l0
        let v1058 : (unit -> string) = closure124()
        let v1059 : string = $"{v487} {v871} #{v877} %s{v1058 ()} / {v1057}"
        let v1062 : char list = []
        let v1063 : (char list -> (char [])) = List.toArray
        let v1064 : (char []) = v1063 v1062
        let v1067 : string = v1059.TrimStart v1064 
        let v1085 : char list = []
        let v1086 : char list = '/' :: v1085 
        let v1089 : char list = ' ' :: v1086 
        let v1092 : (char list -> (char [])) = List.toArray
        let v1093 : (char []) = v1092 v1089
        let v1096 : string = v1067.TrimEnd v1093 
        let v1114 : (string -> unit) = closure12()
        let v1115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1116 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1096 v1116 
        let _v1115 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1117 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1096 v1117 
        let _v1115 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1118 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1096 v1118 
        let _v1115 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1114 v1096
        let _v1115 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1114 v1096
        let _v1115 = () 
        #endif
#else
        v1114 v1096
        let _v1115 = () 
        #endif
        _v1115 
        let v1119 : (string -> unit) = v21.l0
        v1119 v1096
and closure126 () () : string =
    let v0 : string = "spiral_builder.process_rust / cleanup"
    v0
and closure125 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure2()
    let v13 : unit = (fun () -> v12 (); v11) ()
    let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : int64 option) = State.trace_state.Value
    let v41 : unit = ()
    let v42 : unit = (fun () -> v12 (); v41) ()
    let struct (v55 : Mut0, v56 : Mut1, v57 : Mut2, v58 : Mut3, v59 : int64 option) = State.trace_state.Value
    let v70 : US0 = v58.l0
    let v71 : bool = v57.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 0 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure7(v26)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v12 (); v81) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : int64 option) = State.trace_state.Value
        let v110 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v111 : US3 option = None
        let _v111 = ref v111 
        let v112 : US3 option ref = _v111 
        let v113 : (US3 option -> US3 option ref) = closure8(v112)
        let v114 : unit = ()
        let v115 : (unit -> unit) = closure9(v99, v113)
        let v116 : unit = (fun () -> v115 (); v114) ()
        let v119 : US3 option = _v111.Value 
        let v130 : US3 = US3_1
        let v131 : US3 = v119 |> Option.defaultValue v130 
        let v171 : System.DateTime =
            match v131 with
            | US3_1 -> (* None *)
                let v167 : System.DateTime = System.DateTime.Now
                v167
            | US3_0(v135) -> (* Some *)
                let v136 : System.DateTime = System.DateTime.Now
                let v139 : (System.DateTime -> int64) = _.Ticks
                let v140 : int64 = v139 v136
                let v143 : int64 = v140 - v135
                let v144 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v145 : System.TimeSpan = v144 v143
                let v148 : (System.TimeSpan -> int32) = _.Hours
                let v149 : int32 = v148 v145
                let v152 : (System.TimeSpan -> int32) = _.Minutes
                let v153 : int32 = v152 v145
                let v156 : (System.TimeSpan -> int32) = _.Seconds
                let v157 : int32 = v156 v145
                let v160 : (System.TimeSpan -> int32) = _.Milliseconds
                let v161 : int32 = v160 v145
                let v164 : System.DateTime = System.DateTime (1, 1, 1, v149, v153, v157, v161)
                v164
        let v172 : string = method6()
        let v175 : (string -> string) = v171.ToString
        let v176 : string = v175 v172
        let _v110 = v176 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v179 : US3 option = None
        let _v179 = ref v179 
        let v180 : US3 option ref = _v179 
        let v181 : (US3 option -> US3 option ref) = closure8(v180)
        let v182 : unit = ()
        let v183 : (unit -> unit) = closure9(v99, v181)
        let v184 : unit = (fun () -> v183 (); v182) ()
        let v187 : US3 option = _v179.Value 
        let v198 : US3 = US3_1
        let v199 : US3 = v187 |> Option.defaultValue v198 
        let v239 : System.DateTime =
            match v199 with
            | US3_1 -> (* None *)
                let v235 : System.DateTime = System.DateTime.Now
                v235
            | US3_0(v203) -> (* Some *)
                let v204 : System.DateTime = System.DateTime.Now
                let v207 : (System.DateTime -> int64) = _.Ticks
                let v208 : int64 = v207 v204
                let v211 : int64 = v208 - v203
                let v212 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v213 : System.TimeSpan = v212 v211
                let v216 : (System.TimeSpan -> int32) = _.Hours
                let v217 : int32 = v216 v213
                let v220 : (System.TimeSpan -> int32) = _.Minutes
                let v221 : int32 = v220 v213
                let v224 : (System.TimeSpan -> int32) = _.Seconds
                let v225 : int32 = v224 v213
                let v228 : (System.TimeSpan -> int32) = _.Milliseconds
                let v229 : int32 = v228 v213
                let v232 : System.DateTime = System.DateTime (1, 1, 1, v217, v221, v225, v229)
                v232
        let v240 : string = method6()
        let v243 : (string -> string) = v239.ToString
        let v244 : string = v243 v240
        let _v110 = v244 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v247 : string = $"near_sdk::env::block_timestamp()"
        let v248 : uint64 = Fable.Core.RustInterop.emitRustExpr () v247 
        let v249 : US3 option = None
        let _v249 = ref v249 
        let v250 : US3 option ref = _v249 
        let v251 : (US3 option -> US3 option ref) = closure8(v250)
        let v252 : unit = ()
        let v253 : (unit -> unit) = closure9(v99, v251)
        let v254 : unit = (fun () -> v253 (); v252) ()
        let v257 : US3 option = _v249.Value 
        let v268 : US3 = US3_1
        let v269 : US3 = v257 |> Option.defaultValue v268 
        let v278 : uint64 =
            match v269 with
            | US3_1 -> (* None *)
                v248
            | US3_0(v273) -> (* Some *)
                let v274 : (int64 -> uint64) = uint64
                let v275 : uint64 = v274 v273
                let v276 : uint64 = v248 - v275
                v276
        let v279 : uint64 = v278 / 1000000000UL
        let v280 : uint64 = v279 % 60UL
        let v281 : uint64 = v279 / 60UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v279 / 3600UL
        let v284 : uint64 = v283 % 24UL
        let v285 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v284, v282, v280) v285 
        let v287 : string = "fable_library_rust::String_::fromString($0)"
        let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
        let _v110 = v288 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v289 : US3 option = None
        let _v289 = ref v289 
        let v290 : US3 option ref = _v289 
        let v291 : (US3 option -> US3 option ref) = closure8(v290)
        let v292 : unit = ()
        let v293 : (unit -> unit) = closure9(v99, v291)
        let v294 : unit = (fun () -> v293 (); v292) ()
        let v297 : US3 option = _v289.Value 
        let v308 : US3 = US3_1
        let v309 : US3 = v297 |> Option.defaultValue v308 
        let v349 : System.DateTime =
            match v309 with
            | US3_1 -> (* None *)
                let v345 : System.DateTime = System.DateTime.Now
                v345
            | US3_0(v313) -> (* Some *)
                let v314 : System.DateTime = System.DateTime.Now
                let v317 : (System.DateTime -> int64) = _.Ticks
                let v318 : int64 = v317 v314
                let v321 : int64 = v318 - v313
                let v322 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v323 : System.TimeSpan = v322 v321
                let v326 : (System.TimeSpan -> int32) = _.Hours
                let v327 : int32 = v326 v323
                let v330 : (System.TimeSpan -> int32) = _.Minutes
                let v331 : int32 = v330 v323
                let v334 : (System.TimeSpan -> int32) = _.Seconds
                let v335 : int32 = v334 v323
                let v338 : (System.TimeSpan -> int32) = _.Milliseconds
                let v339 : int32 = v338 v323
                let v342 : System.DateTime = System.DateTime (1, 1, 1, v327, v331, v335, v339)
                v342
        let v350 : string = method7()
        let v353 : (string -> string) = v349.ToString
        let v354 : string = v353 v350
        let _v110 = v354 
        #endif
#if FABLE_COMPILER_PYTHON
        let v357 : US3 option = None
        let _v357 = ref v357 
        let v358 : US3 option ref = _v357 
        let v359 : (US3 option -> US3 option ref) = closure8(v358)
        let v360 : unit = ()
        let v361 : (unit -> unit) = closure9(v99, v359)
        let v362 : unit = (fun () -> v361 (); v360) ()
        let v365 : US3 option = _v357.Value 
        let v376 : US3 = US3_1
        let v377 : US3 = v365 |> Option.defaultValue v376 
        let v417 : System.DateTime =
            match v377 with
            | US3_1 -> (* None *)
                let v413 : System.DateTime = System.DateTime.Now
                v413
            | US3_0(v381) -> (* Some *)
                let v382 : System.DateTime = System.DateTime.Now
                let v385 : (System.DateTime -> int64) = _.Ticks
                let v386 : int64 = v385 v382
                let v389 : int64 = v386 - v381
                let v390 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v391 : System.TimeSpan = v390 v389
                let v394 : (System.TimeSpan -> int32) = _.Hours
                let v395 : int32 = v394 v391
                let v398 : (System.TimeSpan -> int32) = _.Minutes
                let v399 : int32 = v398 v391
                let v402 : (System.TimeSpan -> int32) = _.Seconds
                let v403 : int32 = v402 v391
                let v406 : (System.TimeSpan -> int32) = _.Milliseconds
                let v407 : int32 = v406 v391
                let v410 : System.DateTime = System.DateTime (1, 1, 1, v395, v399, v403, v407)
                v410
        let v418 : string = method7()
        let v421 : (string -> string) = v417.ToString
        let v422 : string = v421 v418
        let _v110 = v422 
        #endif
#else
        let v425 : US3 option = None
        let _v425 = ref v425 
        let v426 : US3 option ref = _v425 
        let v427 : (US3 option -> US3 option ref) = closure8(v426)
        let v428 : unit = ()
        let v429 : (unit -> unit) = closure9(v99, v427)
        let v430 : unit = (fun () -> v429 (); v428) ()
        let v433 : US3 option = _v425.Value 
        let v444 : US3 = US3_1
        let v445 : US3 = v433 |> Option.defaultValue v444 
        let v485 : System.DateTime =
            match v445 with
            | US3_1 -> (* None *)
                let v481 : System.DateTime = System.DateTime.Now
                v481
            | US3_0(v449) -> (* Some *)
                let v450 : System.DateTime = System.DateTime.Now
                let v453 : (System.DateTime -> int64) = _.Ticks
                let v454 : int64 = v453 v450
                let v457 : int64 = v454 - v449
                let v458 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v459 : System.TimeSpan = v458 v457
                let v462 : (System.TimeSpan -> int32) = _.Hours
                let v463 : int32 = v462 v459
                let v466 : (System.TimeSpan -> int32) = _.Minutes
                let v467 : int32 = v466 v459
                let v470 : (System.TimeSpan -> int32) = _.Seconds
                let v471 : int32 = v470 v459
                let v474 : (System.TimeSpan -> int32) = _.Milliseconds
                let v475 : int32 = v474 v459
                let v478 : System.DateTime = System.DateTime (1, 1, 1, v463, v467, v471, v475)
                v478
        let v486 : string = method7()
        let v489 : (string -> string) = v485.ToString
        let v490 : string = v489 v486
        let _v110 = v490 
        #endif
        let v493 : string = _v110 
        
        
        
        
        
        let v563 : string = "Verbose"
        let v564 : (unit -> string) = v563.ToLower
        let v565 : string = v564 ()
        let v568 : string = v565.PadLeft (7, ' ')
        let v582 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v583 : string = "inline_colorization::color_bright_black"
        let v584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "&*$0"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v585 
        let v587 : string = "inline_colorization::color_reset"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "\"{v584}{v586}{v588}\""
        let v590 : string = @$"format!(" + v589 + ")"
        let v591 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "fable_library_rust::String_::fromString($0)"
        let v593 : string = Fable.Core.RustInterop.emitRustExpr v591 v592 
        let _v582 = v593 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v594 : string = "inline_colorization::color_bright_black"
        let v595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "&*$0"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v596 
        let v598 : string = "inline_colorization::color_reset"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "\"{v595}{v597}{v599}\""
        let v601 : string = @$"format!(" + v600 + ")"
        let v602 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "fable_library_rust::String_::fromString($0)"
        let v604 : string = Fable.Core.RustInterop.emitRustExpr v602 v603 
        let _v582 = v604 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v605 : string = "inline_colorization::color_bright_black"
        let v606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "&*$0"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v607 
        let v609 : string = "inline_colorization::color_reset"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "\"{v606}{v608}{v610}\""
        let v612 : string = @$"format!(" + v611 + ")"
        let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "fable_library_rust::String_::fromString($0)"
        let v615 : string = Fable.Core.RustInterop.emitRustExpr v613 v614 
        let _v582 = v615 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v616 : string = "\u001b[90m"
        let v617 : string = method11()
        let v618 : string = v616 + v568 
        let v619 : string = v618 + v617 
        let _v582 = v619 
        #endif
#if FABLE_COMPILER_PYTHON
        let v620 : string = "\u001b[90m"
        let v621 : string = method11()
        let v622 : string = v620 + v568 
        let v623 : string = v622 + v621 
        let _v582 = v623 
        #endif
#else
        let v624 : string = "\u001b[90m"
        let v625 : string = method11()
        let v626 : string = v624 + v568 
        let v627 : string = v626 + v625 
        let _v582 = v627 
        #endif
        let v628 : string = _v582 
        let v634 : int64 = v95.l0
        let v635 : string = method10()
        let v636 : Mut4 = {l0 = v635} : Mut4
        let v637 : string = "{ "
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure10(v636, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = "new_code_path"
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure10(v636, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = " = "
        let v656 : string = $"{v655}"
        let v659 : unit = ()
        let v660 : (unit -> unit) = closure10(v636, v656)
        let v661 : unit = (fun () -> v660 (); v659) ()
        let v664 : string = $"{v0}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure10(v636, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "; "
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure10(v636, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = "cleanup"
        let v682 : string = $"{v681}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v636, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = $"{v655}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v636, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : UH4 = UH4_0
        let v699 : UH4 = UH4_1(v9, v10, v698)
        let v700 : UH4 = UH4_1(v7, v8, v699)
        let v701 : UH4 = UH4_1(v5, v6, v700)
        let v702 : UH4 = UH4_1(v3, v4, v701)
        let v703 : UH4 = UH4_1(v1, v2, v702)
        let v704 : string = $"%A{v703}"
        let v713 : string = $"{v704}"
        let v716 : unit = ()
        let v717 : (unit -> unit) = closure10(v636, v713)
        let v718 : unit = (fun () -> v717 (); v716) ()
        let v721 : string = " }"
        let v722 : string = $"{v721}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v636, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = v636.l0
        let v731 : (unit -> string) = closure126()
        let v732 : string = $"{v493} {v628} #{v634} %s{v731 ()} / {v730}"
        let v735 : char list = []
        let v736 : (char list -> (char [])) = List.toArray
        let v737 : (char []) = v736 v735
        let v740 : string = v732.TrimStart v737 
        let v758 : char list = []
        let v759 : char list = '/' :: v758 
        let v762 : char list = ' ' :: v759 
        let v765 : (char list -> (char [])) = List.toArray
        let v766 : (char []) = v765 v762
        let v769 : string = v740.TrimEnd v766 
        let v787 : (string -> unit) = closure12()
        let v788 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v789 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v789 
        let _v788 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v790 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v790 
        let _v788 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v791 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v791 
        let _v788 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v787 v769
        let _v788 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v787 v769
        let _v788 = () 
        #endif
#else
        v787 v769
        let _v788 = () 
        #endif
        _v788 
        let v792 : (string -> unit) = v27.l0
        v792 v769
and method108 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        let v4 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0).unwrap()"
        Fable.Core.RustInterop.emitRustExpr v1 v5 
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v4 = () 
        #endif
#else
        let v6 : (string -> unit) = System.IO.File.Delete
        v6 v1
        let _v4 = () 
        #endif
        _v4 
        method108(v3)
    | UH4_0 -> (* Nil *)
        ()
and method109 (v0 : async_walkdir_DirEntry) : async_walkdir_DirEntry =
    v0
and closure128 () (v0 : std_fs_FileType) : US40 =
    US40_0(v0)
and closure129 () (v0 : std_string_String) : US40 =
    US40_1(v0)
and method110 (v0 : std_fs_FileType) : std_fs_FileType =
    v0
and method111 (v0 : US41) : US41 =
    v0
and method112 (v0 : async_walkdir_Filtering) : async_walkdir_Filtering =
    v0
and closure127 () (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v1 : string = "true; let __future_init = Box::pin(async { //"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "true; let __future_init = Box::pin(async move { //"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : async_walkdir_DirEntry = method109(v0)
    let v6 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v5))"
    let v7 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "v7.await"
    let v9 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : (std_io_Error -> std_string_String) = method32()
    let v11 : string = "$0.map_err(|x| $1(x))"
    let v12 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v11 
    let v13 : (std_fs_FileType -> US40) = closure128()
    let v14 : (std_string_String -> US40) = closure129()
    let v15 : US40 = match v12 with Ok x -> v13 x | Error x -> v14 x
    let v93 : US41 =
        match v15 with
        | US40_0(v16) -> (* Ok *)
            let v17 : std_fs_FileType = method110(v16)
            let v18 : string = "std::fs::FileType::is_dir(&v17)"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr () v18 
            let v20 : bool = v19 = false
            if v20 then
                US41_0
            else
                let v22 : string = "async_walkdir::DirEntry::path(&$0)"
                let v23 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v0 v22 
                let v24 : string = "$0.display()"
                let v25 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v23 v24 
                let v26 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v27 : string = "format!(\"{}\", $0)"
                let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v27 
                let _v26 = v28 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v29 : string = "format!(\"{}\", $0)"
                let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v29 
                let _v26 = v30 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v31 : string = "format!(\"{}\", $0)"
                let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v31 
                let _v26 = v32 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v33 : std_string_String = null |> unbox<std_string_String>
                let _v26 = v33 
                #endif
#if FABLE_COMPILER_PYTHON
                let v36 : std_string_String = null |> unbox<std_string_String>
                let _v26 = v36 
                #endif
#else
                let v39 : std_string_String = null |> unbox<std_string_String>
                let _v26 = v39 
                #endif
                let v42 : std_string_String = _v26 
                let v47 : string = "fable_library_rust::String_::fromString($0)"
                let v48 : string = Fable.Core.RustInterop.emitRustExpr v42 v47 
                let v49 : string = method26(v48)
                let v50 : string = "fable-library-ts."
                let v51 : bool = v49.StartsWith v50 
                if v51 then
                    US41_2
                else
                    US41_1
        | _ ->
            let v58 : string = "async_walkdir::DirEntry::path(&$0)"
            let v59 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v0 v58 
            let v60 : string = "$0.display()"
            let v61 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v59 v60 
            let v62 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v63 : string = "format!(\"{}\", $0)"
            let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v61 v63 
            let _v62 = v64 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v65 : string = "format!(\"{}\", $0)"
            let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v61 v65 
            let _v62 = v66 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v67 : string = "format!(\"{}\", $0)"
            let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v61 v67 
            let _v62 = v68 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v69 : std_string_String = null |> unbox<std_string_String>
            let _v62 = v69 
            #endif
#if FABLE_COMPILER_PYTHON
            let v72 : std_string_String = null |> unbox<std_string_String>
            let _v62 = v72 
            #endif
#else
            let v75 : std_string_String = null |> unbox<std_string_String>
            let _v62 = v75 
            #endif
            let v78 : std_string_String = _v62 
            let v83 : string = "fable_library_rust::String_::fromString($0)"
            let v84 : string = Fable.Core.RustInterop.emitRustExpr v78 v83 
            let v85 : string = method26(v84)
            let v86 : string = "fable-library-ts."
            let v87 : bool = v85.StartsWith v86 
            if v87 then
                US41_2
            else
                US41_1
    let v94 : US41 = method111(v93)
    let v95 : string = ""
    let v96 : string = "}"
    let v97 : string = v95 + v96 
    let v98 : string = "true; v94 " + v97 + "); " + v95 + " // rust.fix_closure'"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = "__future_init"
    let v101 : _ = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "v101"
    let v103 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US41>>, Send<Dyn<std_future_Future<US41>>>>>> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : string = "v103.await"
    let v105 : US41 = Fable.Core.RustInterop.emitRustExpr () v104 
    let v114 : async_walkdir_Filtering =
        match v105 with
        | US41_2 -> (* Continue *)
            let v110 : string = "async_walkdir::Filtering::Continue"
            let v111 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v110 
            v111
        | US41_0 -> (* Ignore *)
            let v106 : string = "async_walkdir::Filtering::Ignore"
            let v107 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v106 
            v107
        | US41_1 -> (* IgnoreDir *)
            let v108 : string = "async_walkdir::Filtering::IgnoreDir"
            let v109 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v108 
            v109
    let v115 : async_walkdir_Filtering = method112(v114)
    let v116 : string = v95 + v96 
    let v117 : string = "true; v115 " + v116 + "); " + v95 + " // rust.fix_closure'"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr () v117 
    let v119 : string = "__future_init"
    let v120 : _ = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : string = "v120"
    let v122 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v121 
    v122
and closure131 () (v0 : async_walkdir_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method114 () : (async_walkdir_Error -> std_string_String) =
    closure131()
and closure132 () (v0 : async_walkdir_DirEntry) : US42 =
    US42_0(v0)
and closure133 () (v0 : std_string_String) : US42 =
    US42_1(v0)
and closure135 () () : string =
    let v0 : string = "spiral_builder.process_typescript / stream_filter_map"
    v0
and closure134 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v798 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method8()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method8()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method8()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method9()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method9()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method9()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US0 = US0_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure10(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US0 = US0_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure10(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US1 =
                    if v662 then
                        let v665 : string = "Debug"
                        US1_0(v665)
                    else
                        US1_1
                match v668 with
                | US1_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method8()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method8()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method8()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method9()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method9()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method9()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US0 = US0_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure10(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US0 = US0_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure10(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US1 =
                        if v721 then
                            let v724 : string = "Info"
                            US1_0(v724)
                        else
                            US1_1
                    match v727 with
                    | US1_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method8()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method8()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method8()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method9()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method9()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method9()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US0 = US0_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure10(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US0 = US0_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure10(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US1 =
                            if v780 then
                                let v783 : string = "Warning"
                                US1_0(v783)
                            else
                                US1_1
                        match v786 with
                        | US1_1 -> (* None *)
                            let v789 : string = "Critical"
                            US1_0(v789)
                        | US1_0(v787) -> (* Some *)
                            US1_0(v787)
                    | US1_0(v728) -> (* Some *)
                        US1_0(v728)
                | US1_0(v669) -> (* Some *)
                    US1_0(v669)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v802 : string =
            match v798 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method11()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method11()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method11()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure10(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "error"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure10(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure10(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v904 : string = "format!(\"{:#?}\", $0)"
        let v905 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v904 
        let v906 : string = "fable_library_rust::String_::fromString($0)"
        let v907 : string = Fable.Core.RustInterop.emitRustExpr v905 v906 
        let _v903 = v907 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v908 : string = "format!(\"{:#?}\", $0)"
        let v909 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v908 
        let v910 : string = "fable_library_rust::String_::fromString($0)"
        let v911 : string = Fable.Core.RustInterop.emitRustExpr v909 v910 
        let _v903 = v911 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v912 : string = "format!(\"{:#?}\", $0)"
        let v913 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v912 
        let v914 : string = "fable_library_rust::String_::fromString($0)"
        let v915 : string = Fable.Core.RustInterop.emitRustExpr v913 v914 
        let _v903 = v915 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v916 : string = $"%A{v0}"
        let _v903 = v916 
        #endif
#if FABLE_COMPILER_PYTHON
        let v919 : string = $"%A{v0}"
        let _v903 = v919 
        #endif
#else
        let v922 : string = $"%A{v0}"
        let _v903 = v922 
        #endif
        let v925 : string = _v903 
        let v930 : string = $"{v925}"
        let v933 : unit = ()
        let v934 : (unit -> unit) = closure10(v875, v930)
        let v935 : unit = (fun () -> v934 (); v933) ()
        let v938 : string = " }"
        let v939 : string = $"{v938}"
        let v942 : unit = ()
        let v943 : (unit -> unit) = closure10(v875, v939)
        let v944 : unit = (fun () -> v943 (); v942) ()
        let v947 : string = v875.l0
        let v948 : (unit -> string) = closure135()
        let v949 : string = $"{v483} {v867} #{v873} %s{v948 ()} / {v947}"
        let v952 : char list = []
        let v953 : (char list -> (char [])) = List.toArray
        let v954 : (char []) = v953 v952
        let v957 : string = v949.TrimStart v954 
        let v975 : char list = []
        let v976 : char list = '/' :: v975 
        let v979 : char list = ' ' :: v976 
        let v982 : (char list -> (char [])) = List.toArray
        let v983 : (char []) = v982 v979
        let v986 : string = v957.TrimEnd v983 
        let v1004 : (string -> unit) = closure12()
        let v1005 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1006 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1006 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1007 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1007 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1008 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v986 v1008 
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1004 v986
        let _v1005 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1004 v986
        let _v1005 = () 
        #endif
#else
        v1004 v986
        let _v1005 = () 
        #endif
        _v1005 
        let v1009 : (string -> unit) = v17.l0
        v1009 v986
and closure130 () (v0 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v1 : (async_walkdir_Error -> std_string_String) = method114()
    let v2 : string = "$0.map_err(|x| $1(x))"
    let v3 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v2 
    let v4 : (async_walkdir_DirEntry -> US42) = closure132()
    let v5 : (std_string_String -> US42) = closure133()
    let v6 : US42 = match v3 with Ok x -> v4 x | Error x -> v5 x
    let v1170 : US43 =
        match v6 with
        | US42_1(v155) -> (* Error *)
            let v156 : unit = ()
            let v157 : (unit -> unit) = closure134(v155)
            let v158 : unit = (fun () -> v157 (); v156) ()
            US43_1
        | US42_0(v7) -> (* Ok *)
            let v8 : string = "async_walkdir::DirEntry::path(&$0)"
            let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
            let v10 : string = "$0.display()"
            let v11 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v9 v10 
            let v12 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v13 : string = "format!(\"{}\", $0)"
            let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v13 
            let _v12 = v14 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v15 : string = "format!(\"{}\", $0)"
            let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v15 
            let _v12 = v16 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v17 : string = "format!(\"{}\", $0)"
            let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v17 
            let _v12 = v18 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v19 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v19 
            #endif
#if FABLE_COMPILER_PYTHON
            let v22 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v22 
            #endif
#else
            let v25 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v25 
            #endif
            let v28 : std_string_String = _v12 
            let v33 : string = "fable_library_rust::String_::fromString($0)"
            let v34 : string = Fable.Core.RustInterop.emitRustExpr v28 v33 
            let v35 : string = "ts"
            let v36 : string = $"fable-library-{v35}\.(?<a>[\d.]+)$"
            let v37 : string = $"regex::Regex::new(&$0)"
            let v38 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v36 v37 
            let v39 : string = "$0.unwrap()"
            let v40 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let v41 : string = "&*$0"
            let v42 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v34 v41 
            let v43 : string = "String::from($0)"
            let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : string = "true; let _capture_move = (move || { //"
            let v46 : bool = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "Box::new($0)"
            let v48 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v44 v47 
            let v49 : string = "Box::leak($0)"
            let v50 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v48 v49 
            let v51 : string = $"v40.captures_iter(v50)"
            let v52 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v51 
            let v53 : string = "true; let _regex_captures : Vec<_> = v52.map(|x| { //"
            let v54 : bool = Fable.Core.RustInterop.emitRustExpr () v53 
            let v55 : string = $"x"
            let v56 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v55 
            let v57 : string = "Box::new($0)"
            let v58 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let v59 : string = "Box::leak($0)"
            let v60 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v58 v59 
            let v61 : string = $"$0.capture_names()"
            let v62 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v40 v61 
            let v63 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v62.map(|x| { //"
            let v64 : bool = Fable.Core.RustInterop.emitRustExpr () v63 
            let v65 : string = "x.unwrap_or(\"\").to_string().into()"
            let v66 : string = Fable.Core.RustInterop.emitRustExpr () v65 
            let v67 : string = "$0.clone()"
            let v68 : string = Fable.Core.RustInterop.emitRustExpr v66 v67 
            let v69 : string = $"v60.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v70 : string = Fable.Core.RustInterop.emitRustExpr v66 v69 
            let v71 : (string * string) = v68, v70 
            let v72 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v73 : bool = Fable.Core.RustInterop.emitRustExpr v71 v72 
            let v74 : string = "_regex_captures"
            let v75 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v74 
            let v76 : string = "true; $0 }).collect::<Vec<_>>()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
            let v78 : string = "_regex_captures"
            let v79 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v78 
            let v80 : string = "true; $0 })()"
            let v81 : bool = Fable.Core.RustInterop.emitRustExpr v79 v80 
            let v82 : string = "_capture_move"
            let v83 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v82 
            let v84 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v85 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v83 v84 
            let v86 : std_collections_HashMap<string, string> option = v85 |> Array.tryItem 0 
            let v87 : US37 option = None
            let _v87 = ref v87 
            let v88 : US37 option ref = _v87 
            let v89 : (US37 option -> US37 option ref) = closure109(v88)
            let v90 : unit = ()
            let v91 : (unit -> unit) = closure110(v86, v89)
            let v92 : unit = (fun () -> v91 (); v90) ()
            let v95 : US37 option = _v87.Value 
            let v106 : US37 = US37_1
            let v107 : US37 = v95 |> Option.defaultValue v106 
            let v142 : US38 =
                match v107 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v111) -> (* Some *)
                    let v112 : string = method107()
                    let v113 : string = "std::collections::HashMap::get(&$0, &v112).map(|x| x).cloned()"
                    let v114 : string option = Fable.Core.RustInterop.emitRustExpr v111 v113 
                    let v115 : US1 option = None
                    let _v115 = ref v115 
                    let v116 : US1 option ref = _v115 
                    let v117 : (US1 option -> US1 option ref) = closure3(v116)
                    let v118 : unit = ()
                    let v119 : (unit -> unit) = closure4(v114, v117)
                    let v120 : unit = (fun () -> v119 (); v118) ()
                    let v123 : US1 option = _v115.Value 
                    let v134 : US1 = US1_1
                    let v135 : US1 = v123 |> Option.defaultValue v134 
                    US38_0(v135)
            let v149 : US1 =
                match v142 with
                | US38_0(v143) -> (* Some *)
                    match v143 with
                    | US1_0(v144) -> (* Some *)
                        US1_0(v144)
                    | _ ->
                        US1_1
                | _ ->
                    US1_1
            match v149 with
            | US1_1 -> (* None *)
                US43_1
            | US1_0(v151) -> (* Some *)
                US43_0(v34, v151)
    match v1170 with
    | US43_1 -> (* None *)
        let v1176 : struct (string * string) option = None
        v1176
    | US43_0(v1171, v1172) -> (* Some *)
        let v1173 : struct (string * string) option = Some struct (v1171, v1172) 
        v1173
and method113 () : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure130()
and closure136 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure137 (v0 : US43 option ref) (v1 : US43 option) : US43 option ref =
    v0.Value <- v1 
    v0
and closure138 (v0 : struct (string * string) option, v1 : (US43 option -> US43 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v2 : string, v3 : string) = x
    let v4 : US43 = US43_0(v2, v3)
    v4 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure140 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure139 (v0 : US43) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 1 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_1
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v615 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : string = "Debug"
                US1_0(v612)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v619 : string =
            match v615 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v616) -> (* Some *)
                v616
        let v620 : (unit -> string) = v619.ToLower
        let v621 : string = v620 ()
        let v624 : string = v621.PadLeft (7, ' ')
        let v638 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v639 : string = "inline_colorization::color_bright_blue"
        let v640 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v639 
        let v641 : string = "&*$0"
        let v642 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v641 
        let v643 : string = "inline_colorization::color_reset"
        let v644 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v643 
        let v645 : string = "\"{v640}{v642}{v644}\""
        let v646 : string = @$"format!(" + v645 + ")"
        let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v646 
        let v648 : string = "fable_library_rust::String_::fromString($0)"
        let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
        let _v638 = v649 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v650 : string = "inline_colorization::color_bright_blue"
        let v651 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v650 
        let v652 : string = "&*$0"
        let v653 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v652 
        let v654 : string = "inline_colorization::color_reset"
        let v655 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v654 
        let v656 : string = "\"{v651}{v653}{v655}\""
        let v657 : string = @$"format!(" + v656 + ")"
        let v658 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v657 
        let v659 : string = "fable_library_rust::String_::fromString($0)"
        let v660 : string = Fable.Core.RustInterop.emitRustExpr v658 v659 
        let _v638 = v660 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v661 : string = "inline_colorization::color_bright_blue"
        let v662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v661 
        let v663 : string = "&*$0"
        let v664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v663 
        let v665 : string = "inline_colorization::color_reset"
        let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v665 
        let v667 : string = "\"{v662}{v664}{v666}\""
        let v668 : string = @$"format!(" + v667 + ")"
        let v669 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v668 
        let v670 : string = "fable_library_rust::String_::fromString($0)"
        let v671 : string = Fable.Core.RustInterop.emitRustExpr v669 v670 
        let _v638 = v671 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v672 : string = "\u001b[94m"
        let v673 : string = method11()
        let v674 : string = v672 + v624 
        let v675 : string = v674 + v673 
        let _v638 = v675 
        #endif
#if FABLE_COMPILER_PYTHON
        let v676 : string = "\u001b[94m"
        let v677 : string = method11()
        let v678 : string = v676 + v624 
        let v679 : string = v678 + v677 
        let _v638 = v679 
        #endif
#else
        let v680 : string = "\u001b[94m"
        let v681 : string = method11()
        let v682 : string = v680 + v624 
        let v683 : string = v682 + v681 
        let _v638 = v683 
        #endif
        let v684 : string = _v638 
        let v690 : int64 = v85.l0
        let v691 : string = method10()
        let v692 : Mut4 = {l0 = v691} : Mut4
        let v693 : string = "{ "
        let v694 : string = $"{v693}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v692, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = "version"
        let v703 : string = $"{v702}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v692, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = " = "
        let v712 : string = $"{v711}"
        let v715 : unit = ()
        let v716 : (unit -> unit) = closure10(v692, v712)
        let v717 : unit = (fun () -> v716 (); v715) ()
        let v720 : string = $"%A{v0}"
        let v723 : string = $"{v720}"
        let v726 : unit = ()
        let v727 : (unit -> unit) = closure10(v692, v723)
        let v728 : unit = (fun () -> v727 (); v726) ()
        let v731 : string = " }"
        let v732 : string = $"{v731}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure10(v692, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = v692.l0
        let v741 : (unit -> string) = closure140()
        let v742 : string = $"{v483} {v684} #{v690} %s{v741 ()} / {v740}"
        let v745 : char list = []
        let v746 : (char list -> (char [])) = List.toArray
        let v747 : (char []) = v746 v745
        let v750 : string = v742.TrimStart v747 
        let v768 : char list = []
        let v769 : char list = '/' :: v768 
        let v772 : char list = ' ' :: v769 
        let v775 : (char list -> (char [])) = List.toArray
        let v776 : (char []) = v775 v772
        let v779 : string = v750.TrimEnd v776 
        let v797 : (string -> unit) = closure12()
        let v798 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v799 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v779 v799 
        let _v798 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v800 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v779 v800 
        let _v798 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v801 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v779 v801 
        let _v798 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v797 v779
        let _v798 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v797 v779
        let _v798 = () 
        #endif
#else
        v797 v779
        let _v798 = () 
        #endif
        _v798 
        let v802 : (string -> unit) = v17.l0
        v802 v779
and closure142 () () : string =
    let v0 : string = $"spiral_builder.process_typescript"
    v0
and closure141 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_4
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v799 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v614 : string = method8()
                let _v613 = v614 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v615 : string = method8()
                let _v613 = v615 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v616 : string = method8()
                let _v613 = v616 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v617 : string = method9()
                let _v613 = v617 
                #endif
#if FABLE_COMPILER_PYTHON
                let v618 : string = method9()
                let _v613 = v618 
                #endif
#else
                let v619 : string = method9()
                let _v613 = v619 
                #endif
                let v620 : string = _v613 
                let v625 : string = method10()
                let v626 : Mut4 = {l0 = v625} : Mut4
                let v627 : US0 = US0_1
                let v628 : string = $"%A{v627}"
                let v632 : string = $"{v628}"
                let v635 : unit = ()
                let v636 : (unit -> unit) = closure10(v626, v632)
                let v637 : unit = (fun () -> v636 (); v635) ()
                let v640 : string = v626.l0
                let v641 : (string []) = v640.Split v620 
                let v644 : string = v641.[int 0]
                let v647 : string = method10()
                let v648 : Mut4 = {l0 = v647} : Mut4
                let v649 : US0 = US0_4
                let v650 : string = $"%A{v649}"
                let v654 : string = $"{v650}"
                let v657 : unit = ()
                let v658 : (unit -> unit) = closure10(v648, v654)
                let v659 : unit = (fun () -> v658 (); v657) ()
                let v662 : string = v648.l0
                let v663 : bool = v662.StartsWith v644 
                let v669 : US1 =
                    if v663 then
                        let v666 : string = "Debug"
                        US1_0(v666)
                    else
                        US1_1
                match v669 with
                | US1_1 -> (* None *)
                    let v672 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v673 : string = method8()
                    let _v672 = v673 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v674 : string = method8()
                    let _v672 = v674 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v675 : string = method8()
                    let _v672 = v675 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v676 : string = method9()
                    let _v672 = v676 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v677 : string = method9()
                    let _v672 = v677 
                    #endif
#else
                    let v678 : string = method9()
                    let _v672 = v678 
                    #endif
                    let v679 : string = _v672 
                    let v684 : string = method10()
                    let v685 : Mut4 = {l0 = v684} : Mut4
                    let v686 : US0 = US0_2
                    let v687 : string = $"%A{v686}"
                    let v691 : string = $"{v687}"
                    let v694 : unit = ()
                    let v695 : (unit -> unit) = closure10(v685, v691)
                    let v696 : unit = (fun () -> v695 (); v694) ()
                    let v699 : string = v685.l0
                    let v700 : (string []) = v699.Split v679 
                    let v703 : string = v700.[int 0]
                    let v706 : string = method10()
                    let v707 : Mut4 = {l0 = v706} : Mut4
                    let v708 : US0 = US0_4
                    let v709 : string = $"%A{v708}"
                    let v713 : string = $"{v709}"
                    let v716 : unit = ()
                    let v717 : (unit -> unit) = closure10(v707, v713)
                    let v718 : unit = (fun () -> v717 (); v716) ()
                    let v721 : string = v707.l0
                    let v722 : bool = v721.StartsWith v703 
                    let v728 : US1 =
                        if v722 then
                            let v725 : string = "Info"
                            US1_0(v725)
                        else
                            US1_1
                    match v728 with
                    | US1_1 -> (* None *)
                        let v731 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v732 : string = method8()
                        let _v731 = v732 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v733 : string = method8()
                        let _v731 = v733 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v734 : string = method8()
                        let _v731 = v734 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v735 : string = method9()
                        let _v731 = v735 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v736 : string = method9()
                        let _v731 = v736 
                        #endif
#else
                        let v737 : string = method9()
                        let _v731 = v737 
                        #endif
                        let v738 : string = _v731 
                        let v743 : string = method10()
                        let v744 : Mut4 = {l0 = v743} : Mut4
                        let v745 : US0 = US0_3
                        let v746 : string = $"%A{v745}"
                        let v750 : string = $"{v746}"
                        let v753 : unit = ()
                        let v754 : (unit -> unit) = closure10(v744, v750)
                        let v755 : unit = (fun () -> v754 (); v753) ()
                        let v758 : string = v744.l0
                        let v759 : (string []) = v758.Split v738 
                        let v762 : string = v759.[int 0]
                        let v765 : string = method10()
                        let v766 : Mut4 = {l0 = v765} : Mut4
                        let v767 : US0 = US0_4
                        let v768 : string = $"%A{v767}"
                        let v772 : string = $"{v768}"
                        let v775 : unit = ()
                        let v776 : (unit -> unit) = closure10(v766, v772)
                        let v777 : unit = (fun () -> v776 (); v775) ()
                        let v780 : string = v766.l0
                        let v781 : bool = v780.StartsWith v762 
                        let v787 : US1 =
                            if v781 then
                                let v784 : string = "Warning"
                                US1_0(v784)
                            else
                                US1_1
                        match v787 with
                        | US1_1 -> (* None *)
                            let v790 : string = "Critical"
                            US1_0(v790)
                        | US1_0(v788) -> (* Some *)
                            US1_0(v788)
                    | US1_0(v729) -> (* Some *)
                        US1_0(v729)
                | US1_0(v670) -> (* Some *)
                    US1_0(v670)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v803 : string =
            match v799 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v800) -> (* Some *)
                v800
        let v804 : (unit -> string) = v803.ToLower
        let v805 : string = v804 ()
        let v808 : string = v805.PadLeft (7, ' ')
        let v822 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v823 : string = "inline_colorization::color_bright_red"
        let v824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v823 
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v825 
        let v827 : string = "inline_colorization::color_reset"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "\"{v824}{v826}{v828}\""
        let v830 : string = @$"format!(" + v829 + ")"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v830 
        let v832 : string = "fable_library_rust::String_::fromString($0)"
        let v833 : string = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let _v822 = v833 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = "inline_colorization::color_bright_red"
        let v835 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "&*$0"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v836 
        let v838 : string = "inline_colorization::color_reset"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v838 
        let v840 : string = "\"{v835}{v837}{v839}\""
        let v841 : string = @$"format!(" + v840 + ")"
        let v842 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v841 
        let v843 : string = "fable_library_rust::String_::fromString($0)"
        let v844 : string = Fable.Core.RustInterop.emitRustExpr v842 v843 
        let _v822 = v844 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v845 : string = "inline_colorization::color_bright_red"
        let v846 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v845 
        let v847 : string = "&*$0"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v847 
        let v849 : string = "inline_colorization::color_reset"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v849 
        let v851 : string = "\"{v846}{v848}{v850}\""
        let v852 : string = @$"format!(" + v851 + ")"
        let v853 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v852 
        let v854 : string = "fable_library_rust::String_::fromString($0)"
        let v855 : string = Fable.Core.RustInterop.emitRustExpr v853 v854 
        let _v822 = v855 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v856 : string = "\u001b[91m"
        let v857 : string = method11()
        let v858 : string = v856 + v808 
        let v859 : string = v858 + v857 
        let _v822 = v859 
        #endif
#if FABLE_COMPILER_PYTHON
        let v860 : string = "\u001b[91m"
        let v861 : string = method11()
        let v862 : string = v860 + v808 
        let v863 : string = v862 + v861 
        let _v822 = v863 
        #endif
#else
        let v864 : string = "\u001b[91m"
        let v865 : string = method11()
        let v866 : string = v864 + v808 
        let v867 : string = v866 + v865 
        let _v822 = v867 
        #endif
        let v868 : string = _v822 
        let v874 : int64 = v86.l0
        let v875 : string = method10()
        let v876 : Mut4 = {l0 = v875} : Mut4
        let v877 : string = "{ "
        let v878 : string = $"{v877}"
        let v881 : unit = ()
        let v882 : (unit -> unit) = closure10(v876, v878)
        let v883 : unit = (fun () -> v882 (); v881) ()
        let v886 : string = "exit_code"
        let v887 : string = $"{v886}"
        let v890 : unit = ()
        let v891 : (unit -> unit) = closure10(v876, v887)
        let v892 : unit = (fun () -> v891 (); v890) ()
        let v895 : string = " = "
        let v896 : string = $"{v895}"
        let v899 : unit = ()
        let v900 : (unit -> unit) = closure10(v876, v896)
        let v901 : unit = (fun () -> v900 (); v899) ()
        let v904 : string = $"{v1}"
        let v907 : unit = ()
        let v908 : (unit -> unit) = closure10(v876, v904)
        let v909 : unit = (fun () -> v908 (); v907) ()
        let v912 : string = "; "
        let v913 : string = $"{v912}"
        let v916 : unit = ()
        let v917 : (unit -> unit) = closure10(v876, v913)
        let v918 : unit = (fun () -> v917 (); v916) ()
        let v921 : string = "dotnet_fable_result"
        let v922 : string = $"{v921}"
        let v925 : unit = ()
        let v926 : (unit -> unit) = closure10(v876, v922)
        let v927 : unit = (fun () -> v926 (); v925) ()
        let v930 : string = $"{v895}"
        let v933 : unit = ()
        let v934 : (unit -> unit) = closure10(v876, v930)
        let v935 : unit = (fun () -> v934 (); v933) ()
        let v938 : string = $"{v0}"
        let v941 : unit = ()
        let v942 : (unit -> unit) = closure10(v876, v938)
        let v943 : unit = (fun () -> v942 (); v941) ()
        let v946 : string = " }"
        let v947 : string = $"{v946}"
        let v950 : unit = ()
        let v951 : (unit -> unit) = closure10(v876, v947)
        let v952 : unit = (fun () -> v951 (); v950) ()
        let v955 : string = v876.l0
        let v956 : (unit -> string) = closure142()
        let v957 : string = $"{v484} {v868} #{v874} %s{v956 ()} / {v955}"
        let v960 : char list = []
        let v961 : (char list -> (char [])) = List.toArray
        let v962 : (char []) = v961 v960
        let v965 : string = v957.TrimStart v962 
        let v983 : char list = []
        let v984 : char list = '/' :: v983 
        let v987 : char list = ' ' :: v984 
        let v990 : (char list -> (char [])) = List.toArray
        let v991 : (char []) = v990 v987
        let v994 : string = v965.TrimEnd v991 
        let v1012 : (string -> unit) = closure12()
        let v1013 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1014 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1015 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1015 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1016 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1016 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1012 v994
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1012 v994
        let _v1013 = () 
        #endif
#else
        v1012 v994
        let _v1013 = () 
        #endif
        _v1013 
        let v1017 : (string -> unit) = v18.l0
        v1017 v994
and closure144 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure143 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 1 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_1
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v615 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : string = "Debug"
                US1_0(v612)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v619 : string =
            match v615 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v616) -> (* Some *)
                v616
        let v620 : (unit -> string) = v619.ToLower
        let v621 : string = v620 ()
        let v624 : string = v621.PadLeft (7, ' ')
        let v638 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v639 : string = "inline_colorization::color_bright_blue"
        let v640 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v639 
        let v641 : string = "&*$0"
        let v642 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v641 
        let v643 : string = "inline_colorization::color_reset"
        let v644 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v643 
        let v645 : string = "\"{v640}{v642}{v644}\""
        let v646 : string = @$"format!(" + v645 + ")"
        let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v646 
        let v648 : string = "fable_library_rust::String_::fromString($0)"
        let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
        let _v638 = v649 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v650 : string = "inline_colorization::color_bright_blue"
        let v651 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v650 
        let v652 : string = "&*$0"
        let v653 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v652 
        let v654 : string = "inline_colorization::color_reset"
        let v655 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v654 
        let v656 : string = "\"{v651}{v653}{v655}\""
        let v657 : string = @$"format!(" + v656 + ")"
        let v658 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v657 
        let v659 : string = "fable_library_rust::String_::fromString($0)"
        let v660 : string = Fable.Core.RustInterop.emitRustExpr v658 v659 
        let _v638 = v660 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v661 : string = "inline_colorization::color_bright_blue"
        let v662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v661 
        let v663 : string = "&*$0"
        let v664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v663 
        let v665 : string = "inline_colorization::color_reset"
        let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v665 
        let v667 : string = "\"{v662}{v664}{v666}\""
        let v668 : string = @$"format!(" + v667 + ")"
        let v669 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v668 
        let v670 : string = "fable_library_rust::String_::fromString($0)"
        let v671 : string = Fable.Core.RustInterop.emitRustExpr v669 v670 
        let _v638 = v671 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v672 : string = "\u001b[94m"
        let v673 : string = method11()
        let v674 : string = v672 + v624 
        let v675 : string = v674 + v673 
        let _v638 = v675 
        #endif
#if FABLE_COMPILER_PYTHON
        let v676 : string = "\u001b[94m"
        let v677 : string = method11()
        let v678 : string = v676 + v624 
        let v679 : string = v678 + v677 
        let _v638 = v679 
        #endif
#else
        let v680 : string = "\u001b[94m"
        let v681 : string = method11()
        let v682 : string = v680 + v624 
        let v683 : string = v682 + v681 
        let _v638 = v683 
        #endif
        let v684 : string = _v638 
        let v690 : int64 = v85.l0
        let v691 : string = method10()
        let v692 : Mut4 = {l0 = v691} : Mut4
        let v693 : string = "{ "
        let v694 : string = $"{v693}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v692, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = "new_code_path"
        let v703 : string = $"{v702}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v692, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = " = "
        let v712 : string = $"{v711}"
        let v715 : unit = ()
        let v716 : (unit -> unit) = closure10(v692, v712)
        let v717 : unit = (fun () -> v716 (); v715) ()
        let v720 : string = $"{v0}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v692, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = " }"
        let v729 : string = $"{v728}"
        let v732 : unit = ()
        let v733 : (unit -> unit) = closure10(v692, v729)
        let v734 : unit = (fun () -> v733 (); v732) ()
        let v737 : string = v692.l0
        let v738 : (unit -> string) = closure144()
        let v739 : string = $"{v483} {v684} #{v690} %s{v738 ()} / {v737}"
        let v742 : char list = []
        let v743 : (char list -> (char [])) = List.toArray
        let v744 : (char []) = v743 v742
        let v747 : string = v739.TrimStart v744 
        let v765 : char list = []
        let v766 : char list = '/' :: v765 
        let v769 : char list = ' ' :: v766 
        let v772 : (char list -> (char [])) = List.toArray
        let v773 : (char []) = v772 v769
        let v776 : string = v747.TrimEnd v773 
        let v794 : (string -> unit) = closure12()
        let v795 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v796 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v776 v796 
        let _v795 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v797 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v776 v797 
        let _v795 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v798 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v776 v798 
        let _v795 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v794 v776
        let _v795 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v794 v776
        let _v795 = () 
        #endif
#else
        v794 v776
        let _v795 = () 
        #endif
        _v795 
        let v799 : (string -> unit) = v17.l0
        v799 v776
and method115 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method115(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method116 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method116(v4, v1)
        let v6 : struct (string * string) list = struct (v2, v3) :: v5 
        v6
    | UH5_0 -> (* Nil *)
        v1
and closure145 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : (string -> (string seq -> string)) = String.concat
    let v9 : (string seq -> string) = v8 v1
    v9 v5
and closure148 () () : string =
    let v0 : string = "spiral_builder.process_typescript / Exception"
    v0
and closure147 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "ex"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v907 : string = "format!(\"{:#?}\", $0)"
        let v908 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v907 
        let v909 : string = "fable_library_rust::String_::fromString($0)"
        let v910 : string = Fable.Core.RustInterop.emitRustExpr v908 v909 
        let _v906 = v910 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v911 : string = "format!(\"{:#?}\", $0)"
        let v912 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v911 
        let v913 : string = "fable_library_rust::String_::fromString($0)"
        let v914 : string = Fable.Core.RustInterop.emitRustExpr v912 v913 
        let _v906 = v914 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v915 : string = "format!(\"{:#?}\", $0)"
        let v916 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v915 
        let v917 : string = "fable_library_rust::String_::fromString($0)"
        let v918 : string = Fable.Core.RustInterop.emitRustExpr v916 v917 
        let _v906 = v918 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v919 : string = $"%A{v3}"
        let _v906 = v919 
        #endif
#if FABLE_COMPILER_PYTHON
        let v922 : string = $"%A{v3}"
        let _v906 = v922 
        #endif
#else
        let v925 : string = $"%A{v3}"
        let _v906 = v925 
        #endif
        let v928 : string = _v906 
        let v933 : string = $"{v928}"
        let v936 : unit = ()
        let v937 : (unit -> unit) = closure10(v878, v933)
        let v938 : unit = (fun () -> v937 (); v936) ()
        let v941 : string = "; "
        let v942 : string = $"{v941}"
        let v945 : unit = ()
        let v946 : (unit -> unit) = closure10(v878, v942)
        let v947 : unit = (fun () -> v946 (); v945) ()
        let v950 : string = "new_code_path"
        let v951 : string = $"{v950}"
        let v954 : unit = ()
        let v955 : (unit -> unit) = closure10(v878, v951)
        let v956 : unit = (fun () -> v955 (); v954) ()
        let v959 : string = $"{v897}"
        let v962 : unit = ()
        let v963 : (unit -> unit) = closure10(v878, v959)
        let v964 : unit = (fun () -> v963 (); v962) ()
        let v967 : string = $"{v0}"
        let v970 : unit = ()
        let v971 : (unit -> unit) = closure10(v878, v967)
        let v972 : unit = (fun () -> v971 (); v970) ()
        let v975 : string = $"{v941}"
        let v978 : unit = ()
        let v979 : (unit -> unit) = closure10(v878, v975)
        let v980 : unit = (fun () -> v979 (); v978) ()
        let v983 : string = "external_command"
        let v984 : string = $"{v983}"
        let v987 : unit = ()
        let v988 : (unit -> unit) = closure10(v878, v984)
        let v989 : unit = (fun () -> v988 (); v987) ()
        let v992 : string = $"{v897}"
        let v995 : unit = ()
        let v996 : (unit -> unit) = closure10(v878, v992)
        let v997 : unit = (fun () -> v996 (); v995) ()
        let v1000 : string = $"{v2}"
        let v1003 : unit = ()
        let v1004 : (unit -> unit) = closure10(v878, v1000)
        let v1005 : unit = (fun () -> v1004 (); v1003) ()
        let v1008 : string = $"{v941}"
        let v1011 : unit = ()
        let v1012 : (unit -> unit) = closure10(v878, v1008)
        let v1013 : unit = (fun () -> v1012 (); v1011) ()
        let v1016 : string = "run_result"
        let v1017 : string = $"{v1016}"
        let v1020 : unit = ()
        let v1021 : (unit -> unit) = closure10(v878, v1017)
        let v1022 : unit = (fun () -> v1021 (); v1020) ()
        let v1025 : string = $"{v897}"
        let v1028 : unit = ()
        let v1029 : (unit -> unit) = closure10(v878, v1025)
        let v1030 : unit = (fun () -> v1029 (); v1028) ()
        let v1033 : string = $"{v1}"
        let v1036 : unit = ()
        let v1037 : (unit -> unit) = closure10(v878, v1033)
        let v1038 : unit = (fun () -> v1037 (); v1036) ()
        let v1041 : string = " }"
        let v1042 : string = $"{v1041}"
        let v1045 : unit = ()
        let v1046 : (unit -> unit) = closure10(v878, v1042)
        let v1047 : unit = (fun () -> v1046 (); v1045) ()
        let v1050 : string = v878.l0
        let v1051 : (unit -> string) = closure148()
        let v1052 : string = $"{v486} {v870} #{v876} %s{v1051 ()} / {v1050}"
        let v1055 : char list = []
        let v1056 : (char list -> (char [])) = List.toArray
        let v1057 : (char []) = v1056 v1055
        let v1060 : string = v1052.TrimStart v1057 
        let v1078 : char list = []
        let v1079 : char list = '/' :: v1078 
        let v1082 : char list = ' ' :: v1079 
        let v1085 : (char list -> (char [])) = List.toArray
        let v1086 : (char []) = v1085 v1082
        let v1089 : string = v1060.TrimEnd v1086 
        let v1107 : (string -> unit) = closure12()
        let v1108 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1109 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1109 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1110 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1110 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1111 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1111 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1107 v1089
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1107 v1089
        let _v1108 = () 
        #endif
#else
        v1107 v1089
        let _v1108 = () 
        #endif
        _v1108 
        let v1112 : (string -> unit) = v20.l0
        v1112 v1089
and closure146 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure147(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure150 () () : string =
    let v0 : string = "spiral_builder.process_typescript / error"
    v0
and closure149 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "exit_code"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : string = $"{v2}"
        let v909 : unit = ()
        let v910 : (unit -> unit) = closure10(v878, v906)
        let v911 : unit = (fun () -> v910 (); v909) ()
        let v914 : string = "; "
        let v915 : string = $"{v914}"
        let v918 : unit = ()
        let v919 : (unit -> unit) = closure10(v878, v915)
        let v920 : unit = (fun () -> v919 (); v918) ()
        let v923 : string = "run_result"
        let v924 : string = $"{v923}"
        let v927 : unit = ()
        let v928 : (unit -> unit) = closure10(v878, v924)
        let v929 : unit = (fun () -> v928 (); v927) ()
        let v932 : string = $"{v897}"
        let v935 : unit = ()
        let v936 : (unit -> unit) = closure10(v878, v932)
        let v937 : unit = (fun () -> v936 (); v935) ()
        let v940 : string = $"{v1}"
        let v943 : unit = ()
        let v944 : (unit -> unit) = closure10(v878, v940)
        let v945 : unit = (fun () -> v944 (); v943) ()
        let v948 : string = $"{v914}"
        let v951 : unit = ()
        let v952 : (unit -> unit) = closure10(v878, v948)
        let v953 : unit = (fun () -> v952 (); v951) ()
        let v956 : string = "new_code_path"
        let v957 : string = $"{v956}"
        let v960 : unit = ()
        let v961 : (unit -> unit) = closure10(v878, v957)
        let v962 : unit = (fun () -> v961 (); v960) ()
        let v965 : string = $"{v897}"
        let v968 : unit = ()
        let v969 : (unit -> unit) = closure10(v878, v965)
        let v970 : unit = (fun () -> v969 (); v968) ()
        let v973 : string = $"{v0}"
        let v976 : unit = ()
        let v977 : (unit -> unit) = closure10(v878, v973)
        let v978 : unit = (fun () -> v977 (); v976) ()
        let v981 : string = $"{v914}"
        let v984 : unit = ()
        let v985 : (unit -> unit) = closure10(v878, v981)
        let v986 : unit = (fun () -> v985 (); v984) ()
        let v989 : string = "external_command"
        let v990 : string = $"{v989}"
        let v993 : unit = ()
        let v994 : (unit -> unit) = closure10(v878, v990)
        let v995 : unit = (fun () -> v994 (); v993) ()
        let v998 : string = $"{v897}"
        let v1001 : unit = ()
        let v1002 : (unit -> unit) = closure10(v878, v998)
        let v1003 : unit = (fun () -> v1002 (); v1001) ()
        let v1006 : string = $"{v3}"
        let v1009 : unit = ()
        let v1010 : (unit -> unit) = closure10(v878, v1006)
        let v1011 : unit = (fun () -> v1010 (); v1009) ()
        let v1014 : string = " }"
        let v1015 : string = $"{v1014}"
        let v1018 : unit = ()
        let v1019 : (unit -> unit) = closure10(v878, v1015)
        let v1020 : unit = (fun () -> v1019 (); v1018) ()
        let v1023 : string = v878.l0
        let v1024 : (unit -> string) = closure150()
        let v1025 : string = $"{v486} {v870} #{v876} %s{v1024 ()} / {v1023}"
        let v1028 : char list = []
        let v1029 : (char list -> (char [])) = List.toArray
        let v1030 : (char []) = v1029 v1028
        let v1033 : string = v1025.TrimStart v1030 
        let v1051 : char list = []
        let v1052 : char list = '/' :: v1051 
        let v1055 : char list = ' ' :: v1052 
        let v1058 : (char list -> (char [])) = List.toArray
        let v1059 : (char []) = v1058 v1055
        let v1062 : string = v1033.TrimEnd v1059 
        let v1080 : (string -> unit) = closure12()
        let v1081 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1082 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1082 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1083 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1083 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1084 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1084 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1080 v1062
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1080 v1062
        let _v1081 = () 
        #endif
#else
        v1080 v1062
        let _v1081 = () 
        #endif
        _v1081 
        let v1085 : (string -> unit) = v20.l0
        v1085 v1062
and closure152 () () : string =
    let v0 : string = $"spiral_builder.process_python"
    v0
and closure151 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_4
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v799 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v614 : string = method8()
                let _v613 = v614 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v615 : string = method8()
                let _v613 = v615 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v616 : string = method8()
                let _v613 = v616 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v617 : string = method9()
                let _v613 = v617 
                #endif
#if FABLE_COMPILER_PYTHON
                let v618 : string = method9()
                let _v613 = v618 
                #endif
#else
                let v619 : string = method9()
                let _v613 = v619 
                #endif
                let v620 : string = _v613 
                let v625 : string = method10()
                let v626 : Mut4 = {l0 = v625} : Mut4
                let v627 : US0 = US0_1
                let v628 : string = $"%A{v627}"
                let v632 : string = $"{v628}"
                let v635 : unit = ()
                let v636 : (unit -> unit) = closure10(v626, v632)
                let v637 : unit = (fun () -> v636 (); v635) ()
                let v640 : string = v626.l0
                let v641 : (string []) = v640.Split v620 
                let v644 : string = v641.[int 0]
                let v647 : string = method10()
                let v648 : Mut4 = {l0 = v647} : Mut4
                let v649 : US0 = US0_4
                let v650 : string = $"%A{v649}"
                let v654 : string = $"{v650}"
                let v657 : unit = ()
                let v658 : (unit -> unit) = closure10(v648, v654)
                let v659 : unit = (fun () -> v658 (); v657) ()
                let v662 : string = v648.l0
                let v663 : bool = v662.StartsWith v644 
                let v669 : US1 =
                    if v663 then
                        let v666 : string = "Debug"
                        US1_0(v666)
                    else
                        US1_1
                match v669 with
                | US1_1 -> (* None *)
                    let v672 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v673 : string = method8()
                    let _v672 = v673 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v674 : string = method8()
                    let _v672 = v674 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v675 : string = method8()
                    let _v672 = v675 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v676 : string = method9()
                    let _v672 = v676 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v677 : string = method9()
                    let _v672 = v677 
                    #endif
#else
                    let v678 : string = method9()
                    let _v672 = v678 
                    #endif
                    let v679 : string = _v672 
                    let v684 : string = method10()
                    let v685 : Mut4 = {l0 = v684} : Mut4
                    let v686 : US0 = US0_2
                    let v687 : string = $"%A{v686}"
                    let v691 : string = $"{v687}"
                    let v694 : unit = ()
                    let v695 : (unit -> unit) = closure10(v685, v691)
                    let v696 : unit = (fun () -> v695 (); v694) ()
                    let v699 : string = v685.l0
                    let v700 : (string []) = v699.Split v679 
                    let v703 : string = v700.[int 0]
                    let v706 : string = method10()
                    let v707 : Mut4 = {l0 = v706} : Mut4
                    let v708 : US0 = US0_4
                    let v709 : string = $"%A{v708}"
                    let v713 : string = $"{v709}"
                    let v716 : unit = ()
                    let v717 : (unit -> unit) = closure10(v707, v713)
                    let v718 : unit = (fun () -> v717 (); v716) ()
                    let v721 : string = v707.l0
                    let v722 : bool = v721.StartsWith v703 
                    let v728 : US1 =
                        if v722 then
                            let v725 : string = "Info"
                            US1_0(v725)
                        else
                            US1_1
                    match v728 with
                    | US1_1 -> (* None *)
                        let v731 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v732 : string = method8()
                        let _v731 = v732 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v733 : string = method8()
                        let _v731 = v733 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v734 : string = method8()
                        let _v731 = v734 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v735 : string = method9()
                        let _v731 = v735 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v736 : string = method9()
                        let _v731 = v736 
                        #endif
#else
                        let v737 : string = method9()
                        let _v731 = v737 
                        #endif
                        let v738 : string = _v731 
                        let v743 : string = method10()
                        let v744 : Mut4 = {l0 = v743} : Mut4
                        let v745 : US0 = US0_3
                        let v746 : string = $"%A{v745}"
                        let v750 : string = $"{v746}"
                        let v753 : unit = ()
                        let v754 : (unit -> unit) = closure10(v744, v750)
                        let v755 : unit = (fun () -> v754 (); v753) ()
                        let v758 : string = v744.l0
                        let v759 : (string []) = v758.Split v738 
                        let v762 : string = v759.[int 0]
                        let v765 : string = method10()
                        let v766 : Mut4 = {l0 = v765} : Mut4
                        let v767 : US0 = US0_4
                        let v768 : string = $"%A{v767}"
                        let v772 : string = $"{v768}"
                        let v775 : unit = ()
                        let v776 : (unit -> unit) = closure10(v766, v772)
                        let v777 : unit = (fun () -> v776 (); v775) ()
                        let v780 : string = v766.l0
                        let v781 : bool = v780.StartsWith v762 
                        let v787 : US1 =
                            if v781 then
                                let v784 : string = "Warning"
                                US1_0(v784)
                            else
                                US1_1
                        match v787 with
                        | US1_1 -> (* None *)
                            let v790 : string = "Critical"
                            US1_0(v790)
                        | US1_0(v788) -> (* Some *)
                            US1_0(v788)
                    | US1_0(v729) -> (* Some *)
                        US1_0(v729)
                | US1_0(v670) -> (* Some *)
                    US1_0(v670)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v803 : string =
            match v799 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v800) -> (* Some *)
                v800
        let v804 : (unit -> string) = v803.ToLower
        let v805 : string = v804 ()
        let v808 : string = v805.PadLeft (7, ' ')
        let v822 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v823 : string = "inline_colorization::color_bright_red"
        let v824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v823 
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v825 
        let v827 : string = "inline_colorization::color_reset"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "\"{v824}{v826}{v828}\""
        let v830 : string = @$"format!(" + v829 + ")"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v830 
        let v832 : string = "fable_library_rust::String_::fromString($0)"
        let v833 : string = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let _v822 = v833 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v834 : string = "inline_colorization::color_bright_red"
        let v835 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "&*$0"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v836 
        let v838 : string = "inline_colorization::color_reset"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v838 
        let v840 : string = "\"{v835}{v837}{v839}\""
        let v841 : string = @$"format!(" + v840 + ")"
        let v842 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v841 
        let v843 : string = "fable_library_rust::String_::fromString($0)"
        let v844 : string = Fable.Core.RustInterop.emitRustExpr v842 v843 
        let _v822 = v844 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v845 : string = "inline_colorization::color_bright_red"
        let v846 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v845 
        let v847 : string = "&*$0"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v808 v847 
        let v849 : string = "inline_colorization::color_reset"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v849 
        let v851 : string = "\"{v846}{v848}{v850}\""
        let v852 : string = @$"format!(" + v851 + ")"
        let v853 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v852 
        let v854 : string = "fable_library_rust::String_::fromString($0)"
        let v855 : string = Fable.Core.RustInterop.emitRustExpr v853 v854 
        let _v822 = v855 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v856 : string = "\u001b[91m"
        let v857 : string = method11()
        let v858 : string = v856 + v808 
        let v859 : string = v858 + v857 
        let _v822 = v859 
        #endif
#if FABLE_COMPILER_PYTHON
        let v860 : string = "\u001b[91m"
        let v861 : string = method11()
        let v862 : string = v860 + v808 
        let v863 : string = v862 + v861 
        let _v822 = v863 
        #endif
#else
        let v864 : string = "\u001b[91m"
        let v865 : string = method11()
        let v866 : string = v864 + v808 
        let v867 : string = v866 + v865 
        let _v822 = v867 
        #endif
        let v868 : string = _v822 
        let v874 : int64 = v86.l0
        let v875 : string = method10()
        let v876 : Mut4 = {l0 = v875} : Mut4
        let v877 : string = "{ "
        let v878 : string = $"{v877}"
        let v881 : unit = ()
        let v882 : (unit -> unit) = closure10(v876, v878)
        let v883 : unit = (fun () -> v882 (); v881) ()
        let v886 : string = "exit_code"
        let v887 : string = $"{v886}"
        let v890 : unit = ()
        let v891 : (unit -> unit) = closure10(v876, v887)
        let v892 : unit = (fun () -> v891 (); v890) ()
        let v895 : string = " = "
        let v896 : string = $"{v895}"
        let v899 : unit = ()
        let v900 : (unit -> unit) = closure10(v876, v896)
        let v901 : unit = (fun () -> v900 (); v899) ()
        let v904 : string = $"{v1}"
        let v907 : unit = ()
        let v908 : (unit -> unit) = closure10(v876, v904)
        let v909 : unit = (fun () -> v908 (); v907) ()
        let v912 : string = "; "
        let v913 : string = $"{v912}"
        let v916 : unit = ()
        let v917 : (unit -> unit) = closure10(v876, v913)
        let v918 : unit = (fun () -> v917 (); v916) ()
        let v921 : string = "dotnet_fable_result"
        let v922 : string = $"{v921}"
        let v925 : unit = ()
        let v926 : (unit -> unit) = closure10(v876, v922)
        let v927 : unit = (fun () -> v926 (); v925) ()
        let v930 : string = $"{v895}"
        let v933 : unit = ()
        let v934 : (unit -> unit) = closure10(v876, v930)
        let v935 : unit = (fun () -> v934 (); v933) ()
        let v938 : string = $"{v0}"
        let v941 : unit = ()
        let v942 : (unit -> unit) = closure10(v876, v938)
        let v943 : unit = (fun () -> v942 (); v941) ()
        let v946 : string = " }"
        let v947 : string = $"{v946}"
        let v950 : unit = ()
        let v951 : (unit -> unit) = closure10(v876, v947)
        let v952 : unit = (fun () -> v951 (); v950) ()
        let v955 : string = v876.l0
        let v956 : (unit -> string) = closure152()
        let v957 : string = $"{v484} {v868} #{v874} %s{v956 ()} / {v955}"
        let v960 : char list = []
        let v961 : (char list -> (char [])) = List.toArray
        let v962 : (char []) = v961 v960
        let v965 : string = v957.TrimStart v962 
        let v983 : char list = []
        let v984 : char list = '/' :: v983 
        let v987 : char list = ' ' :: v984 
        let v990 : (char list -> (char [])) = List.toArray
        let v991 : (char []) = v990 v987
        let v994 : string = v965.TrimEnd v991 
        let v1012 : (string -> unit) = closure12()
        let v1013 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1014 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1015 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1015 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1016 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v994 v1016 
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1012 v994
        let _v1013 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1012 v994
        let _v1013 = () 
        #endif
#else
        v1012 v994
        let _v1013 = () 
        #endif
        _v1013 
        let v1017 : (string -> unit) = v18.l0
        v1017 v994
and closure154 () () : string =
    let v0 : string = "spiral_builder.process_python"
    v0
and closure153 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US0 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 1 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure7(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US3 option = None
        let _v101 = ref v101 
        let v102 : US3 option ref = _v101 
        let v103 : (US3 option -> US3 option ref) = closure8(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure9(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US3 option = _v101.Value 
        let v120 : US3 = US3_1
        let v121 : US3 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US3_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US3_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method6()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US3 option = None
        let _v169 = ref v169 
        let v170 : US3 option ref = _v169 
        let v171 : (US3 option -> US3 option ref) = closure8(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure9(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US3 option = _v169.Value 
        let v188 : US3 = US3_1
        let v189 : US3 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US3_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US3_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method6()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US3 option = None
        let _v239 = ref v239 
        let v240 : US3 option ref = _v239 
        let v241 : (US3 option -> US3 option ref) = closure8(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure9(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US3 option = _v239.Value 
        let v258 : US3 = US3_1
        let v259 : US3 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US3_1 -> (* None *)
                v238
            | US3_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US3 option = None
        let _v279 = ref v279 
        let v280 : US3 option ref = _v279 
        let v281 : (US3 option -> US3 option ref) = closure8(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure9(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US3 option = _v279.Value 
        let v298 : US3 = US3_1
        let v299 : US3 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US3_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US3_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method7()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US3 option = None
        let _v347 = ref v347 
        let v348 : US3 option ref = _v347 
        let v349 : (US3 option -> US3 option ref) = closure8(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure9(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US3 option = _v347.Value 
        let v366 : US3 = US3_1
        let v367 : US3 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US3_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US3_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method7()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US3 option = None
        let _v415 = ref v415 
        let v416 : US3 option ref = _v415 
        let v417 : (US3 option -> US3 option ref) = closure8(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure9(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US3 option = _v415.Value 
        let v434 : US3 = US3_1
        let v435 : US3 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US3_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US3_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method7()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method8()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method8()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method8()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method9()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method9()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method9()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US0 = US0_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure10(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US0 = US0_1
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure10(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US1 =
            if v603 then
                let v606 : string = "Verbose"
                US1_0(v606)
            else
                US1_1
        let v615 : US1 =
            match v609 with
            | US1_1 -> (* None *)
                let v612 : string = "Debug"
                US1_0(v612)
            | US1_0(v610) -> (* Some *)
                US1_0(v610)
        let v619 : string =
            match v615 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v616) -> (* Some *)
                v616
        let v620 : (unit -> string) = v619.ToLower
        let v621 : string = v620 ()
        let v624 : string = v621.PadLeft (7, ' ')
        let v638 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v639 : string = "inline_colorization::color_bright_blue"
        let v640 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v639 
        let v641 : string = "&*$0"
        let v642 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v641 
        let v643 : string = "inline_colorization::color_reset"
        let v644 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v643 
        let v645 : string = "\"{v640}{v642}{v644}\""
        let v646 : string = @$"format!(" + v645 + ")"
        let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v646 
        let v648 : string = "fable_library_rust::String_::fromString($0)"
        let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
        let _v638 = v649 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v650 : string = "inline_colorization::color_bright_blue"
        let v651 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v650 
        let v652 : string = "&*$0"
        let v653 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v652 
        let v654 : string = "inline_colorization::color_reset"
        let v655 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v654 
        let v656 : string = "\"{v651}{v653}{v655}\""
        let v657 : string = @$"format!(" + v656 + ")"
        let v658 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v657 
        let v659 : string = "fable_library_rust::String_::fromString($0)"
        let v660 : string = Fable.Core.RustInterop.emitRustExpr v658 v659 
        let _v638 = v660 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v661 : string = "inline_colorization::color_bright_blue"
        let v662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v661 
        let v663 : string = "&*$0"
        let v664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v624 v663 
        let v665 : string = "inline_colorization::color_reset"
        let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v665 
        let v667 : string = "\"{v662}{v664}{v666}\""
        let v668 : string = @$"format!(" + v667 + ")"
        let v669 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v668 
        let v670 : string = "fable_library_rust::String_::fromString($0)"
        let v671 : string = Fable.Core.RustInterop.emitRustExpr v669 v670 
        let _v638 = v671 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v672 : string = "\u001b[94m"
        let v673 : string = method11()
        let v674 : string = v672 + v624 
        let v675 : string = v674 + v673 
        let _v638 = v675 
        #endif
#if FABLE_COMPILER_PYTHON
        let v676 : string = "\u001b[94m"
        let v677 : string = method11()
        let v678 : string = v676 + v624 
        let v679 : string = v678 + v677 
        let _v638 = v679 
        #endif
#else
        let v680 : string = "\u001b[94m"
        let v681 : string = method11()
        let v682 : string = v680 + v624 
        let v683 : string = v682 + v681 
        let _v638 = v683 
        #endif
        let v684 : string = _v638 
        let v690 : int64 = v85.l0
        let v691 : string = method10()
        let v692 : Mut4 = {l0 = v691} : Mut4
        let v693 : string = "{ "
        let v694 : string = $"{v693}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v692, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = "new_code_path"
        let v703 : string = $"{v702}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v692, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = " = "
        let v712 : string = $"{v711}"
        let v715 : unit = ()
        let v716 : (unit -> unit) = closure10(v692, v712)
        let v717 : unit = (fun () -> v716 (); v715) ()
        let v720 : string = $"{v0}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v692, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = " }"
        let v729 : string = $"{v728}"
        let v732 : unit = ()
        let v733 : (unit -> unit) = closure10(v692, v729)
        let v734 : unit = (fun () -> v733 (); v732) ()
        let v737 : string = v692.l0
        let v738 : (unit -> string) = closure154()
        let v739 : string = $"{v483} {v684} #{v690} %s{v738 ()} / {v737}"
        let v742 : char list = []
        let v743 : (char list -> (char [])) = List.toArray
        let v744 : (char []) = v743 v742
        let v747 : string = v739.TrimStart v744 
        let v765 : char list = []
        let v766 : char list = '/' :: v765 
        let v769 : char list = ' ' :: v766 
        let v772 : (char list -> (char [])) = List.toArray
        let v773 : (char []) = v772 v769
        let v776 : string = v747.TrimEnd v773 
        let v794 : (string -> unit) = closure12()
        let v795 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v796 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v776 v796 
        let _v795 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v797 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v776 v797 
        let _v795 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v798 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v776 v798 
        let _v795 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v794 v776
        let _v795 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v794 v776
        let _v795 = () 
        #endif
#else
        v794 v776
        let _v795 = () 
        #endif
        _v795 
        let v799 : (string -> unit) = v17.l0
        v799 v776
and closure155 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : (string -> (string seq -> string)) = String.concat
    let v9 : (string seq -> string) = v8 v1
    v9 v5
and closure158 () () : string =
    let v0 : string = "spiral_builder.process_python / Exception"
    v0
and closure157 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "ex"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v907 : string = "format!(\"{:#?}\", $0)"
        let v908 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v907 
        let v909 : string = "fable_library_rust::String_::fromString($0)"
        let v910 : string = Fable.Core.RustInterop.emitRustExpr v908 v909 
        let _v906 = v910 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v911 : string = "format!(\"{:#?}\", $0)"
        let v912 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v911 
        let v913 : string = "fable_library_rust::String_::fromString($0)"
        let v914 : string = Fable.Core.RustInterop.emitRustExpr v912 v913 
        let _v906 = v914 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v915 : string = "format!(\"{:#?}\", $0)"
        let v916 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v915 
        let v917 : string = "fable_library_rust::String_::fromString($0)"
        let v918 : string = Fable.Core.RustInterop.emitRustExpr v916 v917 
        let _v906 = v918 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v919 : string = $"%A{v3}"
        let _v906 = v919 
        #endif
#if FABLE_COMPILER_PYTHON
        let v922 : string = $"%A{v3}"
        let _v906 = v922 
        #endif
#else
        let v925 : string = $"%A{v3}"
        let _v906 = v925 
        #endif
        let v928 : string = _v906 
        let v933 : string = $"{v928}"
        let v936 : unit = ()
        let v937 : (unit -> unit) = closure10(v878, v933)
        let v938 : unit = (fun () -> v937 (); v936) ()
        let v941 : string = "; "
        let v942 : string = $"{v941}"
        let v945 : unit = ()
        let v946 : (unit -> unit) = closure10(v878, v942)
        let v947 : unit = (fun () -> v946 (); v945) ()
        let v950 : string = "new_code_path"
        let v951 : string = $"{v950}"
        let v954 : unit = ()
        let v955 : (unit -> unit) = closure10(v878, v951)
        let v956 : unit = (fun () -> v955 (); v954) ()
        let v959 : string = $"{v897}"
        let v962 : unit = ()
        let v963 : (unit -> unit) = closure10(v878, v959)
        let v964 : unit = (fun () -> v963 (); v962) ()
        let v967 : string = $"{v0}"
        let v970 : unit = ()
        let v971 : (unit -> unit) = closure10(v878, v967)
        let v972 : unit = (fun () -> v971 (); v970) ()
        let v975 : string = $"{v941}"
        let v978 : unit = ()
        let v979 : (unit -> unit) = closure10(v878, v975)
        let v980 : unit = (fun () -> v979 (); v978) ()
        let v983 : string = "external_command"
        let v984 : string = $"{v983}"
        let v987 : unit = ()
        let v988 : (unit -> unit) = closure10(v878, v984)
        let v989 : unit = (fun () -> v988 (); v987) ()
        let v992 : string = $"{v897}"
        let v995 : unit = ()
        let v996 : (unit -> unit) = closure10(v878, v992)
        let v997 : unit = (fun () -> v996 (); v995) ()
        let v1000 : string = $"{v2}"
        let v1003 : unit = ()
        let v1004 : (unit -> unit) = closure10(v878, v1000)
        let v1005 : unit = (fun () -> v1004 (); v1003) ()
        let v1008 : string = $"{v941}"
        let v1011 : unit = ()
        let v1012 : (unit -> unit) = closure10(v878, v1008)
        let v1013 : unit = (fun () -> v1012 (); v1011) ()
        let v1016 : string = "run_result"
        let v1017 : string = $"{v1016}"
        let v1020 : unit = ()
        let v1021 : (unit -> unit) = closure10(v878, v1017)
        let v1022 : unit = (fun () -> v1021 (); v1020) ()
        let v1025 : string = $"{v897}"
        let v1028 : unit = ()
        let v1029 : (unit -> unit) = closure10(v878, v1025)
        let v1030 : unit = (fun () -> v1029 (); v1028) ()
        let v1033 : string = $"{v1}"
        let v1036 : unit = ()
        let v1037 : (unit -> unit) = closure10(v878, v1033)
        let v1038 : unit = (fun () -> v1037 (); v1036) ()
        let v1041 : string = " }"
        let v1042 : string = $"{v1041}"
        let v1045 : unit = ()
        let v1046 : (unit -> unit) = closure10(v878, v1042)
        let v1047 : unit = (fun () -> v1046 (); v1045) ()
        let v1050 : string = v878.l0
        let v1051 : (unit -> string) = closure158()
        let v1052 : string = $"{v486} {v870} #{v876} %s{v1051 ()} / {v1050}"
        let v1055 : char list = []
        let v1056 : (char list -> (char [])) = List.toArray
        let v1057 : (char []) = v1056 v1055
        let v1060 : string = v1052.TrimStart v1057 
        let v1078 : char list = []
        let v1079 : char list = '/' :: v1078 
        let v1082 : char list = ' ' :: v1079 
        let v1085 : (char list -> (char [])) = List.toArray
        let v1086 : (char []) = v1085 v1082
        let v1089 : string = v1060.TrimEnd v1086 
        let v1107 : (string -> unit) = closure12()
        let v1108 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1109 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1109 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1110 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1110 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1111 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1089 v1111 
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1107 v1089
        let _v1108 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1107 v1089
        let _v1108 = () 
        #endif
#else
        v1107 v1089
        let _v1108 = () 
        #endif
        _v1108 
        let v1112 : (string -> unit) = v20.l0
        v1112 v1089
and closure156 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure157(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure160 () () : string =
    let v0 : string = "spiral_builder.process_python / error"
    v0
and closure159 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : int64 option) = State.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v5 (); v34) ()
    let struct (v48 : Mut0, v49 : Mut1, v50 : Mut2, v51 : Mut3, v52 : int64 option) = State.trace_state.Value
    let v63 : US0 = v51.l0
    let v64 : bool = v50.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    if v68 then
        let v69 : unit = ()
        let v70 : (unit -> unit) = closure7(v19)
        let v71 : unit = (fun () -> v70 (); v69) ()
        let v74 : unit = ()
        let v75 : unit = (fun () -> v5 (); v74) ()
        let struct (v88 : Mut0, v89 : Mut1, v90 : Mut2, v91 : Mut3, v92 : int64 option) = State.trace_state.Value
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : US3 option = None
        let _v104 = ref v104 
        let v105 : US3 option ref = _v104 
        let v106 : (US3 option -> US3 option ref) = closure8(v105)
        let v107 : unit = ()
        let v108 : (unit -> unit) = closure9(v92, v106)
        let v109 : unit = (fun () -> v108 (); v107) ()
        let v112 : US3 option = _v104.Value 
        let v123 : US3 = US3_1
        let v124 : US3 = v112 |> Option.defaultValue v123 
        let v164 : System.DateTime =
            match v124 with
            | US3_1 -> (* None *)
                let v160 : System.DateTime = System.DateTime.Now
                v160
            | US3_0(v128) -> (* Some *)
                let v129 : System.DateTime = System.DateTime.Now
                let v132 : (System.DateTime -> int64) = _.Ticks
                let v133 : int64 = v132 v129
                let v136 : int64 = v133 - v128
                let v137 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v138 : System.TimeSpan = v137 v136
                let v141 : (System.TimeSpan -> int32) = _.Hours
                let v142 : int32 = v141 v138
                let v145 : (System.TimeSpan -> int32) = _.Minutes
                let v146 : int32 = v145 v138
                let v149 : (System.TimeSpan -> int32) = _.Seconds
                let v150 : int32 = v149 v138
                let v153 : (System.TimeSpan -> int32) = _.Milliseconds
                let v154 : int32 = v153 v138
                let v157 : System.DateTime = System.DateTime (1, 1, 1, v142, v146, v150, v154)
                v157
        let v165 : string = method6()
        let v168 : (string -> string) = v164.ToString
        let v169 : string = v168 v165
        let _v103 = v169 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v172 : US3 option = None
        let _v172 = ref v172 
        let v173 : US3 option ref = _v172 
        let v174 : (US3 option -> US3 option ref) = closure8(v173)
        let v175 : unit = ()
        let v176 : (unit -> unit) = closure9(v92, v174)
        let v177 : unit = (fun () -> v176 (); v175) ()
        let v180 : US3 option = _v172.Value 
        let v191 : US3 = US3_1
        let v192 : US3 = v180 |> Option.defaultValue v191 
        let v232 : System.DateTime =
            match v192 with
            | US3_1 -> (* None *)
                let v228 : System.DateTime = System.DateTime.Now
                v228
            | US3_0(v196) -> (* Some *)
                let v197 : System.DateTime = System.DateTime.Now
                let v200 : (System.DateTime -> int64) = _.Ticks
                let v201 : int64 = v200 v197
                let v204 : int64 = v201 - v196
                let v205 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v206 : System.TimeSpan = v205 v204
                let v209 : (System.TimeSpan -> int32) = _.Hours
                let v210 : int32 = v209 v206
                let v213 : (System.TimeSpan -> int32) = _.Minutes
                let v214 : int32 = v213 v206
                let v217 : (System.TimeSpan -> int32) = _.Seconds
                let v218 : int32 = v217 v206
                let v221 : (System.TimeSpan -> int32) = _.Milliseconds
                let v222 : int32 = v221 v206
                let v225 : System.DateTime = System.DateTime (1, 1, 1, v210, v214, v218, v222)
                v225
        let v233 : string = method6()
        let v236 : (string -> string) = v232.ToString
        let v237 : string = v236 v233
        let _v103 = v237 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v240 : string = $"near_sdk::env::block_timestamp()"
        let v241 : uint64 = Fable.Core.RustInterop.emitRustExpr () v240 
        let v242 : US3 option = None
        let _v242 = ref v242 
        let v243 : US3 option ref = _v242 
        let v244 : (US3 option -> US3 option ref) = closure8(v243)
        let v245 : unit = ()
        let v246 : (unit -> unit) = closure9(v92, v244)
        let v247 : unit = (fun () -> v246 (); v245) ()
        let v250 : US3 option = _v242.Value 
        let v261 : US3 = US3_1
        let v262 : US3 = v250 |> Option.defaultValue v261 
        let v271 : uint64 =
            match v262 with
            | US3_1 -> (* None *)
                v241
            | US3_0(v266) -> (* Some *)
                let v267 : (int64 -> uint64) = uint64
                let v268 : uint64 = v267 v266
                let v269 : uint64 = v241 - v268
                v269
        let v272 : uint64 = v271 / 1000000000UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v272 / 60UL
        let v275 : uint64 = v274 % 60UL
        let v276 : uint64 = v272 / 3600UL
        let v277 : uint64 = v276 % 24UL
        let v278 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v279 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v277, v275, v273) v278 
        let v280 : string = "fable_library_rust::String_::fromString($0)"
        let v281 : string = Fable.Core.RustInterop.emitRustExpr v279 v280 
        let _v103 = v281 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v282 : US3 option = None
        let _v282 = ref v282 
        let v283 : US3 option ref = _v282 
        let v284 : (US3 option -> US3 option ref) = closure8(v283)
        let v285 : unit = ()
        let v286 : (unit -> unit) = closure9(v92, v284)
        let v287 : unit = (fun () -> v286 (); v285) ()
        let v290 : US3 option = _v282.Value 
        let v301 : US3 = US3_1
        let v302 : US3 = v290 |> Option.defaultValue v301 
        let v342 : System.DateTime =
            match v302 with
            | US3_1 -> (* None *)
                let v338 : System.DateTime = System.DateTime.Now
                v338
            | US3_0(v306) -> (* Some *)
                let v307 : System.DateTime = System.DateTime.Now
                let v310 : (System.DateTime -> int64) = _.Ticks
                let v311 : int64 = v310 v307
                let v314 : int64 = v311 - v306
                let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v316 : System.TimeSpan = v315 v314
                let v319 : (System.TimeSpan -> int32) = _.Hours
                let v320 : int32 = v319 v316
                let v323 : (System.TimeSpan -> int32) = _.Minutes
                let v324 : int32 = v323 v316
                let v327 : (System.TimeSpan -> int32) = _.Seconds
                let v328 : int32 = v327 v316
                let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                let v332 : int32 = v331 v316
                let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                v335
        let v343 : string = method7()
        let v346 : (string -> string) = v342.ToString
        let v347 : string = v346 v343
        let _v103 = v347 
        #endif
#if FABLE_COMPILER_PYTHON
        let v350 : US3 option = None
        let _v350 = ref v350 
        let v351 : US3 option ref = _v350 
        let v352 : (US3 option -> US3 option ref) = closure8(v351)
        let v353 : unit = ()
        let v354 : (unit -> unit) = closure9(v92, v352)
        let v355 : unit = (fun () -> v354 (); v353) ()
        let v358 : US3 option = _v350.Value 
        let v369 : US3 = US3_1
        let v370 : US3 = v358 |> Option.defaultValue v369 
        let v410 : System.DateTime =
            match v370 with
            | US3_1 -> (* None *)
                let v406 : System.DateTime = System.DateTime.Now
                v406
            | US3_0(v374) -> (* Some *)
                let v375 : System.DateTime = System.DateTime.Now
                let v378 : (System.DateTime -> int64) = _.Ticks
                let v379 : int64 = v378 v375
                let v382 : int64 = v379 - v374
                let v383 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v384 : System.TimeSpan = v383 v382
                let v387 : (System.TimeSpan -> int32) = _.Hours
                let v388 : int32 = v387 v384
                let v391 : (System.TimeSpan -> int32) = _.Minutes
                let v392 : int32 = v391 v384
                let v395 : (System.TimeSpan -> int32) = _.Seconds
                let v396 : int32 = v395 v384
                let v399 : (System.TimeSpan -> int32) = _.Milliseconds
                let v400 : int32 = v399 v384
                let v403 : System.DateTime = System.DateTime (1, 1, 1, v388, v392, v396, v400)
                v403
        let v411 : string = method7()
        let v414 : (string -> string) = v410.ToString
        let v415 : string = v414 v411
        let _v103 = v415 
        #endif
#else
        let v418 : US3 option = None
        let _v418 = ref v418 
        let v419 : US3 option ref = _v418 
        let v420 : (US3 option -> US3 option ref) = closure8(v419)
        let v421 : unit = ()
        let v422 : (unit -> unit) = closure9(v92, v420)
        let v423 : unit = (fun () -> v422 (); v421) ()
        let v426 : US3 option = _v418.Value 
        let v437 : US3 = US3_1
        let v438 : US3 = v426 |> Option.defaultValue v437 
        let v478 : System.DateTime =
            match v438 with
            | US3_1 -> (* None *)
                let v474 : System.DateTime = System.DateTime.Now
                v474
            | US3_0(v442) -> (* Some *)
                let v443 : System.DateTime = System.DateTime.Now
                let v446 : (System.DateTime -> int64) = _.Ticks
                let v447 : int64 = v446 v443
                let v450 : int64 = v447 - v442
                let v451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v452 : System.TimeSpan = v451 v450
                let v455 : (System.TimeSpan -> int32) = _.Hours
                let v456 : int32 = v455 v452
                let v459 : (System.TimeSpan -> int32) = _.Minutes
                let v460 : int32 = v459 v452
                let v463 : (System.TimeSpan -> int32) = _.Seconds
                let v464 : int32 = v463 v452
                let v467 : (System.TimeSpan -> int32) = _.Milliseconds
                let v468 : int32 = v467 v452
                let v471 : System.DateTime = System.DateTime (1, 1, 1, v456, v460, v464, v468)
                v471
        let v479 : string = method7()
        let v482 : (string -> string) = v478.ToString
        let v483 : string = v482 v479
        let _v103 = v483 
        #endif
        let v486 : string = _v103 
        
        
        
        
        
        let v556 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v557 : string = method8()
        let _v556 = v557 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v558 : string = method8()
        let _v556 = v558 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v559 : string = method8()
        let _v556 = v559 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v560 : string = method9()
        let _v556 = v560 
        #endif
#if FABLE_COMPILER_PYTHON
        let v561 : string = method9()
        let _v556 = v561 
        #endif
#else
        let v562 : string = method9()
        let _v556 = v562 
        #endif
        let v563 : string = _v556 
        let v568 : string = method10()
        let v569 : Mut4 = {l0 = v568} : Mut4
        let v570 : US0 = US0_0
        let v571 : string = $"%A{v570}"
        let v575 : string = $"{v571}"
        let v578 : unit = ()
        let v579 : (unit -> unit) = closure10(v569, v575)
        let v580 : unit = (fun () -> v579 (); v578) ()
        let v583 : string = v569.l0
        let v584 : (string []) = v583.Split v563 
        let v587 : string = v584.[int 0]
        let v590 : string = method10()
        let v591 : Mut4 = {l0 = v590} : Mut4
        let v592 : US0 = US0_4
        let v593 : string = $"%A{v592}"
        let v597 : string = $"{v593}"
        let v600 : unit = ()
        let v601 : (unit -> unit) = closure10(v591, v597)
        let v602 : unit = (fun () -> v601 (); v600) ()
        let v605 : string = v591.l0
        let v606 : bool = v605.StartsWith v587 
        let v612 : US1 =
            if v606 then
                let v609 : string = "Verbose"
                US1_0(v609)
            else
                US1_1
        let v801 : US1 =
            match v612 with
            | US1_1 -> (* None *)
                let v615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v616 : string = method8()
                let _v615 = v616 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v617 : string = method8()
                let _v615 = v617 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v618 : string = method8()
                let _v615 = v618 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v619 : string = method9()
                let _v615 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = method9()
                let _v615 = v620 
                #endif
#else
                let v621 : string = method9()
                let _v615 = v621 
                #endif
                let v622 : string = _v615 
                let v627 : string = method10()
                let v628 : Mut4 = {l0 = v627} : Mut4
                let v629 : US0 = US0_1
                let v630 : string = $"%A{v629}"
                let v634 : string = $"{v630}"
                let v637 : unit = ()
                let v638 : (unit -> unit) = closure10(v628, v634)
                let v639 : unit = (fun () -> v638 (); v637) ()
                let v642 : string = v628.l0
                let v643 : (string []) = v642.Split v622 
                let v646 : string = v643.[int 0]
                let v649 : string = method10()
                let v650 : Mut4 = {l0 = v649} : Mut4
                let v651 : US0 = US0_4
                let v652 : string = $"%A{v651}"
                let v656 : string = $"{v652}"
                let v659 : unit = ()
                let v660 : (unit -> unit) = closure10(v650, v656)
                let v661 : unit = (fun () -> v660 (); v659) ()
                let v664 : string = v650.l0
                let v665 : bool = v664.StartsWith v646 
                let v671 : US1 =
                    if v665 then
                        let v668 : string = "Debug"
                        US1_0(v668)
                    else
                        US1_1
                match v671 with
                | US1_1 -> (* None *)
                    let v674 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v675 : string = method8()
                    let _v674 = v675 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v676 : string = method8()
                    let _v674 = v676 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v677 : string = method8()
                    let _v674 = v677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : string = method9()
                    let _v674 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v679 : string = method9()
                    let _v674 = v679 
                    #endif
#else
                    let v680 : string = method9()
                    let _v674 = v680 
                    #endif
                    let v681 : string = _v674 
                    let v686 : string = method10()
                    let v687 : Mut4 = {l0 = v686} : Mut4
                    let v688 : US0 = US0_2
                    let v689 : string = $"%A{v688}"
                    let v693 : string = $"{v689}"
                    let v696 : unit = ()
                    let v697 : (unit -> unit) = closure10(v687, v693)
                    let v698 : unit = (fun () -> v697 (); v696) ()
                    let v701 : string = v687.l0
                    let v702 : (string []) = v701.Split v681 
                    let v705 : string = v702.[int 0]
                    let v708 : string = method10()
                    let v709 : Mut4 = {l0 = v708} : Mut4
                    let v710 : US0 = US0_4
                    let v711 : string = $"%A{v710}"
                    let v715 : string = $"{v711}"
                    let v718 : unit = ()
                    let v719 : (unit -> unit) = closure10(v709, v715)
                    let v720 : unit = (fun () -> v719 (); v718) ()
                    let v723 : string = v709.l0
                    let v724 : bool = v723.StartsWith v705 
                    let v730 : US1 =
                        if v724 then
                            let v727 : string = "Info"
                            US1_0(v727)
                        else
                            US1_1
                    match v730 with
                    | US1_1 -> (* None *)
                        let v733 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v734 : string = method8()
                        let _v733 = v734 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v735 : string = method8()
                        let _v733 = v735 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v736 : string = method8()
                        let _v733 = v736 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v737 : string = method9()
                        let _v733 = v737 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v738 : string = method9()
                        let _v733 = v738 
                        #endif
#else
                        let v739 : string = method9()
                        let _v733 = v739 
                        #endif
                        let v740 : string = _v733 
                        let v745 : string = method10()
                        let v746 : Mut4 = {l0 = v745} : Mut4
                        let v747 : US0 = US0_3
                        let v748 : string = $"%A{v747}"
                        let v752 : string = $"{v748}"
                        let v755 : unit = ()
                        let v756 : (unit -> unit) = closure10(v746, v752)
                        let v757 : unit = (fun () -> v756 (); v755) ()
                        let v760 : string = v746.l0
                        let v761 : (string []) = v760.Split v740 
                        let v764 : string = v761.[int 0]
                        let v767 : string = method10()
                        let v768 : Mut4 = {l0 = v767} : Mut4
                        let v769 : US0 = US0_4
                        let v770 : string = $"%A{v769}"
                        let v774 : string = $"{v770}"
                        let v777 : unit = ()
                        let v778 : (unit -> unit) = closure10(v768, v774)
                        let v779 : unit = (fun () -> v778 (); v777) ()
                        let v782 : string = v768.l0
                        let v783 : bool = v782.StartsWith v764 
                        let v789 : US1 =
                            if v783 then
                                let v786 : string = "Warning"
                                US1_0(v786)
                            else
                                US1_1
                        match v789 with
                        | US1_1 -> (* None *)
                            let v792 : string = "Critical"
                            US1_0(v792)
                        | US1_0(v790) -> (* Some *)
                            US1_0(v790)
                    | US1_0(v731) -> (* Some *)
                        US1_0(v731)
                | US1_0(v672) -> (* Some *)
                    US1_0(v672)
            | US1_0(v613) -> (* Some *)
                US1_0(v613)
        let v805 : string =
            match v801 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v802) -> (* Some *)
                v802
        let v806 : (unit -> string) = v805.ToLower
        let v807 : string = v806 ()
        let v810 : string = v807.PadLeft (7, ' ')
        let v824 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v825 : string = "inline_colorization::color_bright_red"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "&*$0"
        let v828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v827 
        let v829 : string = "inline_colorization::color_reset"
        let v830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "\"{v826}{v828}{v830}\""
        let v832 : string = @$"format!(" + v831 + ")"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v824 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "inline_colorization::color_bright_red"
        let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v836 
        let v838 : string = "&*$0"
        let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v838 
        let v840 : string = "inline_colorization::color_reset"
        let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "\"{v837}{v839}{v841}\""
        let v843 : string = @$"format!(" + v842 + ")"
        let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "fable_library_rust::String_::fromString($0)"
        let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let _v824 = v846 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = "inline_colorization::color_bright_red"
        let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v847 
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v810 v849 
        let v851 : string = "inline_colorization::color_reset"
        let v852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "\"{v848}{v850}{v852}\""
        let v854 : string = @$"format!(" + v853 + ")"
        let v855 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "fable_library_rust::String_::fromString($0)"
        let v857 : string = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let _v824 = v857 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v858 : string = "\u001b[91m"
        let v859 : string = method11()
        let v860 : string = v858 + v810 
        let v861 : string = v860 + v859 
        let _v824 = v861 
        #endif
#if FABLE_COMPILER_PYTHON
        let v862 : string = "\u001b[91m"
        let v863 : string = method11()
        let v864 : string = v862 + v810 
        let v865 : string = v864 + v863 
        let _v824 = v865 
        #endif
#else
        let v866 : string = "\u001b[91m"
        let v867 : string = method11()
        let v868 : string = v866 + v810 
        let v869 : string = v868 + v867 
        let _v824 = v869 
        #endif
        let v870 : string = _v824 
        let v876 : int64 = v88.l0
        let v877 : string = method10()
        let v878 : Mut4 = {l0 = v877} : Mut4
        let v879 : string = "{ "
        let v880 : string = $"{v879}"
        let v883 : unit = ()
        let v884 : (unit -> unit) = closure10(v878, v880)
        let v885 : unit = (fun () -> v884 (); v883) ()
        let v888 : string = "exit_code"
        let v889 : string = $"{v888}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v878, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = " = "
        let v898 : string = $"{v897}"
        let v901 : unit = ()
        let v902 : (unit -> unit) = closure10(v878, v898)
        let v903 : unit = (fun () -> v902 (); v901) ()
        let v906 : string = $"{v2}"
        let v909 : unit = ()
        let v910 : (unit -> unit) = closure10(v878, v906)
        let v911 : unit = (fun () -> v910 (); v909) ()
        let v914 : string = "; "
        let v915 : string = $"{v914}"
        let v918 : unit = ()
        let v919 : (unit -> unit) = closure10(v878, v915)
        let v920 : unit = (fun () -> v919 (); v918) ()
        let v923 : string = "run_result"
        let v924 : string = $"{v923}"
        let v927 : unit = ()
        let v928 : (unit -> unit) = closure10(v878, v924)
        let v929 : unit = (fun () -> v928 (); v927) ()
        let v932 : string = $"{v897}"
        let v935 : unit = ()
        let v936 : (unit -> unit) = closure10(v878, v932)
        let v937 : unit = (fun () -> v936 (); v935) ()
        let v940 : string = $"{v1}"
        let v943 : unit = ()
        let v944 : (unit -> unit) = closure10(v878, v940)
        let v945 : unit = (fun () -> v944 (); v943) ()
        let v948 : string = $"{v914}"
        let v951 : unit = ()
        let v952 : (unit -> unit) = closure10(v878, v948)
        let v953 : unit = (fun () -> v952 (); v951) ()
        let v956 : string = "new_code_path"
        let v957 : string = $"{v956}"
        let v960 : unit = ()
        let v961 : (unit -> unit) = closure10(v878, v957)
        let v962 : unit = (fun () -> v961 (); v960) ()
        let v965 : string = $"{v897}"
        let v968 : unit = ()
        let v969 : (unit -> unit) = closure10(v878, v965)
        let v970 : unit = (fun () -> v969 (); v968) ()
        let v973 : string = $"{v0}"
        let v976 : unit = ()
        let v977 : (unit -> unit) = closure10(v878, v973)
        let v978 : unit = (fun () -> v977 (); v976) ()
        let v981 : string = $"{v914}"
        let v984 : unit = ()
        let v985 : (unit -> unit) = closure10(v878, v981)
        let v986 : unit = (fun () -> v985 (); v984) ()
        let v989 : string = "external_command"
        let v990 : string = $"{v989}"
        let v993 : unit = ()
        let v994 : (unit -> unit) = closure10(v878, v990)
        let v995 : unit = (fun () -> v994 (); v993) ()
        let v998 : string = $"{v897}"
        let v1001 : unit = ()
        let v1002 : (unit -> unit) = closure10(v878, v998)
        let v1003 : unit = (fun () -> v1002 (); v1001) ()
        let v1006 : string = $"{v3}"
        let v1009 : unit = ()
        let v1010 : (unit -> unit) = closure10(v878, v1006)
        let v1011 : unit = (fun () -> v1010 (); v1009) ()
        let v1014 : string = " }"
        let v1015 : string = $"{v1014}"
        let v1018 : unit = ()
        let v1019 : (unit -> unit) = closure10(v878, v1015)
        let v1020 : unit = (fun () -> v1019 (); v1018) ()
        let v1023 : string = v878.l0
        let v1024 : (unit -> string) = closure160()
        let v1025 : string = $"{v486} {v870} #{v876} %s{v1024 ()} / {v1023}"
        let v1028 : char list = []
        let v1029 : (char list -> (char [])) = List.toArray
        let v1030 : (char []) = v1029 v1028
        let v1033 : string = v1025.TrimStart v1030 
        let v1051 : char list = []
        let v1052 : char list = '/' :: v1051 
        let v1055 : char list = ' ' :: v1052 
        let v1058 : (char list -> (char [])) = List.toArray
        let v1059 : (char []) = v1058 v1055
        let v1062 : string = v1033.TrimEnd v1059 
        let v1080 : (string -> unit) = closure12()
        let v1081 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1082 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1082 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1083 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1083 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1084 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1062 v1084 
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1080 v1062
        let _v1081 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1080 v1062
        let _v1081 = () 
        #endif
#else
        v1080 v1062
        let _v1081 = () 
        #endif
        _v1081 
        let v1085 : (string -> unit) = v20.l0
        v1085 v1062
and closure162 () () : string =
    let v0 : string = "spiral_builder.run / invalid subcommand"
    v0
and closure161 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US0 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure7(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US3 option = None
        let _v102 = ref v102 
        let v103 : US3 option ref = _v102 
        let v104 : (US3 option -> US3 option ref) = closure8(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure9(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US3 option = _v102.Value 
        let v121 : US3 = US3_1
        let v122 : US3 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US3_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US3_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method6()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US3 option = None
        let _v170 = ref v170 
        let v171 : US3 option ref = _v170 
        let v172 : (US3 option -> US3 option ref) = closure8(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure9(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US3 option = _v170.Value 
        let v189 : US3 = US3_1
        let v190 : US3 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US3_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US3_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method6()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US3 option = None
        let _v240 = ref v240 
        let v241 : US3 option ref = _v240 
        let v242 : (US3 option -> US3 option ref) = closure8(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure9(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US3 option = _v240.Value 
        let v259 : US3 = US3_1
        let v260 : US3 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US3_1 -> (* None *)
                v239
            | US3_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US3 option = None
        let _v280 = ref v280 
        let v281 : US3 option ref = _v280 
        let v282 : (US3 option -> US3 option ref) = closure8(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure9(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US3 option = _v280.Value 
        let v299 : US3 = US3_1
        let v300 : US3 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US3_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US3_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method7()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US3 option = None
        let _v348 = ref v348 
        let v349 : US3 option ref = _v348 
        let v350 : (US3 option -> US3 option ref) = closure8(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure9(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US3 option = _v348.Value 
        let v367 : US3 = US3_1
        let v368 : US3 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US3_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US3_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method7()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US3 option = None
        let _v416 = ref v416 
        let v417 : US3 option ref = _v416 
        let v418 : (US3 option -> US3 option ref) = closure8(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure9(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US3 option = _v416.Value 
        let v435 : US3 = US3_1
        let v436 : US3 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US3_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US3_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method7()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = method8()
        let _v554 = v555 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v556 : string = method8()
        let _v554 = v556 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v557 : string = method8()
        let _v554 = v557 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v558 : string = method9()
        let _v554 = v558 
        #endif
#if FABLE_COMPILER_PYTHON
        let v559 : string = method9()
        let _v554 = v559 
        #endif
#else
        let v560 : string = method9()
        let _v554 = v560 
        #endif
        let v561 : string = _v554 
        let v566 : string = method10()
        let v567 : Mut4 = {l0 = v566} : Mut4
        let v568 : US0 = US0_0
        let v569 : string = $"%A{v568}"
        let v573 : string = $"{v569}"
        let v576 : unit = ()
        let v577 : (unit -> unit) = closure10(v567, v573)
        let v578 : unit = (fun () -> v577 (); v576) ()
        let v581 : string = v567.l0
        let v582 : (string []) = v581.Split v561 
        let v585 : string = v582.[int 0]
        let v588 : string = method10()
        let v589 : Mut4 = {l0 = v588} : Mut4
        let v590 : US0 = US0_1
        let v591 : string = $"%A{v590}"
        let v595 : string = $"{v591}"
        let v598 : unit = ()
        let v599 : (unit -> unit) = closure10(v589, v595)
        let v600 : unit = (fun () -> v599 (); v598) ()
        let v603 : string = v589.l0
        let v604 : bool = v603.StartsWith v585 
        let v610 : US1 =
            if v604 then
                let v607 : string = "Verbose"
                US1_0(v607)
            else
                US1_1
        let v616 : US1 =
            match v610 with
            | US1_1 -> (* None *)
                let v613 : string = "Debug"
                US1_0(v613)
            | US1_0(v611) -> (* Some *)
                US1_0(v611)
        let v620 : string =
            match v616 with
            | US1_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US1_0(v617) -> (* Some *)
                v617
        let v621 : (unit -> string) = v620.ToLower
        let v622 : string = v621 ()
        let v625 : string = v622.PadLeft (7, ' ')
        let v639 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v640 : string = "inline_colorization::color_bright_blue"
        let v641 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v640 
        let v642 : string = "&*$0"
        let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v642 
        let v644 : string = "inline_colorization::color_reset"
        let v645 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v644 
        let v646 : string = "\"{v641}{v643}{v645}\""
        let v647 : string = @$"format!(" + v646 + ")"
        let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "fable_library_rust::String_::fromString($0)"
        let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
        let _v639 = v650 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v651 : string = "inline_colorization::color_bright_blue"
        let v652 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v651 
        let v653 : string = "&*$0"
        let v654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v653 
        let v655 : string = "inline_colorization::color_reset"
        let v656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v655 
        let v657 : string = "\"{v652}{v654}{v656}\""
        let v658 : string = @$"format!(" + v657 + ")"
        let v659 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "fable_library_rust::String_::fromString($0)"
        let v661 : string = Fable.Core.RustInterop.emitRustExpr v659 v660 
        let _v639 = v661 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v662 : string = "inline_colorization::color_bright_blue"
        let v663 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v662 
        let v664 : string = "&*$0"
        let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v625 v664 
        let v666 : string = "inline_colorization::color_reset"
        let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v666 
        let v668 : string = "\"{v663}{v665}{v667}\""
        let v669 : string = @$"format!(" + v668 + ")"
        let v670 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "fable_library_rust::String_::fromString($0)"
        let v672 : string = Fable.Core.RustInterop.emitRustExpr v670 v671 
        let _v639 = v672 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v673 : string = "\u001b[94m"
        let v674 : string = method11()
        let v675 : string = v673 + v625 
        let v676 : string = v675 + v674 
        let _v639 = v676 
        #endif
#if FABLE_COMPILER_PYTHON
        let v677 : string = "\u001b[94m"
        let v678 : string = method11()
        let v679 : string = v677 + v625 
        let v680 : string = v679 + v678 
        let _v639 = v680 
        #endif
#else
        let v681 : string = "\u001b[94m"
        let v682 : string = method11()
        let v683 : string = v681 + v625 
        let v684 : string = v683 + v682 
        let _v639 = v684 
        #endif
        let v685 : string = _v639 
        let v691 : int64 = v86.l0
        let v692 : string = method10()
        let v693 : Mut4 = {l0 = v692} : Mut4
        let v694 : string = "{ "
        let v695 : string = $"{v694}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure10(v693, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = "subcommand"
        let v704 : string = $"{v703}"
        let v707 : unit = ()
        let v708 : (unit -> unit) = closure10(v693, v704)
        let v709 : unit = (fun () -> v708 (); v707) ()
        let v712 : string = " = "
        let v713 : string = $"{v712}"
        let v716 : unit = ()
        let v717 : (unit -> unit) = closure10(v693, v713)
        let v718 : unit = (fun () -> v717 (); v716) ()
        let v721 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v722 : string = "format!(\"{:#?}\", $0)"
        let v723 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v722 
        let v724 : string = "fable_library_rust::String_::fromString($0)"
        let v725 : string = Fable.Core.RustInterop.emitRustExpr v723 v724 
        let _v721 = v725 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v726 : string = "format!(\"{:#?}\", $0)"
        let v727 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v726 
        let v728 : string = "fable_library_rust::String_::fromString($0)"
        let v729 : string = Fable.Core.RustInterop.emitRustExpr v727 v728 
        let _v721 = v729 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v730 : string = "format!(\"{:#?}\", $0)"
        let v731 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v730 
        let v732 : string = "fable_library_rust::String_::fromString($0)"
        let v733 : string = Fable.Core.RustInterop.emitRustExpr v731 v732 
        let _v721 = v733 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v734 : string = $"%A{v1}"
        let _v721 = v734 
        #endif
#if FABLE_COMPILER_PYTHON
        let v737 : string = $"%A{v1}"
        let _v721 = v737 
        #endif
#else
        let v740 : string = $"%A{v1}"
        let _v721 = v740 
        #endif
        let v743 : string = _v721 
        let v748 : string = $"{v743}"
        let v751 : unit = ()
        let v752 : (unit -> unit) = closure10(v693, v748)
        let v753 : unit = (fun () -> v752 (); v751) ()
        let v756 : string = "; "
        let v757 : string = $"{v756}"
        let v760 : unit = ()
        let v761 : (unit -> unit) = closure10(v693, v757)
        let v762 : unit = (fun () -> v761 (); v760) ()
        let v765 : string = "arg_matches"
        let v766 : string = $"{v765}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v693, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = $"{v712}"
        let v777 : unit = ()
        let v778 : (unit -> unit) = closure10(v693, v774)
        let v779 : unit = (fun () -> v778 (); v777) ()
        let v782 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v783 : string = "format!(\"{:#?}\", $0)"
        let v784 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v783 
        let v785 : string = "fable_library_rust::String_::fromString($0)"
        let v786 : string = Fable.Core.RustInterop.emitRustExpr v784 v785 
        let _v782 = v786 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v787 : string = "format!(\"{:#?}\", $0)"
        let v788 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v787 
        let v789 : string = "fable_library_rust::String_::fromString($0)"
        let v790 : string = Fable.Core.RustInterop.emitRustExpr v788 v789 
        let _v782 = v790 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v791 : string = "format!(\"{:#?}\", $0)"
        let v792 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v791 
        let v793 : string = "fable_library_rust::String_::fromString($0)"
        let v794 : string = Fable.Core.RustInterop.emitRustExpr v792 v793 
        let _v782 = v794 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v795 : string = $"%A{v0}"
        let _v782 = v795 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = $"%A{v0}"
        let _v782 = v798 
        #endif
#else
        let v801 : string = $"%A{v0}"
        let _v782 = v801 
        #endif
        let v804 : string = _v782 
        let v809 : string = $"{v804}"
        let v812 : unit = ()
        let v813 : (unit -> unit) = closure10(v693, v809)
        let v814 : unit = (fun () -> v813 (); v812) ()
        let v817 : string = " }"
        let v818 : string = $"{v817}"
        let v821 : unit = ()
        let v822 : (unit -> unit) = closure10(v693, v818)
        let v823 : unit = (fun () -> v822 (); v821) ()
        let v826 : string = v693.l0
        let v827 : (unit -> string) = closure162()
        let v828 : string = $"{v484} {v685} #{v691} %s{v827 ()} / {v826}"
        let v831 : char list = []
        let v832 : (char list -> (char [])) = List.toArray
        let v833 : (char []) = v832 v831
        let v836 : string = v828.TrimStart v833 
        let v854 : char list = []
        let v855 : char list = '/' :: v854 
        let v858 : char list = ' ' :: v855 
        let v861 : (char list -> (char [])) = List.toArray
        let v862 : (char []) = v861 v858
        let v865 : string = v836.TrimEnd v862 
        let v883 : (string -> unit) = closure12()
        let v884 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v885 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v865 v885 
        let _v884 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v886 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v865 v886 
        let _v884 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v887 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v865 v887 
        let _v884 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v883 v865
        let _v884 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v883 v865
        let _v884 = () 
        #endif
#else
        v883 v865
        let _v884 = () 
        #endif
        _v884 
        let v888 : (string -> unit) = v18.l0
        v888 v865
and closure163 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and closure164 () (v0 : serde_json_Error) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    let v22 : string = "fable_library_rust::String_::fromString($0)"
    let v23 : string = Fable.Core.RustInterop.emitRustExpr v17 v22 
    v23
and method117 () : (serde_json_Error -> string) =
    closure164()
and method118 (v0 : Result<string, string>) : Result<string, string> =
    v0
and method12 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(async move { //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v5 : (Ref<Str> -> std_string_String) = closure14()
    let v6 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v5) v4 
    let v7 : US4 option = None
    let _v7 = ref v7 
    let v8 : US4 option ref = _v7 
    let v9 : (US4 option -> US4 option ref) = closure15(v8)
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure16(v6, v9)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v16 : US4 option = _v7.Value 
    let v28 : US4 = US4_1
    let v29 : US4 = v16 |> Option.defaultValue v28 
    let v29137 : (struct (string * string) []) =
        match v29 with
        | US4_0(v33, v34) -> (* Some *)
            let v35 : string = "fable_library_rust::String_::fromString($0)"
            let v36 : string = Fable.Core.RustInterop.emitRustExpr v33 v35 
            let v37 : bool = v36 = "cuda"
            if v37 then
                let v38 : string = method13()
                let v39 : string = "&*$0"
                let v40 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v38 v39 
                let v41 : string = "clap::ArgMatches::get_one(&$0, v40).cloned()"
                let v42 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v41 
                let v43 : US5 option = None
                let _v43 = ref v43 
                let v44 : US5 option ref = _v43 
                let v45 : (US5 option -> US5 option ref) = closure17(v44)
                let v46 : unit = ()
                let v47 : (unit -> unit) = closure18(v42, v45)
                let v48 : unit = (fun () -> v47 (); v46) ()
                let v51 : US5 option = _v43.Value 
                let v62 : US5 = US5_1
                let v63 : US5 = v51 |> Option.defaultValue v62 
                let v70 : std_string_String =
                    match v63 with
                    | US5_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US5_0(v67) -> (* Some *)
                        v67
                let v71 : string = "fable_library_rust::String_::fromString($0)"
                let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
                let v73 : string = method14()
                let v74 : string = "&*$0"
                let v75 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v73 v74 
                let v76 : string = "clap::ArgMatches::get_one(&$0, v75).cloned()"
                let v77 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v76 
                let v78 : US5 option = None
                let _v78 = ref v78 
                let v79 : US5 option ref = _v78 
                let v80 : (US5 option -> US5 option ref) = closure17(v79)
                let v81 : unit = ()
                let v82 : (unit -> unit) = closure18(v77, v80)
                let v83 : unit = (fun () -> v82 (); v81) ()
                let v86 : US5 option = _v78.Value 
                let v97 : US5 = US5_1
                let v98 : US5 = v86 |> Option.defaultValue v97 
                let v127 : US6 =
                    match v98 with
                    | US5_1 -> (* None *)
                        US6_1
                    | US5_0(v102) -> (* Some *)
                        let v103 : string = "fable_library_rust::String_::fromString($0)"
                        let v104 : string = Fable.Core.RustInterop.emitRustExpr v102 v103 
                        
                        
                        let v105 : bool = "Pip" = v104
                        let v109 : US7 =
                            if v105 then
                                let v106 : US8 = US8_0
                                US7_0(v106)
                            else
                                US7_1
                        let v123 : US7 =
                            match v109 with
                            | US7_1 -> (* None *)
                                let v112 : bool = "Poetry" = v104
                                let v116 : US7 =
                                    if v112 then
                                        let v113 : US8 = US8_1
                                        US7_0(v113)
                                    else
                                        US7_1
                                match v116 with
                                | US7_1 -> (* None *)
                                    US7_1
                                | US7_0(v117) -> (* Some *)
                                    US7_0(v117)
                            | US7_0(v110) -> (* Some *)
                                US7_0(v110)
                        US6_0(v123)
                let v134 : US7 =
                    match v127 with
                    | US6_0(v128) -> (* Some *)
                        match v128 with
                        | US7_0(v129) -> (* Some *)
                            US7_0(v129)
                        | _ ->
                            US7_1
                    | _ ->
                        US7_1
                let v138 : US8 =
                    match v134 with
                    | US7_1 -> (* None *)
                        US8_0
                    | US7_0(v135) -> (* Some *)
                        v135
                let v139 : string = method15()
                let v140 : string = "&*$0"
                let v141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v139 v140 
                let v142 : string = "clap::ArgMatches::get_many(&$0, v141).map(|x| x.cloned().into_iter().collect())"
                let v143 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v142 
                let v144 : US9 option = None
                let _v144 = ref v144 
                let v145 : US9 option ref = _v144 
                let v146 : (US9 option -> US9 option ref) = closure19(v145)
                let v147 : unit = ()
                let v148 : (unit -> unit) = closure20(v143, v146)
                let v149 : unit = (fun () -> v148 (); v147) ()
                let v152 : US9 option = _v144.Value 
                let v163 : US9 = US9_1
                let v164 : US9 = v152 |> Option.defaultValue v163 
                let v168 : (std_string_String []) = [||]
                let v169 : string = "$0.to_vec()"
                let v170 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v168 v169 
                let v173 : Vec<std_string_String> =
                    match v164 with
                    | US9_1 -> (* None *)
                        v170
                    | US9_0(v171) -> (* Some *)
                        v171
                let v174 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v175 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v176 : string = "std::fs::read(&*$0)"
                let v177 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v72 v176 
                let v178 : string = "$0.unwrap()"
                let v179 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v177 v178 
                let _v175 = v179 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v180 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v180 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v183 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v183 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v186 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v186 
                #endif
#if FABLE_COMPILER_PYTHON
                let v189 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v189 
                #endif
#else
                let v192 : (uint8 []) = v72 |> System.IO.File.ReadAllBytes
                let v193 : string = "$0.to_vec()"
                let v194 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v192 v193 
                let _v175 = v194 
                #endif
                let v195 : Vec<uint8> = _v175 
                let v200 : Vec<uint8> = method16(v195)
                let v201 : string = "std::string::String::from_utf8($0)"
                let v202 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v200 v201 
                let v203 : string = "$0.unwrap()"
                let v204 : std_string_String = Fable.Core.RustInterop.emitRustExpr v202 v203 
                let v205 : string = "fable_library_rust::String_::fromString($0)"
                let v206 : string = Fable.Core.RustInterop.emitRustExpr v204 v205 
                let _v174 = v206 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v207 : string = null |> unbox<string>
                let _v174 = v207 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v210 : string = null |> unbox<string>
                let _v174 = v210 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v213 : string = null |> unbox<string>
                let _v174 = v213 
                #endif
#if FABLE_COMPILER_PYTHON
                let v216 : string = null |> unbox<string>
                let _v174 = v216 
                #endif
#else
                let v219 : string = v72 |> System.IO.File.ReadAllText
                let _v174 = v219 
                #endif
                let v220 : string = _v174 
                let v225 : string = __SOURCE_DIRECTORY__
                let v226 : string = "polyglot"
                let v227 : string = ".devcontainer"
                let v228 : string = method17(v226, v227)
                let v229 : US12 = method20(v228, v225)
                let v1159 : US1 =
                    match v229 with
                    | US12_1(v232) -> (* Error *)
                        let v233 : unit = ()
                        let v234 : (unit -> unit) = closure22(v232)
                        let v235 : unit = (fun () -> v234 (); v233) ()
                        US1_1
                    | US12_0(v230) -> (* Ok *)
                        US1_0(v230)
                let v2096 : US1 =
                    match v1159 with
                    | US1_1 -> (* None *)
                        let v1162 : string = method25()
                        let v1163 : string = method17(v226, v227)
                        let v1164 : US12 = method20(v1163, v1162)
                        match v1164 with
                        | US12_1(v1167) -> (* Error *)
                            let v1168 : unit = ()
                            let v1169 : (unit -> unit) = closure22(v1167)
                            let v1170 : unit = (fun () -> v1169 (); v1168) ()
                            US1_1
                        | US12_0(v1165) -> (* Ok *)
                            US1_0(v1165)
                    | US1_0(v1160) -> (* Some *)
                        US1_0(v1160)
                let v2100 : string =
                    match v2096 with
                    | US1_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US1_0(v2097) -> (* Some *)
                        v2097
                let v2101 : string = method17(v2100, v226)
                let v2102 : string = method25()
                let v2103 : (unit -> string) = v2102.ToLower
                let v2104 : string = v2103 ()
                let v2107 : (unit -> string) = v2101.ToLower
                let v2108 : string = v2107 ()
                let v2111 : bool = v2104.StartsWith v2108 
                let v2116 : US12 =
                    if v2111 then
                        US12_1(v2108)
                    else
                        US12_0(v2108)
                let v2122 : Result<string, string> =
                    match v2116 with
                    | US12_1(v2119) -> (* Error *)
                        let v2120 : Result<string, string> = Error v2119 
                        v2120
                    | US12_0(v2117) -> (* Ok *)
                        let v2118 : Result<string, string> = Ok v2117 
                        v2118
                let v2123 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v2124 : bool = Fable.Core.RustInterop.emitRustExpr v2122 v2123 
                let v2125 : string = "x"
                let v2126 : string = Fable.Core.RustInterop.emitRustExpr () v2125 
                let v2127 : string = "true; $0 })"
                let v2128 : bool = Fable.Core.RustInterop.emitRustExpr v2126 v2127 
                let v2129 : string = "_result_unwrap_or_else"
                let v2130 : string = Fable.Core.RustInterop.emitRustExpr () v2129 
                let v2131 : string = method26(v72)
                let v2137 : string =
                    match v138 with
                    | US8_0 -> (* Pip *)
                        let v2132 : string = "requirements.txt"
                        method17(v2131, v2132)
                    | US8_1 -> (* Poetry *)
                        let v2134 : string = "pyproject.toml"
                        method17(v2131, v2134)
                let v2138 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v2139 : bool = Fable.Core.RustInterop.emitRustExpr v173 v2138 
                let v2140 : string = "x"
                let v2141 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2140 
                let v2142 : string = "fable_library_rust::String_::fromString($0)"
                let v2143 : string = Fable.Core.RustInterop.emitRustExpr v2141 v2142 
                let v2144 : string = "="
                let v2145 : bool = v2143.Contains v2144 
                let v2156 : string =
                    if v2145 then
                        v2143
                    else
                        let v2148 : string = "]"
                        let v2149 : bool = v2143.EndsWith v2148 
                        if v2149 then
                            let v2150 : string = $"={{version='*',features=["
                            let v2151 : string = "["
                            let v2152 : string = v2143.Replace (v2151, v2150)
                            let v2153 : string = $"{v2152}}}"
                            v2153
                        else
                            let v2154 : string = $"{v2143}='*'"
                            v2154
                let v2157 : string = "true; $0 }).collect::<Vec<_>>()"
                let v2158 : bool = Fable.Core.RustInterop.emitRustExpr v2156 v2157 
                let v2159 : string = "_vec_map"
                let v2160 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2159 
                let v2161 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v2162 : (string []) = Fable.Core.RustInterop.emitRustExpr v2160 v2161 
                let v2163 : string seq = seq { for i = 0 to v2162.Length - 1 do yield v2162.[i] }
                let v2166 : (string -> (string seq -> string)) = String.concat
                let v2167 : string = "\n"
                let v2168 : (string seq -> string) = v2166 v2167
                let v2169 : string = v2168 v2163
                let v2172 : bool = v2169 = ""
                let struct (v2228 : int32, v2229 : string) =
                    if v2172 then
                        let v2173 : string = ""
                        struct (0, v2173)
                    else
                        let v2212 : string =
                            match v138 with
                            | US8_0 -> (* Pip *)
                                v2169
                            | US8_1 -> (* Poetry *)
                                let v2174 : string = $"[tool.poetry]"
                                let v2175 : string = $"name = \"test\""
                                let v2176 : string = v2174 + v2167 
                                let v2177 : string = v2176 + v2175 
                                let v2178 : string = $"version = \"0.0.1\""
                                let v2179 : string = v2177 + v2167 
                                let v2180 : string = v2179 + v2178 
                                let v2181 : string = $"description = \"\""
                                let v2182 : string = v2180 + v2167 
                                let v2183 : string = v2182 + v2181 
                                let v2184 : string = $"authors = []"
                                let v2185 : string = v2183 + v2167 
                                let v2186 : string = v2185 + v2184 
                                let v2187 : string = $""
                                let v2188 : string = v2186 + v2167 
                                let v2189 : string = v2188 + v2187 
                                let v2190 : string = $"[tool.poetry.dependencies]"
                                let v2191 : string = v2189 + v2167 
                                let v2192 : string = v2191 + v2190 
                                let v2193 : string = $"python=\"~3.12\""
                                let v2194 : string = v2192 + v2167 
                                let v2195 : string = v2194 + v2193 
                                let v2196 : string = $"{v2169}"
                                let v2197 : string = v2195 + v2167 
                                let v2198 : string = v2197 + v2196 
                                let v2199 : string = $""
                                let v2200 : string = v2198 + v2167 
                                let v2201 : string = v2200 + v2199 
                                let v2202 : string = $"[build-system]"
                                let v2203 : string = v2201 + v2167 
                                let v2204 : string = v2203 + v2202 
                                let v2205 : string = $"requires = [\"poetry-core\"]"
                                let v2206 : string = v2204 + v2167 
                                let v2207 : string = v2206 + v2205 
                                let v2208 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v2209 : string = v2207 + v2167 
                                let v2210 : string = v2209 + v2208 
                                v2210
                        method27(v2137, v2212)
                        let v2213 : System.Threading.CancellationToken option = None
                        let v2214 : (struct (string * string) []) = [||]
                        let v2215 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v2216 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v2217 : string option = None
                        let v2221 : string =
                            match v138 with
                            | US8_0 -> (* Pip *)
                                let v2218 : string = $"pip install -r requirements.txt"
                                v2218
                            | US8_1 -> (* Poetry *)
                                let v2219 : string = $"poetry install"
                                v2219
                        let v2222 : string option = Some v2131 
                        let v2225 : bool = true
                        method42(v2221, v2213, v2214, v2215, v2216, v2225, v2222)
                let v2230 : bool = v2228 <> 0 
                let struct (v4480 : US1, v4481 : US1, v4482 : US1) =
                    if v2230 then
                        let v2233 : unit = ()
                        let v2234 : (unit -> unit) = closure83(v138, v72, v2229, v2228)
                        let v2235 : unit = (fun () -> v2234 (); v2233) ()
                        let v3321 : string = "py"
                        let v3322 : US1 = US1_0(v3321)
                        let v3323 : US1 = US1_1
                        let v3324 : US1 = US1_1
                        struct (v3322, v3323, v3324)
                    else
                        let v3328 : string =
                            match v138 with
                            | US8_0 -> (* Pip *)
                                let v3325 : string = $"python \"{v72}\""
                                v3325
                            | US8_1 -> (* Poetry *)
                                let v3326 : string = $"poetry run python \"{v72}\""
                                v3326
                        let v3329 : string = "TRACE_LEVEL"
                        let v3330 : string = "Verbose"
                        let v3331 : (struct (string * string) []) = [|struct (v3329, v3330)|]
                        let v3332 : System.Threading.CancellationToken option = None
                        let v3333 : (struct (string * string) []) = [||]
                        let v3334 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v3335 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v3336 : string option = None
                        let v3337 : string option = Some v2131 
                        let v3340 : bool = true
                        let struct (v3341 : int32, v3342 : string) = method42(v3328, v3332, v3331, v3334, v3335, v3340, v3337)
                        let v3343 : int32 = v3331.Length
                        let v3344 : (string []) = Array.zeroCreate<string> (v3343)
                        let v3345 : Mut5 = {l0 = 0} : Mut5
                        while method45(v3343, v3345) do
                            let v3347 : int32 = v3345.l0
                            let struct (v3348 : string, v3349 : string) = v3331.[int v3347]
                            let v3350 : string = $"$env:{v3348}=''{v3349}''"
                            v3344.[int v3347] <- v3350
                            let v3351 : int32 = v3347 + 1
                            v3345.l0 <- v3351
                            ()
                        let v3352 : string seq = v3344 |> Seq.ofArray
                        let v3355 : (string -> (string seq -> string)) = String.concat
                        let v3356 : string = ";"
                        let v3357 : (string seq -> string) = v3355 v3356
                        let v3358 : string = v3357 v3352
                        let v3361 : string = $"pwsh -c '{v3358}; {v3328}'"
                        let v3362 : bool = v3341 = 0
                        let v3367 : bool =
                            if v3362 then
                                true
                            else
                                let v3363 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v3364 : bool = v3342.Contains v3363 
                                v3364
                        let struct (v4477 : US1, v4478 : US1, v4479 : US1) =
                            if v3367 then
                                let v3368 : (string -> US1) = closure85()
                                let v3369 : (unit -> string) = closure86(v3342)
                                let v3370 : (exn -> US1) = closure87(v72, v3342, v3361)
                                let v3371 : US1 = US1_1
                                let result = ref v3371
                                try
                                    result.Value <- v3369 () |> v3368 
                                with ex ->
                                    result.Value <- v3370 ex 
                                let v3372 : US1 = result.Value
                                let v3382 : string option =
                                    match v3372 with
                                    | US1_1 -> (* None *)
                                        let v3380 : string option = None
                                        v3380
                                    | US1_0(v3376) -> (* Some *)
                                        let v3377 : string option = Some v3376 
                                        v3377
                                let v3383 : string = "$0.unwrap()"
                                let v3384 : string = Fable.Core.RustInterop.emitRustExpr v3382 v3383 
                                let v3385 : string = "py"
                                let v3386 : US1 = US1_0(v3385)
                                let v3387 : US1 = US1_0(v220)
                                let v3388 : US1 = US1_0(v3384)
                                struct (v3386, v3387, v3388)
                            else
                                let v3389 : unit = ()
                                let v3390 : (unit -> unit) = closure90(v72, v3342, v3341, v3361)
                                let v3391 : unit = (fun () -> v3390 (); v3389) ()
                                let v4473 : string = "py"
                                let v4474 : US1 = US1_0(v4473)
                                let v4475 : US1 = US1_1
                                let v4476 : US1 = US1_1
                                struct (v4474, v4475, v4476)
                        struct (v4477, v4478, v4479)
                let v4486 : string =
                    match v4480 with
                    | US1_1 -> (* None *)
                        let v4484 : string = ""
                        v4484
                    | US1_0(v4483) -> (* Some *)
                        v4483
                let v4487 : string = "extension"
                let v4491 : string =
                    match v4481 with
                    | US1_1 -> (* None *)
                        let v4489 : string = ""
                        v4489
                    | US1_0(v4488) -> (* Some *)
                        v4488
                let v4492 : string = "code"
                let v4496 : string =
                    match v4482 with
                    | US1_1 -> (* None *)
                        let v4494 : string = ""
                        v4494
                    | US1_0(v4493) -> (* Some *)
                        v4493
                let v4497 : string = "output"
                let v4498 : (struct (string * string) []) = [|struct (v4487, v4486); struct (v4492, v4491); struct (v4497, v4496)|]
                let v4499 : string = "$0.to_vec()"
                let v4500 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4498 v4499 
                let v4501 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v4502 : (struct (string * string) -> (std_string_String * std_string_String)) = closure92()
                let v4503 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v4500, v4502) v4501 
                let v4504 : string = "std::collections::BTreeMap::from_iter(v4503.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v4505 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4504 
                let v4506 : string = "serde_json::to_string(&v4505)"
                let v4507 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v4506 
                let v4508 : string = "$0.unwrap()"
                let v4509 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4507 v4508 
                let v4510 : string = "fable_library_rust::String_::fromString($0)"
                let v4511 : string = Fable.Core.RustInterop.emitRustExpr v4509 v4510 
                let v4512 : string = "command_result"
                [|struct (v4512, v4511)|]
            else
                let v4514 : string = "fable_library_rust::String_::fromString($0)"
                let v4515 : string = Fable.Core.RustInterop.emitRustExpr v33 v4514 
                let v4516 : bool = v4515 = "fable"
                if v4516 then
                    let v4517 : string = method76()
                    let v4518 : string = "&*$0"
                    let v4519 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4517 v4518 
                    let v4520 : string = "clap::ArgMatches::get_one(&$0, v4519).cloned()"
                    let v4521 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v4520 
                    let v4522 : US5 option = None
                    let _v4522 = ref v4522 
                    let v4523 : US5 option ref = _v4522 
                    let v4524 : (US5 option -> US5 option ref) = closure17(v4523)
                    let v4525 : unit = ()
                    let v4526 : (unit -> unit) = closure18(v4521, v4524)
                    let v4527 : unit = (fun () -> v4526 (); v4525) ()
                    let v4530 : US5 option = _v4522.Value 
                    let v4541 : US5 = US5_1
                    let v4542 : US5 = v4530 |> Option.defaultValue v4541 
                    let v4549 : std_string_String =
                        match v4542 with
                        | US5_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US5_0(v4546) -> (* Some *)
                            v4546
                    let v4550 : string = "fable_library_rust::String_::fromString($0)"
                    let v4551 : string = Fable.Core.RustInterop.emitRustExpr v4549 v4550 
                    let v4552 : string = method77()
                    let v4553 : string = "&*$0"
                    let v4554 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4552 v4553 
                    let v4555 : string = "clap::ArgMatches::get_one(&$0, v4554).cloned()"
                    let v4556 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v4555 
                    let v4557 : US5 option = None
                    let _v4557 = ref v4557 
                    let v4558 : US5 option ref = _v4557 
                    let v4559 : (US5 option -> US5 option ref) = closure17(v4558)
                    let v4560 : unit = ()
                    let v4561 : (unit -> unit) = closure18(v4556, v4559)
                    let v4562 : unit = (fun () -> v4561 (); v4560) ()
                    let v4565 : US5 option = _v4557.Value 
                    let v4576 : US5 = US5_1
                    let v4577 : US5 = v4565 |> Option.defaultValue v4576 
                    let v4587 : US1 =
                        match v4577 with
                        | US5_1 -> (* None *)
                            US1_1
                        | US5_0(v4581) -> (* Some *)
                            let v4582 : string = "fable_library_rust::String_::fromString($0)"
                            let v4583 : string = Fable.Core.RustInterop.emitRustExpr v4581 v4582 
                            US1_0(v4583)
                    let v4621 : string =
                        match v4587 with
                        | US1_1 -> (* None *)
                            let v4619 : string = "{}"
                            v4619
                        | US1_0(v4588) -> (* Some *)
                            let v4589 : clap_Command = method0()
                            let v4590 : string = $"_ {v4588} --fs-path \"{v4551}\""
                            let v4591 : US22 = method56(v4590)
                            let v4597 : (string []) =
                                match v4591 with
                                | US22_1(v4593) -> (* Error *)
                                    let v4594 : string = $"resultm.get / Result value was Error: {v4593}"
                                    failwith<(string [])> v4594
                                | US22_0(v4592) -> (* Ok *)
                                    v4592
                            let v4598 : string = "$0.to_vec()"
                            let v4599 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v4597 v4598 
                            let v4600 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                            let v4601 : bool = Fable.Core.RustInterop.emitRustExpr v4599 v4600 
                            let v4602 : string = "x"
                            let v4603 : string = Fable.Core.RustInterop.emitRustExpr () v4602 
                            let v4604 : string = "&*$0"
                            let v4605 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4603 v4604 
                            let v4606 : string = "String::from($0)"
                            let v4607 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4605 v4606 
                            let v4608 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v4609 : bool = Fable.Core.RustInterop.emitRustExpr v4607 v4608 
                            let v4610 : string = "_vec_map"
                            let v4611 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4610 
                            let v4612 : string = "clap::Command::get_matches_from($0, v4611)"
                            let v4613 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v4589 v4612 
                            let v4614 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method12(v0, v4613)
                            let v4615 : string = "v4614.await"
                            let v4616 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v4615 
                            let v4617 : string = "$0.unwrap()"
                            let v4618 : string = Fable.Core.RustInterop.emitRustExpr v4616 v4617 
                            v4618
                    let v4622 : string = "command_result"
                    [|struct (v4622, v4621)|]
                else
                    let v4624 : string = "fable_library_rust::String_::fromString($0)"
                    let v4625 : string = Fable.Core.RustInterop.emitRustExpr v33 v4624 
                    let v4626 : bool = v4625 = "dib"
                    if v4626 then
                        let v4627 : string = method78()
                        let v4628 : string = "&*$0"
                        let v4629 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4627 v4628 
                        let v4630 : string = "clap::ArgMatches::get_one(&$0, v4629).cloned()"
                        let v4631 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v4630 
                        let v4632 : (std_string_String -> string) = closure93()
                        let v4633 : string option = v4631 |> Option.map v4632 
                        let v4658 : string = "$0.unwrap()"
                        let v4659 : string = Fable.Core.RustInterop.emitRustExpr v4633 v4658 
                        let v4660 : string = method86()
                        let v4661 : string = "&*$0"
                        let v4662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4660 v4661 
                        let v4663 : string = "clap::ArgMatches::get_one(&$0, v4662).cloned()"
                        let v4664 : uint8 option = Fable.Core.RustInterop.emitRustExpr v34 v4663 
                        let v4665 : uint8 = v4664 |> Option.defaultValue 1uy 
                        let v4668 : string = method87()
                        let v4669 : string = "&*$0"
                        let v4670 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4668 v4669 
                        let v4671 : string = "clap::ArgMatches::get_one(&$0, v4670).cloned()"
                        let v4672 : string option = Fable.Core.RustInterop.emitRustExpr v34 v4671 
                        let v4673 : US1 option = None
                        let _v4673 = ref v4673 
                        let v4674 : US1 option ref = _v4673 
                        let v4675 : (US1 option -> US1 option ref) = closure3(v4674)
                        let v4676 : unit = ()
                        let v4677 : (unit -> unit) = closure4(v4672, v4675)
                        let v4678 : unit = (fun () -> v4677 (); v4676) ()
                        let v4681 : US1 option = _v4673.Value 
                        let v4692 : US1 = US1_1
                        let v4693 : US1 = v4681 |> Option.defaultValue v4692 
                        let v4697 : uint8 = 1uy
                        let struct (v4698 : int32, v4699 : string) = method88(v4693, v4665, v4659, v4697)
                        let v4700 : bool = v4698 <> 0 
                        let struct (v6524 : int32, v6525 : string) =
                            if v4700 then
                                struct (v4698, v4699)
                            else
                                let v4703 : System.Threading.CancellationToken option = None
                                let v4704 : (struct (string * string) []) = [||]
                                let v4705 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v4706 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v4707 : string option = None
                                let v4708 : string = $"jupyter nbconvert \"{v4659}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v4709 : bool = true
                                let struct (v4710 : int32, v4711 : string) = method42(v4708, v4703, v4704, v4705, v4706, v4709, v4707)
                                let v4712 : unit = ()
                                let v4713 : (unit -> unit) = closure96(v4711, v4710)
                                let v4714 : unit = (fun () -> v4713 (); v4712) ()
                                let v5549 : bool = v4710 <> 0 
                                if v5549 then
                                    let v5552 : string = $"repl_result: {v4699}

jupyter_result: {v4711}"
                                    struct (v4710, v5552)
                                else
                                    let v5553 : string = "'"
                                    let v5554 : string = "''"
                                    let v5555 : string = v4659.Replace (v5553, v5554)
                                    let v5556 : System.Threading.CancellationToken option = None
                                    let v5557 : (struct (string * string) []) = [||]
                                    let v5558 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v5559 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v5560 : string option = None
                                    let v5561 : string = $"pwsh -c \"$counter = 1; $path = '{v5555}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v5562 : bool = true
                                    let struct (v5563 : int32, v5564 : string) = method42(v5561, v5556, v5557, v5558, v5559, v5562, v5560)
                                    let v5565 : unit = ()
                                    let v5566 : (unit -> unit) = closure98(v5564, v5563)
                                    let v5567 : unit = (fun () -> v5566 (); v5565) ()
                                    let v6402 : string = $"{v4659}.html"
                                    let v6403 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v6404 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v6405 : string = "std::fs::read(&*$0)"
                                    let v6406 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6402 v6405 
                                    let v6407 : string = "$0.unwrap()"
                                    let v6408 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6406 v6407 
                                    let _v6404 = v6408 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v6409 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v6404 = v6409 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v6412 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v6404 = v6412 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v6415 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v6404 = v6415 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v6418 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v6404 = v6418 
                                    #endif
#else
                                    let v6421 : (uint8 []) = v6402 |> System.IO.File.ReadAllBytes
                                    let v6422 : string = "$0.to_vec()"
                                    let v6423 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6421 v6422 
                                    let _v6404 = v6423 
                                    #endif
                                    let v6424 : Vec<uint8> = _v6404 
                                    let v6429 : Vec<uint8> = method16(v6424)
                                    let v6430 : string = "std::string::String::from_utf8($0)"
                                    let v6431 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6429 v6430 
                                    let v6432 : string = "$0.unwrap()"
                                    let v6433 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6431 v6432 
                                    let v6434 : string = "fable_library_rust::String_::fromString($0)"
                                    let v6435 : string = Fable.Core.RustInterop.emitRustExpr v6433 v6434 
                                    let _v6403 = v6435 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v6436 : string = null |> unbox<string>
                                    let _v6403 = v6436 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v6439 : string = null |> unbox<string>
                                    let _v6403 = v6439 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v6442 : string = null |> unbox<string>
                                    let _v6403 = v6442 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v6445 : string = null |> unbox<string>
                                    let _v6403 = v6445 
                                    #endif
#else
                                    let v6448 : string = v6402 |> System.IO.File.ReadAllText
                                    let _v6403 = v6448 
                                    #endif
                                    let v6449 : string = _v6403 
                                    let v6454 : string = "\r\n"
                                    let v6455 : string = "\n"
                                    let v6456 : string = v6449.Replace (v6454, v6455)
                                    let v6457 : string = $"{v4659}.html"
                                    let v6458 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v6459 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v6457, v6456) v6459 
                                    let _v6458 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v6458 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v6458 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v6458 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v6458 = () 
                                    #endif
#else
                                    let v6460 : string = method41(v6456)
                                    System.IO.File.WriteAllText (v6457, v6460)
                                    let _v6458 = () 
                                    #endif
                                    _v6458 
                                    let v6461 : string = $"{v4659}.ipynb"
                                    let v6462 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v6463 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v6464 : string = "std::fs::read(&*$0)"
                                    let v6465 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6461 v6464 
                                    let v6466 : string = "$0.unwrap()"
                                    let v6467 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6465 v6466 
                                    let _v6463 = v6467 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v6468 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v6463 = v6468 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v6471 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v6463 = v6471 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v6474 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v6463 = v6474 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v6477 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v6463 = v6477 
                                    #endif
#else
                                    let v6480 : (uint8 []) = v6461 |> System.IO.File.ReadAllBytes
                                    let v6481 : string = "$0.to_vec()"
                                    let v6482 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6480 v6481 
                                    let _v6463 = v6482 
                                    #endif
                                    let v6483 : Vec<uint8> = _v6463 
                                    let v6488 : Vec<uint8> = method16(v6483)
                                    let v6489 : string = "std::string::String::from_utf8($0)"
                                    let v6490 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6488 v6489 
                                    let v6491 : string = "$0.unwrap()"
                                    let v6492 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6490 v6491 
                                    let v6493 : string = "fable_library_rust::String_::fromString($0)"
                                    let v6494 : string = Fable.Core.RustInterop.emitRustExpr v6492 v6493 
                                    let _v6462 = v6494 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v6495 : string = null |> unbox<string>
                                    let _v6462 = v6495 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v6498 : string = null |> unbox<string>
                                    let _v6462 = v6498 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v6501 : string = null |> unbox<string>
                                    let _v6462 = v6501 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v6504 : string = null |> unbox<string>
                                    let _v6462 = v6504 
                                    #endif
#else
                                    let v6507 : string = v6461 |> System.IO.File.ReadAllText
                                    let _v6462 = v6507 
                                    #endif
                                    let v6508 : string = _v6462 
                                    let v6513 : string = v6508.Replace (v6454, v6455)
                                    let v6514 : string = "\\r\\n"
                                    let v6515 : string = "\\n"
                                    let v6516 : string = v6513.Replace (v6514, v6515)
                                    let v6517 : string = $"{v4659}.ipynb"
                                    let v6518 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v6519 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v6517, v6516) v6519 
                                    let _v6518 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v6518 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v6518 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v6518 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v6518 = () 
                                    #endif
#else
                                    let v6520 : string = method41(v6516)
                                    System.IO.File.WriteAllText (v6517, v6520)
                                    let _v6518 = () 
                                    #endif
                                    _v6518 
                                    let v6521 : string = $"repl_result: {v4699}

jupyter_result: {v4711}

pwsh_replace_html_result: {v5564}"
                                    struct (v5563, v6521)
                        let v6526 : unit = ()
                        let v6527 : (unit -> unit) = closure100(v6525, v6524)
                        let v6528 : unit = (fun () -> v6527 (); v6526) ()
                        let v7363 : bool = v6524 <> 0 
                        if v7363 then
                            let v7366 : string = $"spiral_builder.run / dib / exit_code: {v6524} / result: {v6525}"
                            failwith<unit> v7366
                        let v7367 : string = "stdio"
                        [|struct (v7367, v6525)|]
                    else
                        let v7369 : string = "fable_library_rust::String_::fromString($0)"
                        let v7370 : string = Fable.Core.RustInterop.emitRustExpr v33 v7369 
                        let v7371 : bool = v7370 = "rust"
                        let struct (v29110 : US1, v29111 : US1, v29112 : US1) =
                            if v7371 then
                                let v7372 : string = method76()
                                let v7373 : string = "&*$0"
                                let v7374 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7372 v7373 
                                let v7375 : string = "clap::ArgMatches::get_one(&$0, v7374).cloned()"
                                let v7376 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v7375 
                                let v7377 : US5 option = None
                                let _v7377 = ref v7377 
                                let v7378 : US5 option ref = _v7377 
                                let v7379 : (US5 option -> US5 option ref) = closure17(v7378)
                                let v7380 : unit = ()
                                let v7381 : (unit -> unit) = closure18(v7376, v7379)
                                let v7382 : unit = (fun () -> v7381 (); v7380) ()
                                let v7385 : US5 option = _v7377.Value 
                                let v7396 : US5 = US5_1
                                let v7397 : US5 = v7385 |> Option.defaultValue v7396 
                                let v7404 : std_string_String =
                                    match v7397 with
                                    | US5_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US5_0(v7401) -> (* Some *)
                                        v7401
                                let v7405 : string = "fable_library_rust::String_::fromString($0)"
                                let v7406 : string = Fable.Core.RustInterop.emitRustExpr v7404 v7405 
                                let v7407 : string = method15()
                                let v7408 : string = "&*$0"
                                let v7409 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7407 v7408 
                                let v7410 : string = "clap::ArgMatches::get_many(&$0, v7409).map(|x| x.cloned().into_iter().collect())"
                                let v7411 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v7410 
                                let v7412 : US9 option = None
                                let _v7412 = ref v7412 
                                let v7413 : US9 option ref = _v7412 
                                let v7414 : (US9 option -> US9 option ref) = closure19(v7413)
                                let v7415 : unit = ()
                                let v7416 : (unit -> unit) = closure20(v7411, v7414)
                                let v7417 : unit = (fun () -> v7416 (); v7415) ()
                                let v7420 : US9 option = _v7412.Value 
                                let v7431 : US9 = US9_1
                                let v7432 : US9 = v7420 |> Option.defaultValue v7431 
                                let v7436 : (std_string_String []) = [||]
                                let v7437 : string = "$0.to_vec()"
                                let v7438 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v7436 v7437 
                                let v7441 : Vec<std_string_String> =
                                    match v7432 with
                                    | US9_1 -> (* None *)
                                        v7438
                                    | US9_0(v7439) -> (* Some *)
                                        v7439
                                let v7442 : string = method89()
                                let v7443 : string = "&*$0"
                                let v7444 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7442 v7443 
                                let v7445 : string = "clap::ArgMatches::get_one(&$0, v7444).cloned()"
                                let v7446 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v7445 
                                let v7447 : US5 option = None
                                let _v7447 = ref v7447 
                                let v7448 : US5 option ref = _v7447 
                                let v7449 : (US5 option -> US5 option ref) = closure17(v7448)
                                let v7450 : unit = ()
                                let v7451 : (unit -> unit) = closure18(v7446, v7449)
                                let v7452 : unit = (fun () -> v7451 (); v7450) ()
                                let v7455 : US5 option = _v7447.Value 
                                let v7466 : US5 = US5_1
                                let v7467 : US5 = v7455 |> Option.defaultValue v7466 
                                let v7477 : US1 =
                                    match v7467 with
                                    | US5_1 -> (* None *)
                                        US1_1
                                    | US5_0(v7471) -> (* Some *)
                                        let v7472 : string = "fable_library_rust::String_::fromString($0)"
                                        let v7473 : string = Fable.Core.RustInterop.emitRustExpr v7471 v7472 
                                        US1_0(v7473)
                                let v7478 : string = method90()
                                let v7479 : string = "&*$0"
                                let v7480 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7478 v7479 
                                let v7481 : string = "clap::ArgMatches::get_one(&$0, v7480).cloned()"
                                let v7482 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v7481 
                                let v7483 : US5 option = None
                                let _v7483 = ref v7483 
                                let v7484 : US5 option ref = _v7483 
                                let v7485 : (US5 option -> US5 option ref) = closure17(v7484)
                                let v7486 : unit = ()
                                let v7487 : (unit -> unit) = closure18(v7482, v7485)
                                let v7488 : unit = (fun () -> v7487 (); v7486) ()
                                let v7491 : US5 option = _v7483.Value 
                                let v7502 : US5 = US5_1
                                let v7503 : US5 = v7491 |> Option.defaultValue v7502 
                                let v7513 : US1 =
                                    match v7503 with
                                    | US5_1 -> (* None *)
                                        US1_1
                                    | US5_0(v7507) -> (* Some *)
                                        let v7508 : string = "fable_library_rust::String_::fromString($0)"
                                        let v7509 : string = Fable.Core.RustInterop.emitRustExpr v7507 v7508 
                                        US1_0(v7509)
                                let v7522 : US33 =
                                    match v7477 with
                                    | US1_0(v7514) -> (* Some *)
                                        let v7515 : US34 = US34_0(v7514)
                                        US33_0(v7515)
                                    | _ ->
                                        match v7513 with
                                        | US1_0(v7517) -> (* Some *)
                                            let v7518 : US34 = US34_1(v7517)
                                            US33_0(v7518)
                                        | _ ->
                                            US33_1
                                let v7523 : bool =
                                    match v0 with
                                    | US0_0 -> (* Verbose *)
                                        true
                                    | _ ->
                                        false
                                let v7524 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v7525 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v7526 : string = "std::fs::read(&*$0)"
                                let v7527 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v7406 v7526 
                                let v7528 : string = "$0.unwrap()"
                                let v7529 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7527 v7528 
                                let _v7525 = v7529 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v7530 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v7525 = v7530 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v7533 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v7525 = v7533 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v7536 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v7525 = v7536 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v7539 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v7525 = v7539 
                                #endif
#else
                                let v7542 : (uint8 []) = v7406 |> System.IO.File.ReadAllBytes
                                let v7543 : string = "$0.to_vec()"
                                let v7544 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7542 v7543 
                                let _v7525 = v7544 
                                #endif
                                let v7545 : Vec<uint8> = _v7525 
                                let v7550 : Vec<uint8> = method16(v7545)
                                let v7551 : string = "std::string::String::from_utf8($0)"
                                let v7552 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v7550 v7551 
                                let v7553 : string = "$0.unwrap()"
                                let v7554 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7552 v7553 
                                let v7555 : string = "fable_library_rust::String_::fromString($0)"
                                let v7556 : string = Fable.Core.RustInterop.emitRustExpr v7554 v7555 
                                let _v7524 = v7556 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v7557 : string = null |> unbox<string>
                                let _v7524 = v7557 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v7560 : string = null |> unbox<string>
                                let _v7524 = v7560 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v7563 : string = null |> unbox<string>
                                let _v7524 = v7563 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v7566 : string = null |> unbox<string>
                                let _v7524 = v7566 
                                #endif
#else
                                let v7569 : string = v7406 |> System.IO.File.ReadAllText
                                let _v7524 = v7569 
                                #endif
                                let v7570 : string = _v7524 
                                let v7575 : string = method10()
                                let v7576 : Mut4 = {l0 = v7575} : Mut4
                                let v7577 : string = "{ "
                                let v7578 : string = $"{v7577}"
                                let v7581 : unit = ()
                                let v7582 : (unit -> unit) = closure10(v7576, v7578)
                                let v7583 : unit = (fun () -> v7582 (); v7581) ()
                                let v7586 : string = "extension"
                                let v7587 : string = $"{v7586}"
                                let v7590 : unit = ()
                                let v7591 : (unit -> unit) = closure10(v7576, v7587)
                                let v7592 : unit = (fun () -> v7591 (); v7590) ()
                                let v7595 : string = " = "
                                let v7596 : string = $"{v7595}"
                                let v7599 : unit = ()
                                let v7600 : (unit -> unit) = closure10(v7576, v7596)
                                let v7601 : unit = (fun () -> v7600 (); v7599) ()
                                let v7604 : string = "rs"
                                let v7605 : string = $"{v7604}"
                                let v7608 : unit = ()
                                let v7609 : (unit -> unit) = closure10(v7576, v7605)
                                let v7610 : unit = (fun () -> v7609 (); v7608) ()
                                let v7613 : string = "; "
                                let v7614 : string = $"{v7613}"
                                let v7617 : unit = ()
                                let v7618 : (unit -> unit) = closure10(v7576, v7614)
                                let v7619 : unit = (fun () -> v7618 (); v7617) ()
                                let v7622 : string = "code"
                                let v7623 : string = $"{v7622}"
                                let v7626 : unit = ()
                                let v7627 : (unit -> unit) = closure10(v7576, v7623)
                                let v7628 : unit = (fun () -> v7627 (); v7626) ()
                                let v7631 : string = $"{v7595}"
                                let v7634 : unit = ()
                                let v7635 : (unit -> unit) = closure10(v7576, v7631)
                                let v7636 : unit = (fun () -> v7635 (); v7634) ()
                                let v7639 : string = $"{v7570}"
                                let v7642 : unit = ()
                                let v7643 : (unit -> unit) = closure10(v7576, v7639)
                                let v7644 : unit = (fun () -> v7643 (); v7642) ()
                                let v7647 : string = $"{v7613}"
                                let v7650 : unit = ()
                                let v7651 : (unit -> unit) = closure10(v7576, v7647)
                                let v7652 : unit = (fun () -> v7651 (); v7650) ()
                                let v7655 : string = "runtime"
                                let v7656 : string = $"{v7655}"
                                let v7659 : unit = ()
                                let v7660 : (unit -> unit) = closure10(v7576, v7656)
                                let v7661 : unit = (fun () -> v7660 (); v7659) ()
                                let v7664 : string = $"{v7595}"
                                let v7667 : unit = ()
                                let v7668 : (unit -> unit) = closure10(v7576, v7664)
                                let v7669 : unit = (fun () -> v7668 (); v7667) ()
                                let v7672 : string = $"%A{v7522}"
                                let v7675 : string = $"{v7672}"
                                let v7678 : unit = ()
                                let v7679 : (unit -> unit) = closure10(v7576, v7675)
                                let v7680 : unit = (fun () -> v7679 (); v7678) ()
                                let v7683 : string = " }"
                                let v7684 : string = $"{v7683}"
                                let v7687 : unit = ()
                                let v7688 : (unit -> unit) = closure10(v7576, v7684)
                                let v7689 : unit = (fun () -> v7688 (); v7687) ()
                                let v7692 : string = v7576.l0
                                let v7693 : string = method91(v7692)
                                let v7694 : string = __SOURCE_DIRECTORY__
                                let v7695 : string = "polyglot"
                                let v7696 : string = ".devcontainer"
                                let v7697 : string = method17(v7695, v7696)
                                let v7698 : US12 = method20(v7697, v7694)
                                let v8625 : US1 =
                                    match v7698 with
                                    | US12_1(v7701) -> (* Error *)
                                        let v7702 : unit = ()
                                        let v7703 : (unit -> unit) = closure22(v7701)
                                        let v7704 : unit = (fun () -> v7703 (); v7702) ()
                                        US1_1
                                    | US12_0(v7699) -> (* Ok *)
                                        US1_0(v7699)
                                let v9559 : US1 =
                                    match v8625 with
                                    | US1_1 -> (* None *)
                                        let v8628 : string = method25()
                                        let v8629 : string = method17(v7695, v7696)
                                        let v8630 : US12 = method20(v8629, v8628)
                                        match v8630 with
                                        | US12_1(v8633) -> (* Error *)
                                            let v8634 : unit = ()
                                            let v8635 : (unit -> unit) = closure22(v8633)
                                            let v8636 : unit = (fun () -> v8635 (); v8634) ()
                                            US1_1
                                        | US12_0(v8631) -> (* Ok *)
                                            US1_0(v8631)
                                    | US1_0(v8626) -> (* Some *)
                                        US1_0(v8626)
                                let v9563 : string =
                                    match v9559 with
                                    | US1_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US1_0(v9560) -> (* Some *)
                                        v9560
                                let v9564 : string = method17(v9563, v7695)
                                let v9565 : string = method25()
                                let v9566 : (unit -> string) = v9565.ToLower
                                let v9567 : string = v9566 ()
                                let v9570 : (unit -> string) = v9564.ToLower
                                let v9571 : string = v9570 ()
                                let v9574 : bool = v9567.StartsWith v9571 
                                let v9579 : US12 =
                                    if v9574 then
                                        US12_1(v9571)
                                    else
                                        US12_0(v9571)
                                let v9585 : Result<string, string> =
                                    match v9579 with
                                    | US12_1(v9582) -> (* Error *)
                                        let v9583 : Result<string, string> = Error v9582 
                                        v9583
                                    | US12_0(v9580) -> (* Ok *)
                                        let v9581 : Result<string, string> = Ok v9580 
                                        v9581
                                let v9586 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                let v9587 : bool = Fable.Core.RustInterop.emitRustExpr v9585 v9586 
                                let v9588 : string = "x"
                                let v9589 : string = Fable.Core.RustInterop.emitRustExpr () v9588 
                                let v9590 : string = "true; $0 })"
                                let v9591 : bool = Fable.Core.RustInterop.emitRustExpr v9589 v9590 
                                let v9592 : string = "_result_unwrap_or_else"
                                let v9593 : string = Fable.Core.RustInterop.emitRustExpr () v9592 
                                let v9594 : string = "target/spiral_builder"
                                let v9595 : string = method17(v9593, v9594)
                                let v9596 : string = "spiral_builder"
                                let v9597 : string = method17(v9595, v9596)
                                let v9598 : string = "packages"
                                let v9599 : string = method17(v9597, v9598)
                                
                                
                                
                                let v9600 : string = "Rust"
                                let v9601 : string = method17(v9599, v9600)
                                let v9602 : string = method17(v9601, v7693)
                                let v9603 : System.IDisposable = method30(v9602)
                                let v9604 : string = $"{v9596}.fs"
                                let v9605 : string = method17(v9602, v9604)
                                let v9606 : string = method82(v9605)
                                method27(v9606, v7570)
                                let v9607 : string list = []
                                let v9608 : string seq = seq { for i = 0 to v9607.Length - 1 do yield v9607.[i] }
                                let v9611 : (string -> (string seq -> string)) = String.concat
                                let v9612 : string = "\\n        "
                                let v9613 : (string seq -> string) = v9611 v9612
                                let v9614 : string = v9613 v9608
                                let v9617 : string = "Fable.Core"
                                let v9618 : string = $"<PackageReference Include=\"{v9617}\" Version=\"*\" />"
                                let v9619 : string list = []
                                let v9620 : string list = v9618 :: v9619 
                                let v9623 : string seq = seq { for i = 0 to v9620.Length - 1 do yield v9620.[i] }
                                let v9626 : (string -> (string seq -> string)) = String.concat
                                let v9627 : (string seq -> string) = v9626 v9612
                                let v9628 : string = v9627 v9623
                                let v9631 : string = $"{v9596}.fsproj"
                                let v9632 : string = method17(v9602, v9631)
                                let v9633 : string = method82(v9632)
                                let v9634 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                let v9635 : string = $"<PropertyGroup>"
                                let v9636 : string = "\n"
                                let v9637 : string = v9634 + v9636 
                                let v9638 : string = v9637 + v9635 
                                let v9639 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                let v9640 : string = v9638 + v9636 
                                let v9641 : string = v9640 + v9639 
                                let v9642 : string = $"    <LangVersion>preview</LangVersion>"
                                let v9643 : string = v9641 + v9636 
                                let v9644 : string = v9643 + v9642 
                                let v9645 : string = $"    <RollForward>Major</RollForward>"
                                let v9646 : string = v9644 + v9636 
                                let v9647 : string = v9646 + v9645 
                                let v9648 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                let v9649 : string = v9647 + v9636 
                                let v9650 : string = v9649 + v9648 
                                let v9651 : string = $"    <PublishAot>false</PublishAot>"
                                let v9652 : string = v9650 + v9636 
                                let v9653 : string = v9652 + v9651 
                                let v9654 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                let v9655 : string = v9653 + v9636 
                                let v9656 : string = v9655 + v9654 
                                let v9657 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                let v9658 : string = v9656 + v9636 
                                let v9659 : string = v9658 + v9657 
                                let v9660 : string = $"    <SelfContained>true</SelfContained>"
                                let v9661 : string = v9659 + v9636 
                                let v9662 : string = v9661 + v9660 
                                let v9663 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                let v9664 : string = v9662 + v9636 
                                let v9665 : string = v9664 + v9663 
                                let v9666 : string = $"    <OutputType>Exe</OutputType>"
                                let v9667 : string = v9665 + v9636 
                                let v9668 : string = v9667 + v9666 
                                let v9669 : string = $"</PropertyGroup>"
                                let v9670 : string = v9668 + v9636 
                                let v9671 : string = v9670 + v9669 
                                let v9672 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                let v9673 : string = v9671 + v9636 
                                let v9674 : string = v9673 + v9672 
                                let v9675 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                let v9676 : string = v9674 + v9636 
                                let v9677 : string = v9676 + v9675 
                                let v9678 : string = $"</PropertyGroup>"
                                let v9679 : string = v9677 + v9636 
                                let v9680 : string = v9679 + v9678 
                                let v9681 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                let v9682 : string = v9680 + v9636 
                                let v9683 : string = v9682 + v9681 
                                let v9684 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                let v9685 : string = v9683 + v9636 
                                let v9686 : string = v9685 + v9684 
                                let v9687 : string = $"</PropertyGroup>"
                                let v9688 : string = v9686 + v9636 
                                let v9689 : string = v9688 + v9687 
                                let v9690 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                let v9691 : string = v9689 + v9636 
                                let v9692 : string = v9691 + v9690 
                                let v9693 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                let v9694 : string = v9692 + v9636 
                                let v9695 : string = v9694 + v9693 
                                let v9696 : string = $"</PropertyGroup>"
                                let v9697 : string = v9695 + v9636 
                                let v9698 : string = v9697 + v9696 
                                let v9699 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                let v9700 : string = v9698 + v9636 
                                let v9701 : string = v9700 + v9699 
                                let v9702 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                let v9703 : string = v9701 + v9636 
                                let v9704 : string = v9703 + v9702 
                                let v9705 : string = $"</PropertyGroup>"
                                let v9706 : string = v9704 + v9636 
                                let v9707 : string = v9706 + v9705 
                                let v9708 : string = $"<ItemGroup>"
                                let v9709 : string = v9707 + v9636 
                                let v9710 : string = v9709 + v9708 
                                let v9711 : string = $"    {v9614}"
                                let v9712 : string = v9710 + v9636 
                                let v9713 : string = v9712 + v9711 
                                let v9714 : string = $"    <Compile Include=\"{v9606}\" />"
                                let v9715 : string = v9713 + v9636 
                                let v9716 : string = v9715 + v9714 
                                let v9717 : string = $"</ItemGroup>"
                                let v9718 : string = v9716 + v9636 
                                let v9719 : string = v9718 + v9717 
                                let v9720 : string = $"<ItemGroup>"
                                let v9721 : string = v9719 + v9636 
                                let v9722 : string = v9721 + v9720 
                                let v9723 : string = $"    {v9628}"
                                let v9724 : string = v9722 + v9636 
                                let v9725 : string = v9724 + v9723 
                                let v9726 : string = $"</ItemGroup>"
                                let v9727 : string = v9725 + v9636 
                                let v9728 : string = v9727 + v9726 
                                let v9729 : string = $"</Project>"
                                let v9730 : string = v9728 + v9636 
                                let v9731 : string = v9730 + v9729 
                                method27(v9633, v9731)
                                let v9732 : string = "../../.."
                                let v9733 : string = method17(v9602, v9732)
                                let v9734 : string = "Cargo.toml"
                                let v9735 : string = method17(v9733, v9734)
                                let v9736 : bool = method29(v9735)
                                let v9737 : bool = v9736 = false
                                if v9737 then
                                    let v9738 : System.DateTime = System.DateTime.Now
                                    let v9741 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v9742 : System.Guid = v9741 ()
                                    let v9745 : System.Guid = method94(v9742, v9738)
                                    let v9746 : (System.Guid -> string) = _.ToString()
                                    let v9747 : string = v9746 v9745
                                    let v9750 : string = $"[package]"
                                    let v9751 : string = $"name = \"spiral_builder_{v9747}\""
                                    let v9752 : string = v9750 + v9636 
                                    let v9753 : string = v9752 + v9751 
                                    let v9754 : string = $"version = \"0.0.1\""
                                    let v9755 : string = v9753 + v9636 
                                    let v9756 : string = v9755 + v9754 
                                    let v9757 : string = $"edition = \"2021\""
                                    let v9758 : string = v9756 + v9636 
                                    let v9759 : string = v9758 + v9757 
                                    let v9760 : string = $""
                                    let v9761 : string = v9759 + v9636 
                                    let v9762 : string = v9761 + v9760 
                                    let v9763 : string = $"[[bin]]"
                                    let v9764 : string = v9762 + v9636 
                                    let v9765 : string = v9764 + v9763 
                                    let v9766 : string = $"name = \"spiral_builder_{v9747}\""
                                    let v9767 : string = v9765 + v9636 
                                    let v9768 : string = v9767 + v9766 
                                    let v9769 : string = $"path = \"spiral_builder.rs\""
                                    let v9770 : string = v9768 + v9636 
                                    let v9771 : string = v9770 + v9769 
                                    let v9772 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9773 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v9735, v9771) v9773 
                                    let _v9772 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v9772 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v9772 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v9772 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v9772 = () 
                                    #endif
#else
                                    let v9774 : string = method41(v9771)
                                    System.IO.File.WriteAllText (v9735, v9774)
                                    let _v9772 = () 
                                    #endif
                                    _v9772 
                                    ()
                                let v9775 : string = method17(v9602, v9734)
                                let v9776 : bool = method29(v9775)
                                let v9777 : bool = v9776 = false
                                if v9777 then
                                    let v9778 : System.DateTime = System.DateTime.Now
                                    let v9781 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v9782 : System.Guid = v9781 ()
                                    let v9785 : System.Guid = method94(v9782, v9778)
                                    let v9786 : (System.Guid -> string) = _.ToString()
                                    let v9787 : string = v9786 v9785
                                    let v9790 : string = $"[package]"
                                    let v9791 : string = $"name = \"spiral_builder_{v9787}\""
                                    let v9792 : string = v9790 + v9636 
                                    let v9793 : string = v9792 + v9791 
                                    let v9794 : string = $"version = \"0.0.1\""
                                    let v9795 : string = v9793 + v9636 
                                    let v9796 : string = v9795 + v9794 
                                    let v9797 : string = $"edition = \"2021\""
                                    let v9798 : string = v9796 + v9636 
                                    let v9799 : string = v9798 + v9797 
                                    let v9800 : string = $""
                                    let v9801 : string = v9799 + v9636 
                                    let v9802 : string = v9801 + v9800 
                                    let v9803 : string = $"[[bin]]"
                                    let v9804 : string = v9802 + v9636 
                                    let v9805 : string = v9804 + v9803 
                                    let v9806 : string = $"name = \"spiral_builder_{v9787}\""
                                    let v9807 : string = v9805 + v9636 
                                    let v9808 : string = v9807 + v9806 
                                    let v9809 : string = $"path = \"spiral_builder.rs\""
                                    let v9810 : string = v9808 + v9636 
                                    let v9811 : string = v9810 + v9809 
                                    let v9812 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9813 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v9775, v9811) v9813 
                                    let _v9812 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v9812 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v9812 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v9812 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v9812 = () 
                                    #endif
#else
                                    let v9814 : string = method41(v9811)
                                    System.IO.File.WriteAllText (v9775, v9814)
                                    let _v9812 = () 
                                    #endif
                                    _v9812 
                                    ()
                                let v9815 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v9816 : string = method17(v9593, v9815)
                                let v9817 : string = "fable_modules/fable-library-rust"
                                let v9818 : string = method17(v9602, v9817)
                                method98(v9816, v9818)
                                let struct (v9819 : int32, v9820 : string) = method99(v7522, v9602, v7604, v9633, v9579)
                                let v9821 : bool = v9819 <> 0 
                                let struct (v16506 : US1, v16507 : US1, v16508 : US1) =
                                    if v9821 then
                                        let v9824 : unit = ()
                                        let v9825 : (unit -> unit) = closure106(v9820, v9819)
                                        let v9826 : unit = (fun () -> v9825 (); v9824) ()
                                        let v10839 : US1 = US1_0(v7604)
                                        let v10840 : US1 = US1_1
                                        let v10841 : US1 = US1_0(v9820)
                                        struct (v10839, v10840, v10841)
                                    else
                                        let v10842 : bool =
                                            match v7522 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v10869 : Vec<std_string_String> =
                                            if v10842 then
                                                v7441
                                            else
                                                let v10843 : (std_string_String -> bool) = method102()
                                                let v10844 : Vec<std_string_String> = method103(v7441)
                                                let v10845 : string = "v10844.into_iter().filter(|x| v10843(x.clone().clone())).collect::<Vec<_>>()"
                                                let v10846 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v10845 
                                                let v10847 : string = "$0.len()"
                                                let v10848 : unativeint = Fable.Core.RustInterop.emitRustExpr v10846 v10847 
                                                let v10849 : (unativeint -> int32) = int32
                                                let v10850 : int32 = v10849 v10848
                                                let v10851 : bool = v10850 > 0
                                                if v10851 then
                                                    v7441
                                                else
                                                    let v10852 : string = "&*$0"
                                                    let v10853 : string = "near-sdk"
                                                    let v10854 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10853 v10852 
                                                    let v10855 : string = "String::from($0)"
                                                    let v10856 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10854 v10855 
                                                    let v10857 : (std_string_String []) = [|v10856|]
                                                    let v10858 : string = "$0.to_vec()"
                                                    let v10859 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v10857 v10858 
                                                    let v10860 : Vec<std_string_String> = method104(v10859)
                                                    let v10861 : Vec<std_string_String> = method105(v7441)
                                                    let v10862 : string = "true; let mut v10861 = v10861"
                                                    let v10863 : bool = Fable.Core.RustInterop.emitRustExpr () v10862 
                                                    let v10864 : string = "true; v10861.extend(v10860)"
                                                    let v10865 : bool = Fable.Core.RustInterop.emitRustExpr () v10864 
                                                    let v10866 : string = "v10861"
                                                    let v10867 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v10866 
                                                    v10867
                                        let v10870 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                        let v10871 : bool = Fable.Core.RustInterop.emitRustExpr v10869 v10870 
                                        let v10872 : string = "x"
                                        let v10873 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v10872 
                                        let v10874 : string = "fable_library_rust::String_::fromString($0)"
                                        let v10875 : string = Fable.Core.RustInterop.emitRustExpr v10873 v10874 
                                        let v10876 : string = "="
                                        let v10877 : bool = v10875.Contains v10876 
                                        let v10888 : string =
                                            if v10877 then
                                                v10875
                                            else
                                                let v10880 : string = "]"
                                                let v10881 : bool = v10875.EndsWith v10880 
                                                if v10881 then
                                                    let v10882 : string = $"={{version='*',features=["
                                                    let v10883 : string = "["
                                                    let v10884 : string = v10875.Replace (v10883, v10882)
                                                    let v10885 : string = $"{v10884}}}"
                                                    v10885
                                                else
                                                    let v10886 : string = $"{v10875}='*'"
                                                    v10886
                                        let v10889 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v10890 : bool = Fable.Core.RustInterop.emitRustExpr v10888 v10889 
                                        let v10891 : string = "_vec_map"
                                        let v10892 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v10891 
                                        let v10893 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v10894 : (string []) = Fable.Core.RustInterop.emitRustExpr v10892 v10893 
                                        let v10895 : string seq = seq { for i = 0 to v10894.Length - 1 do yield v10894.[i] }
                                        let v10898 : (string -> (string seq -> string)) = String.concat
                                        let v10899 : (string seq -> string) = v10898 v9636
                                        let v10900 : string = v10899 v10895
                                        let v10903 : string = $"[package]"
                                        let v10904 : string = $"name = \"spiral_builder_{v7693}\""
                                        let v10905 : string = v10903 + v9636 
                                        let v10906 : string = v10905 + v10904 
                                        let v10907 : string = $"version = \"0.0.1\""
                                        let v10908 : string = v10906 + v9636 
                                        let v10909 : string = v10908 + v10907 
                                        let v10910 : string = $"edition = \"2021\""
                                        let v10911 : string = v10909 + v9636 
                                        let v10912 : string = v10911 + v10910 
                                        let v10913 : string = $""
                                        let v10914 : string = v10912 + v9636 
                                        let v10915 : string = v10914 + v10913 
                                        let v10916 : string = $"[dependencies]"
                                        let v10917 : string = v10915 + v9636 
                                        let v10918 : string = v10917 + v10916 
                                        let v10919 : bool =
                                            match v7522 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v10922 : string =
                                            if v10919 then
                                                let v10920 : string = $"fable_library_rust = {{ workspace = true, features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"] }}"
                                                v10920
                                            else
                                                let v10921 : string = $"fable_library_rust = {{ workspace = true }}"
                                                v10921
                                        let v10923 : string = v10918 + v9636 
                                        let v10924 : string = v10923 + v10922 
                                        let v10925 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v10926 : string = v10924 + v9636 
                                        let v10927 : string = v10926 + v10925 
                                        let v10928 : string = $"{v10900}"
                                        let v10929 : string = v10927 + v9636 
                                        let v10930 : string = v10929 + v10928 
                                        let v10931 : string = $""
                                        let v10932 : string = v10930 + v9636 
                                        let v10933 : string = v10932 + v10931 
                                        let v10934 : bool =
                                            match v7522 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v10943 : string =
                                            if v10934 then
                                                let v10935 : string = $"[[bin]]"
                                                let v10936 : string = $"name = \"spiral_builder_{v7693}\""
                                                let v10937 : string = v10935 + v9636 
                                                let v10938 : string = v10937 + v10936 
                                                v10938
                                            else
                                                let v10939 : string = $"[lib]"
                                                let v10940 : string = $"crate-type = [\"cdylib\"]"
                                                let v10941 : string = v10939 + v9636 
                                                let v10942 : string = v10941 + v10940 
                                                v10942
                                        let v10944 : string = v10933 + v9636 
                                        let v10945 : string = v10944 + v10943 
                                        let v10946 : string = $"path = \"spiral_builder.rs\" "
                                        let v10947 : string = v10945 + v9636 
                                        let v10948 : string = v10947 + v10946 
                                        let v10949 : string = method82(v9593)
                                        let v10950 : string = $"cargo-features = [\"profile-rustflags\"]"
                                        let v10951 : string = $""
                                        let v10952 : string = v10950 + v9636 
                                        let v10953 : string = v10952 + v10951 
                                        let v10954 : string = $"[workspace]"
                                        let v10955 : string = v10953 + v9636 
                                        let v10956 : string = v10955 + v10954 
                                        let v10957 : string = $"resolver = \"2\""
                                        let v10958 : string = v10956 + v9636 
                                        let v10959 : string = v10958 + v10957 
                                        let v10960 : string = $"members = [\"packages/Rust/*\"]"
                                        let v10961 : string = v10959 + v9636 
                                        let v10962 : string = v10961 + v10960 
                                        let v10963 : string = $""
                                        let v10964 : string = v10962 + v9636 
                                        let v10965 : string = v10964 + v10963 
                                        let v10966 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v10967 : string = v10965 + v9636 
                                        let v10968 : string = v10967 + v10966 
                                        let v10969 : string = $"path = \"{v10949}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v10970 : string = v10968 + v9636 
                                        let v10971 : string = v10970 + v10969 
                                        let v10972 : string = $"default-features = false"
                                        let v10973 : string = v10971 + v9636 
                                        let v10974 : string = v10973 + v10972 
                                        let v10975 : string = $"features = []"
                                        let v10976 : string = v10974 + v9636 
                                        let v10977 : string = v10976 + v10975 
                                        let v10978 : string = $""
                                        let v10979 : string = v10977 + v9636 
                                        let v10980 : string = v10979 + v10978 
                                        let v10981 : string = $"[workspace.dependencies]"
                                        let v10982 : string = v10980 + v9636 
                                        let v10983 : string = v10982 + v10981 
                                        let v10984 : string = $"inline_colorization = \"~0.1\""
                                        let v10985 : string = v10983 + v9636 
                                        let v10986 : string = v10985 + v10984 
                                        let v10987 : string = $""
                                        let v10988 : string = v10986 + v9636 
                                        let v10989 : string = v10988 + v10987 
                                        let v10990 : string = $"[profile.release]"
                                        let v10991 : string = v10989 + v9636 
                                        let v10992 : string = v10991 + v10990 
                                        let v10993 : string = $"codegen-units = 1"
                                        let v10994 : string = v10992 + v9636 
                                        let v10995 : string = v10994 + v10993 
                                        let v10996 : string = $"opt-level = \"z\""
                                        let v10997 : string = v10995 + v9636 
                                        let v10998 : string = v10997 + v10996 
                                        let v10999 : string = $"lto = true"
                                        let v11000 : string = v10998 + v9636 
                                        let v11001 : string = v11000 + v10999 
                                        let v11002 : string = $"debug = false"
                                        let v11003 : string = v11001 + v9636 
                                        let v11004 : string = v11003 + v11002 
                                        let v11005 : string = $"panic = \"abort\""
                                        let v11006 : string = v11004 + v9636 
                                        let v11007 : string = v11006 + v11005 
                                        let v11008 : string = $"overflow-checks = true"
                                        let v11009 : string = v11007 + v9636 
                                        let v11010 : string = v11009 + v11008 
                                        let v11011 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                        let v11012 : string = v11010 + v9636 
                                        let v11013 : string = v11012 + v11011 
                                        method27(v9775, v10948)
                                        method27(v9735, v11013)
                                        let v11014 : string = "src/Range.rs"
                                        let v11015 : string = method17(v9818, v11014)
                                        let v11016 : bool = method29(v11015)
                                        if v11016 then
                                            let v11017 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11018 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11019 : string = "std::fs::read(&*$0)"
                                            let v11020 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v11015 v11019 
                                            let v11021 : string = "$0.unwrap()"
                                            let v11022 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11020 v11021 
                                            let _v11018 = v11022 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11023 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v11018 = v11023 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11026 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v11018 = v11026 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11029 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v11018 = v11029 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v11032 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v11018 = v11032 
                                            #endif
#else
                                            let v11035 : (uint8 []) = v11015 |> System.IO.File.ReadAllBytes
                                            let v11036 : string = "$0.to_vec()"
                                            let v11037 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11035 v11036 
                                            let _v11018 = v11037 
                                            #endif
                                            let v11038 : Vec<uint8> = _v11018 
                                            let v11043 : Vec<uint8> = method16(v11038)
                                            let v11044 : string = "std::string::String::from_utf8($0)"
                                            let v11045 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v11043 v11044 
                                            let v11046 : string = "$0.unwrap()"
                                            let v11047 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11045 v11046 
                                            let v11048 : string = "fable_library_rust::String_::fromString($0)"
                                            let v11049 : string = Fable.Core.RustInterop.emitRustExpr v11047 v11048 
                                            let _v11017 = v11049 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11050 : string = null |> unbox<string>
                                            let _v11017 = v11050 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11053 : string = null |> unbox<string>
                                            let _v11017 = v11053 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11056 : string = null |> unbox<string>
                                            let _v11017 = v11056 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v11059 : string = null |> unbox<string>
                                            let _v11017 = v11059 
                                            #endif
#else
                                            let v11062 : string = v11015 |> System.IO.File.ReadAllText
                                            let _v11017 = v11062 
                                            #endif
                                            let v11063 : string = _v11017 
                                            let v11068 : string = "use crate::String_::fromCharCode;"
                                            let v11069 : string = "use crate::String_::fromChar;"
                                            let v11070 : string = v11063.Replace (v11068, v11069)
                                            let v11071 : string = "fromCharCode(c)"
                                            let v11072 : string = "std::char::from_u32(c).unwrap()"
                                            let v11073 : string = v11070.Replace (v11071, v11072)
                                            method27(v11015, v11073)
                                        let v11074 : uint8 = 1uy
                                        let struct (v11075 : int32, v11076 : string) = method106(v9579, v9775, v11074)
                                        let v11077 : bool = v11075 <> 0 
                                        if v11077 then
                                            let v11080 : unit = ()
                                            let v11081 : (unit -> unit) = closure112(v11076, v11075)
                                            let v11082 : unit = (fun () -> v11081 (); v11080) ()
                                            ()
                                        let v12095 : string = $"{v9596}.{v7604}"
                                        let v12096 : string = method17(v9602, v12095)
                                        let v12097 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v12098 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v12099 : string = "std::fs::read(&*$0)"
                                        let v12100 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v12096 v12099 
                                        let v12101 : string = "$0.unwrap()"
                                        let v12102 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v12100 v12101 
                                        let _v12098 = v12102 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v12103 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v12098 = v12103 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v12106 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v12098 = v12106 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v12109 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v12098 = v12109 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v12112 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v12098 = v12112 
                                        #endif
#else
                                        let v12115 : (uint8 []) = v12096 |> System.IO.File.ReadAllBytes
                                        let v12116 : string = "$0.to_vec()"
                                        let v12117 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v12115 v12116 
                                        let _v12098 = v12117 
                                        #endif
                                        let v12118 : Vec<uint8> = _v12098 
                                        let v12123 : Vec<uint8> = method16(v12118)
                                        let v12124 : string = "std::string::String::from_utf8($0)"
                                        let v12125 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v12123 v12124 
                                        let v12126 : string = "$0.unwrap()"
                                        let v12127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12125 v12126 
                                        let v12128 : string = "fable_library_rust::String_::fromString($0)"
                                        let v12129 : string = Fable.Core.RustInterop.emitRustExpr v12127 v12128 
                                        let _v12097 = v12129 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v12130 : string = null |> unbox<string>
                                        let _v12097 = v12130 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v12133 : string = null |> unbox<string>
                                        let _v12097 = v12133 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v12136 : string = null |> unbox<string>
                                        let _v12097 = v12136 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v12139 : string = null |> unbox<string>
                                        let _v12097 = v12139 
                                        #endif
#else
                                        let v12142 : string = v12096 |> System.IO.File.ReadAllText
                                        let _v12097 = v12142 
                                        #endif
                                        let v12143 : string = _v12097 
                                        let v12148 : string = "\"{\".into()"
                                        let v12149 : string = Fable.Core.RustInterop.emitRustExpr () v12148 
                                        let v12150 : string = "pub fn main() -> Result<(), String> "
                                        let v12151 : string = v12150 + v12149 
                                        let v12152 : bool =
                                            match v7522 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v12185 : string =
                                            if v12152 then
                                                let v12153 : string = ""
                                                v12153
                                            else
                                                let v12154 : string = $"#[near_sdk::near_bindgen]"
                                                let v12155 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                let v12156 : string = v12154 + v9636 
                                                let v12157 : string = v12156 + v12155 
                                                let v12158 : string = $"pub struct MainState {{"
                                                let v12159 : string = v12157 + v9636 
                                                let v12160 : string = v12159 + v12158 
                                                let v12161 : string = $"}}"
                                                let v12162 : string = v12160 + v9636 
                                                let v12163 : string = v12162 + v12161 
                                                let v12164 : string = $""
                                                let v12165 : string = v12163 + v9636 
                                                let v12166 : string = v12165 + v12164 
                                                let v12167 : string = $"#[near_sdk::near_bindgen]"
                                                let v12168 : string = v12166 + v9636 
                                                let v12169 : string = v12168 + v12167 
                                                let v12170 : string = $"impl MainState {{"
                                                let v12171 : string = v12169 + v9636 
                                                let v12172 : string = v12171 + v12170 
                                                let v12173 : string = $"    pub fn state_main() {{"
                                                let v12174 : string = v12172 + v9636 
                                                let v12175 : string = v12174 + v12173 
                                                let v12176 : string = $"        Spiral_builder::method0();"
                                                let v12177 : string = v12175 + v9636 
                                                let v12178 : string = v12177 + v12176 
                                                let v12179 : string = $"    }}"
                                                let v12180 : string = v12178 + v9636 
                                                let v12181 : string = v12180 + v12179 
                                                let v12182 : string = $"}}"
                                                let v12183 : string = v12181 + v9636 
                                                let v12184 : string = v12183 + v12182 
                                                v12184
                                        let v12186 : string = $"{v12151} Ok(()) }}"
                                        let v12187 : string = v12185 + v9636 
                                        let v12188 : string = v12187 + v12186 
                                        let v12189 : bool = v12143.Contains v12151 
                                        let v12281 : string =
                                            if v12189 then
                                                v12143
                                            else
                                                let v12192 : string = "\";\".into()"
                                                let v12193 : string = Fable.Core.RustInterop.emitRustExpr () v12192 
                                                let v12194 : string = "),)"
                                                let v12195 : string = v12194 + v12193 
                                                let v12196 : string = "));"
                                                let v12197 : string = v12143.Replace (v12195, v12196)
                                                let v12198 : string = "\";\".into()"
                                                let v12199 : string = Fable.Core.RustInterop.emitRustExpr () v12198 
                                                let v12200 : string = "},)"
                                                let v12201 : string = v12200 + v12199 
                                                let v12202 : string = "});"
                                                let v12203 : string = v12197.Replace (v12201, v12202)
                                                let v12204 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v12205 : string = " defaultOf::<()>();"
                                                let v12206 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v12207 : string = $"regex::Regex::new(&$0)"
                                                let v12208 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v12204 v12207 
                                                let v12209 : string = "$0.unwrap()"
                                                let v12210 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v12208 v12209 
                                                let v12211 : string = method83(v12203)
                                                let v12212 : string = $"$0.replace_all(&*$1, &*$2)"
                                                let v12213 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v12210, v12211, v12205) v12212 
                                                let v12214 : string = "String::from($0)"
                                                let v12215 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12213 v12214 
                                                let v12216 : string = "fable_library_rust::String_::fromString($0)"
                                                let v12217 : string = Fable.Core.RustInterop.emitRustExpr v12215 v12216 
                                                let _v12206 = v12217 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v12218 : string = null |> unbox<string>
                                                let _v12206 = v12218 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v12221 : string = null |> unbox<string>
                                                let _v12206 = v12221 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v12224 : string = null |> unbox<string>
                                                let _v12206 = v12224 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v12227 : string = null |> unbox<string>
                                                let _v12206 = v12227 
                                                #endif
#else
                                                let v12230 : string = System.Text.RegularExpressions.Regex.Replace (v12203, v12204, v12205)
                                                let _v12206 = v12230 
                                                #endif
                                                let v12231 : string = _v12206 
                                                let v12236 : string = "::Slice'_"
                                                let v12237 : string = "::Slice__"
                                                let v12238 : string = v12231.Replace (v12236, v12237)
                                                let v12239 : string = "\",\".into()"
                                                let v12240 : string = Fable.Core.RustInterop.emitRustExpr () v12239 
                                                let v12241 : string = "defaultOf()"
                                                let v12242 : string = v12241 + v12240 
                                                let v12243 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v12244 : string = v12238.Replace (v12242, v12243)
                                                let v12245 : string = "\"_.\".into()"
                                                let v12246 : string = Fable.Core.RustInterop.emitRustExpr () v12245 
                                                let v12247 : string = "_self"
                                                let v12248 : string = v12247 + v12246 
                                                let v12249 : string = "self."
                                                let v12250 : string = v12244.Replace (v12248, v12249)
                                                let v12251 : string = "\"h\".into()"
                                                let v12252 : string = Fable.Core.RustInterop.emitRustExpr () v12251 
                                                let v12253 : string = "get_or_insert_wit"
                                                let v12254 : string = v12253 + v12252 
                                                let v12255 : string = "get_or_init"
                                                let v12256 : string = v12250.Replace (v12254, v12255)
                                                let v12257 : string = "\";\".into()"
                                                let v12258 : string = Fable.Core.RustInterop.emitRustExpr () v12257 
                                                let v12259 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v12260 : string = v12259 + v12258 
                                                let v12261 : string = "type ConcurrentStack_1<T> = T;"
                                                let v12262 : string = v12256.Replace (v12260, v12261)
                                                let v12263 : string = "\";\".into()"
                                                let v12264 : string = Fable.Core.RustInterop.emitRustExpr () v12263 
                                                let v12265 : string = "use fable_library_rust::System::Threading::CancellationToken"
                                                let v12266 : string = v12265 + v12264 
                                                let v12267 : string = "type CancellationToken = ();"
                                                let v12268 : string = v12262.Replace (v12266, v12267)
                                                let v12269 : string = "\";\".into()"
                                                let v12270 : string = Fable.Core.RustInterop.emitRustExpr () v12269 
                                                let v12271 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v12272 : string = v12271 + v12270 
                                                let v12273 : string = "type TimeZoneInfo = i64;"
                                                let v12274 : string = v12268.Replace (v12272, v12273)
                                                let v12275 : string = "\";\".into()"
                                                let v12276 : string = Fable.Core.RustInterop.emitRustExpr () v12275 
                                                let v12277 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v12278 : string = v12277 + v12276 
                                                let v12279 : string = "type TaskCanceledException = ();"
                                                let v12280 : string = v12274.Replace (v12278, v12279)
                                                v12280
                                        let v12282 : bool = v12189 = false
                                        if v12282 then
                                            let v12283 : string = $"{v12281}\n\n{v12188}\n"
                                            method27(v12096, v12283)
                                        let v12284 : bool =
                                            match v7522 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v12285 : bool = v12284 <> true
                                        let v12288 : string =
                                            if v12285 then
                                                let v12286 : string = $"cargo build --release --target wasm32-unknown-unknown --manifest-path \"{v9775}\""
                                                v12286
                                            else
                                                let v12287 : string = $"cargo run --manifest-path \"{v9775}\""
                                                v12287
                                        let v12289 : bool =
                                            match v7522 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v12290 : bool = v12289 <> true
                                        let v12299 : (struct (string * string) []) =
                                            if v12290 then
                                                [||]
                                            else
                                                let v12292 : string = "TRACE_LEVEL"
                                                let v12293 : string = "Verbose"
                                                let v12294 : string = "RUSTC_WRAPPER"
                                                let v12295 : string = "sccache"
                                                let v12296 : string = "RUSTFLAGS"
                                                let v12297 : string = "-C prefer-dynamic"
                                                [|struct (v12292, v12293); struct (v12294, v12295); struct (v12296, v12297)|]
                                        let v12300 : System.Threading.CancellationToken option = None
                                        let v12301 : (struct (string * string) []) = [||]
                                        let v12302 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v12303 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v12304 : string option = None
                                        let v12310 : Result<string, string> =
                                            match v9579 with
                                            | US12_1(v12307) -> (* Error *)
                                                let v12308 : Result<string, string> = Error v12307 
                                                v12308
                                            | US12_0(v12305) -> (* Ok *)
                                                let v12306 : Result<string, string> = Ok v12305 
                                                v12306
                                        let v12311 : string = "v12310.ok()"
                                        let v12312 : string option = Fable.Core.RustInterop.emitRustExpr () v12311 
                                        let v12313 : bool = true
                                        let struct (v12314 : int32, v12315 : string) = method42(v12288, v12300, v12299, v12302, v12303, v12313, v12312)
                                        let v12316 : bool =
                                            match v7522 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let struct (v15687 : US1, v15688 : US1, v15689 : US1) =
                                            if v12316 then
                                                let v12317 : int32 = v12299.Length
                                                let v12318 : (string []) = Array.zeroCreate<string> (v12317)
                                                let v12319 : Mut5 = {l0 = 0} : Mut5
                                                while method45(v12317, v12319) do
                                                    let v12321 : int32 = v12319.l0
                                                    let struct (v12322 : string, v12323 : string) = v12299.[int v12321]
                                                    let v12324 : string = $"$env:{v12322}=''{v12323}''"
                                                    v12318.[int v12321] <- v12324
                                                    let v12325 : int32 = v12321 + 1
                                                    v12319.l0 <- v12325
                                                    ()
                                                let v12326 : string seq = v12318 |> Seq.ofArray
                                                let v12329 : (string -> (string seq -> string)) = String.concat
                                                let v12330 : string = ";"
                                                let v12331 : (string seq -> string) = v12329 v12330
                                                let v12332 : string = v12331 v12326
                                                let v12335 : (string []) = [|v12332; v12288|]
                                                let v12336 : string seq = v12335 |> Seq.ofArray
                                                let v12339 : (string -> (string seq -> string)) = String.concat
                                                let v12340 : (string seq -> string) = v12339 v12330
                                                let v12341 : string = v12340 v12336
                                                let v12344 : string = $"pwsh -c '{v12341}'"
                                                let v12345 : bool = v12314 = 0
                                                let struct (v13450 : US1, v13451 : US1, v13452 : US1) =
                                                    if v12345 then
                                                        let v12346 : (string -> US1) = closure85()
                                                        let v12347 : (unit -> string) = closure114(v12315)
                                                        let v12348 : (exn -> US1) = closure116(v12096, v12315, v12344)
                                                        let v12349 : US1 = US1_1
                                                        let result = ref v12349
                                                        try
                                                            result.Value <- v12347 () |> v12346 
                                                        with ex ->
                                                            result.Value <- v12348 ex 
                                                        let v12350 : US1 = result.Value
                                                        let v12360 : string option =
                                                            match v12350 with
                                                            | US1_1 -> (* None *)
                                                                let v12358 : string option = None
                                                                v12358
                                                            | US1_0(v12354) -> (* Some *)
                                                                let v12355 : string option = Some v12354 
                                                                v12355
                                                        let v12361 : string = "$0.unwrap()"
                                                        let v12362 : string = Fable.Core.RustInterop.emitRustExpr v12360 v12361 
                                                        let v12363 : US1 = US1_0(v7604)
                                                        let v12364 : US1 = US1_0(v12281)
                                                        let v12365 : US1 = US1_0(v12362)
                                                        struct (v12363, v12364, v12365)
                                                    else
                                                        let v12366 : unit = ()
                                                        let v12367 : (unit -> unit) = closure119(v12096, v12315, v12314, v12344)
                                                        let v12368 : unit = (fun () -> v12367 (); v12366) ()
                                                        let v13447 : US1 = US1_0(v7604)
                                                        let v13448 : US1 = US1_1
                                                        let v13449 : US1 = US1_1
                                                        struct (v13447, v13448, v13449)
                                                struct (v13450, v13451, v13452)
                                            else
                                                let v13453 : string = $"target/spiral_builder/{v9596}/target/wasm32-unknown-unknown/release/spiral_builder_{v7693}.wasm"
                                                let v13460 : string =
                                                    match v7522 with
                                                    | US33_0(v13454) -> (* Some *)
                                                        match v13454 with
                                                        | US34_1(v13456) -> (* Contract *)
                                                            v13456
                                                        | US34_0(v13455) -> (* Wasm *)
                                                            v13455
                                                    | _ ->
                                                        let v13459 : string = ""
                                                        v13459
                                                let v13461 : string = $"'workspace/target/release/spiral_wasm -t Debug -w {v13453} {v13460}'"
                                                let v13462 : string = "scripts/invoke-block.ps1"
                                                let v13463 : string = $"pwsh -c \"pwsh {v13462} {v13461} -Linux -EnvironmentVariables NEAR_RPC_TIMEOUT_SECS=100\""
                                                let v13464 : bool = v12314 = 0
                                                let struct (v15684 : US1, v15685 : US1, v15686 : US1) =
                                                    if v13464 then
                                                        let v13465 : System.Threading.CancellationToken option = None
                                                        let v13466 : (struct (string * string) []) = [||]
                                                        let v13467 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v13468 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v13469 : string option = None
                                                        let v13470 : string option = Some v9593 
                                                        let v13473 : bool = true
                                                        let struct (v13474 : int32, v13475 : string) = method42(v13463, v13465, v13466, v13467, v13468, v13473, v13470)
                                                        let v13476 : bool = v13474 = 0
                                                        let struct (v14564 : US1, v14565 : US1, v14566 : US1) =
                                                            if v13476 then
                                                                let v13477 : US1 = US1_0(v7604)
                                                                let v13478 : US1 = US1_0(v12281)
                                                                let v13479 : US1 = US1_0(v13475)
                                                                struct (v13477, v13478, v13479)
                                                            else
                                                                let v13480 : unit = ()
                                                                let v13481 : (unit -> unit) = closure121(v12096, v12315, v13475, v13474)
                                                                let v13482 : unit = (fun () -> v13481 (); v13480) ()
                                                                let v14561 : US1 = US1_0(v7604)
                                                                let v14562 : US1 = US1_1
                                                                let v14563 : US1 = US1_1
                                                                struct (v14561, v14562, v14563)
                                                        struct (v14564, v14565, v14566)
                                                    else
                                                        let v14567 : unit = ()
                                                        let v14568 : (unit -> unit) = closure123(v12096, v12315, v12314, v13453, v13463)
                                                        let v14569 : unit = (fun () -> v14568 (); v14567) ()
                                                        let v15681 : US1 = US1_0(v7604)
                                                        let v15682 : US1 = US1_1
                                                        let v15683 : US1 = US1_1
                                                        struct (v15681, v15682, v15683)
                                                struct (v15684, v15685, v15686)
                                        let v15690 : bool =
                                            match v7522 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v15691 : bool = v15690 <> true
                                        let v15694 : string =
                                            if v15691 then
                                                let v15692 : string = "wasm32-unknown-unknown/release"
                                                v15692
                                            else
                                                let v15693 : string = "debug"
                                                v15693
                                        let v15695 : string = ""
                                        let v15696 : string = $"target/{v15694}/spiral_builder_{v7693}{v15695}"
                                        let v15697 : string = method17(v9733, v15696)
                                        let v15698 : string = ".wasm"
                                        let v15699 : string = $"target/{v15694}/spiral_builder_{v7693}{v15698}"
                                        let v15700 : string = method17(v9733, v15699)
                                        let v15701 : string = ".pdb"
                                        let v15702 : string = $"target/{v15694}/spiral_builder_{v7693}{v15701}"
                                        let v15703 : string = method17(v9733, v15702)
                                        let v15704 : string = ".exe"
                                        let v15705 : string = $"target/{v15694}/spiral_builder_{v7693}{v15704}"
                                        let v15706 : string = method17(v9733, v15705)
                                        let v15707 : string = ".d"
                                        let v15708 : string = $"target/{v15694}/spiral_builder_{v7693}{v15707}"
                                        let v15709 : string = method17(v9733, v15708)
                                        let v15710 : bool = method29(v15697)
                                        let v15711 : bool = method29(v15700)
                                        let v15712 : bool = method29(v15703)
                                        let v15713 : bool = method29(v15706)
                                        let v15714 : bool = method29(v15709)
                                        let v15715 : unit = ()
                                        let v15716 : (unit -> unit) = closure125(v12096, v15709, v15714, v15706, v15713, v15703, v15712, v15700, v15711, v15697, v15710)
                                        let v15717 : unit = (fun () -> v15716 (); v15715) ()
                                        let v16497 : UH4 =
                                            if v15710 then
                                                let v16494 : UH4 = UH4_0
                                                UH4_1(v15697, v15710, v16494)
                                            else
                                                UH4_0
                                        let v16499 : UH4 =
                                            if v15711 then
                                                UH4_1(v15700, v15711, v16497)
                                            else
                                                v16497
                                        let v16501 : UH4 =
                                            if v15712 then
                                                UH4_1(v15703, v15712, v16499)
                                            else
                                                v16499
                                        let v16503 : UH4 =
                                            if v15713 then
                                                UH4_1(v15706, v15713, v16501)
                                            else
                                                v16501
                                        let v16505 : UH4 =
                                            if v15714 then
                                                UH4_1(v15709, v15714, v16503)
                                            else
                                                v16503
                                        method108(v16505)
                                        struct (v15687, v15688, v15689)
                                struct (v16506, v16507, v16508)
                            else
                                let v16509 : string = "fable_library_rust::String_::fromString($0)"
                                let v16510 : string = Fable.Core.RustInterop.emitRustExpr v33 v16509 
                                let v16511 : bool = v16510 = "typescript"
                                let struct (v29107 : US1, v29108 : US1, v29109 : US1) =
                                    if v16511 then
                                        let v16512 : string = method76()
                                        let v16513 : string = "&*$0"
                                        let v16514 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16512 v16513 
                                        let v16515 : string = "clap::ArgMatches::get_one(&$0, v16514).cloned()"
                                        let v16516 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v16515 
                                        let v16517 : US5 option = None
                                        let _v16517 = ref v16517 
                                        let v16518 : US5 option ref = _v16517 
                                        let v16519 : (US5 option -> US5 option ref) = closure17(v16518)
                                        let v16520 : unit = ()
                                        let v16521 : (unit -> unit) = closure18(v16516, v16519)
                                        let v16522 : unit = (fun () -> v16521 (); v16520) ()
                                        let v16525 : US5 option = _v16517.Value 
                                        let v16536 : US5 = US5_1
                                        let v16537 : US5 = v16525 |> Option.defaultValue v16536 
                                        let v16544 : std_string_String =
                                            match v16537 with
                                            | US5_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US5_0(v16541) -> (* Some *)
                                                v16541
                                        let v16545 : string = "fable_library_rust::String_::fromString($0)"
                                        let v16546 : string = Fable.Core.RustInterop.emitRustExpr v16544 v16545 
                                        let v16547 : string = method15()
                                        let v16548 : string = "&*$0"
                                        let v16549 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16547 v16548 
                                        let v16550 : string = "clap::ArgMatches::get_many(&$0, v16549).map(|x| x.cloned().into_iter().collect())"
                                        let v16551 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v16550 
                                        let v16552 : US9 option = None
                                        let _v16552 = ref v16552 
                                        let v16553 : US9 option ref = _v16552 
                                        let v16554 : (US9 option -> US9 option ref) = closure19(v16553)
                                        let v16555 : unit = ()
                                        let v16556 : (unit -> unit) = closure20(v16551, v16554)
                                        let v16557 : unit = (fun () -> v16556 (); v16555) ()
                                        let v16560 : US9 option = _v16552.Value 
                                        let v16571 : US9 = US9_1
                                        let v16572 : US9 = v16560 |> Option.defaultValue v16571 
                                        let v16576 : (std_string_String []) = [||]
                                        let v16577 : string = "$0.to_vec()"
                                        let v16578 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v16576 v16577 
                                        let v16581 : Vec<std_string_String> =
                                            match v16572 with
                                            | US9_1 -> (* None *)
                                                v16578
                                            | US9_0(v16579) -> (* Some *)
                                                v16579
                                        let v16582 : bool =
                                            match v0 with
                                            | US0_0 -> (* Verbose *)
                                                true
                                            | _ ->
                                                false
                                        let v16583 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v16584 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v16585 : string = "std::fs::read(&*$0)"
                                        let v16586 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v16546 v16585 
                                        let v16587 : string = "$0.unwrap()"
                                        let v16588 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v16586 v16587 
                                        let _v16584 = v16588 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v16589 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v16584 = v16589 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v16592 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v16584 = v16592 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v16595 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v16584 = v16595 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v16598 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v16584 = v16598 
                                        #endif
#else
                                        let v16601 : (uint8 []) = v16546 |> System.IO.File.ReadAllBytes
                                        let v16602 : string = "$0.to_vec()"
                                        let v16603 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v16601 v16602 
                                        let _v16584 = v16603 
                                        #endif
                                        let v16604 : Vec<uint8> = _v16584 
                                        let v16609 : Vec<uint8> = method16(v16604)
                                        let v16610 : string = "std::string::String::from_utf8($0)"
                                        let v16611 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v16609 v16610 
                                        let v16612 : string = "$0.unwrap()"
                                        let v16613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16611 v16612 
                                        let v16614 : string = "fable_library_rust::String_::fromString($0)"
                                        let v16615 : string = Fable.Core.RustInterop.emitRustExpr v16613 v16614 
                                        let _v16583 = v16615 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v16616 : string = null |> unbox<string>
                                        let _v16583 = v16616 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v16619 : string = null |> unbox<string>
                                        let _v16583 = v16619 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v16622 : string = null |> unbox<string>
                                        let _v16583 = v16622 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v16625 : string = null |> unbox<string>
                                        let _v16583 = v16625 
                                        #endif
#else
                                        let v16628 : string = v16546 |> System.IO.File.ReadAllText
                                        let _v16583 = v16628 
                                        #endif
                                        let v16629 : string = _v16583 
                                        let v16634 : string = "ts"
                                        let v16635 : string = $"%A{struct (v16634, v16629)}"
                                        let v16638 : string = method91(v16635)
                                        let v16639 : string = __SOURCE_DIRECTORY__
                                        let v16640 : string = "polyglot"
                                        let v16641 : string = ".devcontainer"
                                        let v16642 : string = method17(v16640, v16641)
                                        let v16643 : US12 = method20(v16642, v16639)
                                        let v17573 : US1 =
                                            match v16643 with
                                            | US12_1(v16646) -> (* Error *)
                                                let v16647 : unit = ()
                                                let v16648 : (unit -> unit) = closure22(v16646)
                                                let v16649 : unit = (fun () -> v16648 (); v16647) ()
                                                US1_1
                                            | US12_0(v16644) -> (* Ok *)
                                                US1_0(v16644)
                                        let v18510 : US1 =
                                            match v17573 with
                                            | US1_1 -> (* None *)
                                                let v17576 : string = method25()
                                                let v17577 : string = method17(v16640, v16641)
                                                let v17578 : US12 = method20(v17577, v17576)
                                                match v17578 with
                                                | US12_1(v17581) -> (* Error *)
                                                    let v17582 : unit = ()
                                                    let v17583 : (unit -> unit) = closure22(v17581)
                                                    let v17584 : unit = (fun () -> v17583 (); v17582) ()
                                                    US1_1
                                                | US12_0(v17579) -> (* Ok *)
                                                    US1_0(v17579)
                                            | US1_0(v17574) -> (* Some *)
                                                US1_0(v17574)
                                        let v18514 : string =
                                            match v18510 with
                                            | US1_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US1_0(v18511) -> (* Some *)
                                                v18511
                                        let v18515 : string = method17(v18514, v16640)
                                        let v18516 : string = method25()
                                        let v18517 : (unit -> string) = v18516.ToLower
                                        let v18518 : string = v18517 ()
                                        let v18521 : (unit -> string) = v18515.ToLower
                                        let v18522 : string = v18521 ()
                                        let v18525 : bool = v18518.StartsWith v18522 
                                        let v18530 : US12 =
                                            if v18525 then
                                                US12_1(v18522)
                                            else
                                                US12_0(v18522)
                                        let v18536 : Result<string, string> =
                                            match v18530 with
                                            | US12_1(v18533) -> (* Error *)
                                                let v18534 : Result<string, string> = Error v18533 
                                                v18534
                                            | US12_0(v18531) -> (* Ok *)
                                                let v18532 : Result<string, string> = Ok v18531 
                                                v18532
                                        let v18537 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                        let v18538 : bool = Fable.Core.RustInterop.emitRustExpr v18536 v18537 
                                        let v18539 : string = "x"
                                        let v18540 : string = Fable.Core.RustInterop.emitRustExpr () v18539 
                                        let v18541 : string = "true; $0 })"
                                        let v18542 : bool = Fable.Core.RustInterop.emitRustExpr v18540 v18541 
                                        let v18543 : string = "_result_unwrap_or_else"
                                        let v18544 : string = Fable.Core.RustInterop.emitRustExpr () v18543 
                                        let v18545 : string = "target/spiral_builder"
                                        let v18546 : string = method17(v18544, v18545)
                                        let v18547 : string = "spiral_builder"
                                        let v18548 : string = method17(v18546, v18547)
                                        let v18549 : string = "packages"
                                        let v18550 : string = method17(v18548, v18549)
                                        
                                        
                                        
                                        let v18551 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v18552 : string = method8()
                                        let _v18551 = v18552 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v18553 : string = method8()
                                        let _v18551 = v18553 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v18554 : string = method8()
                                        let _v18551 = v18554 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v18555 : string = method9()
                                        let _v18551 = v18555 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v18556 : string = method9()
                                        let _v18551 = v18556 
                                        #endif
#else
                                        let v18557 : string = method9()
                                        let _v18551 = v18557 
                                        #endif
                                        let v18558 : string = _v18551 
                                        let v18563 : string = method10()
                                        let v18564 : Mut4 = {l0 = v18563} : Mut4
                                        let v18565 : US39 = US39_0
                                        let v18566 : string = $"%A{v18565}"
                                        let v18570 : string = $"{v18566}"
                                        let v18573 : unit = ()
                                        let v18574 : (unit -> unit) = closure10(v18564, v18570)
                                        let v18575 : unit = (fun () -> v18574 (); v18573) ()
                                        let v18578 : string = v18564.l0
                                        let v18579 : (string []) = v18578.Split v18558 
                                        let v18582 : string = v18579.[int 0]
                                        let v18585 : string = method10()
                                        let v18586 : Mut4 = {l0 = v18585} : Mut4
                                        let v18587 : US39 = US39_1
                                        let v18588 : string = $"%A{v18587}"
                                        let v18592 : string = $"{v18588}"
                                        let v18595 : unit = ()
                                        let v18596 : (unit -> unit) = closure10(v18586, v18592)
                                        let v18597 : unit = (fun () -> v18596 (); v18595) ()
                                        let v18600 : string = v18586.l0
                                        let v18601 : bool = v18600.StartsWith v18582 
                                        let v18607 : US1 =
                                            if v18601 then
                                                let v18604 : string = "Rust"
                                                US1_0(v18604)
                                            else
                                                US1_1
                                        let v18613 : US1 =
                                            match v18607 with
                                            | US1_1 -> (* None *)
                                                let v18610 : string = "TypeScript"
                                                US1_0(v18610)
                                            | US1_0(v18608) -> (* Some *)
                                                US1_0(v18608)
                                        let v18617 : string =
                                            match v18613 with
                                            | US1_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US1_0(v18614) -> (* Some *)
                                                v18614
                                        let v18618 : string = method17(v18550, v18617)
                                        let v18619 : string = method17(v18618, v16638)
                                        let v18620 : System.IDisposable = method30(v18619)
                                        let v18621 : string = $"{v18547}.fs"
                                        let v18622 : string = method17(v18619, v18621)
                                        let v18623 : string = method82(v18622)
                                        method27(v18623, v16629)
                                        let v18624 : string list = []
                                        let v18625 : string seq = seq { for i = 0 to v18624.Length - 1 do yield v18624.[i] }
                                        let v18628 : (string -> (string seq -> string)) = String.concat
                                        let v18629 : string = "\\n        "
                                        let v18630 : (string seq -> string) = v18628 v18629
                                        let v18631 : string = v18630 v18625
                                        let v18634 : string = "Fable.Core"
                                        let v18635 : string = $"<PackageReference Include=\"{v18634}\" Version=\"*\" />"
                                        let v18636 : string list = []
                                        let v18637 : string list = v18635 :: v18636 
                                        let v18640 : string seq = seq { for i = 0 to v18637.Length - 1 do yield v18637.[i] }
                                        let v18643 : (string -> (string seq -> string)) = String.concat
                                        let v18644 : (string seq -> string) = v18643 v18629
                                        let v18645 : string = v18644 v18640
                                        let v18648 : string = $"{v18547}.fsproj"
                                        let v18649 : string = method17(v18619, v18648)
                                        let v18650 : string = method82(v18649)
                                        let v18651 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                        let v18652 : string = $"<PropertyGroup>"
                                        let v18653 : string = "\n"
                                        let v18654 : string = v18651 + v18653 
                                        let v18655 : string = v18654 + v18652 
                                        let v18656 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                        let v18657 : string = v18655 + v18653 
                                        let v18658 : string = v18657 + v18656 
                                        let v18659 : string = $"    <LangVersion>preview</LangVersion>"
                                        let v18660 : string = v18658 + v18653 
                                        let v18661 : string = v18660 + v18659 
                                        let v18662 : string = $"    <RollForward>Major</RollForward>"
                                        let v18663 : string = v18661 + v18653 
                                        let v18664 : string = v18663 + v18662 
                                        let v18665 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                        let v18666 : string = v18664 + v18653 
                                        let v18667 : string = v18666 + v18665 
                                        let v18668 : string = $"    <PublishAot>false</PublishAot>"
                                        let v18669 : string = v18667 + v18653 
                                        let v18670 : string = v18669 + v18668 
                                        let v18671 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                        let v18672 : string = v18670 + v18653 
                                        let v18673 : string = v18672 + v18671 
                                        let v18674 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                        let v18675 : string = v18673 + v18653 
                                        let v18676 : string = v18675 + v18674 
                                        let v18677 : string = $"    <SelfContained>true</SelfContained>"
                                        let v18678 : string = v18676 + v18653 
                                        let v18679 : string = v18678 + v18677 
                                        let v18680 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                        let v18681 : string = v18679 + v18653 
                                        let v18682 : string = v18681 + v18680 
                                        let v18683 : string = $"    <OutputType>Exe</OutputType>"
                                        let v18684 : string = v18682 + v18653 
                                        let v18685 : string = v18684 + v18683 
                                        let v18686 : string = $"</PropertyGroup>"
                                        let v18687 : string = v18685 + v18653 
                                        let v18688 : string = v18687 + v18686 
                                        let v18689 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                        let v18690 : string = v18688 + v18653 
                                        let v18691 : string = v18690 + v18689 
                                        let v18692 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                        let v18693 : string = v18691 + v18653 
                                        let v18694 : string = v18693 + v18692 
                                        let v18695 : string = $"</PropertyGroup>"
                                        let v18696 : string = v18694 + v18653 
                                        let v18697 : string = v18696 + v18695 
                                        let v18698 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                        let v18699 : string = v18697 + v18653 
                                        let v18700 : string = v18699 + v18698 
                                        let v18701 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                        let v18702 : string = v18700 + v18653 
                                        let v18703 : string = v18702 + v18701 
                                        let v18704 : string = $"</PropertyGroup>"
                                        let v18705 : string = v18703 + v18653 
                                        let v18706 : string = v18705 + v18704 
                                        let v18707 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                        let v18708 : string = v18706 + v18653 
                                        let v18709 : string = v18708 + v18707 
                                        let v18710 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                        let v18711 : string = v18709 + v18653 
                                        let v18712 : string = v18711 + v18710 
                                        let v18713 : string = $"</PropertyGroup>"
                                        let v18714 : string = v18712 + v18653 
                                        let v18715 : string = v18714 + v18713 
                                        let v18716 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                        let v18717 : string = v18715 + v18653 
                                        let v18718 : string = v18717 + v18716 
                                        let v18719 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                        let v18720 : string = v18718 + v18653 
                                        let v18721 : string = v18720 + v18719 
                                        let v18722 : string = $"</PropertyGroup>"
                                        let v18723 : string = v18721 + v18653 
                                        let v18724 : string = v18723 + v18722 
                                        let v18725 : string = $"<ItemGroup>"
                                        let v18726 : string = v18724 + v18653 
                                        let v18727 : string = v18726 + v18725 
                                        let v18728 : string = $"    {v18631}"
                                        let v18729 : string = v18727 + v18653 
                                        let v18730 : string = v18729 + v18728 
                                        let v18731 : string = $"    <Compile Include=\"{v18623}\" />"
                                        let v18732 : string = v18730 + v18653 
                                        let v18733 : string = v18732 + v18731 
                                        let v18734 : string = $"</ItemGroup>"
                                        let v18735 : string = v18733 + v18653 
                                        let v18736 : string = v18735 + v18734 
                                        let v18737 : string = $"<ItemGroup>"
                                        let v18738 : string = v18736 + v18653 
                                        let v18739 : string = v18738 + v18737 
                                        let v18740 : string = $"    {v18645}"
                                        let v18741 : string = v18739 + v18653 
                                        let v18742 : string = v18741 + v18740 
                                        let v18743 : string = $"</ItemGroup>"
                                        let v18744 : string = v18742 + v18653 
                                        let v18745 : string = v18744 + v18743 
                                        let v18746 : string = $"</Project>"
                                        let v18747 : string = v18745 + v18653 
                                        let v18748 : string = v18747 + v18746 
                                        method27(v18650, v18748)
                                        let v18749 : string = "lib/typescript/fable/fable_modules"
                                        let v18750 : string = method17(v18544, v18749)
                                        let v18751 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v18752 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v18750 v18751 
                                        let v18753 : string = "async_walkdir::WalkDir::filter($0, |x| $1(x))"
                                        let v18754 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure127()
                                        let v18755 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v18752, v18754) v18753 
                                        let v18756 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method113()
                                        let v18757 : string = "tokio_stream::StreamExt::filter_map(v18755, |x| v18756(x))"
                                        let v18758 : _ = Fable.Core.RustInterop.emitRustExpr () v18757 
                                        let v18759 : string = "Box::pin(tokio_stream::StreamExt::collect(v18758))"
                                        let v18760 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v18759 
                                        let v18761 : string = "v18760.await"
                                        let v18762 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v18761 
                                        let v18763 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                        let v18764 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v18762 v18763 
                                        let v18765 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v18766 : (struct (string * string) -> struct (string * string)) = closure136()
                                        let v18767 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v18764, v18766) v18765 
                                        let v18768 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v18769 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v18767 v18768 
                                        let v18770 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v18771 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v18769 v18770 
                                        let v18772 : struct (string * string) option = v18771 |> Array.tryItem 0 
                                        let v18773 : US43 option = None
                                        let _v18773 = ref v18773 
                                        let v18774 : US43 option ref = _v18773 
                                        let v18775 : (US43 option -> US43 option ref) = closure137(v18774)
                                        let v18776 : unit = ()
                                        let v18777 : (unit -> unit) = closure138(v18772, v18775)
                                        let v18778 : unit = (fun () -> v18777 (); v18776) ()
                                        let v18782 : US43 option = _v18773.Value 
                                        let v18794 : US43 = US43_1
                                        let v18795 : US43 = v18782 |> Option.defaultValue v18794 
                                        let v18799 : unit = ()
                                        let v18800 : (unit -> unit) = closure139(v18795)
                                        let v18801 : unit = (fun () -> v18800 (); v18799) ()
                                        match v18795 with
                                        | US43_1 -> (* None *)
                                            ()
                                        | US43_0(v19604, v19605) -> (* Some *)
                                            let v19606 : string = $"fable-library-{v16634}.{v19605}"
                                            let v19607 : string = method17(v18750, v19606)
                                            let v19608 : string = $"fable_modules/fable-library-{v16634}.{v19605}"
                                            let v19609 : string = method17(v18619, v19608)
                                            method98(v19607, v19609)
                                        let v19610 : US33 = US33_1
                                        let struct (v19611 : int32, v19612 : string) = method99(v19610, v18619, v16634, v18650, v18530)
                                        let v19613 : bool = v19611 <> 0 
                                        let struct (v22777 : US1, v22778 : US1, v22779 : US1) =
                                            if v19613 then
                                                let v19616 : unit = ()
                                                let v19617 : (unit -> unit) = closure141(v19612, v19611)
                                                let v19618 : unit = (fun () -> v19617 (); v19616) ()
                                                let v20635 : US1 = US1_0(v16634)
                                                let v20636 : US1 = US1_1
                                                let v20637 : US1 = US1_0(v19612)
                                                struct (v20635, v20636, v20637)
                                            else
                                                let v20638 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                let v20639 : bool = Fable.Core.RustInterop.emitRustExpr v16581 v20638 
                                                let v20640 : string = "x"
                                                let v20641 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v20640 
                                                let v20642 : string = "fable_library_rust::String_::fromString($0)"
                                                let v20643 : string = Fable.Core.RustInterop.emitRustExpr v20641 v20642 
                                                let v20644 : string = "="
                                                let v20645 : bool = v20643.Contains v20644 
                                                let v20649 : string =
                                                    if v20645 then
                                                        v20643
                                                    else
                                                        let v20648 : string = $"\"{v20643}\":\"*\""
                                                        v20648
                                                let v20650 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v20651 : bool = Fable.Core.RustInterop.emitRustExpr v20649 v20650 
                                                let v20652 : string = "_vec_map"
                                                let v20653 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v20652 
                                                let v20654 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                let v20655 : (string []) = Fable.Core.RustInterop.emitRustExpr v20653 v20654 
                                                let v20656 : string seq = seq { for i = 0 to v20655.Length - 1 do yield v20655.[i] }
                                                let v20659 : (string -> (string seq -> string)) = String.concat
                                                let v20660 : string = ",\n"
                                                let v20661 : (string seq -> string) = v20659 v20660
                                                let v20662 : string = v20661 v20656
                                                let v20665 : string = $"{{"
                                                let v20666 : string = $"  \"name\": \"spiral_builder_{v16638}\","
                                                let v20667 : string = v20665 + v20666 
                                                let v20668 : string = $"  \"dependencies\": {{"
                                                let v20669 : string = v20667 + v20668 
                                                let v20670 : string = v20669 + v20662 
                                                let v20671 : string = $"  }},"
                                                let v20672 : string = v20670 + v20671 
                                                let v20673 : string = $"    \"devDependencies\": {{"
                                                let v20674 : string = v20672 + v20673 
                                                let v20675 : string = $"  }},"
                                                let v20676 : string = v20674 + v20675 
                                                let v20677 : string = $"}}"
                                                let v20678 : string = v20676 + v20677 
                                                let v20679 : string = "package.json"
                                                let v20680 : string = method17(v18619, v20679)
                                                let v20681 : string = "../.."
                                                let v20682 : string = method17(v18619, v20681)
                                                let v20683 : string = method17(v20682, v20679)
                                                method27(v20680, v20678)
                                                let v20684 : string = ""
                                                method27(v20683, v20684)
                                                let v20685 : string = $"{v18547}.{v16634}"
                                                let v20686 : string = method17(v18619, v20685)
                                                let v20687 : unit = ()
                                                let v20688 : (unit -> unit) = closure143(v20686)
                                                let v20689 : unit = (fun () -> v20688 (); v20687) ()
                                                let v21487 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v21488 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v21489 : string = "std::fs::read(&*$0)"
                                                let v21490 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v20686 v21489 
                                                let v21491 : string = "$0.unwrap()"
                                                let v21492 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v21490 v21491 
                                                let _v21488 = v21492 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v21493 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v21488 = v21493 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v21496 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v21488 = v21496 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v21499 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v21488 = v21499 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v21502 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v21488 = v21502 
                                                #endif
#else
                                                let v21505 : (uint8 []) = v20686 |> System.IO.File.ReadAllBytes
                                                let v21506 : string = "$0.to_vec()"
                                                let v21507 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v21505 v21506 
                                                let _v21488 = v21507 
                                                #endif
                                                let v21508 : Vec<uint8> = _v21488 
                                                let v21513 : Vec<uint8> = method16(v21508)
                                                let v21514 : string = "std::string::String::from_utf8($0)"
                                                let v21515 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v21513 v21514 
                                                let v21516 : string = "$0.unwrap()"
                                                let v21517 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21515 v21516 
                                                let v21518 : string = "fable_library_rust::String_::fromString($0)"
                                                let v21519 : string = Fable.Core.RustInterop.emitRustExpr v21517 v21518 
                                                let _v21487 = v21519 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v21520 : string = null |> unbox<string>
                                                let _v21487 = v21520 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v21523 : string = null |> unbox<string>
                                                let _v21487 = v21523 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v21526 : string = null |> unbox<string>
                                                let _v21487 = v21526 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v21529 : string = null |> unbox<string>
                                                let _v21487 = v21529 
                                                #endif
#else
                                                let v21532 : string = v20686 |> System.IO.File.ReadAllText
                                                let _v21487 = v21532 
                                                #endif
                                                let v21533 : string = _v21487 
                                                let v21538 : string = "// spiral_builder.process_typescript"
                                                let v21539 : bool = v21533.Contains v21538 
                                                let v21577 : string =
                                                    if v21539 then
                                                        v21533
                                                    else
                                                        let v21542 : string = $"\"./fable_modules/fable-library-ts.{v18795}/"
                                                        let v21543 : string = $"\"{v18544}/lib/typescript/fable/fable_modules/fable-library-ts.{v18795}/"
                                                        let v21544 : string = v21533.Replace (v21542, v21543)
                                                        let v21545 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v21546 : string = " defaultOf::<()>();"
                                                        let v21547 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v21548 : string = $"regex::Regex::new(&$0)"
                                                        let v21549 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v21545 v21548 
                                                        let v21550 : string = "$0.unwrap()"
                                                        let v21551 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v21549 v21550 
                                                        let v21552 : string = method83(v21544)
                                                        let v21553 : string = $"$0.replace_all(&*$1, &*$2)"
                                                        let v21554 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v21551, v21552, v21546) v21553 
                                                        let v21555 : string = "String::from($0)"
                                                        let v21556 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21554 v21555 
                                                        let v21557 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v21558 : string = Fable.Core.RustInterop.emitRustExpr v21556 v21557 
                                                        let _v21547 = v21558 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v21559 : string = null |> unbox<string>
                                                        let _v21547 = v21559 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v21562 : string = null |> unbox<string>
                                                        let _v21547 = v21562 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v21565 : string = null |> unbox<string>
                                                        let _v21547 = v21565 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v21568 : string = null |> unbox<string>
                                                        let _v21547 = v21568 
                                                        #endif
#else
                                                        let v21571 : string = System.Text.RegularExpressions.Regex.Replace (v21544, v21545, v21546)
                                                        let _v21547 = v21571 
                                                        #endif
                                                        let v21572 : string = _v21547 
                                                        v21572
                                                let v21578 : bool = v21539 = false
                                                if v21578 then
                                                    let v21579 : string = $"{v21577}\n\n{v21538}\n"
                                                    method27(v20686, v21579)
                                                let v21580 : string = $"bun run \"{v20686}\""
                                                let v21581 : string = "PATH"
                                                let v21582 : string = method3(v21581)
                                                let v21583 : bool = v21582 = ""
                                                let v21615 : US1 =
                                                    if v21583 then
                                                        US1_1
                                                    else
                                                        let v21585 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v21586 : string = "cfg!(windows)"
                                                        let v21587 : bool = Fable.Core.RustInterop.emitRustExpr () v21586 
                                                        let _v21585 = v21587 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v21588 : string = "cfg!(windows)"
                                                        let v21589 : bool = Fable.Core.RustInterop.emitRustExpr () v21588 
                                                        let _v21585 = v21589 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v21590 : string = "cfg!(windows)"
                                                        let v21591 : bool = Fable.Core.RustInterop.emitRustExpr () v21590 
                                                        let _v21585 = v21591 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v21592 : US10 = US10_0
                                                        let v21593 : US11 = US11_3(v21592)
                                                        let v21594 : string = $"platform.is_windows / target: {v21593}"
                                                        let v21595 : bool = failwith<bool> v21594
                                                        let _v21585 = v21595 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v21596 : US10 = US10_0
                                                        let v21597 : US11 = US11_4(v21596)
                                                        let v21598 : string = $"platform.is_windows / target: {v21597}"
                                                        let v21599 : bool = failwith<bool> v21598
                                                        let _v21585 = v21599 
                                                        #endif
#else
                                                        let v21600 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v21601 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v21602 : bool = v21601 v21600
                                                        let _v21585 = v21602 
                                                        #endif
                                                        let v21603 : bool = _v21585 
                                                        let v21611 : string =
                                                            if v21603 then
                                                                let v21609 : string = ";"
                                                                v21609
                                                            else
                                                                let v21610 : string = ":"
                                                                v21610
                                                        let v21612 : string = "~/.bun/bin"
                                                        let v21613 : string = $"{v21612}{v21611}{v21582}"
                                                        US1_0(v21613)
                                                let v21621 : UH5 =
                                                    match v21615 with
                                                    | US1_1 -> (* None *)
                                                        UH5_0
                                                    | US1_0(v21616) -> (* Some *)
                                                        let v21617 : UH5 = UH5_0
                                                        UH5_1(v21581, v21616, v21617)
                                                let v21622 : string = "TRACE_LEVEL"
                                                let v21623 : string = "Verbose"
                                                let v21624 : UH5 = UH5_0
                                                let v21625 : UH5 = UH5_1(v21622, v21623, v21624)
                                                let v21626 : UH5 = method115(v21621, v21625)
                                                let v21627 : struct (string * string) list = []
                                                let v21628 : struct (string * string) list = method116(v21626, v21627)
                                                let v21629 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v21630 : (struct (string * string) []) = v21629 v21628
                                                let v21633 : System.Threading.CancellationToken option = None
                                                let v21634 : (struct (string * string) []) = [||]
                                                let v21635 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v21636 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v21637 : string option = None
                                                let v21643 : Result<string, string> =
                                                    match v18530 with
                                                    | US12_1(v21640) -> (* Error *)
                                                        let v21641 : Result<string, string> = Error v21640 
                                                        v21641
                                                    | US12_0(v21638) -> (* Ok *)
                                                        let v21639 : Result<string, string> = Ok v21638 
                                                        v21639
                                                let v21644 : string = "v21643.ok()"
                                                let v21645 : string option = Fable.Core.RustInterop.emitRustExpr () v21644 
                                                let v21646 : bool = true
                                                let struct (v21647 : int32, v21648 : string) = method42(v21580, v21633, v21630, v21635, v21636, v21646, v21645)
                                                let v21649 : int32 = v21630.Length
                                                let v21650 : (string []) = Array.zeroCreate<string> (v21649)
                                                let v21651 : Mut5 = {l0 = 0} : Mut5
                                                while method45(v21649, v21651) do
                                                    let v21653 : int32 = v21651.l0
                                                    let struct (v21654 : string, v21655 : string) = v21630.[int v21653]
                                                    let v21656 : string = $"$env:{v21654}=''{v21655}''"
                                                    v21650.[int v21653] <- v21656
                                                    let v21657 : int32 = v21653 + 1
                                                    v21651.l0 <- v21657
                                                    ()
                                                let v21658 : string seq = v21650 |> Seq.ofArray
                                                let v21661 : (string -> (string seq -> string)) = String.concat
                                                let v21662 : string = ";"
                                                let v21663 : (string seq -> string) = v21661 v21662
                                                let v21664 : string = v21663 v21658
                                                let v21667 : string = $"pwsh -c '{v21664}; {v21580}'"
                                                let v21668 : bool = v21647 = 0
                                                let struct (v22774 : US1, v22775 : US1, v22776 : US1) =
                                                    if v21668 then
                                                        let v21669 : (string -> US1) = closure85()
                                                        let v21670 : (unit -> string) = closure145(v21648)
                                                        let v21671 : (exn -> US1) = closure146(v20686, v21648, v21667)
                                                        let v21672 : US1 = US1_1
                                                        let result = ref v21672
                                                        try
                                                            result.Value <- v21670 () |> v21669 
                                                        with ex ->
                                                            result.Value <- v21671 ex 
                                                        let v21673 : US1 = result.Value
                                                        let v21683 : string option =
                                                            match v21673 with
                                                            | US1_1 -> (* None *)
                                                                let v21681 : string option = None
                                                                v21681
                                                            | US1_0(v21677) -> (* Some *)
                                                                let v21678 : string option = Some v21677 
                                                                v21678
                                                        let v21684 : string = "$0.unwrap()"
                                                        let v21685 : string = Fable.Core.RustInterop.emitRustExpr v21683 v21684 
                                                        let v21686 : US1 = US1_0(v16634)
                                                        let v21687 : US1 = US1_0(v21577)
                                                        let v21688 : US1 = US1_0(v21685)
                                                        struct (v21686, v21687, v21688)
                                                    else
                                                        let v21689 : unit = ()
                                                        let v21690 : (unit -> unit) = closure149(v20686, v21648, v21647, v21667)
                                                        let v21691 : unit = (fun () -> v21690 (); v21689) ()
                                                        let v22771 : US1 = US1_0(v16634)
                                                        let v22772 : US1 = US1_1
                                                        let v22773 : US1 = US1_1
                                                        struct (v22771, v22772, v22773)
                                                struct (v22774, v22775, v22776)
                                        struct (v22777, v22778, v22779)
                                    else
                                        let v22780 : string = "fable_library_rust::String_::fromString($0)"
                                        let v22781 : string = Fable.Core.RustInterop.emitRustExpr v33 v22780 
                                        let v22782 : bool = v22781 = "python"
                                        let struct (v29104 : US1, v29105 : US1, v29106 : US1) =
                                            if v22782 then
                                                let v22783 : string = method76()
                                                let v22784 : string = "&*$0"
                                                let v22785 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v22783 v22784 
                                                let v22786 : string = "clap::ArgMatches::get_one(&$0, v22785).cloned()"
                                                let v22787 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v22786 
                                                let v22788 : US5 option = None
                                                let _v22788 = ref v22788 
                                                let v22789 : US5 option ref = _v22788 
                                                let v22790 : (US5 option -> US5 option ref) = closure17(v22789)
                                                let v22791 : unit = ()
                                                let v22792 : (unit -> unit) = closure18(v22787, v22790)
                                                let v22793 : unit = (fun () -> v22792 (); v22791) ()
                                                let v22796 : US5 option = _v22788.Value 
                                                let v22807 : US5 = US5_1
                                                let v22808 : US5 = v22796 |> Option.defaultValue v22807 
                                                let v22815 : std_string_String =
                                                    match v22808 with
                                                    | US5_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US5_0(v22812) -> (* Some *)
                                                        v22812
                                                let v22816 : string = "fable_library_rust::String_::fromString($0)"
                                                let v22817 : string = Fable.Core.RustInterop.emitRustExpr v22815 v22816 
                                                let v22818 : string = method15()
                                                let v22819 : string = "&*$0"
                                                let v22820 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v22818 v22819 
                                                let v22821 : string = "clap::ArgMatches::get_many(&$0, v22820).map(|x| x.cloned().into_iter().collect())"
                                                let v22822 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v22821 
                                                let v22823 : US9 option = None
                                                let _v22823 = ref v22823 
                                                let v22824 : US9 option ref = _v22823 
                                                let v22825 : (US9 option -> US9 option ref) = closure19(v22824)
                                                let v22826 : unit = ()
                                                let v22827 : (unit -> unit) = closure20(v22822, v22825)
                                                let v22828 : unit = (fun () -> v22827 (); v22826) ()
                                                let v22831 : US9 option = _v22823.Value 
                                                let v22842 : US9 = US9_1
                                                let v22843 : US9 = v22831 |> Option.defaultValue v22842 
                                                let v22847 : (std_string_String []) = [||]
                                                let v22848 : string = "$0.to_vec()"
                                                let v22849 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v22847 v22848 
                                                let v22852 : Vec<std_string_String> =
                                                    match v22843 with
                                                    | US9_1 -> (* None *)
                                                        v22849
                                                    | US9_0(v22850) -> (* Some *)
                                                        v22850
                                                let v22853 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v22854 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v22855 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v22856 : string = "std::fs::read(&*$0)"
                                                let v22857 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v22817 v22856 
                                                let v22858 : string = "$0.unwrap()"
                                                let v22859 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v22857 v22858 
                                                let _v22855 = v22859 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v22860 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v22855 = v22860 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v22863 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v22855 = v22863 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v22866 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v22855 = v22866 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v22869 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v22855 = v22869 
                                                #endif
#else
                                                let v22872 : (uint8 []) = v22817 |> System.IO.File.ReadAllBytes
                                                let v22873 : string = "$0.to_vec()"
                                                let v22874 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v22872 v22873 
                                                let _v22855 = v22874 
                                                #endif
                                                let v22875 : Vec<uint8> = _v22855 
                                                let v22880 : Vec<uint8> = method16(v22875)
                                                let v22881 : string = "std::string::String::from_utf8($0)"
                                                let v22882 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v22880 v22881 
                                                let v22883 : string = "$0.unwrap()"
                                                let v22884 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22882 v22883 
                                                let v22885 : string = "fable_library_rust::String_::fromString($0)"
                                                let v22886 : string = Fable.Core.RustInterop.emitRustExpr v22884 v22885 
                                                let _v22854 = v22886 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v22887 : string = null |> unbox<string>
                                                let _v22854 = v22887 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v22890 : string = null |> unbox<string>
                                                let _v22854 = v22890 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v22893 : string = null |> unbox<string>
                                                let _v22854 = v22893 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v22896 : string = null |> unbox<string>
                                                let _v22854 = v22896 
                                                #endif
#else
                                                let v22899 : string = v22817 |> System.IO.File.ReadAllText
                                                let _v22854 = v22899 
                                                #endif
                                                let v22900 : string = _v22854 
                                                let v22905 : string = "py"
                                                let v22906 : string = $"%A{struct (v22905, v22900)}"
                                                let v22909 : string = method91(v22906)
                                                let v22910 : string = __SOURCE_DIRECTORY__
                                                let v22911 : string = "polyglot"
                                                let v22912 : string = ".devcontainer"
                                                let v22913 : string = method17(v22911, v22912)
                                                let v22914 : US12 = method20(v22913, v22910)
                                                let v23844 : US1 =
                                                    match v22914 with
                                                    | US12_1(v22917) -> (* Error *)
                                                        let v22918 : unit = ()
                                                        let v22919 : (unit -> unit) = closure22(v22917)
                                                        let v22920 : unit = (fun () -> v22919 (); v22918) ()
                                                        US1_1
                                                    | US12_0(v22915) -> (* Ok *)
                                                        US1_0(v22915)
                                                let v24781 : US1 =
                                                    match v23844 with
                                                    | US1_1 -> (* None *)
                                                        let v23847 : string = method25()
                                                        let v23848 : string = method17(v22911, v22912)
                                                        let v23849 : US12 = method20(v23848, v23847)
                                                        match v23849 with
                                                        | US12_1(v23852) -> (* Error *)
                                                            let v23853 : unit = ()
                                                            let v23854 : (unit -> unit) = closure22(v23852)
                                                            let v23855 : unit = (fun () -> v23854 (); v23853) ()
                                                            US1_1
                                                        | US12_0(v23850) -> (* Ok *)
                                                            US1_0(v23850)
                                                    | US1_0(v23845) -> (* Some *)
                                                        US1_0(v23845)
                                                let v24785 : string =
                                                    match v24781 with
                                                    | US1_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US1_0(v24782) -> (* Some *)
                                                        v24782
                                                let v24786 : string = method17(v24785, v22911)
                                                let v24787 : string = method25()
                                                let v24788 : (unit -> string) = v24787.ToLower
                                                let v24789 : string = v24788 ()
                                                let v24792 : (unit -> string) = v24786.ToLower
                                                let v24793 : string = v24792 ()
                                                let v24796 : bool = v24789.StartsWith v24793 
                                                let v24801 : US12 =
                                                    if v24796 then
                                                        US12_1(v24793)
                                                    else
                                                        US12_0(v24793)
                                                let v24807 : Result<string, string> =
                                                    match v24801 with
                                                    | US12_1(v24804) -> (* Error *)
                                                        let v24805 : Result<string, string> = Error v24804 
                                                        v24805
                                                    | US12_0(v24802) -> (* Ok *)
                                                        let v24803 : Result<string, string> = Ok v24802 
                                                        v24803
                                                let v24808 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                let v24809 : bool = Fable.Core.RustInterop.emitRustExpr v24807 v24808 
                                                let v24810 : string = "x"
                                                let v24811 : string = Fable.Core.RustInterop.emitRustExpr () v24810 
                                                let v24812 : string = "true; $0 })"
                                                let v24813 : bool = Fable.Core.RustInterop.emitRustExpr v24811 v24812 
                                                let v24814 : string = "_result_unwrap_or_else"
                                                let v24815 : string = Fable.Core.RustInterop.emitRustExpr () v24814 
                                                let v24816 : string = "target/spiral_builder"
                                                let v24817 : string = method17(v24815, v24816)
                                                let v24818 : string = "spiral_builder"
                                                let v24819 : string = method17(v24817, v24818)
                                                let v24820 : string = "packages"
                                                let v24821 : string = method17(v24819, v24820)
                                                
                                                
                                                
                                                let v24822 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v24823 : string = method8()
                                                let _v24822 = v24823 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v24824 : string = method8()
                                                let _v24822 = v24824 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v24825 : string = method8()
                                                let _v24822 = v24825 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v24826 : string = method9()
                                                let _v24822 = v24826 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v24827 : string = method9()
                                                let _v24822 = v24827 
                                                #endif
#else
                                                let v24828 : string = method9()
                                                let _v24822 = v24828 
                                                #endif
                                                let v24829 : string = _v24822 
                                                let v24834 : string = method10()
                                                let v24835 : Mut4 = {l0 = v24834} : Mut4
                                                let v24836 : US39 = US39_0
                                                let v24837 : string = $"%A{v24836}"
                                                let v24841 : string = $"{v24837}"
                                                let v24844 : unit = ()
                                                let v24845 : (unit -> unit) = closure10(v24835, v24841)
                                                let v24846 : unit = (fun () -> v24845 (); v24844) ()
                                                let v24849 : string = v24835.l0
                                                let v24850 : (string []) = v24849.Split v24829 
                                                let v24853 : string = v24850.[int 0]
                                                let v24856 : string = method10()
                                                let v24857 : Mut4 = {l0 = v24856} : Mut4
                                                let v24858 : US39 = US39_2
                                                let v24859 : string = $"%A{v24858}"
                                                let v24863 : string = $"{v24859}"
                                                let v24866 : unit = ()
                                                let v24867 : (unit -> unit) = closure10(v24857, v24863)
                                                let v24868 : unit = (fun () -> v24867 (); v24866) ()
                                                let v24871 : string = v24857.l0
                                                let v24872 : bool = v24871.StartsWith v24853 
                                                let v24878 : US1 =
                                                    if v24872 then
                                                        let v24875 : string = "Rust"
                                                        US1_0(v24875)
                                                    else
                                                        US1_1
                                                let v24945 : US1 =
                                                    match v24878 with
                                                    | US1_1 -> (* None *)
                                                        let v24881 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v24882 : string = method8()
                                                        let _v24881 = v24882 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v24883 : string = method8()
                                                        let _v24881 = v24883 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v24884 : string = method8()
                                                        let _v24881 = v24884 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v24885 : string = method9()
                                                        let _v24881 = v24885 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v24886 : string = method9()
                                                        let _v24881 = v24886 
                                                        #endif
#else
                                                        let v24887 : string = method9()
                                                        let _v24881 = v24887 
                                                        #endif
                                                        let v24888 : string = _v24881 
                                                        let v24893 : string = method10()
                                                        let v24894 : Mut4 = {l0 = v24893} : Mut4
                                                        let v24895 : US39 = US39_1
                                                        let v24896 : string = $"%A{v24895}"
                                                        let v24900 : string = $"{v24896}"
                                                        let v24903 : unit = ()
                                                        let v24904 : (unit -> unit) = closure10(v24894, v24900)
                                                        let v24905 : unit = (fun () -> v24904 (); v24903) ()
                                                        let v24908 : string = v24894.l0
                                                        let v24909 : (string []) = v24908.Split v24888 
                                                        let v24912 : string = v24909.[int 0]
                                                        let v24915 : string = method10()
                                                        let v24916 : Mut4 = {l0 = v24915} : Mut4
                                                        let v24917 : US39 = US39_2
                                                        let v24918 : string = $"%A{v24917}"
                                                        let v24922 : string = $"{v24918}"
                                                        let v24925 : unit = ()
                                                        let v24926 : (unit -> unit) = closure10(v24916, v24922)
                                                        let v24927 : unit = (fun () -> v24926 (); v24925) ()
                                                        let v24930 : string = v24916.l0
                                                        let v24931 : bool = v24930.StartsWith v24912 
                                                        let v24937 : US1 =
                                                            if v24931 then
                                                                let v24934 : string = "TypeScript"
                                                                US1_0(v24934)
                                                            else
                                                                US1_1
                                                        match v24937 with
                                                        | US1_1 -> (* None *)
                                                            let v24940 : string = "Python"
                                                            US1_0(v24940)
                                                        | US1_0(v24938) -> (* Some *)
                                                            US1_0(v24938)
                                                    | US1_0(v24879) -> (* Some *)
                                                        US1_0(v24879)
                                                let v24949 : string =
                                                    match v24945 with
                                                    | US1_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US1_0(v24946) -> (* Some *)
                                                        v24946
                                                let v24950 : string = method17(v24821, v24949)
                                                let v24951 : string = method17(v24950, v22909)
                                                let v24952 : System.IDisposable = method30(v24951)
                                                let v24953 : string = $"{v24818}.fs"
                                                let v24954 : string = method17(v24951, v24953)
                                                let v24955 : string = method82(v24954)
                                                method27(v24955, v22900)
                                                let v24956 : string list = []
                                                let v24957 : string seq = seq { for i = 0 to v24956.Length - 1 do yield v24956.[i] }
                                                let v24960 : (string -> (string seq -> string)) = String.concat
                                                let v24961 : string = "\\n        "
                                                let v24962 : (string seq -> string) = v24960 v24961
                                                let v24963 : string = v24962 v24957
                                                let v24966 : string = "Fable.Core"
                                                let v24967 : string = $"<PackageReference Include=\"{v24966}\" Version=\"*\" />"
                                                let v24968 : string list = []
                                                let v24969 : string list = v24967 :: v24968 
                                                let v24972 : string seq = seq { for i = 0 to v24969.Length - 1 do yield v24969.[i] }
                                                let v24975 : (string -> (string seq -> string)) = String.concat
                                                let v24976 : (string seq -> string) = v24975 v24961
                                                let v24977 : string = v24976 v24972
                                                let v24980 : string = $"{v24818}.fsproj"
                                                let v24981 : string = method17(v24951, v24980)
                                                let v24982 : string = method82(v24981)
                                                let v24983 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                                let v24984 : string = $"<PropertyGroup>"
                                                let v24985 : string = "\n"
                                                let v24986 : string = v24983 + v24985 
                                                let v24987 : string = v24986 + v24984 
                                                let v24988 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                                let v24989 : string = v24987 + v24985 
                                                let v24990 : string = v24989 + v24988 
                                                let v24991 : string = $"    <LangVersion>preview</LangVersion>"
                                                let v24992 : string = v24990 + v24985 
                                                let v24993 : string = v24992 + v24991 
                                                let v24994 : string = $"    <RollForward>Major</RollForward>"
                                                let v24995 : string = v24993 + v24985 
                                                let v24996 : string = v24995 + v24994 
                                                let v24997 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                                let v24998 : string = v24996 + v24985 
                                                let v24999 : string = v24998 + v24997 
                                                let v25000 : string = $"    <PublishAot>false</PublishAot>"
                                                let v25001 : string = v24999 + v24985 
                                                let v25002 : string = v25001 + v25000 
                                                let v25003 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                                let v25004 : string = v25002 + v24985 
                                                let v25005 : string = v25004 + v25003 
                                                let v25006 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                                let v25007 : string = v25005 + v24985 
                                                let v25008 : string = v25007 + v25006 
                                                let v25009 : string = $"    <SelfContained>true</SelfContained>"
                                                let v25010 : string = v25008 + v24985 
                                                let v25011 : string = v25010 + v25009 
                                                let v25012 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                                let v25013 : string = v25011 + v24985 
                                                let v25014 : string = v25013 + v25012 
                                                let v25015 : string = $"    <OutputType>Exe</OutputType>"
                                                let v25016 : string = v25014 + v24985 
                                                let v25017 : string = v25016 + v25015 
                                                let v25018 : string = $"</PropertyGroup>"
                                                let v25019 : string = v25017 + v24985 
                                                let v25020 : string = v25019 + v25018 
                                                let v25021 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                                let v25022 : string = v25020 + v24985 
                                                let v25023 : string = v25022 + v25021 
                                                let v25024 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                                let v25025 : string = v25023 + v24985 
                                                let v25026 : string = v25025 + v25024 
                                                let v25027 : string = $"</PropertyGroup>"
                                                let v25028 : string = v25026 + v24985 
                                                let v25029 : string = v25028 + v25027 
                                                let v25030 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                                let v25031 : string = v25029 + v24985 
                                                let v25032 : string = v25031 + v25030 
                                                let v25033 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                                let v25034 : string = v25032 + v24985 
                                                let v25035 : string = v25034 + v25033 
                                                let v25036 : string = $"</PropertyGroup>"
                                                let v25037 : string = v25035 + v24985 
                                                let v25038 : string = v25037 + v25036 
                                                let v25039 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                                let v25040 : string = v25038 + v24985 
                                                let v25041 : string = v25040 + v25039 
                                                let v25042 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                                let v25043 : string = v25041 + v24985 
                                                let v25044 : string = v25043 + v25042 
                                                let v25045 : string = $"</PropertyGroup>"
                                                let v25046 : string = v25044 + v24985 
                                                let v25047 : string = v25046 + v25045 
                                                let v25048 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                                let v25049 : string = v25047 + v24985 
                                                let v25050 : string = v25049 + v25048 
                                                let v25051 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                                let v25052 : string = v25050 + v24985 
                                                let v25053 : string = v25052 + v25051 
                                                let v25054 : string = $"</PropertyGroup>"
                                                let v25055 : string = v25053 + v24985 
                                                let v25056 : string = v25055 + v25054 
                                                let v25057 : string = $"<ItemGroup>"
                                                let v25058 : string = v25056 + v24985 
                                                let v25059 : string = v25058 + v25057 
                                                let v25060 : string = $"    {v24963}"
                                                let v25061 : string = v25059 + v24985 
                                                let v25062 : string = v25061 + v25060 
                                                let v25063 : string = $"    <Compile Include=\"{v24955}\" />"
                                                let v25064 : string = v25062 + v24985 
                                                let v25065 : string = v25064 + v25063 
                                                let v25066 : string = $"</ItemGroup>"
                                                let v25067 : string = v25065 + v24985 
                                                let v25068 : string = v25067 + v25066 
                                                let v25069 : string = $"<ItemGroup>"
                                                let v25070 : string = v25068 + v24985 
                                                let v25071 : string = v25070 + v25069 
                                                let v25072 : string = $"    {v24977}"
                                                let v25073 : string = v25071 + v24985 
                                                let v25074 : string = v25073 + v25072 
                                                let v25075 : string = $"</ItemGroup>"
                                                let v25076 : string = v25074 + v24985 
                                                let v25077 : string = v25076 + v25075 
                                                let v25078 : string = $"</Project>"
                                                let v25079 : string = v25077 + v24985 
                                                let v25080 : string = v25079 + v25078 
                                                method27(v24982, v25080)
                                                let v25081 : string = "lib/python/fable/fable_modules"
                                                let v25082 : string = method17(v24815, v25081)
                                                let v25083 : string = $"fable_library"
                                                let v25084 : string = method17(v25082, v25083)
                                                let v25085 : string = $"fable_modules/fable_library"
                                                let v25086 : string = method17(v24951, v25085)
                                                method98(v25084, v25086)
                                                let v25087 : US33 = US33_1
                                                let struct (v25088 : int32, v25089 : string) = method99(v25087, v24951, v22905, v24982, v24801)
                                                let v25090 : bool = v25088 <> 0 
                                                let struct (v28208 : US1, v28209 : US1, v28210 : US1) =
                                                    if v25090 then
                                                        let v25093 : unit = ()
                                                        let v25094 : (unit -> unit) = closure151(v25089, v25088)
                                                        let v25095 : unit = (fun () -> v25094 (); v25093) ()
                                                        let v26112 : US1 = US1_0(v22905)
                                                        let v26113 : US1 = US1_1
                                                        let v26114 : US1 = US1_0(v25089)
                                                        struct (v26112, v26113, v26114)
                                                    else
                                                        let v26115 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                        let v26116 : bool = Fable.Core.RustInterop.emitRustExpr v22852 v26115 
                                                        let v26117 : string = "x"
                                                        let v26118 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v26117 
                                                        let v26119 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v26120 : string = Fable.Core.RustInterop.emitRustExpr v26118 v26119 
                                                        let v26121 : string = "="
                                                        let v26122 : bool = v26120.Contains v26121 
                                                        let v26126 : string =
                                                            if v26122 then
                                                                v26120
                                                            else
                                                                let v26125 : string = $"\"{v26120}\":\"*\""
                                                                v26125
                                                        let v26127 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v26128 : bool = Fable.Core.RustInterop.emitRustExpr v26126 v26127 
                                                        let v26129 : string = "_vec_map"
                                                        let v26130 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v26129 
                                                        let v26131 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                        let v26132 : (string []) = Fable.Core.RustInterop.emitRustExpr v26130 v26131 
                                                        let v26133 : string seq = seq { for i = 0 to v26132.Length - 1 do yield v26132.[i] }
                                                        let v26136 : (string -> (string seq -> string)) = String.concat
                                                        let v26137 : string = ",\n"
                                                        let v26138 : (string seq -> string) = v26136 v26137
                                                        let v26139 : string = v26138 v26133
                                                        let v26142 : string = $"{{"
                                                        let v26143 : string = $"  \"name\": \"spiral_builder_{v22909}\","
                                                        let v26144 : string = v26142 + v26143 
                                                        let v26145 : string = $"  \"dependencies\": {{"
                                                        let v26146 : string = v26144 + v26145 
                                                        let v26147 : string = v26146 + v26139 
                                                        let v26148 : string = $"  }},"
                                                        let v26149 : string = v26147 + v26148 
                                                        let v26150 : string = $"    \"devDependencies\": {{"
                                                        let v26151 : string = v26149 + v26150 
                                                        let v26152 : string = $"  }},"
                                                        let v26153 : string = v26151 + v26152 
                                                        let v26154 : string = $"}}"
                                                        let v26155 : string = v26153 + v26154 
                                                        let v26156 : string = "package.json"
                                                        let v26157 : string = method17(v24951, v26156)
                                                        let v26158 : string = "../.."
                                                        let v26159 : string = method17(v24951, v26158)
                                                        let v26160 : string = method17(v26159, v26156)
                                                        method27(v26157, v26155)
                                                        let v26161 : string = ""
                                                        method27(v26160, v26161)
                                                        let v26162 : string = $"{v24818}.{v22905}"
                                                        let v26163 : string = method17(v24951, v26162)
                                                        let v26164 : unit = ()
                                                        let v26165 : (unit -> unit) = closure153(v26163)
                                                        let v26166 : unit = (fun () -> v26165 (); v26164) ()
                                                        let v26964 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v26965 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v26966 : string = "std::fs::read(&*$0)"
                                                        let v26967 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v26163 v26966 
                                                        let v26968 : string = "$0.unwrap()"
                                                        let v26969 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v26967 v26968 
                                                        let _v26965 = v26969 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v26970 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v26965 = v26970 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v26973 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v26965 = v26973 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v26976 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v26965 = v26976 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v26979 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v26965 = v26979 
                                                        #endif
#else
                                                        let v26982 : (uint8 []) = v26163 |> System.IO.File.ReadAllBytes
                                                        let v26983 : string = "$0.to_vec()"
                                                        let v26984 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v26982 v26983 
                                                        let _v26965 = v26984 
                                                        #endif
                                                        let v26985 : Vec<uint8> = _v26965 
                                                        let v26990 : Vec<uint8> = method16(v26985)
                                                        let v26991 : string = "std::string::String::from_utf8($0)"
                                                        let v26992 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v26990 v26991 
                                                        let v26993 : string = "$0.unwrap()"
                                                        let v26994 : std_string_String = Fable.Core.RustInterop.emitRustExpr v26992 v26993 
                                                        let v26995 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v26996 : string = Fable.Core.RustInterop.emitRustExpr v26994 v26995 
                                                        let _v26964 = v26996 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v26997 : string = null |> unbox<string>
                                                        let _v26964 = v26997 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v27000 : string = null |> unbox<string>
                                                        let _v26964 = v27000 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v27003 : string = null |> unbox<string>
                                                        let _v26964 = v27003 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v27006 : string = null |> unbox<string>
                                                        let _v26964 = v27006 
                                                        #endif
#else
                                                        let v27009 : string = v26163 |> System.IO.File.ReadAllText
                                                        let _v26964 = v27009 
                                                        #endif
                                                        let v27010 : string = _v26964 
                                                        let v27015 : string = "# spiral_builder.process_python"
                                                        let v27016 : bool = v27010.Contains v27015 
                                                        let v27057 : string =
                                                            if v27016 then
                                                                v27010
                                                            else
                                                                let v27019 : string = "\";\".into()"
                                                                let v27020 : string = Fable.Core.RustInterop.emitRustExpr () v27019 
                                                                let v27021 : string = "),)"
                                                                let v27022 : string = v27021 + v27020 
                                                                let v27023 : string = "));"
                                                                let v27024 : string = v27010.Replace (v27022, v27023)
                                                                let v27025 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v27026 : string = " defaultOf::<()>();"
                                                                let v27027 : unit = ()
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v27028 : string = $"regex::Regex::new(&$0)"
                                                                let v27029 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v27025 v27028 
                                                                let v27030 : string = "$0.unwrap()"
                                                                let v27031 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v27029 v27030 
                                                                let v27032 : string = method83(v27024)
                                                                let v27033 : string = $"$0.replace_all(&*$1, &*$2)"
                                                                let v27034 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v27031, v27032, v27026) v27033 
                                                                let v27035 : string = "String::from($0)"
                                                                let v27036 : std_string_String = Fable.Core.RustInterop.emitRustExpr v27034 v27035 
                                                                let v27037 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v27038 : string = Fable.Core.RustInterop.emitRustExpr v27036 v27037 
                                                                let _v27027 = v27038 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v27039 : string = null |> unbox<string>
                                                                let _v27027 = v27039 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v27042 : string = null |> unbox<string>
                                                                let _v27027 = v27042 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                let v27045 : string = null |> unbox<string>
                                                                let _v27027 = v27045 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                let v27048 : string = null |> unbox<string>
                                                                let _v27027 = v27048 
                                                                #endif
#else
                                                                let v27051 : string = System.Text.RegularExpressions.Regex.Replace (v27024, v27025, v27026)
                                                                let _v27027 = v27051 
                                                                #endif
                                                                let v27052 : string = _v27027 
                                                                v27052
                                                        let v27058 : bool = v27016 = false
                                                        if v27058 then
                                                            let v27059 : string = $"{v27057}\n\n{v27015}\n"
                                                            method27(v26163, v27059)
                                                        let v27060 : string = $"python \"{v26163}\""
                                                        let v27061 : string = "TRACE_LEVEL"
                                                        let v27062 : string = "Verbose"
                                                        let v27063 : (struct (string * string) []) = [|struct (v27061, v27062)|]
                                                        let v27064 : System.Threading.CancellationToken option = None
                                                        let v27065 : (struct (string * string) []) = [||]
                                                        let v27066 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v27067 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v27068 : string option = None
                                                        let v27074 : Result<string, string> =
                                                            match v24801 with
                                                            | US12_1(v27071) -> (* Error *)
                                                                let v27072 : Result<string, string> = Error v27071 
                                                                v27072
                                                            | US12_0(v27069) -> (* Ok *)
                                                                let v27070 : Result<string, string> = Ok v27069 
                                                                v27070
                                                        let v27075 : string = "v27074.ok()"
                                                        let v27076 : string option = Fable.Core.RustInterop.emitRustExpr () v27075 
                                                        let v27077 : bool = true
                                                        let struct (v27078 : int32, v27079 : string) = method42(v27060, v27064, v27063, v27066, v27067, v27077, v27076)
                                                        let v27080 : int32 = v27063.Length
                                                        let v27081 : (string []) = Array.zeroCreate<string> (v27080)
                                                        let v27082 : Mut5 = {l0 = 0} : Mut5
                                                        while method45(v27080, v27082) do
                                                            let v27084 : int32 = v27082.l0
                                                            let struct (v27085 : string, v27086 : string) = v27063.[int v27084]
                                                            let v27087 : string = $"$env:{v27085}=''{v27086}''"
                                                            v27081.[int v27084] <- v27087
                                                            let v27088 : int32 = v27084 + 1
                                                            v27082.l0 <- v27088
                                                            ()
                                                        let v27089 : string seq = v27081 |> Seq.ofArray
                                                        let v27092 : (string -> (string seq -> string)) = String.concat
                                                        let v27093 : string = ";"
                                                        let v27094 : (string seq -> string) = v27092 v27093
                                                        let v27095 : string = v27094 v27089
                                                        let v27098 : string = $"pwsh -c '{v27095}; {v27060}'"
                                                        let v27099 : bool = v27078 = 0
                                                        let struct (v28205 : US1, v28206 : US1, v28207 : US1) =
                                                            if v27099 then
                                                                let v27100 : (string -> US1) = closure85()
                                                                let v27101 : (unit -> string) = closure155(v27079)
                                                                let v27102 : (exn -> US1) = closure156(v26163, v27079, v27098)
                                                                let v27103 : US1 = US1_1
                                                                let result = ref v27103
                                                                try
                                                                    result.Value <- v27101 () |> v27100 
                                                                with ex ->
                                                                    result.Value <- v27102 ex 
                                                                let v27104 : US1 = result.Value
                                                                let v27114 : string option =
                                                                    match v27104 with
                                                                    | US1_1 -> (* None *)
                                                                        let v27112 : string option = None
                                                                        v27112
                                                                    | US1_0(v27108) -> (* Some *)
                                                                        let v27109 : string option = Some v27108 
                                                                        v27109
                                                                let v27115 : string = "$0.unwrap()"
                                                                let v27116 : string = Fable.Core.RustInterop.emitRustExpr v27114 v27115 
                                                                let v27117 : US1 = US1_0(v22905)
                                                                let v27118 : US1 = US1_0(v27057)
                                                                let v27119 : US1 = US1_0(v27116)
                                                                struct (v27117, v27118, v27119)
                                                            else
                                                                let v27120 : unit = ()
                                                                let v27121 : (unit -> unit) = closure159(v26163, v27079, v27078, v27098)
                                                                let v27122 : unit = (fun () -> v27121 (); v27120) ()
                                                                let v28202 : US1 = US1_0(v22905)
                                                                let v28203 : US1 = US1_1
                                                                let v28204 : US1 = US1_1
                                                                struct (v28202, v28203, v28204)
                                                        struct (v28205, v28206, v28207)
                                                struct (v28208, v28209, v28210)
                                            else
                                                let v28211 : unit = ()
                                                let v28212 : (unit -> unit) = closure161(v34, v33)
                                                let v28213 : unit = (fun () -> v28212 (); v28211) ()
                                                let v29101 : US1 = US1_1
                                                let v29102 : US1 = US1_1
                                                let v29103 : US1 = US1_1
                                                struct (v29101, v29102, v29103)
                                        struct (v29104, v29105, v29106)
                                struct (v29107, v29108, v29109)
                        let v29116 : string =
                            match v29110 with
                            | US1_1 -> (* None *)
                                let v29114 : string = ""
                                v29114
                            | US1_0(v29113) -> (* Some *)
                                v29113
                        let v29117 : string = "extension"
                        let v29121 : string =
                            match v29111 with
                            | US1_1 -> (* None *)
                                let v29119 : string = ""
                                v29119
                            | US1_0(v29118) -> (* Some *)
                                v29118
                        let v29122 : string = "code"
                        let v29126 : string =
                            match v29112 with
                            | US1_1 -> (* None *)
                                let v29124 : string = ""
                                v29124
                            | US1_0(v29123) -> (* Some *)
                                v29123
                        let v29127 : string = "output"
                        [|struct (v29117, v29116); struct (v29122, v29121); struct (v29127, v29126)|]
        | _ ->
            let v29132 : string = "extension"
            let v29133 : string = ""
            let v29134 : string = "code"
            let v29135 : string = "output"
            [|struct (v29132, v29133); struct (v29134, v29133); struct (v29135, v29133)|]
    let v29138 : string = "$0.to_vec()"
    let v29139 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v29137 v29138 
    let v29140 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v29141 : (struct (string * string) -> (std_string_String * std_string_String)) = closure163()
    let v29142 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v29139, v29141) v29140 
    let v29143 : string = "std::collections::BTreeMap::from_iter(v29142.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v29144 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v29143 
    let v29145 : string = "serde_json::to_string(&v29144)"
    let v29146 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v29145 
    let v29147 : (serde_json_Error -> string) = method117()
    let v29148 : string = "$0.map_err(|x| $1(x))"
    let v29149 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v29146, v29147) v29148 
    let v29150 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v29151 : bool = Fable.Core.RustInterop.emitRustExpr v29149 v29150 
    let v29152 : string = "x"
    let v29153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v29152 
    let v29154 : string = "fable_library_rust::String_::fromString($0)"
    let v29155 : string = Fable.Core.RustInterop.emitRustExpr v29153 v29154 
    let v29156 : string = "true; $0 })"
    let v29157 : bool = Fable.Core.RustInterop.emitRustExpr v29155 v29156 
    let v29158 : string = "_result_map_"
    let v29159 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v29158 
    let v29160 : Result<string, string> = method118(v29159)
    let v29161 : string = ""
    let v29162 : string = "}"
    let v29163 : string = v29161 + v29162 
    let v29164 : string = "true; v29160 " + v29163 + "); " + v29161 + " // rust.fix_closure'"
    let v29165 : bool = Fable.Core.RustInterop.emitRustExpr () v29164 
    let v29166 : string = "__future_init"
    let v29167 : _ = Fable.Core.RustInterop.emitRustExpr () v29166 
    let v29168 : string = "v29167"
    let v29169 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v29168 
    v29169
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure6(v0)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v835 : clap_Command = method0()
    let v836 : string = "clap::Command::get_matches($0)"
    let v837 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v835 v836 
    let v838 : US0 = v19.l0
    let v839 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method12(v838, v837)
    let v840 : string = $"tokio::runtime::Builder::new_multi_thread().enable_all().build().unwrap()"
    let v841 : _ = Fable.Core.RustInterop.emitRustExpr () v840 
    let v842 : string = "v841.handle().block_on($0)"
    let v843 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v839 v842 
    let v844 : string = "$0.unwrap()"
    let v845 : string = Fable.Core.RustInterop.emitRustExpr v843 v844 
    let v846 : US0 = v19.l0
    let v847 : bool =
        match v846 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v847 then
        let v848 : unit = ()
        let v849 : (unit -> unit) = closure13(v845)
        let v850 : unit = (fun () -> v849 (); v848) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
