#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
#endif
type std_path_PathBuf = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
#endif
type std_path_Display = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Path")>]
#endif
type std_path_Path = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
#endif
type core_any_Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = unit
  type DataReceivedEventArgs = unit
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : string
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : US0
    | US2_1
and [<Struct>] US3 =
    | US3_0 of f0_0 : int64
    | US3_1
and [<Struct>] US4 =
    | US4_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : std_string_String
    | US5_1
and [<Struct>] US8 =
    | US8_0
    | US8_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : US8
    | US7_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : US7
    | US6_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : Vec<std_string_String>
    | US9_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
    | US10_2
and [<Struct>] US11 =
    | US11_0 of f0_0 : US10
    | US11_1 of f1_0 : US10
    | US11_2 of f2_0 : US10
    | US11_3 of f3_0 : US10
    | US11_4 of f4_0 : US10
and [<Struct>] US12 =
    | US12_0 of f0_0 : string
    | US12_1 of f1_0 : string
and [<Struct>] US13 =
    | US13_0
    | US13_1 of f1_0 : std_string_String
and [<Struct>] US14 =
    | US14_0 of f0_0 : string * f0_1 : US1
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH1
and [<Struct>] US16 =
    | US16_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US16_1 of f1_0 : string
and [<Struct>] US17 =
    | US17_0 of f0_0 : char
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : US1 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US17 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : US1 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : (string [])
    | US22_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US23 =
    | US23_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) * UH3
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : std_string_String
    | US26_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_process_Output
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : int32
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : System.Threading.CancellationToken
    | US32_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US34 =
    | US34_0 of f0_0 : string
    | US34_1 of f1_0 : string
and [<Struct>] US33 =
    | US33_0 of f0_0 : US34
    | US33_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US35_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : int32 * f0_1 : string
    | US36_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US37 =
    | US37_0 of f0_0 : std_collections_HashMap<string, string>
    | US37_1
and [<Struct>] US38 =
    | US38_0 of f0_0 : US1
    | US38_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US39 =
    | US39_0 of f0_0 : std_fs_FileType
    | US39_1 of f1_0 : std_string_String
and [<Struct>] US40 =
    | US40_0
    | US40_1
    | US40_2
and [<Struct>] US41 =
    | US41_0 of f0_0 : async_walkdir_DirEntry
    | US41_1 of f1_0 : std_string_String
and [<Struct>] US42 =
    | US42_0 of f0_0 : string * f0_1 : string
    | US42_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v60 : string list = []
    let v61 : string = "Poetry"
    let v62 : string list = v61 :: v60 
    let v65 : string = "Pip"
    let v66 : string list = v65 :: v62 
    let v69 : (string list -> (string [])) = List.toArray
    let v70 : (string []) = v69 v66
    let v73 : string = "$0.to_vec()"
    let v74 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v70 v73 
    let v75 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "x"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr () v77 
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "Box::new($0)"
    let v84 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "Box::leak($0)"
    let v86 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let v87 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v88 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : string = "true; $0 }).collect::<Vec<_>>()"
    let v90 : bool = Fable.Core.RustInterop.emitRustExpr v88 v89 
    let v91 : string = "_vec_map"
    let v92 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v94 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let v95 : string = "$0.value_parser($1)"
    let v96 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v94) v95 
    let v97 : string = "clap::Command::arg($0, $1)"
    let v98 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v96) v97 
    let v99 : string = "NAME"
    let v100 : string = "r#\"" + v99 + "\"#"
    let v101 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "VERSION"
    let v103 : string = "r#\"" + v102 + "\"#"
    let v104 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v101; v104|]
    let v106 : unativeint = 1 |> unativeint 
    let v109 : unativeint = 0 |> unativeint 
    let v112 : bool = v109 = v109 
    let v120 : clap_builder_ValueRange =
        if v112 then
            let v115 : string = "clap::builder::ValueRange::new($0..)"
            let v116 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v106 v115 
            v116
        else
            let v117 : string = ""
            let v118 : string = "clap::builder::ValueRange::new($0.." + v117 + "$1)"
            let v119 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v106, v109) v118 
            v119
    let v121 : string = "deps"
    let v122 : string = "r#\"" + v121 + "\"#"
    let v123 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v122 
    let v124 : string = "clap::Arg::new($0)"
    let v125 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v123 v124 
    let v126 : string = "$0.short($1)"
    let v127 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v125, 'd') v126 
    let v128 : string = "r#\"" + v121 + "\"#"
    let v129 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v128 
    let v130 : string = "$0.long($1)"
    let v131 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v127, v129) v130 
    let v132 : string = "$0.to_vec()"
    let v133 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v105 v132 
    let v134 : string = "$0.value_names($1)"
    let v135 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v131, v133) v134 
    let v136 : string = "$0.num_args($1)"
    let v137 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v135, v120) v136 
    let v138 : string = "clap::ArgAction::Append"
    let v139 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v138 
    let v140 : string = "$0.action($1)"
    let v141 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v137, v139) v140 
    let v142 : string = "clap::Command::arg($0, $1)"
    let v143 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v98, v141) v142 
    let v144 : string = "clap::Command::subcommand($0, v143)"
    let v145 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v144 
    let v146 : string = "fable"
    let v147 : string = "r#\"" + v146 + "\"#"
    let v148 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : string = "clap::Command::new($0)"
    let v150 : clap_Command = Fable.Core.RustInterop.emitRustExpr v148 v149 
    let v151 : string = "fs-path"
    let v152 : string = "r#\"" + v151 + "\"#"
    let v153 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = "clap::Arg::new($0)"
    let v155 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v153 v154 
    let v156 : string = "$0.short($1)"
    let v157 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v155, 'f') v156 
    let v158 : string = "r#\"" + v151 + "\"#"
    let v159 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v158 
    let v160 : string = "$0.long($1)"
    let v161 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v157, v159) v160 
    let v162 : string = "$0.required($1)"
    let v163 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v161, true) v162 
    let v164 : string = "clap::Command::arg($0, $1)"
    let v165 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v150, v163) v164 
    let v166 : string = "r#\"" + v0 + "\"#"
    let v167 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v166 
    let v168 : string = "clap::Arg::new($0)"
    let v169 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v167 v168 
    let v170 : string = "$0.short($1)"
    let v171 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v169, 'c') v170 
    let v172 : string = "r#\"" + v0 + "\"#"
    let v173 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v172 
    let v174 : string = "$0.long($1)"
    let v175 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v171, v173) v174 
    let v176 : string = "clap::Command::arg($0, $1)"
    let v177 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v165, v175) v176 
    let v178 : string = "clap::Command::subcommand($0, v177)"
    let v179 : clap_Command = Fable.Core.RustInterop.emitRustExpr v145 v178 
    let v180 : string = "rust"
    let v181 : string = "r#\"" + v180 + "\"#"
    let v182 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v181 
    let v183 : string = "clap::Command::new($0)"
    let v184 : clap_Command = Fable.Core.RustInterop.emitRustExpr v182 v183 
    let v185 : string = "r#\"" + v151 + "\"#"
    let v186 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v185 
    let v187 : string = "clap::Arg::new($0)"
    let v188 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v186 v187 
    let v189 : string = "$0.short($1)"
    let v190 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v188, 'f') v189 
    let v191 : string = "r#\"" + v151 + "\"#"
    let v192 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v191 
    let v193 : string = "$0.long($1)"
    let v194 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v190, v192) v193 
    let v195 : string = "$0.required($1)"
    let v196 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v194, true) v195 
    let v197 : string = "clap::Command::arg($0, $1)"
    let v198 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v184, v196) v197 
    let v199 : string = "r#\"" + v99 + "\"#"
    let v200 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v199 
    let v201 : string = "r#\"" + v102 + "\"#"
    let v202 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v201 
    let v203 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v200; v202|]
    let v204 : unativeint = 1 |> unativeint 
    let v207 : unativeint = 0 |> unativeint 
    let v210 : bool = v207 = v207 
    let v218 : clap_builder_ValueRange =
        if v210 then
            let v213 : string = "clap::builder::ValueRange::new($0..)"
            let v214 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v204 v213 
            v214
        else
            let v215 : string = ""
            let v216 : string = "clap::builder::ValueRange::new($0.." + v215 + "$1)"
            let v217 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v204, v207) v216 
            v217
    let v219 : string = "r#\"" + v121 + "\"#"
    let v220 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v219 
    let v221 : string = "clap::Arg::new($0)"
    let v222 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v220 v221 
    let v223 : string = "$0.short($1)"
    let v224 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v222, 'd') v223 
    let v225 : string = "r#\"" + v121 + "\"#"
    let v226 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v225 
    let v227 : string = "$0.long($1)"
    let v228 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v224, v226) v227 
    let v229 : string = "$0.to_vec()"
    let v230 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v203 v229 
    let v231 : string = "$0.value_names($1)"
    let v232 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v228, v230) v231 
    let v233 : string = "$0.num_args($1)"
    let v234 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v232, v218) v233 
    let v235 : string = "clap::ArgAction::Append"
    let v236 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v235 
    let v237 : string = "$0.action($1)"
    let v238 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v234, v236) v237 
    let v239 : string = "clap::Command::arg($0, $1)"
    let v240 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v198, v238) v239 
    let v241 : unativeint = 0 |> unativeint 
    let v244 : unativeint = 1 |> unativeint 
    let v247 : bool = v244 = v241 
    let v255 : clap_builder_ValueRange =
        if v247 then
            let v250 : string = "clap::builder::ValueRange::new($0..)"
            let v251 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v241 v250 
            v251
        else
            let v252 : string = "="
            let v253 : string = "clap::builder::ValueRange::new($0.." + v252 + "$1)"
            let v254 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v241, v244) v253 
            v254
    let v256 : string = "wasm"
    let v257 : string = "r#\"" + v256 + "\"#"
    let v258 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "clap::Arg::new($0)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v258 v259 
    let v261 : string = "$0.short($1)"
    let v262 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, 'w') v261 
    let v263 : string = "r#\"" + v256 + "\"#"
    let v264 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v263 
    let v265 : string = "$0.long($1)"
    let v266 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v262, v264) v265 
    let v267 : string = "$0.num_args($1)"
    let v268 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v266, v255) v267 
    let v269 : string = "$0.require_equals($1)"
    let v270 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v268, true) v269 
    let v271 : string = ""
    let v272 : string = "r#\"" + v271 + "\"#"
    let v273 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v272 
    let v274 : string = "$0.default_missing_value($1)"
    let v275 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v270, v273) v274 
    let v276 : string = "clap::Command::arg($0, $1)"
    let v277 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v240, v275) v276 
    let v278 : unativeint = 0 |> unativeint 
    let v281 : unativeint = 1 |> unativeint 
    let v284 : bool = v281 = v278 
    let v292 : clap_builder_ValueRange =
        if v284 then
            let v287 : string = "clap::builder::ValueRange::new($0..)"
            let v288 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v278 v287 
            v288
        else
            let v289 : string = "="
            let v290 : string = "clap::builder::ValueRange::new($0.." + v289 + "$1)"
            let v291 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v278, v281) v290 
            v291
    let v293 : string = "contract"
    let v294 : string = "r#\"" + v293 + "\"#"
    let v295 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v294 
    let v296 : string = "clap::Arg::new($0)"
    let v297 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v295 v296 
    let v298 : string = "$0.short($1)"
    let v299 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v297, 'c') v298 
    let v300 : string = "r#\"" + v293 + "\"#"
    let v301 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v300 
    let v302 : string = "$0.long($1)"
    let v303 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v299, v301) v302 
    let v304 : string = "$0.num_args($1)"
    let v305 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v303, v292) v304 
    let v306 : string = "$0.require_equals($1)"
    let v307 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v305, true) v306 
    let v308 : string = "r#\"" + v271 + "\"#"
    let v309 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v308 
    let v310 : string = "$0.default_missing_value($1)"
    let v311 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v307, v309) v310 
    let v312 : string = "clap::Command::arg($0, $1)"
    let v313 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v277, v311) v312 
    let v314 : string = "clap::Command::subcommand($0, v313)"
    let v315 : clap_Command = Fable.Core.RustInterop.emitRustExpr v179 v314 
    let v316 : string = "typescript"
    let v317 : string = "r#\"" + v316 + "\"#"
    let v318 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v317 
    let v319 : string = "clap::Command::new($0)"
    let v320 : clap_Command = Fable.Core.RustInterop.emitRustExpr v318 v319 
    let v321 : string = "r#\"" + v151 + "\"#"
    let v322 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v321 
    let v323 : string = "clap::Arg::new($0)"
    let v324 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v322 v323 
    let v325 : string = "$0.short($1)"
    let v326 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v324, 'f') v325 
    let v327 : string = "r#\"" + v151 + "\"#"
    let v328 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v327 
    let v329 : string = "$0.long($1)"
    let v330 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v326, v328) v329 
    let v331 : string = "$0.required($1)"
    let v332 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v330, true) v331 
    let v333 : string = "clap::Command::arg($0, $1)"
    let v334 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v320, v332) v333 
    let v335 : string = "r#\"" + v99 + "\"#"
    let v336 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v335 
    let v337 : string = "r#\"" + v102 + "\"#"
    let v338 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v337 
    let v339 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v336; v338|]
    let v340 : unativeint = 1 |> unativeint 
    let v343 : unativeint = 0 |> unativeint 
    let v346 : bool = v343 = v343 
    let v353 : clap_builder_ValueRange =
        if v346 then
            let v349 : string = "clap::builder::ValueRange::new($0..)"
            let v350 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v340 v349 
            v350
        else
            let v351 : string = "clap::builder::ValueRange::new($0.." + v271 + "$1)"
            let v352 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v340, v343) v351 
            v352
    let v354 : string = "r#\"" + v121 + "\"#"
    let v355 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v354 
    let v356 : string = "clap::Arg::new($0)"
    let v357 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v355 v356 
    let v358 : string = "$0.short($1)"
    let v359 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v357, 'd') v358 
    let v360 : string = "r#\"" + v121 + "\"#"
    let v361 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v360 
    let v362 : string = "$0.long($1)"
    let v363 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v359, v361) v362 
    let v364 : string = "$0.to_vec()"
    let v365 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v339 v364 
    let v366 : string = "$0.value_names($1)"
    let v367 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v363, v365) v366 
    let v368 : string = "$0.num_args($1)"
    let v369 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v367, v353) v368 
    let v370 : string = "clap::ArgAction::Append"
    let v371 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v370 
    let v372 : string = "$0.action($1)"
    let v373 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v369, v371) v372 
    let v374 : string = "clap::Command::arg($0, $1)"
    let v375 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v334, v373) v374 
    let v376 : string = "clap::Command::subcommand($0, v375)"
    let v377 : clap_Command = Fable.Core.RustInterop.emitRustExpr v315 v376 
    let v378 : string = "python"
    let v379 : string = "r#\"" + v378 + "\"#"
    let v380 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v379 
    let v381 : string = "clap::Command::new($0)"
    let v382 : clap_Command = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let v383 : string = "r#\"" + v151 + "\"#"
    let v384 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v383 
    let v385 : string = "clap::Arg::new($0)"
    let v386 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let v387 : string = "$0.short($1)"
    let v388 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v386, 'f') v387 
    let v389 : string = "r#\"" + v151 + "\"#"
    let v390 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v389 
    let v391 : string = "$0.long($1)"
    let v392 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v388, v390) v391 
    let v393 : string = "$0.required($1)"
    let v394 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v392, true) v393 
    let v395 : string = "clap::Command::arg($0, $1)"
    let v396 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v382, v394) v395 
    let v397 : string = "r#\"" + v99 + "\"#"
    let v398 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v397 
    let v399 : string = "r#\"" + v102 + "\"#"
    let v400 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v399 
    let v401 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v398; v400|]
    let v402 : unativeint = 1 |> unativeint 
    let v405 : unativeint = 0 |> unativeint 
    let v408 : bool = v405 = v405 
    let v415 : clap_builder_ValueRange =
        if v408 then
            let v411 : string = "clap::builder::ValueRange::new($0..)"
            let v412 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v402 v411 
            v412
        else
            let v413 : string = "clap::builder::ValueRange::new($0.." + v271 + "$1)"
            let v414 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v402, v405) v413 
            v414
    let v416 : string = "r#\"" + v121 + "\"#"
    let v417 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v416 
    let v418 : string = "clap::Arg::new($0)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v417 v418 
    let v420 : string = "$0.short($1)"
    let v421 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v419, 'd') v420 
    let v422 : string = "r#\"" + v121 + "\"#"
    let v423 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v422 
    let v424 : string = "$0.long($1)"
    let v425 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v421, v423) v424 
    let v426 : string = "$0.to_vec()"
    let v427 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v401 v426 
    let v428 : string = "$0.value_names($1)"
    let v429 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v425, v427) v428 
    let v430 : string = "$0.num_args($1)"
    let v431 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v429, v415) v430 
    let v432 : string = "clap::ArgAction::Append"
    let v433 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v432 
    let v434 : string = "$0.action($1)"
    let v435 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v431, v433) v434 
    let v436 : string = "clap::Command::arg($0, $1)"
    let v437 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v396, v435) v436 
    let v438 : string = "clap::Command::subcommand($0, v437)"
    let v439 : clap_Command = Fable.Core.RustInterop.emitRustExpr v377 v438 
    let v440 : string = "dib"
    let v441 : string = "r#\"" + v440 + "\"#"
    let v442 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v441 
    let v443 : string = "clap::Command::new($0)"
    let v444 : clap_Command = Fable.Core.RustInterop.emitRustExpr v442 v443 
    let v445 : string = "path"
    let v446 : string = "r#\"" + v445 + "\"#"
    let v447 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v446 
    let v448 : string = "clap::Arg::new($0)"
    let v449 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v447 v448 
    let v450 : string = "$0.short($1)"
    let v451 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v449, 'p') v450 
    let v452 : string = "r#\"" + v445 + "\"#"
    let v453 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v452 
    let v454 : string = "$0.long($1)"
    let v455 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v451, v453) v454 
    let v456 : string = "$0.required($1)"
    let v457 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v455, true) v456 
    let v458 : string = "clap::Command::arg($0, $1)"
    let v459 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v444, v457) v458 
    let v460 : string = "u8"
    let v461 : string = "clap::value_parser!(" + v460 + ").into()"
    let v462 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v461 
    let v463 : string = "retries"
    let v464 : string = "r#\"" + v463 + "\"#"
    let v465 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v464 
    let v466 : string = "clap::Arg::new($0)"
    let v467 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v465 v466 
    let v468 : string = "$0.short($1)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v467, 'r') v468 
    let v470 : string = "r#\"" + v463 + "\"#"
    let v471 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v470 
    let v472 : string = "$0.long($1)"
    let v473 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v469, v471) v472 
    let v474 : string = "$0.value_parser($1)"
    let v475 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v473, v462) v474 
    let v476 : string = "clap::Command::arg($0, $1)"
    let v477 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v459, v475) v476 
    let v478 : string = "working-directory"
    let v479 : string = "r#\"" + v478 + "\"#"
    let v480 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v479 
    let v481 : string = "clap::Arg::new($0)"
    let v482 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v480 v481 
    let v483 : string = "$0.short($1)"
    let v484 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v482, 'w') v483 
    let v485 : string = "r#\"" + v478 + "\"#"
    let v486 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v485 
    let v487 : string = "$0.long($1)"
    let v488 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v484, v486) v487 
    let v489 : string = "clap::Command::arg($0, $1)"
    let v490 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v477, v488) v489 
    let v491 : string = "clap::Command::subcommand($0, v490)"
    let v492 : clap_Command = Fable.Core.RustInterop.emitRustExpr v439 v491 
    v492
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method2 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method4 () : string =
    let v0 : string = ""
    v0
and closure3 (v0 : US1 option ref) (v1 : US1 option) : US1 option ref =
    v0.Value <- v1 
    v0
and closure4 (v0 : string option, v1 : (US1 option -> US1 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : string = x
    let v3 : US1 = US1_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method3 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::env::var(&*$0)"
    let v3 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "fable_library_rust::String_::fromString($0)"
    let v9 : string = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_result_map_"
    let v13 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = method4()
    let v15 : string = "$0.unwrap_or($1)"
    let v16 : string = Fable.Core.RustInterop.emitRustExpr struct (v13, v14) v15 
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "std::env::var(&*$0)"
    let v18 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "x"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = "fable_library_rust::String_::fromString($0)"
    let v24 : string = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "true; $0 })"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "_result_map_"
    let v28 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = method4()
    let v30 : string = "$0.unwrap_or($1)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr struct (v28, v29) v30 
    let _v1 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "std::env::var(&*$0)"
    let v33 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "x"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "true; $0 })"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "_result_map_"
    let v43 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = method4()
    let v45 : string = "$0.unwrap_or($1)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr struct (v43, v44) v45 
    let _v1 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "process.env[$0] ?? \"\""
    let v48 : string = Fable.Core.JsInterop.emitJsExpr v0 v47 
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = "os"
    let v50 : IOsEnviron = Fable.Core.PyInterop.importAll v49 
    let v51 : string = "v50.environ"
    let v52 : obj = Fable.Core.PyInterop.emitPyExpr () v51 
    let v55 : string = "v52.get($0)"
    let v56 : string = Fable.Core.PyInterop.emitPyExpr v0 v55 
    let mutable _v56 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v59 : (string -> string option) = Option.ofObj
    let v60 : string option = v59 v56
    v60 
    #else
    Some v56 
    #endif
    |> fun x -> _v56 <- Some x
    let v61 : string option = match _v56 with Some x -> x | None -> failwith "optionm'.of_obj / _v56=None"
    let v64 : US1 option = None
    let _v64 = ref v64 
    let v65 : US1 option ref = _v64 
    let v66 : (US1 option -> US1 option ref) = closure3(v65)
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure4(v61, v66)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : US1 option = _v64.Value 
    let v83 : US1 = US1_1
    let v84 : US1 = v72 |> Option.defaultValue v83 
    let v91 : string =
        match v84 with
        | US1_1 -> (* None *)
            let v89 : string = ""
            v89
        | US1_0(v88) -> (* Some *)
            v88
    let _v1 = v91 
    #endif
#else
    let v92 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v93 : string = v92 v0
    let mutable _v93 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v94 : (string -> string option) = Option.ofObj
    let v95 : string option = v94 v93
    v95 
    #else
    Some v93 
    #endif
    |> fun x -> _v93 <- Some x
    let v96 : string option = match _v93 with Some x -> x | None -> failwith "optionm'.of_obj / _v93=None"
    let v99 : US1 option = None
    let _v99 = ref v99 
    let v100 : US1 option ref = _v99 
    let v101 : (US1 option -> US1 option ref) = closure3(v100)
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure4(v96, v101)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v107 : US1 option = _v99.Value 
    let v118 : US1 = US1_1
    let v119 : US1 = v107 |> Option.defaultValue v118 
    let v126 : string =
        match v119 with
        | US1_1 -> (* None *)
            let v124 : string = ""
            v124
        | US1_0(v123) -> (* Some *)
            v123
    let _v1 = v126 
    #endif
    let v127 : string = _v1 
    v127
and method5 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure5 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method2()
    let v3 : string = method3(v2)
    
    
    
    
    
    let v4 : bool = "Verbose" = v3
    let v8 : US2 =
        if v4 then
            let v5 : US0 = US0_0
            US2_0(v5)
        else
            US2_1
    let v49 : US2 =
        match v8 with
        | US2_1 -> (* None *)
            let v11 : bool = "Debug" = v3
            let v15 : US2 =
                if v11 then
                    let v12 : US0 = US0_1
                    US2_0(v12)
                else
                    US2_1
            match v15 with
            | US2_1 -> (* None *)
                let v18 : bool = "Info" = v3
                let v22 : US2 =
                    if v18 then
                        let v19 : US0 = US0_2
                        US2_0(v19)
                    else
                        US2_1
                match v22 with
                | US2_1 -> (* None *)
                    let v25 : bool = "Warning" = v3
                    let v29 : US2 =
                        if v25 then
                            let v26 : US0 = US0_3
                            US2_0(v26)
                        else
                            US2_1
                    match v29 with
                    | US2_1 -> (* None *)
                        let v32 : bool = "Critical" = v3
                        let v36 : US2 =
                            if v32 then
                                let v33 : US0 = US0_4
                                US2_0(v33)
                            else
                                US2_1
                        match v36 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v37) -> (* Some *)
                            US2_0(v37)
                    | US2_0(v30) -> (* Some *)
                        US2_0(v30)
                | US2_0(v23) -> (* Some *)
                    US2_0(v23)
            | US2_0(v16) -> (* Some *)
                US2_0(v16)
        | US2_0(v9) -> (* Some *)
            US2_0(v9)
    let v50 : string = method5()
    let v51 : string = method3(v50)
    let v52 : bool = v51 = "True"
    let v62 : US3 =
        if v52 then
            let v53 : System.DateTime = System.DateTime.Now
            let v56 : (System.DateTime -> int64) = _.Ticks
            let v57 : int64 = v56 v53
            US3_0(v57)
        else
            US3_1
    let _v1 = struct (v49, v62) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : US2 = US2_1
    let v64 : US3 = US3_1
    let _v1 = struct (v63, v64) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "AUTOMATION"
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "env!(\"" + v65 + "\")"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "env!(\"" + v65 + "\")"
    let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _v66 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "env!(\"" + v65 + "\")"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _v66 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = null |> unbox<string>
    let _v66 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : string = null |> unbox<string>
    let _v66 = v88 
    #endif
#else
    let v91 : string = null |> unbox<string>
    let _v66 = v91 
    #endif
    let v94 : string = _v66 
    let v99 : string = "True"
    let v100 : bool = v94 <> v99 
    let v109 : US3 =
        if v100 then
            US3_1
        else
            let v104 : string = $"near_sdk::env::block_timestamp()"
            let v105 : uint64 = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : (uint64 -> int64) = int64
            let v107 : int64 = v106 v105
            US3_0(v107)
    let v110 : US2 = US2_1
    let _v1 = struct (v110, v109) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : string = method2()
    let v112 : string = method3(v111)
    
    
    
    
    
    let v113 : bool = "Verbose" = v112
    let v117 : US2 =
        if v113 then
            let v114 : US0 = US0_0
            US2_0(v114)
        else
            US2_1
    let v158 : US2 =
        match v117 with
        | US2_1 -> (* None *)
            let v120 : bool = "Debug" = v112
            let v124 : US2 =
                if v120 then
                    let v121 : US0 = US0_1
                    US2_0(v121)
                else
                    US2_1
            match v124 with
            | US2_1 -> (* None *)
                let v127 : bool = "Info" = v112
                let v131 : US2 =
                    if v127 then
                        let v128 : US0 = US0_2
                        US2_0(v128)
                    else
                        US2_1
                match v131 with
                | US2_1 -> (* None *)
                    let v134 : bool = "Warning" = v112
                    let v138 : US2 =
                        if v134 then
                            let v135 : US0 = US0_3
                            US2_0(v135)
                        else
                            US2_1
                    match v138 with
                    | US2_1 -> (* None *)
                        let v141 : bool = "Critical" = v112
                        let v145 : US2 =
                            if v141 then
                                let v142 : US0 = US0_4
                                US2_0(v142)
                            else
                                US2_1
                        match v145 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v146) -> (* Some *)
                            US2_0(v146)
                    | US2_0(v139) -> (* Some *)
                        US2_0(v139)
                | US2_0(v132) -> (* Some *)
                    US2_0(v132)
            | US2_0(v125) -> (* Some *)
                US2_0(v125)
        | US2_0(v118) -> (* Some *)
            US2_0(v118)
    let v159 : string = method5()
    let v160 : string = method3(v159)
    let v161 : bool = v160 = "True"
    let v171 : US3 =
        if v161 then
            let v162 : System.DateTime = System.DateTime.Now
            let v165 : (System.DateTime -> int64) = _.Ticks
            let v166 : int64 = v165 v162
            US3_0(v166)
        else
            US3_1
    let _v1 = struct (v158, v171) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : string = method2()
    let v173 : string = method3(v172)
    
    
    
    
    
    let v174 : bool = "Verbose" = v173
    let v178 : US2 =
        if v174 then
            let v175 : US0 = US0_0
            US2_0(v175)
        else
            US2_1
    let v219 : US2 =
        match v178 with
        | US2_1 -> (* None *)
            let v181 : bool = "Debug" = v173
            let v185 : US2 =
                if v181 then
                    let v182 : US0 = US0_1
                    US2_0(v182)
                else
                    US2_1
            match v185 with
            | US2_1 -> (* None *)
                let v188 : bool = "Info" = v173
                let v192 : US2 =
                    if v188 then
                        let v189 : US0 = US0_2
                        US2_0(v189)
                    else
                        US2_1
                match v192 with
                | US2_1 -> (* None *)
                    let v195 : bool = "Warning" = v173
                    let v199 : US2 =
                        if v195 then
                            let v196 : US0 = US0_3
                            US2_0(v196)
                        else
                            US2_1
                    match v199 with
                    | US2_1 -> (* None *)
                        let v202 : bool = "Critical" = v173
                        let v206 : US2 =
                            if v202 then
                                let v203 : US0 = US0_4
                                US2_0(v203)
                            else
                                US2_1
                        match v206 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v207) -> (* Some *)
                            US2_0(v207)
                    | US2_0(v200) -> (* Some *)
                        US2_0(v200)
                | US2_0(v193) -> (* Some *)
                    US2_0(v193)
            | US2_0(v186) -> (* Some *)
                US2_0(v186)
        | US2_0(v179) -> (* Some *)
            US2_0(v179)
    let v220 : string = method5()
    let v221 : string = method3(v220)
    let v222 : bool = v221 = "True"
    let v232 : US3 =
        if v222 then
            let v223 : System.DateTime = System.DateTime.Now
            let v226 : (System.DateTime -> int64) = _.Ticks
            let v227 : int64 = v226 v223
            US3_0(v227)
        else
            US3_1
    let _v1 = struct (v219, v232) 
    #endif
#else
    let v233 : string = method2()
    let v234 : string = method3(v233)
    
    
    
    
    
    let v235 : bool = "Verbose" = v234
    let v239 : US2 =
        if v235 then
            let v236 : US0 = US0_0
            US2_0(v236)
        else
            US2_1
    let v280 : US2 =
        match v239 with
        | US2_1 -> (* None *)
            let v242 : bool = "Debug" = v234
            let v246 : US2 =
                if v242 then
                    let v243 : US0 = US0_1
                    US2_0(v243)
                else
                    US2_1
            match v246 with
            | US2_1 -> (* None *)
                let v249 : bool = "Info" = v234
                let v253 : US2 =
                    if v249 then
                        let v250 : US0 = US0_2
                        US2_0(v250)
                    else
                        US2_1
                match v253 with
                | US2_1 -> (* None *)
                    let v256 : bool = "Warning" = v234
                    let v260 : US2 =
                        if v256 then
                            let v257 : US0 = US0_3
                            US2_0(v257)
                        else
                            US2_1
                    match v260 with
                    | US2_1 -> (* None *)
                        let v263 : bool = "Critical" = v234
                        let v267 : US2 =
                            if v263 then
                                let v264 : US0 = US0_4
                                US2_0(v264)
                            else
                                US2_1
                        match v267 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v268) -> (* Some *)
                            US2_0(v268)
                    | US2_0(v261) -> (* Some *)
                        US2_0(v261)
                | US2_0(v254) -> (* Some *)
                    US2_0(v254)
            | US2_0(v247) -> (* Some *)
                US2_0(v247)
        | US2_0(v240) -> (* Some *)
            US2_0(v240)
    let v281 : string = method5()
    let v282 : string = method3(v281)
    let v283 : bool = v282 = "True"
    let v293 : US3 =
        if v283 then
            let v284 : System.DateTime = System.DateTime.Now
            let v287 : (System.DateTime -> int64) = _.Ticks
            let v288 : int64 = v287 v284
            US3_0(v288)
        else
            US3_1
    let _v1 = struct (v280, v293) 
    #endif
    let struct (v294 : US2, v295 : US3) = _v1 
    let v359 : Mut0 = {l0 = 0L} : Mut0
    let v360 : (string -> unit) = closure5()
    let v361 : Mut1 = {l0 = v360} : Mut1
    let v362 : Mut2 = {l0 = true} : Mut2
    let v363 : string = ""
    let v364 : Mut3 = {l0 = v363} : Mut3
    let v367 : US0 =
        match v294 with
        | US2_1 -> (* None *)
            v0
        | US2_0(v365) -> (* Some *)
            v365
    let v368 : Mut4 = {l0 = v367} : Mut4
    let v375 : int64 option =
        match v295 with
        | US3_1 -> (* None *)
            let v373 : int64 option = None
            v373
        | US3_0(v369) -> (* Some *)
            let v370 : int64 option = Some v369 
            v370
    struct (v359, v361, v362, v364, v368, v375)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v8 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v8 
        ()
and closure7 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure8 (v0 : US3 option ref) (v1 : US3 option) : US3 option ref =
    v0.Value <- v1 
    v0
and closure9 (v0 : int64 option, v1 : (US3 option -> US3 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : int64 = x
    let v3 : US3 = US3_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method6 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method7 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method9 () : string =
    let v0 : string = ""
    v0
and closure10 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and closure12 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure11 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure12(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and closure6 (v0 : (string [])) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 1 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Debug"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_blue"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[94m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[94m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[94m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "args"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"%A{v0}"
        let v669 : string = $"{v666}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure10(v638, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = " }"
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure10(v638, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = v638.l0
        let v687 : string = $"spiral_builder.main"
        let v688 : bool = v687 = ""
        let v745 : string =
            if v688 then
                let v689 : string = ""
                v689
            else
                let v690 : string = $"{v495} {v630} #{v636} %s{v687} / {v686}"
                let v693 : char list = []
                let v694 : (char list -> (char [])) = List.toArray
                let v695 : (char []) = v694 v693
                let v698 : string = v690.TrimStart v695 
                let v716 : char list = []
                let v717 : char list = '/' :: v716 
                let v720 : char list = ' ' :: v717 
                let v723 : (char list -> (char [])) = List.toArray
                let v724 : (char []) = v723 v720
                let v727 : string = v698.TrimEnd v724 
                v727
        let v746 : (string -> unit) = closure11()
        let v747 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v748 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v748 
        let _v747 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v749 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v749 
        let _v747 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v750 : string = v20.l0
        let v751 : bool = v750 = ""
        let v759 : string =
            if v751 then
                v745
            else
                let v752 : bool = v745 = ""
                if v752 then
                    let v753 : string = v20.l0
                    v753
                else
                    let v754 : string = v20.l0
                    let v755 : string = "\n"
                    let v756 : string = v754 + v755 
                    let v757 : string = v756 + v745 
                    v757
        let v760 : string = "&*$0"
        let v761 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v759 v760 
        let v762 : string = $"$0.chars()"
        let v763 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v761 v762 
        let v764 : string = "v763"
        let v765 : _ = Fable.Core.RustInterop.emitRustExpr () v764 
        let v766 : string = "v765.collect::<Vec<_>>()"
        let v767 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v766 
        let v768 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v769 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v767 v768 
        let v770 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v771 : bool = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let v772 : string = "x"
        let v773 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "String::from_iter($0)"
        let v775 : std_string_String = Fable.Core.RustInterop.emitRustExpr v773 v774 
        let v776 : string = "true; $0 }).collect::<Vec<_>>()"
        let v777 : bool = Fable.Core.RustInterop.emitRustExpr v775 v776 
        let v778 : string = "_vec_map"
        let v779 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v778 
        let v780 : string = "$0.len()"
        let v781 : unativeint = Fable.Core.RustInterop.emitRustExpr v779 v780 
        let v782 : (unativeint -> int32) = int32
        let v783 : int32 = v782 v781
        let v784 : string = ""
        let v785 : bool = v745 <> v784 
        let v789 : bool =
            if v785 then
                let v788 : bool = v783 <= 1
                v788
            else
                false
        if v789 then
            v20.l0 <- v759
            ()
        else
            v20.l0 <- v784
            let v790 : string = "true; $0.into_iter().for_each(|x| { //"
            let v791 : bool = Fable.Core.RustInterop.emitRustExpr v779 v790 
            let v792 : string = "x"
            let v793 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v793 v794 
            let v795 : string = $"true;"
            let v796 : bool = Fable.Core.RustInterop.emitRustExpr () v795 
            let v797 : string = "true; }}); { //"
            let v798 : bool = Fable.Core.RustInterop.emitRustExpr () v797 
            ()
        let _v747 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v746 v745
        let _v747 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v746 v745
        let _v747 = () 
        #endif
#else
        v746 v745
        let _v747 = () 
        #endif
        _v747 
        let v799 : (string -> unit) = v18.l0
        v799 v745
and closure13 () (v0 : Ref<Str>) : std_string_String =
    let v1 : string = "String::from($0)"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure14 (v0 : US4 option ref) (v1 : US4 option) : US4 option ref =
    v0.Value <- v1 
    v0
and closure15 (v0 : struct (std_string_String * clap_ArgMatches) option, v1 : (US4 option -> US4 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v2 : std_string_String, v3 : clap_ArgMatches) = x
    let v4 : US4 = US4_0(v2, v3)
    v4 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method11 () : string =
    let v0 : string = "py-path"
    v0
and closure16 (v0 : US5 option ref) (v1 : US5 option) : US5 option ref =
    v0.Value <- v1 
    v0
and closure17 (v0 : std_string_String option, v1 : (US5 option -> US5 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_string_String = x
    let v3 : US5 = US5_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method12 () : string =
    let v0 : string = "env"
    v0
and method13 () : string =
    let v0 : string = "deps"
    v0
and closure18 (v0 : US9 option ref) (v1 : US9 option) : US9 option ref =
    v0.Value <- v1 
    v0
and closure19 (v0 : Vec<std_string_String> option, v1 : (US9 option -> US9 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : Vec<std_string_String> = x
    let v3 : US9 = US9_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method14 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method17 (v0 : string) : string =
    v0
and method16 (v0 : string, v1 : string) : struct (string * string) =
    let v2 : string = method17(v0)
    struct (v1, v2)
and method15 (v0 : string, v1 : string) : string =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "String::from($0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "std::path::PathBuf::from($0)"
    let v8 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v9 
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "$0.join($1)"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v8, v12) v13 
    let v15 : string = "$0.display()"
    let v16 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : string = "format!(\"{}\", $0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v18 
    let _v17 = v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = "format!(\"{}\", $0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v20 
    let _v17 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : string = "format!(\"{}\", $0)"
    let v23 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v22 
    let _v17 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v27 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v30 
    #endif
    let v33 : std_string_String = _v17 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v33 v38 
    let _v2 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : US10 = US10_1
    let v41 : US11 = US11_2(v40)
    let v42 : string = $"file_system.(</>) / target: {v41} / a: {v0} / b: {v1}"
    let v43 : string = failwith<string> v42
    let _v2 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = null |> unbox<string>
    let _v2 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "path"
    let v48 : IPathJoin = Fable.Core.JsInterop.importAll v47 
    let struct (v49 : string, v50 : string) = method16(v1, v0)
    let v51 : string = "v48.join($0, $1)"
    let v52 : string = Fable.Core.JsInterop.emitJsExpr struct (v49, v50) v51 
    let _v2 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : US10 = US10_0
    let v54 : US11 = US11_4(v53)
    let v55 : string = $"file_system.(</>) / target: {v54} / a: {v0} / b: {v1}"
    let v56 : string = failwith<string> v55
    let _v2 = v56 
    #endif
#else
    let v57 : string = System.IO.Path.Combine (v0, v1)
    let _v2 = v57 
    #endif
    let v58 : string = _v2 
    v58
and method19 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v15 : bool =
        if v9 then
            true
        else
            let v10 : string = "$0.is_dir()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            if v11 then
                true
            else
                let v12 : string = "$0.is_symlink()"
                let v13 : bool = Fable.Core.RustInterop.emitRustExpr v7 v12 
                v13
    let _v1 = v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : bool = null |> unbox<bool>
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : bool = null |> unbox<bool>
    let _v1 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22 : string = "fs"
    let v23 : IFsExistsSync = Fable.Core.JsInterop.importAll v22 
    let v24 : string = "$0.existsSync($1)"
    let v25 : bool = Fable.Core.JsInterop.emitJsExpr struct (v23, v0) v24 
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : bool = null |> unbox<bool>
    let _v1 = v26 
    #endif
#else
    let v29 : (string -> bool) = System.IO.Directory.Exists
    let v30 : bool = v29 v0
    let _v1 = v30 
    #endif
    let v31 : bool = _v1 
    v31
and method21 (v0 : string) : string option =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0?"
    let v11 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v24 
    #endif
#else
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v27 
    #endif
    let v30 : std_string_String = _v14 
    let v35 : string = "fable_library_rust::String_::fromString($0)"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr v30 v35 
    let v37 : US1 = US1_0(v36)
    let _v1 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : US1 = null |> unbox<US1>
    let _v1 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : US1 = null |> unbox<US1>
    let _v1 = v41 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : string = "path"
    let v45 : IPathDirname = Fable.Core.JsInterop.importAll v44 
    let v46 : string = "v45.dirname($0)"
    let v47 : string = Fable.Core.JsInterop.emitJsExpr v0 v46 
    let v48 : US1 = US1_0(v47)
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : US1 = null |> unbox<US1>
    let _v1 = v49 
    #endif
#else
    let v52 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.GetParent
    let v53 : System.IO.DirectoryInfo = v52 v0
    let v54 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let v57 : bool = v53 = v54 
    let v84 : US1 =
        if v57 then
            US1_1
        else
            let v61 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v62 : string = null |> unbox<string>
            let _v61 = v62 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v65 : string = null |> unbox<string>
            let _v61 = v65 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v68 : string = null |> unbox<string>
            let _v61 = v68 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : string = null |> unbox<string>
            let _v61 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : string = null |> unbox<string>
            let _v61 = v74 
            #endif
#else
            let v77 : string = v53.FullName
            let _v61 = v77 
            #endif
            let v78 : string = _v61 
            US1_0(v78)
    let _v1 = v84 
    #endif
    let v85 : US1 = _v1 
    match v85 with
    | US1_1 -> (* None *)
        let v94 : string option = None
        v94
    | US1_0(v90) -> (* Some *)
        let v91 : string option = Some v90 
        v91
and closure20 () (v0 : string) : string option =
    method21(v0)
and method20 () : (string -> string option) =
    closure20()
and method22 (v0 : string, v1 : string, v2 : string) : US12 =
    let v3 : string = method15(v2, v0)
    let v4 : bool = method19(v3)
    if v4 then
        US12_0(v2)
    else
        let v6 : (string -> string option) = method20()
        let v7 : string option = v6 v2
        let v8 : US1 option = None
        let _v8 = ref v8 
        let v9 : US1 option ref = _v8 
        let v10 : (US1 option -> US1 option ref) = closure3(v9)
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure4(v7, v10)
        let v13 : unit = (fun () -> v12 (); v11) ()
        let v16 : US1 option = _v8.Value 
        let v27 : US1 = US1_1
        let v28 : US1 = v16 |> Option.defaultValue v27 
        match v28 with
        | US1_1 -> (* None *)
            let v34 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v2}')"""
            US12_1(v34)
        | US1_0(v32) -> (* Some *)
            method22(v0, v1, v32)
and method18 (v0 : string, v1 : string) : US12 =
    let v2 : string = method15(v1, v0)
    let v3 : bool = method19(v2)
    if v3 then
        US12_0(v1)
    else
        let v5 : (string -> string option) = method20()
        let v6 : string option = v5 v1
        let v7 : US1 option = None
        let _v7 = ref v7 
        let v8 : US1 option ref = _v7 
        let v9 : (US1 option -> US1 option ref) = closure3(v8)
        let v10 : unit = ()
        let v11 : (unit -> unit) = closure4(v6, v9)
        let v12 : unit = (fun () -> v11 (); v10) ()
        let v15 : US1 option = _v7.Value 
        let v26 : US1 = US1_1
        let v27 : US1 = v15 |> Option.defaultValue v26 
        match v27 with
        | US1_1 -> (* None *)
            let v33 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v1}')"""
            US12_1(v33)
        | US1_0(v31) -> (* Some *)
            method22(v0, v1, v31)
and closure21 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "error"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{v0}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = " }"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure10(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = v638.l0
        let v684 : string = "file_system.get_workspace_root"
        let v685 : string = $"{v495} {v630} #{v636} %s{v684} / {v683}"
        let v688 : char list = []
        let v689 : (char list -> (char [])) = List.toArray
        let v690 : (char []) = v689 v688
        let v693 : string = v685.TrimStart v690 
        let v711 : char list = []
        let v712 : char list = '/' :: v711 
        let v715 : char list = ' ' :: v712 
        let v718 : (char list -> (char [])) = List.toArray
        let v719 : (char []) = v718 v715
        let v722 : string = v693.TrimEnd v719 
        let v740 : (string -> unit) = closure11()
        let v741 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v742 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v722 v742 
        let _v741 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v743 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v722 v743 
        let _v741 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v744 : string = v20.l0
        let v745 : bool = v744 = ""
        let v753 : string =
            if v745 then
                v722
            else
                let v746 : bool = v722 = ""
                if v746 then
                    let v747 : string = v20.l0
                    v747
                else
                    let v748 : string = v20.l0
                    let v749 : string = "\n"
                    let v750 : string = v748 + v749 
                    let v751 : string = v750 + v722 
                    v751
        let v754 : string = "&*$0"
        let v755 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v753 v754 
        let v756 : string = $"$0.chars()"
        let v757 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v755 v756 
        let v758 : string = "v757"
        let v759 : _ = Fable.Core.RustInterop.emitRustExpr () v758 
        let v760 : string = "v759.collect::<Vec<_>>()"
        let v761 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v760 
        let v762 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v763 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v761 v762 
        let v764 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v765 : bool = Fable.Core.RustInterop.emitRustExpr v763 v764 
        let v766 : string = "x"
        let v767 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v766 
        let v768 : string = "String::from_iter($0)"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr v767 v768 
        let v770 : string = "true; $0 }).collect::<Vec<_>>()"
        let v771 : bool = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let v772 : string = "_vec_map"
        let v773 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "$0.len()"
        let v775 : unativeint = Fable.Core.RustInterop.emitRustExpr v773 v774 
        let v776 : (unativeint -> int32) = int32
        let v777 : int32 = v776 v775
        let v778 : string = ""
        let v779 : bool = v722 <> v778 
        let v783 : bool =
            if v779 then
                let v782 : bool = v777 <= 1
                v782
            else
                false
        if v783 then
            v20.l0 <- v753
            ()
        else
            v20.l0 <- v778
            let v784 : string = "true; $0.into_iter().for_each(|x| { //"
            let v785 : bool = Fable.Core.RustInterop.emitRustExpr v773 v784 
            let v786 : string = "x"
            let v787 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v786 
            let v788 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v787 v788 
            let v789 : string = $"true;"
            let v790 : bool = Fable.Core.RustInterop.emitRustExpr () v789 
            let v791 : string = "true; }}); { //"
            let v792 : bool = Fable.Core.RustInterop.emitRustExpr () v791 
            ()
        let _v741 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v740 v722
        let _v741 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v740 v722
        let _v741 = () 
        #endif
#else
        v740 v722
        let _v741 = () 
        #endif
        _v741 
        let v793 : (string -> unit) = v18.l0
        v793 v722
and method23 () : string =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::env::current_dir()"
    let v2 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "$0.unwrap()"
    let v4 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "$0.display()"
    let v6 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v8 
    let _v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v10 
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v12 
    let _v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v17 
    #endif
#else
    let v20 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v20 
    #endif
    let v23 : std_string_String = _v7 
    let v28 : string = "fable_library_rust::String_::fromString($0)"
    let v29 : string = Fable.Core.RustInterop.emitRustExpr v23 v28 
    let _v0 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = null |> unbox<string>
    let _v0 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = null |> unbox<string>
    let _v0 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : string = null |> unbox<string>
    let _v0 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : string = null |> unbox<string>
    let _v0 = v39 
    #endif
#else
    let v42 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v43 : string = v42 ()
    let _v0 = v43 
    #endif
    let v44 : string = _v0 
    v44
and method24 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent()"
    let v9 : Ref<std_path_Path> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_path_Path> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v24 
    #endif
#else
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v27 
    #endif
    let v30 : std_string_String = _v14 
    let v35 : string = "fable_library_rust::String_::fromString($0)"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr v30 v35 
    let _v1 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : (string -> string) = System.IO.Path.GetDirectoryName
    let v38 : string = v37 v0
    let _v1 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = null |> unbox<string>
    let _v1 = v39 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : (string -> string) = System.IO.Path.GetDirectoryName
    let v43 : string = v42 v0
    let _v1 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : (string -> string) = System.IO.Path.GetDirectoryName
    let v45 : string = v44 v0
    let _v1 = v45 
    #endif
#else
    let v46 : (string -> string) = System.IO.Path.GetDirectoryName
    let v47 : string = v46 v0
    let _v1 = v47 
    #endif
    let v48 : string = _v1 
    v48
and method27 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v12 : bool =
        if v9 then
            let v10 : string = "$0.is_file()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            v11
        else
            false
    let _v1 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : bool = null |> unbox<bool>
    let _v1 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = "fs"
    let v20 : IFsExistsSync = Fable.Core.JsInterop.importAll v19 
    let v21 : string = "$0.existsSync($1)"
    let v22 : bool = Fable.Core.JsInterop.emitJsExpr struct (v20, v0) v21 
    let _v1 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _v1 = v23 
    #endif
#else
    let v26 : (string -> bool) = System.IO.File.Exists
    let v27 : bool = v26 v0
    let _v1 = v27 
    #endif
    let v28 : bool = _v1 
    v28
and method26 (v0 : string, v1 : string) : bool =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method27(v0)
    let v4 : bool = v3 = false
    let v57 : bool =
        if v4 then
            false
        else
            let v5 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v6 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v7 : string = "std::fs::read(&*$0)"
            let v8 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
            let v9 : string = "$0.unwrap()"
            let v10 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v9 
            let _v6 = v10 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v11 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v11 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v14 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v14 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v17 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v17 
            #endif
#if FABLE_COMPILER_PYTHON
            let v20 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v20 
            #endif
#else
            let v23 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v24 : string = "$0.to_vec()"
            let v25 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v23 v24 
            let _v6 = v25 
            #endif
            let v26 : Vec<uint8> = _v6 
            let v31 : Vec<uint8> = method14(v26)
            let v32 : string = "std::string::String::from_utf8($0)"
            let v33 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "$0.unwrap()"
            let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v34 
            let v36 : string = "fable_library_rust::String_::fromString($0)"
            let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let _v5 = v37 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v38 : string = null |> unbox<string>
            let _v5 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : string = null |> unbox<string>
            let _v5 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v44 : string = null |> unbox<string>
            let _v5 = v44 
            #endif
#if FABLE_COMPILER_PYTHON
            let v47 : string = null |> unbox<string>
            let _v5 = v47 
            #endif
#else
            let v50 : string = v0 |> System.IO.File.ReadAllText
            let _v5 = v50 
            #endif
            let v51 : string = _v5 
            let v56 : bool = v1 = v51
            v56
    let _v2 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : bool = null |> unbox<bool>
    let _v2 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : bool = null |> unbox<bool>
    let _v2 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : bool = null |> unbox<bool>
    let _v2 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : bool = null |> unbox<bool>
    let _v2 = v67 
    #endif
#else
    let v70 : bool = null |> unbox<bool>
    let _v2 = v70 
    #endif
    let v73 : bool = _v2 
    v73
and method29 (v0 : string) : string =
    v0
and closure22 () (v0 : std_io_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method30 () : (std_io_Error -> std_string_String) =
    closure22()
and closure23 () () : US13 =
    US13_0
and closure24 () (v0 : std_string_String) : US13 =
    US13_1(v0)
and closure25 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 4 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Critical"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_red"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_red"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_red"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[91m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[91m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[91m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "dir"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure10(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v0}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure10(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure10(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "error"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure10(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v702 : string = "format!(\"{:#?}\", $0)"
        let v703 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v702 
        let v704 : string = "fable_library_rust::String_::fromString($0)"
        let v705 : string = Fable.Core.RustInterop.emitRustExpr v703 v704 
        let _v701 = v705 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v706 : string = "format!(\"{:#?}\", $0)"
        let v707 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v706 
        let v708 : string = "fable_library_rust::String_::fromString($0)"
        let v709 : string = Fable.Core.RustInterop.emitRustExpr v707 v708 
        let _v701 = v709 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v710 : string = "format!(\"{:#?}\", $0)"
        let v711 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v710 
        let v712 : string = "fable_library_rust::String_::fromString($0)"
        let v713 : string = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let _v701 = v713 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v714 : string = $"%A{v1}"
        let _v701 = v714 
        #endif
#if FABLE_COMPILER_PYTHON
        let v717 : string = $"%A{v1}"
        let _v701 = v717 
        #endif
#else
        let v720 : string = $"%A{v1}"
        let _v701 = v720 
        #endif
        let v723 : string = _v701 
        let v728 : string = $"{v723}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure10(v639, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = " }"
        let v737 : string = $"{v736}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure10(v639, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = v639.l0
        let v746 : string = "file_system.create_dir"
        let v747 : string = $"{v496} {v631} #{v637} %s{v746} / {v745}"
        let v750 : char list = []
        let v751 : (char list -> (char [])) = List.toArray
        let v752 : (char []) = v751 v750
        let v755 : string = v747.TrimStart v752 
        let v773 : char list = []
        let v774 : char list = '/' :: v773 
        let v777 : char list = ' ' :: v774 
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v777
        let v784 : string = v755.TrimEnd v781 
        let v802 : (string -> unit) = closure11()
        let v803 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v804 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v805 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v805 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v806 : string = v21.l0
        let v807 : bool = v806 = ""
        let v815 : string =
            if v807 then
                v784
            else
                let v808 : bool = v784 = ""
                if v808 then
                    let v809 : string = v21.l0
                    v809
                else
                    let v810 : string = v21.l0
                    let v811 : string = "\n"
                    let v812 : string = v810 + v811 
                    let v813 : string = v812 + v784 
                    v813
        let v816 : string = "&*$0"
        let v817 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v815 v816 
        let v818 : string = $"$0.chars()"
        let v819 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v817 v818 
        let v820 : string = "v819"
        let v821 : _ = Fable.Core.RustInterop.emitRustExpr () v820 
        let v822 : string = "v821.collect::<Vec<_>>()"
        let v823 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v825 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v823 v824 
        let v826 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v827 : bool = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let v828 : string = "x"
        let v829 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v828 
        let v830 : string = "String::from_iter($0)"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr v829 v830 
        let v832 : string = "true; $0 }).collect::<Vec<_>>()"
        let v833 : bool = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let v834 : string = "_vec_map"
        let v835 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "$0.len()"
        let v837 : unativeint = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : (unativeint -> int32) = int32
        let v839 : int32 = v838 v837
        let v840 : string = ""
        let v841 : bool = v784 <> v840 
        let v845 : bool =
            if v841 then
                let v844 : bool = v839 <= 1
                v844
            else
                false
        if v845 then
            v21.l0 <- v815
            ()
        else
            v21.l0 <- v840
            let v846 : string = "true; $0.into_iter().for_each(|x| { //"
            let v847 : bool = Fable.Core.RustInterop.emitRustExpr v835 v846 
            let v848 : string = "x"
            let v849 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v848 
            let v850 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v849 v850 
            let v851 : string = $"true;"
            let v852 : bool = Fable.Core.RustInterop.emitRustExpr () v851 
            let v853 : string = "true; }}); { //"
            let v854 : bool = Fable.Core.RustInterop.emitRustExpr () v853 
            ()
        let _v803 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v802 v784
        let _v803 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v802 v784
        let _v803 = () 
        #endif
#else
        v802 v784
        let _v803 = () 
        #endif
        _v803 
        let v855 : (string -> unit) = v19.l0
        v855 v784
and closure26 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Verbose"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_black"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[90m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[90m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[90m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "dir"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{v0}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = " }"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure10(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = v638.l0
        let v684 : string = "file_system.create_dir"
        let v685 : string = $"{v495} {v630} #{v636} %s{v684} / {v683}"
        let v688 : char list = []
        let v689 : (char list -> (char [])) = List.toArray
        let v690 : (char []) = v689 v688
        let v693 : string = v685.TrimStart v690 
        let v711 : char list = []
        let v712 : char list = '/' :: v711 
        let v715 : char list = ' ' :: v712 
        let v718 : (char list -> (char [])) = List.toArray
        let v719 : (char []) = v718 v715
        let v722 : string = v693.TrimEnd v719 
        let v740 : (string -> unit) = closure11()
        let v741 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v742 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v722 v742 
        let _v741 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v743 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v722 v743 
        let _v741 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v744 : string = v20.l0
        let v745 : bool = v744 = ""
        let v753 : string =
            if v745 then
                v722
            else
                let v746 : bool = v722 = ""
                if v746 then
                    let v747 : string = v20.l0
                    v747
                else
                    let v748 : string = v20.l0
                    let v749 : string = "\n"
                    let v750 : string = v748 + v749 
                    let v751 : string = v750 + v722 
                    v751
        let v754 : string = "&*$0"
        let v755 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v753 v754 
        let v756 : string = $"$0.chars()"
        let v757 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v755 v756 
        let v758 : string = "v757"
        let v759 : _ = Fable.Core.RustInterop.emitRustExpr () v758 
        let v760 : string = "v759.collect::<Vec<_>>()"
        let v761 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v760 
        let v762 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v763 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v761 v762 
        let v764 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v765 : bool = Fable.Core.RustInterop.emitRustExpr v763 v764 
        let v766 : string = "x"
        let v767 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v766 
        let v768 : string = "String::from_iter($0)"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr v767 v768 
        let v770 : string = "true; $0 }).collect::<Vec<_>>()"
        let v771 : bool = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let v772 : string = "_vec_map"
        let v773 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "$0.len()"
        let v775 : unativeint = Fable.Core.RustInterop.emitRustExpr v773 v774 
        let v776 : (unativeint -> int32) = int32
        let v777 : int32 = v776 v775
        let v778 : string = ""
        let v779 : bool = v722 <> v778 
        let v783 : bool =
            if v779 then
                let v782 : bool = v777 <= 1
                v782
            else
                false
        if v783 then
            v20.l0 <- v753
            ()
        else
            v20.l0 <- v778
            let v784 : string = "true; $0.into_iter().for_each(|x| { //"
            let v785 : bool = Fable.Core.RustInterop.emitRustExpr v773 v784 
            let v786 : string = "x"
            let v787 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v786 
            let v788 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v787 v788 
            let v789 : string = $"true;"
            let v790 : bool = Fable.Core.RustInterop.emitRustExpr () v789 
            let v791 : string = "true; }}); { //"
            let v792 : bool = Fable.Core.RustInterop.emitRustExpr () v791 
            ()
        let _v741 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v740 v722
        let _v741 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v740 v722
        let _v741 = () 
        #endif
#else
        v740 v722
        let _v741 = () 
        #endif
        _v741 
        let v793 : (string -> unit) = v18.l0
        v793 v722
and method33 (v0 : string) : string =
    v0
and method32 (v0 : bool, v1 : string) : unit =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method33(v1)
    let v4 : bool = method19(v3)
    if v4 then
        if v0 then
            let v5 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v5 
            ()
        else
            let v6 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v6 
            ()
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let _v2 = () 
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    let _v2 = () 
    #endif
    _v2 
    ()
and closure27 (v0 : string) () : unit =
    let v1 : bool = true
    method32(v1, v0)
and method31 (v0 : string) : (unit -> unit) =
    closure27(v0)
and method34 (v0 : string) : (unit -> unit) =
    closure27(v0)
and closure28 (v0 : string, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "dir"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure10(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v0}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure10(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure10(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "result"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure10(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v1}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure10(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = " }"
        let v710 : string = $"{v709}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure10(v639, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = v639.l0
        let v719 : string = "file_system.create_dir"
        let v720 : string = $"{v496} {v631} #{v637} %s{v719} / {v718}"
        let v723 : char list = []
        let v724 : (char list -> (char [])) = List.toArray
        let v725 : (char []) = v724 v723
        let v728 : string = v720.TrimStart v725 
        let v746 : char list = []
        let v747 : char list = '/' :: v746 
        let v750 : char list = ' ' :: v747 
        let v753 : (char list -> (char [])) = List.toArray
        let v754 : (char []) = v753 v750
        let v757 : string = v728.TrimEnd v754 
        let v775 : (string -> unit) = closure11()
        let v776 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v757 v777 
        let _v776 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v778 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v757 v778 
        let _v776 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v779 : string = v21.l0
        let v780 : bool = v779 = ""
        let v788 : string =
            if v780 then
                v757
            else
                let v781 : bool = v757 = ""
                if v781 then
                    let v782 : string = v21.l0
                    v782
                else
                    let v783 : string = v21.l0
                    let v784 : string = "\n"
                    let v785 : string = v783 + v784 
                    let v786 : string = v785 + v757 
                    v786
        let v789 : string = "&*$0"
        let v790 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v788 v789 
        let v791 : string = $"$0.chars()"
        let v792 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v790 v791 
        let v793 : string = "v792"
        let v794 : _ = Fable.Core.RustInterop.emitRustExpr () v793 
        let v795 : string = "v794.collect::<Vec<_>>()"
        let v796 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v795 
        let v797 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v798 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v796 v797 
        let v799 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v800 : bool = Fable.Core.RustInterop.emitRustExpr v798 v799 
        let v801 : string = "x"
        let v802 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v801 
        let v803 : string = "String::from_iter($0)"
        let v804 : std_string_String = Fable.Core.RustInterop.emitRustExpr v802 v803 
        let v805 : string = "true; $0 }).collect::<Vec<_>>()"
        let v806 : bool = Fable.Core.RustInterop.emitRustExpr v804 v805 
        let v807 : string = "_vec_map"
        let v808 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v807 
        let v809 : string = "$0.len()"
        let v810 : unativeint = Fable.Core.RustInterop.emitRustExpr v808 v809 
        let v811 : (unativeint -> int32) = int32
        let v812 : int32 = v811 v810
        let v813 : string = ""
        let v814 : bool = v757 <> v813 
        let v818 : bool =
            if v814 then
                let v817 : bool = v812 <= 1
                v817
            else
                false
        if v818 then
            v21.l0 <- v788
            ()
        else
            v21.l0 <- v813
            let v819 : string = "true; $0.into_iter().for_each(|x| { //"
            let v820 : bool = Fable.Core.RustInterop.emitRustExpr v808 v819 
            let v821 : string = "x"
            let v822 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v821 
            let v823 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v822 v823 
            let v824 : string = $"true;"
            let v825 : bool = Fable.Core.RustInterop.emitRustExpr () v824 
            let v826 : string = "true; }}); { //"
            let v827 : bool = Fable.Core.RustInterop.emitRustExpr () v826 
            ()
        let _v776 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v775 v757
        let _v776 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v775 v757
        let _v776 = () 
        #endif
#else
        v775 v757
        let _v776 = () 
        #endif
        _v776 
        let v828 : (string -> unit) = v19.l0
        v828 v757
and method37 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.file_name()"
    let v9 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.to_os_string()"
    let v13 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.to_str()"
    let v15 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "$0.unwrap()"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "String::from($0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "fable_library_rust::String_::fromString($0)"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let _v1 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : US10 = US10_1
    let v23 : US11 = US11_2(v22)
    let v24 : string = $"file_system.get_file_name / target: {v23} / path: {v0}"
    let v25 : string = failwith<string> v24
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : string = null |> unbox<string>
    let _v1 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : US10 = US10_0
    let v30 : US11 = US11_3(v29)
    let v31 : string = $"file_system.get_file_name / target: {v30} / path: {v0}"
    let v32 : string = failwith<string> v31
    let _v1 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v33 : US10 = US10_0
    let v34 : US11 = US11_4(v33)
    let v35 : string = $"file_system.get_file_name / target: {v34} / path: {v0}"
    let v36 : string = failwith<string> v35
    let _v1 = v36 
    #endif
#else
    let v37 : (string -> string) = System.IO.Path.GetFileName
    let v38 : string = v37 v0
    let _v1 = v38 
    #endif
    let v39 : string = _v1 
    v39
and closure30 (v0 : string, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method37(v0)
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure10(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "ex"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure10(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure10(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v1}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure10(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure10(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "path"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure10(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v638}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = " }"
        let v711 : string = $"{v710}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v640, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = v640.l0
        let v720 : string = "file_system.delete_directory_async"
        let v721 : string = $"{v496} {v631} #{v637} %s{v720} / {v719}"
        let v724 : char list = []
        let v725 : (char list -> (char [])) = List.toArray
        let v726 : (char []) = v725 v724
        let v729 : string = v721.TrimStart v726 
        let v747 : char list = []
        let v748 : char list = '/' :: v747 
        let v751 : char list = ' ' :: v748 
        let v754 : (char list -> (char [])) = List.toArray
        let v755 : (char []) = v754 v751
        let v758 : string = v729.TrimEnd v755 
        let v776 : (string -> unit) = closure11()
        let v777 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v778 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v758 v778 
        let _v777 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v779 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v758 v779 
        let _v777 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v780 : string = v21.l0
        let v781 : bool = v780 = ""
        let v789 : string =
            if v781 then
                v758
            else
                let v782 : bool = v758 = ""
                if v782 then
                    let v783 : string = v21.l0
                    v783
                else
                    let v784 : string = v21.l0
                    let v785 : string = "\n"
                    let v786 : string = v784 + v785 
                    let v787 : string = v786 + v758 
                    v787
        let v790 : string = "&*$0"
        let v791 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = $"$0.chars()"
        let v793 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let v794 : string = "v793"
        let v795 : _ = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "v795.collect::<Vec<_>>()"
        let v797 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v796 
        let v798 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v799 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v801 : bool = Fable.Core.RustInterop.emitRustExpr v799 v800 
        let v802 : string = "x"
        let v803 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v802 
        let v804 : string = "String::from_iter($0)"
        let v805 : std_string_String = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "true; $0 }).collect::<Vec<_>>()"
        let v807 : bool = Fable.Core.RustInterop.emitRustExpr v805 v806 
        let v808 : string = "_vec_map"
        let v809 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v808 
        let v810 : string = "$0.len()"
        let v811 : unativeint = Fable.Core.RustInterop.emitRustExpr v809 v810 
        let v812 : (unativeint -> int32) = int32
        let v813 : int32 = v812 v811
        let v814 : string = ""
        let v815 : bool = v758 <> v814 
        let v819 : bool =
            if v815 then
                let v818 : bool = v813 <= 1
                v818
            else
                false
        if v819 then
            v21.l0 <- v789
            ()
        else
            v21.l0 <- v814
            let v820 : string = "true; $0.into_iter().for_each(|x| { //"
            let v821 : bool = Fable.Core.RustInterop.emitRustExpr v809 v820 
            let v822 : string = "x"
            let v823 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v822 
            let v824 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v823 v824 
            let v825 : string = $"true;"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            let v827 : string = "true; }}); { //"
            let v828 : bool = Fable.Core.RustInterop.emitRustExpr () v827 
            ()
        let _v777 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v776 v758
        let _v777 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v776 v758
        let _v777 = () 
        #endif
#else
        v776 v758
        let _v777 = () 
        #endif
        _v777 
        let v829 : (string -> unit) = v19.l0
        v829 v758
and method36 (v0 : string, v1 : int64) : Async<int64> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v15 
    #endif
#else
    let v18 : Async<int64> option = None
    let mutable _v18 = v18 
    async {
    try
    let v19 : bool = true
    method32(v19, v0)
    return v1 
    with ex ->
    let v20 : exn = ex
    let v21 : int64 = v1 % 100L
    let v22 : bool = v21 = 0L
    if v22 then
        let v23 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v24 : string = $"%A{v20}"
        let _v23 = v24 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v27 : string = $"%A{v20}"
        let _v23 = v27 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v30 : string = $"%A{v20}"
        let _v23 = v30 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v33 : string = $"%A{v20}"
        let _v23 = v33 
        #endif
#if FABLE_COMPILER_PYTHON
        let v36 : string = $"%A{v20}"
        let _v23 = v36 
        #endif
#else
        let v39 : string = $"{v20.GetType ()}: {v20.Message}"
        let _v23 = v39 
        #endif
        let v40 : string = _v23 
        let v45 : unit = ()
        let v46 : (unit -> unit) = closure30(v0, v40)
        let v47 : unit = (fun () -> v46 (); v45) ()
        ()
    let v876 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v877 : Async<unit> = null |> unbox<Async<unit>>
    let _v876 = v877 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v880 : Async<unit> = null |> unbox<Async<unit>>
    let _v876 = v880 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v883 : Async<unit> = null |> unbox<Async<unit>>
    let _v876 = v883 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v886 : Async<unit> = null |> unbox<Async<unit>>
    let _v876 = v886 
    #endif
#if FABLE_COMPILER_PYTHON
    let v889 : Async<unit> = null |> unbox<Async<unit>>
    let _v876 = v889 
    #endif
#else
    let v892 : (int32 -> Async<unit>) = Async.Sleep
    let v893 : Async<unit> = v892 10
    let _v876 = v893 
    #endif
    let v894 : Async<unit> = _v876 
    do! v894 
    let v899 : int64 = v1 + 1L
    let v900 : Async<int64> = method36(v0, v899)
    return! v900 
    (*
    let v901 : int64 = *)
    }
    |> fun x -> _v18 <- Some x
    let v902 : Async<int64> = match _v18 with Some x -> x | None -> failwith "async.new_async_unit / _v18=None"
    let _v2 = v902 
    #endif
    let v903 : Async<int64> = _v2 
    v903
and closure29 (v0 : string) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v14 
    #endif
#else
    let v17 : int64 = 0L
    let v18 : Async<int64> = method36(v0, v17)
    let _v1 = v18 
    #endif
    let v19 : Async<int64> = _v1 
    let v24 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v28 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v37 
    #endif
#else
    let v40 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v41 : Async<unit> = v40 v19
    let _v24 = v41 
    #endif
    let v42 : Async<unit> = _v24 
    let v47 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v47 = () 
    #endif
#else
    let v48 : (Async<unit> -> unit) = Async.RunSynchronously
    v48 v42
    let _v47 = () 
    #endif
    _v47 
    ()
and method35 (v0 : string) : (unit -> unit) =
    closure29(v0)
and method38 (v0 : string) : (unit -> unit) =
    closure29(v0)
and method28 (v0 : string) : System.IDisposable =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method29(v0)
    let v3 : string = "std::fs::create_dir_all(&*$0)"
    let v4 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (std_io_Error -> std_string_String) = method30()
    let v6 : string = "$0.map_err(|x| $1(x))"
    let v7 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v6 
    let v8 : (unit -> US13) = closure23()
    let v9 : (std_string_String -> US13) = closure24()
    let v10 : US13 = match v7 with Ok () -> v8 () | Error x -> v9 x
    match v10 with
    | US13_1(v807) -> (* Error *)
        let v808 : unit = ()
        let v809 : (unit -> unit) = closure25(v2, v807)
        let v810 : unit = (fun () -> v809 (); v808) ()
        ()
    | US13_0 -> (* Ok *)
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure26(v2)
        let v13 : unit = (fun () -> v12 (); v11) ()
        ()
    let v1665 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1666 : (unit -> unit) = method31(v2)
    let v1667 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1666 "$0()" )
    let _v1665 = v1667 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1668 : (unit -> unit) = method31(v2)
    let v1669 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1668 "$0()" )
    let _v1665 = v1669 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1670 : (unit -> unit) = method31(v2)
    let v1671 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1670 "$0()" )
    let _v1665 = v1671 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1672 : (unit -> unit) = method34(v2)
    let v1673 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1672 () }
    let _v1665 = v1673 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1674 : (unit -> unit) = method34(v2)
    let v1675 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1674 () }
    let _v1665 = v1675 
    #endif
#else
    let v1676 : (unit -> unit) = method34(v2)
    let v1677 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1676 () }
    let _v1665 = v1677 
    #endif
    let v1678 : System.IDisposable = _v1665 
    let _v1 = v1678 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1682 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v1682 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1685 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v1685 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1688 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1689 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1688 = v1689 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1692 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1688 = v1692 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1695 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1688 = v1695 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1698 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1688 = v1698 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1701 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1688 = v1701 
    #endif
#else
    let v1704 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v1705 : System.IO.DirectoryInfo = v1704 v0
    let _v1688 = v1705 
    #endif
    let v1706 : System.IO.DirectoryInfo = _v1688 
    let v1711 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1712 : bool = null |> unbox<bool>
    let _v1711 = v1712 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1715 : bool = null |> unbox<bool>
    let _v1711 = v1715 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1718 : bool = null |> unbox<bool>
    let _v1711 = v1718 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1721 : bool = null |> unbox<bool>
    let _v1711 = v1721 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1724 : bool = null |> unbox<bool>
    let _v1711 = v1724 
    #endif
#else
    let v1727 : bool = v1706.Exists
    let _v1711 = v1727 
    #endif
    let v1728 : bool = _v1711 
    let v1733 : bool = v1728 = false
    if v1733 then
        let v1734 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1735 : System.DateTime = null |> unbox<System.DateTime>
        let _v1734 = v1735 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1738 : System.DateTime = null |> unbox<System.DateTime>
        let _v1734 = v1738 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1741 : System.DateTime = null |> unbox<System.DateTime>
        let _v1734 = v1741 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1744 : System.DateTime = null |> unbox<System.DateTime>
        let _v1734 = v1744 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1747 : System.DateTime = null |> unbox<System.DateTime>
        let _v1734 = v1747 
        #endif
#else
        let v1750 : System.DateTime = v1706.CreationTime
        let _v1734 = v1750 
        #endif
        let v1751 : System.DateTime = _v1734 
        let v1756 : obj = {| Exists = v1728; CreationTime = v1751 |}
        let v1757 : string = $"%A{v1756}"
        let v1760 : unit = ()
        let v1761 : (unit -> unit) = closure28(v0, v1757)
        let v1762 : unit = (fun () -> v1761 (); v1760) ()
        ()
    let v2590 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2591 : (unit -> unit) = method35(v0)
    let v2592 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2591 "$0()" )
    let _v2590 = v2592 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2593 : (unit -> unit) = method35(v0)
    let v2594 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2593 "$0()" )
    let _v2590 = v2594 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2595 : (unit -> unit) = method35(v0)
    let v2596 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2595 "$0()" )
    let _v2590 = v2596 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2597 : (unit -> unit) = method38(v0)
    let v2598 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2597 () }
    let _v2590 = v2598 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2599 : (unit -> unit) = method38(v0)
    let v2600 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2599 () }
    let _v2590 = v2600 
    #endif
#else
    let v2601 : (unit -> unit) = method38(v0)
    let v2602 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2601 () }
    let _v2590 = v2602 
    #endif
    let v2603 : System.IDisposable = _v2590 
    let _v1 = v2603 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2607 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2608 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2607 = v2608 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2611 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2607 = v2611 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2614 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2607 = v2614 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2617 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2607 = v2617 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2620 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2607 = v2620 
    #endif
#else
    let v2623 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v2624 : System.IO.DirectoryInfo = v2623 v0
    let _v2607 = v2624 
    #endif
    let v2625 : System.IO.DirectoryInfo = _v2607 
    let v2630 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2631 : bool = null |> unbox<bool>
    let _v2630 = v2631 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2634 : bool = null |> unbox<bool>
    let _v2630 = v2634 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2637 : bool = null |> unbox<bool>
    let _v2630 = v2637 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2640 : bool = null |> unbox<bool>
    let _v2630 = v2640 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2643 : bool = null |> unbox<bool>
    let _v2630 = v2643 
    #endif
#else
    let v2646 : bool = v2625.Exists
    let _v2630 = v2646 
    #endif
    let v2647 : bool = _v2630 
    let v2652 : bool = v2647 = false
    if v2652 then
        let v2653 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2654 : System.DateTime = null |> unbox<System.DateTime>
        let _v2653 = v2654 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2657 : System.DateTime = null |> unbox<System.DateTime>
        let _v2653 = v2657 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2660 : System.DateTime = null |> unbox<System.DateTime>
        let _v2653 = v2660 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2663 : System.DateTime = null |> unbox<System.DateTime>
        let _v2653 = v2663 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2666 : System.DateTime = null |> unbox<System.DateTime>
        let _v2653 = v2666 
        #endif
#else
        let v2669 : System.DateTime = v2625.CreationTime
        let _v2653 = v2669 
        #endif
        let v2670 : System.DateTime = _v2653 
        let v2675 : obj = {| Exists = v2647; CreationTime = v2670 |}
        let v2676 : string = $"%A{v2675}"
        let v2679 : unit = ()
        let v2680 : (unit -> unit) = closure28(v0, v2676)
        let v2681 : unit = (fun () -> v2680 (); v2679) ()
        ()
    let v3509 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3510 : (unit -> unit) = method35(v0)
    let v3511 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3510 "$0()" )
    let _v3509 = v3511 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3512 : (unit -> unit) = method35(v0)
    let v3513 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3512 "$0()" )
    let _v3509 = v3513 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3514 : (unit -> unit) = method35(v0)
    let v3515 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3514 "$0()" )
    let _v3509 = v3515 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3516 : (unit -> unit) = method38(v0)
    let v3517 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3516 () }
    let _v3509 = v3517 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3518 : (unit -> unit) = method38(v0)
    let v3519 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3518 () }
    let _v3509 = v3519 
    #endif
#else
    let v3520 : (unit -> unit) = method38(v0)
    let v3521 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3520 () }
    let _v3509 = v3521 
    #endif
    let v3522 : System.IDisposable = _v3509 
    let _v1 = v3522 
    #endif
#else
    let v3526 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3527 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3526 = v3527 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3530 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3526 = v3530 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3533 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3526 = v3533 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3536 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3526 = v3536 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3539 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v3526 = v3539 
    #endif
#else
    let v3542 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v3543 : System.IO.DirectoryInfo = v3542 v0
    let _v3526 = v3543 
    #endif
    let v3544 : System.IO.DirectoryInfo = _v3526 
    let v3549 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3550 : bool = null |> unbox<bool>
    let _v3549 = v3550 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3553 : bool = null |> unbox<bool>
    let _v3549 = v3553 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3556 : bool = null |> unbox<bool>
    let _v3549 = v3556 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3559 : bool = null |> unbox<bool>
    let _v3549 = v3559 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3562 : bool = null |> unbox<bool>
    let _v3549 = v3562 
    #endif
#else
    let v3565 : bool = v3544.Exists
    let _v3549 = v3565 
    #endif
    let v3566 : bool = _v3549 
    let v3571 : bool = v3566 = false
    if v3571 then
        let v3572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v3573 : System.DateTime = null |> unbox<System.DateTime>
        let _v3572 = v3573 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v3576 : System.DateTime = null |> unbox<System.DateTime>
        let _v3572 = v3576 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v3579 : System.DateTime = null |> unbox<System.DateTime>
        let _v3572 = v3579 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v3582 : System.DateTime = null |> unbox<System.DateTime>
        let _v3572 = v3582 
        #endif
#if FABLE_COMPILER_PYTHON
        let v3585 : System.DateTime = null |> unbox<System.DateTime>
        let _v3572 = v3585 
        #endif
#else
        let v3588 : System.DateTime = v3544.CreationTime
        let _v3572 = v3588 
        #endif
        let v3589 : System.DateTime = _v3572 
        let v3594 : obj = {| Exists = v3566; CreationTime = v3589 |}
        let v3595 : string = $"%A{v3594}"
        let v3598 : unit = ()
        let v3599 : (unit -> unit) = closure28(v0, v3595)
        let v3600 : unit = (fun () -> v3599 (); v3598) ()
        ()
    let v4428 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4429 : (unit -> unit) = method35(v0)
    let v4430 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4429 "$0()" )
    let _v4428 = v4430 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4431 : (unit -> unit) = method35(v0)
    let v4432 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4431 "$0()" )
    let _v4428 = v4432 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4433 : (unit -> unit) = method35(v0)
    let v4434 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4433 "$0()" )
    let _v4428 = v4434 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4435 : (unit -> unit) = method38(v0)
    let v4436 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4435 () }
    let _v4428 = v4436 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4437 : (unit -> unit) = method38(v0)
    let v4438 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4437 () }
    let _v4428 = v4438 
    #endif
#else
    let v4439 : (unit -> unit) = method38(v0)
    let v4440 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4439 () }
    let _v4428 = v4440 
    #endif
    let v4441 : System.IDisposable = _v4428 
    let _v1 = v4441 
    #endif
    let v4445 : System.IDisposable = _v1 
    v4445
and method39 (v0 : string) : string =
    v0
and method25 (v0 : string, v1 : string) : unit =
    let v2 : bool = method26(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string = method24(v0)
        let v5 : bool = method19(v4)
        let v6 : bool = v5 = false
        if v6 then
            let v7 : System.IDisposable = method28(v4)
            ()
        let v8 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v9 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v9 
        let _v8 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v8 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v8 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v8 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v8 = () 
        #endif
#else
        let v10 : string = method39(v1)
        System.IO.File.WriteAllText (v0, v10)
        let _v8 = () 
        #endif
        _v8 
        ()
and method41 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method43 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure33 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure32 () (v0 : char) : (UH0 -> UH0) =
    closure33(v0)
and method44 () : (char -> (UH0 -> UH0)) =
    closure32()
and method45 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v19 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v13 : (char -> string) = _.ToString()
                let v14 : string = v13 v4
                let v17 : (string -> System.Text.StringBuilder) = v1.Append
                let v18 : System.Text.StringBuilder = v17 v14
                v1
        method45(v5, v19, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure31 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '"'
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method43(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method44()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
            US15_0(v7, v15, v38, v39, v40)
        else
            let v42 : (string -> int32) = String.length
            let v43 : int32 = v42 v0
            let v44 : string = "\n"
            let v45 : int32 = v0.IndexOf v44 
            let v46 : int32 = v45 - 1
            let v47 : bool = -2 = v46
            let v48 : int32 =
                if v47 then
                    v43
                else
                    v46
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 0
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v0.[int v50..int v52]
            let v54 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v53}"
            let v55 : int32 = v3 - 1
            let v56 : (int32 -> (string -> string)) = String.replicate
            let v57 : (string -> string) = v56 v55
            let v58 : string = " "
            let v59 : string = v57 v58
            let v62 : string = "^"
            let v63 : string = v59 + v62 
            let v64 : string = $"{v54}
{v63}
"
            US15_1(v64)
and closure34 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '''
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method43(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method44()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
            US15_0(v7, v15, v38, v39, v40)
        else
            let v42 : (string -> int32) = String.length
            let v43 : int32 = v42 v0
            let v44 : string = "\n"
            let v45 : int32 = v0.IndexOf v44 
            let v46 : int32 = v45 - 1
            let v47 : bool = -2 = v46
            let v48 : int32 =
                if v47 then
                    v43
                else
                    v46
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 0
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v0.[int v50..int v52]
            let v54 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v53}"
            let v55 : int32 = v3 - 1
            let v56 : (int32 -> (string -> string)) = String.replicate
            let v57 : (string -> string) = v56 v55
            let v58 : string = " "
            let v59 : string = v57 v58
            let v62 : string = "^"
            let v63 : string = v59 + v62 
            let v64 : string = $"{v54}
{v63}
"
            US15_1(v64)
and method46 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US15 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US15 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US15_1(v13) -> (* Error *)
            method46(v0, v1, v6)
        | US15_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "choice / no parsers succeeded"
        US15_1(v3)
and method47 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US17_1
        let v15 : char =
            match v11 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method47(v0, v17)
and method48 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v70 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ''' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : (char list -> (char [])) = List.toArray
            let v14 : (char []) = v13 v10
            let v17 : string = $"parsing.none_of / unexpected end of input / chars: %A{v14} / s: %A{struct (v2, v3, v4)}"
            US15_1(v17)
        else
            let v19 : char = v1.[int 0]
            let v20 : (string -> int32) = String.length
            let v21 : int32 = v20 v1
            let v22 : (int32 -> int32) = int32
            let v23 : int32 = v22 1
            let v24 : (int32 -> int32) = int32
            let v25 : int32 = v24 v21
            let v26 : string = v1.[int v23..int v25]
            let v27 : int64 = 0L
            let v28 : bool = method47(v19, v27)
            let v29 : bool = v28 = false
            if v29 then
                let v30 : (char -> string) = _.ToString()
                let v31 : string = v30 v19
                let v34 : int32 = v31.Length
                let v35 : (char []) = Array.zeroCreate<char> (v34)
                let v36 : Mut5 = {l0 = 0} : Mut5
                while method43(v34, v36) do
                    let v38 : int32 = v36.l0
                    let v39 : char = v31.[int v38]
                    v35.[int v38] <- v39
                    let v40 : int32 = v38 + 1
                    v36.l0 <- v40
                    ()
                let v41 : char list = v35 |> Array.toList
                let v42 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v43 : (char -> (UH0 -> UH0)) = method44()
                let v44 : (char list -> (UH0 -> UH0)) = v42 v43
                let v45 : (UH0 -> UH0) = v44 v41
                let v46 : UH0 = UH0_0
                let v47 : UH0 = v45 v46
                let struct (v52 : System.Text.StringBuilder, v53 : int32, v54 : int32) = method45(v47, v2, v3, v4)
                US15_0(v19, v26, v52, v53, v54)
            else
                let v56 : char list = []
                let v57 : char list = ''' :: v56 
                let v60 : char list = '"' :: v57 
                let v63 : (char list -> (char [])) = List.toArray
                let v64 : (char []) = v63 v60
                let v67 : string = $"parsing.none_of / unexpected char: '{v19}' / chars: %A{v64} / s: %A{struct (v2, v3, v4)}"
                US15_1(v67)
    let v82 : US15 =
        match v70 with
        | US15_1(v79) -> (* Error *)
            US15_1(v79)
        | US15_0(v71, v72, v73, v74, v75) -> (* Ok *)
            let v76 : bool = '\\' = v71
            let v77 : char =
                if v76 then
                    '/'
                else
                    v71
            US15_0(v77, v72, v73, v74, v75)
    match v82 with
    | US15_1(v94) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v83, v84, v85, v86, v87) -> (* Ok *)
        let v88 : (char -> string) = _.ToString()
        let v89 : string = v88 v83
        let v92 : string = v0 + v89 
        method48(v92, v84, v85, v86, v87)
and method49 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US15 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method49(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US15_1(v5)
and method50 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method50(v0, v21)
and method51 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = ''' :: v7 
            let v13 : char list = '"' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method50(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method43(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method44()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method45(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = ' ' :: v59 
                let v63 : char list = ''' :: v60 
                let v66 : char list = '"' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v88 : US15 =
        match v76 with
        | US15_1(v85) -> (* Error *)
            US15_1(v85)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : bool = '\\' = v77
            let v83 : char =
                if v82 then
                    '/'
                else
                    v77
            US15_0(v83, v78, v79, v80, v81)
    match v88 with
    | US15_1(v100) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v89, v90, v91, v92, v93) -> (* Ok *)
        let v94 : (char -> string) = _.ToString()
        let v95 : string = v94 v89
        let v98 : string = v0 + v95 
        method51(v98, v90, v91, v92, v93)
and method52 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method52(v0, v6)
        else
            v1
and method53 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v42 : US15 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US15_1(v6)
        else
            let v8 : char = v1.[int 0]
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v1
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v1.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v8
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method43(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method44()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v2, v3, v4)
            US15_0(v8, v15, v38, v39, v40)
    match v42 with
    | US15_1(v54) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v43, v44, v45, v46, v47) -> (* Ok *)
        let v48 : (char -> string) = _.ToString()
        let v49 : string = v48 v43
        let v52 : string = v0 + v49 
        method53(v52, v44, v45, v46, v47)
and method42 (v0 : string) : US14 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v11 : System.Text.StringBuilder = v10 v6
    let v12 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure31()
    let v13 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure34()
    let v14 : UH1 = UH1_0
    let v15 : UH1 = UH1_1(v13, v14)
    let v16 : UH1 = UH1_1(v12, v15)
    let v17 : US15 = method46(v7, v11, v16)
    let v153 : US16 =
        match v17 with
        | US15_1(v150) -> (* Error *)
            US16_1(v150)
        | US15_0(v18, v19, v20, v21, v22) -> (* Ok *)
            let v23 : bool = "" = v19
            let v88 : US15 =
                if v23 then
                    let v24 : char list = []
                    let v25 : char list = ''' :: v24 
                    let v28 : char list = '"' :: v25 
                    let v31 : (char list -> (char [])) = List.toArray
                    let v32 : (char []) = v31 v28
                    let v35 : string = $"parsing.none_of / unexpected end of input / chars: %A{v32} / s: %A{struct (v20, v21, v22)}"
                    US15_1(v35)
                else
                    let v37 : char = v19.[int 0]
                    let v38 : (string -> int32) = String.length
                    let v39 : int32 = v38 v19
                    let v40 : (int32 -> int32) = int32
                    let v41 : int32 = v40 1
                    let v42 : (int32 -> int32) = int32
                    let v43 : int32 = v42 v39
                    let v44 : string = v19.[int v41..int v43]
                    let v45 : int64 = 0L
                    let v46 : bool = method47(v37, v45)
                    let v47 : bool = v46 = false
                    if v47 then
                        let v48 : (char -> string) = _.ToString()
                        let v49 : string = v48 v37
                        let v52 : int32 = v49.Length
                        let v53 : (char []) = Array.zeroCreate<char> (v52)
                        let v54 : Mut5 = {l0 = 0} : Mut5
                        while method43(v52, v54) do
                            let v56 : int32 = v54.l0
                            let v57 : char = v49.[int v56]
                            v53.[int v56] <- v57
                            let v58 : int32 = v56 + 1
                            v54.l0 <- v58
                            ()
                        let v59 : char list = v53 |> Array.toList
                        let v60 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v61 : (char -> (UH0 -> UH0)) = method44()
                        let v62 : (char list -> (UH0 -> UH0)) = v60 v61
                        let v63 : (UH0 -> UH0) = v62 v59
                        let v64 : UH0 = UH0_0
                        let v65 : UH0 = v63 v64
                        let struct (v70 : System.Text.StringBuilder, v71 : int32, v72 : int32) = method45(v65, v20, v21, v22)
                        US15_0(v37, v44, v70, v71, v72)
                    else
                        let v74 : char list = []
                        let v75 : char list = ''' :: v74 
                        let v78 : char list = '"' :: v75 
                        let v81 : (char list -> (char [])) = List.toArray
                        let v82 : (char []) = v81 v78
                        let v85 : string = $"parsing.none_of / unexpected char: '{v37}' / chars: %A{v82} / s: %A{struct (v20, v21, v22)}"
                        US15_1(v85)
            let v100 : US15 =
                match v88 with
                | US15_1(v97) -> (* Error *)
                    US15_1(v97)
                | US15_0(v89, v90, v91, v92, v93) -> (* Ok *)
                    let v94 : bool = '\\' = v89
                    let v95 : char =
                        if v94 then
                            '/'
                        else
                            v89
                    US15_0(v95, v90, v91, v92, v93)
            let v114 : US16 =
                match v100 with
                | US15_1(v101) -> (* Error *)
                    US16_1(v101)
                | US15_0(v103, v104, v105, v106, v107) -> (* Ok *)
                    let v108 : (char -> string) = _.ToString()
                    let v109 : string = v108 v103
                    method48(v109, v104, v105, v106, v107)
            let v124 : US16 =
                match v114 with
                | US16_1(v121) -> (* Error *)
                    US16_0(v6, v19, v20, v21, v22)
                | US16_0(v115, v116, v117, v118, v119) -> (* Ok *)
                    US16_0(v115, v116, v117, v118, v119)
            match v124 with
            | US16_1(v145) -> (* Error *)
                let v146 : string = "between / expected content"
                US16_1(v146)
            | US16_0(v125, v126, v127, v128, v129) -> (* Ok *)
                let v130 : UH1 = UH1_0
                let v131 : UH1 = UH1_1(v13, v130)
                let v132 : UH1 = UH1_1(v12, v131)
                let v133 : US15 = method49(v126, v127, v128, v129, v132)
                match v133 with
                | US15_1(v140) -> (* Error *)
                    let v141 : string = $"between / expected closing delimiter / e: %A{v140} / input: %A{struct (v7, v11, 1, 1)} / rest1: %A{struct (v19, v20, v21, v22)} / rest2: %A{struct (v126, v127, v128, v129)}"
                    US16_1(v141)
                | US15_0(v134, v135, v136, v137, v138) -> (* Ok *)
                    US16_0(v125, v135, v136, v137, v138)
    let v303 : US16 =
        match v153 with
        | US16_1(v159) -> (* Error *)
            let v160 : bool = "" = v7
            let v233 : US15 =
                if v160 then
                    let v161 : char list = []
                    let v162 : char list = ' ' :: v161 
                    let v165 : char list = ''' :: v162 
                    let v168 : char list = '"' :: v165 
                    let v171 : (char list -> (char [])) = List.toArray
                    let v172 : (char []) = v171 v168
                    let v175 : string = $"parsing.none_of / unexpected end of input / chars: %A{v172} / s: %A{struct (v11, 1, 1)}"
                    US15_1(v175)
                else
                    let v177 : char = v7.[int 0]
                    let v178 : (string -> int32) = String.length
                    let v179 : int32 = v178 v7
                    let v180 : (int32 -> int32) = int32
                    let v181 : int32 = v180 1
                    let v182 : (int32 -> int32) = int32
                    let v183 : int32 = v182 v179
                    let v184 : string = v7.[int v181..int v183]
                    let v185 : int64 = 0L
                    let v186 : bool = method50(v177, v185)
                    let v187 : bool = v186 = false
                    if v187 then
                        let v188 : (char -> string) = _.ToString()
                        let v189 : string = v188 v177
                        let v192 : int32 = v189.Length
                        let v193 : (char []) = Array.zeroCreate<char> (v192)
                        let v194 : Mut5 = {l0 = 0} : Mut5
                        while method43(v192, v194) do
                            let v196 : int32 = v194.l0
                            let v197 : char = v189.[int v196]
                            v193.[int v196] <- v197
                            let v198 : int32 = v196 + 1
                            v194.l0 <- v198
                            ()
                        let v199 : char list = v193 |> Array.toList
                        let v200 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v201 : (char -> (UH0 -> UH0)) = method44()
                        let v202 : (char list -> (UH0 -> UH0)) = v200 v201
                        let v203 : (UH0 -> UH0) = v202 v199
                        let v204 : UH0 = UH0_0
                        let v205 : UH0 = v203 v204
                        let v210 : int32 = 1
                        let v211 : int32 = 1
                        let struct (v212 : System.Text.StringBuilder, v213 : int32, v214 : int32) = method45(v205, v11, v210, v211)
                        US15_0(v177, v184, v212, v213, v214)
                    else
                        let v216 : char list = []
                        let v217 : char list = ' ' :: v216 
                        let v220 : char list = ''' :: v217 
                        let v223 : char list = '"' :: v220 
                        let v226 : (char list -> (char [])) = List.toArray
                        let v227 : (char []) = v226 v223
                        let v230 : string = $"parsing.none_of / unexpected char: '{v177}' / chars: %A{v227} / s: %A{struct (v11, 1, 1)}"
                        US15_1(v230)
            let v245 : US15 =
                match v233 with
                | US15_1(v242) -> (* Error *)
                    US15_1(v242)
                | US15_0(v234, v235, v236, v237, v238) -> (* Ok *)
                    let v239 : bool = '\\' = v234
                    let v240 : char =
                        if v239 then
                            '/'
                        else
                            v234
                    US15_0(v240, v235, v236, v237, v238)
            let v259 : US16 =
                match v245 with
                | US15_1(v246) -> (* Error *)
                    US16_1(v246)
                | US15_0(v248, v249, v250, v251, v252) -> (* Ok *)
                    let v253 : (char -> string) = _.ToString()
                    let v254 : string = v253 v248
                    method51(v254, v249, v250, v251, v252)
            match v259 with
            | US16_1(v265) -> (* Error *)
                let v266 : int32 = v7.Length
                let v267 : bool = v266 = 0
                let v271 : US18 =
                    if v267 then
                        US18_0(v7, v11, 1, 1)
                    else
                        let v269 : string = $"parsing.eof / expected end of input / input: %A{v7}"
                        US18_1(v269)
                let v280 : US16 =
                    match v271 with
                    | US18_1(v277) -> (* Error *)
                        US16_1(v277)
                    | US18_0(v272, v273, v274, v275) -> (* Ok *)
                        US16_0(v6, v272, v273, v274, v275)
                match v280 with
                | US16_1(v296) -> (* Error *)
                    US16_1(v296)
                | US16_0(v281, v282, v283, v284, v285) -> (* Ok *)
                    let v286 : int32 = 0
                    let v287 : int32 = method52(v282, v286)
                    let v288 : (string -> int32) = String.length
                    let v289 : int32 = v288 v282
                    let v290 : (int32 -> int32) = int32
                    let v291 : int32 = v290 v287
                    let v292 : (int32 -> int32) = int32
                    let v293 : int32 = v292 v289
                    let v294 : string = v282.[int v291..int v293]
                    US16_0(v281, v294, v283, v284, v285)
            | US16_0(v260, v261, v262, v263, v264) -> (* Ok *)
                v259
        | US16_0(v154, v155, v156, v157, v158) -> (* Ok *)
            v153
    let v471 : US19 =
        match v303 with
        | US16_1(v468) -> (* Error *)
            US19_1(v468)
        | US16_0(v304, v305, v306, v307, v308) -> (* Ok *)
            let v309 : bool = "" = v305
            let v372 : US15 =
                if v309 then
                    let v310 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v306, v307, v308)}"
                    US15_1(v310)
                else
                    let v312 : char = v305.[int 0]
                    let v313 : bool = v312 = ' '
                    if v313 then
                        let v314 : (string -> int32) = String.length
                        let v315 : int32 = v314 v305
                        let v316 : (int32 -> int32) = int32
                        let v317 : int32 = v316 1
                        let v318 : (int32 -> int32) = int32
                        let v319 : int32 = v318 v315
                        let v320 : string = v305.[int v317..int v319]
                        let v321 : (char -> string) = _.ToString()
                        let v322 : string = v321 v312
                        let v325 : int32 = v322.Length
                        let v326 : (char []) = Array.zeroCreate<char> (v325)
                        let v327 : Mut5 = {l0 = 0} : Mut5
                        while method43(v325, v327) do
                            let v329 : int32 = v327.l0
                            let v330 : char = v322.[int v329]
                            v326.[int v329] <- v330
                            let v331 : int32 = v329 + 1
                            v327.l0 <- v331
                            ()
                        let v332 : char list = v326 |> Array.toList
                        let v333 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v334 : (char -> (UH0 -> UH0)) = method44()
                        let v335 : (char list -> (UH0 -> UH0)) = v333 v334
                        let v336 : (UH0 -> UH0) = v335 v332
                        let v337 : UH0 = UH0_0
                        let v338 : UH0 = v336 v337
                        let struct (v343 : System.Text.StringBuilder, v344 : int32, v345 : int32) = method45(v338, v306, v307, v308)
                        US15_0(v312, v320, v343, v344, v345)
                    else
                        let v347 : (string -> int32) = String.length
                        let v348 : int32 = v347 v305
                        let v349 : string = "\n"
                        let v350 : int32 = v305.IndexOf v349 
                        let v351 : int32 = v350 - 1
                        let v352 : bool = -2 = v351
                        let v353 : int32 =
                            if v352 then
                                v348
                            else
                                v351
                        let v354 : (int32 -> int32) = int32
                        let v355 : int32 = v354 0
                        let v356 : (int32 -> int32) = int32
                        let v357 : int32 = v356 v353
                        let v358 : string = v305.[int v355..int v357]
                        let v359 : string = $"parsing.p_char / expected: '{' '}' / line: {v307} / col: {v308}
{v306}{v358}"
                        let v360 : int32 = v308 - 1
                        let v361 : (int32 -> (string -> string)) = String.replicate
                        let v362 : (string -> string) = v361 v360
                        let v363 : string = " "
                        let v364 : string = v362 v363
                        let v367 : string = "^"
                        let v368 : string = v364 + v367 
                        let v369 : string = $"{v359}
{v368}
"
                        US15_1(v369)
            let v384 : US20 =
                match v372 with
                | US15_1(v380) -> (* Error *)
                    let v381 : US17 = US17_1
                    US20_0(v381, v305, v306, v307, v308)
                | US15_0(v373, v374, v375, v376, v377) -> (* Ok *)
                    let v378 : US17 = US17_0(v373)
                    US20_0(v378, v374, v375, v376, v377)
            let v445 : US16 =
                match v384 with
                | US20_1(v442) -> (* Error *)
                    US16_1(v442)
                | US20_0(v385, v386, v387, v388, v389) -> (* Ok *)
                    let v390 : bool = "" = v386
                    let v427 : US15 =
                        if v390 then
                            let v391 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v387, v388, v389)}"
                            US15_1(v391)
                        else
                            let v393 : char = v386.[int 0]
                            let v394 : (string -> int32) = String.length
                            let v395 : int32 = v394 v386
                            let v396 : (int32 -> int32) = int32
                            let v397 : int32 = v396 1
                            let v398 : (int32 -> int32) = int32
                            let v399 : int32 = v398 v395
                            let v400 : string = v386.[int v397..int v399]
                            let v401 : (char -> string) = _.ToString()
                            let v402 : string = v401 v393
                            let v405 : int32 = v402.Length
                            let v406 : (char []) = Array.zeroCreate<char> (v405)
                            let v407 : Mut5 = {l0 = 0} : Mut5
                            while method43(v405, v407) do
                                let v409 : int32 = v407.l0
                                let v410 : char = v402.[int v409]
                                v406.[int v409] <- v410
                                let v411 : int32 = v409 + 1
                                v407.l0 <- v411
                                ()
                            let v412 : char list = v406 |> Array.toList
                            let v413 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v414 : (char -> (UH0 -> UH0)) = method44()
                            let v415 : (char list -> (UH0 -> UH0)) = v413 v414
                            let v416 : (UH0 -> UH0) = v415 v412
                            let v417 : UH0 = UH0_0
                            let v418 : UH0 = v416 v417
                            let struct (v423 : System.Text.StringBuilder, v424 : int32, v425 : int32) = method45(v418, v387, v388, v389)
                            US15_0(v393, v400, v423, v424, v425)
                    match v427 with
                    | US15_1(v428) -> (* Error *)
                        US16_1(v428)
                    | US15_0(v430, v431, v432, v433, v434) -> (* Ok *)
                        let v435 : (char -> string) = _.ToString()
                        let v436 : string = v435 v430
                        method53(v436, v431, v432, v433, v434)
            let v457 : US21 =
                match v445 with
                | US16_1(v453) -> (* Error *)
                    let v454 : US1 = US1_1
                    US21_0(v454, v305, v306, v307, v308)
                | US16_0(v446, v447, v448, v449, v450) -> (* Ok *)
                    let v451 : US1 = US1_0(v446)
                    US21_0(v451, v447, v448, v449, v450)
            match v457 with
            | US21_1(v464) -> (* Error *)
                US19_1(v464)
            | US21_0(v458, v459, v460, v461, v462) -> (* Ok *)
                US19_0(v304, v458, v459, v460, v461, v462)
    match v471 with
    | US19_1(v479) -> (* Error *)
        US14_1(v479)
    | US19_0(v472, v473, v474, v475, v476, v477) -> (* Ok *)
        US14_0(v472, v473)
and method56 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US17_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US17_1
        let v23 : char =
            match v19 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method56(v0, v25)
and method57 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v82 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v25 : char = v1.[int 0]
            let v26 : (string -> int32) = String.length
            let v27 : int32 = v26 v1
            let v28 : (int32 -> int32) = int32
            let v29 : int32 = v28 1
            let v30 : (int32 -> int32) = int32
            let v31 : int32 = v30 v27
            let v32 : string = v1.[int v29..int v31]
            let v33 : int64 = 0L
            let v34 : bool = method56(v25, v33)
            let v35 : bool = v34 = false
            if v35 then
                let v36 : (char -> string) = _.ToString()
                let v37 : string = v36 v25
                let v40 : int32 = v37.Length
                let v41 : (char []) = Array.zeroCreate<char> (v40)
                let v42 : Mut5 = {l0 = 0} : Mut5
                while method43(v40, v42) do
                    let v44 : int32 = v42.l0
                    let v45 : char = v37.[int v44]
                    v41.[int v44] <- v45
                    let v46 : int32 = v44 + 1
                    v42.l0 <- v46
                    ()
                let v47 : char list = v41 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method44()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v47
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v58 : System.Text.StringBuilder, v59 : int32, v60 : int32) = method45(v53, v2, v3, v4)
                US15_0(v25, v32, v58, v59, v60)
            else
                let v62 : char list = []
                let v63 : char list = ' ' :: v62 
                let v66 : char list = '"' :: v63 
                let v69 : char list = '`' :: v66 
                let v72 : char list = '\\' :: v69 
                let v75 : (char list -> (char [])) = List.toArray
                let v76 : (char []) = v75 v72
                let v79 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v76} / s: %A{struct (v2, v3, v4)}"
                US15_1(v79)
    match v82 with
    | US15_1(v94) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v83, v84, v85, v86, v87) -> (* Ok *)
        let v88 : (char -> string) = _.ToString()
        let v89 : string = v88 v83
        let v92 : string = v0 + v89 
        method57(v92, v84, v85, v86, v87)
and method59 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method59(v0, v21)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v67 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '\\'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v20 : int32 = v17.Length
                let v21 : (char []) = Array.zeroCreate<char> (v20)
                let v22 : Mut5 = {l0 = 0} : Mut5
                while method43(v20, v22) do
                    let v24 : int32 = v22.l0
                    let v25 : char = v17.[int v24]
                    v21.[int v24] <- v25
                    let v26 : int32 = v24 + 1
                    v22.l0 <- v26
                    ()
                let v27 : char list = v21 |> Array.toList
                let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v29 : (char -> (UH0 -> UH0)) = method44()
                let v30 : (char list -> (UH0 -> UH0)) = v28 v29
                let v31 : (UH0 -> UH0) = v30 v27
                let v32 : UH0 = UH0_0
                let v33 : UH0 = v31 v32
                let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
                US15_0(v7, v15, v38, v39, v40)
            else
                let v42 : (string -> int32) = String.length
                let v43 : int32 = v42 v0
                let v44 : string = "\n"
                let v45 : int32 = v0.IndexOf v44 
                let v46 : int32 = v45 - 1
                let v47 : bool = -2 = v46
                let v48 : int32 =
                    if v47 then
                        v43
                    else
                        v46
                let v49 : (int32 -> int32) = int32
                let v50 : int32 = v49 0
                let v51 : (int32 -> int32) = int32
                let v52 : int32 = v51 v48
                let v53 : string = v0.[int v50..int v52]
                let v54 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v53}"
                let v55 : int32 = v3 - 1
                let v56 : (int32 -> (string -> string)) = String.replicate
                let v57 : (string -> string) = v56 v55
                let v58 : string = " "
                let v59 : string = v57 v58
                let v62 : string = "^"
                let v63 : string = v59 + v62 
                let v64 : string = $"{v54}
{v63}
"
                US15_1(v64)
    let v114 : US15 =
        match v67 with
        | US15_1(v111) -> (* Error *)
            US15_1(v111)
        | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
            let v73 : bool = "" = v69
            if v73 then
                let v74 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v70, v71, v72)}"
                US15_1(v74)
            else
                let v76 : char = v69.[int 0]
                let v77 : (string -> int32) = String.length
                let v78 : int32 = v77 v69
                let v79 : (int32 -> int32) = int32
                let v80 : int32 = v79 1
                let v81 : (int32 -> int32) = int32
                let v82 : int32 = v81 v78
                let v83 : string = v69.[int v80..int v82]
                let v84 : (char -> string) = _.ToString()
                let v85 : string = v84 v76
                let v88 : int32 = v85.Length
                let v89 : (char []) = Array.zeroCreate<char> (v88)
                let v90 : Mut5 = {l0 = 0} : Mut5
                while method43(v88, v90) do
                    let v92 : int32 = v90.l0
                    let v93 : char = v85.[int v92]
                    v89.[int v92] <- v93
                    let v94 : int32 = v92 + 1
                    v90.l0 <- v94
                    ()
                let v95 : char list = v89 |> Array.toList
                let v96 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v97 : (char -> (UH0 -> UH0)) = method44()
                let v98 : (char list -> (UH0 -> UH0)) = v96 v97
                let v99 : (UH0 -> UH0) = v98 v95
                let v100 : UH0 = UH0_0
                let v101 : UH0 = v99 v100
                let struct (v106 : System.Text.StringBuilder, v107 : int32, v108 : int32) = method45(v101, v70, v71, v72)
                US15_0(v76, v83, v106, v107, v108)
    match v114 with
    | US15_1(v122) -> (* Error *)
        US16_1(v122)
    | US15_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v120 : string = $"{'\\'}{v115}"
        US16_0(v120, v116, v117, v118, v119)
and closure36 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v67 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '`'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v20 : int32 = v17.Length
                let v21 : (char []) = Array.zeroCreate<char> (v20)
                let v22 : Mut5 = {l0 = 0} : Mut5
                while method43(v20, v22) do
                    let v24 : int32 = v22.l0
                    let v25 : char = v17.[int v24]
                    v21.[int v24] <- v25
                    let v26 : int32 = v24 + 1
                    v22.l0 <- v26
                    ()
                let v27 : char list = v21 |> Array.toList
                let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v29 : (char -> (UH0 -> UH0)) = method44()
                let v30 : (char list -> (UH0 -> UH0)) = v28 v29
                let v31 : (UH0 -> UH0) = v30 v27
                let v32 : UH0 = UH0_0
                let v33 : UH0 = v31 v32
                let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
                US15_0(v7, v15, v38, v39, v40)
            else
                let v42 : (string -> int32) = String.length
                let v43 : int32 = v42 v0
                let v44 : string = "\n"
                let v45 : int32 = v0.IndexOf v44 
                let v46 : int32 = v45 - 1
                let v47 : bool = -2 = v46
                let v48 : int32 =
                    if v47 then
                        v43
                    else
                        v46
                let v49 : (int32 -> int32) = int32
                let v50 : int32 = v49 0
                let v51 : (int32 -> int32) = int32
                let v52 : int32 = v51 v48
                let v53 : string = v0.[int v50..int v52]
                let v54 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v53}"
                let v55 : int32 = v3 - 1
                let v56 : (int32 -> (string -> string)) = String.replicate
                let v57 : (string -> string) = v56 v55
                let v58 : string = " "
                let v59 : string = v57 v58
                let v62 : string = "^"
                let v63 : string = v59 + v62 
                let v64 : string = $"{v54}
{v63}
"
                US15_1(v64)
    let v114 : US15 =
        match v67 with
        | US15_1(v111) -> (* Error *)
            US15_1(v111)
        | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
            let v73 : bool = "" = v69
            if v73 then
                let v74 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v70, v71, v72)}"
                US15_1(v74)
            else
                let v76 : char = v69.[int 0]
                let v77 : (string -> int32) = String.length
                let v78 : int32 = v77 v69
                let v79 : (int32 -> int32) = int32
                let v80 : int32 = v79 1
                let v81 : (int32 -> int32) = int32
                let v82 : int32 = v81 v78
                let v83 : string = v69.[int v80..int v82]
                let v84 : (char -> string) = _.ToString()
                let v85 : string = v84 v76
                let v88 : int32 = v85.Length
                let v89 : (char []) = Array.zeroCreate<char> (v88)
                let v90 : Mut5 = {l0 = 0} : Mut5
                while method43(v88, v90) do
                    let v92 : int32 = v90.l0
                    let v93 : char = v85.[int v92]
                    v89.[int v92] <- v93
                    let v94 : int32 = v92 + 1
                    v90.l0 <- v94
                    ()
                let v95 : char list = v89 |> Array.toList
                let v96 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v97 : (char -> (UH0 -> UH0)) = method44()
                let v98 : (char list -> (UH0 -> UH0)) = v96 v97
                let v99 : (UH0 -> UH0) = v98 v95
                let v100 : UH0 = UH0_0
                let v101 : UH0 = v99 v100
                let struct (v106 : System.Text.StringBuilder, v107 : int32, v108 : int32) = method45(v101, v70, v71, v72)
                US15_0(v76, v83, v106, v107, v108)
    match v114 with
    | US15_1(v122) -> (* Error *)
        US16_1(v122)
    | US15_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v120 : string = $"{'`'}{v115}"
        US16_0(v120, v116, v117, v118, v119)
and method60 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US16 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US16 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US16_1(v15) -> (* Error *)
            method60(v0, v1, v2, v3, v8)
        | US16_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US16_1(v5)
and method61 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method61(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method58 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method59(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method43(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method44()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method45(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = '"' :: v59 
                let v63 : char list = '`' :: v60 
                let v66 : char list = '\\' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v90 : US16 =
        match v76 with
        | US15_1(v87) -> (* Error *)
            US16_1(v87)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : (char -> string) = _.ToString()
            let v83 : string = v82 v77
            US16_0(v83, v78, v79, v80, v81)
    let v104 : US16 =
        match v90 with
        | US16_1(v96) -> (* Error *)
            let v97 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure35()
            let v98 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure36()
            let v99 : UH3 = UH3_0
            let v100 : UH3 = UH3_1(v98, v99)
            let v101 : UH3 = UH3_1(v97, v100)
            method60(v1, v2, v3, v4, v101)
        | US16_0(v91, v92, v93, v94, v95) -> (* Ok *)
            v90
    match v104 with
    | US16_1(v112) -> (* Error *)
        let v113 : UH2 = UH2_0
        let v114 : UH2 = method61(v0, v113)
        US23_0(v114, v1, v2, v3, v4)
    | US16_0(v105, v106, v107, v108, v109) -> (* Ok *)
        let v110 : UH2 = UH2_1(v105, v0)
        method58(v110, v106, v107, v108, v109)
and method62 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method62(v3, v1)
        let v5 : string list = v2 :: v4 
        v5
    | UH2_0 -> (* Nil *)
        v1
and method63 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method59(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method43(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method44()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method45(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = '"' :: v59 
                let v63 : char list = '`' :: v60 
                let v66 : char list = '\\' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v90 : US16 =
        match v76 with
        | US15_1(v87) -> (* Error *)
            US16_1(v87)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : (char -> string) = _.ToString()
            let v83 : string = v82 v77
            US16_0(v83, v78, v79, v80, v81)
    match v90 with
    | US16_1(v98) -> (* Error *)
        let v99 : UH2 = UH2_0
        let v100 : UH2 = method61(v0, v99)
        US23_0(v100, v1, v2, v3, v4)
    | US16_0(v91, v92, v93, v94, v95) -> (* Ok *)
        let v96 : UH2 = UH2_1(v91, v0)
        method63(v96, v92, v93, v94, v95)
and method64 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method64(v0, v6)
        else
            v1
and method55 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v82 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v25 : char = v1.[int 0]
            let v26 : (string -> int32) = String.length
            let v27 : int32 = v26 v1
            let v28 : (int32 -> int32) = int32
            let v29 : int32 = v28 1
            let v30 : (int32 -> int32) = int32
            let v31 : int32 = v30 v27
            let v32 : string = v1.[int v29..int v31]
            let v33 : int64 = 0L
            let v34 : bool = method56(v25, v33)
            let v35 : bool = v34 = false
            if v35 then
                let v36 : (char -> string) = _.ToString()
                let v37 : string = v36 v25
                let v40 : int32 = v37.Length
                let v41 : (char []) = Array.zeroCreate<char> (v40)
                let v42 : Mut5 = {l0 = 0} : Mut5
                while method43(v40, v42) do
                    let v44 : int32 = v42.l0
                    let v45 : char = v37.[int v44]
                    v41.[int v44] <- v45
                    let v46 : int32 = v44 + 1
                    v42.l0 <- v46
                    ()
                let v47 : char list = v41 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method44()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v47
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v58 : System.Text.StringBuilder, v59 : int32, v60 : int32) = method45(v53, v2, v3, v4)
                US15_0(v25, v32, v58, v59, v60)
            else
                let v62 : char list = []
                let v63 : char list = ' ' :: v62 
                let v66 : char list = '"' :: v63 
                let v69 : char list = '`' :: v66 
                let v72 : char list = '\\' :: v69 
                let v75 : (char list -> (char [])) = List.toArray
                let v76 : (char []) = v75 v72
                let v79 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v76} / s: %A{struct (v2, v3, v4)}"
                US15_1(v79)
    let v96 : US16 =
        match v82 with
        | US15_1(v83) -> (* Error *)
            US16_1(v83)
        | US15_0(v85, v86, v87, v88, v89) -> (* Ok *)
            let v90 : (char -> string) = _.ToString()
            let v91 : string = v90 v85
            method57(v91, v86, v87, v88, v89)
    let v341 : US16 =
        match v96 with
        | US16_1(v102) -> (* Error *)
            let v165 : US15 =
                if v5 then
                    let v103 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
                    US15_1(v103)
                else
                    let v105 : char = v1.[int 0]
                    let v106 : bool = v105 = '"'
                    if v106 then
                        let v107 : (string -> int32) = String.length
                        let v108 : int32 = v107 v1
                        let v109 : (int32 -> int32) = int32
                        let v110 : int32 = v109 1
                        let v111 : (int32 -> int32) = int32
                        let v112 : int32 = v111 v108
                        let v113 : string = v1.[int v110..int v112]
                        let v114 : (char -> string) = _.ToString()
                        let v115 : string = v114 v105
                        let v118 : int32 = v115.Length
                        let v119 : (char []) = Array.zeroCreate<char> (v118)
                        let v120 : Mut5 = {l0 = 0} : Mut5
                        while method43(v118, v120) do
                            let v122 : int32 = v120.l0
                            let v123 : char = v115.[int v122]
                            v119.[int v122] <- v123
                            let v124 : int32 = v122 + 1
                            v120.l0 <- v124
                            ()
                        let v125 : char list = v119 |> Array.toList
                        let v126 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v127 : (char -> (UH0 -> UH0)) = method44()
                        let v128 : (char list -> (UH0 -> UH0)) = v126 v127
                        let v129 : (UH0 -> UH0) = v128 v125
                        let v130 : UH0 = UH0_0
                        let v131 : UH0 = v129 v130
                        let struct (v136 : System.Text.StringBuilder, v137 : int32, v138 : int32) = method45(v131, v2, v3, v4)
                        US15_0(v105, v113, v136, v137, v138)
                    else
                        let v140 : (string -> int32) = String.length
                        let v141 : int32 = v140 v1
                        let v142 : string = "\n"
                        let v143 : int32 = v1.IndexOf v142 
                        let v144 : int32 = v143 - 1
                        let v145 : bool = -2 = v144
                        let v146 : int32 =
                            if v145 then
                                v141
                            else
                                v144
                        let v147 : (int32 -> int32) = int32
                        let v148 : int32 = v147 0
                        let v149 : (int32 -> int32) = int32
                        let v150 : int32 = v149 v146
                        let v151 : string = v1.[int v148..int v150]
                        let v152 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v151}"
                        let v153 : int32 = v4 - 1
                        let v154 : (int32 -> (string -> string)) = String.replicate
                        let v155 : (string -> string) = v154 v153
                        let v156 : string = " "
                        let v157 : string = v155 v156
                        let v160 : string = "^"
                        let v161 : string = v157 + v160 
                        let v162 : string = $"{v152}
{v161}
"
                        US15_1(v162)
            let v282 : US16 =
                match v165 with
                | US15_1(v279) -> (* Error *)
                    US16_1(v279)
                | US15_0(v166, v167, v168, v169, v170) -> (* Ok *)
                    let v171 : UH2 = UH2_0
                    let v172 : US23 = method58(v171, v167, v168, v169, v170)
                    let v193 : US16 =
                        match v172 with
                        | US23_1(v190) -> (* Error *)
                            US16_1(v190)
                        | US23_0(v173, v174, v175, v176, v177) -> (* Ok *)
                            let v178 : string list = []
                            let v179 : string list = method62(v173, v178)
                            let v180 : string seq = seq { for i = 0 to v179.Length - 1 do yield v179.[i] }
                            let v183 : (string -> (string seq -> string)) = String.concat
                            let v184 : string = ""
                            let v185 : (string seq -> string) = v183 v184
                            let v186 : string = v185 v180
                            US16_0(v186, v174, v175, v176, v177)
                    match v193 with
                    | US16_1(v274) -> (* Error *)
                        let v275 : string = "between / expected content"
                        US16_1(v275)
                    | US16_0(v194, v195, v196, v197, v198) -> (* Ok *)
                        let v199 : bool = "" = v195
                        let v262 : US15 =
                            if v199 then
                                let v200 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v196, v197, v198)}"
                                US15_1(v200)
                            else
                                let v202 : char = v195.[int 0]
                                let v203 : bool = v202 = '"'
                                if v203 then
                                    let v204 : (string -> int32) = String.length
                                    let v205 : int32 = v204 v195
                                    let v206 : (int32 -> int32) = int32
                                    let v207 : int32 = v206 1
                                    let v208 : (int32 -> int32) = int32
                                    let v209 : int32 = v208 v205
                                    let v210 : string = v195.[int v207..int v209]
                                    let v211 : (char -> string) = _.ToString()
                                    let v212 : string = v211 v202
                                    let v215 : int32 = v212.Length
                                    let v216 : (char []) = Array.zeroCreate<char> (v215)
                                    let v217 : Mut5 = {l0 = 0} : Mut5
                                    while method43(v215, v217) do
                                        let v219 : int32 = v217.l0
                                        let v220 : char = v212.[int v219]
                                        v216.[int v219] <- v220
                                        let v221 : int32 = v219 + 1
                                        v217.l0 <- v221
                                        ()
                                    let v222 : char list = v216 |> Array.toList
                                    let v223 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v224 : (char -> (UH0 -> UH0)) = method44()
                                    let v225 : (char list -> (UH0 -> UH0)) = v223 v224
                                    let v226 : (UH0 -> UH0) = v225 v222
                                    let v227 : UH0 = UH0_0
                                    let v228 : UH0 = v226 v227
                                    let struct (v233 : System.Text.StringBuilder, v234 : int32, v235 : int32) = method45(v228, v196, v197, v198)
                                    US15_0(v202, v210, v233, v234, v235)
                                else
                                    let v237 : (string -> int32) = String.length
                                    let v238 : int32 = v237 v195
                                    let v239 : string = "\n"
                                    let v240 : int32 = v195.IndexOf v239 
                                    let v241 : int32 = v240 - 1
                                    let v242 : bool = -2 = v241
                                    let v243 : int32 =
                                        if v242 then
                                            v238
                                        else
                                            v241
                                    let v244 : (int32 -> int32) = int32
                                    let v245 : int32 = v244 0
                                    let v246 : (int32 -> int32) = int32
                                    let v247 : int32 = v246 v243
                                    let v248 : string = v195.[int v245..int v247]
                                    let v249 : string = $"parsing.p_char / expected: '{'"'}' / line: {v197} / col: {v198}
{v196}{v248}"
                                    let v250 : int32 = v198 - 1
                                    let v251 : (int32 -> (string -> string)) = String.replicate
                                    let v252 : (string -> string) = v251 v250
                                    let v253 : string = " "
                                    let v254 : string = v252 v253
                                    let v257 : string = "^"
                                    let v258 : string = v254 + v257 
                                    let v259 : string = $"{v249}
{v258}
"
                                    US15_1(v259)
                        match v262 with
                        | US15_1(v269) -> (* Error *)
                            let v270 : string = $"between / expected closing delimiter / e: %A{v269} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v167, v168, v169, v170)} / rest2: %A{struct (v195, v196, v197, v198)}"
                            US16_1(v270)
                        | US15_0(v263, v264, v265, v266, v267) -> (* Ok *)
                            US16_0(v194, v264, v265, v266, v267)
            match v282 with
            | US16_1(v288) -> (* Error *)
                let v289 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure35()
                let v290 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure36()
                let v291 : UH3 = UH3_0
                let v292 : UH3 = UH3_1(v290, v291)
                let v293 : UH3 = UH3_1(v289, v292)
                let v294 : US16 = method60(v1, v2, v3, v4, v293)
                let v305 : US16 =
                    match v294 with
                    | US16_1(v302) -> (* Error *)
                        US16_1(v302)
                    | US16_0(v295, v296, v297, v298, v299) -> (* Ok *)
                        let v300 : string = ""
                        US16_0(v300, v296, v297, v298, v299)
                let v316 : US23 =
                    match v305 with
                    | US16_1(v313) -> (* Error *)
                        US23_1(v313)
                    | US16_0(v306, v307, v308, v309, v310) -> (* Ok *)
                        let v311 : UH2 = UH2_0
                        method63(v311, v307, v308, v309, v310)
                match v316 with
                | US23_1(v334) -> (* Error *)
                    US16_1(v334)
                | US23_0(v317, v318, v319, v320, v321) -> (* Ok *)
                    let v322 : string list = []
                    let v323 : string list = method62(v317, v322)
                    let v324 : string seq = seq { for i = 0 to v323.Length - 1 do yield v323.[i] }
                    let v327 : (string -> (string seq -> string)) = String.concat
                    let v328 : string = ""
                    let v329 : (string seq -> string) = v327 v328
                    let v330 : string = v329 v324
                    US16_0(v330, v318, v319, v320, v321)
            | US16_0(v283, v284, v285, v286, v287) -> (* Ok *)
                v282
        | US16_0(v97, v98, v99, v100, v101) -> (* Ok *)
            v96
    match v341 with
    | US16_1(v342) -> (* Error *)
        let v343 : UH2 = UH2_0
        let v344 : UH2 = method61(v0, v343)
        US23_0(v344, v1, v2, v3, v4)
    | US16_0(v346, v347, v348, v349, v350) -> (* Ok *)
        let v351 : int32 = 0
        let v352 : int32 = method64(v347, v351)
        let v353 : bool = 0 = v352
        let v364 : US18 =
            if v353 then
                let v354 : string = "spaces1 / expected at least one space"
                US18_1(v354)
            else
                let v356 : (string -> int32) = String.length
                let v357 : int32 = v356 v347
                let v358 : (int32 -> int32) = int32
                let v359 : int32 = v358 v352
                let v360 : (int32 -> int32) = int32
                let v361 : int32 = v360 v357
                let v362 : string = v347.[int v359..int v361]
                US18_0(v362, v348, v349, v350)
        match v364 with
        | US18_1(v365) -> (* Error *)
            let v366 : UH2 = UH2_0
            let v367 : UH2 = UH2_1(v346, v366)
            let v368 : UH2 = method61(v0, v367)
            US23_0(v368, v347, v348, v349, v350)
        | US18_0(v370, v371, v372, v373) -> (* Ok *)
            let v374 : UH2 = UH2_1(v346, v0)
            method55(v374, v370, v371, v372, v373)
and method54 (v0 : string) : US22 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v11 : System.Text.StringBuilder = v10 v6
    let v12 : UH2 = UH2_0
    let v13 : int32 = 1
    let v14 : int32 = 1
    let v15 : US23 = method55(v12, v7, v11, v13, v14)
    match v15 with
    | US23_1(v28) -> (* Error *)
        US22_1(v28)
    | US23_0(v16, v17, v18, v19, v20) -> (* Ok *)
        let v21 : string list = []
        let v22 : string list = method62(v16, v21)
        let v23 : (string list -> (string [])) = List.toArray
        let v24 : (string []) = v23 v22
        US22_0(v24)
and closure37 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure2()
    let v11 : unit = (fun () -> v10 (); v9) ()
    let struct (v25 : Mut0, v26 : Mut1, v27 : Mut2, v28 : Mut3, v29 : Mut4, v30 : int64 option) = TraceState.trace_state.Value
    let v43 : unit = ()
    let v44 : unit = (fun () -> v10 (); v43) ()
    let struct (v58 : Mut0, v59 : Mut1, v60 : Mut2, v61 : Mut3, v62 : Mut4, v63 : int64 option) = TraceState.trace_state.Value
    let v76 : US0 = v62.l0
    let v77 : bool = v60.l0
    let v78 : bool = v77 = false
    let v81 : bool =
        if v78 then
            false
        else
            let v79 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v76
            let v80 : bool = 1 >= v79
            v80
    if v81 then
        let v82 : unit = ()
        let v83 : (unit -> unit) = closure7(v25)
        let v84 : unit = (fun () -> v83 (); v82) ()
        let v87 : unit = ()
        let v88 : unit = (fun () -> v10 (); v87) ()
        let struct (v102 : Mut0, v103 : Mut1, v104 : Mut2, v105 : Mut3, v106 : Mut4, v107 : int64 option) = TraceState.trace_state.Value
        let v120 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v121 : US3 option = None
        let _v121 = ref v121 
        let v122 : US3 option ref = _v121 
        let v123 : (US3 option -> US3 option ref) = closure8(v122)
        let v124 : unit = ()
        let v125 : (unit -> unit) = closure9(v107, v123)
        let v126 : unit = (fun () -> v125 (); v124) ()
        let v129 : US3 option = _v121.Value 
        let v140 : US3 = US3_1
        let v141 : US3 = v129 |> Option.defaultValue v140 
        let v181 : System.DateTime =
            match v141 with
            | US3_1 -> (* None *)
                let v177 : System.DateTime = System.DateTime.Now
                v177
            | US3_0(v145) -> (* Some *)
                let v146 : System.DateTime = System.DateTime.Now
                let v149 : (System.DateTime -> int64) = _.Ticks
                let v150 : int64 = v149 v146
                let v153 : int64 = v150 - v145
                let v154 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v155 : System.TimeSpan = v154 v153
                let v158 : (System.TimeSpan -> int32) = _.Hours
                let v159 : int32 = v158 v155
                let v162 : (System.TimeSpan -> int32) = _.Minutes
                let v163 : int32 = v162 v155
                let v166 : (System.TimeSpan -> int32) = _.Seconds
                let v167 : int32 = v166 v155
                let v170 : (System.TimeSpan -> int32) = _.Milliseconds
                let v171 : int32 = v170 v155
                let v174 : System.DateTime = System.DateTime (1, 1, 1, v159, v163, v167, v171)
                v174
        let v182 : string = method6()
        let v185 : (string -> string) = v181.ToString
        let v186 : string = v185 v182
        let _v120 = v186 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v189 : US3 option = None
        let _v189 = ref v189 
        let v190 : US3 option ref = _v189 
        let v191 : (US3 option -> US3 option ref) = closure8(v190)
        let v192 : unit = ()
        let v193 : (unit -> unit) = closure9(v107, v191)
        let v194 : unit = (fun () -> v193 (); v192) ()
        let v197 : US3 option = _v189.Value 
        let v208 : US3 = US3_1
        let v209 : US3 = v197 |> Option.defaultValue v208 
        let v249 : System.DateTime =
            match v209 with
            | US3_1 -> (* None *)
                let v245 : System.DateTime = System.DateTime.Now
                v245
            | US3_0(v213) -> (* Some *)
                let v214 : System.DateTime = System.DateTime.Now
                let v217 : (System.DateTime -> int64) = _.Ticks
                let v218 : int64 = v217 v214
                let v221 : int64 = v218 - v213
                let v222 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v223 : System.TimeSpan = v222 v221
                let v226 : (System.TimeSpan -> int32) = _.Hours
                let v227 : int32 = v226 v223
                let v230 : (System.TimeSpan -> int32) = _.Minutes
                let v231 : int32 = v230 v223
                let v234 : (System.TimeSpan -> int32) = _.Seconds
                let v235 : int32 = v234 v223
                let v238 : (System.TimeSpan -> int32) = _.Milliseconds
                let v239 : int32 = v238 v223
                let v242 : System.DateTime = System.DateTime (1, 1, 1, v227, v231, v235, v239)
                v242
        let v250 : string = method6()
        let v253 : (string -> string) = v249.ToString
        let v254 : string = v253 v250
        let _v120 = v254 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v257 : string = $"near_sdk::env::block_timestamp()"
        let v258 : uint64 = Fable.Core.RustInterop.emitRustExpr () v257 
        let v259 : US3 option = None
        let _v259 = ref v259 
        let v260 : US3 option ref = _v259 
        let v261 : (US3 option -> US3 option ref) = closure8(v260)
        let v262 : unit = ()
        let v263 : (unit -> unit) = closure9(v107, v261)
        let v264 : unit = (fun () -> v263 (); v262) ()
        let v267 : US3 option = _v259.Value 
        let v278 : US3 = US3_1
        let v279 : US3 = v267 |> Option.defaultValue v278 
        let v288 : uint64 =
            match v279 with
            | US3_1 -> (* None *)
                v258
            | US3_0(v283) -> (* Some *)
                let v284 : (int64 -> uint64) = uint64
                let v285 : uint64 = v284 v283
                let v286 : uint64 = v258 - v285
                v286
        let v289 : uint64 = v288 / 1000000000UL
        let v290 : uint64 = v289 % 60UL
        let v291 : uint64 = v289 / 60UL
        let v292 : uint64 = v291 % 60UL
        let v293 : uint64 = v289 / 3600UL
        let v294 : uint64 = v293 % 24UL
        let v295 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v296 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v294, v292, v290) v295 
        let v297 : string = "fable_library_rust::String_::fromString($0)"
        let v298 : string = Fable.Core.RustInterop.emitRustExpr v296 v297 
        let _v120 = v298 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v299 : US3 option = None
        let _v299 = ref v299 
        let v300 : US3 option ref = _v299 
        let v301 : (US3 option -> US3 option ref) = closure8(v300)
        let v302 : unit = ()
        let v303 : (unit -> unit) = closure9(v107, v301)
        let v304 : unit = (fun () -> v303 (); v302) ()
        let v307 : US3 option = _v299.Value 
        let v318 : US3 = US3_1
        let v319 : US3 = v307 |> Option.defaultValue v318 
        let v359 : System.DateTime =
            match v319 with
            | US3_1 -> (* None *)
                let v355 : System.DateTime = System.DateTime.Now
                v355
            | US3_0(v323) -> (* Some *)
                let v324 : System.DateTime = System.DateTime.Now
                let v327 : (System.DateTime -> int64) = _.Ticks
                let v328 : int64 = v327 v324
                let v331 : int64 = v328 - v323
                let v332 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v333 : System.TimeSpan = v332 v331
                let v336 : (System.TimeSpan -> int32) = _.Hours
                let v337 : int32 = v336 v333
                let v340 : (System.TimeSpan -> int32) = _.Minutes
                let v341 : int32 = v340 v333
                let v344 : (System.TimeSpan -> int32) = _.Seconds
                let v345 : int32 = v344 v333
                let v348 : (System.TimeSpan -> int32) = _.Milliseconds
                let v349 : int32 = v348 v333
                let v352 : System.DateTime = System.DateTime (1, 1, 1, v337, v341, v345, v349)
                v352
        let v360 : string = method7()
        let v363 : (string -> string) = v359.ToString
        let v364 : string = v363 v360
        let _v120 = v364 
        #endif
#if FABLE_COMPILER_PYTHON
        let v367 : US3 option = None
        let _v367 = ref v367 
        let v368 : US3 option ref = _v367 
        let v369 : (US3 option -> US3 option ref) = closure8(v368)
        let v370 : unit = ()
        let v371 : (unit -> unit) = closure9(v107, v369)
        let v372 : unit = (fun () -> v371 (); v370) ()
        let v375 : US3 option = _v367.Value 
        let v386 : US3 = US3_1
        let v387 : US3 = v375 |> Option.defaultValue v386 
        let v427 : System.DateTime =
            match v387 with
            | US3_1 -> (* None *)
                let v423 : System.DateTime = System.DateTime.Now
                v423
            | US3_0(v391) -> (* Some *)
                let v392 : System.DateTime = System.DateTime.Now
                let v395 : (System.DateTime -> int64) = _.Ticks
                let v396 : int64 = v395 v392
                let v399 : int64 = v396 - v391
                let v400 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v401 : System.TimeSpan = v400 v399
                let v404 : (System.TimeSpan -> int32) = _.Hours
                let v405 : int32 = v404 v401
                let v408 : (System.TimeSpan -> int32) = _.Minutes
                let v409 : int32 = v408 v401
                let v412 : (System.TimeSpan -> int32) = _.Seconds
                let v413 : int32 = v412 v401
                let v416 : (System.TimeSpan -> int32) = _.Milliseconds
                let v417 : int32 = v416 v401
                let v420 : System.DateTime = System.DateTime (1, 1, 1, v405, v409, v413, v417)
                v420
        let v428 : string = method7()
        let v431 : (string -> string) = v427.ToString
        let v432 : string = v431 v428
        let _v120 = v432 
        #endif
#else
        let v435 : US3 option = None
        let _v435 = ref v435 
        let v436 : US3 option ref = _v435 
        let v437 : (US3 option -> US3 option ref) = closure8(v436)
        let v438 : unit = ()
        let v439 : (unit -> unit) = closure9(v107, v437)
        let v440 : unit = (fun () -> v439 (); v438) ()
        let v443 : US3 option = _v435.Value 
        let v454 : US3 = US3_1
        let v455 : US3 = v443 |> Option.defaultValue v454 
        let v495 : System.DateTime =
            match v455 with
            | US3_1 -> (* None *)
                let v491 : System.DateTime = System.DateTime.Now
                v491
            | US3_0(v459) -> (* Some *)
                let v460 : System.DateTime = System.DateTime.Now
                let v463 : (System.DateTime -> int64) = _.Ticks
                let v464 : int64 = v463 v460
                let v467 : int64 = v464 - v459
                let v468 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v469 : System.TimeSpan = v468 v467
                let v472 : (System.TimeSpan -> int32) = _.Hours
                let v473 : int32 = v472 v469
                let v476 : (System.TimeSpan -> int32) = _.Minutes
                let v477 : int32 = v476 v469
                let v480 : (System.TimeSpan -> int32) = _.Seconds
                let v481 : int32 = v480 v469
                let v484 : (System.TimeSpan -> int32) = _.Milliseconds
                let v485 : int32 = v484 v469
                let v488 : System.DateTime = System.DateTime (1, 1, 1, v473, v477, v481, v485)
                v488
        let v496 : string = method7()
        let v499 : (string -> string) = v495.ToString
        let v500 : string = v499 v496
        let _v120 = v500 
        #endif
        let v503 : string = _v120 
        
        
        
        
        
        let v573 : string = "Debug"
        let v574 : (unit -> string) = v573.ToLower
        let v575 : string = v574 ()
        let v578 : string = v575.PadLeft (7, ' ')
        let v592 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v593 : string = "inline_colorization::color_bright_blue"
        let v594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "&*$0"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v578 v595 
        let v597 : string = "inline_colorization::color_reset"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "\"{v594}{v596}{v598}\""
        let v600 : string = @$"format!(" + v599 + ")"
        let v601 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "fable_library_rust::String_::fromString($0)"
        let v603 : string = Fable.Core.RustInterop.emitRustExpr v601 v602 
        let _v592 = v603 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v604 : string = "inline_colorization::color_bright_blue"
        let v605 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "&*$0"
        let v607 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v578 v606 
        let v608 : string = "inline_colorization::color_reset"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "\"{v605}{v607}{v609}\""
        let v611 : string = @$"format!(" + v610 + ")"
        let v612 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "fable_library_rust::String_::fromString($0)"
        let v614 : string = Fable.Core.RustInterop.emitRustExpr v612 v613 
        let _v592 = v614 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v615 : string = "inline_colorization::color_bright_blue"
        let v616 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "&*$0"
        let v618 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v578 v617 
        let v619 : string = "inline_colorization::color_reset"
        let v620 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v619 
        let v621 : string = "\"{v616}{v618}{v620}\""
        let v622 : string = @$"format!(" + v621 + ")"
        let v623 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v622 
        let v624 : string = "fable_library_rust::String_::fromString($0)"
        let v625 : string = Fable.Core.RustInterop.emitRustExpr v623 v624 
        let _v592 = v625 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v626 : string = "\u001b[94m"
        let v627 : string = method8()
        let v628 : string = v626 + v578 
        let v629 : string = v628 + v627 
        let _v592 = v629 
        #endif
#if FABLE_COMPILER_PYTHON
        let v630 : string = "\u001b[94m"
        let v631 : string = method8()
        let v632 : string = v630 + v578 
        let v633 : string = v632 + v631 
        let _v592 = v633 
        #endif
#else
        let v634 : string = "\u001b[94m"
        let v635 : string = method8()
        let v636 : string = v634 + v578 
        let v637 : string = v636 + v635 
        let _v592 = v637 
        #endif
        let v638 : string = _v592 
        let v644 : int64 = v102.l0
        let v645 : string = method9()
        let v646 : Mut3 = {l0 = v645} : Mut3
        let v647 : string = "{ "
        let v648 : string = $"{v647}"
        let v651 : unit = ()
        let v652 : (unit -> unit) = closure10(v646, v648)
        let v653 : unit = (fun () -> v652 (); v651) ()
        let v656 : string = "file_name"
        let v657 : string = $"{v656}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure10(v646, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = " = "
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v646, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = $"{v7}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure10(v646, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = "; "
        let v683 : string = $"{v682}"
        let v686 : unit = ()
        let v687 : (unit -> unit) = closure10(v646, v683)
        let v688 : unit = (fun () -> v687 (); v686) ()
        let v691 : string = "arguments"
        let v692 : string = $"{v691}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure10(v646, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v665}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure10(v646, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v708 = v712 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v713 : string = "format!(\"{:#?}\", $0)"
        let v714 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v713 
        let v715 : string = "fable_library_rust::String_::fromString($0)"
        let v716 : string = Fable.Core.RustInterop.emitRustExpr v714 v715 
        let _v708 = v716 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v717 : string = "format!(\"{:#?}\", $0)"
        let v718 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v717 
        let v719 : string = "fable_library_rust::String_::fromString($0)"
        let v720 : string = Fable.Core.RustInterop.emitRustExpr v718 v719 
        let _v708 = v720 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v721 : string = $"%A{v8}"
        let _v708 = v721 
        #endif
#if FABLE_COMPILER_PYTHON
        let v724 : string = $"%A{v8}"
        let _v708 = v724 
        #endif
#else
        let v727 : string = $"%A{v8}"
        let _v708 = v727 
        #endif
        let v730 : string = _v708 
        let v735 : string = $"{v730}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure10(v646, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v682}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure10(v646, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "options"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure10(v646, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v665}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure10(v646, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v647}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure10(v646, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = "command"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure10(v646, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = $"{v665}"
        let v788 : unit = ()
        let v789 : (unit -> unit) = closure10(v646, v785)
        let v790 : unit = (fun () -> v789 (); v788) ()
        let v793 : string = $"{v0}"
        let v796 : unit = ()
        let v797 : (unit -> unit) = closure10(v646, v793)
        let v798 : unit = (fun () -> v797 (); v796) ()
        let v801 : string = $"{v682}"
        let v804 : unit = ()
        let v805 : (unit -> unit) = closure10(v646, v801)
        let v806 : unit = (fun () -> v805 (); v804) ()
        let v809 : string = "cancellation_token"
        let v810 : string = $"{v809}"
        let v813 : unit = ()
        let v814 : (unit -> unit) = closure10(v646, v810)
        let v815 : unit = (fun () -> v814 (); v813) ()
        let v818 : string = $"{v665}"
        let v821 : unit = ()
        let v822 : (unit -> unit) = closure10(v646, v818)
        let v823 : unit = (fun () -> v822 (); v821) ()
        let v826 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v827 : string = "format!(\"{:#?}\", $0)"
        let v828 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v827 
        let v829 : string = "fable_library_rust::String_::fromString($0)"
        let v830 : string = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let _v826 = v830 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v831 : string = "format!(\"{:#?}\", $0)"
        let v832 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v831 
        let v833 : string = "fable_library_rust::String_::fromString($0)"
        let v834 : string = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let _v826 = v834 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v835 : string = "format!(\"{:#?}\", $0)"
        let v836 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v835 
        let v837 : string = "fable_library_rust::String_::fromString($0)"
        let v838 : string = Fable.Core.RustInterop.emitRustExpr v836 v837 
        let _v826 = v838 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v839 : string = $"%A{v1}"
        let _v826 = v839 
        #endif
#if FABLE_COMPILER_PYTHON
        let v842 : string = $"%A{v1}"
        let _v826 = v842 
        #endif
#else
        let v845 : string = $"%A{v1}"
        let _v826 = v845 
        #endif
        let v848 : string = _v826 
        let v853 : string = $"{v848}"
        let v856 : unit = ()
        let v857 : (unit -> unit) = closure10(v646, v853)
        let v858 : unit = (fun () -> v857 (); v856) ()
        let v861 : string = $"{v682}"
        let v864 : unit = ()
        let v865 : (unit -> unit) = closure10(v646, v861)
        let v866 : unit = (fun () -> v865 (); v864) ()
        let v869 : string = "environment_variables"
        let v870 : string = $"{v869}"
        let v873 : unit = ()
        let v874 : (unit -> unit) = closure10(v646, v870)
        let v875 : unit = (fun () -> v874 (); v873) ()
        let v878 : string = $"{v665}"
        let v881 : unit = ()
        let v882 : (unit -> unit) = closure10(v646, v878)
        let v883 : unit = (fun () -> v882 (); v881) ()
        let v886 : string = $"%A{v2}"
        let v889 : string = $"{v886}"
        let v892 : unit = ()
        let v893 : (unit -> unit) = closure10(v646, v889)
        let v894 : unit = (fun () -> v893 (); v892) ()
        let v897 : string = $"{v682}"
        let v900 : unit = ()
        let v901 : (unit -> unit) = closure10(v646, v897)
        let v902 : unit = (fun () -> v901 (); v900) ()
        let v905 : string = "on_line"
        let v906 : string = $"{v905}"
        let v909 : unit = ()
        let v910 : (unit -> unit) = closure10(v646, v906)
        let v911 : unit = (fun () -> v910 (); v909) ()
        let v914 : string = $"{v665}"
        let v917 : unit = ()
        let v918 : (unit -> unit) = closure10(v646, v914)
        let v919 : unit = (fun () -> v918 (); v917) ()
        let v922 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v923 : string = "format!(\"{:#?}\", $0)"
        let v924 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v923 
        let v925 : string = "fable_library_rust::String_::fromString($0)"
        let v926 : string = Fable.Core.RustInterop.emitRustExpr v924 v925 
        let _v922 = v926 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v927 : string = "format!(\"{:#?}\", $0)"
        let v928 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v927 
        let v929 : string = "fable_library_rust::String_::fromString($0)"
        let v930 : string = Fable.Core.RustInterop.emitRustExpr v928 v929 
        let _v922 = v930 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v931 : string = "format!(\"{:#?}\", $0)"
        let v932 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v931 
        let v933 : string = "fable_library_rust::String_::fromString($0)"
        let v934 : string = Fable.Core.RustInterop.emitRustExpr v932 v933 
        let _v922 = v934 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v935 : string = $"%A{v3}"
        let _v922 = v935 
        #endif
#if FABLE_COMPILER_PYTHON
        let v938 : string = $"%A{v3}"
        let _v922 = v938 
        #endif
#else
        let v941 : string = $"%A{v3}"
        let _v922 = v941 
        #endif
        let v944 : string = _v922 
        let v949 : string = $"{v944}"
        let v952 : unit = ()
        let v953 : (unit -> unit) = closure10(v646, v949)
        let v954 : unit = (fun () -> v953 (); v952) ()
        let v957 : string = $"{v682}"
        let v960 : unit = ()
        let v961 : (unit -> unit) = closure10(v646, v957)
        let v962 : unit = (fun () -> v961 (); v960) ()
        let v965 : string = "stdin"
        let v966 : string = $"{v965}"
        let v969 : unit = ()
        let v970 : (unit -> unit) = closure10(v646, v966)
        let v971 : unit = (fun () -> v970 (); v969) ()
        let v974 : string = $"{v665}"
        let v977 : unit = ()
        let v978 : (unit -> unit) = closure10(v646, v974)
        let v979 : unit = (fun () -> v978 (); v977) ()
        let v982 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v983 : string = "format!(\"{:#?}\", $0)"
        let v984 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v983 
        let v985 : string = "fable_library_rust::String_::fromString($0)"
        let v986 : string = Fable.Core.RustInterop.emitRustExpr v984 v985 
        let _v982 = v986 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v987 : string = "format!(\"{:#?}\", $0)"
        let v988 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v987 
        let v989 : string = "fable_library_rust::String_::fromString($0)"
        let v990 : string = Fable.Core.RustInterop.emitRustExpr v988 v989 
        let _v982 = v990 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v991 : string = "format!(\"{:#?}\", $0)"
        let v992 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v991 
        let v993 : string = "fable_library_rust::String_::fromString($0)"
        let v994 : string = Fable.Core.RustInterop.emitRustExpr v992 v993 
        let _v982 = v994 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v995 : string = $"%A{v4}"
        let _v982 = v995 
        #endif
#if FABLE_COMPILER_PYTHON
        let v998 : string = $"%A{v4}"
        let _v982 = v998 
        #endif
#else
        let v1001 : string = $"%A{v4}"
        let _v982 = v1001 
        #endif
        let v1004 : string = _v982 
        let v1009 : string = $"{v1004}"
        let v1012 : unit = ()
        let v1013 : (unit -> unit) = closure10(v646, v1009)
        let v1014 : unit = (fun () -> v1013 (); v1012) ()
        let v1017 : string = $"{v682}"
        let v1020 : unit = ()
        let v1021 : (unit -> unit) = closure10(v646, v1017)
        let v1022 : unit = (fun () -> v1021 (); v1020) ()
        let v1025 : string = "trace"
        let v1026 : string = $"{v1025}"
        let v1029 : unit = ()
        let v1030 : (unit -> unit) = closure10(v646, v1026)
        let v1031 : unit = (fun () -> v1030 (); v1029) ()
        let v1034 : string = $"{v665}"
        let v1037 : unit = ()
        let v1038 : (unit -> unit) = closure10(v646, v1034)
        let v1039 : unit = (fun () -> v1038 (); v1037) ()
        let v1044 : string =
            if v5 then
                let v1042 : string = "true"
                v1042
            else
                let v1043 : string = "false"
                v1043
        let v1045 : string = $"{v1044}"
        let v1048 : unit = ()
        let v1049 : (unit -> unit) = closure10(v646, v1045)
        let v1050 : unit = (fun () -> v1049 (); v1048) ()
        let v1053 : string = $"{v682}"
        let v1056 : unit = ()
        let v1057 : (unit -> unit) = closure10(v646, v1053)
        let v1058 : unit = (fun () -> v1057 (); v1056) ()
        let v1061 : string = "working_directory"
        let v1062 : string = $"{v1061}"
        let v1065 : unit = ()
        let v1066 : (unit -> unit) = closure10(v646, v1062)
        let v1067 : unit = (fun () -> v1066 (); v1065) ()
        let v1070 : string = $"{v665}"
        let v1073 : unit = ()
        let v1074 : (unit -> unit) = closure10(v646, v1070)
        let v1075 : unit = (fun () -> v1074 (); v1073) ()
        let v1078 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1079 : string = "format!(\"{:#?}\", $0)"
        let v1080 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1079 
        let v1081 : string = "fable_library_rust::String_::fromString($0)"
        let v1082 : string = Fable.Core.RustInterop.emitRustExpr v1080 v1081 
        let _v1078 = v1082 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1083 : string = "format!(\"{:#?}\", $0)"
        let v1084 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1083 
        let v1085 : string = "fable_library_rust::String_::fromString($0)"
        let v1086 : string = Fable.Core.RustInterop.emitRustExpr v1084 v1085 
        let _v1078 = v1086 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1087 : string = "format!(\"{:#?}\", $0)"
        let v1088 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v1087 
        let v1089 : string = "fable_library_rust::String_::fromString($0)"
        let v1090 : string = Fable.Core.RustInterop.emitRustExpr v1088 v1089 
        let _v1078 = v1090 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1091 : string = $"%A{v6}"
        let _v1078 = v1091 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1094 : string = $"%A{v6}"
        let _v1078 = v1094 
        #endif
#else
        let v1097 : string = $"%A{v6}"
        let _v1078 = v1097 
        #endif
        let v1100 : string = _v1078 
        let v1105 : string = $"{v1100}"
        let v1108 : unit = ()
        let v1109 : (unit -> unit) = closure10(v646, v1105)
        let v1110 : unit = (fun () -> v1109 (); v1108) ()
        let v1113 : string = " }"
        let v1114 : string = $"{v1113}"
        let v1117 : unit = ()
        let v1118 : (unit -> unit) = closure10(v646, v1114)
        let v1119 : unit = (fun () -> v1118 (); v1117) ()
        let v1122 : string = $"{v1113}"
        let v1125 : unit = ()
        let v1126 : (unit -> unit) = closure10(v646, v1122)
        let v1127 : unit = (fun () -> v1126 (); v1125) ()
        let v1130 : string = v646.l0
        let v1131 : string = $"runtime.execute_with_options"
        let v1132 : bool = v1131 = ""
        let v1189 : string =
            if v1132 then
                let v1133 : string = ""
                v1133
            else
                let v1134 : string = $"{v503} {v638} #{v644} %s{v1131} / {v1130}"
                let v1137 : char list = []
                let v1138 : (char list -> (char [])) = List.toArray
                let v1139 : (char []) = v1138 v1137
                let v1142 : string = v1134.TrimStart v1139 
                let v1160 : char list = []
                let v1161 : char list = '/' :: v1160 
                let v1164 : char list = ' ' :: v1161 
                let v1167 : (char list -> (char [])) = List.toArray
                let v1168 : (char []) = v1167 v1164
                let v1171 : string = v1142.TrimEnd v1168 
                v1171
        let v1190 : (string -> unit) = closure11()
        let v1191 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1192 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1189 v1192 
        let _v1191 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1193 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1189 v1193 
        let _v1191 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1194 : string = v28.l0
        let v1195 : bool = v1194 = ""
        let v1203 : string =
            if v1195 then
                v1189
            else
                let v1196 : bool = v1189 = ""
                if v1196 then
                    let v1197 : string = v28.l0
                    v1197
                else
                    let v1198 : string = v28.l0
                    let v1199 : string = "\n"
                    let v1200 : string = v1198 + v1199 
                    let v1201 : string = v1200 + v1189 
                    v1201
        let v1204 : string = "&*$0"
        let v1205 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1203 v1204 
        let v1206 : string = $"$0.chars()"
        let v1207 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v1205 v1206 
        let v1208 : string = "v1207"
        let v1209 : _ = Fable.Core.RustInterop.emitRustExpr () v1208 
        let v1210 : string = "v1209.collect::<Vec<_>>()"
        let v1211 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v1210 
        let v1212 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v1213 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v1211 v1212 
        let v1214 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v1215 : bool = Fable.Core.RustInterop.emitRustExpr v1213 v1214 
        let v1216 : string = "x"
        let v1217 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v1216 
        let v1218 : string = "String::from_iter($0)"
        let v1219 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1217 v1218 
        let v1220 : string = "true; $0 }).collect::<Vec<_>>()"
        let v1221 : bool = Fable.Core.RustInterop.emitRustExpr v1219 v1220 
        let v1222 : string = "_vec_map"
        let v1223 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1222 
        let v1224 : string = "$0.len()"
        let v1225 : unativeint = Fable.Core.RustInterop.emitRustExpr v1223 v1224 
        let v1226 : (unativeint -> int32) = int32
        let v1227 : int32 = v1226 v1225
        let v1228 : string = ""
        let v1229 : bool = v1189 <> v1228 
        let v1233 : bool =
            if v1229 then
                let v1232 : bool = v1227 <= 1
                v1232
            else
                false
        if v1233 then
            v28.l0 <- v1203
            ()
        else
            v28.l0 <- v1228
            let v1234 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1235 : bool = Fable.Core.RustInterop.emitRustExpr v1223 v1234 
            let v1236 : string = "x"
            let v1237 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1236 
            let v1238 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v1237 v1238 
            let v1239 : string = $"true;"
            let v1240 : bool = Fable.Core.RustInterop.emitRustExpr () v1239 
            let v1241 : string = "true; }}); { //"
            let v1242 : bool = Fable.Core.RustInterop.emitRustExpr () v1241 
            ()
        let _v1191 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1190 v1189
        let _v1191 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1190 v1189
        let _v1191 = () 
        #endif
#else
        v1190 v1189
        let _v1191 = () 
        #endif
        _v1191 
        let v1243 : (string -> unit) = v26.l0
        v1243 v1189
and closure38 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US24 =
    US24_0(v0)
and method65 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) =
    closure38()
and closure39 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method66 () : (std_string_String -> US24) =
    closure39()
and closure40 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "error"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v667 : string = "format!(\"{:#?}\", $0)"
        let v668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v667 
        let v669 : string = "fable_library_rust::String_::fromString($0)"
        let v670 : string = Fable.Core.RustInterop.emitRustExpr v668 v669 
        let _v666 = v670 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v671 : string = "format!(\"{:#?}\", $0)"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v666 = v674 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v675 : string = "format!(\"{:#?}\", $0)"
        let v676 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v675 
        let v677 : string = "fable_library_rust::String_::fromString($0)"
        let v678 : string = Fable.Core.RustInterop.emitRustExpr v676 v677 
        let _v666 = v678 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v679 : string = $"%A{v0}"
        let _v666 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = $"%A{v0}"
        let _v666 = v682 
        #endif
#else
        let v685 : string = $"%A{v0}"
        let _v666 = v685 
        #endif
        let v688 : string = _v666 
        let v693 : string = $"{v688}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v638, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = " }"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v638, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = v638.l0
        let v711 : string = $"runtime.execute_with_options / child error"
        let v712 : bool = v711 = ""
        let v769 : string =
            if v712 then
                let v713 : string = ""
                v713
            else
                let v714 : string = $"{v495} {v630} #{v636} %s{v711} / {v710}"
                let v717 : char list = []
                let v718 : (char list -> (char [])) = List.toArray
                let v719 : (char []) = v718 v717
                let v722 : string = v714.TrimStart v719 
                let v740 : char list = []
                let v741 : char list = '/' :: v740 
                let v744 : char list = ' ' :: v741 
                let v747 : (char list -> (char [])) = List.toArray
                let v748 : (char []) = v747 v744
                let v751 : string = v722.TrimEnd v748 
                v751
        let v770 : (string -> unit) = closure11()
        let v771 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v772 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v772 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v773 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v773 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v774 : string = v20.l0
        let v775 : bool = v774 = ""
        let v783 : string =
            if v775 then
                v769
            else
                let v776 : bool = v769 = ""
                if v776 then
                    let v777 : string = v20.l0
                    v777
                else
                    let v778 : string = v20.l0
                    let v779 : string = "\n"
                    let v780 : string = v778 + v779 
                    let v781 : string = v780 + v769 
                    v781
        let v784 : string = "&*$0"
        let v785 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v783 v784 
        let v786 : string = $"$0.chars()"
        let v787 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v785 v786 
        let v788 : string = "v787"
        let v789 : _ = Fable.Core.RustInterop.emitRustExpr () v788 
        let v790 : string = "v789.collect::<Vec<_>>()"
        let v791 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v793 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let v794 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v795 : bool = Fable.Core.RustInterop.emitRustExpr v793 v794 
        let v796 : string = "x"
        let v797 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v796 
        let v798 : string = "String::from_iter($0)"
        let v799 : std_string_String = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "true; $0 }).collect::<Vec<_>>()"
        let v801 : bool = Fable.Core.RustInterop.emitRustExpr v799 v800 
        let v802 : string = "_vec_map"
        let v803 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v802 
        let v804 : string = "$0.len()"
        let v805 : unativeint = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : (unativeint -> int32) = int32
        let v807 : int32 = v806 v805
        let v808 : string = ""
        let v809 : bool = v769 <> v808 
        let v813 : bool =
            if v809 then
                let v812 : bool = v807 <= 1
                v812
            else
                false
        if v813 then
            v20.l0 <- v783
            ()
        else
            v20.l0 <- v808
            let v814 : string = "true; $0.into_iter().for_each(|x| { //"
            let v815 : bool = Fable.Core.RustInterop.emitRustExpr v803 v814 
            let v816 : string = "x"
            let v817 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v817 v818 
            let v819 : string = $"true;"
            let v820 : bool = Fable.Core.RustInterop.emitRustExpr () v819 
            let v821 : string = "true; }}); { //"
            let v822 : bool = Fable.Core.RustInterop.emitRustExpr () v821 
            ()
        let _v771 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v770 v769
        let _v771 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v770 v769
        let _v771 = () 
        #endif
#else
        v770 v769
        let _v771 = () 
        #endif
        _v771 
        let v823 : (string -> unit) = v18.l0
        v823 v769
and closure41 () (v0 : std_string_String) : US26 =
    US26_0(v0)
and method67 () : (std_string_String -> US26) =
    closure41()
and closure42 () (v0 : std_string_String) : US26 =
    US26_1(v0)
and method68 () : (std_string_String -> US26) =
    closure42()
and closure43 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "e"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v667 : string = "format!(\"{:#?}\", $0)"
        let v668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v667 
        let v669 : string = "fable_library_rust::String_::fromString($0)"
        let v670 : string = Fable.Core.RustInterop.emitRustExpr v668 v669 
        let _v666 = v670 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v671 : string = "format!(\"{:#?}\", $0)"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v666 = v674 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v675 : string = "format!(\"{:#?}\", $0)"
        let v676 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v675 
        let v677 : string = "fable_library_rust::String_::fromString($0)"
        let v678 : string = Fable.Core.RustInterop.emitRustExpr v676 v677 
        let _v666 = v678 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v679 : string = $"%A{v0}"
        let _v666 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = $"%A{v0}"
        let _v666 = v682 
        #endif
#else
        let v685 : string = $"%A{v0}"
        let _v666 = v685 
        #endif
        let v688 : string = _v666 
        let v693 : string = $"{v688}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v638, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = " }"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v638, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = v638.l0
        let v711 : string = $"runtime.stdio_line"
        let v712 : bool = v711 = ""
        let v769 : string =
            if v712 then
                let v713 : string = ""
                v713
            else
                let v714 : string = $"{v495} {v630} #{v636} %s{v711} / {v710}"
                let v717 : char list = []
                let v718 : (char list -> (char [])) = List.toArray
                let v719 : (char []) = v718 v717
                let v722 : string = v714.TrimStart v719 
                let v740 : char list = []
                let v741 : char list = '/' :: v740 
                let v744 : char list = ' ' :: v741 
                let v747 : (char list -> (char [])) = List.toArray
                let v748 : (char []) = v747 v744
                let v751 : string = v722.TrimEnd v748 
                v751
        let v770 : (string -> unit) = closure11()
        let v771 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v772 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v772 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v773 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v773 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v774 : string = v20.l0
        let v775 : bool = v774 = ""
        let v783 : string =
            if v775 then
                v769
            else
                let v776 : bool = v769 = ""
                if v776 then
                    let v777 : string = v20.l0
                    v777
                else
                    let v778 : string = v20.l0
                    let v779 : string = "\n"
                    let v780 : string = v778 + v779 
                    let v781 : string = v780 + v769 
                    v781
        let v784 : string = "&*$0"
        let v785 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v783 v784 
        let v786 : string = $"$0.chars()"
        let v787 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v785 v786 
        let v788 : string = "v787"
        let v789 : _ = Fable.Core.RustInterop.emitRustExpr () v788 
        let v790 : string = "v789.collect::<Vec<_>>()"
        let v791 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v793 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let v794 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v795 : bool = Fable.Core.RustInterop.emitRustExpr v793 v794 
        let v796 : string = "x"
        let v797 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v796 
        let v798 : string = "String::from_iter($0)"
        let v799 : std_string_String = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "true; $0 }).collect::<Vec<_>>()"
        let v801 : bool = Fable.Core.RustInterop.emitRustExpr v799 v800 
        let v802 : string = "_vec_map"
        let v803 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v802 
        let v804 : string = "$0.len()"
        let v805 : unativeint = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : (unativeint -> int32) = int32
        let v807 : int32 = v806 v805
        let v808 : string = ""
        let v809 : bool = v769 <> v808 
        let v813 : bool =
            if v809 then
                let v812 : bool = v807 <= 1
                v812
            else
                false
        if v813 then
            v20.l0 <- v783
            ()
        else
            v20.l0 <- v808
            let v814 : string = "true; $0.into_iter().for_each(|x| { //"
            let v815 : bool = Fable.Core.RustInterop.emitRustExpr v803 v814 
            let v816 : string = "x"
            let v817 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v817 v818 
            let v819 : string = $"true;"
            let v820 : bool = Fable.Core.RustInterop.emitRustExpr () v819 
            let v821 : string = "true; }}); { //"
            let v822 : bool = Fable.Core.RustInterop.emitRustExpr () v821 
            ()
        let _v771 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v770 v769
        let _v771 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v770 v769
        let _v771 = () 
        #endif
#else
        v770 v769
        let _v771 = () 
        #endif
        _v771 
        let v823 : (string -> unit) = v18.l0
        v823 v769
and closure44 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Verbose"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_black"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[90m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[90m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[90m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = v638.l0
        let v640 : bool = v0 = ""
        let v697 : string =
            if v640 then
                let v641 : string = ""
                v641
            else
                let v642 : string = $"{v495} {v630} #{v636} %s{v0} / {v639}"
                let v645 : char list = []
                let v646 : (char list -> (char [])) = List.toArray
                let v647 : (char []) = v646 v645
                let v650 : string = v642.TrimStart v647 
                let v668 : char list = []
                let v669 : char list = '/' :: v668 
                let v672 : char list = ' ' :: v669 
                let v675 : (char list -> (char [])) = List.toArray
                let v676 : (char []) = v675 v672
                let v679 : string = v650.TrimEnd v676 
                v679
        let v698 : (string -> unit) = closure11()
        let v699 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v700 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v697 v700 
        let _v699 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v701 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v697 v701 
        let _v699 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v702 : string = v20.l0
        let v703 : bool = v702 = ""
        let v711 : string =
            if v703 then
                v697
            else
                let v704 : bool = v697 = ""
                if v704 then
                    let v705 : string = v20.l0
                    v705
                else
                    let v706 : string = v20.l0
                    let v707 : string = "\n"
                    let v708 : string = v706 + v707 
                    let v709 : string = v708 + v697 
                    v709
        let v712 : string = "&*$0"
        let v713 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let v714 : string = $"$0.chars()"
        let v715 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v713 v714 
        let v716 : string = "v715"
        let v717 : _ = Fable.Core.RustInterop.emitRustExpr () v716 
        let v718 : string = "v717.collect::<Vec<_>>()"
        let v719 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v718 
        let v720 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v721 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v719 v720 
        let v722 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v723 : bool = Fable.Core.RustInterop.emitRustExpr v721 v722 
        let v724 : string = "x"
        let v725 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v724 
        let v726 : string = "String::from_iter($0)"
        let v727 : std_string_String = Fable.Core.RustInterop.emitRustExpr v725 v726 
        let v728 : string = "true; $0 }).collect::<Vec<_>>()"
        let v729 : bool = Fable.Core.RustInterop.emitRustExpr v727 v728 
        let v730 : string = "_vec_map"
        let v731 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v730 
        let v732 : string = "$0.len()"
        let v733 : unativeint = Fable.Core.RustInterop.emitRustExpr v731 v732 
        let v734 : (unativeint -> int32) = int32
        let v735 : int32 = v734 v733
        let v736 : string = ""
        let v737 : bool = v697 <> v736 
        let v741 : bool =
            if v737 then
                let v740 : bool = v735 <= 1
                v740
            else
                false
        if v741 then
            v20.l0 <- v711
            ()
        else
            v20.l0 <- v736
            let v742 : string = "true; $0.into_iter().for_each(|x| { //"
            let v743 : bool = Fable.Core.RustInterop.emitRustExpr v731 v742 
            let v744 : string = "x"
            let v745 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v744 
            let v746 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v745 v746 
            let v747 : string = $"true;"
            let v748 : bool = Fable.Core.RustInterop.emitRustExpr () v747 
            let v749 : string = "true; }}); { //"
            let v750 : bool = Fable.Core.RustInterop.emitRustExpr () v749 
            ()
        let _v699 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v698 v697
        let _v699 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v698 v697
        let _v699 = () 
        #endif
#else
        v698 v697
        let _v699 = () 
        #endif
        _v699 
        let v751 : (string -> unit) = v18.l0
        v751 v697
and closure45 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method69 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure45()
and method70 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure46 (v0 : US27 option ref) (v1 : US27 option) : US27 option ref =
    v0.Value <- v1 
    v0
and closure47 (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v1 : (US27 option -> US27 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) = x
    let v3 : US27 = US27_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure48 (v0 : US28 option ref) (v1 : US28 option) : US28 option ref =
    v0.Value <- v1 
    v0
and closure49 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option, v1 : (US28 option -> US28 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = x
    let v3 : US28 = US28_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method71 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and method72 (v0 : std_thread_JoinHandle<Result<unit, string>>) : std_thread_JoinHandle<Result<unit, string>> =
    v0
and closure50 () (v0 : std_process_Output) : US29 =
    US29_0(v0)
and closure51 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and closure52 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "error"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v667 : string = "format!(\"{:#?}\", $0)"
        let v668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v667 
        let v669 : string = "fable_library_rust::String_::fromString($0)"
        let v670 : string = Fable.Core.RustInterop.emitRustExpr v668 v669 
        let _v666 = v670 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v671 : string = "format!(\"{:#?}\", $0)"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v666 = v674 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v675 : string = "format!(\"{:#?}\", $0)"
        let v676 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v675 
        let v677 : string = "fable_library_rust::String_::fromString($0)"
        let v678 : string = Fable.Core.RustInterop.emitRustExpr v676 v677 
        let _v666 = v678 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v679 : string = $"%A{v0}"
        let _v666 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = $"%A{v0}"
        let _v666 = v682 
        #endif
#else
        let v685 : string = $"%A{v0}"
        let _v666 = v685 
        #endif
        let v688 : string = _v666 
        let v693 : string = $"{v688}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v638, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = " }"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v638, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = v638.l0
        let v711 : string = $"runtime.execute_with_options / output error"
        let v712 : bool = v711 = ""
        let v769 : string =
            if v712 then
                let v713 : string = ""
                v713
            else
                let v714 : string = $"{v495} {v630} #{v636} %s{v711} / {v710}"
                let v717 : char list = []
                let v718 : (char list -> (char [])) = List.toArray
                let v719 : (char []) = v718 v717
                let v722 : string = v714.TrimStart v719 
                let v740 : char list = []
                let v741 : char list = '/' :: v740 
                let v744 : char list = ' ' :: v741 
                let v747 : (char list -> (char [])) = List.toArray
                let v748 : (char []) = v747 v744
                let v751 : string = v722.TrimEnd v748 
                v751
        let v770 : (string -> unit) = closure11()
        let v771 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v772 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v772 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v773 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v773 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v774 : string = v20.l0
        let v775 : bool = v774 = ""
        let v783 : string =
            if v775 then
                v769
            else
                let v776 : bool = v769 = ""
                if v776 then
                    let v777 : string = v20.l0
                    v777
                else
                    let v778 : string = v20.l0
                    let v779 : string = "\n"
                    let v780 : string = v778 + v779 
                    let v781 : string = v780 + v769 
                    v781
        let v784 : string = "&*$0"
        let v785 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v783 v784 
        let v786 : string = $"$0.chars()"
        let v787 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v785 v786 
        let v788 : string = "v787"
        let v789 : _ = Fable.Core.RustInterop.emitRustExpr () v788 
        let v790 : string = "v789.collect::<Vec<_>>()"
        let v791 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v793 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let v794 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v795 : bool = Fable.Core.RustInterop.emitRustExpr v793 v794 
        let v796 : string = "x"
        let v797 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v796 
        let v798 : string = "String::from_iter($0)"
        let v799 : std_string_String = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "true; $0 }).collect::<Vec<_>>()"
        let v801 : bool = Fable.Core.RustInterop.emitRustExpr v799 v800 
        let v802 : string = "_vec_map"
        let v803 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v802 
        let v804 : string = "$0.len()"
        let v805 : unativeint = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : (unativeint -> int32) = int32
        let v807 : int32 = v806 v805
        let v808 : string = ""
        let v809 : bool = v769 <> v808 
        let v813 : bool =
            if v809 then
                let v812 : bool = v807 <= 1
                v812
            else
                false
        if v813 then
            v20.l0 <- v783
            ()
        else
            v20.l0 <- v808
            let v814 : string = "true; $0.into_iter().for_each(|x| { //"
            let v815 : bool = Fable.Core.RustInterop.emitRustExpr v803 v814 
            let v816 : string = "x"
            let v817 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v817 v818 
            let v819 : string = $"true;"
            let v820 : bool = Fable.Core.RustInterop.emitRustExpr () v819 
            let v821 : string = "true; }}); { //"
            let v822 : bool = Fable.Core.RustInterop.emitRustExpr () v821 
            ()
        let _v771 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v770 v769
        let _v771 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v770 v769
        let _v771 = () 
        #endif
#else
        v770 v769
        let _v771 = () 
        #endif
        _v771 
        let v823 : (string -> unit) = v18.l0
        v823 v769
and closure53 (v0 : US30 option ref) (v1 : US30 option) : US30 option ref =
    v0.Value <- v1 
    v0
and closure54 (v0 : int32 option, v1 : (US30 option -> US30 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : int32 = x
    let v3 : US30 = US30_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure55 (v0 : int32, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 0 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Verbose"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_black"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_black"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_black"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[90m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[90m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[90m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : int32 = v1.Length
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure10(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "exit_code"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure10(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure10(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v0}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure10(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure10(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "std_trace_length"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure10(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v638}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = " }"
        let v711 : string = $"{v710}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v640, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = v640.l0
        let v720 : string = $"runtime.execute_with_options / result"
        let v721 : bool = v720 = ""
        let v778 : string =
            if v721 then
                let v722 : string = ""
                v722
            else
                let v723 : string = $"{v496} {v631} #{v637} %s{v720} / {v719}"
                let v726 : char list = []
                let v727 : (char list -> (char [])) = List.toArray
                let v728 : (char []) = v727 v726
                let v731 : string = v723.TrimStart v728 
                let v749 : char list = []
                let v750 : char list = '/' :: v749 
                let v753 : char list = ' ' :: v750 
                let v756 : (char list -> (char [])) = List.toArray
                let v757 : (char []) = v756 v753
                let v760 : string = v731.TrimEnd v757 
                v760
        let v779 : (string -> unit) = closure11()
        let v780 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v781 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v781 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v782 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v782 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = v21.l0
        let v784 : bool = v783 = ""
        let v792 : string =
            if v784 then
                v778
            else
                let v785 : bool = v778 = ""
                if v785 then
                    let v786 : string = v21.l0
                    v786
                else
                    let v787 : string = v21.l0
                    let v788 : string = "\n"
                    let v789 : string = v787 + v788 
                    let v790 : string = v789 + v778 
                    v790
        let v793 : string = "&*$0"
        let v794 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v792 v793 
        let v795 : string = $"$0.chars()"
        let v796 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v794 v795 
        let v797 : string = "v796"
        let v798 : _ = Fable.Core.RustInterop.emitRustExpr () v797 
        let v799 : string = "v798.collect::<Vec<_>>()"
        let v800 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v799 
        let v801 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v802 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v800 v801 
        let v803 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v804 : bool = Fable.Core.RustInterop.emitRustExpr v802 v803 
        let v805 : string = "x"
        let v806 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v805 
        let v807 : string = "String::from_iter($0)"
        let v808 : std_string_String = Fable.Core.RustInterop.emitRustExpr v806 v807 
        let v809 : string = "true; $0 }).collect::<Vec<_>>()"
        let v810 : bool = Fable.Core.RustInterop.emitRustExpr v808 v809 
        let v811 : string = "_vec_map"
        let v812 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v811 
        let v813 : string = "$0.len()"
        let v814 : unativeint = Fable.Core.RustInterop.emitRustExpr v812 v813 
        let v815 : (unativeint -> int32) = int32
        let v816 : int32 = v815 v814
        let v817 : string = ""
        let v818 : bool = v778 <> v817 
        let v822 : bool =
            if v818 then
                let v821 : bool = v816 <= 1
                v821
            else
                false
        if v822 then
            v21.l0 <- v792
            ()
        else
            v21.l0 <- v817
            let v823 : string = "true; $0.into_iter().for_each(|x| { //"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr v812 v823 
            let v825 : string = "x"
            let v826 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v825 
            let v827 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v826 v827 
            let v828 : string = $"true;"
            let v829 : bool = Fable.Core.RustInterop.emitRustExpr () v828 
            let v830 : string = "true; }}); { //"
            let v831 : bool = Fable.Core.RustInterop.emitRustExpr () v830 
            ()
        let _v780 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v779 v778
        let _v780 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v779 v778
        let _v780 = () 
        #endif
#else
        v779 v778
        let _v780 = () 
        #endif
        _v780 
        let v832 : (string -> unit) = v19.l0
        v832 v778
and closure56 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) () : unit =
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure2()
    let v9 : unit = (fun () -> v8 (); v7) ()
    let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
    let v41 : unit = ()
    let v42 : unit = (fun () -> v8 (); v41) ()
    let struct (v56 : Mut0, v57 : Mut1, v58 : Mut2, v59 : Mut3, v60 : Mut4, v61 : int64 option) = TraceState.trace_state.Value
    let v74 : US0 = v60.l0
    let v75 : bool = v58.l0
    let v76 : bool = v75 = false
    let v79 : bool =
        if v76 then
            false
        else
            let v77 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v74
            let v78 : bool = 1 >= v77
            v78
    if v79 then
        let v80 : unit = ()
        let v81 : (unit -> unit) = closure7(v23)
        let v82 : unit = (fun () -> v81 (); v80) ()
        let v85 : unit = ()
        let v86 : unit = (fun () -> v8 (); v85) ()
        let struct (v100 : Mut0, v101 : Mut1, v102 : Mut2, v103 : Mut3, v104 : Mut4, v105 : int64 option) = TraceState.trace_state.Value
        let v118 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v119 : US3 option = None
        let _v119 = ref v119 
        let v120 : US3 option ref = _v119 
        let v121 : (US3 option -> US3 option ref) = closure8(v120)
        let v122 : unit = ()
        let v123 : (unit -> unit) = closure9(v105, v121)
        let v124 : unit = (fun () -> v123 (); v122) ()
        let v127 : US3 option = _v119.Value 
        let v138 : US3 = US3_1
        let v139 : US3 = v127 |> Option.defaultValue v138 
        let v179 : System.DateTime =
            match v139 with
            | US3_1 -> (* None *)
                let v175 : System.DateTime = System.DateTime.Now
                v175
            | US3_0(v143) -> (* Some *)
                let v144 : System.DateTime = System.DateTime.Now
                let v147 : (System.DateTime -> int64) = _.Ticks
                let v148 : int64 = v147 v144
                let v151 : int64 = v148 - v143
                let v152 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v153 : System.TimeSpan = v152 v151
                let v156 : (System.TimeSpan -> int32) = _.Hours
                let v157 : int32 = v156 v153
                let v160 : (System.TimeSpan -> int32) = _.Minutes
                let v161 : int32 = v160 v153
                let v164 : (System.TimeSpan -> int32) = _.Seconds
                let v165 : int32 = v164 v153
                let v168 : (System.TimeSpan -> int32) = _.Milliseconds
                let v169 : int32 = v168 v153
                let v172 : System.DateTime = System.DateTime (1, 1, 1, v157, v161, v165, v169)
                v172
        let v180 : string = method6()
        let v183 : (string -> string) = v179.ToString
        let v184 : string = v183 v180
        let _v118 = v184 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v187 : US3 option = None
        let _v187 = ref v187 
        let v188 : US3 option ref = _v187 
        let v189 : (US3 option -> US3 option ref) = closure8(v188)
        let v190 : unit = ()
        let v191 : (unit -> unit) = closure9(v105, v189)
        let v192 : unit = (fun () -> v191 (); v190) ()
        let v195 : US3 option = _v187.Value 
        let v206 : US3 = US3_1
        let v207 : US3 = v195 |> Option.defaultValue v206 
        let v247 : System.DateTime =
            match v207 with
            | US3_1 -> (* None *)
                let v243 : System.DateTime = System.DateTime.Now
                v243
            | US3_0(v211) -> (* Some *)
                let v212 : System.DateTime = System.DateTime.Now
                let v215 : (System.DateTime -> int64) = _.Ticks
                let v216 : int64 = v215 v212
                let v219 : int64 = v216 - v211
                let v220 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v221 : System.TimeSpan = v220 v219
                let v224 : (System.TimeSpan -> int32) = _.Hours
                let v225 : int32 = v224 v221
                let v228 : (System.TimeSpan -> int32) = _.Minutes
                let v229 : int32 = v228 v221
                let v232 : (System.TimeSpan -> int32) = _.Seconds
                let v233 : int32 = v232 v221
                let v236 : (System.TimeSpan -> int32) = _.Milliseconds
                let v237 : int32 = v236 v221
                let v240 : System.DateTime = System.DateTime (1, 1, 1, v225, v229, v233, v237)
                v240
        let v248 : string = method6()
        let v251 : (string -> string) = v247.ToString
        let v252 : string = v251 v248
        let _v118 = v252 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v255 : string = $"near_sdk::env::block_timestamp()"
        let v256 : uint64 = Fable.Core.RustInterop.emitRustExpr () v255 
        let v257 : US3 option = None
        let _v257 = ref v257 
        let v258 : US3 option ref = _v257 
        let v259 : (US3 option -> US3 option ref) = closure8(v258)
        let v260 : unit = ()
        let v261 : (unit -> unit) = closure9(v105, v259)
        let v262 : unit = (fun () -> v261 (); v260) ()
        let v265 : US3 option = _v257.Value 
        let v276 : US3 = US3_1
        let v277 : US3 = v265 |> Option.defaultValue v276 
        let v286 : uint64 =
            match v277 with
            | US3_1 -> (* None *)
                v256
            | US3_0(v281) -> (* Some *)
                let v282 : (int64 -> uint64) = uint64
                let v283 : uint64 = v282 v281
                let v284 : uint64 = v256 - v283
                v284
        let v287 : uint64 = v286 / 1000000000UL
        let v288 : uint64 = v287 % 60UL
        let v289 : uint64 = v287 / 60UL
        let v290 : uint64 = v289 % 60UL
        let v291 : uint64 = v287 / 3600UL
        let v292 : uint64 = v291 % 24UL
        let v293 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v292, v290, v288) v293 
        let v295 : string = "fable_library_rust::String_::fromString($0)"
        let v296 : string = Fable.Core.RustInterop.emitRustExpr v294 v295 
        let _v118 = v296 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v297 : US3 option = None
        let _v297 = ref v297 
        let v298 : US3 option ref = _v297 
        let v299 : (US3 option -> US3 option ref) = closure8(v298)
        let v300 : unit = ()
        let v301 : (unit -> unit) = closure9(v105, v299)
        let v302 : unit = (fun () -> v301 (); v300) ()
        let v305 : US3 option = _v297.Value 
        let v316 : US3 = US3_1
        let v317 : US3 = v305 |> Option.defaultValue v316 
        let v357 : System.DateTime =
            match v317 with
            | US3_1 -> (* None *)
                let v353 : System.DateTime = System.DateTime.Now
                v353
            | US3_0(v321) -> (* Some *)
                let v322 : System.DateTime = System.DateTime.Now
                let v325 : (System.DateTime -> int64) = _.Ticks
                let v326 : int64 = v325 v322
                let v329 : int64 = v326 - v321
                let v330 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v331 : System.TimeSpan = v330 v329
                let v334 : (System.TimeSpan -> int32) = _.Hours
                let v335 : int32 = v334 v331
                let v338 : (System.TimeSpan -> int32) = _.Minutes
                let v339 : int32 = v338 v331
                let v342 : (System.TimeSpan -> int32) = _.Seconds
                let v343 : int32 = v342 v331
                let v346 : (System.TimeSpan -> int32) = _.Milliseconds
                let v347 : int32 = v346 v331
                let v350 : System.DateTime = System.DateTime (1, 1, 1, v335, v339, v343, v347)
                v350
        let v358 : string = method7()
        let v361 : (string -> string) = v357.ToString
        let v362 : string = v361 v358
        let _v118 = v362 
        #endif
#if FABLE_COMPILER_PYTHON
        let v365 : US3 option = None
        let _v365 = ref v365 
        let v366 : US3 option ref = _v365 
        let v367 : (US3 option -> US3 option ref) = closure8(v366)
        let v368 : unit = ()
        let v369 : (unit -> unit) = closure9(v105, v367)
        let v370 : unit = (fun () -> v369 (); v368) ()
        let v373 : US3 option = _v365.Value 
        let v384 : US3 = US3_1
        let v385 : US3 = v373 |> Option.defaultValue v384 
        let v425 : System.DateTime =
            match v385 with
            | US3_1 -> (* None *)
                let v421 : System.DateTime = System.DateTime.Now
                v421
            | US3_0(v389) -> (* Some *)
                let v390 : System.DateTime = System.DateTime.Now
                let v393 : (System.DateTime -> int64) = _.Ticks
                let v394 : int64 = v393 v390
                let v397 : int64 = v394 - v389
                let v398 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v399 : System.TimeSpan = v398 v397
                let v402 : (System.TimeSpan -> int32) = _.Hours
                let v403 : int32 = v402 v399
                let v406 : (System.TimeSpan -> int32) = _.Minutes
                let v407 : int32 = v406 v399
                let v410 : (System.TimeSpan -> int32) = _.Seconds
                let v411 : int32 = v410 v399
                let v414 : (System.TimeSpan -> int32) = _.Milliseconds
                let v415 : int32 = v414 v399
                let v418 : System.DateTime = System.DateTime (1, 1, 1, v403, v407, v411, v415)
                v418
        let v426 : string = method7()
        let v429 : (string -> string) = v425.ToString
        let v430 : string = v429 v426
        let _v118 = v430 
        #endif
#else
        let v433 : US3 option = None
        let _v433 = ref v433 
        let v434 : US3 option ref = _v433 
        let v435 : (US3 option -> US3 option ref) = closure8(v434)
        let v436 : unit = ()
        let v437 : (unit -> unit) = closure9(v105, v435)
        let v438 : unit = (fun () -> v437 (); v436) ()
        let v441 : US3 option = _v433.Value 
        let v452 : US3 = US3_1
        let v453 : US3 = v441 |> Option.defaultValue v452 
        let v493 : System.DateTime =
            match v453 with
            | US3_1 -> (* None *)
                let v489 : System.DateTime = System.DateTime.Now
                v489
            | US3_0(v457) -> (* Some *)
                let v458 : System.DateTime = System.DateTime.Now
                let v461 : (System.DateTime -> int64) = _.Ticks
                let v462 : int64 = v461 v458
                let v465 : int64 = v462 - v457
                let v466 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v467 : System.TimeSpan = v466 v465
                let v470 : (System.TimeSpan -> int32) = _.Hours
                let v471 : int32 = v470 v467
                let v474 : (System.TimeSpan -> int32) = _.Minutes
                let v475 : int32 = v474 v467
                let v478 : (System.TimeSpan -> int32) = _.Seconds
                let v479 : int32 = v478 v467
                let v482 : (System.TimeSpan -> int32) = _.Milliseconds
                let v483 : int32 = v482 v467
                let v486 : System.DateTime = System.DateTime (1, 1, 1, v471, v475, v479, v483)
                v486
        let v494 : string = method7()
        let v497 : (string -> string) = v493.ToString
        let v498 : string = v497 v494
        let _v118 = v498 
        #endif
        let v501 : string = _v118 
        
        
        
        
        
        let v571 : string = "Debug"
        let v572 : (unit -> string) = v571.ToLower
        let v573 : string = v572 ()
        let v576 : string = v573.PadLeft (7, ' ')
        let v590 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v591 : string = "inline_colorization::color_bright_blue"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "&*$0"
        let v594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v576 v593 
        let v595 : string = "inline_colorization::color_reset"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "\"{v592}{v594}{v596}\""
        let v598 : string = @$"format!(" + v597 + ")"
        let v599 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "fable_library_rust::String_::fromString($0)"
        let v601 : string = Fable.Core.RustInterop.emitRustExpr v599 v600 
        let _v590 = v601 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v602 : string = "inline_colorization::color_bright_blue"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "&*$0"
        let v605 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v576 v604 
        let v606 : string = "inline_colorization::color_reset"
        let v607 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "\"{v603}{v605}{v607}\""
        let v609 : string = @$"format!(" + v608 + ")"
        let v610 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "fable_library_rust::String_::fromString($0)"
        let v612 : string = Fable.Core.RustInterop.emitRustExpr v610 v611 
        let _v590 = v612 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v613 : string = "inline_colorization::color_bright_blue"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "&*$0"
        let v616 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v576 v615 
        let v617 : string = "inline_colorization::color_reset"
        let v618 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "\"{v614}{v616}{v618}\""
        let v620 : string = @$"format!(" + v619 + ")"
        let v621 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v620 
        let v622 : string = "fable_library_rust::String_::fromString($0)"
        let v623 : string = Fable.Core.RustInterop.emitRustExpr v621 v622 
        let _v590 = v623 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v576 
        let v627 : string = v626 + v625 
        let _v590 = v627 
        #endif
#if FABLE_COMPILER_PYTHON
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v576 
        let v631 : string = v630 + v629 
        let _v590 = v631 
        #endif
#else
        let v632 : string = "\u001b[94m"
        let v633 : string = method8()
        let v634 : string = v632 + v576 
        let v635 : string = v634 + v633 
        let _v590 = v635 
        #endif
        let v636 : string = _v590 
        let v642 : int64 = v100.l0
        let v643 : string = method9()
        let v644 : Mut3 = {l0 = v643} : Mut3
        let v645 : string = "{ "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure10(v644, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = "options"
        let v655 : string = $"{v654}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure10(v644, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = " = "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure10(v644, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = $"{v645}"
        let v675 : unit = ()
        let v676 : (unit -> unit) = closure10(v644, v672)
        let v677 : unit = (fun () -> v676 (); v675) ()
        let v680 : string = "command"
        let v681 : string = $"{v680}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v644, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = $"{v663}"
        let v692 : unit = ()
        let v693 : (unit -> unit) = closure10(v644, v689)
        let v694 : unit = (fun () -> v693 (); v692) ()
        let v697 : string = $"{v0}"
        let v700 : unit = ()
        let v701 : (unit -> unit) = closure10(v644, v697)
        let v702 : unit = (fun () -> v701 (); v700) ()
        let v705 : string = "; "
        let v706 : string = $"{v705}"
        let v709 : unit = ()
        let v710 : (unit -> unit) = closure10(v644, v706)
        let v711 : unit = (fun () -> v710 (); v709) ()
        let v714 : string = "cancellation_token"
        let v715 : string = $"{v714}"
        let v718 : unit = ()
        let v719 : (unit -> unit) = closure10(v644, v715)
        let v720 : unit = (fun () -> v719 (); v718) ()
        let v723 : string = $"{v663}"
        let v726 : unit = ()
        let v727 : (unit -> unit) = closure10(v644, v723)
        let v728 : unit = (fun () -> v727 (); v726) ()
        let v731 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v732 : string = "format!(\"{:#?}\", $0)"
        let v733 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v732 
        let v734 : string = "fable_library_rust::String_::fromString($0)"
        let v735 : string = Fable.Core.RustInterop.emitRustExpr v733 v734 
        let _v731 = v735 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v736 : string = "format!(\"{:#?}\", $0)"
        let v737 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v736 
        let v738 : string = "fable_library_rust::String_::fromString($0)"
        let v739 : string = Fable.Core.RustInterop.emitRustExpr v737 v738 
        let _v731 = v739 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v740 : string = "format!(\"{:#?}\", $0)"
        let v741 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v740 
        let v742 : string = "fable_library_rust::String_::fromString($0)"
        let v743 : string = Fable.Core.RustInterop.emitRustExpr v741 v742 
        let _v731 = v743 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v744 : string = $"%A{v1}"
        let _v731 = v744 
        #endif
#if FABLE_COMPILER_PYTHON
        let v747 : string = $"%A{v1}"
        let _v731 = v747 
        #endif
#else
        let v750 : string = $"%A{v1}"
        let _v731 = v750 
        #endif
        let v753 : string = _v731 
        let v758 : string = $"{v753}"
        let v761 : unit = ()
        let v762 : (unit -> unit) = closure10(v644, v758)
        let v763 : unit = (fun () -> v762 (); v761) ()
        let v766 : string = $"{v705}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v644, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = "environment_variables"
        let v775 : string = $"{v774}"
        let v778 : unit = ()
        let v779 : (unit -> unit) = closure10(v644, v775)
        let v780 : unit = (fun () -> v779 (); v778) ()
        let v783 : string = $"{v663}"
        let v786 : unit = ()
        let v787 : (unit -> unit) = closure10(v644, v783)
        let v788 : unit = (fun () -> v787 (); v786) ()
        let v791 : string = $"%A{v2}"
        let v794 : string = $"{v791}"
        let v797 : unit = ()
        let v798 : (unit -> unit) = closure10(v644, v794)
        let v799 : unit = (fun () -> v798 (); v797) ()
        let v802 : string = $"{v705}"
        let v805 : unit = ()
        let v806 : (unit -> unit) = closure10(v644, v802)
        let v807 : unit = (fun () -> v806 (); v805) ()
        let v810 : string = "on_line"
        let v811 : string = $"{v810}"
        let v814 : unit = ()
        let v815 : (unit -> unit) = closure10(v644, v811)
        let v816 : unit = (fun () -> v815 (); v814) ()
        let v819 : string = $"{v663}"
        let v822 : unit = ()
        let v823 : (unit -> unit) = closure10(v644, v819)
        let v824 : unit = (fun () -> v823 (); v822) ()
        let v827 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v828 : string = "format!(\"{:#?}\", $0)"
        let v829 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v828 
        let v830 : string = "fable_library_rust::String_::fromString($0)"
        let v831 : string = Fable.Core.RustInterop.emitRustExpr v829 v830 
        let _v827 = v831 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v832 : string = "format!(\"{:#?}\", $0)"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v827 = v835 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v836 : string = "format!(\"{:#?}\", $0)"
        let v837 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v836 
        let v838 : string = "fable_library_rust::String_::fromString($0)"
        let v839 : string = Fable.Core.RustInterop.emitRustExpr v837 v838 
        let _v827 = v839 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v840 : string = $"%A{v3}"
        let _v827 = v840 
        #endif
#if FABLE_COMPILER_PYTHON
        let v843 : string = $"%A{v3}"
        let _v827 = v843 
        #endif
#else
        let v846 : string = $"%A{v3}"
        let _v827 = v846 
        #endif
        let v849 : string = _v827 
        let v854 : string = $"{v849}"
        let v857 : unit = ()
        let v858 : (unit -> unit) = closure10(v644, v854)
        let v859 : unit = (fun () -> v858 (); v857) ()
        let v862 : string = $"{v705}"
        let v865 : unit = ()
        let v866 : (unit -> unit) = closure10(v644, v862)
        let v867 : unit = (fun () -> v866 (); v865) ()
        let v870 : string = "stdin"
        let v871 : string = $"{v870}"
        let v874 : unit = ()
        let v875 : (unit -> unit) = closure10(v644, v871)
        let v876 : unit = (fun () -> v875 (); v874) ()
        let v879 : string = $"{v663}"
        let v882 : unit = ()
        let v883 : (unit -> unit) = closure10(v644, v879)
        let v884 : unit = (fun () -> v883 (); v882) ()
        let v887 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v888 : string = "format!(\"{:#?}\", $0)"
        let v889 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v888 
        let v890 : string = "fable_library_rust::String_::fromString($0)"
        let v891 : string = Fable.Core.RustInterop.emitRustExpr v889 v890 
        let _v887 = v891 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v892 : string = "format!(\"{:#?}\", $0)"
        let v893 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v892 
        let v894 : string = "fable_library_rust::String_::fromString($0)"
        let v895 : string = Fable.Core.RustInterop.emitRustExpr v893 v894 
        let _v887 = v895 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v896 : string = "format!(\"{:#?}\", $0)"
        let v897 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v896 
        let v898 : string = "fable_library_rust::String_::fromString($0)"
        let v899 : string = Fable.Core.RustInterop.emitRustExpr v897 v898 
        let _v887 = v899 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v900 : string = $"%A{v4}"
        let _v887 = v900 
        #endif
#if FABLE_COMPILER_PYTHON
        let v903 : string = $"%A{v4}"
        let _v887 = v903 
        #endif
#else
        let v906 : string = $"%A{v4}"
        let _v887 = v906 
        #endif
        let v909 : string = _v887 
        let v914 : string = $"{v909}"
        let v917 : unit = ()
        let v918 : (unit -> unit) = closure10(v644, v914)
        let v919 : unit = (fun () -> v918 (); v917) ()
        let v922 : string = $"{v705}"
        let v925 : unit = ()
        let v926 : (unit -> unit) = closure10(v644, v922)
        let v927 : unit = (fun () -> v926 (); v925) ()
        let v930 : string = "trace"
        let v931 : string = $"{v930}"
        let v934 : unit = ()
        let v935 : (unit -> unit) = closure10(v644, v931)
        let v936 : unit = (fun () -> v935 (); v934) ()
        let v939 : string = $"{v663}"
        let v942 : unit = ()
        let v943 : (unit -> unit) = closure10(v644, v939)
        let v944 : unit = (fun () -> v943 (); v942) ()
        let v949 : string =
            if v5 then
                let v947 : string = "true"
                v947
            else
                let v948 : string = "false"
                v948
        let v950 : string = $"{v949}"
        let v953 : unit = ()
        let v954 : (unit -> unit) = closure10(v644, v950)
        let v955 : unit = (fun () -> v954 (); v953) ()
        let v958 : string = $"{v705}"
        let v961 : unit = ()
        let v962 : (unit -> unit) = closure10(v644, v958)
        let v963 : unit = (fun () -> v962 (); v961) ()
        let v966 : string = "working_directory"
        let v967 : string = $"{v966}"
        let v970 : unit = ()
        let v971 : (unit -> unit) = closure10(v644, v967)
        let v972 : unit = (fun () -> v971 (); v970) ()
        let v975 : string = $"{v663}"
        let v978 : unit = ()
        let v979 : (unit -> unit) = closure10(v644, v975)
        let v980 : unit = (fun () -> v979 (); v978) ()
        let v983 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v984 : string = "format!(\"{:#?}\", $0)"
        let v985 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v984 
        let v986 : string = "fable_library_rust::String_::fromString($0)"
        let v987 : string = Fable.Core.RustInterop.emitRustExpr v985 v986 
        let _v983 = v987 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v988 : string = "format!(\"{:#?}\", $0)"
        let v989 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v988 
        let v990 : string = "fable_library_rust::String_::fromString($0)"
        let v991 : string = Fable.Core.RustInterop.emitRustExpr v989 v990 
        let _v983 = v991 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v992 : string = "format!(\"{:#?}\", $0)"
        let v993 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v992 
        let v994 : string = "fable_library_rust::String_::fromString($0)"
        let v995 : string = Fable.Core.RustInterop.emitRustExpr v993 v994 
        let _v983 = v995 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v996 : string = $"%A{v6}"
        let _v983 = v996 
        #endif
#if FABLE_COMPILER_PYTHON
        let v999 : string = $"%A{v6}"
        let _v983 = v999 
        #endif
#else
        let v1002 : string = $"%A{v6}"
        let _v983 = v1002 
        #endif
        let v1005 : string = _v983 
        let v1010 : string = $"{v1005}"
        let v1013 : unit = ()
        let v1014 : (unit -> unit) = closure10(v644, v1010)
        let v1015 : unit = (fun () -> v1014 (); v1013) ()
        let v1018 : string = " }"
        let v1019 : string = $"{v1018}"
        let v1022 : unit = ()
        let v1023 : (unit -> unit) = closure10(v644, v1019)
        let v1024 : unit = (fun () -> v1023 (); v1022) ()
        let v1027 : string = $"{v1018}"
        let v1030 : unit = ()
        let v1031 : (unit -> unit) = closure10(v644, v1027)
        let v1032 : unit = (fun () -> v1031 (); v1030) ()
        let v1035 : string = v644.l0
        let v1036 : string = $"runtime.execute_with_options_async"
        let v1037 : bool = v1036 = ""
        let v1094 : string =
            if v1037 then
                let v1038 : string = ""
                v1038
            else
                let v1039 : string = $"{v501} {v636} #{v642} %s{v1036} / {v1035}"
                let v1042 : char list = []
                let v1043 : (char list -> (char [])) = List.toArray
                let v1044 : (char []) = v1043 v1042
                let v1047 : string = v1039.TrimStart v1044 
                let v1065 : char list = []
                let v1066 : char list = '/' :: v1065 
                let v1069 : char list = ' ' :: v1066 
                let v1072 : (char list -> (char [])) = List.toArray
                let v1073 : (char []) = v1072 v1069
                let v1076 : string = v1047.TrimEnd v1073 
                v1076
        let v1095 : (string -> unit) = closure11()
        let v1096 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1097 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1094 v1097 
        let _v1096 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1098 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1094 v1098 
        let _v1096 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1099 : string = v26.l0
        let v1100 : bool = v1099 = ""
        let v1108 : string =
            if v1100 then
                v1094
            else
                let v1101 : bool = v1094 = ""
                if v1101 then
                    let v1102 : string = v26.l0
                    v1102
                else
                    let v1103 : string = v26.l0
                    let v1104 : string = "\n"
                    let v1105 : string = v1103 + v1104 
                    let v1106 : string = v1105 + v1094 
                    v1106
        let v1109 : string = "&*$0"
        let v1110 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1108 v1109 
        let v1111 : string = $"$0.chars()"
        let v1112 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v1110 v1111 
        let v1113 : string = "v1112"
        let v1114 : _ = Fable.Core.RustInterop.emitRustExpr () v1113 
        let v1115 : string = "v1114.collect::<Vec<_>>()"
        let v1116 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v1115 
        let v1117 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v1118 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v1116 v1117 
        let v1119 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v1120 : bool = Fable.Core.RustInterop.emitRustExpr v1118 v1119 
        let v1121 : string = "x"
        let v1122 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v1121 
        let v1123 : string = "String::from_iter($0)"
        let v1124 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1122 v1123 
        let v1125 : string = "true; $0 }).collect::<Vec<_>>()"
        let v1126 : bool = Fable.Core.RustInterop.emitRustExpr v1124 v1125 
        let v1127 : string = "_vec_map"
        let v1128 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1127 
        let v1129 : string = "$0.len()"
        let v1130 : unativeint = Fable.Core.RustInterop.emitRustExpr v1128 v1129 
        let v1131 : (unativeint -> int32) = int32
        let v1132 : int32 = v1131 v1130
        let v1133 : string = ""
        let v1134 : bool = v1094 <> v1133 
        let v1138 : bool =
            if v1134 then
                let v1137 : bool = v1132 <= 1
                v1137
            else
                false
        if v1138 then
            v26.l0 <- v1108
            ()
        else
            v26.l0 <- v1133
            let v1139 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1140 : bool = Fable.Core.RustInterop.emitRustExpr v1128 v1139 
            let v1141 : string = "x"
            let v1142 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1141 
            let v1143 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v1142 v1143 
            let v1144 : string = $"true;"
            let v1145 : bool = Fable.Core.RustInterop.emitRustExpr () v1144 
            let v1146 : string = "true; }}); { //"
            let v1147 : bool = Fable.Core.RustInterop.emitRustExpr () v1146 
            ()
        let _v1096 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1095 v1094
        let _v1096 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1095 v1094
        let _v1096 = () 
        #endif
#else
        v1095 v1094
        let _v1096 = () 
        #endif
        _v1096 
        let v1148 : (string -> unit) = v24.l0
        v1148 v1094
and closure58 (v0 : US31 option ref) (v1 : US31 option) : US31 option ref =
    v0.Value <- v1 
    v0
and closure59 (v0 : (struct (int32 * string * bool) -> Async<unit>) option, v1 : (US31 option -> US31 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : (struct (int32 * string * bool) -> Async<unit>) = x
    let v3 : US31 = US31_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure60 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Verbose"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_black"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[90m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[90m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[90m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = v638.l0
        let v640 : bool = v0 = ""
        let v697 : string =
            if v640 then
                let v641 : string = ""
                v641
            else
                let v642 : string = $"{v495} {v630} #{v636} %s{v0} / {v639}"
                let v645 : char list = []
                let v646 : (char list -> (char [])) = List.toArray
                let v647 : (char []) = v646 v645
                let v650 : string = v642.TrimStart v647 
                let v668 : char list = []
                let v669 : char list = '/' :: v668 
                let v672 : char list = ' ' :: v669 
                let v675 : (char list -> (char [])) = List.toArray
                let v676 : (char []) = v675 v672
                let v679 : string = v650.TrimEnd v676 
                v679
        let v698 : (string -> unit) = closure11()
        let v699 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v700 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v697 v700 
        let _v699 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v701 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v697 v701 
        let _v699 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v702 : string = v20.l0
        let v703 : bool = v702 = ""
        let v711 : string =
            if v703 then
                v697
            else
                let v704 : bool = v697 = ""
                if v704 then
                    let v705 : string = v20.l0
                    v705
                else
                    let v706 : string = v20.l0
                    let v707 : string = "\n"
                    let v708 : string = v706 + v707 
                    let v709 : string = v708 + v697 
                    v709
        let v712 : string = "&*$0"
        let v713 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let v714 : string = $"$0.chars()"
        let v715 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v713 v714 
        let v716 : string = "v715"
        let v717 : _ = Fable.Core.RustInterop.emitRustExpr () v716 
        let v718 : string = "v717.collect::<Vec<_>>()"
        let v719 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v718 
        let v720 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v721 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v719 v720 
        let v722 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v723 : bool = Fable.Core.RustInterop.emitRustExpr v721 v722 
        let v724 : string = "x"
        let v725 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v724 
        let v726 : string = "String::from_iter($0)"
        let v727 : std_string_String = Fable.Core.RustInterop.emitRustExpr v725 v726 
        let v728 : string = "true; $0 }).collect::<Vec<_>>()"
        let v729 : bool = Fable.Core.RustInterop.emitRustExpr v727 v728 
        let v730 : string = "_vec_map"
        let v731 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v730 
        let v732 : string = "$0.len()"
        let v733 : unativeint = Fable.Core.RustInterop.emitRustExpr v731 v732 
        let v734 : (unativeint -> int32) = int32
        let v735 : int32 = v734 v733
        let v736 : string = ""
        let v737 : bool = v697 <> v736 
        let v741 : bool =
            if v737 then
                let v740 : bool = v735 <= 1
                v740
            else
                false
        if v741 then
            v20.l0 <- v711
            ()
        else
            v20.l0 <- v736
            let v742 : string = "true; $0.into_iter().for_each(|x| { //"
            let v743 : bool = Fable.Core.RustInterop.emitRustExpr v731 v742 
            let v744 : string = "x"
            let v745 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v744 
            let v746 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v745 v746 
            let v747 : string = $"true;"
            let v748 : bool = Fable.Core.RustInterop.emitRustExpr () v747 
            let v749 : string = "true; }}); { //"
            let v750 : bool = Fable.Core.RustInterop.emitRustExpr () v749 
            ()
        let _v699 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v698 v697
        let _v699 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v698 v697
        let _v699 = () 
        #endif
#else
        v698 v697
        let _v699 = () 
        #endif
        _v699 
        let v751 : (string -> unit) = v18.l0
        v751 v697
and closure57 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v23 
    #endif
#else
    let v26 : Async<unit> option = None
    let mutable _v26 = v26 
    async {
    let v27 : string = v9.Data
    let v28 : string = null |> unbox<string>
    let v31 : bool = v27 = v28
    let v32 : bool = v31 <> true
    if v32 then
        let v33 : US31 option = None
        let _v33 = ref v33 
        let v34 : US31 option ref = _v33 
        let v35 : (US31 option -> US31 option ref) = closure58(v34)
        let v36 : unit = ()
        let v37 : (unit -> unit) = closure59(v3, v35)
        let v38 : unit = (fun () -> v37 (); v36) ()
        let v41 : US31 option = _v33.Value 
        let v52 : US31 = US31_1
        let v53 : US31 = v41 |> Option.defaultValue v52 
        match v53 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v57) -> (* Some *)
            let v58 : int32 = v7.Id
            let v59 : Async<unit> = v57 struct (v58, v27, false)
            do! v59 
            ()
        let v60 : string = $"> {v27}"
        if v5 then
            let v61 : unit = ()
            let v62 : (unit -> unit) = closure60(v60)
            let v63 : unit = (fun () -> v62 (); v61) ()
            ()
        else
            let v815 : unit = ()
            let v816 : (unit -> unit) = closure12(v60)
            let v817 : unit = (fun () -> v816 (); v815) ()
            ()
        let v819 : string = ""
        let v820 : string = $"{v819}{v27}{v819}"
        let v821 : (string -> unit) = v8.Push
        v821 v820
    ()
    }
    |> fun x -> _v26 <- Some x
    let v822 : Async<unit> = match _v26 with Some x -> x | None -> failwith "async.new_async_unit / _v26=None"
    let _v10 = v822 
    #endif
    let v823 : Async<unit> = _v10 
    let v828 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v828 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v828 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v828 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v828 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v828 = () 
    #endif
#else
    let v829 : (Async<unit> -> unit) = Async.StartImmediate
    v829 v823
    let _v828 = () 
    #endif
    _v828 
    ()
and closure61 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v23 
    #endif
#else
    let v26 : Async<unit> option = None
    let mutable _v26 = v26 
    async {
    let v27 : string = v9.Data
    let v28 : string = null |> unbox<string>
    let v31 : bool = v27 = v28
    let v32 : bool = v31 <> true
    if v32 then
        let v33 : US31 option = None
        let _v33 = ref v33 
        let v34 : US31 option ref = _v33 
        let v35 : (US31 option -> US31 option ref) = closure58(v34)
        let v36 : unit = ()
        let v37 : (unit -> unit) = closure59(v3, v35)
        let v38 : unit = (fun () -> v37 (); v36) ()
        let v41 : US31 option = _v33.Value 
        let v52 : US31 = US31_1
        let v53 : US31 = v41 |> Option.defaultValue v52 
        match v53 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v57) -> (* Some *)
            let v58 : int32 = v7.Id
            let v59 : Async<unit> = v57 struct (v58, v27, true)
            do! v59 
            ()
        let v60 : string = $"! {v27}"
        if v5 then
            let v61 : unit = ()
            let v62 : (unit -> unit) = closure60(v60)
            let v63 : unit = (fun () -> v62 (); v61) ()
            ()
        else
            let v815 : unit = ()
            let v816 : (unit -> unit) = closure12(v60)
            let v817 : unit = (fun () -> v816 (); v815) ()
            ()
        let v819 : string = "\u001b[7;4m"
        let v820 : string = "\u001b[0m"
        let v821 : string = $"{v819}{v27}{v820}"
        let v822 : (string -> unit) = v8.Push
        v822 v821
    ()
    }
    |> fun x -> _v26 <- Some x
    let v823 : Async<unit> = match _v26 with Some x -> x | None -> failwith "async.new_async_unit / _v26=None"
    let _v10 = v823 
    #endif
    let v824 : Async<unit> = _v10 
    let v829 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v829 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v829 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v829 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v829 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v829 = () 
    #endif
#else
    let v830 : (Async<unit> -> unit) = Async.StartImmediate
    v830 v824
    let _v829 = () 
    #endif
    _v829 
    ()
and closure62 (v0 : US32 option ref) (v1 : US32 option) : US32 option ref =
    v0.Value <- v1 
    v0
and closure63 (v0 : System.Threading.CancellationToken option, v1 : (US32 option -> US32 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : System.Threading.CancellationToken = x
    let v3 : US32 = US32_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure64 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = null |> unbox<bool>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : bool = null |> unbox<bool>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : bool = null |> unbox<bool>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : bool = null |> unbox<bool>
    let _v1 = v14 
    #endif
#else
    let v17 : bool = v0.HasExited
    let _v1 = v17 
    #endif
    let v18 : bool = _v1 
    let v23 : bool = v18 = false
    if v23 then
        let v24 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v24 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v24 = () 
        #endif
#else
        let v25 : (unit -> unit) = v0.Kill
        v25 ()
        let _v24 = () 
        #endif
        _v24 
        ()
and closure65 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "ex"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v667 : string = "format!(\"{:#?}\", $0)"
        let v668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v667 
        let v669 : string = "fable_library_rust::String_::fromString($0)"
        let v670 : string = Fable.Core.RustInterop.emitRustExpr v668 v669 
        let _v666 = v670 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v671 : string = "format!(\"{:#?}\", $0)"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v666 = v674 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v675 : string = "format!(\"{:#?}\", $0)"
        let v676 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v675 
        let v677 : string = "fable_library_rust::String_::fromString($0)"
        let v678 : string = Fable.Core.RustInterop.emitRustExpr v676 v677 
        let _v666 = v678 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v679 : string = $"%A{v0}"
        let _v666 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = $"%A{v0}"
        let _v666 = v682 
        #endif
#else
        let v685 : string = $"%A{v0}"
        let _v666 = v685 
        #endif
        let v688 : string = _v666 
        let v693 : string = $"{v688}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v638, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = " }"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v638, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = v638.l0
        let v711 : string = $"runtime.execute_with_options_async / WaitForExitAsync"
        let v712 : bool = v711 = ""
        let v769 : string =
            if v712 then
                let v713 : string = ""
                v713
            else
                let v714 : string = $"{v495} {v630} #{v636} %s{v711} / {v710}"
                let v717 : char list = []
                let v718 : (char list -> (char [])) = List.toArray
                let v719 : (char []) = v718 v717
                let v722 : string = v714.TrimStart v719 
                let v740 : char list = []
                let v741 : char list = '/' :: v740 
                let v744 : char list = ' ' :: v741 
                let v747 : (char list -> (char [])) = List.toArray
                let v748 : (char []) = v747 v744
                let v751 : string = v722.TrimEnd v748 
                v751
        let v770 : (string -> unit) = closure11()
        let v771 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v772 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v772 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v773 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v773 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v774 : string = v20.l0
        let v775 : bool = v774 = ""
        let v783 : string =
            if v775 then
                v769
            else
                let v776 : bool = v769 = ""
                if v776 then
                    let v777 : string = v20.l0
                    v777
                else
                    let v778 : string = v20.l0
                    let v779 : string = "\n"
                    let v780 : string = v778 + v779 
                    let v781 : string = v780 + v769 
                    v781
        let v784 : string = "&*$0"
        let v785 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v783 v784 
        let v786 : string = $"$0.chars()"
        let v787 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v785 v786 
        let v788 : string = "v787"
        let v789 : _ = Fable.Core.RustInterop.emitRustExpr () v788 
        let v790 : string = "v789.collect::<Vec<_>>()"
        let v791 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v793 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let v794 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v795 : bool = Fable.Core.RustInterop.emitRustExpr v793 v794 
        let v796 : string = "x"
        let v797 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v796 
        let v798 : string = "String::from_iter($0)"
        let v799 : std_string_String = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "true; $0 }).collect::<Vec<_>>()"
        let v801 : bool = Fable.Core.RustInterop.emitRustExpr v799 v800 
        let v802 : string = "_vec_map"
        let v803 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v802 
        let v804 : string = "$0.len()"
        let v805 : unativeint = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : (unativeint -> int32) = int32
        let v807 : int32 = v806 v805
        let v808 : string = ""
        let v809 : bool = v769 <> v808 
        let v813 : bool =
            if v809 then
                let v812 : bool = v807 <= 1
                v812
            else
                false
        if v813 then
            v20.l0 <- v783
            ()
        else
            v20.l0 <- v808
            let v814 : string = "true; $0.into_iter().for_each(|x| { //"
            let v815 : bool = Fable.Core.RustInterop.emitRustExpr v803 v814 
            let v816 : string = "x"
            let v817 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v817 v818 
            let v819 : string = $"true;"
            let v820 : bool = Fable.Core.RustInterop.emitRustExpr () v819 
            let v821 : string = "true; }}); { //"
            let v822 : bool = Fable.Core.RustInterop.emitRustExpr () v821 
            ()
        let _v771 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v770 v769
        let _v771 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v770 v769
        let _v771 = () 
        #endif
#else
        v770 v769
        let _v771 = () 
        #endif
        _v771 
        let v823 : (string -> unit) = v18.l0
        v823 v769
and closure66 (v0 : int32, v1 : string) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : int32 = v1.Length
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure10(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "exit_code"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure10(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure10(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v0}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure10(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure10(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "output_length"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure10(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v638}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = " }"
        let v711 : string = $"{v710}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v640, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = v640.l0
        let v720 : string = $"runtime.execute_with_options_async"
        let v721 : bool = v720 = ""
        let v778 : string =
            if v721 then
                let v722 : string = ""
                v722
            else
                let v723 : string = $"{v496} {v631} #{v637} %s{v720} / {v719}"
                let v726 : char list = []
                let v727 : (char list -> (char [])) = List.toArray
                let v728 : (char []) = v727 v726
                let v731 : string = v723.TrimStart v728 
                let v749 : char list = []
                let v750 : char list = '/' :: v749 
                let v753 : char list = ' ' :: v750 
                let v756 : (char list -> (char [])) = List.toArray
                let v757 : (char []) = v756 v753
                let v760 : string = v731.TrimEnd v757 
                v760
        let v779 : (string -> unit) = closure11()
        let v780 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v781 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v781 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v782 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v782 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = v21.l0
        let v784 : bool = v783 = ""
        let v792 : string =
            if v784 then
                v778
            else
                let v785 : bool = v778 = ""
                if v785 then
                    let v786 : string = v21.l0
                    v786
                else
                    let v787 : string = v21.l0
                    let v788 : string = "\n"
                    let v789 : string = v787 + v788 
                    let v790 : string = v789 + v778 
                    v790
        let v793 : string = "&*$0"
        let v794 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v792 v793 
        let v795 : string = $"$0.chars()"
        let v796 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v794 v795 
        let v797 : string = "v796"
        let v798 : _ = Fable.Core.RustInterop.emitRustExpr () v797 
        let v799 : string = "v798.collect::<Vec<_>>()"
        let v800 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v799 
        let v801 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v802 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v800 v801 
        let v803 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v804 : bool = Fable.Core.RustInterop.emitRustExpr v802 v803 
        let v805 : string = "x"
        let v806 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v805 
        let v807 : string = "String::from_iter($0)"
        let v808 : std_string_String = Fable.Core.RustInterop.emitRustExpr v806 v807 
        let v809 : string = "true; $0 }).collect::<Vec<_>>()"
        let v810 : bool = Fable.Core.RustInterop.emitRustExpr v808 v809 
        let v811 : string = "_vec_map"
        let v812 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v811 
        let v813 : string = "$0.len()"
        let v814 : unativeint = Fable.Core.RustInterop.emitRustExpr v812 v813 
        let v815 : (unativeint -> int32) = int32
        let v816 : int32 = v815 v814
        let v817 : string = ""
        let v818 : bool = v778 <> v817 
        let v822 : bool =
            if v818 then
                let v821 : bool = v816 <= 1
                v821
            else
                false
        if v822 then
            v21.l0 <- v792
            ()
        else
            v21.l0 <- v817
            let v823 : string = "true; $0.into_iter().for_each(|x| { //"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr v812 v823 
            let v825 : string = "x"
            let v826 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v825 
            let v827 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v826 v827 
            let v828 : string = $"true;"
            let v829 : bool = Fable.Core.RustInterop.emitRustExpr () v828 
            let v830 : string = "true; }}); { //"
            let v831 : bool = Fable.Core.RustInterop.emitRustExpr () v830 
            ()
        let _v780 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v779 v778
        let _v780 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v779 v778
        let _v780 = () 
        #endif
#else
        v779 v778
        let _v780 = () 
        #endif
        _v780 
        let v832 : (string -> unit) = v19.l0
        v832 v778
and method73 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v20 
    #endif
#else
    let v23 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v27 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v36 
    #endif
#else
    let v39 : Async<struct (int32 * string)> option = None
    let mutable _v39 = v39 
    async {
    let v40 : US14 = method42(v0)
    let struct (v49 : string, v50 : US1) =
        match v40 with
        | US14_1(v43) -> (* Error *)
            let v44 : string = $"resultm.get / Result value was Error: {v43}"
            failwith<struct (string * US1)> v44
        | US14_0(v41, v42) -> (* Ok *)
            struct (v41, v42)
    let v51 : US1 option = None
    let _v51 = ref v51 
    let v52 : US1 option ref = _v51 
    let v53 : (US1 option -> US1 option ref) = closure3(v52)
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure4(v6, v53)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v59 : US1 option = _v51.Value 
    let v70 : US1 = US1_1
    let v71 : US1 = v59 |> Option.defaultValue v70 
    let v78 : string =
        match v71 with
        | US1_1 -> (* None *)
            let v76 : string = ""
            v76
        | US1_0(v75) -> (* Some *)
            v75
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure56(v0, v1, v2, v3, v4, v5, v6)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v1224 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v1228 : string =
        match v50 with
        | US1_1 -> (* None *)
            let v1226 : string = ""
            v1226
        | US1_0(v1225) -> (* Some *)
            v1225
    let start_info = System.Diagnostics.ProcessStartInfo (
      Arguments = v1228,
      StandardOutputEncoding = v1224,
      WorkingDirectory = v78,
      FileName = v49,
      CreateNoWindow = true,
      RedirectStandardError = true,
      RedirectStandardOutput = true,
      UseShellExecute = false
    )
    let v1229 : System.Diagnostics.ProcessStartInfo = start_info
    let v1230 : int32 = v2.Length
    let v1231 : Mut5 = {l0 = 0} : Mut5
    while method43(v1230, v1231) do
        let v1233 : int32 = v1231.l0
        let struct (v1234 : string, v1235 : string) = v2.[int v1233]
        v1229.EnvironmentVariables.[v1234] <- v1235 
        let v1236 : int32 = v1233 + 1
        v1231.l0 <- v1236
        ()
    let v1237 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v1229)
    use v1237 = v1237 
    let v1238 : System.Diagnostics.Process = v1237 
    let v1239 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
    let v1240 : System.Collections.Concurrent.ConcurrentStack<string> = v1239 ()
    let v1241 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure57(v0, v1, v2, v3, v4, v5, v6, v1238, v1240)
    v1238.OutputDataReceived.Add v1241 
    let v1242 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v1238, v1240)
    v1238.ErrorDataReceived.Add v1242 
    let v1243 : (unit -> bool) = v1238.Start
    let v1244 : bool = v1243 ()
    let v1245 : bool = v1244 = false
    if v1245 then
        let v1246 : string = $"runtime.execute_with_options_async / process_start error"
        failwith<unit> v1246
    let v1247 : (unit -> unit) = v1238.BeginErrorReadLine
    v1247 ()
    let v1248 : (unit -> unit) = v1238.BeginOutputReadLine
    v1248 ()
    let v1249 : US32 option = None
    let _v1249 = ref v1249 
    let v1250 : US32 option ref = _v1249 
    let v1251 : (US32 option -> US32 option ref) = closure62(v1250)
    let v1252 : unit = ()
    let v1253 : (unit -> unit) = closure63(v1, v1251)
    let v1254 : unit = (fun () -> v1253 (); v1252) ()
    let v1257 : US32 option = _v1249.Value 
    let v1268 : US32 = US32_1
    let v1269 : US32 = v1257 |> Option.defaultValue v1268 
    let v1276 : System.Threading.CancellationToken =
        match v1269 with
        | US32_1 -> (* None *)
            let v1274 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
            v1274
        | US32_0(v1273) -> (* Some *)
            v1273
    let v1277 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1278 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1277 = v1278 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1281 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1277 = v1281 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1284 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1277 = v1284 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1287 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1277 = v1287 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1290 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1277 = v1290 
    #endif
#else
    let v1293 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1294 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1293 = v1294 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1297 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1293 = v1297 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1300 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1293 = v1300 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1303 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1293 = v1303 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1306 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1293 = v1306 
    #endif
#else
    let v1309 : Async<System.Threading.CancellationToken> option = None
    let mutable _v1309 = v1309 
    async {
    let v1310 : Async<System.Threading.CancellationToken> = Async.CancellationToken
    let! v1310 = v1310 
    let v1311 : System.Threading.CancellationToken = v1310 
    let v1312 : System.Threading.CancellationToken = Async.DefaultCancellationToken
    let v1313 : (System.Threading.CancellationToken []) = [|v1311; v1312; v1276|]
    let v1314 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
    let v1315 : System.Threading.CancellationTokenSource = v1314 v1313
    let v1316 : System.Threading.CancellationToken = v1315.Token
    return v1316 
    }
    |> fun x -> _v1309 <- Some x
    let v1317 : Async<System.Threading.CancellationToken> = match _v1309 with Some x -> x | None -> failwith "async.new_async_unit / _v1309=None"
    let _v1293 = v1317 
    #endif
    let v1318 : Async<System.Threading.CancellationToken> = _v1293 
    let _v1277 = v1318 
    #endif
    let v1323 : Async<System.Threading.CancellationToken> = _v1277 
    let! v1323 = v1323 
    let v1328 : System.Threading.CancellationToken = v1323 
    let v1329 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v1328.Register
    let v1330 : (unit -> unit) = closure64(v1238)
    let v1331 : System.Threading.CancellationTokenRegistration = v1329 v1330
    use v1331 = v1331 
    let v1332 : System.Threading.CancellationTokenRegistration = v1331 
    let v1333 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1334 : Async<int32> = null |> unbox<Async<int32>>
    let _v1333 = v1334 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1337 : Async<int32> = null |> unbox<Async<int32>>
    let _v1333 = v1337 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1340 : Async<int32> = null |> unbox<Async<int32>>
    let _v1333 = v1340 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1343 : Async<int32> = null |> unbox<Async<int32>>
    let _v1333 = v1343 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1346 : Async<int32> = null |> unbox<Async<int32>>
    let _v1333 = v1346 
    #endif
#else
    let v1349 : Async<int32> option = None
    let mutable _v1349 = v1349 
    async {
    try
    let v1350 : System.Threading.Tasks.Task = v1238.WaitForExitAsync v1328 
    let v1351 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1352 : Async<unit> = null |> unbox<Async<unit>>
    let _v1351 = v1352 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1355 : Async<unit> = null |> unbox<Async<unit>>
    let _v1351 = v1355 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1358 : Async<unit> = null |> unbox<Async<unit>>
    let _v1351 = v1358 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1361 : Async<unit> = null |> unbox<Async<unit>>
    let _v1351 = v1361 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1364 : Async<unit> = null |> unbox<Async<unit>>
    let _v1351 = v1364 
    #endif
#else
    let v1367 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
    let v1368 : Async<unit> = v1367 v1350
    let _v1351 = v1368 
    #endif
    let v1369 : Async<unit> = _v1351 
    do! v1369 
    let v1374 : int32 = v1238.ExitCode
    return v1374 
    with ex ->
    let v1375 : exn = ex
    let v1376 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1377 : string = $"%A{v1375}"
    let _v1376 = v1377 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1380 : string = $"%A{v1375}"
    let _v1376 = v1380 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1383 : string = $"%A{v1375}"
    let _v1376 = v1383 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1386 : string = $"%A{v1375}"
    let _v1376 = v1386 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1389 : string = $"%A{v1375}"
    let _v1376 = v1389 
    #endif
#else
    let v1392 : string = $"{v1375.GetType ()}: {v1375.Message}"
    let _v1376 = v1392 
    #endif
    let v1393 : string = _v1376 
    let v1398 : (string -> unit) = v1240.Push
    v1398 v1393
    let v1399 : System.Threading.Tasks.TaskCanceledException = v1375 |> unbox<System.Threading.Tasks.TaskCanceledException>
    let v1402 : unit = ()
    let v1403 : (unit -> unit) = closure65(v1399)
    let v1404 : unit = (fun () -> v1403 (); v1402) ()
    return -2147483648 
    (*
    *)
    }
    |> fun x -> _v1349 <- Some x
    let v2228 : Async<int32> = match _v1349 with Some x -> x | None -> failwith "async.new_async_unit / _v1349=None"
    let _v1333 = v2228 
    #endif
    let v2229 : Async<int32> = _v1333 
    let! v2229 = v2229 
    let v2234 : int32 = v2229 
    let v2235 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.rev
    let v2236 : string seq = v2235 v1240
    let v2239 : (string -> (string seq -> string)) = String.concat
    let v2240 : string = "\n"
    let v2241 : (string seq -> string) = v2239 v2240
    let v2242 : string = v2241 v2236
    let v2245 : unit = ()
    let v2246 : (unit -> unit) = closure66(v2234, v2242)
    let v2247 : unit = (fun () -> v2246 (); v2245) ()
    return struct (v2234, v2242) 
    }
    |> fun x -> _v39 <- Some x
    let v3078 : Async<struct (int32 * string)> = match _v39 with Some x -> x | None -> failwith "async.new_async_unit / _v39=None"
    let _v23 = v3078 
    #endif
    let v3079 : Async<struct (int32 * string)> = _v23 
    let _v7 = v3079 
    #endif
    let v3084 : Async<struct (int32 * string)> = _v7 
    v3084
and method40 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = method41(v0, v1, v2, v3, v4, v5, v6)
    let v9 : US14 = method42(v8)
    let struct (v18 : string, v19 : US1) =
        match v9 with
        | US14_1(v12) -> (* Error *)
            let v13 : string = $"resultm.get / Result value was Error: {v12}"
            failwith<struct (string * US1)> v13
        | US14_0(v10, v11) -> (* Ok *)
            struct (v10, v11)
    let v23 : string =
        match v19 with
        | US1_1 -> (* None *)
            let v21 : string = ""
            v21
        | US1_0(v20) -> (* Some *)
            v20
    let v24 : US22 = method54(v23)
    let v30 : (string []) =
        match v24 with
        | US22_1(v26) -> (* Error *)
            let v27 : string = $"resultm.get / Result value was Error: {v26}"
            failwith<(string [])> v27
        | US22_0(v25) -> (* Ok *)
            v25
    let v31 : string = "$0.to_vec()"
    let v32 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v34 : bool = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "x"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "true; $0 }).collect::<Vec<_>>()"
    let v42 : bool = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "_vec_map"
    let v44 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure37(v0, v1, v2, v3, v4, v5, v6, v18, v44)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v1283 : bool = true
    let mutable _v1283 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v1284 : string = "std::process::Command::new(&*$0)"
    let v1285 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v18 v1284 
    let v1286 : string = "true; let mut v1285 = v1285"
    let v1287 : bool = Fable.Core.RustInterop.emitRustExpr () v1286 
    let v1288 : string = "std::process::Command::args(&mut $0, &*$1)"
    let v1289 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v1285, v44) v1288 
    let v1290 : string = "std::process::Stdio::piped()"
    let v1291 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1290 
    let v1292 : string = "std::process::Command::stdout($0, std::process::Stdio::piped())"
    let v1293 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1289 v1292 
    let v1294 : string = "std::process::Stdio::piped()"
    let v1295 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1294 
    let v1296 : string = "std::process::Command::stderr($0, std::process::Stdio::piped())"
    let v1297 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1293 v1296 
    let v1298 : string = "std::process::Stdio::piped()"
    let v1299 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1298 
    let v1300 : string = "std::process::Command::stdin($0, std::process::Stdio::piped())"
    let v1301 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1297 v1300 
    let v1302 : US1 option = None
    let _v1302 = ref v1302 
    let v1303 : US1 option ref = _v1302 
    let v1304 : (US1 option -> US1 option ref) = closure3(v1303)
    let v1305 : unit = ()
    let v1306 : (unit -> unit) = closure4(v6, v1304)
    let v1307 : unit = (fun () -> v1306 (); v1305) ()
    let v1310 : US1 option = _v1302.Value 
    let v1321 : US1 = US1_1
    let v1322 : US1 = v1310 |> Option.defaultValue v1321 
    let v1330 : Ref<Mut<std_process_Command>> =
        match v1322 with
        | US1_1 -> (* None *)
            v1301
        | US1_0(v1326) -> (* Some *)
            let v1327 : string = "std::process::Command::current_dir(v1301, &*$0)"
            let v1328 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1326 v1327 
            v1328
    let v1331 : uint64 = System.Convert.ToUInt64 v2.Length
    let v1332 : bool = v1331 = 0UL
    let v1348 : Ref<Mut<std_process_Command>> =
        if v1332 then
            v1330
        else
            let v1333 : string = "$0.to_vec()"
            let v1334 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v1333 
            let v1335 : string = "true; let _vec_fold_ = $0.into_iter().fold(v1330, |acc, x| { //"
            let v1336 : bool = Fable.Core.RustInterop.emitRustExpr v1334 v1335 
            let v1337 : string = "acc"
            let v1338 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v1337 
            let v1339 : string = "x"
            let struct (v1340 : string, v1341 : string) = Fable.Core.RustInterop.emitRustExpr () v1339 
            let v1342 : string = "std::process::Command::env(v1338, &*$0, &*$1)"
            let v1343 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v1340, v1341) v1342 
            let v1344 : string = "true; $0 })"
            let v1345 : bool = Fable.Core.RustInterop.emitRustExpr v1343 v1344 
            let v1346 : string = "_vec_fold_"
            let v1347 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v1346 
            v1347
    let v1349 : string = "std::process::Command::spawn($0)"
    let v1350 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1348 v1349 
    let v1351 : (std_io_Error -> std_string_String) = method30()
    let v1352 : string = "$0.map_err(|x| $1(x))"
    let v1353 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1350, v1351) v1352 
    let v1354 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v1355 : bool = Fable.Core.RustInterop.emitRustExpr v1353 v1354 
    let v1356 : string = "x"
    let v1357 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v1356 
    let v1358 : std_process_Child option = Some v1357 
    let v1361 : string = "std::sync::Mutex::new($0)"
    let v1362 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1358 v1361 
    let v1363 : string = "std::sync::Arc::new($0)"
    let v1364 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1362 v1363 
    let v1365 : string = "true; $0 })"
    let v1366 : bool = Fable.Core.RustInterop.emitRustExpr v1364 v1365 
    let v1367 : string = "_result_map_"
    let v1368 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1367 
    let v1369 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) = method65()
    let v1370 : (std_string_String -> US24) = method66()
    let v1371 : string = "match v1368 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v1372 : US24 = Fable.Core.RustInterop.emitRustExpr struct (v1369, v1370) v1371 
    let struct (v6624 : int32, v6625 : US5, v6626 : US25) =
        match v1372 with
        | US24_1(v5792) -> (* Error *)
            let v5793 : unit = ()
            let v5794 : (unit -> unit) = closure40(v5792)
            let v5795 : unit = (fun () -> v5794 (); v5793) ()
            let v6619 : US5 = US5_0(v5792)
            let v6620 : US25 = US25_1
            struct (-1, v6619, v6620)
        | US24_0(v1373) -> (* Ok *)
            let v1374 : string = "true; let _capture = (|| { //"
            let v1375 : bool = Fable.Core.RustInterop.emitRustExpr () v1374 
            let v1376 : string = "$0"
            let v1377 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1373 v1376 
            let v1378 : string = "v1377.lock()"
            let v1379 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1378 
            let v1380 : string = "$0.unwrap()"
            let v1381 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1379 v1380 
            let v1382 : string = "true; let mut v1381 = v1381"
            let v1383 : bool = Fable.Core.RustInterop.emitRustExpr () v1382 
            let v1384 : string = "&mut $0"
            let v1385 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1381 v1384 
            let v1386 : string = "$0.as_mut()"
            let v1387 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1385 v1386 
            let v1388 : string = "$0.unwrap()"
            let v1389 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1387 v1388 
            let v1390 : string = "&mut v1389.stdout"
            let v1391 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr () v1390 
            let v1392 : string = "Option::take($0)"
            let v1393 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v1391 v1392 
            let v1394 : string = "$0.unwrap()"
            let v1395 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v1393 v1394 
            let v1396 : string = "true; $0 })()"
            let v1397 : bool = Fable.Core.RustInterop.emitRustExpr v1395 v1396 
            let v1398 : string = "_capture"
            let v1399 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v1398 
            let v1400 : string = "true; let _capture = (|| { //"
            let v1401 : bool = Fable.Core.RustInterop.emitRustExpr () v1400 
            let v1402 : string = "$0"
            let v1403 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1373 v1402 
            let v1404 : string = "v1403.lock()"
            let v1405 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1404 
            let v1406 : string = "$0.unwrap()"
            let v1407 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1405 v1406 
            let v1408 : string = "true; let mut v1407 = v1407"
            let v1409 : bool = Fable.Core.RustInterop.emitRustExpr () v1408 
            let v1410 : string = "&mut $0"
            let v1411 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1407 v1410 
            let v1412 : string = "$0.as_mut()"
            let v1413 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1411 v1412 
            let v1414 : string = "$0.unwrap()"
            let v1415 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1413 v1414 
            let v1416 : string = "&mut v1415.stderr"
            let v1417 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr () v1416 
            let v1418 : string = "Option::take($0)"
            let v1419 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v1417 v1418 
            let v1420 : string = "$0.unwrap()"
            let v1421 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v1419 v1420 
            let v1422 : string = "true; $0 })()"
            let v1423 : bool = Fable.Core.RustInterop.emitRustExpr v1421 v1422 
            let v1424 : string = "_capture"
            let v1425 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v1424 
            let v1426 : string = "true; let _capture = (|| { //"
            let v1427 : bool = Fable.Core.RustInterop.emitRustExpr () v1426 
            let v1428 : string = "$0"
            let v1429 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1373 v1428 
            let v1430 : string = "v1429.lock()"
            let v1431 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1430 
            let v1432 : string = "$0.unwrap()"
            let v1433 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1431 v1432 
            let v1434 : string = "true; let mut v1433 = v1433"
            let v1435 : bool = Fable.Core.RustInterop.emitRustExpr () v1434 
            let v1436 : string = "&mut $0"
            let v1437 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1433 v1436 
            let v1438 : string = "$0.as_mut()"
            let v1439 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1437 v1438 
            let v1440 : string = "$0.unwrap()"
            let v1441 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1439 v1440 
            let v1442 : string = "&mut $0.stdin"
            let v1443 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1441 v1442 
            let v1444 : string = "Option::take($0)"
            let v1445 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1443 v1444 
            let v1446 : string = "$0.unwrap()"
            let v1447 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v1445 v1446 
            let v1448 : std_process_ChildStdin option = Some v1447 
            let v1451 : string = "std::sync::Mutex::new($0)"
            let v1452 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1448 v1451 
            let v1453 : string = "std::sync::Arc::new($0)"
            let v1454 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1452 v1453 
            let v1455 : string = "true; $0 })()"
            let v1456 : bool = Fable.Core.RustInterop.emitRustExpr v1454 v1455 
            let v1457 : string = "_capture"
            let v1458 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1457 
            let v1459 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v1460 : std_sync_mpsc_Sender<std_string_String>, v1461 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v1459 
            let v1462 : string = "std::sync::Mutex::new($0)"
            let v1463 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1460 v1462 
            let v1464 : string = "std::sync::Arc::new($0)"
            let v1465 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1463 v1464 
            let v1466 : string = "std::sync::Mutex::new($0)"
            let v1467 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1460 v1466 
            let v1468 : string = "std::sync::Arc::new($0)"
            let v1469 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1467 v1468 
            let v1470 : string = "std::sync::Mutex::new($0)"
            let v1471 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1461 v1470 
            let v1472 : string = "std::sync::Arc::new($0)"
            let v1473 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1471 v1472 
            let v1474 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v1475 : bool = Fable.Core.RustInterop.emitRustExpr () v1474 
            let v1476 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v1477 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v1399 v1476 
            let v1478 : string = "std::io::BufReader::new(v1477)"
            let v1479 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v1478 
            let v1480 : string = "std::io::BufRead::lines(v1479)"
            let v1481 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1480 
            let v1482 : string = "true; let mut v1481 = v1481; let _iter_try_for_each = v1481.try_for_each(|x| { //"
            let v1483 : bool = Fable.Core.RustInterop.emitRustExpr () v1482 
            let v1484 : string = "x"
            let v1485 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1484 
            let v1486 : string = "$0.clone()"
            let v1487 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1465 v1486 
            let v1488 : (std_io_Error -> std_string_String) = method30()
            let v1489 : string = "$0.map_err(|x| $1(x))"
            let v1490 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1485, v1488) v1489 
            let v1491 : (std_string_String -> US26) = method67()
            let v1492 : (std_string_String -> US26) = method68()
            let v1493 : string = "match v1490 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v1494 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v1491, v1492) v1493 
            let v3104 : std_string_String =
                match v1494 with
                | US26_1(v2271) -> (* Error *)
                    let v2272 : unit = ()
                    let v2273 : (unit -> unit) = closure43(v2271)
                    let v2274 : unit = (fun () -> v2273 (); v2272) ()
                    let v3098 : string = $"\u001b[4;7m{v2271}\u001b[0m"
                    let v3099 : string = "&*$0"
                    let v3100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3098 v3099 
                    let v3101 : string = "String::from($0)"
                    let v3102 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3100 v3101 
                    v3102
                | US26_0(v1495) -> (* Ok *)
                    let v1496 : string = "fable_library_rust::String_::fromString($0)"
                    let v1497 : string = Fable.Core.RustInterop.emitRustExpr v1495 v1496 
                    let v1498 : string = "encoding_rs::UTF_8"
                    let v1499 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v1498 
                    let v1500 : string = "$0.encode(&*$1).0"
                    let v1501 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v1499, v1497) v1500 
                    let v1502 : string = "$0.as_ref()"
                    let v1503 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v1501 v1502 
                    let v1504 : string = "std::str::from_utf8($0)"
                    let v1505 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v1503 v1504 
                    let v1506 : string = "$0.unwrap()"
                    let v1507 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1505 v1506 
                    let v1508 : string = "String::from($0)"
                    let v1509 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1507 v1508 
                    let v1510 : string = "fable_library_rust::String_::fromString($0)"
                    let v1511 : string = Fable.Core.RustInterop.emitRustExpr v1509 v1510 
                    let v1512 : string = $"> {v1511}"
                    if v5 then
                        let v1513 : unit = ()
                        let v1514 : (unit -> unit) = closure44(v1512)
                        let v1515 : unit = (fun () -> v1514 (); v1513) ()
                        ()
                    else
                        let v2267 : unit = ()
                        let v2268 : (unit -> unit) = closure12(v1512)
                        let v2269 : unit = (fun () -> v2268 (); v2267) ()
                        ()
                    v1509
            let v3105 : string = "$0"
            let v3106 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1487 v3105 
            let v3107 : string = "v3106.lock()"
            let v3108 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v3107 
            let v3109 : string = "$0.unwrap()"
            let v3110 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v3108 v3109 
            let v3111 : string = "&$0"
            let v3112 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v3110 v3111 
            let v3113 : string = "$0.send($1)"
            let v3114 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v3112, v3104) v3113 
            let v3115 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method69()
            let v3116 : string = "$0.map_err(|x| $1(x))"
            let v3117 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v3114, v3115) v3116 
            let v3118 : string = "$0"
            let v3119 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v3117 v3118 
            let v3120 : string = "true; $0 }); //"
            let v3121 : bool = Fable.Core.RustInterop.emitRustExpr v3119 v3120 
            let v3122 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v3123 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v3122 
            let v3124 : Result<unit, string> = method70(v3123)
            let v3125 : string = ""
            let v3126 : string = "}"
            let v3127 : string = v3125 + v3126 
            let v3128 : string = "true; v3124 " + v3127 + "); " + v3125 + " // rust.fix_closure'"
            let v3129 : bool = Fable.Core.RustInterop.emitRustExpr () v3128 
            let v3130 : string = "__spawn"
            let v3131 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v3130 
            let v3132 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v3133 : bool = Fable.Core.RustInterop.emitRustExpr () v3132 
            let v3134 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v3135 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v1425 v3134 
            let v3136 : string = "std::io::BufReader::new(v3135)"
            let v3137 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v3136 
            let v3138 : string = "std::io::BufRead::lines(v3137)"
            let v3139 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v3138 
            let v3140 : string = "true; let mut v3139 = v3139; let _iter_try_for_each = v3139.try_for_each(|x| { //"
            let v3141 : bool = Fable.Core.RustInterop.emitRustExpr () v3140 
            let v3142 : string = "x"
            let v3143 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v3142 
            let v3144 : string = "$0.clone()"
            let v3145 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1469 v3144 
            let v3146 : (std_io_Error -> std_string_String) = method30()
            let v3147 : string = "$0.map_err(|x| $1(x))"
            let v3148 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v3143, v3146) v3147 
            let v3149 : (std_string_String -> US26) = method67()
            let v3150 : (std_string_String -> US26) = method68()
            let v3151 : string = "match v3148 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v3152 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v3149, v3150) v3151 
            let v4759 : std_string_String =
                match v3152 with
                | US26_1(v3930) -> (* Error *)
                    let v3931 : unit = ()
                    let v3932 : (unit -> unit) = closure43(v3930)
                    let v3933 : unit = (fun () -> v3932 (); v3931) ()
                    let v4753 : string = $"\u001b[4;7m{v3930}\u001b[0m"
                    let v4754 : string = "&*$0"
                    let v4755 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4753 v4754 
                    let v4756 : string = "String::from($0)"
                    let v4757 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4755 v4756 
                    v4757
                | US26_0(v3153) -> (* Ok *)
                    let v3154 : string = "fable_library_rust::String_::fromString($0)"
                    let v3155 : string = Fable.Core.RustInterop.emitRustExpr v3153 v3154 
                    let v3156 : string = "encoding_rs::UTF_8"
                    let v3157 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v3156 
                    let v3158 : string = "$0.encode(&*$1).0"
                    let v3159 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v3157, v3155) v3158 
                    let v3160 : string = "$0.as_ref()"
                    let v3161 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v3159 v3160 
                    let v3162 : string = "std::str::from_utf8($0)"
                    let v3163 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v3161 v3162 
                    let v3164 : string = "$0.unwrap()"
                    let v3165 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3163 v3164 
                    let v3166 : string = "String::from($0)"
                    let v3167 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3165 v3166 
                    let v3168 : string = "fable_library_rust::String_::fromString($0)"
                    let v3169 : string = Fable.Core.RustInterop.emitRustExpr v3167 v3168 
                    let v3170 : string = $"! {v3169}"
                    if v5 then
                        let v3171 : unit = ()
                        let v3172 : (unit -> unit) = closure44(v3170)
                        let v3173 : unit = (fun () -> v3172 (); v3171) ()
                        ()
                    else
                        let v3921 : unit = ()
                        let v3922 : (unit -> unit) = closure12(v3170)
                        let v3923 : unit = (fun () -> v3922 (); v3921) ()
                        ()
                    let v3925 : string = $"\u001b[4;7m{v3167}\u001b[0m"
                    let v3926 : string = "&*$0"
                    let v3927 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3925 v3926 
                    let v3928 : string = "String::from($0)"
                    let v3929 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3927 v3928 
                    v3929
            let v4760 : string = "$0"
            let v4761 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v3145 v4760 
            let v4762 : string = "v4761.lock()"
            let v4763 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v4762 
            let v4764 : string = "$0.unwrap()"
            let v4765 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4763 v4764 
            let v4766 : string = "&$0"
            let v4767 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4765 v4766 
            let v4768 : string = "$0.send($1)"
            let v4769 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v4767, v4759) v4768 
            let v4770 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method69()
            let v4771 : string = "$0.map_err(|x| $1(x))"
            let v4772 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4769, v4770) v4771 
            let v4773 : string = "$0"
            let v4774 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v4772 v4773 
            let v4775 : string = "true; $0 }); //"
            let v4776 : bool = Fable.Core.RustInterop.emitRustExpr v4774 v4775 
            let v4777 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v4778 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v4777 
            let v4779 : Result<unit, string> = method70(v4778)
            let v4780 : string = v3125 + v3126 
            let v4781 : string = "true; v4779 " + v4780 + "); " + v3125 + " // rust.fix_closure'"
            let v4782 : bool = Fable.Core.RustInterop.emitRustExpr () v4781 
            let v4783 : string = "__spawn"
            let v4784 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4783 
            let v4785 : US27 option = None
            let _v4785 = ref v4785 
            let v4786 : US27 option ref = _v4785 
            let v4787 : (US27 option -> US27 option ref) = closure46(v4786)
            let v4788 : unit = ()
            let v4789 : (unit -> unit) = closure47(v4, v4787)
            let v4790 : unit = (fun () -> v4789 (); v4788) ()
            let v4793 : US27 option = _v4785.Value 
            let v4804 : US27 = US27_1
            let v4805 : US27 = v4793 |> Option.defaultValue v4804 
            match v4805 with
            | US27_1 -> (* None *)
                ()
            | US27_0(v4809) -> (* Some *)
                let v4810 : string = "$0"
                let v4811 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1458 v4810 
                let v4812 : string = "v4811.lock()"
                let v4813 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v4812 
                let v4814 : string = "$0.unwrap()"
                let v4815 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4813 v4814 
                let v4816 : string = "true; let mut v4815 = v4815"
                let v4817 : bool = Fable.Core.RustInterop.emitRustExpr () v4816 
                let v4818 : string = "&mut $0"
                let v4819 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v4815 v4818 
                let v4820 : string = "Option::take($0)"
                let v4821 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v4819 v4820 
                let v4822 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v4823 : bool = Fable.Core.RustInterop.emitRustExpr v4821 v4822 
                let v4824 : string = "x"
                let v4825 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v4824 
                let v4826 : string = "std::sync::Mutex::new($0)"
                let v4827 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4825 v4826 
                let v4828 : string = "std::sync::Arc::new($0)"
                let v4829 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v4827 v4828 
                let v4830 : string = "true; $0 })"
                let v4831 : bool = Fable.Core.RustInterop.emitRustExpr v4829 v4830 
                let v4832 : string = "_optionm_map_"
                let v4833 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v4832 
                let v4834 : US28 option = None
                let _v4834 = ref v4834 
                let v4835 : US28 option ref = _v4834 
                let v4836 : (US28 option -> US28 option ref) = closure48(v4835)
                let v4837 : unit = ()
                let v4838 : (unit -> unit) = closure49(v4833, v4836)
                let v4839 : unit = (fun () -> v4838 (); v4837) ()
                let v4842 : US28 option = _v4834.Value 
                let v4853 : US28 = US28_1
                let v4854 : US28 = v4842 |> Option.defaultValue v4853 
                match v4854 with
                | US28_1 -> (* None *)
                    ()
                | US28_0(v4858) -> (* Some *)
                    v4809 v4858
                    let v4859 : string = "$0"
                    let v4860 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v4858 v4859 
                    let v4861 : string = "v4860.lock()"
                    let v4862 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v4861 
                    let v4863 : string = "$0.unwrap()"
                    let v4864 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4862 v4863 
                    let v4865 : std_sync_MutexGuard<std_process_ChildStdin> = method71(v4864)
                    let v4866 : string = "true; let mut v4865 = v4865"
                    let v4867 : bool = Fable.Core.RustInterop.emitRustExpr () v4866 
                    let v4868 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v4869 : bool = Fable.Core.RustInterop.emitRustExpr v4865 v4868 
                    ()
            let v4870 : string = "$0"
            let v4871 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1373 v4870 
            let v4872 : string = "v4871.lock()"
            let v4873 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v4872 
            let v4874 : string = "$0.unwrap()"
            let v4875 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4873 v4874 
            let v4876 : string = "true; let mut v4875 = v4875"
            let v4877 : bool = Fable.Core.RustInterop.emitRustExpr () v4876 
            let v4878 : string = "&mut $0"
            let v4879 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v4875 v4878 
            let v4880 : string = "Option::take($0)"
            let v4881 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v4879 v4880 
            let v4882 : string = "$0.unwrap()"
            let v4883 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v4881 v4882 
            let v4884 : string = "$0.wait_with_output()"
            let v4885 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4883 v4884 
            let v4886 : (std_io_Error -> std_string_String) = method30()
            let v4887 : string = "$0.map_err(|x| $1(x))"
            let v4888 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4885, v4886) v4887 
            let v4889 : std_thread_JoinHandle<Result<unit, string>> = method72(v4784)
            let v4890 : string = "v4889"
            let v4891 : string = v4890 + v3125 
            let v4892 : string = v4891 + v3125 
            let v4893 : std_thread_JoinHandle<Result<unit, string>> = method72(v3131)
            let v4894 : string = "v4893"
            let v4895 : string = ", "
            let v4896 : string = v4894 + v4895 
            let v4897 : string = v4896 + v4892 
            let v4898 : string = "vec![" + v4897 + "]"
            let v4899 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v4898 
            let v4900 : string = "true; $0.into_iter().for_each(|x| { //"
            let v4901 : bool = Fable.Core.RustInterop.emitRustExpr v4899 v4900 
            let v4902 : string = "x"
            let v4903 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4902 
            let v4904 : string = "std::thread::JoinHandle::join($0)"
            let v4905 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v4903 v4904 
            let v4906 : string = "$0.unwrap()"
            let v4907 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4905 v4906 
            let v4908 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4907 v4908 
            let v4909 : string = $"true;"
            let v4910 : bool = Fable.Core.RustInterop.emitRustExpr () v4909 
            let v4911 : string = "true; }}); { //"
            let v4912 : bool = Fable.Core.RustInterop.emitRustExpr () v4911 
            let v4913 : (std_process_Output -> US29) = closure50()
            let v4914 : (std_string_String -> US29) = closure51()
            let v4915 : US29 = match v4888 with Ok x -> v4913 x | Error x -> v4914 x
            match v4915 with
            | US29_1(v4961) -> (* Error *)
                let v4962 : unit = ()
                let v4963 : (unit -> unit) = closure52(v4961)
                let v4964 : unit = (fun () -> v4963 (); v4962) ()
                let v5784 : US5 = US5_0(v4961)
                let v5785 : US25 = US25_1
                struct (-2, v5784, v5785)
            | US29_0(v4916) -> (* Ok *)
                let v4917 : string = "$0.status"
                let v4918 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v4916 v4917 
                let v4919 : string = "$0.code()"
                let v4920 : int32 option = Fable.Core.RustInterop.emitRustExpr v4918 v4919 
                let v4921 : US30 option = None
                let _v4921 = ref v4921 
                let v4922 : US30 option ref = _v4921 
                let v4923 : (US30 option -> US30 option ref) = closure53(v4922)
                let v4924 : unit = ()
                let v4925 : (unit -> unit) = closure54(v4920, v4923)
                let v4926 : unit = (fun () -> v4925 (); v4924) ()
                let v4929 : US30 option = _v4921.Value 
                let v4940 : US30 = US30_1
                let v4941 : US30 = v4929 |> Option.defaultValue v4940 
                match v4941 with
                | US30_1 -> (* None *)
                    let v4948 : string = "&*$0"
                    let v4949 : string = "runtime.execute_with_options / exit_code=None"
                    let v4950 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4949 v4948 
                    let v4951 : string = "String::from($0)"
                    let v4952 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4950 v4951 
                    let v4953 : US5 = US5_0(v4952)
                    let v4954 : US25 = US25_0(v1473)
                    struct (-1, v4953, v4954)
                | US30_0(v4945) -> (* Some *)
                    let v4946 : US5 = US5_1
                    let v4947 : US25 = US25_0(v1473)
                    struct (v4945, v4946, v4947)
    let v6633 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v6626 with
        | US25_1 -> (* None *)
            let v6631 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v6631
        | US25_0(v6627) -> (* Some *)
            let v6628 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v6627 
            v6628
    let v6634 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v6635 : bool = Fable.Core.RustInterop.emitRustExpr v6633 v6634 
    let v6636 : string = "x"
    let v6637 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v6636 
    let v6638 : string = "$0"
    let v6639 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v6637 v6638 
    let v6640 : string = "v6639.lock()"
    let v6641 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v6640 
    let v6642 : string = "$0.unwrap()"
    let v6643 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v6641 v6642 
    let v6644 : string = "v6643.iter()"
    let v6645 : _ = Fable.Core.RustInterop.emitRustExpr () v6644 
    let v6646 : string = "v6645.collect::<Vec<_>>()"
    let v6647 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6646 
    let v6648 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v6649 : bool = Fable.Core.RustInterop.emitRustExpr v6647 v6648 
    let v6650 : string = "x"
    let v6651 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6650 
    let v6652 : string = "fable_library_rust::String_::fromString($0)"
    let v6653 : string = Fable.Core.RustInterop.emitRustExpr v6651 v6652 
    let v6654 : string = "true; $0 }).collect::<Vec<_>>()"
    let v6655 : bool = Fable.Core.RustInterop.emitRustExpr v6653 v6654 
    let v6656 : string = "_vec_map"
    let v6657 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v6656 
    let v6658 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v6659 : (string []) = Fable.Core.RustInterop.emitRustExpr v6657 v6658 
    let v6660 : string seq = v6659 |> Seq.ofArray
    let v6663 : (string -> (string seq -> string)) = String.concat
    let v6664 : string = "\n"
    let v6665 : (string seq -> string) = v6663 v6664
    let v6666 : string = v6665 v6660
    let v6669 : string = "true; $0 })"
    let v6670 : bool = Fable.Core.RustInterop.emitRustExpr v6666 v6669 
    let v6671 : string = "_optionm_map_"
    let v6672 : string option = Fable.Core.RustInterop.emitRustExpr () v6671 
    let v6679 : US1 =
        match v6625 with
        | US5_1 -> (* None *)
            US1_1
        | US5_0(v6673) -> (* Some *)
            let v6674 : string = "fable_library_rust::String_::fromString($0)"
            let v6675 : string = Fable.Core.RustInterop.emitRustExpr v6673 v6674 
            US1_0(v6675)
    let v6683 : string =
        match v6679 with
        | US1_1 -> (* None *)
            let v6681 : string = ""
            v6681
        | US1_0(v6680) -> (* Some *)
            v6680
    let v6684 : string = v6672 |> Option.defaultValue v6683 
    let v6687 : unit = ()
    let v6688 : (unit -> unit) = closure55(v6624, v6684)
    let v6689 : unit = (fun () -> v6688 (); v6687) ()
    let v7520 : (int32 * string) = v6624, v6684 
    v7520 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _v1283 <- Some x
    let v7521 : (int32 * string) = match _v1283 with Some x -> x | None -> failwith "base.capture / _v1283=None"
    let (a, b) = v7521 
    let v7522 : int32 = a
    let v7523 : string = b
    let _v7 = struct (v7522, v7523) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v7528 : int32, v7529 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v7528, v7529) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v7534 : int32, v7535 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v7534, v7535) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v7540 : int32, v7541 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v7540, v7541) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v7546 : int32, v7547 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v7546, v7547) 
    #endif
#else
    let v7552 : Async<struct (int32 * string)> = method73(v0, v1, v2, v3, v4, v5, v6)
    let v7553 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v7554 : int32, v7555 : string) = null |> unbox<struct (int32 * string)>
    let _v7553 = struct (v7554, v7555) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v7560 : int32, v7561 : string) = null |> unbox<struct (int32 * string)>
    let _v7553 = struct (v7560, v7561) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v7566 : int32, v7567 : string) = null |> unbox<struct (int32 * string)>
    let _v7553 = struct (v7566, v7567) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v7572 : int32, v7573 : string) = null |> unbox<struct (int32 * string)>
    let _v7553 = struct (v7572, v7573) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v7578 : int32, v7579 : string) = null |> unbox<struct (int32 * string)>
    let _v7553 = struct (v7578, v7579) 
    #endif
#else
    let v7584 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v7585 : int32, v7586 : string) = v7584 v7552
    let _v7553 = struct (v7585, v7586) 
    #endif
    let struct (v7587 : int32, v7588 : string) = _v7553 
    let _v7 = struct (v7587, v7588) 
    #endif
    let struct (v7597 : int32, v7598 : string) = _v7 
    struct (v7597, v7598)
and closure67 (v0 : US8, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "env"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : string = $"%A{v0}"
        let v672 : string = $"{v669}"
        let v675 : unit = ()
        let v676 : (unit -> unit) = closure10(v641, v672)
        let v677 : unit = (fun () -> v676 (); v675) ()
        let v680 : string = "; "
        let v681 : string = $"{v680}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure10(v641, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = "exit_code"
        let v690 : string = $"{v689}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure10(v641, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = $"{v660}"
        let v701 : unit = ()
        let v702 : (unit -> unit) = closure10(v641, v698)
        let v703 : unit = (fun () -> v702 (); v701) ()
        let v706 : string = $"{v3}"
        let v709 : unit = ()
        let v710 : (unit -> unit) = closure10(v641, v706)
        let v711 : unit = (fun () -> v710 (); v709) ()
        let v714 : string = $"{v680}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v641, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = "run_result"
        let v723 : string = $"{v722}"
        let v726 : unit = ()
        let v727 : (unit -> unit) = closure10(v641, v723)
        let v728 : unit = (fun () -> v727 (); v726) ()
        let v731 : string = $"{v660}"
        let v734 : unit = ()
        let v735 : (unit -> unit) = closure10(v641, v731)
        let v736 : unit = (fun () -> v735 (); v734) ()
        let v739 : string = $"{v2}"
        let v742 : unit = ()
        let v743 : (unit -> unit) = closure10(v641, v739)
        let v744 : unit = (fun () -> v743 (); v742) ()
        let v747 : string = $"{v680}"
        let v750 : unit = ()
        let v751 : (unit -> unit) = closure10(v641, v747)
        let v752 : unit = (fun () -> v751 (); v750) ()
        let v755 : string = "new_code_path"
        let v756 : string = $"{v755}"
        let v759 : unit = ()
        let v760 : (unit -> unit) = closure10(v641, v756)
        let v761 : unit = (fun () -> v760 (); v759) ()
        let v764 : string = $"{v660}"
        let v767 : unit = ()
        let v768 : (unit -> unit) = closure10(v641, v764)
        let v769 : unit = (fun () -> v768 (); v767) ()
        let v772 : string = $"{v1}"
        let v775 : unit = ()
        let v776 : (unit -> unit) = closure10(v641, v772)
        let v777 : unit = (fun () -> v776 (); v775) ()
        let v780 : string = " }"
        let v781 : string = $"{v780}"
        let v784 : unit = ()
        let v785 : (unit -> unit) = closure10(v641, v781)
        let v786 : unit = (fun () -> v785 (); v784) ()
        let v789 : string = v641.l0
        let v790 : string = "spiral_builder.process_cuda / env install error"
        let v791 : string = $"{v498} {v633} #{v639} %s{v790} / {v789}"
        let v794 : char list = []
        let v795 : (char list -> (char [])) = List.toArray
        let v796 : (char []) = v795 v794
        let v799 : string = v791.TrimStart v796 
        let v817 : char list = []
        let v818 : char list = '/' :: v817 
        let v821 : char list = ' ' :: v818 
        let v824 : (char list -> (char [])) = List.toArray
        let v825 : (char []) = v824 v821
        let v828 : string = v799.TrimEnd v825 
        let v846 : (string -> unit) = closure11()
        let v847 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v828 v848 
        let _v847 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v849 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v828 v849 
        let _v847 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v850 : string = v23.l0
        let v851 : bool = v850 = ""
        let v859 : string =
            if v851 then
                v828
            else
                let v852 : bool = v828 = ""
                if v852 then
                    let v853 : string = v23.l0
                    v853
                else
                    let v854 : string = v23.l0
                    let v855 : string = "\n"
                    let v856 : string = v854 + v855 
                    let v857 : string = v856 + v828 
                    v857
        let v860 : string = "&*$0"
        let v861 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v859 v860 
        let v862 : string = $"$0.chars()"
        let v863 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v861 v862 
        let v864 : string = "v863"
        let v865 : _ = Fable.Core.RustInterop.emitRustExpr () v864 
        let v866 : string = "v865.collect::<Vec<_>>()"
        let v867 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v866 
        let v868 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v869 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v867 v868 
        let v870 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v871 : bool = Fable.Core.RustInterop.emitRustExpr v869 v870 
        let v872 : string = "x"
        let v873 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v872 
        let v874 : string = "String::from_iter($0)"
        let v875 : std_string_String = Fable.Core.RustInterop.emitRustExpr v873 v874 
        let v876 : string = "true; $0 }).collect::<Vec<_>>()"
        let v877 : bool = Fable.Core.RustInterop.emitRustExpr v875 v876 
        let v878 : string = "_vec_map"
        let v879 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v878 
        let v880 : string = "$0.len()"
        let v881 : unativeint = Fable.Core.RustInterop.emitRustExpr v879 v880 
        let v882 : (unativeint -> int32) = int32
        let v883 : int32 = v882 v881
        let v884 : string = ""
        let v885 : bool = v828 <> v884 
        let v889 : bool =
            if v885 then
                let v888 : bool = v883 <= 1
                v888
            else
                false
        if v889 then
            v23.l0 <- v859
            ()
        else
            v23.l0 <- v884
            let v890 : string = "true; $0.into_iter().for_each(|x| { //"
            let v891 : bool = Fable.Core.RustInterop.emitRustExpr v879 v890 
            let v892 : string = "x"
            let v893 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v892 
            let v894 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v893 v894 
            let v895 : string = $"true;"
            let v896 : bool = Fable.Core.RustInterop.emitRustExpr () v895 
            let v897 : string = "true; }}); { //"
            let v898 : bool = Fable.Core.RustInterop.emitRustExpr () v897 
            ()
        let _v847 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v846 v828
        let _v847 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v846 v828
        let _v847 = () 
        #endif
#else
        v846 v828
        let _v847 = () 
        #endif
        _v847 
        let v899 : (string -> unit) = v21.l0
        v899 v828
and closure68 () (v0 : string) : US1 =
    US1_0(v0)
and closure69 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : (string -> (string seq -> string)) = String.concat
    let v9 : (string seq -> string) = v8 v1
    v9 v5
and closure71 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "ex"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v670 : string = "format!(\"{:#?}\", $0)"
        let v671 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v670 
        let v672 : string = "fable_library_rust::String_::fromString($0)"
        let v673 : string = Fable.Core.RustInterop.emitRustExpr v671 v672 
        let _v669 = v673 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v674 : string = "format!(\"{:#?}\", $0)"
        let v675 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v674 
        let v676 : string = "fable_library_rust::String_::fromString($0)"
        let v677 : string = Fable.Core.RustInterop.emitRustExpr v675 v676 
        let _v669 = v677 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v678 : string = "format!(\"{:#?}\", $0)"
        let v679 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v678 
        let v680 : string = "fable_library_rust::String_::fromString($0)"
        let v681 : string = Fable.Core.RustInterop.emitRustExpr v679 v680 
        let _v669 = v681 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v682 : string = $"%A{v3}"
        let _v669 = v682 
        #endif
#if FABLE_COMPILER_PYTHON
        let v685 : string = $"%A{v3}"
        let _v669 = v685 
        #endif
#else
        let v688 : string = $"%A{v3}"
        let _v669 = v688 
        #endif
        let v691 : string = _v669 
        let v696 : string = $"{v691}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v641, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "; "
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure10(v641, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = "run_result"
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v641, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v660}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v641, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = $"{v1}"
        let v733 : unit = ()
        let v734 : (unit -> unit) = closure10(v641, v730)
        let v735 : unit = (fun () -> v734 (); v733) ()
        let v738 : string = $"{v704}"
        let v741 : unit = ()
        let v742 : (unit -> unit) = closure10(v641, v738)
        let v743 : unit = (fun () -> v742 (); v741) ()
        let v746 : string = "new_code_path"
        let v747 : string = $"{v746}"
        let v750 : unit = ()
        let v751 : (unit -> unit) = closure10(v641, v747)
        let v752 : unit = (fun () -> v751 (); v750) ()
        let v755 : string = $"{v660}"
        let v758 : unit = ()
        let v759 : (unit -> unit) = closure10(v641, v755)
        let v760 : unit = (fun () -> v759 (); v758) ()
        let v763 : string = $"{v0}"
        let v766 : unit = ()
        let v767 : (unit -> unit) = closure10(v641, v763)
        let v768 : unit = (fun () -> v767 (); v766) ()
        let v771 : string = $"{v704}"
        let v774 : unit = ()
        let v775 : (unit -> unit) = closure10(v641, v771)
        let v776 : unit = (fun () -> v775 (); v774) ()
        let v779 : string = "external_command"
        let v780 : string = $"{v779}"
        let v783 : unit = ()
        let v784 : (unit -> unit) = closure10(v641, v780)
        let v785 : unit = (fun () -> v784 (); v783) ()
        let v788 : string = $"{v660}"
        let v791 : unit = ()
        let v792 : (unit -> unit) = closure10(v641, v788)
        let v793 : unit = (fun () -> v792 (); v791) ()
        let v796 : string = $"{v2}"
        let v799 : unit = ()
        let v800 : (unit -> unit) = closure10(v641, v796)
        let v801 : unit = (fun () -> v800 (); v799) ()
        let v804 : string = " }"
        let v805 : string = $"{v804}"
        let v808 : unit = ()
        let v809 : (unit -> unit) = closure10(v641, v805)
        let v810 : unit = (fun () -> v809 (); v808) ()
        let v813 : string = v641.l0
        let v814 : string = "spiral_builder.process_cuda / Exception"
        let v815 : string = $"{v498} {v633} #{v639} %s{v814} / {v813}"
        let v818 : char list = []
        let v819 : (char list -> (char [])) = List.toArray
        let v820 : (char []) = v819 v818
        let v823 : string = v815.TrimStart v820 
        let v841 : char list = []
        let v842 : char list = '/' :: v841 
        let v845 : char list = ' ' :: v842 
        let v848 : (char list -> (char [])) = List.toArray
        let v849 : (char []) = v848 v845
        let v852 : string = v823.TrimEnd v849 
        let v870 : (string -> unit) = closure11()
        let v871 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v872 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v852 v872 
        let _v871 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v873 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v852 v873 
        let _v871 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v874 : string = v23.l0
        let v875 : bool = v874 = ""
        let v883 : string =
            if v875 then
                v852
            else
                let v876 : bool = v852 = ""
                if v876 then
                    let v877 : string = v23.l0
                    v877
                else
                    let v878 : string = v23.l0
                    let v879 : string = "\n"
                    let v880 : string = v878 + v879 
                    let v881 : string = v880 + v852 
                    v881
        let v884 : string = "&*$0"
        let v885 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v883 v884 
        let v886 : string = $"$0.chars()"
        let v887 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v885 v886 
        let v888 : string = "v887"
        let v889 : _ = Fable.Core.RustInterop.emitRustExpr () v888 
        let v890 : string = "v889.collect::<Vec<_>>()"
        let v891 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v890 
        let v892 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v893 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v891 v892 
        let v894 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v895 : bool = Fable.Core.RustInterop.emitRustExpr v893 v894 
        let v896 : string = "x"
        let v897 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v896 
        let v898 : string = "String::from_iter($0)"
        let v899 : std_string_String = Fable.Core.RustInterop.emitRustExpr v897 v898 
        let v900 : string = "true; $0 }).collect::<Vec<_>>()"
        let v901 : bool = Fable.Core.RustInterop.emitRustExpr v899 v900 
        let v902 : string = "_vec_map"
        let v903 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v902 
        let v904 : string = "$0.len()"
        let v905 : unativeint = Fable.Core.RustInterop.emitRustExpr v903 v904 
        let v906 : (unativeint -> int32) = int32
        let v907 : int32 = v906 v905
        let v908 : string = ""
        let v909 : bool = v852 <> v908 
        let v913 : bool =
            if v909 then
                let v912 : bool = v907 <= 1
                v912
            else
                false
        if v913 then
            v23.l0 <- v883
            ()
        else
            v23.l0 <- v908
            let v914 : string = "true; $0.into_iter().for_each(|x| { //"
            let v915 : bool = Fable.Core.RustInterop.emitRustExpr v903 v914 
            let v916 : string = "x"
            let v917 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v916 
            let v918 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v917 v918 
            let v919 : string = $"true;"
            let v920 : bool = Fable.Core.RustInterop.emitRustExpr () v919 
            let v921 : string = "true; }}); { //"
            let v922 : bool = Fable.Core.RustInterop.emitRustExpr () v921 
            ()
        let _v871 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v870 v852
        let _v871 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v870 v852
        let _v871 = () 
        #endif
#else
        v870 v852
        let _v871 = () 
        #endif
        _v871 
        let v923 : (string -> unit) = v21.l0
        v923 v852
and closure70 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure71(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure72 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "exit_code"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : string = $"{v2}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure10(v641, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = "; "
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure10(v641, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = "run_result"
        let v687 : string = $"{v686}"
        let v690 : unit = ()
        let v691 : (unit -> unit) = closure10(v641, v687)
        let v692 : unit = (fun () -> v691 (); v690) ()
        let v695 : string = $"{v660}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure10(v641, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = $"{v1}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v641, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = $"{v677}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v641, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = "new_code_path"
        let v720 : string = $"{v719}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v641, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = $"{v660}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure10(v641, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = $"{v0}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure10(v641, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = $"{v677}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure10(v641, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = "external_command"
        let v753 : string = $"{v752}"
        let v756 : unit = ()
        let v757 : (unit -> unit) = closure10(v641, v753)
        let v758 : unit = (fun () -> v757 (); v756) ()
        let v761 : string = $"{v660}"
        let v764 : unit = ()
        let v765 : (unit -> unit) = closure10(v641, v761)
        let v766 : unit = (fun () -> v765 (); v764) ()
        let v769 : string = $"{v3}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure10(v641, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = " }"
        let v778 : string = $"{v777}"
        let v781 : unit = ()
        let v782 : (unit -> unit) = closure10(v641, v778)
        let v783 : unit = (fun () -> v782 (); v781) ()
        let v786 : string = v641.l0
        let v787 : string = "spiral_builder.process_cuda / error"
        let v788 : string = $"{v498} {v633} #{v639} %s{v787} / {v786}"
        let v791 : char list = []
        let v792 : (char list -> (char [])) = List.toArray
        let v793 : (char []) = v792 v791
        let v796 : string = v788.TrimStart v793 
        let v814 : char list = []
        let v815 : char list = '/' :: v814 
        let v818 : char list = ' ' :: v815 
        let v821 : (char list -> (char [])) = List.toArray
        let v822 : (char []) = v821 v818
        let v825 : string = v796.TrimEnd v822 
        let v843 : (string -> unit) = closure11()
        let v844 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v845 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v845 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v846 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v846 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = v23.l0
        let v848 : bool = v847 = ""
        let v856 : string =
            if v848 then
                v825
            else
                let v849 : bool = v825 = ""
                if v849 then
                    let v850 : string = v23.l0
                    v850
                else
                    let v851 : string = v23.l0
                    let v852 : string = "\n"
                    let v853 : string = v851 + v852 
                    let v854 : string = v853 + v825 
                    v854
        let v857 : string = "&*$0"
        let v858 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v856 v857 
        let v859 : string = $"$0.chars()"
        let v860 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = "v860"
        let v862 : _ = Fable.Core.RustInterop.emitRustExpr () v861 
        let v863 : string = "v862.collect::<Vec<_>>()"
        let v864 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v866 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v864 v865 
        let v867 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v868 : bool = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "x"
        let v870 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v869 
        let v871 : string = "String::from_iter($0)"
        let v872 : std_string_String = Fable.Core.RustInterop.emitRustExpr v870 v871 
        let v873 : string = "true; $0 }).collect::<Vec<_>>()"
        let v874 : bool = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "_vec_map"
        let v876 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v875 
        let v877 : string = "$0.len()"
        let v878 : unativeint = Fable.Core.RustInterop.emitRustExpr v876 v877 
        let v879 : (unativeint -> int32) = int32
        let v880 : int32 = v879 v878
        let v881 : string = ""
        let v882 : bool = v825 <> v881 
        let v886 : bool =
            if v882 then
                let v885 : bool = v880 <= 1
                v885
            else
                false
        if v886 then
            v23.l0 <- v856
            ()
        else
            v23.l0 <- v881
            let v887 : string = "true; $0.into_iter().for_each(|x| { //"
            let v888 : bool = Fable.Core.RustInterop.emitRustExpr v876 v887 
            let v889 : string = "x"
            let v890 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v889 
            let v891 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v890 v891 
            let v892 : string = $"true;"
            let v893 : bool = Fable.Core.RustInterop.emitRustExpr () v892 
            let v894 : string = "true; }}); { //"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            ()
        let _v844 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v843 v825
        let _v844 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v843 v825
        let _v844 = () 
        #endif
#else
        v843 v825
        let _v844 = () 
        #endif
        _v844 
        let v896 : (string -> unit) = v21.l0
        v896 v825
and closure73 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and method74 () : string =
    let v0 : string = "fs-path"
    v0
and method75 () : string =
    let v0 : string = "command"
    v0
and method76 () : string =
    let v0 : string = "path"
    v0
and method81 (v0 : string) : string =
    v0
and method80 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : string = "^\\\\\\\\\\?\\\\"
        let v4 : string = ""
        let v5 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = $"regex::Regex::new(&$0)"
        let v7 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let v8 : string = "$0.unwrap()"
        let v9 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v7 v8 
        let v10 : string = method81(v0)
        let v11 : string = $"$0.replace_all(&*$1, &*$2)"
        let v12 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10, v4) v11 
        let v13 : string = "String::from($0)"
        let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v13 
        let v15 : string = "fable_library_rust::String_::fromString($0)"
        let v16 : string = Fable.Core.RustInterop.emitRustExpr v14 v15 
        let _v5 = v16 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v17 : string = null |> unbox<string>
        let _v5 = v17 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v20 : string = null |> unbox<string>
        let _v5 = v20 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v23 : string = null |> unbox<string>
        let _v5 = v23 
        #endif
#if FABLE_COMPILER_PYTHON
        let v26 : string = null |> unbox<string>
        let _v5 = v26 
        #endif
#else
        let v29 : string = System.Text.RegularExpressions.Regex.Replace (v0, v3, v4)
        let _v5 = v29 
        #endif
        let v30 : string = _v5 
        let v35 : string = $"{v30.[0] |> string |> _.ToLower()}{v30.[1..]}"
        let v36 : string = "\\"
        let v37 : string = "/"
        let v38 : string = v35.Replace (v36, v37)
        v38
and method82 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method83 () : char =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::path::MAIN_SEPARATOR"
    let v2 : char = Fable.Core.RustInterop.emitRustExpr () v1 
    let _v0 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v6 
    #endif
#else
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v7 
    #endif
    let v8 : char = _v0 
    v8
and method79 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : bool = v9 = false
    let v118 : string =
        if v10 then
            let v11 : string = method23()
            let v12 : string = method15(v11, v0)
            let v13 : string = method80(v12)
            let v14 : string = "/"
            let v15 : (string []) = v13.Split v14 
            let v18 : (string []) = [||]
            let v19 : int32 = v15.Length
            let v20 : Mut6 = {l0 = 0; l1 = 0; l2 = v18} : Mut6
            while method82(v19, v20) do
                let v22 : int32 = v20.l0
                let v23 : int32 =  -v22
                let v24 : int32 = v23 + v19
                let v25 : int32 = v24 - 1
                let struct (v26 : int32, v27 : (string [])) = v20.l1, v20.l2
                let v28 : string = v15.[int v25]
                let v29 : bool = ".." = v28
                let struct (v71 : int32, v72 : (string [])) =
                    if v29 then
                        let v30 : int32 = v26 + 1
                        struct (v30, v27)
                    else
                        let v31 : bool = "." = v28
                        if v31 then
                            struct (v26, v27)
                        else
                            let v32 : bool = 0 = v26
                            if v32 then
                                let v33 : string = ":"
                                let v34 : bool = v28.EndsWith v33 
                                if v34 then
                                    let v35 : string = $"{v11.[0]}:"
                                    let v36 : (string []) = [|v35|]
                                    let v37 : int32 = v36.Length
                                    let v38 : int32 = v27.Length
                                    let v39 : int32 = v37 + v38
                                    let v40 : (string []) = Array.zeroCreate<string> (v39)
                                    let v41 : Mut5 = {l0 = 0} : Mut5
                                    while method43(v39, v41) do
                                        let v43 : int32 = v41.l0
                                        let v44 : bool = v43 < v37
                                        let v48 : string =
                                            if v44 then
                                                let v45 : string = v36.[int v43]
                                                v45
                                            else
                                                let v46 : int32 = v43 - v37
                                                let v47 : string = v27.[int v46]
                                                v47
                                        v40.[int v43] <- v48
                                        let v49 : int32 = v43 + 1
                                        v41.l0 <- v49
                                        ()
                                    struct (0, v40)
                                else
                                    let v50 : (string []) = [|v28|]
                                    let v51 : int32 = v50.Length
                                    let v52 : int32 = v27.Length
                                    let v53 : int32 = v51 + v52
                                    let v54 : (string []) = Array.zeroCreate<string> (v53)
                                    let v55 : Mut5 = {l0 = 0} : Mut5
                                    while method43(v53, v55) do
                                        let v57 : int32 = v55.l0
                                        let v58 : bool = v57 < v51
                                        let v62 : string =
                                            if v58 then
                                                let v59 : string = v50.[int v57]
                                                v59
                                            else
                                                let v60 : int32 = v57 - v51
                                                let v61 : string = v27.[int v60]
                                                v61
                                        v54.[int v57] <- v62
                                        let v63 : int32 = v57 + 1
                                        v55.l0 <- v63
                                        ()
                                    struct (0, v54)
                            else
                                let v66 : int32 = v26 - 1
                                struct (v66, v27)
                let v73 : int32 = v22 + 1
                v20.l0 <- v73
                v20.l1 <- v71
                v20.l2 <- v72
                ()
            let struct (v74 : int32, v75 : (string [])) = v20.l1, v20.l2
            let v76 : string seq = seq { for i = 0 to v75.Length - 1 do yield v75.[i] }
            let v79 : char = method83()
            let v80 : (char -> string) = _.ToString()
            let v81 : string = v80 v79
            let v84 : (string -> (string seq -> string)) = String.concat
            let v85 : (string seq -> string) = v84 v81
            v85 v76
        else
            let v89 : string = "std::fs::canonicalize(&*$0)"
            let v90 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v89 
            let v91 : string = "$0.unwrap()"
            let v92 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : string = "$0.display()"
            let v94 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v92 v93 
            let v95 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v96 : string = "format!(\"{}\", $0)"
            let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v96 
            let _v95 = v97 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v98 : string = "format!(\"{}\", $0)"
            let v99 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v98 
            let _v95 = v99 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v100 : string = "format!(\"{}\", $0)"
            let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v100 
            let _v95 = v101 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v102 : std_string_String = null |> unbox<std_string_String>
            let _v95 = v102 
            #endif
#if FABLE_COMPILER_PYTHON
            let v105 : std_string_String = null |> unbox<std_string_String>
            let _v95 = v105 
            #endif
#else
            let v108 : std_string_String = null |> unbox<std_string_String>
            let _v95 = v108 
            #endif
            let v111 : std_string_String = _v95 
            let v116 : string = "fable_library_rust::String_::fromString($0)"
            let v117 : string = Fable.Core.RustInterop.emitRustExpr v111 v116 
            v117
    let _v1 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v119 : string = null |> unbox<string>
    let _v1 = v119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v122 : string = null |> unbox<string>
    let _v1 = v122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v125 : string = null |> unbox<string>
    let _v1 = v125 
    #endif
#if FABLE_COMPILER_PYTHON
    let v128 : string = null |> unbox<string>
    let _v1 = v128 
    #endif
#else
    let v131 : (string -> string) = System.IO.Path.GetFullPath
    let v132 : string = v131 v0
    let _v1 = v132 
    #endif
    let v133 : string = _v1 
    v133
and method78 (v0 : string) : string =
    let v1 : string = method79(v0)
    method80(v1)
and method77 (v0 : string) : string =
    let v1 : string = method23()
    let v2 : string = method15(v1, v0)
    method78(v2)
and closure74 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method77(v2)
and method84 () : string =
    let v0 : string = "retries"
    v0
and method85 () : string =
    let v0 : string = "working-directory"
    v0
and closure75 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 1 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Debug"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_blue"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_blue"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_blue"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[94m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[94m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[94m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = $"{v1}/{v0}"
        let v641 : string = method9()
        let v642 : Mut3 = {l0 = v641} : Mut3
        let v643 : string = "{ "
        let v644 : string = $"{v643}"
        let v647 : unit = ()
        let v648 : (unit -> unit) = closure10(v642, v644)
        let v649 : unit = (fun () -> v648 (); v647) ()
        let v652 : string = "exit_code"
        let v653 : string = $"{v652}"
        let v656 : unit = ()
        let v657 : (unit -> unit) = closure10(v642, v653)
        let v658 : unit = (fun () -> v657 (); v656) ()
        let v661 : string = " = "
        let v662 : string = $"{v661}"
        let v665 : unit = ()
        let v666 : (unit -> unit) = closure10(v642, v662)
        let v667 : unit = (fun () -> v666 (); v665) ()
        let v670 : string = $"{v3}"
        let v673 : unit = ()
        let v674 : (unit -> unit) = closure10(v642, v670)
        let v675 : unit = (fun () -> v674 (); v673) ()
        let v678 : string = "; "
        let v679 : string = $"{v678}"
        let v682 : unit = ()
        let v683 : (unit -> unit) = closure10(v642, v679)
        let v684 : unit = (fun () -> v683 (); v682) ()
        let v687 : string = "repl_result"
        let v688 : string = $"{v687}"
        let v691 : unit = ()
        let v692 : (unit -> unit) = closure10(v642, v688)
        let v693 : unit = (fun () -> v692 (); v691) ()
        let v696 : string = $"{v661}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v642, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = $"{v2}"
        let v707 : unit = ()
        let v708 : (unit -> unit) = closure10(v642, v704)
        let v709 : unit = (fun () -> v708 (); v707) ()
        let v712 : string = $"{v678}"
        let v715 : unit = ()
        let v716 : (unit -> unit) = closure10(v642, v712)
        let v717 : unit = (fun () -> v716 (); v715) ()
        let v720 : string = "retry"
        let v721 : string = $"{v720}"
        let v724 : unit = ()
        let v725 : (unit -> unit) = closure10(v642, v721)
        let v726 : unit = (fun () -> v725 (); v724) ()
        let v729 : string = $"{v661}"
        let v732 : unit = ()
        let v733 : (unit -> unit) = closure10(v642, v729)
        let v734 : unit = (fun () -> v733 (); v732) ()
        let v737 : string = $"{v640}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure10(v642, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = " }"
        let v746 : string = $"{v745}"
        let v749 : unit = ()
        let v750 : (unit -> unit) = closure10(v642, v746)
        let v751 : unit = (fun () -> v750 (); v749) ()
        let v754 : string = v642.l0
        let v755 : string = "spiral_builder.run / repl error"
        let v756 : bool = v755 = ""
        let v813 : string =
            if v756 then
                let v757 : string = ""
                v757
            else
                let v758 : string = $"{v498} {v633} #{v639} %s{v755} / {v754}"
                let v761 : char list = []
                let v762 : (char list -> (char [])) = List.toArray
                let v763 : (char []) = v762 v761
                let v766 : string = v758.TrimStart v763 
                let v784 : char list = []
                let v785 : char list = '/' :: v784 
                let v788 : char list = ' ' :: v785 
                let v791 : (char list -> (char [])) = List.toArray
                let v792 : (char []) = v791 v788
                let v795 : string = v766.TrimEnd v792 
                v795
        let v814 : (string -> unit) = closure11()
        let v815 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v816 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v816 
        let _v815 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v817 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v813 v817 
        let _v815 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v818 : string = v23.l0
        let v819 : bool = v818 = ""
        let v827 : string =
            if v819 then
                v813
            else
                let v820 : bool = v813 = ""
                if v820 then
                    let v821 : string = v23.l0
                    v821
                else
                    let v822 : string = v23.l0
                    let v823 : string = "\n"
                    let v824 : string = v822 + v823 
                    let v825 : string = v824 + v813 
                    v825
        let v828 : string = "&*$0"
        let v829 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v827 v828 
        let v830 : string = $"$0.chars()"
        let v831 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v829 v830 
        let v832 : string = "v831"
        let v833 : _ = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "v833.collect::<Vec<_>>()"
        let v835 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v837 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v839 : bool = Fable.Core.RustInterop.emitRustExpr v837 v838 
        let v840 : string = "x"
        let v841 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "String::from_iter($0)"
        let v843 : std_string_String = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let v844 : string = "true; $0 }).collect::<Vec<_>>()"
        let v845 : bool = Fable.Core.RustInterop.emitRustExpr v843 v844 
        let v846 : string = "_vec_map"
        let v847 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v846 
        let v848 : string = "$0.len()"
        let v849 : unativeint = Fable.Core.RustInterop.emitRustExpr v847 v848 
        let v850 : (unativeint -> int32) = int32
        let v851 : int32 = v850 v849
        let v852 : string = ""
        let v853 : bool = v813 <> v852 
        let v857 : bool =
            if v853 then
                let v856 : bool = v851 <= 1
                v856
            else
                false
        if v857 then
            v23.l0 <- v827
            ()
        else
            v23.l0 <- v852
            let v858 : string = "true; $0.into_iter().for_each(|x| { //"
            let v859 : bool = Fable.Core.RustInterop.emitRustExpr v847 v858 
            let v860 : string = "x"
            let v861 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v861 v862 
            let v863 : string = $"true;"
            let v864 : bool = Fable.Core.RustInterop.emitRustExpr () v863 
            let v865 : string = "true; }}); { //"
            let v866 : bool = Fable.Core.RustInterop.emitRustExpr () v865 
            ()
        let _v815 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v814 v813
        let _v815 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v814 v813
        let _v815 = () 
        #endif
#else
        v814 v813
        let _v815 = () 
        #endif
        _v815 
        let v867 : (string -> unit) = v21.l0
        v867 v813
and method86 (v0 : US1, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v21 : string option =
        match v0 with
        | US1_1 -> (* None *)
            let v19 : string option = None
            v19
        | US1_0(v15) -> (* Some *)
            let v16 : string option = Some v15 
            v16
    let v22 : bool = false
    let struct (v23 : int32, v24 : string) = method40(v9, v4, v14, v6, v7, v22, v21)
    let v25 : bool = v23 = 0
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v3 >= v1
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure75(v1, v3, v24, v23)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v895 : uint8 = v3 + 1uy
        method86(v0, v1, v2, v895)
and closure76 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : int32 = v0.Length
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure10(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "exit_code"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure10(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure10(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v1}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure10(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure10(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "jupyter_result_length"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure10(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v638}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = " }"
        let v711 : string = $"{v710}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v640, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = v640.l0
        let v720 : string = "spiral_builder.run / dib / jupyter nbconvert"
        let v721 : bool = v720 = ""
        let v778 : string =
            if v721 then
                let v722 : string = ""
                v722
            else
                let v723 : string = $"{v496} {v631} #{v637} %s{v720} / {v719}"
                let v726 : char list = []
                let v727 : (char list -> (char [])) = List.toArray
                let v728 : (char []) = v727 v726
                let v731 : string = v723.TrimStart v728 
                let v749 : char list = []
                let v750 : char list = '/' :: v749 
                let v753 : char list = ' ' :: v750 
                let v756 : (char list -> (char [])) = List.toArray
                let v757 : (char []) = v756 v753
                let v760 : string = v731.TrimEnd v757 
                v760
        let v779 : (string -> unit) = closure11()
        let v780 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v781 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v781 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v782 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v782 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = v21.l0
        let v784 : bool = v783 = ""
        let v792 : string =
            if v784 then
                v778
            else
                let v785 : bool = v778 = ""
                if v785 then
                    let v786 : string = v21.l0
                    v786
                else
                    let v787 : string = v21.l0
                    let v788 : string = "\n"
                    let v789 : string = v787 + v788 
                    let v790 : string = v789 + v778 
                    v790
        let v793 : string = "&*$0"
        let v794 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v792 v793 
        let v795 : string = $"$0.chars()"
        let v796 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v794 v795 
        let v797 : string = "v796"
        let v798 : _ = Fable.Core.RustInterop.emitRustExpr () v797 
        let v799 : string = "v798.collect::<Vec<_>>()"
        let v800 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v799 
        let v801 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v802 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v800 v801 
        let v803 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v804 : bool = Fable.Core.RustInterop.emitRustExpr v802 v803 
        let v805 : string = "x"
        let v806 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v805 
        let v807 : string = "String::from_iter($0)"
        let v808 : std_string_String = Fable.Core.RustInterop.emitRustExpr v806 v807 
        let v809 : string = "true; $0 }).collect::<Vec<_>>()"
        let v810 : bool = Fable.Core.RustInterop.emitRustExpr v808 v809 
        let v811 : string = "_vec_map"
        let v812 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v811 
        let v813 : string = "$0.len()"
        let v814 : unativeint = Fable.Core.RustInterop.emitRustExpr v812 v813 
        let v815 : (unativeint -> int32) = int32
        let v816 : int32 = v815 v814
        let v817 : string = ""
        let v818 : bool = v778 <> v817 
        let v822 : bool =
            if v818 then
                let v821 : bool = v816 <= 1
                v821
            else
                false
        if v822 then
            v21.l0 <- v792
            ()
        else
            v21.l0 <- v817
            let v823 : string = "true; $0.into_iter().for_each(|x| { //"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr v812 v823 
            let v825 : string = "x"
            let v826 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v825 
            let v827 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v826 v827 
            let v828 : string = $"true;"
            let v829 : bool = Fable.Core.RustInterop.emitRustExpr () v828 
            let v830 : string = "true; }}); { //"
            let v831 : bool = Fable.Core.RustInterop.emitRustExpr () v830 
            ()
        let _v780 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v779 v778
        let _v780 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v779 v778
        let _v780 = () 
        #endif
#else
        v779 v778
        let _v780 = () 
        #endif
        _v780 
        let v832 : (string -> unit) = v19.l0
        v832 v778
and closure77 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : int32 = v0.Length
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure10(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "exit_code"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure10(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure10(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v1}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure10(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure10(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "pwsh_replace_html_result_length"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure10(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v638}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = " }"
        let v711 : string = $"{v710}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v640, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = v640.l0
        let v720 : string = "spiral_builder.run / dib / html cell ids"
        let v721 : bool = v720 = ""
        let v778 : string =
            if v721 then
                let v722 : string = ""
                v722
            else
                let v723 : string = $"{v496} {v631} #{v637} %s{v720} / {v719}"
                let v726 : char list = []
                let v727 : (char list -> (char [])) = List.toArray
                let v728 : (char []) = v727 v726
                let v731 : string = v723.TrimStart v728 
                let v749 : char list = []
                let v750 : char list = '/' :: v749 
                let v753 : char list = ' ' :: v750 
                let v756 : (char list -> (char [])) = List.toArray
                let v757 : (char []) = v756 v753
                let v760 : string = v731.TrimEnd v757 
                v760
        let v779 : (string -> unit) = closure11()
        let v780 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v781 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v781 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v782 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v782 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = v21.l0
        let v784 : bool = v783 = ""
        let v792 : string =
            if v784 then
                v778
            else
                let v785 : bool = v778 = ""
                if v785 then
                    let v786 : string = v21.l0
                    v786
                else
                    let v787 : string = v21.l0
                    let v788 : string = "\n"
                    let v789 : string = v787 + v788 
                    let v790 : string = v789 + v778 
                    v790
        let v793 : string = "&*$0"
        let v794 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v792 v793 
        let v795 : string = $"$0.chars()"
        let v796 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v794 v795 
        let v797 : string = "v796"
        let v798 : _ = Fable.Core.RustInterop.emitRustExpr () v797 
        let v799 : string = "v798.collect::<Vec<_>>()"
        let v800 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v799 
        let v801 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v802 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v800 v801 
        let v803 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v804 : bool = Fable.Core.RustInterop.emitRustExpr v802 v803 
        let v805 : string = "x"
        let v806 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v805 
        let v807 : string = "String::from_iter($0)"
        let v808 : std_string_String = Fable.Core.RustInterop.emitRustExpr v806 v807 
        let v809 : string = "true; $0 }).collect::<Vec<_>>()"
        let v810 : bool = Fable.Core.RustInterop.emitRustExpr v808 v809 
        let v811 : string = "_vec_map"
        let v812 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v811 
        let v813 : string = "$0.len()"
        let v814 : unativeint = Fable.Core.RustInterop.emitRustExpr v812 v813 
        let v815 : (unativeint -> int32) = int32
        let v816 : int32 = v815 v814
        let v817 : string = ""
        let v818 : bool = v778 <> v817 
        let v822 : bool =
            if v818 then
                let v821 : bool = v816 <= 1
                v821
            else
                false
        if v822 then
            v21.l0 <- v792
            ()
        else
            v21.l0 <- v817
            let v823 : string = "true; $0.into_iter().for_each(|x| { //"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr v812 v823 
            let v825 : string = "x"
            let v826 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v825 
            let v827 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v826 v827 
            let v828 : string = $"true;"
            let v829 : bool = Fable.Core.RustInterop.emitRustExpr () v828 
            let v830 : string = "true; }}); { //"
            let v831 : bool = Fable.Core.RustInterop.emitRustExpr () v830 
            ()
        let _v780 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v779 v778
        let _v780 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v779 v778
        let _v780 = () 
        #endif
#else
        v779 v778
        let _v780 = () 
        #endif
        _v780 
        let v832 : (string -> unit) = v19.l0
        v832 v778
and closure78 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : int32 = v0.Length
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure10(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "exit_code"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure10(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure10(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v1}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure10(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure10(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "result_length"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure10(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v638}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = " }"
        let v711 : string = $"{v710}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v640, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = v640.l0
        let v720 : string = "spiral_builder.run / dib"
        let v721 : bool = v720 = ""
        let v778 : string =
            if v721 then
                let v722 : string = ""
                v722
            else
                let v723 : string = $"{v496} {v631} #{v637} %s{v720} / {v719}"
                let v726 : char list = []
                let v727 : (char list -> (char [])) = List.toArray
                let v728 : (char []) = v727 v726
                let v731 : string = v723.TrimStart v728 
                let v749 : char list = []
                let v750 : char list = '/' :: v749 
                let v753 : char list = ' ' :: v750 
                let v756 : (char list -> (char [])) = List.toArray
                let v757 : (char []) = v756 v753
                let v760 : string = v731.TrimEnd v757 
                v760
        let v779 : (string -> unit) = closure11()
        let v780 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v781 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v781 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v782 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v778 v782 
        let _v780 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = v21.l0
        let v784 : bool = v783 = ""
        let v792 : string =
            if v784 then
                v778
            else
                let v785 : bool = v778 = ""
                if v785 then
                    let v786 : string = v21.l0
                    v786
                else
                    let v787 : string = v21.l0
                    let v788 : string = "\n"
                    let v789 : string = v787 + v788 
                    let v790 : string = v789 + v778 
                    v790
        let v793 : string = "&*$0"
        let v794 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v792 v793 
        let v795 : string = $"$0.chars()"
        let v796 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v794 v795 
        let v797 : string = "v796"
        let v798 : _ = Fable.Core.RustInterop.emitRustExpr () v797 
        let v799 : string = "v798.collect::<Vec<_>>()"
        let v800 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v799 
        let v801 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v802 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v800 v801 
        let v803 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v804 : bool = Fable.Core.RustInterop.emitRustExpr v802 v803 
        let v805 : string = "x"
        let v806 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v805 
        let v807 : string = "String::from_iter($0)"
        let v808 : std_string_String = Fable.Core.RustInterop.emitRustExpr v806 v807 
        let v809 : string = "true; $0 }).collect::<Vec<_>>()"
        let v810 : bool = Fable.Core.RustInterop.emitRustExpr v808 v809 
        let v811 : string = "_vec_map"
        let v812 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v811 
        let v813 : string = "$0.len()"
        let v814 : unativeint = Fable.Core.RustInterop.emitRustExpr v812 v813 
        let v815 : (unativeint -> int32) = int32
        let v816 : int32 = v815 v814
        let v817 : string = ""
        let v818 : bool = v778 <> v817 
        let v822 : bool =
            if v818 then
                let v821 : bool = v816 <= 1
                v821
            else
                false
        if v822 then
            v21.l0 <- v792
            ()
        else
            v21.l0 <- v817
            let v823 : string = "true; $0.into_iter().for_each(|x| { //"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr v812 v823 
            let v825 : string = "x"
            let v826 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v825 
            let v827 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v826 v827 
            let v828 : string = $"true;"
            let v829 : bool = Fable.Core.RustInterop.emitRustExpr () v828 
            let v830 : string = "true; }}); { //"
            let v831 : bool = Fable.Core.RustInterop.emitRustExpr () v830 
            ()
        let _v780 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v779 v778
        let _v780 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v779 v778
        let _v780 = () 
        #endif
#else
        v779 v778
        let _v780 = () 
        #endif
        _v780 
        let v832 : (string -> unit) = v19.l0
        v832 v778
and method87 () : string =
    let v0 : string = "wasm"
    v0
and method88 () : string =
    let v0 : string = "contract"
    v0
and method90 () : string =
    let v0 : string = ""
    v0
and method91 () : string =
    let v0 : string = ""
    v0
and method89 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v3 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v4 : (string -> (uint8 [])) = v3 v2
    let v5 : (uint8 []) = v4 v0
    let v6 : string = "$0.to_vec()"
    let v7 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::io::Cursor::new(v7)"
    let v9 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "std::io::BufReader::new(v9)"
    let v11 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "true; let mut v11 = v11"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v14 
    let v15 : string = "result"
    let v16 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "true; let mut v16 = v16"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : unativeint = 0 |> unativeint 
    let v22 : string = "[$0; 1024]"
    let v23 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v22 
    let v24 : string = "true; loop { // rust.loop"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = "true; let mut v23 = v23"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "std::io::Read::read(&mut v11, &mut v23)"
    let v29 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = "$0.unwrap()"
    let v31 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : bool = v31 = v19 
    if v32 then
        let v35 : string = "true; break"
        let v36 : bool = Fable.Core.RustInterop.emitRustExpr () v35 
        ()
    let v37 : string = "v23.len()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : uint8 = v38 |> uint8 
    let v42 : unativeint = v31 |> unativeint 
    let v45 : unativeint = v42 |> unbox<unativeint>
    let v48 : bool = v45 = v38 
    let v55 : Ref<Slice'<uint8>> =
        if v48 then
            let v51 : string = "&v23[v19..]"
            let v52 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v51 
            v52
        else
            let v53 : string = "&v23[$0..$1]"
            let v54 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v19, v42) v53 
            v54
    let v56 : string = "sha2::Digest::update(&mut v16, v55)"
    Fable.Core.RustInterop.emitRustExpr () v56 
    let v57 : string = "true; } // rust.loop"
    let v58 : bool = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "true; } // rust.loop"
    let v60 : bool = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "true; } // rust.loop"
    let v62 : bool = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "true; { // rust.loop"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr () v63 
    let v65 : string = "true; { // rust.loop"
    let v66 : bool = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "&sha2::Digest::finalize(v16)"
    let v68 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v70 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v73 : string = "x"
    let v74 : uint8 = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "format!(\"{:02x}\", $0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : string = "true; $0 }).collect::<Vec<_>>()"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "_vec_map"
    let v82 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v81 
    let v83 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v84 : (string []) = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string seq = seq { for i = 0 to v84.Length - 1 do yield v84.[i] }
    let v88 : string = method90()
    let v89 : (string -> (string seq -> string)) = String.concat
    let v90 : (string seq -> string) = v89 v88
    let v91 : string = v90 v85
    let v94 : Result<string, std_io_Error> = Ok v91 
    let v95 : string = "$0.unwrap()"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr v94 v95 
    let _v1 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = null |> unbox<string>
    let _v1 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v100 : string = null |> unbox<string>
    let _v1 = v100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v103 : string = "crypto"
    let v104 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v103 
    let v105 : string = "v104.createHash($0)"
    let v106 : string = "sha256"
    let v107 : obj = Fable.Core.JsInterop.emitJsExpr v106 v105 
    let v108 : string = "$0.update($1, 'utf8')"
    let v109 : obj = Fable.Core.JsInterop.emitJsExpr struct (v107, v0) v108 
    let v110 : string = "$0.digest($1)"
    let v111 : string = "hex"
    let v112 : string = Fable.Core.JsInterop.emitJsExpr struct (v109, v111) v110 
    let _v1 = v112 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : string = "hashlib"
    let v114 : IHashlibSha256 = Fable.Core.PyInterop.importAll v113 
    let v115 : string = "v114.sha256()"
    let v116 : obj = Fable.Core.PyInterop.emitPyExpr () v115 
    let v119 : string = "$0.encode($1)"
    let v120 : string = "utf-8"
    let v121 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v120) v119 
    let v124 : string = "v116.update($0)"
    Fable.Core.PyInterop.emitPyExpr v121 v124 
    let v125 : string = "v116.hexdigest()"
    let v126 : string = Fable.Core.PyInterop.emitPyExpr () v125 
    let _v1 = v126 
    #endif
#else
    let v129 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v130 : System.Security.Cryptography.SHA256 = v129 ()
    use v130 = v130 
    let v131 : System.Security.Cryptography.SHA256 = v130 
    let v132 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v133 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v134 : (string -> (uint8 [])) = v133 v132
    let v135 : (uint8 []) = v134 v0
    let v136 : ((uint8 []) -> (uint8 [])) = v131.ComputeHash
    let v137 : (uint8 []) = v136 v135
    let v138 : int32 = v137.Length
    let v139 : (string []) = Array.zeroCreate<string> (v138)
    let v140 : Mut5 = {l0 = 0} : Mut5
    while method43(v138, v140) do
        let v142 : int32 = v140.l0
        let v143 : uint8 = v137.[int v142]
        let v144 : (string -> string) = v143.ToString
        let v145 : string = "x2"
        let v146 : string = v144 v145
        v139.[int v142] <- v146
        let v147 : int32 = v142 + 1
        v140.l0 <- v147
        ()
    let v148 : string seq = seq { for i = 0 to v139.Length - 1 do yield v139.[i] }
    let v151 : string = method91()
    let v152 : (string -> (string seq -> string)) = String.concat
    let v153 : (string seq -> string) = v152 v151
    let v154 : string = v153 v148
    let _v1 = v154 
    #endif
    let v157 : string = _v1 
    v157
and closure79 (v0 : US35 option ref) (v1 : US35 option) : US35 option ref =
    v0.Value <- v1 
    v0
and closure80 (v0 : chrono_DateTime<chrono_Utc> option, v1 : (US35 option -> US35 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : chrono_DateTime<chrono_Utc> = x
    let v3 : US35 = US35_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method93 () : string =
    let v0 : string = "hh:mm"
    v0
and method94 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method95 () : string =
    let v0 : string = "hhmm"
    v0
and method92 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v6 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v7 : System.DateTime = v6 v3
    let v10 : System.DateTimeKind = System.DateTimeKind.Local
    let v11 : System.DateTime = System.DateTime.SpecifyKind (v1, v10)
    let v12 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v13 : System.DateTime = v12 v11
    let v16 : (System.DateTime -> int64) = _.Ticks
    let v17 : int64 = v16 v13
    let v20 : (System.DateTime -> int64) = _.Ticks
    let v21 : int64 = v20 v7
    let v24 : int64 = v17 - v21
    let v25 : int64 = v24 / 10L
    let v26 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v27 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : US35 option = None
    let _v28 = ref v28 
    let v29 : US35 option ref = _v28 
    let v30 : (US35 option -> US35 option ref) = closure79(v29)
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure80(v27, v30)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v36 : US35 option = _v28.Value 
    let v47 : US35 = US35_1
    let v48 : US35 = v36 |> Option.defaultValue v47 
    let v68 : US1 =
        match v48 with
        | US35_1 -> (* None *)
            US1_1
        | US35_0(v52) -> (* Some *)
            let v53 : string = "$0.naive_utc()"
            let v54 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v52 v53 
            let v55 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v56 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v54 v55 
            let v57 : string = "%Y%m%d-%H%M-%S%f"
            let v58 : string = "r#\"" + v57 + "\"#"
            let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v58 
            let v60 : string = "$0.format($1).to_string()"
            let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v59) v60 
            let v62 : string = "fable_library_rust::String_::fromString($0)"
            let v63 : string = Fable.Core.RustInterop.emitRustExpr v61 v62 
            let v64 : string = $"{v63.[0..17]}-{v63.[18..21]}-{v63.[22]}"
            US1_0(v64)
    let v72 : string =
        match v68 with
        | US1_1 -> (* None *)
            let v70 : string = ""
            v70
        | US1_0(v69) -> (* Some *)
            v69
    let v73 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "0i64.into()"
    let v75 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v74 
    let _v73 = v75 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v76 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v76 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v82 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v82 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v73 = v85 
    #endif
#else
    let v88 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v73 = v88 
    #endif
    let v89 : System.TimeZoneInfo = _v73 
    let v94 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v95 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v96 : System.TimeSpan = v95 ()
    let _v94 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v99 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v100 : System.TimeSpan = v99 ()
    let _v94 = v100 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v104 : System.TimeSpan = v103 ()
    let _v94 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v107 : US10 = US10_0
    let v108 : US11 = US11_3(v107)
    let v109 : string = $"date_time.get_utc_offset / target: {v108}"
    let v110 : System.TimeSpan = failwith<System.TimeSpan> v109
    let _v94 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v111 : US10 = US10_0
    let v112 : US11 = US11_4(v111)
    let v113 : string = $"date_time.get_utc_offset / target: {v112}"
    let v114 : System.TimeSpan = failwith<System.TimeSpan> v113
    let _v94 = v114 
    #endif
#else
    let v115 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v116 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v117 : string = "0i64.into()"
    let v118 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v117 
    let _v116 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v119 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v122 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v125 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v125 
    #endif
#if FABLE_COMPILER_PYTHON
    let v128 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v116 = v128 
    #endif
#else
    let v131 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v116 = v131 
    #endif
    let v132 : System.TimeZoneInfo = _v116 
    let v137 : (System.DateTime -> System.TimeSpan) = v115 v132
    let v138 : System.TimeSpan = v137 v13
    let _v94 = v138 
    #endif
    let v139 : System.TimeSpan = _v94 
    let v145 : (System.TimeSpan -> int32) = _.Hours
    let v146 : int32 = v145 v139
    let v149 : bool = v146 > 0
    let v150 : uint8 =
        if v149 then
            1uy
        else
            0uy
    let v151 : string = method93()
    let v152 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v153 : string = v139.ToString v151 
    let _v152 = v153 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v154 : string = v139.ToString v151 
    let _v152 = v154 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v155 : string = v139.ToString v151 
    let _v152 = v155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : string = v139.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v152 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v157 : string = v139.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v152 = v157 
    #endif
#else
    let v158 : string = v139.ToString v151 
    let _v152 = v158 
    #endif
    let v159 : string = _v152 
    let v162 : string = $"{v150}{v159.[0..1]}{v159.[3..4]}"
    let v163 : (System.Guid -> string) = _.ToString()
    let v164 : string = v163 v0
    let v167 : System.Guid = System.Guid $"{v72}{v162}{v164.[v72.Length + v162.Length..]}"
    let _v2 = v167 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v168 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v171 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v172 : System.DateTime = v171 v168
    let v175 : System.DateTimeKind = System.DateTimeKind.Local
    let v176 : System.DateTime = System.DateTime.SpecifyKind (v1, v175)
    let v177 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v178 : System.DateTime = v177 v176
    let v181 : (System.DateTime -> int64) = _.Ticks
    let v182 : int64 = v181 v178
    let v185 : (System.DateTime -> int64) = _.Ticks
    let v186 : int64 = v185 v172
    let v189 : int64 = v182 - v186
    let v190 : int64 = v189 / 10L
    let v191 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v192 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v190 v191 
    let v193 : US35 option = None
    let _v193 = ref v193 
    let v194 : US35 option ref = _v193 
    let v195 : (US35 option -> US35 option ref) = closure79(v194)
    let v196 : unit = ()
    let v197 : (unit -> unit) = closure80(v192, v195)
    let v198 : unit = (fun () -> v197 (); v196) ()
    let v201 : US35 option = _v193.Value 
    let v212 : US35 = US35_1
    let v213 : US35 = v201 |> Option.defaultValue v212 
    let v233 : US1 =
        match v213 with
        | US35_1 -> (* None *)
            US1_1
        | US35_0(v217) -> (* Some *)
            let v218 : string = "$0.naive_utc()"
            let v219 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v217 v218 
            let v220 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v221 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v219 v220 
            let v222 : string = "%Y%m%d-%H%M-%S%f"
            let v223 : string = "r#\"" + v222 + "\"#"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            let v225 : string = "$0.format($1).to_string()"
            let v226 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v221, v224) v225 
            let v227 : string = "fable_library_rust::String_::fromString($0)"
            let v228 : string = Fable.Core.RustInterop.emitRustExpr v226 v227 
            let v229 : string = $"{v228.[0..17]}-{v228.[18..21]}-{v228.[22]}"
            US1_0(v229)
    let v237 : string =
        match v233 with
        | US1_1 -> (* None *)
            let v235 : string = ""
            v235
        | US1_0(v234) -> (* Some *)
            v234
    let v238 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v239 : string = "0i64.into()"
    let v240 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v239 
    let _v238 = v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v241 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v241 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v244 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v244 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v247 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v247 
    #endif
#if FABLE_COMPILER_PYTHON
    let v250 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v238 = v250 
    #endif
#else
    let v253 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v238 = v253 
    #endif
    let v254 : System.TimeZoneInfo = _v238 
    let v259 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v260 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v261 : System.TimeSpan = v260 ()
    let _v259 = v261 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v264 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v265 : System.TimeSpan = v264 ()
    let _v259 = v265 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v268 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v269 : System.TimeSpan = v268 ()
    let _v259 = v269 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v272 : US10 = US10_0
    let v273 : US11 = US11_3(v272)
    let v274 : string = $"date_time.get_utc_offset / target: {v273}"
    let v275 : System.TimeSpan = failwith<System.TimeSpan> v274
    let _v259 = v275 
    #endif
#if FABLE_COMPILER_PYTHON
    let v276 : US10 = US10_0
    let v277 : US11 = US11_4(v276)
    let v278 : string = $"date_time.get_utc_offset / target: {v277}"
    let v279 : System.TimeSpan = failwith<System.TimeSpan> v278
    let _v259 = v279 
    #endif
#else
    let v280 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v281 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v282 : string = "0i64.into()"
    let v283 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v282 
    let _v281 = v283 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v284 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v284 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v287 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v287 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v290 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v290 
    #endif
#if FABLE_COMPILER_PYTHON
    let v293 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v281 = v293 
    #endif
#else
    let v296 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v281 = v296 
    #endif
    let v297 : System.TimeZoneInfo = _v281 
    let v302 : (System.DateTime -> System.TimeSpan) = v280 v297
    let v303 : System.TimeSpan = v302 v178
    let _v259 = v303 
    #endif
    let v304 : System.TimeSpan = _v259 
    let v310 : (System.TimeSpan -> int32) = _.Hours
    let v311 : int32 = v310 v304
    let v314 : bool = v311 > 0
    let v315 : uint8 =
        if v314 then
            1uy
        else
            0uy
    let v316 : string = method93()
    let v317 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v318 : string = v304.ToString v316 
    let _v317 = v318 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v319 : string = v304.ToString v316 
    let _v317 = v319 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v320 : string = v304.ToString v316 
    let _v317 = v320 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v321 : string = v304.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v317 = v321 
    #endif
#if FABLE_COMPILER_PYTHON
    let v322 : string = v304.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v317 = v322 
    #endif
#else
    let v323 : string = v304.ToString v316 
    let _v317 = v323 
    #endif
    let v324 : string = _v317 
    let v327 : string = $"{v315}{v324.[0..1]}{v324.[3..4]}"
    let v328 : (System.Guid -> string) = _.ToString()
    let v329 : string = v328 v0
    let v332 : System.Guid = System.Guid $"{v237}{v327}{v329.[v237.Length + v327.Length..]}"
    let _v2 = v332 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v333 : System.Guid = null |> unbox<System.Guid>
    let _v2 = v333 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v336 : string = method94()
    let v337 : (string -> string) = v1.ToString
    let v338 : string = v337 v336
    let v341 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v342 : string = "0i64.into()"
    let v343 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v342 
    let _v341 = v343 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v344 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v344 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v347 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v347 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v350 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v350 
    #endif
#if FABLE_COMPILER_PYTHON
    let v353 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v341 = v353 
    #endif
#else
    let v356 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v341 = v356 
    #endif
    let v357 : System.TimeZoneInfo = _v341 
    let v362 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v363 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v364 : System.TimeSpan = v363 ()
    let _v362 = v364 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v367 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v368 : System.TimeSpan = v367 ()
    let _v362 = v368 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v371 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v372 : System.TimeSpan = v371 ()
    let _v362 = v372 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v375 : US10 = US10_0
    let v376 : US11 = US11_3(v375)
    let v377 : string = $"date_time.get_utc_offset / target: {v376}"
    let v378 : System.TimeSpan = failwith<System.TimeSpan> v377
    let _v362 = v378 
    #endif
#if FABLE_COMPILER_PYTHON
    let v379 : US10 = US10_0
    let v380 : US11 = US11_4(v379)
    let v381 : string = $"date_time.get_utc_offset / target: {v380}"
    let v382 : System.TimeSpan = failwith<System.TimeSpan> v381
    let _v362 = v382 
    #endif
#else
    let v383 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v384 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v385 : string = "0i64.into()"
    let v386 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v385 
    let _v384 = v386 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v387 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v387 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v390 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v390 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v393 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v393 
    #endif
#if FABLE_COMPILER_PYTHON
    let v396 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v384 = v396 
    #endif
#else
    let v399 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v384 = v399 
    #endif
    let v400 : System.TimeZoneInfo = _v384 
    let v405 : (System.DateTime -> System.TimeSpan) = v383 v400
    let v406 : System.TimeSpan = v405 v1
    let _v362 = v406 
    #endif
    let v407 : System.TimeSpan = _v362 
    let v413 : (System.TimeSpan -> int32) = _.Hours
    let v414 : int32 = v413 v407
    let v417 : bool = v414 > 0
    let v418 : uint8 =
        if v417 then
            1uy
        else
            0uy
    let v419 : string = method95()
    let v420 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v421 : string = v407.ToString v419 
    let _v420 = v421 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v422 : string = v407.ToString v419 
    let _v420 = v422 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v423 : string = v407.ToString v419 
    let _v420 = v423 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v424 : string = v407.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v420 = v424 
    #endif
#if FABLE_COMPILER_PYTHON
    let v425 : string = v407.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v420 = v425 
    #endif
#else
    let v426 : string = v407.ToString v419 
    let _v420 = v426 
    #endif
    let v427 : string = _v420 
    let v430 : string = $"{v418}{v427}"
    let v431 : (System.Guid -> string) = _.ToString()
    let v432 : string = v431 v0
    let v435 : System.Guid = System.Guid $"{v338}{v430}{v432.[v338.Length + v430.Length..]}"
    let _v2 = v435 
    #endif
#if FABLE_COMPILER_PYTHON
    let v436 : string = method94()
    let v437 : (string -> string) = v1.ToString
    let v438 : string = v437 v436
    let v441 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v442 : string = "0i64.into()"
    let v443 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v442 
    let _v441 = v443 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v444 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v444 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v447 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v447 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v450 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v450 
    #endif
#if FABLE_COMPILER_PYTHON
    let v453 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v441 = v453 
    #endif
#else
    let v456 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v441 = v456 
    #endif
    let v457 : System.TimeZoneInfo = _v441 
    let v462 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v463 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v464 : System.TimeSpan = v463 ()
    let _v462 = v464 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v467 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v468 : System.TimeSpan = v467 ()
    let _v462 = v468 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v471 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v472 : System.TimeSpan = v471 ()
    let _v462 = v472 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v475 : US10 = US10_0
    let v476 : US11 = US11_3(v475)
    let v477 : string = $"date_time.get_utc_offset / target: {v476}"
    let v478 : System.TimeSpan = failwith<System.TimeSpan> v477
    let _v462 = v478 
    #endif
#if FABLE_COMPILER_PYTHON
    let v479 : US10 = US10_0
    let v480 : US11 = US11_4(v479)
    let v481 : string = $"date_time.get_utc_offset / target: {v480}"
    let v482 : System.TimeSpan = failwith<System.TimeSpan> v481
    let _v462 = v482 
    #endif
#else
    let v483 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v484 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v485 : string = "0i64.into()"
    let v486 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v485 
    let _v484 = v486 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v487 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v487 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v490 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v490 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v493 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v493 
    #endif
#if FABLE_COMPILER_PYTHON
    let v496 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v484 = v496 
    #endif
#else
    let v499 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v484 = v499 
    #endif
    let v500 : System.TimeZoneInfo = _v484 
    let v505 : (System.DateTime -> System.TimeSpan) = v483 v500
    let v506 : System.TimeSpan = v505 v1
    let _v462 = v506 
    #endif
    let v507 : System.TimeSpan = _v462 
    let v513 : (System.TimeSpan -> int32) = _.Hours
    let v514 : int32 = v513 v507
    let v517 : bool = v514 > 0
    let v518 : uint8 =
        if v517 then
            1uy
        else
            0uy
    let v519 : string = method95()
    let v520 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v521 : string = v507.ToString v519 
    let _v520 = v521 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v522 : string = v507.ToString v519 
    let _v520 = v522 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v523 : string = v507.ToString v519 
    let _v520 = v523 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v524 : string = v507.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v520 = v524 
    #endif
#if FABLE_COMPILER_PYTHON
    let v525 : string = v507.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v520 = v525 
    #endif
#else
    let v526 : string = v507.ToString v519 
    let _v520 = v526 
    #endif
    let v527 : string = _v520 
    let v530 : string = $"{v518}{v527}"
    let v531 : (System.Guid -> string) = _.ToString()
    let v532 : string = v531 v0
    let v535 : System.Guid = System.Guid $"{v438}{v530}{v532.[v438.Length + v530.Length..]}"
    let _v2 = v535 
    #endif
#else
    let v536 : string = method94()
    let v537 : (string -> string) = v1.ToString
    let v538 : string = v537 v536
    let v541 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v542 : string = "0i64.into()"
    let v543 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v542 
    let _v541 = v543 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v544 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v544 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v547 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v547 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v550 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v550 
    #endif
#if FABLE_COMPILER_PYTHON
    let v553 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v541 = v553 
    #endif
#else
    let v556 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v541 = v556 
    #endif
    let v557 : System.TimeZoneInfo = _v541 
    let v562 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v563 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v564 : System.TimeSpan = v563 ()
    let _v562 = v564 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v567 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v568 : System.TimeSpan = v567 ()
    let _v562 = v568 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v571 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v572 : System.TimeSpan = v571 ()
    let _v562 = v572 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v575 : US10 = US10_0
    let v576 : US11 = US11_3(v575)
    let v577 : string = $"date_time.get_utc_offset / target: {v576}"
    let v578 : System.TimeSpan = failwith<System.TimeSpan> v577
    let _v562 = v578 
    #endif
#if FABLE_COMPILER_PYTHON
    let v579 : US10 = US10_0
    let v580 : US11 = US11_4(v579)
    let v581 : string = $"date_time.get_utc_offset / target: {v580}"
    let v582 : System.TimeSpan = failwith<System.TimeSpan> v581
    let _v562 = v582 
    #endif
#else
    let v583 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v584 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v585 : string = "0i64.into()"
    let v586 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v585 
    let _v584 = v586 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v587 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v587 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v590 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v590 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v593 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v593 
    #endif
#if FABLE_COMPILER_PYTHON
    let v596 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v584 = v596 
    #endif
#else
    let v599 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v584 = v599 
    #endif
    let v600 : System.TimeZoneInfo = _v584 
    let v605 : (System.DateTime -> System.TimeSpan) = v583 v600
    let v606 : System.TimeSpan = v605 v1
    let _v562 = v606 
    #endif
    let v607 : System.TimeSpan = _v562 
    let v613 : (System.TimeSpan -> int32) = _.Hours
    let v614 : int32 = v613 v607
    let v617 : bool = v614 > 0
    let v618 : uint8 =
        if v617 then
            1uy
        else
            0uy
    let v619 : string = method95()
    let v620 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v621 : string = v607.ToString v619 
    let _v620 = v621 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v622 : string = v607.ToString v619 
    let _v620 = v622 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v623 : string = v607.ToString v619 
    let _v620 = v623 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v624 : string = v607.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v620 = v624 
    #endif
#if FABLE_COMPILER_PYTHON
    let v625 : string = v607.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v620 = v625 
    #endif
#else
    let v626 : string = v607.ToString v619 
    let _v620 = v626 
    #endif
    let v627 : string = _v620 
    let v630 : string = $"{v618}{v627}"
    let v631 : (System.Guid -> string) = _.ToString()
    let v632 : string = v631 v0
    let v635 : System.Guid = System.Guid $"{v538}{v630}{v632.[v538.Length + v630.Length..]}"
    let _v2 = v635 
    #endif
    let v636 : System.Guid = _v2 
    v636
and method96 (v0 : string, v1 : string) : unit =
    let v2 : bool = method19(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method28(v0)
        ()
    let v5 : string = method24(v1)
    let v6 : bool = method19(v5)
    let v7 : bool = v6 = false
    if v7 then
        let v8 : System.IDisposable = method28(v5)
        ()
    let v9 : bool = method19(v1)
    let v14 : bool =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v10 
            let v12 : string = "v11.is_err()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
            v13
        else
            false
    if v14 then
        let v15 : bool = true
        method32(v15, v1)
    let v16 : bool = method19(v1)
    let v17 : bool = v16 = false
    if v17 then
        let v18 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v19 : bool = true
        let mutable _v19 : unit option = None 
        
#if _FREEBSD
        let v20 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v20 
        () 
        #endif
#if _LINUX
        let v21 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v21 
        () 
        #endif
#if _OSX
        let v22 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v22 
        () 
        #endif
#if _WINDOWS
        let v23 : string = "std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v23 
        () 
        #endif
        |> fun x -> _v19 <- Some x
        match _v19 with Some x -> x | None -> failwith "runtime.run_platform / _v19=None"
        let _v18 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v18 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v18 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v18 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v18 = () 
        #endif
#else
        let v24 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        let _v18 = () 
        #endif
        _v18 
        ()
and method98 () : string =
    let v0 : string = "("
    v0
and method99 () : string =
    let v0 : string = " "
    v0
and closure81 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : unit = ()
    let v6 : (unit -> unit) = closure2()
    let v7 : unit = (fun () -> v6 (); v5) ()
    let struct (v21 : Mut0, v22 : Mut1, v23 : Mut2, v24 : Mut3, v25 : Mut4, v26 : int64 option) = TraceState.trace_state.Value
    let v39 : unit = ()
    let v40 : unit = (fun () -> v6 (); v39) ()
    let struct (v54 : Mut0, v55 : Mut1, v56 : Mut2, v57 : Mut3, v58 : Mut4, v59 : int64 option) = TraceState.trace_state.Value
    let v72 : US0 = v58.l0
    let v73 : bool = v56.l0
    let v74 : bool = v73 = false
    let v77 : bool =
        if v74 then
            false
        else
            let v75 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v72
            let v76 : bool = 1 >= v75
            v76
    if v77 then
        let v78 : unit = ()
        let v79 : (unit -> unit) = closure7(v21)
        let v80 : unit = (fun () -> v79 (); v78) ()
        let v83 : unit = ()
        let v84 : unit = (fun () -> v6 (); v83) ()
        let struct (v98 : Mut0, v99 : Mut1, v100 : Mut2, v101 : Mut3, v102 : Mut4, v103 : int64 option) = TraceState.trace_state.Value
        let v116 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v117 : US3 option = None
        let _v117 = ref v117 
        let v118 : US3 option ref = _v117 
        let v119 : (US3 option -> US3 option ref) = closure8(v118)
        let v120 : unit = ()
        let v121 : (unit -> unit) = closure9(v103, v119)
        let v122 : unit = (fun () -> v121 (); v120) ()
        let v125 : US3 option = _v117.Value 
        let v136 : US3 = US3_1
        let v137 : US3 = v125 |> Option.defaultValue v136 
        let v177 : System.DateTime =
            match v137 with
            | US3_1 -> (* None *)
                let v173 : System.DateTime = System.DateTime.Now
                v173
            | US3_0(v141) -> (* Some *)
                let v142 : System.DateTime = System.DateTime.Now
                let v145 : (System.DateTime -> int64) = _.Ticks
                let v146 : int64 = v145 v142
                let v149 : int64 = v146 - v141
                let v150 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v151 : System.TimeSpan = v150 v149
                let v154 : (System.TimeSpan -> int32) = _.Hours
                let v155 : int32 = v154 v151
                let v158 : (System.TimeSpan -> int32) = _.Minutes
                let v159 : int32 = v158 v151
                let v162 : (System.TimeSpan -> int32) = _.Seconds
                let v163 : int32 = v162 v151
                let v166 : (System.TimeSpan -> int32) = _.Milliseconds
                let v167 : int32 = v166 v151
                let v170 : System.DateTime = System.DateTime (1, 1, 1, v155, v159, v163, v167)
                v170
        let v178 : string = method6()
        let v181 : (string -> string) = v177.ToString
        let v182 : string = v181 v178
        let _v116 = v182 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v185 : US3 option = None
        let _v185 = ref v185 
        let v186 : US3 option ref = _v185 
        let v187 : (US3 option -> US3 option ref) = closure8(v186)
        let v188 : unit = ()
        let v189 : (unit -> unit) = closure9(v103, v187)
        let v190 : unit = (fun () -> v189 (); v188) ()
        let v193 : US3 option = _v185.Value 
        let v204 : US3 = US3_1
        let v205 : US3 = v193 |> Option.defaultValue v204 
        let v245 : System.DateTime =
            match v205 with
            | US3_1 -> (* None *)
                let v241 : System.DateTime = System.DateTime.Now
                v241
            | US3_0(v209) -> (* Some *)
                let v210 : System.DateTime = System.DateTime.Now
                let v213 : (System.DateTime -> int64) = _.Ticks
                let v214 : int64 = v213 v210
                let v217 : int64 = v214 - v209
                let v218 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v219 : System.TimeSpan = v218 v217
                let v222 : (System.TimeSpan -> int32) = _.Hours
                let v223 : int32 = v222 v219
                let v226 : (System.TimeSpan -> int32) = _.Minutes
                let v227 : int32 = v226 v219
                let v230 : (System.TimeSpan -> int32) = _.Seconds
                let v231 : int32 = v230 v219
                let v234 : (System.TimeSpan -> int32) = _.Milliseconds
                let v235 : int32 = v234 v219
                let v238 : System.DateTime = System.DateTime (1, 1, 1, v223, v227, v231, v235)
                v238
        let v246 : string = method6()
        let v249 : (string -> string) = v245.ToString
        let v250 : string = v249 v246
        let _v116 = v250 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v253 : string = $"near_sdk::env::block_timestamp()"
        let v254 : uint64 = Fable.Core.RustInterop.emitRustExpr () v253 
        let v255 : US3 option = None
        let _v255 = ref v255 
        let v256 : US3 option ref = _v255 
        let v257 : (US3 option -> US3 option ref) = closure8(v256)
        let v258 : unit = ()
        let v259 : (unit -> unit) = closure9(v103, v257)
        let v260 : unit = (fun () -> v259 (); v258) ()
        let v263 : US3 option = _v255.Value 
        let v274 : US3 = US3_1
        let v275 : US3 = v263 |> Option.defaultValue v274 
        let v284 : uint64 =
            match v275 with
            | US3_1 -> (* None *)
                v254
            | US3_0(v279) -> (* Some *)
                let v280 : (int64 -> uint64) = uint64
                let v281 : uint64 = v280 v279
                let v282 : uint64 = v254 - v281
                v282
        let v285 : uint64 = v284 / 1000000000UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v285 / 60UL
        let v288 : uint64 = v287 % 60UL
        let v289 : uint64 = v285 / 3600UL
        let v290 : uint64 = v289 % 24UL
        let v291 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v290, v288, v286) v291 
        let v293 : string = "fable_library_rust::String_::fromString($0)"
        let v294 : string = Fable.Core.RustInterop.emitRustExpr v292 v293 
        let _v116 = v294 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v295 : US3 option = None
        let _v295 = ref v295 
        let v296 : US3 option ref = _v295 
        let v297 : (US3 option -> US3 option ref) = closure8(v296)
        let v298 : unit = ()
        let v299 : (unit -> unit) = closure9(v103, v297)
        let v300 : unit = (fun () -> v299 (); v298) ()
        let v303 : US3 option = _v295.Value 
        let v314 : US3 = US3_1
        let v315 : US3 = v303 |> Option.defaultValue v314 
        let v355 : System.DateTime =
            match v315 with
            | US3_1 -> (* None *)
                let v351 : System.DateTime = System.DateTime.Now
                v351
            | US3_0(v319) -> (* Some *)
                let v320 : System.DateTime = System.DateTime.Now
                let v323 : (System.DateTime -> int64) = _.Ticks
                let v324 : int64 = v323 v320
                let v327 : int64 = v324 - v319
                let v328 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v329 : System.TimeSpan = v328 v327
                let v332 : (System.TimeSpan -> int32) = _.Hours
                let v333 : int32 = v332 v329
                let v336 : (System.TimeSpan -> int32) = _.Minutes
                let v337 : int32 = v336 v329
                let v340 : (System.TimeSpan -> int32) = _.Seconds
                let v341 : int32 = v340 v329
                let v344 : (System.TimeSpan -> int32) = _.Milliseconds
                let v345 : int32 = v344 v329
                let v348 : System.DateTime = System.DateTime (1, 1, 1, v333, v337, v341, v345)
                v348
        let v356 : string = method7()
        let v359 : (string -> string) = v355.ToString
        let v360 : string = v359 v356
        let _v116 = v360 
        #endif
#if FABLE_COMPILER_PYTHON
        let v363 : US3 option = None
        let _v363 = ref v363 
        let v364 : US3 option ref = _v363 
        let v365 : (US3 option -> US3 option ref) = closure8(v364)
        let v366 : unit = ()
        let v367 : (unit -> unit) = closure9(v103, v365)
        let v368 : unit = (fun () -> v367 (); v366) ()
        let v371 : US3 option = _v363.Value 
        let v382 : US3 = US3_1
        let v383 : US3 = v371 |> Option.defaultValue v382 
        let v423 : System.DateTime =
            match v383 with
            | US3_1 -> (* None *)
                let v419 : System.DateTime = System.DateTime.Now
                v419
            | US3_0(v387) -> (* Some *)
                let v388 : System.DateTime = System.DateTime.Now
                let v391 : (System.DateTime -> int64) = _.Ticks
                let v392 : int64 = v391 v388
                let v395 : int64 = v392 - v387
                let v396 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v397 : System.TimeSpan = v396 v395
                let v400 : (System.TimeSpan -> int32) = _.Hours
                let v401 : int32 = v400 v397
                let v404 : (System.TimeSpan -> int32) = _.Minutes
                let v405 : int32 = v404 v397
                let v408 : (System.TimeSpan -> int32) = _.Seconds
                let v409 : int32 = v408 v397
                let v412 : (System.TimeSpan -> int32) = _.Milliseconds
                let v413 : int32 = v412 v397
                let v416 : System.DateTime = System.DateTime (1, 1, 1, v401, v405, v409, v413)
                v416
        let v424 : string = method7()
        let v427 : (string -> string) = v423.ToString
        let v428 : string = v427 v424
        let _v116 = v428 
        #endif
#else
        let v431 : US3 option = None
        let _v431 = ref v431 
        let v432 : US3 option ref = _v431 
        let v433 : (US3 option -> US3 option ref) = closure8(v432)
        let v434 : unit = ()
        let v435 : (unit -> unit) = closure9(v103, v433)
        let v436 : unit = (fun () -> v435 (); v434) ()
        let v439 : US3 option = _v431.Value 
        let v450 : US3 = US3_1
        let v451 : US3 = v439 |> Option.defaultValue v450 
        let v491 : System.DateTime =
            match v451 with
            | US3_1 -> (* None *)
                let v487 : System.DateTime = System.DateTime.Now
                v487
            | US3_0(v455) -> (* Some *)
                let v456 : System.DateTime = System.DateTime.Now
                let v459 : (System.DateTime -> int64) = _.Ticks
                let v460 : int64 = v459 v456
                let v463 : int64 = v460 - v455
                let v464 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v465 : System.TimeSpan = v464 v463
                let v468 : (System.TimeSpan -> int32) = _.Hours
                let v469 : int32 = v468 v465
                let v472 : (System.TimeSpan -> int32) = _.Minutes
                let v473 : int32 = v472 v465
                let v476 : (System.TimeSpan -> int32) = _.Seconds
                let v477 : int32 = v476 v465
                let v480 : (System.TimeSpan -> int32) = _.Milliseconds
                let v481 : int32 = v480 v465
                let v484 : System.DateTime = System.DateTime (1, 1, 1, v469, v473, v477, v481)
                v484
        let v492 : string = method7()
        let v495 : (string -> string) = v491.ToString
        let v496 : string = v495 v492
        let _v116 = v496 
        #endif
        let v499 : string = _v116 
        
        
        
        
        
        let v569 : string = "Debug"
        let v570 : (unit -> string) = v569.ToLower
        let v571 : string = v570 ()
        let v574 : string = v571.PadLeft (7, ' ')
        let v588 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v589 : string = "inline_colorization::color_bright_blue"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "&*$0"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v574 v591 
        let v593 : string = "inline_colorization::color_reset"
        let v594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "\"{v590}{v592}{v594}\""
        let v596 : string = @$"format!(" + v595 + ")"
        let v597 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "fable_library_rust::String_::fromString($0)"
        let v599 : string = Fable.Core.RustInterop.emitRustExpr v597 v598 
        let _v588 = v599 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v600 : string = "inline_colorization::color_bright_blue"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "&*$0"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v574 v602 
        let v604 : string = "inline_colorization::color_reset"
        let v605 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "\"{v601}{v603}{v605}\""
        let v607 : string = @$"format!(" + v606 + ")"
        let v608 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "fable_library_rust::String_::fromString($0)"
        let v610 : string = Fable.Core.RustInterop.emitRustExpr v608 v609 
        let _v588 = v610 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v611 : string = "inline_colorization::color_bright_blue"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "&*$0"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v574 v613 
        let v615 : string = "inline_colorization::color_reset"
        let v616 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "\"{v612}{v614}{v616}\""
        let v618 : string = @$"format!(" + v617 + ")"
        let v619 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v618 
        let v620 : string = "fable_library_rust::String_::fromString($0)"
        let v621 : string = Fable.Core.RustInterop.emitRustExpr v619 v620 
        let _v588 = v621 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v622 : string = "\u001b[94m"
        let v623 : string = method8()
        let v624 : string = v622 + v574 
        let v625 : string = v624 + v623 
        let _v588 = v625 
        #endif
#if FABLE_COMPILER_PYTHON
        let v626 : string = "\u001b[94m"
        let v627 : string = method8()
        let v628 : string = v626 + v574 
        let v629 : string = v628 + v627 
        let _v588 = v629 
        #endif
#else
        let v630 : string = "\u001b[94m"
        let v631 : string = method8()
        let v632 : string = v630 + v574 
        let v633 : string = v632 + v631 
        let _v588 = v633 
        #endif
        let v634 : string = _v588 
        let v640 : int64 = v98.l0
        let v641 : string = $"{v1}/{v0}"
        let v642 : string = method9()
        let v643 : Mut3 = {l0 = v642} : Mut3
        let v644 : string = "{ "
        let v645 : string = $"{v644}"
        let v648 : unit = ()
        let v649 : (unit -> unit) = closure10(v643, v645)
        let v650 : unit = (fun () -> v649 (); v648) ()
        let v653 : string = "is_error"
        let v654 : string = $"{v653}"
        let v657 : unit = ()
        let v658 : (unit -> unit) = closure10(v643, v654)
        let v659 : unit = (fun () -> v658 (); v657) ()
        let v662 : string = " = "
        let v663 : string = $"{v662}"
        let v666 : unit = ()
        let v667 : (unit -> unit) = closure10(v643, v663)
        let v668 : unit = (fun () -> v667 (); v666) ()
        let v673 : string =
            if v4 then
                let v671 : string = "true"
                v671
            else
                let v672 : string = "false"
                v672
        let v674 : string = $"{v673}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure10(v643, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = "; "
        let v683 : string = $"{v682}"
        let v686 : unit = ()
        let v687 : (unit -> unit) = closure10(v643, v683)
        let v688 : unit = (fun () -> v687 (); v686) ()
        let v691 : string = "retry"
        let v692 : string = $"{v691}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure10(v643, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v662}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure10(v643, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = $"{v641}"
        let v711 : unit = ()
        let v712 : (unit -> unit) = closure10(v643, v708)
        let v713 : unit = (fun () -> v712 (); v711) ()
        let v716 : string = $"{v682}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure10(v643, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = "result"
        let v725 : string = $"{v724}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure10(v643, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = $"{v662}"
        let v736 : unit = ()
        let v737 : (unit -> unit) = closure10(v643, v733)
        let v738 : unit = (fun () -> v737 (); v736) ()
        let v741 : string = $"{v2}"
        let v744 : unit = ()
        let v745 : (unit -> unit) = closure10(v643, v741)
        let v746 : unit = (fun () -> v745 (); v744) ()
        let v749 : string = ", "
        let v750 : string = $"{v749}"
        let v753 : unit = ()
        let v754 : (unit -> unit) = closure10(v643, v750)
        let v755 : unit = (fun () -> v754 (); v753) ()
        let v758 : string = $"{v3}"
        let v761 : unit = ()
        let v762 : (unit -> unit) = closure10(v643, v758)
        let v763 : unit = (fun () -> v762 (); v761) ()
        let v766 : string = " }"
        let v767 : string = $"{v766}"
        let v770 : unit = ()
        let v771 : (unit -> unit) = closure10(v643, v767)
        let v772 : unit = (fun () -> v771 (); v770) ()
        let v775 : string = v643.l0
        let v776 : string = "common.retry_fn' / loop"
        let v777 : bool = v776 = ""
        let v834 : string =
            if v777 then
                let v778 : string = ""
                v778
            else
                let v779 : string = $"{v499} {v634} #{v640} %s{v776} / {v775}"
                let v782 : char list = []
                let v783 : (char list -> (char [])) = List.toArray
                let v784 : (char []) = v783 v782
                let v787 : string = v779.TrimStart v784 
                let v805 : char list = []
                let v806 : char list = '/' :: v805 
                let v809 : char list = ' ' :: v806 
                let v812 : (char list -> (char [])) = List.toArray
                let v813 : (char []) = v812 v809
                let v816 : string = v787.TrimEnd v813 
                v816
        let v835 : (string -> unit) = closure11()
        let v836 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v837 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v834 v837 
        let _v836 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v838 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v834 v838 
        let _v836 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v839 : string = v24.l0
        let v840 : bool = v839 = ""
        let v848 : string =
            if v840 then
                v834
            else
                let v841 : bool = v834 = ""
                if v841 then
                    let v842 : string = v24.l0
                    v842
                else
                    let v843 : string = v24.l0
                    let v844 : string = "\n"
                    let v845 : string = v843 + v844 
                    let v846 : string = v845 + v834 
                    v846
        let v849 : string = "&*$0"
        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v848 v849 
        let v851 : string = $"$0.chars()"
        let v852 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v850 v851 
        let v853 : string = "v852"
        let v854 : _ = Fable.Core.RustInterop.emitRustExpr () v853 
        let v855 : string = "v854.collect::<Vec<_>>()"
        let v856 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v855 
        let v857 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v858 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v856 v857 
        let v859 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v860 : bool = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = "x"
        let v862 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v861 
        let v863 : string = "String::from_iter($0)"
        let v864 : std_string_String = Fable.Core.RustInterop.emitRustExpr v862 v863 
        let v865 : string = "true; $0 }).collect::<Vec<_>>()"
        let v866 : bool = Fable.Core.RustInterop.emitRustExpr v864 v865 
        let v867 : string = "_vec_map"
        let v868 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v867 
        let v869 : string = "$0.len()"
        let v870 : unativeint = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : (unativeint -> int32) = int32
        let v872 : int32 = v871 v870
        let v873 : string = ""
        let v874 : bool = v834 <> v873 
        let v878 : bool =
            if v874 then
                let v877 : bool = v872 <= 1
                v877
            else
                false
        if v878 then
            v24.l0 <- v848
            ()
        else
            v24.l0 <- v873
            let v879 : string = "true; $0.into_iter().for_each(|x| { //"
            let v880 : bool = Fable.Core.RustInterop.emitRustExpr v868 v879 
            let v881 : string = "x"
            let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v881 
            let v883 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v882 v883 
            let v884 : string = $"true;"
            let v885 : bool = Fable.Core.RustInterop.emitRustExpr () v884 
            let v886 : string = "true; }}); { //"
            let v887 : bool = Fable.Core.RustInterop.emitRustExpr () v886 
            ()
        let _v836 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v835 v834
        let _v836 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v835 v834
        let _v836 = () 
        #endif
#else
        v835 v834
        let _v836 = () 
        #endif
        _v836 
        let v888 : (string -> unit) = v22.l0
        v888 v834
and method101 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method40(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US36 =
        if v11 then
            US36_0(v9, v10)
        else
            US36_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US36_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US36_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure81(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v915 : uint8 = v8 + 1uy
        method101(v0, v1, v2, v3, v4, v5, v6, v7, v915)
and method100 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method101(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method97 (v0 : US33, v1 : string, v2 : string, v3 : string, v4 : US12) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "cfg!(windows)"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "cfg!(windows)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : US10 = US10_0
    let v18 : US11 = US11_3(v17)
    let v19 : string = $"platform.is_windows / target: {v18}"
    let v20 : bool = failwith<bool> v19
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : US10 = US10_0
    let v22 : US11 = US11_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _v10 = v24 
    #endif
#else
    let v25 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v26 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v27 : bool = v26 v25
    let _v10 = v27 
    #endif
    let v28 : bool = _v10 
    let v36 : string =
        if v28 then
            let v34 : string = "_WINDOWS"
            v34
        else
            let v35 : string = "_LINUX"
            v35
    let v37 : string = $" --define {v36}"
    let v185 : string =
        match v0 with
        | US33_1 -> (* None *)
            let v183 : string = ""
            v183
        | US33_0(v38) -> (* Some *)
            let v39 : string = Unchecked.defaultof<_>
            let v42 : string = Unchecked.defaultof<_>
            let v47 : bool =
                match v38 with
                | US34_0(v45) -> (* Wasm *)
                    let v46 : bool = v39 = v45
                    v46
                | _ ->
                    false
            let v105 : US1 =
                if v47 then
                    let v48 : string = "Wasm"
                    US1_0(v48)
                else
                    let v50 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v51 : string = method98()
                    let _v50 = v51 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v52 : string = method98()
                    let _v50 = v52 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v53 : string = method98()
                    let _v50 = v53 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v54 : string = method99()
                    let _v50 = v54 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v55 : string = method99()
                    let _v50 = v55 
                    #endif
#else
                    let v56 : string = method99()
                    let _v50 = v56 
                    #endif
                    let v57 : string = _v50 
                    let v62 : string = method9()
                    let v63 : Mut3 = {l0 = v62} : Mut3
                    let v64 : US34 = US34_0(v39)
                    let v65 : string = $"%A{v64}"
                    let v69 : string = $"{v65}"
                    let v72 : unit = ()
                    let v73 : (unit -> unit) = closure10(v63, v69)
                    let v74 : unit = (fun () -> v73 (); v72) ()
                    let v77 : string = v63.l0
                    let v78 : (string []) = v77.Split v57 
                    let v81 : string = v78.[int 0]
                    let v84 : string = method9()
                    let v85 : Mut3 = {l0 = v84} : Mut3
                    let v86 : string = $"%A{v38}"
                    let v89 : string = $"{v86}"
                    let v92 : unit = ()
                    let v93 : (unit -> unit) = closure10(v85, v89)
                    let v94 : unit = (fun () -> v93 (); v92) ()
                    let v97 : string = v85.l0
                    let v98 : bool = v97.StartsWith v81 
                    if v98 then
                        let v101 : string = "Wasm"
                        US1_0(v101)
                    else
                        US1_1
            let v175 : US1 =
                match v105 with
                | US1_1 -> (* None *)
                    let v110 : bool =
                        match v38 with
                        | US34_1(v108) -> (* Contract *)
                            let v109 : bool = v42 = v108
                            v109
                        | _ ->
                            false
                    let v168 : US1 =
                        if v110 then
                            let v111 : string = "Contract"
                            US1_0(v111)
                        else
                            let v113 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v114 : string = method98()
                            let _v113 = v114 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v115 : string = method98()
                            let _v113 = v115 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v116 : string = method98()
                            let _v113 = v116 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v117 : string = method99()
                            let _v113 = v117 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v118 : string = method99()
                            let _v113 = v118 
                            #endif
#else
                            let v119 : string = method99()
                            let _v113 = v119 
                            #endif
                            let v120 : string = _v113 
                            let v125 : string = method9()
                            let v126 : Mut3 = {l0 = v125} : Mut3
                            let v127 : US34 = US34_1(v42)
                            let v128 : string = $"%A{v127}"
                            let v132 : string = $"{v128}"
                            let v135 : unit = ()
                            let v136 : (unit -> unit) = closure10(v126, v132)
                            let v137 : unit = (fun () -> v136 (); v135) ()
                            let v140 : string = v126.l0
                            let v141 : (string []) = v140.Split v120 
                            let v144 : string = v141.[int 0]
                            let v147 : string = method9()
                            let v148 : Mut3 = {l0 = v147} : Mut3
                            let v149 : string = $"%A{v38}"
                            let v152 : string = $"{v149}"
                            let v155 : unit = ()
                            let v156 : (unit -> unit) = closure10(v148, v152)
                            let v157 : unit = (fun () -> v156 (); v155) ()
                            let v160 : string = v148.l0
                            let v161 : bool = v160.StartsWith v144 
                            if v161 then
                                let v164 : string = "Contract"
                                US1_0(v164)
                            else
                                US1_1
                    match v168 with
                    | US1_1 -> (* None *)
                        US1_1
                    | US1_0(v169) -> (* Some *)
                        US1_0(v169)
                | US1_0(v106) -> (* Some *)
                    US1_0(v106)
            let v179 : string =
                match v175 with
                | US1_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US1_0(v176) -> (* Some *)
                    v176
            let v180 : (unit -> string) = v179.ToUpper
            let v181 : string = v180 ()
            let v182 : string = $" --define {v181}"
            v182
    let v186 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v37}{v185}"
    let v192 : Result<string, string> =
        match v4 with
        | US12_1(v189) -> (* Error *)
            let v190 : Result<string, string> = Error v189 
            v190
        | US12_0(v187) -> (* Ok *)
            let v188 : Result<string, string> = Ok v187 
            v188
    let v193 : string = "$0.ok()"
    let v194 : string option = Fable.Core.RustInterop.emitRustExpr v192 v193 
    let v195 : uint8 = 3uy
    let v196 : bool = true
    method100(v195, v186, v5, v6, v7, v8, v196, v194)
and closure82 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 4 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Critical"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_red"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_red"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_red"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[91m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[91m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[91m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "exit_code"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure10(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v1}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure10(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure10(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "dotnet_fable_result"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure10(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure10(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = " }"
        let v710 : string = $"{v709}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure10(v639, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = v639.l0
        let v719 : string = "spiral_builder.process_rust / dotnet fable error"
        let v720 : string = $"{v496} {v631} #{v637} %s{v719} / {v718}"
        let v723 : char list = []
        let v724 : (char list -> (char [])) = List.toArray
        let v725 : (char []) = v724 v723
        let v728 : string = v720.TrimStart v725 
        let v746 : char list = []
        let v747 : char list = '/' :: v746 
        let v750 : char list = ' ' :: v747 
        let v753 : (char list -> (char [])) = List.toArray
        let v754 : (char []) = v753 v750
        let v757 : string = v728.TrimEnd v754 
        let v775 : (string -> unit) = closure11()
        let v776 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v757 v777 
        let _v776 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v778 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v757 v778 
        let _v776 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v779 : string = v21.l0
        let v780 : bool = v779 = ""
        let v788 : string =
            if v780 then
                v757
            else
                let v781 : bool = v757 = ""
                if v781 then
                    let v782 : string = v21.l0
                    v782
                else
                    let v783 : string = v21.l0
                    let v784 : string = "\n"
                    let v785 : string = v783 + v784 
                    let v786 : string = v785 + v757 
                    v786
        let v789 : string = "&*$0"
        let v790 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v788 v789 
        let v791 : string = $"$0.chars()"
        let v792 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v790 v791 
        let v793 : string = "v792"
        let v794 : _ = Fable.Core.RustInterop.emitRustExpr () v793 
        let v795 : string = "v794.collect::<Vec<_>>()"
        let v796 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v795 
        let v797 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v798 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v796 v797 
        let v799 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v800 : bool = Fable.Core.RustInterop.emitRustExpr v798 v799 
        let v801 : string = "x"
        let v802 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v801 
        let v803 : string = "String::from_iter($0)"
        let v804 : std_string_String = Fable.Core.RustInterop.emitRustExpr v802 v803 
        let v805 : string = "true; $0 }).collect::<Vec<_>>()"
        let v806 : bool = Fable.Core.RustInterop.emitRustExpr v804 v805 
        let v807 : string = "_vec_map"
        let v808 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v807 
        let v809 : string = "$0.len()"
        let v810 : unativeint = Fable.Core.RustInterop.emitRustExpr v808 v809 
        let v811 : (unativeint -> int32) = int32
        let v812 : int32 = v811 v810
        let v813 : string = ""
        let v814 : bool = v757 <> v813 
        let v818 : bool =
            if v814 then
                let v817 : bool = v812 <= 1
                v817
            else
                false
        if v818 then
            v21.l0 <- v788
            ()
        else
            v21.l0 <- v813
            let v819 : string = "true; $0.into_iter().for_each(|x| { //"
            let v820 : bool = Fable.Core.RustInterop.emitRustExpr v808 v819 
            let v821 : string = "x"
            let v822 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v821 
            let v823 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v822 v823 
            let v824 : string = $"true;"
            let v825 : bool = Fable.Core.RustInterop.emitRustExpr () v824 
            let v826 : string = "true; }}); { //"
            let v827 : bool = Fable.Core.RustInterop.emitRustExpr () v826 
            ()
        let _v776 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v775 v757
        let _v776 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v775 v757
        let _v776 = () 
        #endif
#else
        v775 v757
        let _v776 = () 
        #endif
        _v776 
        let v828 : (string -> unit) = v19.l0
        v828 v757
and closure83 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "near-sdk"
    let v4 : bool = v2.Contains v3 
    v4
and method102 () : (std_string_String -> bool) =
    closure83()
and method103 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method104 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method105 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and closure84 (v0 : US37 option ref) (v1 : US37 option) : US37 option ref =
    v0.Value <- v1 
    v0
and closure85 (v0 : std_collections_HashMap<string, string> option, v1 : (US37 option -> US37 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_collections_HashMap<string, string> = x
    let v3 : US37 = US37_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method107 () : string =
    let v0 : string = "a"
    v0
and closure86 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 1 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Debug"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_blue"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_blue"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_blue"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[94m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[94m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[94m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = $"{v0}/{3uy}"
        let v641 : string = method9()
        let v642 : Mut3 = {l0 = v641} : Mut3
        let v643 : string = "{ "
        let v644 : string = $"{v643}"
        let v647 : unit = ()
        let v648 : (unit -> unit) = closure10(v642, v644)
        let v649 : unit = (fun () -> v648 (); v647) ()
        let v652 : string = "is_error"
        let v653 : string = $"{v652}"
        let v656 : unit = ()
        let v657 : (unit -> unit) = closure10(v642, v653)
        let v658 : unit = (fun () -> v657 (); v656) ()
        let v661 : string = " = "
        let v662 : string = $"{v661}"
        let v665 : unit = ()
        let v666 : (unit -> unit) = closure10(v642, v662)
        let v667 : unit = (fun () -> v666 (); v665) ()
        let v672 : string =
            if v3 then
                let v670 : string = "true"
                v670
            else
                let v671 : string = "false"
                v671
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure10(v642, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = "; "
        let v682 : string = $"{v681}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure10(v642, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = "retry"
        let v691 : string = $"{v690}"
        let v694 : unit = ()
        let v695 : (unit -> unit) = closure10(v642, v691)
        let v696 : unit = (fun () -> v695 (); v694) ()
        let v699 : string = $"{v661}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure10(v642, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = $"{v640}"
        let v710 : unit = ()
        let v711 : (unit -> unit) = closure10(v642, v707)
        let v712 : unit = (fun () -> v711 (); v710) ()
        let v715 : string = $"{v681}"
        let v718 : unit = ()
        let v719 : (unit -> unit) = closure10(v642, v715)
        let v720 : unit = (fun () -> v719 (); v718) ()
        let v723 : string = "result"
        let v724 : string = $"{v723}"
        let v727 : unit = ()
        let v728 : (unit -> unit) = closure10(v642, v724)
        let v729 : unit = (fun () -> v728 (); v727) ()
        let v732 : string = $"{v661}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure10(v642, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = $"{v1}"
        let v743 : unit = ()
        let v744 : (unit -> unit) = closure10(v642, v740)
        let v745 : unit = (fun () -> v744 (); v743) ()
        let v748 : string = ", "
        let v749 : string = $"{v748}"
        let v752 : unit = ()
        let v753 : (unit -> unit) = closure10(v642, v749)
        let v754 : unit = (fun () -> v753 (); v752) ()
        let v757 : string = $"{v2}"
        let v760 : unit = ()
        let v761 : (unit -> unit) = closure10(v642, v757)
        let v762 : unit = (fun () -> v761 (); v760) ()
        let v765 : string = " }"
        let v766 : string = $"{v765}"
        let v769 : unit = ()
        let v770 : (unit -> unit) = closure10(v642, v766)
        let v771 : unit = (fun () -> v770 (); v769) ()
        let v774 : string = v642.l0
        let v775 : string = "common.retry_fn' / loop"
        let v776 : bool = v775 = ""
        let v833 : string =
            if v776 then
                let v777 : string = ""
                v777
            else
                let v778 : string = $"{v498} {v633} #{v639} %s{v775} / {v774}"
                let v781 : char list = []
                let v782 : (char list -> (char [])) = List.toArray
                let v783 : (char []) = v782 v781
                let v786 : string = v778.TrimStart v783 
                let v804 : char list = []
                let v805 : char list = '/' :: v804 
                let v808 : char list = ' ' :: v805 
                let v811 : (char list -> (char [])) = List.toArray
                let v812 : (char []) = v811 v808
                let v815 : string = v786.TrimEnd v812 
                v815
        let v834 : (string -> unit) = closure11()
        let v835 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v836 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v833 v836 
        let _v835 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v837 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v833 v837 
        let _v835 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v838 : string = v23.l0
        let v839 : bool = v838 = ""
        let v847 : string =
            if v839 then
                v833
            else
                let v840 : bool = v833 = ""
                if v840 then
                    let v841 : string = v23.l0
                    v841
                else
                    let v842 : string = v23.l0
                    let v843 : string = "\n"
                    let v844 : string = v842 + v843 
                    let v845 : string = v844 + v833 
                    v845
        let v848 : string = "&*$0"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v847 v848 
        let v850 : string = $"$0.chars()"
        let v851 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v849 v850 
        let v852 : string = "v851"
        let v853 : _ = Fable.Core.RustInterop.emitRustExpr () v852 
        let v854 : string = "v853.collect::<Vec<_>>()"
        let v855 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v854 
        let v856 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v857 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let v858 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v859 : bool = Fable.Core.RustInterop.emitRustExpr v857 v858 
        let v860 : string = "x"
        let v861 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v860 
        let v862 : string = "String::from_iter($0)"
        let v863 : std_string_String = Fable.Core.RustInterop.emitRustExpr v861 v862 
        let v864 : string = "true; $0 }).collect::<Vec<_>>()"
        let v865 : bool = Fable.Core.RustInterop.emitRustExpr v863 v864 
        let v866 : string = "_vec_map"
        let v867 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v866 
        let v868 : string = "$0.len()"
        let v869 : unativeint = Fable.Core.RustInterop.emitRustExpr v867 v868 
        let v870 : (unativeint -> int32) = int32
        let v871 : int32 = v870 v869
        let v872 : string = ""
        let v873 : bool = v833 <> v872 
        let v877 : bool =
            if v873 then
                let v876 : bool = v871 <= 1
                v876
            else
                false
        if v877 then
            v23.l0 <- v847
            ()
        else
            v23.l0 <- v872
            let v878 : string = "true; $0.into_iter().for_each(|x| { //"
            let v879 : bool = Fable.Core.RustInterop.emitRustExpr v867 v878 
            let v880 : string = "x"
            let v881 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v880 
            let v882 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v881 v882 
            let v883 : string = $"true;"
            let v884 : bool = Fable.Core.RustInterop.emitRustExpr () v883 
            let v885 : string = "true; }}); { //"
            let v886 : bool = Fable.Core.RustInterop.emitRustExpr () v885 
            ()
        let _v835 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v834 v833
        let _v835 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v834 v833
        let _v835 = () 
        #endif
#else
        v834 v833
        let _v835 = () 
        #endif
        _v835 
        let v887 : (string -> unit) = v21.l0
        v887 v833
and method106 (v0 : US12, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US12_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US12_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    let v15 : string = "$0.ok()"
    let v16 : string option = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : bool = true
    let struct (v18 : int32, v19 : string) = method40(v8, v3, v4, v5, v6, v17, v16)
    let v20 : string = "failed to load manifest for workspace member"
    let v21 : bool = v19.Contains v20 
    let v24 : bool = v21 = false
    let v193 : US36 =
        if v24 then
            let v25 : bool = v18 = 0
            if v25 then
                US36_0(v18, v19)
            else
                US36_1(v18, v19)
        else
            let v29 : string = $"regex::Regex::new(&$0)"
            let v30 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v31 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v30 v29 
            let v32 : string = "$0.unwrap()"
            let v33 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "&*$0"
            let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19 v34 
            let v36 : string = "String::from($0)"
            let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let v38 : string = "true; let _capture_move = (move || { //"
            let v39 : bool = Fable.Core.RustInterop.emitRustExpr () v38 
            let v40 : string = "Box::new($0)"
            let v41 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v37 v40 
            let v42 : string = "Box::leak($0)"
            let v43 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = $"v33.captures_iter(v43)"
            let v45 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v44 
            let v46 : string = "true; let _regex_captures : Vec<_> = v45.map(|x| { //"
            let v47 : bool = Fable.Core.RustInterop.emitRustExpr () v46 
            let v48 : string = $"x"
            let v49 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v48 
            let v50 : string = "Box::new($0)"
            let v51 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v49 v50 
            let v52 : string = "Box::leak($0)"
            let v53 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v51 v52 
            let v54 : string = $"$0.capture_names()"
            let v55 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v33 v54 
            let v56 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v55.map(|x| { //"
            let v57 : bool = Fable.Core.RustInterop.emitRustExpr () v56 
            let v58 : string = "x.unwrap_or(\"\").to_string().into()"
            let v59 : string = Fable.Core.RustInterop.emitRustExpr () v58 
            let v60 : string = "$0.clone()"
            let v61 : string = Fable.Core.RustInterop.emitRustExpr v59 v60 
            let v62 : string = $"v53.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v63 : string = Fable.Core.RustInterop.emitRustExpr v59 v62 
            let v64 : (string * string) = v61, v63 
            let v65 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v66 : bool = Fable.Core.RustInterop.emitRustExpr v64 v65 
            let v67 : string = "_regex_captures"
            let v68 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v67 
            let v69 : string = "true; $0 }).collect::<Vec<_>>()"
            let v70 : bool = Fable.Core.RustInterop.emitRustExpr v68 v69 
            let v71 : string = "_regex_captures"
            let v72 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v71 
            let v73 : string = "true; $0 })()"
            let v74 : bool = Fable.Core.RustInterop.emitRustExpr v72 v73 
            let v75 : string = "_capture_move"
            let v76 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v75 
            let v77 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v78 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v76 v77 
            let v79 : std_collections_HashMap<string, string> option = v78 |> Array.tryItem 0 
            let v80 : US37 option = None
            let _v80 = ref v80 
            let v81 : US37 option ref = _v80 
            let v82 : (US37 option -> US37 option ref) = closure84(v81)
            let v83 : unit = ()
            let v84 : (unit -> unit) = closure85(v79, v82)
            let v85 : unit = (fun () -> v84 (); v83) ()
            let v88 : US37 option = _v80.Value 
            let v99 : US37 = US37_1
            let v100 : US37 = v88 |> Option.defaultValue v99 
            let v135 : US38 =
                match v100 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v104) -> (* Some *)
                    let v105 : string = method107()
                    let v106 : string = "std::collections::HashMap::get(&$0, &v105).map(|x| x).cloned()"
                    let v107 : string option = Fable.Core.RustInterop.emitRustExpr v104 v106 
                    let v108 : US1 option = None
                    let _v108 = ref v108 
                    let v109 : US1 option ref = _v108 
                    let v110 : (US1 option -> US1 option ref) = closure3(v109)
                    let v111 : unit = ()
                    let v112 : (unit -> unit) = closure4(v107, v110)
                    let v113 : unit = (fun () -> v112 (); v111) ()
                    let v116 : US1 option = _v108.Value 
                    let v127 : US1 = US1_1
                    let v128 : US1 = v116 |> Option.defaultValue v127 
                    US38_0(v128)
            let v142 : US1 =
                match v135 with
                | US38_0(v136) -> (* Some *)
                    match v136 with
                    | US1_0(v137) -> (* Some *)
                        US1_0(v137)
                    | _ ->
                        US1_1
                | _ ->
                    US1_1
            match v142 with
            | US1_1 -> (* None *)
                US36_1(v18, v19)
            | US1_0(v144) -> (* Some *)
                let v145 : bool = method27(v144)
                let v146 : bool = v145 = false
                if v146 then
                    let v147 : string = method24(v144)
                    let v148 : System.IDisposable = method28(v147)
                    let v149 : System.DateTime = System.DateTime.Now
                    let v152 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v153 : System.Guid = v152 ()
                    let v156 : System.Guid = method92(v153, v149)
                    let v157 : (System.Guid -> string) = _.ToString()
                    let v158 : string = v157 v156
                    let v161 : string = $"[package]"
                    let v162 : string = $"name = \"spiral_builder_{v158}\""
                    let v163 : string = "\n"
                    let v164 : string = v161 + v163 
                    let v165 : string = v164 + v162 
                    let v166 : string = $"version = \"0.0.1\""
                    let v167 : string = v165 + v163 
                    let v168 : string = v167 + v166 
                    let v169 : string = $"edition = \"2021\""
                    let v170 : string = v168 + v163 
                    let v171 : string = v170 + v169 
                    let v172 : string = $""
                    let v173 : string = v171 + v163 
                    let v174 : string = v173 + v172 
                    let v175 : string = $"[[bin]]"
                    let v176 : string = v174 + v163 
                    let v177 : string = v176 + v175 
                    let v178 : string = $"name = \"spiral_builder_{v158}\""
                    let v179 : string = v177 + v163 
                    let v180 : string = v179 + v178 
                    let v181 : string = $"path = \"spiral_builder.rs\""
                    let v182 : string = v180 + v163 
                    let v183 : string = v182 + v181 
                    let v184 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v185 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v144, v183) v185 
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let _v184 = () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let _v184 = () 
                    #endif
#else
                    let v186 : string = method39(v183)
                    System.IO.File.WriteAllText (v144, v186)
                    let _v184 = () 
                    #endif
                    _v184 
                    ()
                let v187 : bool = v18 = 0
                if v187 then
                    US36_0(v18, v19)
                else
                    US36_1(v18, v19)
    let struct (v201 : bool, v202 : int32, v203 : string) =
        match v193 with
        | US36_1(v196, v197) -> (* Error *)
            struct (true, v196, v197)
        | US36_0(v194, v195) -> (* Ok *)
            struct (false, v194, v195)
    let v204 : bool = v201 = false
    let v206 : bool =
        if v204 then
            true
        else
            let v205 : bool = v2 >= 3uy
            v205
    if v206 then
        struct (v202, v203)
    else
        let v207 : unit = ()
        let v208 : (unit -> unit) = closure86(v2, v202, v203, v201)
        let v209 : unit = (fun () -> v208 (); v207) ()
        let v1094 : uint8 = v2 + 1uy
        method106(v0, v1, v1094)
and closure87 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 4 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Critical"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_red"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_red"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_red"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[91m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[91m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[91m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "exit_code"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure10(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v1}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure10(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure10(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "cargo_fmt_result"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure10(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure10(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = " }"
        let v710 : string = $"{v709}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure10(v639, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = v639.l0
        let v719 : string = "spiral_builder.process_rust / cargo fmt error"
        let v720 : string = $"{v496} {v631} #{v637} %s{v719} / {v718}"
        let v723 : char list = []
        let v724 : (char list -> (char [])) = List.toArray
        let v725 : (char []) = v724 v723
        let v728 : string = v720.TrimStart v725 
        let v746 : char list = []
        let v747 : char list = '/' :: v746 
        let v750 : char list = ' ' :: v747 
        let v753 : (char list -> (char [])) = List.toArray
        let v754 : (char []) = v753 v750
        let v757 : string = v728.TrimEnd v754 
        let v775 : (string -> unit) = closure11()
        let v776 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v757 v777 
        let _v776 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v778 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v757 v778 
        let _v776 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v779 : string = v21.l0
        let v780 : bool = v779 = ""
        let v788 : string =
            if v780 then
                v757
            else
                let v781 : bool = v757 = ""
                if v781 then
                    let v782 : string = v21.l0
                    v782
                else
                    let v783 : string = v21.l0
                    let v784 : string = "\n"
                    let v785 : string = v783 + v784 
                    let v786 : string = v785 + v757 
                    v786
        let v789 : string = "&*$0"
        let v790 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v788 v789 
        let v791 : string = $"$0.chars()"
        let v792 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v790 v791 
        let v793 : string = "v792"
        let v794 : _ = Fable.Core.RustInterop.emitRustExpr () v793 
        let v795 : string = "v794.collect::<Vec<_>>()"
        let v796 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v795 
        let v797 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v798 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v796 v797 
        let v799 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v800 : bool = Fable.Core.RustInterop.emitRustExpr v798 v799 
        let v801 : string = "x"
        let v802 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v801 
        let v803 : string = "String::from_iter($0)"
        let v804 : std_string_String = Fable.Core.RustInterop.emitRustExpr v802 v803 
        let v805 : string = "true; $0 }).collect::<Vec<_>>()"
        let v806 : bool = Fable.Core.RustInterop.emitRustExpr v804 v805 
        let v807 : string = "_vec_map"
        let v808 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v807 
        let v809 : string = "$0.len()"
        let v810 : unativeint = Fable.Core.RustInterop.emitRustExpr v808 v809 
        let v811 : (unativeint -> int32) = int32
        let v812 : int32 = v811 v810
        let v813 : string = ""
        let v814 : bool = v757 <> v813 
        let v818 : bool =
            if v814 then
                let v817 : bool = v812 <= 1
                v817
            else
                false
        if v818 then
            v21.l0 <- v788
            ()
        else
            v21.l0 <- v813
            let v819 : string = "true; $0.into_iter().for_each(|x| { //"
            let v820 : bool = Fable.Core.RustInterop.emitRustExpr v808 v819 
            let v821 : string = "x"
            let v822 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v821 
            let v823 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v822 v823 
            let v824 : string = $"true;"
            let v825 : bool = Fable.Core.RustInterop.emitRustExpr () v824 
            let v826 : string = "true; }}); { //"
            let v827 : bool = Fable.Core.RustInterop.emitRustExpr () v826 
            ()
        let _v776 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v775 v757
        let _v776 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v775 v757
        let _v776 = () 
        #endif
#else
        v775 v757
        let _v776 = () 
        #endif
        _v776 
        let v828 : (string -> unit) = v19.l0
        v828 v757
and closure89 () (v0 : string) : bool =
    let v1 : string = "profile [optimized] target"
    let v2 : bool = v0.Contains v1 
    let v5 : bool = v2 = false
    if v5 then
        let v6 : string = "profile [unoptimized] target"
        let v7 : bool = v0.Contains v6 
        let v10 : bool = v7 = false
        if v10 then
            let v11 : string = "profile [unoptimized + debuginfo] target"
            let v12 : bool = v0.Contains v11 
            let v15 : bool = v12 = false
            v15
        else
            false
    else
        false
and closure88 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : (string -> bool) = closure89()
    let v6 : (string []) = v2 |> Array.skipWhile v5 
    let v7 : (string []) = v6 |> Array.skip 2 
    let v8 : string seq = v7 |> Seq.ofArray
    let v11 : (string -> (string seq -> string)) = String.concat
    let v12 : (string seq -> string) = v11 v1
    v12 v8
and closure91 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "ex"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v670 : string = "format!(\"{:#?}\", $0)"
        let v671 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v670 
        let v672 : string = "fable_library_rust::String_::fromString($0)"
        let v673 : string = Fable.Core.RustInterop.emitRustExpr v671 v672 
        let _v669 = v673 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v674 : string = "format!(\"{:#?}\", $0)"
        let v675 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v674 
        let v676 : string = "fable_library_rust::String_::fromString($0)"
        let v677 : string = Fable.Core.RustInterop.emitRustExpr v675 v676 
        let _v669 = v677 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v678 : string = "format!(\"{:#?}\", $0)"
        let v679 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v678 
        let v680 : string = "fable_library_rust::String_::fromString($0)"
        let v681 : string = Fable.Core.RustInterop.emitRustExpr v679 v680 
        let _v669 = v681 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v682 : string = $"%A{v3}"
        let _v669 = v682 
        #endif
#if FABLE_COMPILER_PYTHON
        let v685 : string = $"%A{v3}"
        let _v669 = v685 
        #endif
#else
        let v688 : string = $"%A{v3}"
        let _v669 = v688 
        #endif
        let v691 : string = _v669 
        let v696 : string = $"{v691}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v641, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "; "
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure10(v641, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = "cargo_result"
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v641, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v660}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v641, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = $"{v1}"
        let v733 : unit = ()
        let v734 : (unit -> unit) = closure10(v641, v730)
        let v735 : unit = (fun () -> v734 (); v733) ()
        let v738 : string = $"{v704}"
        let v741 : unit = ()
        let v742 : (unit -> unit) = closure10(v641, v738)
        let v743 : unit = (fun () -> v742 (); v741) ()
        let v746 : string = "new_code_path"
        let v747 : string = $"{v746}"
        let v750 : unit = ()
        let v751 : (unit -> unit) = closure10(v641, v747)
        let v752 : unit = (fun () -> v751 (); v750) ()
        let v755 : string = $"{v660}"
        let v758 : unit = ()
        let v759 : (unit -> unit) = closure10(v641, v755)
        let v760 : unit = (fun () -> v759 (); v758) ()
        let v763 : string = $"{v0}"
        let v766 : unit = ()
        let v767 : (unit -> unit) = closure10(v641, v763)
        let v768 : unit = (fun () -> v767 (); v766) ()
        let v771 : string = $"{v704}"
        let v774 : unit = ()
        let v775 : (unit -> unit) = closure10(v641, v771)
        let v776 : unit = (fun () -> v775 (); v774) ()
        let v779 : string = "external_command"
        let v780 : string = $"{v779}"
        let v783 : unit = ()
        let v784 : (unit -> unit) = closure10(v641, v780)
        let v785 : unit = (fun () -> v784 (); v783) ()
        let v788 : string = $"{v660}"
        let v791 : unit = ()
        let v792 : (unit -> unit) = closure10(v641, v788)
        let v793 : unit = (fun () -> v792 (); v791) ()
        let v796 : string = $"{v2}"
        let v799 : unit = ()
        let v800 : (unit -> unit) = closure10(v641, v796)
        let v801 : unit = (fun () -> v800 (); v799) ()
        let v804 : string = " }"
        let v805 : string = $"{v804}"
        let v808 : unit = ()
        let v809 : (unit -> unit) = closure10(v641, v805)
        let v810 : unit = (fun () -> v809 (); v808) ()
        let v813 : string = v641.l0
        let v814 : string = "spiral_builder.process_rust / Exception"
        let v815 : string = $"{v498} {v633} #{v639} %s{v814} / {v813}"
        let v818 : char list = []
        let v819 : (char list -> (char [])) = List.toArray
        let v820 : (char []) = v819 v818
        let v823 : string = v815.TrimStart v820 
        let v841 : char list = []
        let v842 : char list = '/' :: v841 
        let v845 : char list = ' ' :: v842 
        let v848 : (char list -> (char [])) = List.toArray
        let v849 : (char []) = v848 v845
        let v852 : string = v823.TrimEnd v849 
        let v870 : (string -> unit) = closure11()
        let v871 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v872 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v852 v872 
        let _v871 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v873 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v852 v873 
        let _v871 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v874 : string = v23.l0
        let v875 : bool = v874 = ""
        let v883 : string =
            if v875 then
                v852
            else
                let v876 : bool = v852 = ""
                if v876 then
                    let v877 : string = v23.l0
                    v877
                else
                    let v878 : string = v23.l0
                    let v879 : string = "\n"
                    let v880 : string = v878 + v879 
                    let v881 : string = v880 + v852 
                    v881
        let v884 : string = "&*$0"
        let v885 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v883 v884 
        let v886 : string = $"$0.chars()"
        let v887 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v885 v886 
        let v888 : string = "v887"
        let v889 : _ = Fable.Core.RustInterop.emitRustExpr () v888 
        let v890 : string = "v889.collect::<Vec<_>>()"
        let v891 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v890 
        let v892 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v893 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v891 v892 
        let v894 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v895 : bool = Fable.Core.RustInterop.emitRustExpr v893 v894 
        let v896 : string = "x"
        let v897 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v896 
        let v898 : string = "String::from_iter($0)"
        let v899 : std_string_String = Fable.Core.RustInterop.emitRustExpr v897 v898 
        let v900 : string = "true; $0 }).collect::<Vec<_>>()"
        let v901 : bool = Fable.Core.RustInterop.emitRustExpr v899 v900 
        let v902 : string = "_vec_map"
        let v903 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v902 
        let v904 : string = "$0.len()"
        let v905 : unativeint = Fable.Core.RustInterop.emitRustExpr v903 v904 
        let v906 : (unativeint -> int32) = int32
        let v907 : int32 = v906 v905
        let v908 : string = ""
        let v909 : bool = v852 <> v908 
        let v913 : bool =
            if v909 then
                let v912 : bool = v907 <= 1
                v912
            else
                false
        if v913 then
            v23.l0 <- v883
            ()
        else
            v23.l0 <- v908
            let v914 : string = "true; $0.into_iter().for_each(|x| { //"
            let v915 : bool = Fable.Core.RustInterop.emitRustExpr v903 v914 
            let v916 : string = "x"
            let v917 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v916 
            let v918 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v917 v918 
            let v919 : string = $"true;"
            let v920 : bool = Fable.Core.RustInterop.emitRustExpr () v919 
            let v921 : string = "true; }}); { //"
            let v922 : bool = Fable.Core.RustInterop.emitRustExpr () v921 
            ()
        let _v871 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v870 v852
        let _v871 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v870 v852
        let _v871 = () 
        #endif
#else
        v870 v852
        let _v871 = () 
        #endif
        _v871 
        let v923 : (string -> unit) = v21.l0
        v923 v852
and closure90 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure91(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure92 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "exit_code"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : string = $"{v2}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure10(v641, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = "; "
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure10(v641, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = "cargo_result"
        let v687 : string = $"{v686}"
        let v690 : unit = ()
        let v691 : (unit -> unit) = closure10(v641, v687)
        let v692 : unit = (fun () -> v691 (); v690) ()
        let v695 : string = $"{v660}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure10(v641, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = $"{v1}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v641, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = $"{v677}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v641, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = "new_code_path"
        let v720 : string = $"{v719}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v641, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = $"{v660}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure10(v641, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = $"{v0}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure10(v641, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = $"{v677}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure10(v641, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = "external_command"
        let v753 : string = $"{v752}"
        let v756 : unit = ()
        let v757 : (unit -> unit) = closure10(v641, v753)
        let v758 : unit = (fun () -> v757 (); v756) ()
        let v761 : string = $"{v660}"
        let v764 : unit = ()
        let v765 : (unit -> unit) = closure10(v641, v761)
        let v766 : unit = (fun () -> v765 (); v764) ()
        let v769 : string = $"{v3}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure10(v641, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = " }"
        let v778 : string = $"{v777}"
        let v781 : unit = ()
        let v782 : (unit -> unit) = closure10(v641, v778)
        let v783 : unit = (fun () -> v782 (); v781) ()
        let v786 : string = v641.l0
        let v787 : string = "spiral_builder.process_rust / error"
        let v788 : string = $"{v498} {v633} #{v639} %s{v787} / {v786}"
        let v791 : char list = []
        let v792 : (char list -> (char [])) = List.toArray
        let v793 : (char []) = v792 v791
        let v796 : string = v788.TrimStart v793 
        let v814 : char list = []
        let v815 : char list = '/' :: v814 
        let v818 : char list = ' ' :: v815 
        let v821 : (char list -> (char [])) = List.toArray
        let v822 : (char []) = v821 v818
        let v825 : string = v796.TrimEnd v822 
        let v843 : (string -> unit) = closure11()
        let v844 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v845 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v845 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v846 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v846 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = v23.l0
        let v848 : bool = v847 = ""
        let v856 : string =
            if v848 then
                v825
            else
                let v849 : bool = v825 = ""
                if v849 then
                    let v850 : string = v23.l0
                    v850
                else
                    let v851 : string = v23.l0
                    let v852 : string = "\n"
                    let v853 : string = v851 + v852 
                    let v854 : string = v853 + v825 
                    v854
        let v857 : string = "&*$0"
        let v858 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v856 v857 
        let v859 : string = $"$0.chars()"
        let v860 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = "v860"
        let v862 : _ = Fable.Core.RustInterop.emitRustExpr () v861 
        let v863 : string = "v862.collect::<Vec<_>>()"
        let v864 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v866 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v864 v865 
        let v867 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v868 : bool = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "x"
        let v870 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v869 
        let v871 : string = "String::from_iter($0)"
        let v872 : std_string_String = Fable.Core.RustInterop.emitRustExpr v870 v871 
        let v873 : string = "true; $0 }).collect::<Vec<_>>()"
        let v874 : bool = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "_vec_map"
        let v876 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v875 
        let v877 : string = "$0.len()"
        let v878 : unativeint = Fable.Core.RustInterop.emitRustExpr v876 v877 
        let v879 : (unativeint -> int32) = int32
        let v880 : int32 = v879 v878
        let v881 : string = ""
        let v882 : bool = v825 <> v881 
        let v886 : bool =
            if v882 then
                let v885 : bool = v880 <= 1
                v885
            else
                false
        if v886 then
            v23.l0 <- v856
            ()
        else
            v23.l0 <- v881
            let v887 : string = "true; $0.into_iter().for_each(|x| { //"
            let v888 : bool = Fable.Core.RustInterop.emitRustExpr v876 v887 
            let v889 : string = "x"
            let v890 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v889 
            let v891 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v890 v891 
            let v892 : string = $"true;"
            let v893 : bool = Fable.Core.RustInterop.emitRustExpr () v892 
            let v894 : string = "true; }}); { //"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            ()
        let _v844 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v843 v825
        let _v844 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v843 v825
        let _v844 = () 
        #endif
#else
        v843 v825
        let _v844 = () 
        #endif
        _v844 
        let v896 : (string -> unit) = v21.l0
        v896 v825
and closure93 (v0 : string, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "exit_code"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : string = $"{v3}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure10(v641, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = "; "
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure10(v641, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = "spiral_wasm_result"
        let v687 : string = $"{v686}"
        let v690 : unit = ()
        let v691 : (unit -> unit) = closure10(v641, v687)
        let v692 : unit = (fun () -> v691 (); v690) ()
        let v695 : string = $"{v660}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure10(v641, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = $"{v2}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v641, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = $"{v677}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v641, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = "cargo_result"
        let v720 : string = $"{v719}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v641, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = $"{v660}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure10(v641, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = $"{v1}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure10(v641, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = $"{v677}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure10(v641, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = "new_code_path"
        let v753 : string = $"{v752}"
        let v756 : unit = ()
        let v757 : (unit -> unit) = closure10(v641, v753)
        let v758 : unit = (fun () -> v757 (); v756) ()
        let v761 : string = $"{v660}"
        let v764 : unit = ()
        let v765 : (unit -> unit) = closure10(v641, v761)
        let v766 : unit = (fun () -> v765 (); v764) ()
        let v769 : string = $"{v0}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure10(v641, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = " }"
        let v778 : string = $"{v777}"
        let v781 : unit = ()
        let v782 : (unit -> unit) = closure10(v641, v778)
        let v783 : unit = (fun () -> v782 (); v781) ()
        let v786 : string = v641.l0
        let v787 : string = "spiral_builder.process_rust / wasm error"
        let v788 : string = $"{v498} {v633} #{v639} %s{v787} / {v786}"
        let v791 : char list = []
        let v792 : (char list -> (char [])) = List.toArray
        let v793 : (char []) = v792 v791
        let v796 : string = v788.TrimStart v793 
        let v814 : char list = []
        let v815 : char list = '/' :: v814 
        let v818 : char list = ' ' :: v815 
        let v821 : (char list -> (char [])) = List.toArray
        let v822 : (char []) = v821 v818
        let v825 : string = v796.TrimEnd v822 
        let v843 : (string -> unit) = closure11()
        let v844 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v845 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v845 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v846 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v846 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = v23.l0
        let v848 : bool = v847 = ""
        let v856 : string =
            if v848 then
                v825
            else
                let v849 : bool = v825 = ""
                if v849 then
                    let v850 : string = v23.l0
                    v850
                else
                    let v851 : string = v23.l0
                    let v852 : string = "\n"
                    let v853 : string = v851 + v852 
                    let v854 : string = v853 + v825 
                    v854
        let v857 : string = "&*$0"
        let v858 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v856 v857 
        let v859 : string = $"$0.chars()"
        let v860 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = "v860"
        let v862 : _ = Fable.Core.RustInterop.emitRustExpr () v861 
        let v863 : string = "v862.collect::<Vec<_>>()"
        let v864 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v866 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v864 v865 
        let v867 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v868 : bool = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "x"
        let v870 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v869 
        let v871 : string = "String::from_iter($0)"
        let v872 : std_string_String = Fable.Core.RustInterop.emitRustExpr v870 v871 
        let v873 : string = "true; $0 }).collect::<Vec<_>>()"
        let v874 : bool = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "_vec_map"
        let v876 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v875 
        let v877 : string = "$0.len()"
        let v878 : unativeint = Fable.Core.RustInterop.emitRustExpr v876 v877 
        let v879 : (unativeint -> int32) = int32
        let v880 : int32 = v879 v878
        let v881 : string = ""
        let v882 : bool = v825 <> v881 
        let v886 : bool =
            if v882 then
                let v885 : bool = v880 <= 1
                v885
            else
                false
        if v886 then
            v23.l0 <- v856
            ()
        else
            v23.l0 <- v881
            let v887 : string = "true; $0.into_iter().for_each(|x| { //"
            let v888 : bool = Fable.Core.RustInterop.emitRustExpr v876 v887 
            let v889 : string = "x"
            let v890 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v889 
            let v891 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v890 v891 
            let v892 : string = $"true;"
            let v893 : bool = Fable.Core.RustInterop.emitRustExpr () v892 
            let v894 : string = "true; }}); { //"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            ()
        let _v844 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v843 v825
        let _v844 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v843 v825
        let _v844 = () 
        #endif
#else
        v843 v825
        let _v844 = () 
        #endif
        _v844 
        let v896 : (string -> unit) = v21.l0
        v896 v825
and closure94 (v0 : string, v1 : string, v2 : int32, v3 : string, v4 : string) () : unit =
    let v5 : unit = ()
    let v6 : (unit -> unit) = closure2()
    let v7 : unit = (fun () -> v6 (); v5) ()
    let struct (v21 : Mut0, v22 : Mut1, v23 : Mut2, v24 : Mut3, v25 : Mut4, v26 : int64 option) = TraceState.trace_state.Value
    let v39 : unit = ()
    let v40 : unit = (fun () -> v6 (); v39) ()
    let struct (v54 : Mut0, v55 : Mut1, v56 : Mut2, v57 : Mut3, v58 : Mut4, v59 : int64 option) = TraceState.trace_state.Value
    let v72 : US0 = v58.l0
    let v73 : bool = v56.l0
    let v74 : bool = v73 = false
    let v77 : bool =
        if v74 then
            false
        else
            let v75 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v72
            let v76 : bool = 4 >= v75
            v76
    if v77 then
        let v78 : unit = ()
        let v79 : (unit -> unit) = closure7(v21)
        let v80 : unit = (fun () -> v79 (); v78) ()
        let v83 : unit = ()
        let v84 : unit = (fun () -> v6 (); v83) ()
        let struct (v98 : Mut0, v99 : Mut1, v100 : Mut2, v101 : Mut3, v102 : Mut4, v103 : int64 option) = TraceState.trace_state.Value
        let v116 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v117 : US3 option = None
        let _v117 = ref v117 
        let v118 : US3 option ref = _v117 
        let v119 : (US3 option -> US3 option ref) = closure8(v118)
        let v120 : unit = ()
        let v121 : (unit -> unit) = closure9(v103, v119)
        let v122 : unit = (fun () -> v121 (); v120) ()
        let v125 : US3 option = _v117.Value 
        let v136 : US3 = US3_1
        let v137 : US3 = v125 |> Option.defaultValue v136 
        let v177 : System.DateTime =
            match v137 with
            | US3_1 -> (* None *)
                let v173 : System.DateTime = System.DateTime.Now
                v173
            | US3_0(v141) -> (* Some *)
                let v142 : System.DateTime = System.DateTime.Now
                let v145 : (System.DateTime -> int64) = _.Ticks
                let v146 : int64 = v145 v142
                let v149 : int64 = v146 - v141
                let v150 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v151 : System.TimeSpan = v150 v149
                let v154 : (System.TimeSpan -> int32) = _.Hours
                let v155 : int32 = v154 v151
                let v158 : (System.TimeSpan -> int32) = _.Minutes
                let v159 : int32 = v158 v151
                let v162 : (System.TimeSpan -> int32) = _.Seconds
                let v163 : int32 = v162 v151
                let v166 : (System.TimeSpan -> int32) = _.Milliseconds
                let v167 : int32 = v166 v151
                let v170 : System.DateTime = System.DateTime (1, 1, 1, v155, v159, v163, v167)
                v170
        let v178 : string = method6()
        let v181 : (string -> string) = v177.ToString
        let v182 : string = v181 v178
        let _v116 = v182 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v185 : US3 option = None
        let _v185 = ref v185 
        let v186 : US3 option ref = _v185 
        let v187 : (US3 option -> US3 option ref) = closure8(v186)
        let v188 : unit = ()
        let v189 : (unit -> unit) = closure9(v103, v187)
        let v190 : unit = (fun () -> v189 (); v188) ()
        let v193 : US3 option = _v185.Value 
        let v204 : US3 = US3_1
        let v205 : US3 = v193 |> Option.defaultValue v204 
        let v245 : System.DateTime =
            match v205 with
            | US3_1 -> (* None *)
                let v241 : System.DateTime = System.DateTime.Now
                v241
            | US3_0(v209) -> (* Some *)
                let v210 : System.DateTime = System.DateTime.Now
                let v213 : (System.DateTime -> int64) = _.Ticks
                let v214 : int64 = v213 v210
                let v217 : int64 = v214 - v209
                let v218 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v219 : System.TimeSpan = v218 v217
                let v222 : (System.TimeSpan -> int32) = _.Hours
                let v223 : int32 = v222 v219
                let v226 : (System.TimeSpan -> int32) = _.Minutes
                let v227 : int32 = v226 v219
                let v230 : (System.TimeSpan -> int32) = _.Seconds
                let v231 : int32 = v230 v219
                let v234 : (System.TimeSpan -> int32) = _.Milliseconds
                let v235 : int32 = v234 v219
                let v238 : System.DateTime = System.DateTime (1, 1, 1, v223, v227, v231, v235)
                v238
        let v246 : string = method6()
        let v249 : (string -> string) = v245.ToString
        let v250 : string = v249 v246
        let _v116 = v250 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v253 : string = $"near_sdk::env::block_timestamp()"
        let v254 : uint64 = Fable.Core.RustInterop.emitRustExpr () v253 
        let v255 : US3 option = None
        let _v255 = ref v255 
        let v256 : US3 option ref = _v255 
        let v257 : (US3 option -> US3 option ref) = closure8(v256)
        let v258 : unit = ()
        let v259 : (unit -> unit) = closure9(v103, v257)
        let v260 : unit = (fun () -> v259 (); v258) ()
        let v263 : US3 option = _v255.Value 
        let v274 : US3 = US3_1
        let v275 : US3 = v263 |> Option.defaultValue v274 
        let v284 : uint64 =
            match v275 with
            | US3_1 -> (* None *)
                v254
            | US3_0(v279) -> (* Some *)
                let v280 : (int64 -> uint64) = uint64
                let v281 : uint64 = v280 v279
                let v282 : uint64 = v254 - v281
                v282
        let v285 : uint64 = v284 / 1000000000UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v285 / 60UL
        let v288 : uint64 = v287 % 60UL
        let v289 : uint64 = v285 / 3600UL
        let v290 : uint64 = v289 % 24UL
        let v291 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v290, v288, v286) v291 
        let v293 : string = "fable_library_rust::String_::fromString($0)"
        let v294 : string = Fable.Core.RustInterop.emitRustExpr v292 v293 
        let _v116 = v294 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v295 : US3 option = None
        let _v295 = ref v295 
        let v296 : US3 option ref = _v295 
        let v297 : (US3 option -> US3 option ref) = closure8(v296)
        let v298 : unit = ()
        let v299 : (unit -> unit) = closure9(v103, v297)
        let v300 : unit = (fun () -> v299 (); v298) ()
        let v303 : US3 option = _v295.Value 
        let v314 : US3 = US3_1
        let v315 : US3 = v303 |> Option.defaultValue v314 
        let v355 : System.DateTime =
            match v315 with
            | US3_1 -> (* None *)
                let v351 : System.DateTime = System.DateTime.Now
                v351
            | US3_0(v319) -> (* Some *)
                let v320 : System.DateTime = System.DateTime.Now
                let v323 : (System.DateTime -> int64) = _.Ticks
                let v324 : int64 = v323 v320
                let v327 : int64 = v324 - v319
                let v328 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v329 : System.TimeSpan = v328 v327
                let v332 : (System.TimeSpan -> int32) = _.Hours
                let v333 : int32 = v332 v329
                let v336 : (System.TimeSpan -> int32) = _.Minutes
                let v337 : int32 = v336 v329
                let v340 : (System.TimeSpan -> int32) = _.Seconds
                let v341 : int32 = v340 v329
                let v344 : (System.TimeSpan -> int32) = _.Milliseconds
                let v345 : int32 = v344 v329
                let v348 : System.DateTime = System.DateTime (1, 1, 1, v333, v337, v341, v345)
                v348
        let v356 : string = method7()
        let v359 : (string -> string) = v355.ToString
        let v360 : string = v359 v356
        let _v116 = v360 
        #endif
#if FABLE_COMPILER_PYTHON
        let v363 : US3 option = None
        let _v363 = ref v363 
        let v364 : US3 option ref = _v363 
        let v365 : (US3 option -> US3 option ref) = closure8(v364)
        let v366 : unit = ()
        let v367 : (unit -> unit) = closure9(v103, v365)
        let v368 : unit = (fun () -> v367 (); v366) ()
        let v371 : US3 option = _v363.Value 
        let v382 : US3 = US3_1
        let v383 : US3 = v371 |> Option.defaultValue v382 
        let v423 : System.DateTime =
            match v383 with
            | US3_1 -> (* None *)
                let v419 : System.DateTime = System.DateTime.Now
                v419
            | US3_0(v387) -> (* Some *)
                let v388 : System.DateTime = System.DateTime.Now
                let v391 : (System.DateTime -> int64) = _.Ticks
                let v392 : int64 = v391 v388
                let v395 : int64 = v392 - v387
                let v396 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v397 : System.TimeSpan = v396 v395
                let v400 : (System.TimeSpan -> int32) = _.Hours
                let v401 : int32 = v400 v397
                let v404 : (System.TimeSpan -> int32) = _.Minutes
                let v405 : int32 = v404 v397
                let v408 : (System.TimeSpan -> int32) = _.Seconds
                let v409 : int32 = v408 v397
                let v412 : (System.TimeSpan -> int32) = _.Milliseconds
                let v413 : int32 = v412 v397
                let v416 : System.DateTime = System.DateTime (1, 1, 1, v401, v405, v409, v413)
                v416
        let v424 : string = method7()
        let v427 : (string -> string) = v423.ToString
        let v428 : string = v427 v424
        let _v116 = v428 
        #endif
#else
        let v431 : US3 option = None
        let _v431 = ref v431 
        let v432 : US3 option ref = _v431 
        let v433 : (US3 option -> US3 option ref) = closure8(v432)
        let v434 : unit = ()
        let v435 : (unit -> unit) = closure9(v103, v433)
        let v436 : unit = (fun () -> v435 (); v434) ()
        let v439 : US3 option = _v431.Value 
        let v450 : US3 = US3_1
        let v451 : US3 = v439 |> Option.defaultValue v450 
        let v491 : System.DateTime =
            match v451 with
            | US3_1 -> (* None *)
                let v487 : System.DateTime = System.DateTime.Now
                v487
            | US3_0(v455) -> (* Some *)
                let v456 : System.DateTime = System.DateTime.Now
                let v459 : (System.DateTime -> int64) = _.Ticks
                let v460 : int64 = v459 v456
                let v463 : int64 = v460 - v455
                let v464 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v465 : System.TimeSpan = v464 v463
                let v468 : (System.TimeSpan -> int32) = _.Hours
                let v469 : int32 = v468 v465
                let v472 : (System.TimeSpan -> int32) = _.Minutes
                let v473 : int32 = v472 v465
                let v476 : (System.TimeSpan -> int32) = _.Seconds
                let v477 : int32 = v476 v465
                let v480 : (System.TimeSpan -> int32) = _.Milliseconds
                let v481 : int32 = v480 v465
                let v484 : System.DateTime = System.DateTime (1, 1, 1, v469, v473, v477, v481)
                v484
        let v492 : string = method7()
        let v495 : (string -> string) = v491.ToString
        let v496 : string = v495 v492
        let _v116 = v496 
        #endif
        let v499 : string = _v116 
        
        
        
        
        
        let v569 : string = "Critical"
        let v570 : (unit -> string) = v569.ToLower
        let v571 : string = v570 ()
        let v574 : string = v571.PadLeft (7, ' ')
        let v588 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v589 : string = "inline_colorization::color_bright_red"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "&*$0"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v574 v591 
        let v593 : string = "inline_colorization::color_reset"
        let v594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "\"{v590}{v592}{v594}\""
        let v596 : string = @$"format!(" + v595 + ")"
        let v597 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "fable_library_rust::String_::fromString($0)"
        let v599 : string = Fable.Core.RustInterop.emitRustExpr v597 v598 
        let _v588 = v599 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v600 : string = "inline_colorization::color_bright_red"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "&*$0"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v574 v602 
        let v604 : string = "inline_colorization::color_reset"
        let v605 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "\"{v601}{v603}{v605}\""
        let v607 : string = @$"format!(" + v606 + ")"
        let v608 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "fable_library_rust::String_::fromString($0)"
        let v610 : string = Fable.Core.RustInterop.emitRustExpr v608 v609 
        let _v588 = v610 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v611 : string = "inline_colorization::color_bright_red"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "&*$0"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v574 v613 
        let v615 : string = "inline_colorization::color_reset"
        let v616 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "\"{v612}{v614}{v616}\""
        let v618 : string = @$"format!(" + v617 + ")"
        let v619 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v618 
        let v620 : string = "fable_library_rust::String_::fromString($0)"
        let v621 : string = Fable.Core.RustInterop.emitRustExpr v619 v620 
        let _v588 = v621 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v622 : string = "\u001b[91m"
        let v623 : string = method8()
        let v624 : string = v622 + v574 
        let v625 : string = v624 + v623 
        let _v588 = v625 
        #endif
#if FABLE_COMPILER_PYTHON
        let v626 : string = "\u001b[91m"
        let v627 : string = method8()
        let v628 : string = v626 + v574 
        let v629 : string = v628 + v627 
        let _v588 = v629 
        #endif
#else
        let v630 : string = "\u001b[91m"
        let v631 : string = method8()
        let v632 : string = v630 + v574 
        let v633 : string = v632 + v631 
        let _v588 = v633 
        #endif
        let v634 : string = _v588 
        let v640 : int64 = v98.l0
        let v641 : string = method9()
        let v642 : Mut3 = {l0 = v641} : Mut3
        let v643 : string = "{ "
        let v644 : string = $"{v643}"
        let v647 : unit = ()
        let v648 : (unit -> unit) = closure10(v642, v644)
        let v649 : unit = (fun () -> v648 (); v647) ()
        let v652 : string = "exit_code"
        let v653 : string = $"{v652}"
        let v656 : unit = ()
        let v657 : (unit -> unit) = closure10(v642, v653)
        let v658 : unit = (fun () -> v657 (); v656) ()
        let v661 : string = " = "
        let v662 : string = $"{v661}"
        let v665 : unit = ()
        let v666 : (unit -> unit) = closure10(v642, v662)
        let v667 : unit = (fun () -> v666 (); v665) ()
        let v670 : string = $"{v2}"
        let v673 : unit = ()
        let v674 : (unit -> unit) = closure10(v642, v670)
        let v675 : unit = (fun () -> v674 (); v673) ()
        let v678 : string = "; "
        let v679 : string = $"{v678}"
        let v682 : unit = ()
        let v683 : (unit -> unit) = closure10(v642, v679)
        let v684 : unit = (fun () -> v683 (); v682) ()
        let v687 : string = "cargo_result"
        let v688 : string = $"{v687}"
        let v691 : unit = ()
        let v692 : (unit -> unit) = closure10(v642, v688)
        let v693 : unit = (fun () -> v692 (); v691) ()
        let v696 : string = $"{v661}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v642, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = $"{v1}"
        let v707 : unit = ()
        let v708 : (unit -> unit) = closure10(v642, v704)
        let v709 : unit = (fun () -> v708 (); v707) ()
        let v712 : string = $"{v678}"
        let v715 : unit = ()
        let v716 : (unit -> unit) = closure10(v642, v712)
        let v717 : unit = (fun () -> v716 (); v715) ()
        let v720 : string = "new_code_path"
        let v721 : string = $"{v720}"
        let v724 : unit = ()
        let v725 : (unit -> unit) = closure10(v642, v721)
        let v726 : unit = (fun () -> v725 (); v724) ()
        let v729 : string = $"{v661}"
        let v732 : unit = ()
        let v733 : (unit -> unit) = closure10(v642, v729)
        let v734 : unit = (fun () -> v733 (); v732) ()
        let v737 : string = $"{v0}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure10(v642, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = $"{v678}"
        let v748 : unit = ()
        let v749 : (unit -> unit) = closure10(v642, v745)
        let v750 : unit = (fun () -> v749 (); v748) ()
        let v753 : string = "wasm_path"
        let v754 : string = $"{v753}"
        let v757 : unit = ()
        let v758 : (unit -> unit) = closure10(v642, v754)
        let v759 : unit = (fun () -> v758 (); v757) ()
        let v762 : string = $"{v661}"
        let v765 : unit = ()
        let v766 : (unit -> unit) = closure10(v642, v762)
        let v767 : unit = (fun () -> v766 (); v765) ()
        let v770 : string = $"{v3}"
        let v773 : unit = ()
        let v774 : (unit -> unit) = closure10(v642, v770)
        let v775 : unit = (fun () -> v774 (); v773) ()
        let v778 : string = $"{v678}"
        let v781 : unit = ()
        let v782 : (unit -> unit) = closure10(v642, v778)
        let v783 : unit = (fun () -> v782 (); v781) ()
        let v786 : string = "command"
        let v787 : string = $"{v786}"
        let v790 : unit = ()
        let v791 : (unit -> unit) = closure10(v642, v787)
        let v792 : unit = (fun () -> v791 (); v790) ()
        let v795 : string = $"{v661}"
        let v798 : unit = ()
        let v799 : (unit -> unit) = closure10(v642, v795)
        let v800 : unit = (fun () -> v799 (); v798) ()
        let v803 : string = $"{v4}"
        let v806 : unit = ()
        let v807 : (unit -> unit) = closure10(v642, v803)
        let v808 : unit = (fun () -> v807 (); v806) ()
        let v811 : string = " }"
        let v812 : string = $"{v811}"
        let v815 : unit = ()
        let v816 : (unit -> unit) = closure10(v642, v812)
        let v817 : unit = (fun () -> v816 (); v815) ()
        let v820 : string = v642.l0
        let v821 : string = "spiral_builder.process_rust / error"
        let v822 : string = $"{v499} {v634} #{v640} %s{v821} / {v820}"
        let v825 : char list = []
        let v826 : (char list -> (char [])) = List.toArray
        let v827 : (char []) = v826 v825
        let v830 : string = v822.TrimStart v827 
        let v848 : char list = []
        let v849 : char list = '/' :: v848 
        let v852 : char list = ' ' :: v849 
        let v855 : (char list -> (char [])) = List.toArray
        let v856 : (char []) = v855 v852
        let v859 : string = v830.TrimEnd v856 
        let v877 : (string -> unit) = closure11()
        let v878 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v879 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v859 v879 
        let _v878 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v880 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v859 v880 
        let _v878 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v881 : string = v24.l0
        let v882 : bool = v881 = ""
        let v890 : string =
            if v882 then
                v859
            else
                let v883 : bool = v859 = ""
                if v883 then
                    let v884 : string = v24.l0
                    v884
                else
                    let v885 : string = v24.l0
                    let v886 : string = "\n"
                    let v887 : string = v885 + v886 
                    let v888 : string = v887 + v859 
                    v888
        let v891 : string = "&*$0"
        let v892 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v890 v891 
        let v893 : string = $"$0.chars()"
        let v894 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v892 v893 
        let v895 : string = "v894"
        let v896 : _ = Fable.Core.RustInterop.emitRustExpr () v895 
        let v897 : string = "v896.collect::<Vec<_>>()"
        let v898 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v897 
        let v899 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v900 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v898 v899 
        let v901 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v902 : bool = Fable.Core.RustInterop.emitRustExpr v900 v901 
        let v903 : string = "x"
        let v904 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v903 
        let v905 : string = "String::from_iter($0)"
        let v906 : std_string_String = Fable.Core.RustInterop.emitRustExpr v904 v905 
        let v907 : string = "true; $0 }).collect::<Vec<_>>()"
        let v908 : bool = Fable.Core.RustInterop.emitRustExpr v906 v907 
        let v909 : string = "_vec_map"
        let v910 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v909 
        let v911 : string = "$0.len()"
        let v912 : unativeint = Fable.Core.RustInterop.emitRustExpr v910 v911 
        let v913 : (unativeint -> int32) = int32
        let v914 : int32 = v913 v912
        let v915 : string = ""
        let v916 : bool = v859 <> v915 
        let v920 : bool =
            if v916 then
                let v919 : bool = v914 <= 1
                v919
            else
                false
        if v920 then
            v24.l0 <- v890
            ()
        else
            v24.l0 <- v915
            let v921 : string = "true; $0.into_iter().for_each(|x| { //"
            let v922 : bool = Fable.Core.RustInterop.emitRustExpr v910 v921 
            let v923 : string = "x"
            let v924 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v923 
            let v925 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v924 v925 
            let v926 : string = $"true;"
            let v927 : bool = Fable.Core.RustInterop.emitRustExpr () v926 
            let v928 : string = "true; }}); { //"
            let v929 : bool = Fable.Core.RustInterop.emitRustExpr () v928 
            ()
        let _v878 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v877 v859
        let _v878 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v877 v859
        let _v878 = () 
        #endif
#else
        v877 v859
        let _v878 = () 
        #endif
        _v878 
        let v930 : (string -> unit) = v22.l0
        v930 v859
and closure95 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure2()
    let v13 : unit = (fun () -> v12 (); v11) ()
    let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
    let v45 : unit = ()
    let v46 : unit = (fun () -> v12 (); v45) ()
    let struct (v60 : Mut0, v61 : Mut1, v62 : Mut2, v63 : Mut3, v64 : Mut4, v65 : int64 option) = TraceState.trace_state.Value
    let v78 : US0 = v64.l0
    let v79 : bool = v62.l0
    let v80 : bool = v79 = false
    let v83 : bool =
        if v80 then
            false
        else
            let v81 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v78
            let v82 : bool = 0 >= v81
            v82
    if v83 then
        let v84 : unit = ()
        let v85 : (unit -> unit) = closure7(v27)
        let v86 : unit = (fun () -> v85 (); v84) ()
        let v89 : unit = ()
        let v90 : unit = (fun () -> v12 (); v89) ()
        let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
        let v122 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v123 : US3 option = None
        let _v123 = ref v123 
        let v124 : US3 option ref = _v123 
        let v125 : (US3 option -> US3 option ref) = closure8(v124)
        let v126 : unit = ()
        let v127 : (unit -> unit) = closure9(v109, v125)
        let v128 : unit = (fun () -> v127 (); v126) ()
        let v131 : US3 option = _v123.Value 
        let v142 : US3 = US3_1
        let v143 : US3 = v131 |> Option.defaultValue v142 
        let v183 : System.DateTime =
            match v143 with
            | US3_1 -> (* None *)
                let v179 : System.DateTime = System.DateTime.Now
                v179
            | US3_0(v147) -> (* Some *)
                let v148 : System.DateTime = System.DateTime.Now
                let v151 : (System.DateTime -> int64) = _.Ticks
                let v152 : int64 = v151 v148
                let v155 : int64 = v152 - v147
                let v156 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v157 : System.TimeSpan = v156 v155
                let v160 : (System.TimeSpan -> int32) = _.Hours
                let v161 : int32 = v160 v157
                let v164 : (System.TimeSpan -> int32) = _.Minutes
                let v165 : int32 = v164 v157
                let v168 : (System.TimeSpan -> int32) = _.Seconds
                let v169 : int32 = v168 v157
                let v172 : (System.TimeSpan -> int32) = _.Milliseconds
                let v173 : int32 = v172 v157
                let v176 : System.DateTime = System.DateTime (1, 1, 1, v161, v165, v169, v173)
                v176
        let v184 : string = method6()
        let v187 : (string -> string) = v183.ToString
        let v188 : string = v187 v184
        let _v122 = v188 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v191 : US3 option = None
        let _v191 = ref v191 
        let v192 : US3 option ref = _v191 
        let v193 : (US3 option -> US3 option ref) = closure8(v192)
        let v194 : unit = ()
        let v195 : (unit -> unit) = closure9(v109, v193)
        let v196 : unit = (fun () -> v195 (); v194) ()
        let v199 : US3 option = _v191.Value 
        let v210 : US3 = US3_1
        let v211 : US3 = v199 |> Option.defaultValue v210 
        let v251 : System.DateTime =
            match v211 with
            | US3_1 -> (* None *)
                let v247 : System.DateTime = System.DateTime.Now
                v247
            | US3_0(v215) -> (* Some *)
                let v216 : System.DateTime = System.DateTime.Now
                let v219 : (System.DateTime -> int64) = _.Ticks
                let v220 : int64 = v219 v216
                let v223 : int64 = v220 - v215
                let v224 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v225 : System.TimeSpan = v224 v223
                let v228 : (System.TimeSpan -> int32) = _.Hours
                let v229 : int32 = v228 v225
                let v232 : (System.TimeSpan -> int32) = _.Minutes
                let v233 : int32 = v232 v225
                let v236 : (System.TimeSpan -> int32) = _.Seconds
                let v237 : int32 = v236 v225
                let v240 : (System.TimeSpan -> int32) = _.Milliseconds
                let v241 : int32 = v240 v225
                let v244 : System.DateTime = System.DateTime (1, 1, 1, v229, v233, v237, v241)
                v244
        let v252 : string = method6()
        let v255 : (string -> string) = v251.ToString
        let v256 : string = v255 v252
        let _v122 = v256 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v259 : string = $"near_sdk::env::block_timestamp()"
        let v260 : uint64 = Fable.Core.RustInterop.emitRustExpr () v259 
        let v261 : US3 option = None
        let _v261 = ref v261 
        let v262 : US3 option ref = _v261 
        let v263 : (US3 option -> US3 option ref) = closure8(v262)
        let v264 : unit = ()
        let v265 : (unit -> unit) = closure9(v109, v263)
        let v266 : unit = (fun () -> v265 (); v264) ()
        let v269 : US3 option = _v261.Value 
        let v280 : US3 = US3_1
        let v281 : US3 = v269 |> Option.defaultValue v280 
        let v290 : uint64 =
            match v281 with
            | US3_1 -> (* None *)
                v260
            | US3_0(v285) -> (* Some *)
                let v286 : (int64 -> uint64) = uint64
                let v287 : uint64 = v286 v285
                let v288 : uint64 = v260 - v287
                v288
        let v291 : uint64 = v290 / 1000000000UL
        let v292 : uint64 = v291 % 60UL
        let v293 : uint64 = v291 / 60UL
        let v294 : uint64 = v293 % 60UL
        let v295 : uint64 = v291 / 3600UL
        let v296 : uint64 = v295 % 24UL
        let v297 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v298 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v296, v294, v292) v297 
        let v299 : string = "fable_library_rust::String_::fromString($0)"
        let v300 : string = Fable.Core.RustInterop.emitRustExpr v298 v299 
        let _v122 = v300 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v301 : US3 option = None
        let _v301 = ref v301 
        let v302 : US3 option ref = _v301 
        let v303 : (US3 option -> US3 option ref) = closure8(v302)
        let v304 : unit = ()
        let v305 : (unit -> unit) = closure9(v109, v303)
        let v306 : unit = (fun () -> v305 (); v304) ()
        let v309 : US3 option = _v301.Value 
        let v320 : US3 = US3_1
        let v321 : US3 = v309 |> Option.defaultValue v320 
        let v361 : System.DateTime =
            match v321 with
            | US3_1 -> (* None *)
                let v357 : System.DateTime = System.DateTime.Now
                v357
            | US3_0(v325) -> (* Some *)
                let v326 : System.DateTime = System.DateTime.Now
                let v329 : (System.DateTime -> int64) = _.Ticks
                let v330 : int64 = v329 v326
                let v333 : int64 = v330 - v325
                let v334 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v335 : System.TimeSpan = v334 v333
                let v338 : (System.TimeSpan -> int32) = _.Hours
                let v339 : int32 = v338 v335
                let v342 : (System.TimeSpan -> int32) = _.Minutes
                let v343 : int32 = v342 v335
                let v346 : (System.TimeSpan -> int32) = _.Seconds
                let v347 : int32 = v346 v335
                let v350 : (System.TimeSpan -> int32) = _.Milliseconds
                let v351 : int32 = v350 v335
                let v354 : System.DateTime = System.DateTime (1, 1, 1, v339, v343, v347, v351)
                v354
        let v362 : string = method7()
        let v365 : (string -> string) = v361.ToString
        let v366 : string = v365 v362
        let _v122 = v366 
        #endif
#if FABLE_COMPILER_PYTHON
        let v369 : US3 option = None
        let _v369 = ref v369 
        let v370 : US3 option ref = _v369 
        let v371 : (US3 option -> US3 option ref) = closure8(v370)
        let v372 : unit = ()
        let v373 : (unit -> unit) = closure9(v109, v371)
        let v374 : unit = (fun () -> v373 (); v372) ()
        let v377 : US3 option = _v369.Value 
        let v388 : US3 = US3_1
        let v389 : US3 = v377 |> Option.defaultValue v388 
        let v429 : System.DateTime =
            match v389 with
            | US3_1 -> (* None *)
                let v425 : System.DateTime = System.DateTime.Now
                v425
            | US3_0(v393) -> (* Some *)
                let v394 : System.DateTime = System.DateTime.Now
                let v397 : (System.DateTime -> int64) = _.Ticks
                let v398 : int64 = v397 v394
                let v401 : int64 = v398 - v393
                let v402 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v403 : System.TimeSpan = v402 v401
                let v406 : (System.TimeSpan -> int32) = _.Hours
                let v407 : int32 = v406 v403
                let v410 : (System.TimeSpan -> int32) = _.Minutes
                let v411 : int32 = v410 v403
                let v414 : (System.TimeSpan -> int32) = _.Seconds
                let v415 : int32 = v414 v403
                let v418 : (System.TimeSpan -> int32) = _.Milliseconds
                let v419 : int32 = v418 v403
                let v422 : System.DateTime = System.DateTime (1, 1, 1, v407, v411, v415, v419)
                v422
        let v430 : string = method7()
        let v433 : (string -> string) = v429.ToString
        let v434 : string = v433 v430
        let _v122 = v434 
        #endif
#else
        let v437 : US3 option = None
        let _v437 = ref v437 
        let v438 : US3 option ref = _v437 
        let v439 : (US3 option -> US3 option ref) = closure8(v438)
        let v440 : unit = ()
        let v441 : (unit -> unit) = closure9(v109, v439)
        let v442 : unit = (fun () -> v441 (); v440) ()
        let v445 : US3 option = _v437.Value 
        let v456 : US3 = US3_1
        let v457 : US3 = v445 |> Option.defaultValue v456 
        let v497 : System.DateTime =
            match v457 with
            | US3_1 -> (* None *)
                let v493 : System.DateTime = System.DateTime.Now
                v493
            | US3_0(v461) -> (* Some *)
                let v462 : System.DateTime = System.DateTime.Now
                let v465 : (System.DateTime -> int64) = _.Ticks
                let v466 : int64 = v465 v462
                let v469 : int64 = v466 - v461
                let v470 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v471 : System.TimeSpan = v470 v469
                let v474 : (System.TimeSpan -> int32) = _.Hours
                let v475 : int32 = v474 v471
                let v478 : (System.TimeSpan -> int32) = _.Minutes
                let v479 : int32 = v478 v471
                let v482 : (System.TimeSpan -> int32) = _.Seconds
                let v483 : int32 = v482 v471
                let v486 : (System.TimeSpan -> int32) = _.Milliseconds
                let v487 : int32 = v486 v471
                let v490 : System.DateTime = System.DateTime (1, 1, 1, v475, v479, v483, v487)
                v490
        let v498 : string = method7()
        let v501 : (string -> string) = v497.ToString
        let v502 : string = v501 v498
        let _v122 = v502 
        #endif
        let v505 : string = _v122 
        
        
        
        
        
        let v575 : string = "Verbose"
        let v576 : (unit -> string) = v575.ToLower
        let v577 : string = v576 ()
        let v580 : string = v577.PadLeft (7, ' ')
        let v594 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v580 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v594 = v605 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v606 : string = "inline_colorization::color_bright_black"
        let v607 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "&*$0"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v580 v608 
        let v610 : string = "inline_colorization::color_reset"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "\"{v607}{v609}{v611}\""
        let v613 : string = @$"format!(" + v612 + ")"
        let v614 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "fable_library_rust::String_::fromString($0)"
        let v616 : string = Fable.Core.RustInterop.emitRustExpr v614 v615 
        let _v594 = v616 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v617 : string = "inline_colorization::color_bright_black"
        let v618 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "&*$0"
        let v620 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v580 v619 
        let v621 : string = "inline_colorization::color_reset"
        let v622 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v621 
        let v623 : string = "\"{v618}{v620}{v622}\""
        let v624 : string = @$"format!(" + v623 + ")"
        let v625 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v624 
        let v626 : string = "fable_library_rust::String_::fromString($0)"
        let v627 : string = Fable.Core.RustInterop.emitRustExpr v625 v626 
        let _v594 = v627 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v628 : string = "\u001b[90m"
        let v629 : string = method8()
        let v630 : string = v628 + v580 
        let v631 : string = v630 + v629 
        let _v594 = v631 
        #endif
#if FABLE_COMPILER_PYTHON
        let v632 : string = "\u001b[90m"
        let v633 : string = method8()
        let v634 : string = v632 + v580 
        let v635 : string = v634 + v633 
        let _v594 = v635 
        #endif
#else
        let v636 : string = "\u001b[90m"
        let v637 : string = method8()
        let v638 : string = v636 + v580 
        let v639 : string = v638 + v637 
        let _v594 = v639 
        #endif
        let v640 : string = _v594 
        let v646 : int64 = v104.l0
        let v647 : string = method9()
        let v648 : Mut3 = {l0 = v647} : Mut3
        let v649 : string = "{ "
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v648, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = "new_code_path"
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure10(v648, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = " = "
        let v668 : string = $"{v667}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure10(v648, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = $"{v0}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure10(v648, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "; "
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure10(v648, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = "cleanup"
        let v694 : string = $"{v693}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v648, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v667}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v648, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : UH4 = UH4_0
        let v711 : UH4 = UH4_1(v9, v10, v710)
        let v712 : UH4 = UH4_1(v7, v8, v711)
        let v713 : UH4 = UH4_1(v5, v6, v712)
        let v714 : UH4 = UH4_1(v3, v4, v713)
        let v715 : UH4 = UH4_1(v1, v2, v714)
        let v716 : string = $"%A{v715}"
        let v725 : string = $"{v716}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure10(v648, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = " }"
        let v734 : string = $"{v733}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure10(v648, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = v648.l0
        let v743 : string = "spiral_builder.process_rust / cleanup"
        let v744 : string = $"{v505} {v640} #{v646} %s{v743} / {v742}"
        let v747 : char list = []
        let v748 : (char list -> (char [])) = List.toArray
        let v749 : (char []) = v748 v747
        let v752 : string = v744.TrimStart v749 
        let v770 : char list = []
        let v771 : char list = '/' :: v770 
        let v774 : char list = ' ' :: v771 
        let v777 : (char list -> (char [])) = List.toArray
        let v778 : (char []) = v777 v774
        let v781 : string = v752.TrimEnd v778 
        let v799 : (string -> unit) = closure11()
        let v800 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v801 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v781 v801 
        let _v800 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v802 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v781 v802 
        let _v800 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v803 : string = v30.l0
        let v804 : bool = v803 = ""
        let v812 : string =
            if v804 then
                v781
            else
                let v805 : bool = v781 = ""
                if v805 then
                    let v806 : string = v30.l0
                    v806
                else
                    let v807 : string = v30.l0
                    let v808 : string = "\n"
                    let v809 : string = v807 + v808 
                    let v810 : string = v809 + v781 
                    v810
        let v813 : string = "&*$0"
        let v814 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v812 v813 
        let v815 : string = $"$0.chars()"
        let v816 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = "v816"
        let v818 : _ = Fable.Core.RustInterop.emitRustExpr () v817 
        let v819 : string = "v818.collect::<Vec<_>>()"
        let v820 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v822 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v820 v821 
        let v823 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v824 : bool = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "x"
        let v826 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v825 
        let v827 : string = "String::from_iter($0)"
        let v828 : std_string_String = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "true; $0 }).collect::<Vec<_>>()"
        let v830 : bool = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "_vec_map"
        let v832 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.len()"
        let v834 : unativeint = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : (unativeint -> int32) = int32
        let v836 : int32 = v835 v834
        let v837 : string = ""
        let v838 : bool = v781 <> v837 
        let v842 : bool =
            if v838 then
                let v841 : bool = v836 <= 1
                v841
            else
                false
        if v842 then
            v30.l0 <- v812
            ()
        else
            v30.l0 <- v837
            let v843 : string = "true; $0.into_iter().for_each(|x| { //"
            let v844 : bool = Fable.Core.RustInterop.emitRustExpr v832 v843 
            let v845 : string = "x"
            let v846 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v845 
            let v847 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v846 v847 
            let v848 : string = $"true;"
            let v849 : bool = Fable.Core.RustInterop.emitRustExpr () v848 
            let v850 : string = "true; }}); { //"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            ()
        let _v800 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v799 v781
        let _v800 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v799 v781
        let _v800 = () 
        #endif
#else
        v799 v781
        let _v800 = () 
        #endif
        _v800 
        let v852 : (string -> unit) = v28.l0
        v852 v781
and method108 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        let v4 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0).unwrap()"
        Fable.Core.RustInterop.emitRustExpr v1 v5 
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v4 = () 
        #endif
#else
        let v6 : (string -> unit) = System.IO.File.Delete
        v6 v1
        let _v4 = () 
        #endif
        _v4 
        method108(v3)
    | UH4_0 -> (* Nil *)
        ()
and method109 (v0 : async_walkdir_DirEntry) : async_walkdir_DirEntry =
    v0
and closure97 () (v0 : std_fs_FileType) : US39 =
    US39_0(v0)
and closure98 () (v0 : std_string_String) : US39 =
    US39_1(v0)
and method110 (v0 : std_fs_FileType) : std_fs_FileType =
    v0
and method111 (v0 : US40) : US40 =
    v0
and method112 (v0 : async_walkdir_Filtering) : async_walkdir_Filtering =
    v0
and closure96 () (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v1 : string = "true; let __future_init = Box::pin(async { //"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "true; let __future_init = Box::pin(async move { //"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : async_walkdir_DirEntry = method109(v0)
    let v6 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v5))"
    let v7 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "v7.await"
    let v9 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : (std_io_Error -> std_string_String) = method30()
    let v11 : string = "$0.map_err(|x| $1(x))"
    let v12 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v11 
    let v13 : (std_fs_FileType -> US39) = closure97()
    let v14 : (std_string_String -> US39) = closure98()
    let v15 : US39 = match v12 with Ok x -> v13 x | Error x -> v14 x
    let v93 : US40 =
        match v15 with
        | US39_0(v16) -> (* Ok *)
            let v17 : std_fs_FileType = method110(v16)
            let v18 : string = "std::fs::FileType::is_dir(&v17)"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr () v18 
            let v20 : bool = v19 = false
            if v20 then
                US40_0
            else
                let v22 : string = "async_walkdir::DirEntry::path(&$0)"
                let v23 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v0 v22 
                let v24 : string = "$0.display()"
                let v25 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v23 v24 
                let v26 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v27 : string = "format!(\"{}\", $0)"
                let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v27 
                let _v26 = v28 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v29 : string = "format!(\"{}\", $0)"
                let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v29 
                let _v26 = v30 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v31 : string = "format!(\"{}\", $0)"
                let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v31 
                let _v26 = v32 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v33 : std_string_String = null |> unbox<std_string_String>
                let _v26 = v33 
                #endif
#if FABLE_COMPILER_PYTHON
                let v36 : std_string_String = null |> unbox<std_string_String>
                let _v26 = v36 
                #endif
#else
                let v39 : std_string_String = null |> unbox<std_string_String>
                let _v26 = v39 
                #endif
                let v42 : std_string_String = _v26 
                let v47 : string = "fable_library_rust::String_::fromString($0)"
                let v48 : string = Fable.Core.RustInterop.emitRustExpr v42 v47 
                let v49 : string = method24(v48)
                let v50 : string = "fable-library-ts."
                let v51 : bool = v49.StartsWith v50 
                if v51 then
                    US40_2
                else
                    US40_1
        | _ ->
            let v58 : string = "async_walkdir::DirEntry::path(&$0)"
            let v59 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v0 v58 
            let v60 : string = "$0.display()"
            let v61 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v59 v60 
            let v62 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v63 : string = "format!(\"{}\", $0)"
            let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v61 v63 
            let _v62 = v64 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v65 : string = "format!(\"{}\", $0)"
            let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v61 v65 
            let _v62 = v66 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v67 : string = "format!(\"{}\", $0)"
            let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v61 v67 
            let _v62 = v68 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v69 : std_string_String = null |> unbox<std_string_String>
            let _v62 = v69 
            #endif
#if FABLE_COMPILER_PYTHON
            let v72 : std_string_String = null |> unbox<std_string_String>
            let _v62 = v72 
            #endif
#else
            let v75 : std_string_String = null |> unbox<std_string_String>
            let _v62 = v75 
            #endif
            let v78 : std_string_String = _v62 
            let v83 : string = "fable_library_rust::String_::fromString($0)"
            let v84 : string = Fable.Core.RustInterop.emitRustExpr v78 v83 
            let v85 : string = method24(v84)
            let v86 : string = "fable-library-ts."
            let v87 : bool = v85.StartsWith v86 
            if v87 then
                US40_2
            else
                US40_1
    let v94 : US40 = method111(v93)
    let v95 : string = ""
    let v96 : string = "}"
    let v97 : string = v95 + v96 
    let v98 : string = "true; v94 " + v97 + "); " + v95 + " // rust.fix_closure'"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = "__future_init"
    let v101 : _ = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "v101"
    let v103 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US40>>, Send<Dyn<std_future_Future<US40>>>>>> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : string = "v103.await"
    let v105 : US40 = Fable.Core.RustInterop.emitRustExpr () v104 
    let v114 : async_walkdir_Filtering =
        match v105 with
        | US40_2 -> (* Continue *)
            let v110 : string = "async_walkdir::Filtering::Continue"
            let v111 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v110 
            v111
        | US40_0 -> (* Ignore *)
            let v106 : string = "async_walkdir::Filtering::Ignore"
            let v107 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v106 
            v107
        | US40_1 -> (* IgnoreDir *)
            let v108 : string = "async_walkdir::Filtering::IgnoreDir"
            let v109 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v108 
            v109
    let v115 : async_walkdir_Filtering = method112(v114)
    let v116 : string = v95 + v96 
    let v117 : string = "true; v115 " + v116 + "); " + v95 + " // rust.fix_closure'"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr () v117 
    let v119 : string = "__future_init"
    let v120 : _ = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : string = "v120"
    let v122 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v121 
    v122
and closure100 () (v0 : async_walkdir_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method114 () : (async_walkdir_Error -> std_string_String) =
    closure100()
and closure101 () (v0 : async_walkdir_DirEntry) : US41 =
    US41_0(v0)
and closure102 () (v0 : std_string_String) : US41 =
    US41_1(v0)
and closure103 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "error"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v667 : string = "format!(\"{:#?}\", $0)"
        let v668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v667 
        let v669 : string = "fable_library_rust::String_::fromString($0)"
        let v670 : string = Fable.Core.RustInterop.emitRustExpr v668 v669 
        let _v666 = v670 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v671 : string = "format!(\"{:#?}\", $0)"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v666 = v674 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v675 : string = "format!(\"{:#?}\", $0)"
        let v676 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v675 
        let v677 : string = "fable_library_rust::String_::fromString($0)"
        let v678 : string = Fable.Core.RustInterop.emitRustExpr v676 v677 
        let _v666 = v678 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v679 : string = $"%A{v0}"
        let _v666 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = $"%A{v0}"
        let _v666 = v682 
        #endif
#else
        let v685 : string = $"%A{v0}"
        let _v666 = v685 
        #endif
        let v688 : string = _v666 
        let v693 : string = $"{v688}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v638, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = " }"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v638, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = v638.l0
        let v711 : string = "spiral_builder.process_typescript / stream_filter_map"
        let v712 : bool = v711 = ""
        let v769 : string =
            if v712 then
                let v713 : string = ""
                v713
            else
                let v714 : string = $"{v495} {v630} #{v636} %s{v711} / {v710}"
                let v717 : char list = []
                let v718 : (char list -> (char [])) = List.toArray
                let v719 : (char []) = v718 v717
                let v722 : string = v714.TrimStart v719 
                let v740 : char list = []
                let v741 : char list = '/' :: v740 
                let v744 : char list = ' ' :: v741 
                let v747 : (char list -> (char [])) = List.toArray
                let v748 : (char []) = v747 v744
                let v751 : string = v722.TrimEnd v748 
                v751
        let v770 : (string -> unit) = closure11()
        let v771 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v772 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v772 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v773 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v769 v773 
        let _v771 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v774 : string = v20.l0
        let v775 : bool = v774 = ""
        let v783 : string =
            if v775 then
                v769
            else
                let v776 : bool = v769 = ""
                if v776 then
                    let v777 : string = v20.l0
                    v777
                else
                    let v778 : string = v20.l0
                    let v779 : string = "\n"
                    let v780 : string = v778 + v779 
                    let v781 : string = v780 + v769 
                    v781
        let v784 : string = "&*$0"
        let v785 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v783 v784 
        let v786 : string = $"$0.chars()"
        let v787 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v785 v786 
        let v788 : string = "v787"
        let v789 : _ = Fable.Core.RustInterop.emitRustExpr () v788 
        let v790 : string = "v789.collect::<Vec<_>>()"
        let v791 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v793 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let v794 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v795 : bool = Fable.Core.RustInterop.emitRustExpr v793 v794 
        let v796 : string = "x"
        let v797 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v796 
        let v798 : string = "String::from_iter($0)"
        let v799 : std_string_String = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "true; $0 }).collect::<Vec<_>>()"
        let v801 : bool = Fable.Core.RustInterop.emitRustExpr v799 v800 
        let v802 : string = "_vec_map"
        let v803 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v802 
        let v804 : string = "$0.len()"
        let v805 : unativeint = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : (unativeint -> int32) = int32
        let v807 : int32 = v806 v805
        let v808 : string = ""
        let v809 : bool = v769 <> v808 
        let v813 : bool =
            if v809 then
                let v812 : bool = v807 <= 1
                v812
            else
                false
        if v813 then
            v20.l0 <- v783
            ()
        else
            v20.l0 <- v808
            let v814 : string = "true; $0.into_iter().for_each(|x| { //"
            let v815 : bool = Fable.Core.RustInterop.emitRustExpr v803 v814 
            let v816 : string = "x"
            let v817 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v817 v818 
            let v819 : string = $"true;"
            let v820 : bool = Fable.Core.RustInterop.emitRustExpr () v819 
            let v821 : string = "true; }}); { //"
            let v822 : bool = Fable.Core.RustInterop.emitRustExpr () v821 
            ()
        let _v771 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v770 v769
        let _v771 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v770 v769
        let _v771 = () 
        #endif
#else
        v770 v769
        let _v771 = () 
        #endif
        _v771 
        let v823 : (string -> unit) = v18.l0
        v823 v769
and closure99 () (v0 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v1 : (async_walkdir_Error -> std_string_String) = method114()
    let v2 : string = "$0.map_err(|x| $1(x))"
    let v3 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v2 
    let v4 : (async_walkdir_DirEntry -> US41) = closure101()
    let v5 : (std_string_String -> US41) = closure102()
    let v6 : US41 = match v3 with Ok x -> v4 x | Error x -> v5 x
    let v984 : US42 =
        match v6 with
        | US41_1(v155) -> (* Error *)
            let v156 : unit = ()
            let v157 : (unit -> unit) = closure103(v155)
            let v158 : unit = (fun () -> v157 (); v156) ()
            US42_1
        | US41_0(v7) -> (* Ok *)
            let v8 : string = "async_walkdir::DirEntry::path(&$0)"
            let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
            let v10 : string = "$0.display()"
            let v11 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v9 v10 
            let v12 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v13 : string = "format!(\"{}\", $0)"
            let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v13 
            let _v12 = v14 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v15 : string = "format!(\"{}\", $0)"
            let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v15 
            let _v12 = v16 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v17 : string = "format!(\"{}\", $0)"
            let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v17 
            let _v12 = v18 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v19 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v19 
            #endif
#if FABLE_COMPILER_PYTHON
            let v22 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v22 
            #endif
#else
            let v25 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v25 
            #endif
            let v28 : std_string_String = _v12 
            let v33 : string = "fable_library_rust::String_::fromString($0)"
            let v34 : string = Fable.Core.RustInterop.emitRustExpr v28 v33 
            let v35 : string = "ts"
            let v36 : string = $"fable-library-{v35}\.(?<a>[\d.]+)$"
            let v37 : string = $"regex::Regex::new(&$0)"
            let v38 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v36 v37 
            let v39 : string = "$0.unwrap()"
            let v40 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let v41 : string = "&*$0"
            let v42 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v34 v41 
            let v43 : string = "String::from($0)"
            let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : string = "true; let _capture_move = (move || { //"
            let v46 : bool = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "Box::new($0)"
            let v48 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v44 v47 
            let v49 : string = "Box::leak($0)"
            let v50 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v48 v49 
            let v51 : string = $"v40.captures_iter(v50)"
            let v52 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v51 
            let v53 : string = "true; let _regex_captures : Vec<_> = v52.map(|x| { //"
            let v54 : bool = Fable.Core.RustInterop.emitRustExpr () v53 
            let v55 : string = $"x"
            let v56 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v55 
            let v57 : string = "Box::new($0)"
            let v58 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let v59 : string = "Box::leak($0)"
            let v60 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v58 v59 
            let v61 : string = $"$0.capture_names()"
            let v62 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v40 v61 
            let v63 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v62.map(|x| { //"
            let v64 : bool = Fable.Core.RustInterop.emitRustExpr () v63 
            let v65 : string = "x.unwrap_or(\"\").to_string().into()"
            let v66 : string = Fable.Core.RustInterop.emitRustExpr () v65 
            let v67 : string = "$0.clone()"
            let v68 : string = Fable.Core.RustInterop.emitRustExpr v66 v67 
            let v69 : string = $"v60.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v70 : string = Fable.Core.RustInterop.emitRustExpr v66 v69 
            let v71 : (string * string) = v68, v70 
            let v72 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v73 : bool = Fable.Core.RustInterop.emitRustExpr v71 v72 
            let v74 : string = "_regex_captures"
            let v75 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v74 
            let v76 : string = "true; $0 }).collect::<Vec<_>>()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
            let v78 : string = "_regex_captures"
            let v79 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v78 
            let v80 : string = "true; $0 })()"
            let v81 : bool = Fable.Core.RustInterop.emitRustExpr v79 v80 
            let v82 : string = "_capture_move"
            let v83 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v82 
            let v84 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v85 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v83 v84 
            let v86 : std_collections_HashMap<string, string> option = v85 |> Array.tryItem 0 
            let v87 : US37 option = None
            let _v87 = ref v87 
            let v88 : US37 option ref = _v87 
            let v89 : (US37 option -> US37 option ref) = closure84(v88)
            let v90 : unit = ()
            let v91 : (unit -> unit) = closure85(v86, v89)
            let v92 : unit = (fun () -> v91 (); v90) ()
            let v95 : US37 option = _v87.Value 
            let v106 : US37 = US37_1
            let v107 : US37 = v95 |> Option.defaultValue v106 
            let v142 : US38 =
                match v107 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v111) -> (* Some *)
                    let v112 : string = method107()
                    let v113 : string = "std::collections::HashMap::get(&$0, &v112).map(|x| x).cloned()"
                    let v114 : string option = Fable.Core.RustInterop.emitRustExpr v111 v113 
                    let v115 : US1 option = None
                    let _v115 = ref v115 
                    let v116 : US1 option ref = _v115 
                    let v117 : (US1 option -> US1 option ref) = closure3(v116)
                    let v118 : unit = ()
                    let v119 : (unit -> unit) = closure4(v114, v117)
                    let v120 : unit = (fun () -> v119 (); v118) ()
                    let v123 : US1 option = _v115.Value 
                    let v134 : US1 = US1_1
                    let v135 : US1 = v123 |> Option.defaultValue v134 
                    US38_0(v135)
            let v149 : US1 =
                match v142 with
                | US38_0(v143) -> (* Some *)
                    match v143 with
                    | US1_0(v144) -> (* Some *)
                        US1_0(v144)
                    | _ ->
                        US1_1
                | _ ->
                    US1_1
            match v149 with
            | US1_1 -> (* None *)
                US42_1
            | US1_0(v151) -> (* Some *)
                US42_0(v34, v151)
    match v984 with
    | US42_1 -> (* None *)
        let v990 : struct (string * string) option = None
        v990
    | US42_0(v985, v986) -> (* Some *)
        let v987 : struct (string * string) option = Some struct (v985, v986) 
        v987
and method113 () : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure99()
and closure104 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure105 (v0 : US42 option ref) (v1 : US42 option) : US42 option ref =
    v0.Value <- v1 
    v0
and closure106 (v0 : struct (string * string) option, v1 : (US42 option -> US42 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v2 : string, v3 : string) = x
    let v4 : US42 = US42_0(v2, v3)
    v4 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure107 (v0 : US42) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 1 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Debug"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_blue"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[94m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[94m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[94m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "version"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"%A{v0}"
        let v669 : string = $"{v666}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure10(v638, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = " }"
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure10(v638, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = v638.l0
        let v687 : string = "spiral_builder.process_typescript"
        let v688 : bool = v687 = ""
        let v745 : string =
            if v688 then
                let v689 : string = ""
                v689
            else
                let v690 : string = $"{v495} {v630} #{v636} %s{v687} / {v686}"
                let v693 : char list = []
                let v694 : (char list -> (char [])) = List.toArray
                let v695 : (char []) = v694 v693
                let v698 : string = v690.TrimStart v695 
                let v716 : char list = []
                let v717 : char list = '/' :: v716 
                let v720 : char list = ' ' :: v717 
                let v723 : (char list -> (char [])) = List.toArray
                let v724 : (char []) = v723 v720
                let v727 : string = v698.TrimEnd v724 
                v727
        let v746 : (string -> unit) = closure11()
        let v747 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v748 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v748 
        let _v747 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v749 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v749 
        let _v747 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v750 : string = v20.l0
        let v751 : bool = v750 = ""
        let v759 : string =
            if v751 then
                v745
            else
                let v752 : bool = v745 = ""
                if v752 then
                    let v753 : string = v20.l0
                    v753
                else
                    let v754 : string = v20.l0
                    let v755 : string = "\n"
                    let v756 : string = v754 + v755 
                    let v757 : string = v756 + v745 
                    v757
        let v760 : string = "&*$0"
        let v761 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v759 v760 
        let v762 : string = $"$0.chars()"
        let v763 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v761 v762 
        let v764 : string = "v763"
        let v765 : _ = Fable.Core.RustInterop.emitRustExpr () v764 
        let v766 : string = "v765.collect::<Vec<_>>()"
        let v767 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v766 
        let v768 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v769 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v767 v768 
        let v770 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v771 : bool = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let v772 : string = "x"
        let v773 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "String::from_iter($0)"
        let v775 : std_string_String = Fable.Core.RustInterop.emitRustExpr v773 v774 
        let v776 : string = "true; $0 }).collect::<Vec<_>>()"
        let v777 : bool = Fable.Core.RustInterop.emitRustExpr v775 v776 
        let v778 : string = "_vec_map"
        let v779 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v778 
        let v780 : string = "$0.len()"
        let v781 : unativeint = Fable.Core.RustInterop.emitRustExpr v779 v780 
        let v782 : (unativeint -> int32) = int32
        let v783 : int32 = v782 v781
        let v784 : string = ""
        let v785 : bool = v745 <> v784 
        let v789 : bool =
            if v785 then
                let v788 : bool = v783 <= 1
                v788
            else
                false
        if v789 then
            v20.l0 <- v759
            ()
        else
            v20.l0 <- v784
            let v790 : string = "true; $0.into_iter().for_each(|x| { //"
            let v791 : bool = Fable.Core.RustInterop.emitRustExpr v779 v790 
            let v792 : string = "x"
            let v793 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v793 v794 
            let v795 : string = $"true;"
            let v796 : bool = Fable.Core.RustInterop.emitRustExpr () v795 
            let v797 : string = "true; }}); { //"
            let v798 : bool = Fable.Core.RustInterop.emitRustExpr () v797 
            ()
        let _v747 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v746 v745
        let _v747 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v746 v745
        let _v747 = () 
        #endif
#else
        v746 v745
        let _v747 = () 
        #endif
        _v747 
        let v799 : (string -> unit) = v18.l0
        v799 v745
and closure108 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 4 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Critical"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_red"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_red"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_red"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[91m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[91m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[91m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "exit_code"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure10(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v1}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure10(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure10(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "dotnet_fable_result"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure10(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure10(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = " }"
        let v710 : string = $"{v709}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure10(v639, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = v639.l0
        let v719 : string = $"spiral_builder.process_typescript"
        let v720 : bool = v719 = ""
        let v777 : string =
            if v720 then
                let v721 : string = ""
                v721
            else
                let v722 : string = $"{v496} {v631} #{v637} %s{v719} / {v718}"
                let v725 : char list = []
                let v726 : (char list -> (char [])) = List.toArray
                let v727 : (char []) = v726 v725
                let v730 : string = v722.TrimStart v727 
                let v748 : char list = []
                let v749 : char list = '/' :: v748 
                let v752 : char list = ' ' :: v749 
                let v755 : (char list -> (char [])) = List.toArray
                let v756 : (char []) = v755 v752
                let v759 : string = v730.TrimEnd v756 
                v759
        let v778 : (string -> unit) = closure11()
        let v779 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v780 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v777 v780 
        let _v779 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v781 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v777 v781 
        let _v779 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v782 : string = v21.l0
        let v783 : bool = v782 = ""
        let v791 : string =
            if v783 then
                v777
            else
                let v784 : bool = v777 = ""
                if v784 then
                    let v785 : string = v21.l0
                    v785
                else
                    let v786 : string = v21.l0
                    let v787 : string = "\n"
                    let v788 : string = v786 + v787 
                    let v789 : string = v788 + v777 
                    v789
        let v792 : string = "&*$0"
        let v793 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let v794 : string = $"$0.chars()"
        let v795 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v793 v794 
        let v796 : string = "v795"
        let v797 : _ = Fable.Core.RustInterop.emitRustExpr () v796 
        let v798 : string = "v797.collect::<Vec<_>>()"
        let v799 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v798 
        let v800 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v801 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v799 v800 
        let v802 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v803 : bool = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "x"
        let v805 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v804 
        let v806 : string = "String::from_iter($0)"
        let v807 : std_string_String = Fable.Core.RustInterop.emitRustExpr v805 v806 
        let v808 : string = "true; $0 }).collect::<Vec<_>>()"
        let v809 : bool = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : string = "_vec_map"
        let v811 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v810 
        let v812 : string = "$0.len()"
        let v813 : unativeint = Fable.Core.RustInterop.emitRustExpr v811 v812 
        let v814 : (unativeint -> int32) = int32
        let v815 : int32 = v814 v813
        let v816 : string = ""
        let v817 : bool = v777 <> v816 
        let v821 : bool =
            if v817 then
                let v820 : bool = v815 <= 1
                v820
            else
                false
        if v821 then
            v21.l0 <- v791
            ()
        else
            v21.l0 <- v816
            let v822 : string = "true; $0.into_iter().for_each(|x| { //"
            let v823 : bool = Fable.Core.RustInterop.emitRustExpr v811 v822 
            let v824 : string = "x"
            let v825 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v824 
            let v826 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v825 v826 
            let v827 : string = $"true;"
            let v828 : bool = Fable.Core.RustInterop.emitRustExpr () v827 
            let v829 : string = "true; }}); { //"
            let v830 : bool = Fable.Core.RustInterop.emitRustExpr () v829 
            ()
        let _v779 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v778 v777
        let _v779 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v778 v777
        let _v779 = () 
        #endif
#else
        v778 v777
        let _v779 = () 
        #endif
        _v779 
        let v831 : (string -> unit) = v19.l0
        v831 v777
and closure109 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 1 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Debug"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_blue"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[94m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[94m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[94m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "new_code_path"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{v0}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = " }"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure10(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = v638.l0
        let v684 : string = "spiral_builder.process_typescript"
        let v685 : bool = v684 = ""
        let v742 : string =
            if v685 then
                let v686 : string = ""
                v686
            else
                let v687 : string = $"{v495} {v630} #{v636} %s{v684} / {v683}"
                let v690 : char list = []
                let v691 : (char list -> (char [])) = List.toArray
                let v692 : (char []) = v691 v690
                let v695 : string = v687.TrimStart v692 
                let v713 : char list = []
                let v714 : char list = '/' :: v713 
                let v717 : char list = ' ' :: v714 
                let v720 : (char list -> (char [])) = List.toArray
                let v721 : (char []) = v720 v717
                let v724 : string = v695.TrimEnd v721 
                v724
        let v743 : (string -> unit) = closure11()
        let v744 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v745 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v742 v745 
        let _v744 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v746 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v742 v746 
        let _v744 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v747 : string = v20.l0
        let v748 : bool = v747 = ""
        let v756 : string =
            if v748 then
                v742
            else
                let v749 : bool = v742 = ""
                if v749 then
                    let v750 : string = v20.l0
                    v750
                else
                    let v751 : string = v20.l0
                    let v752 : string = "\n"
                    let v753 : string = v751 + v752 
                    let v754 : string = v753 + v742 
                    v754
        let v757 : string = "&*$0"
        let v758 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v756 v757 
        let v759 : string = $"$0.chars()"
        let v760 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v758 v759 
        let v761 : string = "v760"
        let v762 : _ = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "v762.collect::<Vec<_>>()"
        let v764 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v763 
        let v765 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v766 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v764 v765 
        let v767 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v768 : bool = Fable.Core.RustInterop.emitRustExpr v766 v767 
        let v769 : string = "x"
        let v770 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v769 
        let v771 : string = "String::from_iter($0)"
        let v772 : std_string_String = Fable.Core.RustInterop.emitRustExpr v770 v771 
        let v773 : string = "true; $0 }).collect::<Vec<_>>()"
        let v774 : bool = Fable.Core.RustInterop.emitRustExpr v772 v773 
        let v775 : string = "_vec_map"
        let v776 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v775 
        let v777 : string = "$0.len()"
        let v778 : unativeint = Fable.Core.RustInterop.emitRustExpr v776 v777 
        let v779 : (unativeint -> int32) = int32
        let v780 : int32 = v779 v778
        let v781 : string = ""
        let v782 : bool = v742 <> v781 
        let v786 : bool =
            if v782 then
                let v785 : bool = v780 <= 1
                v785
            else
                false
        if v786 then
            v20.l0 <- v756
            ()
        else
            v20.l0 <- v781
            let v787 : string = "true; $0.into_iter().for_each(|x| { //"
            let v788 : bool = Fable.Core.RustInterop.emitRustExpr v776 v787 
            let v789 : string = "x"
            let v790 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v789 
            let v791 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v790 v791 
            let v792 : string = $"true;"
            let v793 : bool = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : string = "true; }}); { //"
            let v795 : bool = Fable.Core.RustInterop.emitRustExpr () v794 
            ()
        let _v744 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v743 v742
        let _v744 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v743 v742
        let _v744 = () 
        #endif
#else
        v743 v742
        let _v744 = () 
        #endif
        _v744 
        let v796 : (string -> unit) = v18.l0
        v796 v742
and method115 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method115(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method116 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method116(v4, v1)
        let v6 : struct (string * string) list = struct (v2, v3) :: v5 
        v6
    | UH5_0 -> (* Nil *)
        v1
and closure110 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : (string -> (string seq -> string)) = String.concat
    let v9 : (string seq -> string) = v8 v1
    v9 v5
and closure112 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "ex"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v670 : string = "format!(\"{:#?}\", $0)"
        let v671 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v670 
        let v672 : string = "fable_library_rust::String_::fromString($0)"
        let v673 : string = Fable.Core.RustInterop.emitRustExpr v671 v672 
        let _v669 = v673 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v674 : string = "format!(\"{:#?}\", $0)"
        let v675 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v674 
        let v676 : string = "fable_library_rust::String_::fromString($0)"
        let v677 : string = Fable.Core.RustInterop.emitRustExpr v675 v676 
        let _v669 = v677 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v678 : string = "format!(\"{:#?}\", $0)"
        let v679 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v678 
        let v680 : string = "fable_library_rust::String_::fromString($0)"
        let v681 : string = Fable.Core.RustInterop.emitRustExpr v679 v680 
        let _v669 = v681 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v682 : string = $"%A{v3}"
        let _v669 = v682 
        #endif
#if FABLE_COMPILER_PYTHON
        let v685 : string = $"%A{v3}"
        let _v669 = v685 
        #endif
#else
        let v688 : string = $"%A{v3}"
        let _v669 = v688 
        #endif
        let v691 : string = _v669 
        let v696 : string = $"{v691}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v641, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "; "
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure10(v641, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = "new_code_path"
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v641, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v660}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v641, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = $"{v0}"
        let v733 : unit = ()
        let v734 : (unit -> unit) = closure10(v641, v730)
        let v735 : unit = (fun () -> v734 (); v733) ()
        let v738 : string = $"{v704}"
        let v741 : unit = ()
        let v742 : (unit -> unit) = closure10(v641, v738)
        let v743 : unit = (fun () -> v742 (); v741) ()
        let v746 : string = "external_command"
        let v747 : string = $"{v746}"
        let v750 : unit = ()
        let v751 : (unit -> unit) = closure10(v641, v747)
        let v752 : unit = (fun () -> v751 (); v750) ()
        let v755 : string = $"{v660}"
        let v758 : unit = ()
        let v759 : (unit -> unit) = closure10(v641, v755)
        let v760 : unit = (fun () -> v759 (); v758) ()
        let v763 : string = $"{v2}"
        let v766 : unit = ()
        let v767 : (unit -> unit) = closure10(v641, v763)
        let v768 : unit = (fun () -> v767 (); v766) ()
        let v771 : string = $"{v704}"
        let v774 : unit = ()
        let v775 : (unit -> unit) = closure10(v641, v771)
        let v776 : unit = (fun () -> v775 (); v774) ()
        let v779 : string = "run_result"
        let v780 : string = $"{v779}"
        let v783 : unit = ()
        let v784 : (unit -> unit) = closure10(v641, v780)
        let v785 : unit = (fun () -> v784 (); v783) ()
        let v788 : string = $"{v660}"
        let v791 : unit = ()
        let v792 : (unit -> unit) = closure10(v641, v788)
        let v793 : unit = (fun () -> v792 (); v791) ()
        let v796 : string = $"{v1}"
        let v799 : unit = ()
        let v800 : (unit -> unit) = closure10(v641, v796)
        let v801 : unit = (fun () -> v800 (); v799) ()
        let v804 : string = " }"
        let v805 : string = $"{v804}"
        let v808 : unit = ()
        let v809 : (unit -> unit) = closure10(v641, v805)
        let v810 : unit = (fun () -> v809 (); v808) ()
        let v813 : string = v641.l0
        let v814 : string = "spiral_builder.process_typescript / Exception"
        let v815 : string = $"{v498} {v633} #{v639} %s{v814} / {v813}"
        let v818 : char list = []
        let v819 : (char list -> (char [])) = List.toArray
        let v820 : (char []) = v819 v818
        let v823 : string = v815.TrimStart v820 
        let v841 : char list = []
        let v842 : char list = '/' :: v841 
        let v845 : char list = ' ' :: v842 
        let v848 : (char list -> (char [])) = List.toArray
        let v849 : (char []) = v848 v845
        let v852 : string = v823.TrimEnd v849 
        let v870 : (string -> unit) = closure11()
        let v871 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v872 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v852 v872 
        let _v871 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v873 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v852 v873 
        let _v871 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v874 : string = v23.l0
        let v875 : bool = v874 = ""
        let v883 : string =
            if v875 then
                v852
            else
                let v876 : bool = v852 = ""
                if v876 then
                    let v877 : string = v23.l0
                    v877
                else
                    let v878 : string = v23.l0
                    let v879 : string = "\n"
                    let v880 : string = v878 + v879 
                    let v881 : string = v880 + v852 
                    v881
        let v884 : string = "&*$0"
        let v885 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v883 v884 
        let v886 : string = $"$0.chars()"
        let v887 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v885 v886 
        let v888 : string = "v887"
        let v889 : _ = Fable.Core.RustInterop.emitRustExpr () v888 
        let v890 : string = "v889.collect::<Vec<_>>()"
        let v891 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v890 
        let v892 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v893 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v891 v892 
        let v894 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v895 : bool = Fable.Core.RustInterop.emitRustExpr v893 v894 
        let v896 : string = "x"
        let v897 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v896 
        let v898 : string = "String::from_iter($0)"
        let v899 : std_string_String = Fable.Core.RustInterop.emitRustExpr v897 v898 
        let v900 : string = "true; $0 }).collect::<Vec<_>>()"
        let v901 : bool = Fable.Core.RustInterop.emitRustExpr v899 v900 
        let v902 : string = "_vec_map"
        let v903 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v902 
        let v904 : string = "$0.len()"
        let v905 : unativeint = Fable.Core.RustInterop.emitRustExpr v903 v904 
        let v906 : (unativeint -> int32) = int32
        let v907 : int32 = v906 v905
        let v908 : string = ""
        let v909 : bool = v852 <> v908 
        let v913 : bool =
            if v909 then
                let v912 : bool = v907 <= 1
                v912
            else
                false
        if v913 then
            v23.l0 <- v883
            ()
        else
            v23.l0 <- v908
            let v914 : string = "true; $0.into_iter().for_each(|x| { //"
            let v915 : bool = Fable.Core.RustInterop.emitRustExpr v903 v914 
            let v916 : string = "x"
            let v917 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v916 
            let v918 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v917 v918 
            let v919 : string = $"true;"
            let v920 : bool = Fable.Core.RustInterop.emitRustExpr () v919 
            let v921 : string = "true; }}); { //"
            let v922 : bool = Fable.Core.RustInterop.emitRustExpr () v921 
            ()
        let _v871 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v870 v852
        let _v871 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v870 v852
        let _v871 = () 
        #endif
#else
        v870 v852
        let _v871 = () 
        #endif
        _v871 
        let v923 : (string -> unit) = v21.l0
        v923 v852
and closure111 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure112(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure113 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "exit_code"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : string = $"{v2}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure10(v641, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = "; "
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure10(v641, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = "run_result"
        let v687 : string = $"{v686}"
        let v690 : unit = ()
        let v691 : (unit -> unit) = closure10(v641, v687)
        let v692 : unit = (fun () -> v691 (); v690) ()
        let v695 : string = $"{v660}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure10(v641, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = $"{v1}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v641, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = $"{v677}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v641, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = "new_code_path"
        let v720 : string = $"{v719}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v641, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = $"{v660}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure10(v641, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = $"{v0}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure10(v641, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = $"{v677}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure10(v641, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = "external_command"
        let v753 : string = $"{v752}"
        let v756 : unit = ()
        let v757 : (unit -> unit) = closure10(v641, v753)
        let v758 : unit = (fun () -> v757 (); v756) ()
        let v761 : string = $"{v660}"
        let v764 : unit = ()
        let v765 : (unit -> unit) = closure10(v641, v761)
        let v766 : unit = (fun () -> v765 (); v764) ()
        let v769 : string = $"{v3}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure10(v641, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = " }"
        let v778 : string = $"{v777}"
        let v781 : unit = ()
        let v782 : (unit -> unit) = closure10(v641, v778)
        let v783 : unit = (fun () -> v782 (); v781) ()
        let v786 : string = v641.l0
        let v787 : string = "spiral_builder.process_typescript / error"
        let v788 : string = $"{v498} {v633} #{v639} %s{v787} / {v786}"
        let v791 : char list = []
        let v792 : (char list -> (char [])) = List.toArray
        let v793 : (char []) = v792 v791
        let v796 : string = v788.TrimStart v793 
        let v814 : char list = []
        let v815 : char list = '/' :: v814 
        let v818 : char list = ' ' :: v815 
        let v821 : (char list -> (char [])) = List.toArray
        let v822 : (char []) = v821 v818
        let v825 : string = v796.TrimEnd v822 
        let v843 : (string -> unit) = closure11()
        let v844 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v845 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v845 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v846 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v846 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = v23.l0
        let v848 : bool = v847 = ""
        let v856 : string =
            if v848 then
                v825
            else
                let v849 : bool = v825 = ""
                if v849 then
                    let v850 : string = v23.l0
                    v850
                else
                    let v851 : string = v23.l0
                    let v852 : string = "\n"
                    let v853 : string = v851 + v852 
                    let v854 : string = v853 + v825 
                    v854
        let v857 : string = "&*$0"
        let v858 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v856 v857 
        let v859 : string = $"$0.chars()"
        let v860 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = "v860"
        let v862 : _ = Fable.Core.RustInterop.emitRustExpr () v861 
        let v863 : string = "v862.collect::<Vec<_>>()"
        let v864 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v866 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v864 v865 
        let v867 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v868 : bool = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "x"
        let v870 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v869 
        let v871 : string = "String::from_iter($0)"
        let v872 : std_string_String = Fable.Core.RustInterop.emitRustExpr v870 v871 
        let v873 : string = "true; $0 }).collect::<Vec<_>>()"
        let v874 : bool = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "_vec_map"
        let v876 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v875 
        let v877 : string = "$0.len()"
        let v878 : unativeint = Fable.Core.RustInterop.emitRustExpr v876 v877 
        let v879 : (unativeint -> int32) = int32
        let v880 : int32 = v879 v878
        let v881 : string = ""
        let v882 : bool = v825 <> v881 
        let v886 : bool =
            if v882 then
                let v885 : bool = v880 <= 1
                v885
            else
                false
        if v886 then
            v23.l0 <- v856
            ()
        else
            v23.l0 <- v881
            let v887 : string = "true; $0.into_iter().for_each(|x| { //"
            let v888 : bool = Fable.Core.RustInterop.emitRustExpr v876 v887 
            let v889 : string = "x"
            let v890 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v889 
            let v891 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v890 v891 
            let v892 : string = $"true;"
            let v893 : bool = Fable.Core.RustInterop.emitRustExpr () v892 
            let v894 : string = "true; }}); { //"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            ()
        let _v844 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v843 v825
        let _v844 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v843 v825
        let _v844 = () 
        #endif
#else
        v843 v825
        let _v844 = () 
        #endif
        _v844 
        let v896 : (string -> unit) = v21.l0
        v896 v825
and closure114 (v0 : string, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 4 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Critical"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_red"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_red"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_red"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[91m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[91m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[91m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "exit_code"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure10(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v1}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure10(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure10(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "dotnet_fable_result"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure10(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure10(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure10(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = " }"
        let v710 : string = $"{v709}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure10(v639, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = v639.l0
        let v719 : string = $"spiral_builder.process_python"
        let v720 : bool = v719 = ""
        let v777 : string =
            if v720 then
                let v721 : string = ""
                v721
            else
                let v722 : string = $"{v496} {v631} #{v637} %s{v719} / {v718}"
                let v725 : char list = []
                let v726 : (char list -> (char [])) = List.toArray
                let v727 : (char []) = v726 v725
                let v730 : string = v722.TrimStart v727 
                let v748 : char list = []
                let v749 : char list = '/' :: v748 
                let v752 : char list = ' ' :: v749 
                let v755 : (char list -> (char [])) = List.toArray
                let v756 : (char []) = v755 v752
                let v759 : string = v730.TrimEnd v756 
                v759
        let v778 : (string -> unit) = closure11()
        let v779 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v780 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v777 v780 
        let _v779 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v781 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v777 v781 
        let _v779 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v782 : string = v21.l0
        let v783 : bool = v782 = ""
        let v791 : string =
            if v783 then
                v777
            else
                let v784 : bool = v777 = ""
                if v784 then
                    let v785 : string = v21.l0
                    v785
                else
                    let v786 : string = v21.l0
                    let v787 : string = "\n"
                    let v788 : string = v786 + v787 
                    let v789 : string = v788 + v777 
                    v789
        let v792 : string = "&*$0"
        let v793 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let v794 : string = $"$0.chars()"
        let v795 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v793 v794 
        let v796 : string = "v795"
        let v797 : _ = Fable.Core.RustInterop.emitRustExpr () v796 
        let v798 : string = "v797.collect::<Vec<_>>()"
        let v799 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v798 
        let v800 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v801 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v799 v800 
        let v802 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v803 : bool = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "x"
        let v805 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v804 
        let v806 : string = "String::from_iter($0)"
        let v807 : std_string_String = Fable.Core.RustInterop.emitRustExpr v805 v806 
        let v808 : string = "true; $0 }).collect::<Vec<_>>()"
        let v809 : bool = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : string = "_vec_map"
        let v811 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v810 
        let v812 : string = "$0.len()"
        let v813 : unativeint = Fable.Core.RustInterop.emitRustExpr v811 v812 
        let v814 : (unativeint -> int32) = int32
        let v815 : int32 = v814 v813
        let v816 : string = ""
        let v817 : bool = v777 <> v816 
        let v821 : bool =
            if v817 then
                let v820 : bool = v815 <= 1
                v820
            else
                false
        if v821 then
            v21.l0 <- v791
            ()
        else
            v21.l0 <- v816
            let v822 : string = "true; $0.into_iter().for_each(|x| { //"
            let v823 : bool = Fable.Core.RustInterop.emitRustExpr v811 v822 
            let v824 : string = "x"
            let v825 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v824 
            let v826 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v825 v826 
            let v827 : string = $"true;"
            let v828 : bool = Fable.Core.RustInterop.emitRustExpr () v827 
            let v829 : string = "true; }}); { //"
            let v830 : bool = Fable.Core.RustInterop.emitRustExpr () v829 
            ()
        let _v779 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v778 v777
        let _v779 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v778 v777
        let _v779 = () 
        #endif
#else
        v778 v777
        let _v779 = () 
        #endif
        _v779 
        let v831 : (string -> unit) = v19.l0
        v831 v777
and closure115 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 1 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure7(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure8(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure9(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure8(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure9(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure8(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure9(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure8(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure9(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure8(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure9(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure8(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure9(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Debug"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_blue"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[94m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[94m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[94m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure10(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "new_code_path"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure10(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure10(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{v0}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure10(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = " }"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure10(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = v638.l0
        let v684 : string = "spiral_builder.process_python"
        let v685 : bool = v684 = ""
        let v742 : string =
            if v685 then
                let v686 : string = ""
                v686
            else
                let v687 : string = $"{v495} {v630} #{v636} %s{v684} / {v683}"
                let v690 : char list = []
                let v691 : (char list -> (char [])) = List.toArray
                let v692 : (char []) = v691 v690
                let v695 : string = v687.TrimStart v692 
                let v713 : char list = []
                let v714 : char list = '/' :: v713 
                let v717 : char list = ' ' :: v714 
                let v720 : (char list -> (char [])) = List.toArray
                let v721 : (char []) = v720 v717
                let v724 : string = v695.TrimEnd v721 
                v724
        let v743 : (string -> unit) = closure11()
        let v744 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v745 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v742 v745 
        let _v744 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v746 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v742 v746 
        let _v744 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v747 : string = v20.l0
        let v748 : bool = v747 = ""
        let v756 : string =
            if v748 then
                v742
            else
                let v749 : bool = v742 = ""
                if v749 then
                    let v750 : string = v20.l0
                    v750
                else
                    let v751 : string = v20.l0
                    let v752 : string = "\n"
                    let v753 : string = v751 + v752 
                    let v754 : string = v753 + v742 
                    v754
        let v757 : string = "&*$0"
        let v758 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v756 v757 
        let v759 : string = $"$0.chars()"
        let v760 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v758 v759 
        let v761 : string = "v760"
        let v762 : _ = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "v762.collect::<Vec<_>>()"
        let v764 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v763 
        let v765 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v766 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v764 v765 
        let v767 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v768 : bool = Fable.Core.RustInterop.emitRustExpr v766 v767 
        let v769 : string = "x"
        let v770 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v769 
        let v771 : string = "String::from_iter($0)"
        let v772 : std_string_String = Fable.Core.RustInterop.emitRustExpr v770 v771 
        let v773 : string = "true; $0 }).collect::<Vec<_>>()"
        let v774 : bool = Fable.Core.RustInterop.emitRustExpr v772 v773 
        let v775 : string = "_vec_map"
        let v776 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v775 
        let v777 : string = "$0.len()"
        let v778 : unativeint = Fable.Core.RustInterop.emitRustExpr v776 v777 
        let v779 : (unativeint -> int32) = int32
        let v780 : int32 = v779 v778
        let v781 : string = ""
        let v782 : bool = v742 <> v781 
        let v786 : bool =
            if v782 then
                let v785 : bool = v780 <= 1
                v785
            else
                false
        if v786 then
            v20.l0 <- v756
            ()
        else
            v20.l0 <- v781
            let v787 : string = "true; $0.into_iter().for_each(|x| { //"
            let v788 : bool = Fable.Core.RustInterop.emitRustExpr v776 v787 
            let v789 : string = "x"
            let v790 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v789 
            let v791 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v790 v791 
            let v792 : string = $"true;"
            let v793 : bool = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : string = "true; }}); { //"
            let v795 : bool = Fable.Core.RustInterop.emitRustExpr () v794 
            ()
        let _v744 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v743 v742
        let _v744 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v743 v742
        let _v744 = () 
        #endif
#else
        v743 v742
        let _v744 = () 
        #endif
        _v744 
        let v796 : (string -> unit) = v18.l0
        v796 v742
and closure116 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : (string -> (string seq -> string)) = String.concat
    let v9 : (string seq -> string) = v8 v1
    v9 v5
and closure118 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "ex"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v670 : string = "format!(\"{:#?}\", $0)"
        let v671 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v670 
        let v672 : string = "fable_library_rust::String_::fromString($0)"
        let v673 : string = Fable.Core.RustInterop.emitRustExpr v671 v672 
        let _v669 = v673 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v674 : string = "format!(\"{:#?}\", $0)"
        let v675 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v674 
        let v676 : string = "fable_library_rust::String_::fromString($0)"
        let v677 : string = Fable.Core.RustInterop.emitRustExpr v675 v676 
        let _v669 = v677 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v678 : string = "format!(\"{:#?}\", $0)"
        let v679 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v678 
        let v680 : string = "fable_library_rust::String_::fromString($0)"
        let v681 : string = Fable.Core.RustInterop.emitRustExpr v679 v680 
        let _v669 = v681 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v682 : string = $"%A{v3}"
        let _v669 = v682 
        #endif
#if FABLE_COMPILER_PYTHON
        let v685 : string = $"%A{v3}"
        let _v669 = v685 
        #endif
#else
        let v688 : string = $"%A{v3}"
        let _v669 = v688 
        #endif
        let v691 : string = _v669 
        let v696 : string = $"{v691}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure10(v641, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "; "
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure10(v641, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = "new_code_path"
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure10(v641, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v660}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure10(v641, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = $"{v0}"
        let v733 : unit = ()
        let v734 : (unit -> unit) = closure10(v641, v730)
        let v735 : unit = (fun () -> v734 (); v733) ()
        let v738 : string = $"{v704}"
        let v741 : unit = ()
        let v742 : (unit -> unit) = closure10(v641, v738)
        let v743 : unit = (fun () -> v742 (); v741) ()
        let v746 : string = "external_command"
        let v747 : string = $"{v746}"
        let v750 : unit = ()
        let v751 : (unit -> unit) = closure10(v641, v747)
        let v752 : unit = (fun () -> v751 (); v750) ()
        let v755 : string = $"{v660}"
        let v758 : unit = ()
        let v759 : (unit -> unit) = closure10(v641, v755)
        let v760 : unit = (fun () -> v759 (); v758) ()
        let v763 : string = $"{v2}"
        let v766 : unit = ()
        let v767 : (unit -> unit) = closure10(v641, v763)
        let v768 : unit = (fun () -> v767 (); v766) ()
        let v771 : string = $"{v704}"
        let v774 : unit = ()
        let v775 : (unit -> unit) = closure10(v641, v771)
        let v776 : unit = (fun () -> v775 (); v774) ()
        let v779 : string = "run_result"
        let v780 : string = $"{v779}"
        let v783 : unit = ()
        let v784 : (unit -> unit) = closure10(v641, v780)
        let v785 : unit = (fun () -> v784 (); v783) ()
        let v788 : string = $"{v660}"
        let v791 : unit = ()
        let v792 : (unit -> unit) = closure10(v641, v788)
        let v793 : unit = (fun () -> v792 (); v791) ()
        let v796 : string = $"{v1}"
        let v799 : unit = ()
        let v800 : (unit -> unit) = closure10(v641, v796)
        let v801 : unit = (fun () -> v800 (); v799) ()
        let v804 : string = " }"
        let v805 : string = $"{v804}"
        let v808 : unit = ()
        let v809 : (unit -> unit) = closure10(v641, v805)
        let v810 : unit = (fun () -> v809 (); v808) ()
        let v813 : string = v641.l0
        let v814 : string = "spiral_builder.process_python / Exception"
        let v815 : string = $"{v498} {v633} #{v639} %s{v814} / {v813}"
        let v818 : char list = []
        let v819 : (char list -> (char [])) = List.toArray
        let v820 : (char []) = v819 v818
        let v823 : string = v815.TrimStart v820 
        let v841 : char list = []
        let v842 : char list = '/' :: v841 
        let v845 : char list = ' ' :: v842 
        let v848 : (char list -> (char [])) = List.toArray
        let v849 : (char []) = v848 v845
        let v852 : string = v823.TrimEnd v849 
        let v870 : (string -> unit) = closure11()
        let v871 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v872 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v852 v872 
        let _v871 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v873 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v852 v873 
        let _v871 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v874 : string = v23.l0
        let v875 : bool = v874 = ""
        let v883 : string =
            if v875 then
                v852
            else
                let v876 : bool = v852 = ""
                if v876 then
                    let v877 : string = v23.l0
                    v877
                else
                    let v878 : string = v23.l0
                    let v879 : string = "\n"
                    let v880 : string = v878 + v879 
                    let v881 : string = v880 + v852 
                    v881
        let v884 : string = "&*$0"
        let v885 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v883 v884 
        let v886 : string = $"$0.chars()"
        let v887 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v885 v886 
        let v888 : string = "v887"
        let v889 : _ = Fable.Core.RustInterop.emitRustExpr () v888 
        let v890 : string = "v889.collect::<Vec<_>>()"
        let v891 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v890 
        let v892 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v893 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v891 v892 
        let v894 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v895 : bool = Fable.Core.RustInterop.emitRustExpr v893 v894 
        let v896 : string = "x"
        let v897 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v896 
        let v898 : string = "String::from_iter($0)"
        let v899 : std_string_String = Fable.Core.RustInterop.emitRustExpr v897 v898 
        let v900 : string = "true; $0 }).collect::<Vec<_>>()"
        let v901 : bool = Fable.Core.RustInterop.emitRustExpr v899 v900 
        let v902 : string = "_vec_map"
        let v903 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v902 
        let v904 : string = "$0.len()"
        let v905 : unativeint = Fable.Core.RustInterop.emitRustExpr v903 v904 
        let v906 : (unativeint -> int32) = int32
        let v907 : int32 = v906 v905
        let v908 : string = ""
        let v909 : bool = v852 <> v908 
        let v913 : bool =
            if v909 then
                let v912 : bool = v907 <= 1
                v912
            else
                false
        if v913 then
            v23.l0 <- v883
            ()
        else
            v23.l0 <- v908
            let v914 : string = "true; $0.into_iter().for_each(|x| { //"
            let v915 : bool = Fable.Core.RustInterop.emitRustExpr v903 v914 
            let v916 : string = "x"
            let v917 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v916 
            let v918 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v917 v918 
            let v919 : string = $"true;"
            let v920 : bool = Fable.Core.RustInterop.emitRustExpr () v919 
            let v921 : string = "true; }}); { //"
            let v922 : bool = Fable.Core.RustInterop.emitRustExpr () v921 
            ()
        let _v871 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v870 v852
        let _v871 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v870 v852
        let _v871 = () 
        #endif
#else
        v870 v852
        let _v871 = () 
        #endif
        _v871 
        let v923 : (string -> unit) = v21.l0
        v923 v852
and closure117 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure118(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US1_1
and closure119 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure2()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 4 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure7(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure8(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure9(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure8(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure9(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure8(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure9(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure8(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure9(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure8(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure9(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure8(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure9(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Critical"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_red"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_red"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_red"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[91m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[91m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[91m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure10(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "exit_code"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure10(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure10(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : string = $"{v2}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure10(v641, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = "; "
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure10(v641, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = "run_result"
        let v687 : string = $"{v686}"
        let v690 : unit = ()
        let v691 : (unit -> unit) = closure10(v641, v687)
        let v692 : unit = (fun () -> v691 (); v690) ()
        let v695 : string = $"{v660}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure10(v641, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = $"{v1}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v641, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = $"{v677}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure10(v641, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = "new_code_path"
        let v720 : string = $"{v719}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v641, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = $"{v660}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure10(v641, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = $"{v0}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure10(v641, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = $"{v677}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure10(v641, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = "external_command"
        let v753 : string = $"{v752}"
        let v756 : unit = ()
        let v757 : (unit -> unit) = closure10(v641, v753)
        let v758 : unit = (fun () -> v757 (); v756) ()
        let v761 : string = $"{v660}"
        let v764 : unit = ()
        let v765 : (unit -> unit) = closure10(v641, v761)
        let v766 : unit = (fun () -> v765 (); v764) ()
        let v769 : string = $"{v3}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure10(v641, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = " }"
        let v778 : string = $"{v777}"
        let v781 : unit = ()
        let v782 : (unit -> unit) = closure10(v641, v778)
        let v783 : unit = (fun () -> v782 (); v781) ()
        let v786 : string = v641.l0
        let v787 : string = "spiral_builder.process_python / error"
        let v788 : string = $"{v498} {v633} #{v639} %s{v787} / {v786}"
        let v791 : char list = []
        let v792 : (char list -> (char [])) = List.toArray
        let v793 : (char []) = v792 v791
        let v796 : string = v788.TrimStart v793 
        let v814 : char list = []
        let v815 : char list = '/' :: v814 
        let v818 : char list = ' ' :: v815 
        let v821 : (char list -> (char [])) = List.toArray
        let v822 : (char []) = v821 v818
        let v825 : string = v796.TrimEnd v822 
        let v843 : (string -> unit) = closure11()
        let v844 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v845 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v845 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v846 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v825 v846 
        let _v844 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v847 : string = v23.l0
        let v848 : bool = v847 = ""
        let v856 : string =
            if v848 then
                v825
            else
                let v849 : bool = v825 = ""
                if v849 then
                    let v850 : string = v23.l0
                    v850
                else
                    let v851 : string = v23.l0
                    let v852 : string = "\n"
                    let v853 : string = v851 + v852 
                    let v854 : string = v853 + v825 
                    v854
        let v857 : string = "&*$0"
        let v858 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v856 v857 
        let v859 : string = $"$0.chars()"
        let v860 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = "v860"
        let v862 : _ = Fable.Core.RustInterop.emitRustExpr () v861 
        let v863 : string = "v862.collect::<Vec<_>>()"
        let v864 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v866 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v864 v865 
        let v867 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v868 : bool = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "x"
        let v870 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v869 
        let v871 : string = "String::from_iter($0)"
        let v872 : std_string_String = Fable.Core.RustInterop.emitRustExpr v870 v871 
        let v873 : string = "true; $0 }).collect::<Vec<_>>()"
        let v874 : bool = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "_vec_map"
        let v876 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v875 
        let v877 : string = "$0.len()"
        let v878 : unativeint = Fable.Core.RustInterop.emitRustExpr v876 v877 
        let v879 : (unativeint -> int32) = int32
        let v880 : int32 = v879 v878
        let v881 : string = ""
        let v882 : bool = v825 <> v881 
        let v886 : bool =
            if v882 then
                let v885 : bool = v880 <= 1
                v885
            else
                false
        if v886 then
            v23.l0 <- v856
            ()
        else
            v23.l0 <- v881
            let v887 : string = "true; $0.into_iter().for_each(|x| { //"
            let v888 : bool = Fable.Core.RustInterop.emitRustExpr v876 v887 
            let v889 : string = "x"
            let v890 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v889 
            let v891 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v890 v891 
            let v892 : string = $"true;"
            let v893 : bool = Fable.Core.RustInterop.emitRustExpr () v892 
            let v894 : string = "true; }}); { //"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            ()
        let _v844 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v843 v825
        let _v844 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v843 v825
        let _v844 = () 
        #endif
#else
        v843 v825
        let _v844 = () 
        #endif
        _v844 
        let v896 : (string -> unit) = v21.l0
        v896 v825
and closure120 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure2()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure7(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure8(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure9(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure8(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure9(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure8(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure9(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure8(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure9(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure8(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure9(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure8(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure9(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure10(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "subcommand"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure10(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure10(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v668 : string = "format!(\"{:#?}\", $0)"
        let v669 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v668 
        let v670 : string = "fable_library_rust::String_::fromString($0)"
        let v671 : string = Fable.Core.RustInterop.emitRustExpr v669 v670 
        let _v667 = v671 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v672 : string = "format!(\"{:#?}\", $0)"
        let v673 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v672 
        let v674 : string = "fable_library_rust::String_::fromString($0)"
        let v675 : string = Fable.Core.RustInterop.emitRustExpr v673 v674 
        let _v667 = v675 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v676 : string = "format!(\"{:#?}\", $0)"
        let v677 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v676 
        let v678 : string = "fable_library_rust::String_::fromString($0)"
        let v679 : string = Fable.Core.RustInterop.emitRustExpr v677 v678 
        let _v667 = v679 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v680 : string = $"%A{v1}"
        let _v667 = v680 
        #endif
#if FABLE_COMPILER_PYTHON
        let v683 : string = $"%A{v1}"
        let _v667 = v683 
        #endif
#else
        let v686 : string = $"%A{v1}"
        let _v667 = v686 
        #endif
        let v689 : string = _v667 
        let v694 : string = $"{v689}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure10(v639, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = "; "
        let v703 : string = $"{v702}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure10(v639, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = "arg_matches"
        let v712 : string = $"{v711}"
        let v715 : unit = ()
        let v716 : (unit -> unit) = closure10(v639, v712)
        let v717 : unit = (fun () -> v716 (); v715) ()
        let v720 : string = $"{v658}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure10(v639, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v729 : string = "format!(\"{:#?}\", $0)"
        let v730 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v729 
        let v731 : string = "fable_library_rust::String_::fromString($0)"
        let v732 : string = Fable.Core.RustInterop.emitRustExpr v730 v731 
        let _v728 = v732 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v733 : string = "format!(\"{:#?}\", $0)"
        let v734 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v733 
        let v735 : string = "fable_library_rust::String_::fromString($0)"
        let v736 : string = Fable.Core.RustInterop.emitRustExpr v734 v735 
        let _v728 = v736 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v737 : string = "format!(\"{:#?}\", $0)"
        let v738 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v737 
        let v739 : string = "fable_library_rust::String_::fromString($0)"
        let v740 : string = Fable.Core.RustInterop.emitRustExpr v738 v739 
        let _v728 = v740 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v741 : string = $"%A{v0}"
        let _v728 = v741 
        #endif
#if FABLE_COMPILER_PYTHON
        let v744 : string = $"%A{v0}"
        let _v728 = v744 
        #endif
#else
        let v747 : string = $"%A{v0}"
        let _v728 = v747 
        #endif
        let v750 : string = _v728 
        let v755 : string = $"{v750}"
        let v758 : unit = ()
        let v759 : (unit -> unit) = closure10(v639, v755)
        let v760 : unit = (fun () -> v759 (); v758) ()
        let v763 : string = " }"
        let v764 : string = $"{v763}"
        let v767 : unit = ()
        let v768 : (unit -> unit) = closure10(v639, v764)
        let v769 : unit = (fun () -> v768 (); v767) ()
        let v772 : string = v639.l0
        let v773 : string = "spiral_builder.run / invalid subcommand"
        let v774 : bool = v773 = ""
        let v831 : string =
            if v774 then
                let v775 : string = ""
                v775
            else
                let v776 : string = $"{v496} {v631} #{v637} %s{v773} / {v772}"
                let v779 : char list = []
                let v780 : (char list -> (char [])) = List.toArray
                let v781 : (char []) = v780 v779
                let v784 : string = v776.TrimStart v781 
                let v802 : char list = []
                let v803 : char list = '/' :: v802 
                let v806 : char list = ' ' :: v803 
                let v809 : (char list -> (char [])) = List.toArray
                let v810 : (char []) = v809 v806
                let v813 : string = v784.TrimEnd v810 
                v813
        let v832 : (string -> unit) = closure11()
        let v833 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v834 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v831 v834 
        let _v833 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v835 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v831 v835 
        let _v833 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v836 : string = v21.l0
        let v837 : bool = v836 = ""
        let v845 : string =
            if v837 then
                v831
            else
                let v838 : bool = v831 = ""
                if v838 then
                    let v839 : string = v21.l0
                    v839
                else
                    let v840 : string = v21.l0
                    let v841 : string = "\n"
                    let v842 : string = v840 + v841 
                    let v843 : string = v842 + v831 
                    v843
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v845 v846 
        let v848 : string = $"$0.chars()"
        let v849 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v847 v848 
        let v850 : string = "v849"
        let v851 : _ = Fable.Core.RustInterop.emitRustExpr () v850 
        let v852 : string = "v851.collect::<Vec<_>>()"
        let v853 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v852 
        let v854 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v855 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v853 v854 
        let v856 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v857 : bool = Fable.Core.RustInterop.emitRustExpr v855 v856 
        let v858 : string = "x"
        let v859 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v858 
        let v860 : string = "String::from_iter($0)"
        let v861 : std_string_String = Fable.Core.RustInterop.emitRustExpr v859 v860 
        let v862 : string = "true; $0 }).collect::<Vec<_>>()"
        let v863 : bool = Fable.Core.RustInterop.emitRustExpr v861 v862 
        let v864 : string = "_vec_map"
        let v865 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v864 
        let v866 : string = "$0.len()"
        let v867 : unativeint = Fable.Core.RustInterop.emitRustExpr v865 v866 
        let v868 : (unativeint -> int32) = int32
        let v869 : int32 = v868 v867
        let v870 : string = ""
        let v871 : bool = v831 <> v870 
        let v875 : bool =
            if v871 then
                let v874 : bool = v869 <= 1
                v874
            else
                false
        if v875 then
            v21.l0 <- v845
            ()
        else
            v21.l0 <- v870
            let v876 : string = "true; $0.into_iter().for_each(|x| { //"
            let v877 : bool = Fable.Core.RustInterop.emitRustExpr v865 v876 
            let v878 : string = "x"
            let v879 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v878 
            let v880 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v879 v880 
            let v881 : string = $"true;"
            let v882 : bool = Fable.Core.RustInterop.emitRustExpr () v881 
            let v883 : string = "true; }}); { //"
            let v884 : bool = Fable.Core.RustInterop.emitRustExpr () v883 
            ()
        let _v833 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v832 v831
        let _v833 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v832 v831
        let _v833 = () 
        #endif
#else
        v832 v831
        let _v833 = () 
        #endif
        _v833 
        let v885 : (string -> unit) = v19.l0
        v885 v831
and closure121 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and closure122 () (v0 : serde_json_Error) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    let v22 : string = "fable_library_rust::String_::fromString($0)"
    let v23 : string = Fable.Core.RustInterop.emitRustExpr v17 v22 
    v23
and method117 () : (serde_json_Error -> string) =
    closure122()
and method118 (v0 : Result<string, string>) : Result<string, string> =
    v0
and method10 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(async move { //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v5 : (Ref<Str> -> std_string_String) = closure13()
    let v6 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v5) v4 
    let v7 : US4 option = None
    let _v7 = ref v7 
    let v8 : US4 option ref = _v7 
    let v9 : (US4 option -> US4 option ref) = closure14(v8)
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure15(v6, v9)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v16 : US4 option = _v7.Value 
    let v28 : US4 = US4_1
    let v29 : US4 = v16 |> Option.defaultValue v28 
    let v25867 : (struct (string * string) []) =
        match v29 with
        | US4_0(v33, v34) -> (* Some *)
            let v35 : string = "fable_library_rust::String_::fromString($0)"
            let v36 : string = Fable.Core.RustInterop.emitRustExpr v33 v35 
            let v37 : bool = v36 = "cuda"
            if v37 then
                let v38 : string = method11()
                let v39 : string = "&*$0"
                let v40 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v38 v39 
                let v41 : string = "clap::ArgMatches::get_one(&$0, v40).cloned()"
                let v42 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v41 
                let v43 : US5 option = None
                let _v43 = ref v43 
                let v44 : US5 option ref = _v43 
                let v45 : (US5 option -> US5 option ref) = closure16(v44)
                let v46 : unit = ()
                let v47 : (unit -> unit) = closure17(v42, v45)
                let v48 : unit = (fun () -> v47 (); v46) ()
                let v51 : US5 option = _v43.Value 
                let v62 : US5 = US5_1
                let v63 : US5 = v51 |> Option.defaultValue v62 
                let v70 : std_string_String =
                    match v63 with
                    | US5_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US5_0(v67) -> (* Some *)
                        v67
                let v71 : string = "fable_library_rust::String_::fromString($0)"
                let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
                let v73 : string = method12()
                let v74 : string = "&*$0"
                let v75 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v73 v74 
                let v76 : string = "clap::ArgMatches::get_one(&$0, v75).cloned()"
                let v77 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v76 
                let v78 : US5 option = None
                let _v78 = ref v78 
                let v79 : US5 option ref = _v78 
                let v80 : (US5 option -> US5 option ref) = closure16(v79)
                let v81 : unit = ()
                let v82 : (unit -> unit) = closure17(v77, v80)
                let v83 : unit = (fun () -> v82 (); v81) ()
                let v86 : US5 option = _v78.Value 
                let v97 : US5 = US5_1
                let v98 : US5 = v86 |> Option.defaultValue v97 
                let v127 : US6 =
                    match v98 with
                    | US5_1 -> (* None *)
                        US6_1
                    | US5_0(v102) -> (* Some *)
                        let v103 : string = "fable_library_rust::String_::fromString($0)"
                        let v104 : string = Fable.Core.RustInterop.emitRustExpr v102 v103 
                        
                        
                        let v105 : bool = "Pip" = v104
                        let v109 : US7 =
                            if v105 then
                                let v106 : US8 = US8_0
                                US7_0(v106)
                            else
                                US7_1
                        let v123 : US7 =
                            match v109 with
                            | US7_1 -> (* None *)
                                let v112 : bool = "Poetry" = v104
                                let v116 : US7 =
                                    if v112 then
                                        let v113 : US8 = US8_1
                                        US7_0(v113)
                                    else
                                        US7_1
                                match v116 with
                                | US7_1 -> (* None *)
                                    US7_1
                                | US7_0(v117) -> (* Some *)
                                    US7_0(v117)
                            | US7_0(v110) -> (* Some *)
                                US7_0(v110)
                        US6_0(v123)
                let v134 : US7 =
                    match v127 with
                    | US6_0(v128) -> (* Some *)
                        match v128 with
                        | US7_0(v129) -> (* Some *)
                            US7_0(v129)
                        | _ ->
                            US7_1
                    | _ ->
                        US7_1
                let v138 : US8 =
                    match v134 with
                    | US7_1 -> (* None *)
                        US8_0
                    | US7_0(v135) -> (* Some *)
                        v135
                let v139 : string = method13()
                let v140 : string = "&*$0"
                let v141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v139 v140 
                let v142 : string = "clap::ArgMatches::get_many(&$0, v141).map(|x| x.cloned().into_iter().collect())"
                let v143 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v142 
                let v144 : US9 option = None
                let _v144 = ref v144 
                let v145 : US9 option ref = _v144 
                let v146 : (US9 option -> US9 option ref) = closure18(v145)
                let v147 : unit = ()
                let v148 : (unit -> unit) = closure19(v143, v146)
                let v149 : unit = (fun () -> v148 (); v147) ()
                let v152 : US9 option = _v144.Value 
                let v163 : US9 = US9_1
                let v164 : US9 = v152 |> Option.defaultValue v163 
                let v168 : (std_string_String []) = [||]
                let v169 : string = "$0.to_vec()"
                let v170 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v168 v169 
                let v173 : Vec<std_string_String> =
                    match v164 with
                    | US9_1 -> (* None *)
                        v170
                    | US9_0(v171) -> (* Some *)
                        v171
                let v174 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v175 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v176 : string = "std::fs::read(&*$0)"
                let v177 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v72 v176 
                let v178 : string = "$0.unwrap()"
                let v179 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v177 v178 
                let _v175 = v179 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v180 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v180 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v183 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v183 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v186 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v186 
                #endif
#if FABLE_COMPILER_PYTHON
                let v189 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v175 = v189 
                #endif
#else
                let v192 : (uint8 []) = v72 |> System.IO.File.ReadAllBytes
                let v193 : string = "$0.to_vec()"
                let v194 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v192 v193 
                let _v175 = v194 
                #endif
                let v195 : Vec<uint8> = _v175 
                let v200 : Vec<uint8> = method14(v195)
                let v201 : string = "std::string::String::from_utf8($0)"
                let v202 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v200 v201 
                let v203 : string = "$0.unwrap()"
                let v204 : std_string_String = Fable.Core.RustInterop.emitRustExpr v202 v203 
                let v205 : string = "fable_library_rust::String_::fromString($0)"
                let v206 : string = Fable.Core.RustInterop.emitRustExpr v204 v205 
                let _v174 = v206 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v207 : string = null |> unbox<string>
                let _v174 = v207 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v210 : string = null |> unbox<string>
                let _v174 = v210 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v213 : string = null |> unbox<string>
                let _v174 = v213 
                #endif
#if FABLE_COMPILER_PYTHON
                let v216 : string = null |> unbox<string>
                let _v174 = v216 
                #endif
#else
                let v219 : string = v72 |> System.IO.File.ReadAllText
                let _v174 = v219 
                #endif
                let v220 : string = _v174 
                let v225 : string = __SOURCE_DIRECTORY__
                let v226 : string = "polyglot"
                let v227 : string = ".devcontainer"
                let v228 : string = method15(v226, v227)
                let v229 : US12 = method18(v228, v225)
                let v1031 : US1 =
                    match v229 with
                    | US12_1(v232) -> (* Error *)
                        let v233 : unit = ()
                        let v234 : (unit -> unit) = closure21(v232)
                        let v235 : unit = (fun () -> v234 (); v233) ()
                        US1_1
                    | US12_0(v230) -> (* Ok *)
                        US1_0(v230)
                let v1840 : US1 =
                    match v1031 with
                    | US1_1 -> (* None *)
                        let v1034 : string = method23()
                        let v1035 : string = method15(v226, v227)
                        let v1036 : US12 = method18(v1035, v1034)
                        match v1036 with
                        | US12_1(v1039) -> (* Error *)
                            let v1040 : unit = ()
                            let v1041 : (unit -> unit) = closure21(v1039)
                            let v1042 : unit = (fun () -> v1041 (); v1040) ()
                            US1_1
                        | US12_0(v1037) -> (* Ok *)
                            US1_0(v1037)
                    | US1_0(v1032) -> (* Some *)
                        US1_0(v1032)
                let v1844 : string =
                    match v1840 with
                    | US1_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US1_0(v1841) -> (* Some *)
                        v1841
                let v1845 : string = method15(v1844, v226)
                let v1846 : string = method23()
                let v1847 : (unit -> string) = v1846.ToLower
                let v1848 : string = v1847 ()
                let v1851 : (unit -> string) = v1845.ToLower
                let v1852 : string = v1851 ()
                let v1855 : bool = v1848.StartsWith v1852 
                let v1860 : US12 =
                    if v1855 then
                        US12_1(v1852)
                    else
                        US12_0(v1852)
                let v1866 : Result<string, string> =
                    match v1860 with
                    | US12_1(v1863) -> (* Error *)
                        let v1864 : Result<string, string> = Error v1863 
                        v1864
                    | US12_0(v1861) -> (* Ok *)
                        let v1862 : Result<string, string> = Ok v1861 
                        v1862
                let v1867 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v1868 : bool = Fable.Core.RustInterop.emitRustExpr v1866 v1867 
                let v1869 : string = "x"
                let v1870 : string = Fable.Core.RustInterop.emitRustExpr () v1869 
                let v1871 : string = "true; $0 })"
                let v1872 : bool = Fable.Core.RustInterop.emitRustExpr v1870 v1871 
                let v1873 : string = "_result_unwrap_or_else"
                let v1874 : string = Fable.Core.RustInterop.emitRustExpr () v1873 
                let v1875 : string = method24(v72)
                let v1881 : string =
                    match v138 with
                    | US8_0 -> (* Pip *)
                        let v1876 : string = "requirements.txt"
                        method15(v1875, v1876)
                    | US8_1 -> (* Poetry *)
                        let v1878 : string = "pyproject.toml"
                        method15(v1875, v1878)
                let v1882 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v1883 : bool = Fable.Core.RustInterop.emitRustExpr v173 v1882 
                let v1884 : string = "x"
                let v1885 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1884 
                let v1886 : string = "fable_library_rust::String_::fromString($0)"
                let v1887 : string = Fable.Core.RustInterop.emitRustExpr v1885 v1886 
                let v1888 : string = "="
                let v1889 : bool = v1887.Contains v1888 
                let v1900 : string =
                    if v1889 then
                        v1887
                    else
                        let v1892 : string = "]"
                        let v1893 : bool = v1887.EndsWith v1892 
                        if v1893 then
                            let v1894 : string = $"={{version='*',features=["
                            let v1895 : string = "["
                            let v1896 : string = v1887.Replace (v1895, v1894)
                            let v1897 : string = $"{v1896}}}"
                            v1897
                        else
                            let v1898 : string = $"{v1887}='*'"
                            v1898
                let v1901 : string = "true; $0 }).collect::<Vec<_>>()"
                let v1902 : bool = Fable.Core.RustInterop.emitRustExpr v1900 v1901 
                let v1903 : string = "_vec_map"
                let v1904 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1903 
                let v1905 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v1906 : (string []) = Fable.Core.RustInterop.emitRustExpr v1904 v1905 
                let v1907 : string seq = seq { for i = 0 to v1906.Length - 1 do yield v1906.[i] }
                let v1910 : (string -> (string seq -> string)) = String.concat
                let v1911 : string = "\n"
                let v1912 : (string seq -> string) = v1910 v1911
                let v1913 : string = v1912 v1907
                let v1916 : bool = v1913 = ""
                let struct (v1972 : int32, v1973 : string) =
                    if v1916 then
                        let v1917 : string = ""
                        struct (0, v1917)
                    else
                        let v1956 : string =
                            match v138 with
                            | US8_0 -> (* Pip *)
                                v1913
                            | US8_1 -> (* Poetry *)
                                let v1918 : string = $"[tool.poetry]"
                                let v1919 : string = $"name = \"test\""
                                let v1920 : string = v1918 + v1911 
                                let v1921 : string = v1920 + v1919 
                                let v1922 : string = $"version = \"0.0.1\""
                                let v1923 : string = v1921 + v1911 
                                let v1924 : string = v1923 + v1922 
                                let v1925 : string = $"description = \"\""
                                let v1926 : string = v1924 + v1911 
                                let v1927 : string = v1926 + v1925 
                                let v1928 : string = $"authors = []"
                                let v1929 : string = v1927 + v1911 
                                let v1930 : string = v1929 + v1928 
                                let v1931 : string = $""
                                let v1932 : string = v1930 + v1911 
                                let v1933 : string = v1932 + v1931 
                                let v1934 : string = $"[tool.poetry.dependencies]"
                                let v1935 : string = v1933 + v1911 
                                let v1936 : string = v1935 + v1934 
                                let v1937 : string = $"python=\"~3.12\""
                                let v1938 : string = v1936 + v1911 
                                let v1939 : string = v1938 + v1937 
                                let v1940 : string = $"{v1913}"
                                let v1941 : string = v1939 + v1911 
                                let v1942 : string = v1941 + v1940 
                                let v1943 : string = $""
                                let v1944 : string = v1942 + v1911 
                                let v1945 : string = v1944 + v1943 
                                let v1946 : string = $"[build-system]"
                                let v1947 : string = v1945 + v1911 
                                let v1948 : string = v1947 + v1946 
                                let v1949 : string = $"requires = [\"poetry-core\"]"
                                let v1950 : string = v1948 + v1911 
                                let v1951 : string = v1950 + v1949 
                                let v1952 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v1953 : string = v1951 + v1911 
                                let v1954 : string = v1953 + v1952 
                                v1954
                        method25(v1881, v1956)
                        let v1957 : System.Threading.CancellationToken option = None
                        let v1958 : (struct (string * string) []) = [||]
                        let v1959 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v1960 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v1961 : string option = None
                        let v1965 : string =
                            match v138 with
                            | US8_0 -> (* Pip *)
                                let v1962 : string = $"pip install -r requirements.txt"
                                v1962
                            | US8_1 -> (* Poetry *)
                                let v1963 : string = $"poetry install"
                                v1963
                        let v1966 : string option = Some v1875 
                        let v1969 : bool = true
                        method40(v1965, v1957, v1958, v1959, v1960, v1969, v1966)
                let v1974 : bool = v1972 <> 0 
                let struct (v3845 : US1, v3846 : US1, v3847 : US1) =
                    if v1974 then
                        let v1977 : unit = ()
                        let v1978 : (unit -> unit) = closure67(v138, v72, v1973, v1972)
                        let v1979 : unit = (fun () -> v1978 (); v1977) ()
                        let v2875 : string = "py"
                        let v2876 : US1 = US1_0(v2875)
                        let v2877 : US1 = US1_1
                        let v2878 : US1 = US1_1
                        struct (v2876, v2877, v2878)
                    else
                        let v2882 : string =
                            match v138 with
                            | US8_0 -> (* Pip *)
                                let v2879 : string = $"python \"{v72}\""
                                v2879
                            | US8_1 -> (* Poetry *)
                                let v2880 : string = $"poetry run python \"{v72}\""
                                v2880
                        let v2883 : string = "TRACE_LEVEL"
                        let v2884 : string = "Verbose"
                        let v2885 : (struct (string * string) []) = [|struct (v2883, v2884)|]
                        let v2886 : System.Threading.CancellationToken option = None
                        let v2887 : (struct (string * string) []) = [||]
                        let v2888 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v2889 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v2890 : string option = None
                        let v2891 : string option = Some v1875 
                        let v2894 : bool = true
                        let struct (v2895 : int32, v2896 : string) = method40(v2882, v2886, v2885, v2888, v2889, v2894, v2891)
                        let v2897 : int32 = v2885.Length
                        let v2898 : (string []) = Array.zeroCreate<string> (v2897)
                        let v2899 : Mut5 = {l0 = 0} : Mut5
                        while method43(v2897, v2899) do
                            let v2901 : int32 = v2899.l0
                            let struct (v2902 : string, v2903 : string) = v2885.[int v2901]
                            let v2904 : string = $"$env:{v2902}=''{v2903}''"
                            v2898.[int v2901] <- v2904
                            let v2905 : int32 = v2901 + 1
                            v2899.l0 <- v2905
                            ()
                        let v2906 : string seq = v2898 |> Seq.ofArray
                        let v2909 : (string -> (string seq -> string)) = String.concat
                        let v2910 : string = ";"
                        let v2911 : (string seq -> string) = v2909 v2910
                        let v2912 : string = v2911 v2906
                        let v2915 : string = $"pwsh -c '{v2912}; {v2882}'"
                        let v2916 : bool = v2895 = 0
                        let v2921 : bool =
                            if v2916 then
                                true
                            else
                                let v2917 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v2918 : bool = v2896.Contains v2917 
                                v2918
                        let struct (v3842 : US1, v3843 : US1, v3844 : US1) =
                            if v2921 then
                                let v2922 : (string -> US1) = closure68()
                                let v2923 : (unit -> string) = closure69(v2896)
                                let v2924 : (exn -> US1) = closure70(v72, v2896, v2915)
                                let v2925 : US1 = US1_1
                                let result = ref v2925
                                try
                                    result.Value <- v2923 () |> v2922 
                                with ex ->
                                    result.Value <- v2924 ex 
                                let v2926 : US1 = result.Value
                                let v2936 : string option =
                                    match v2926 with
                                    | US1_1 -> (* None *)
                                        let v2934 : string option = None
                                        v2934
                                    | US1_0(v2930) -> (* Some *)
                                        let v2931 : string option = Some v2930 
                                        v2931
                                let v2937 : string = "$0.unwrap()"
                                let v2938 : string = Fable.Core.RustInterop.emitRustExpr v2936 v2937 
                                let v2939 : string = "py"
                                let v2940 : US1 = US1_0(v2939)
                                let v2941 : US1 = US1_0(v220)
                                let v2942 : US1 = US1_0(v2938)
                                struct (v2940, v2941, v2942)
                            else
                                let v2943 : unit = ()
                                let v2944 : (unit -> unit) = closure72(v72, v2896, v2895, v2915)
                                let v2945 : unit = (fun () -> v2944 (); v2943) ()
                                let v3838 : string = "py"
                                let v3839 : US1 = US1_0(v3838)
                                let v3840 : US1 = US1_1
                                let v3841 : US1 = US1_1
                                struct (v3839, v3840, v3841)
                        struct (v3842, v3843, v3844)
                let v3851 : string =
                    match v3845 with
                    | US1_1 -> (* None *)
                        let v3849 : string = ""
                        v3849
                    | US1_0(v3848) -> (* Some *)
                        v3848
                let v3852 : string = "extension"
                let v3856 : string =
                    match v3846 with
                    | US1_1 -> (* None *)
                        let v3854 : string = ""
                        v3854
                    | US1_0(v3853) -> (* Some *)
                        v3853
                let v3857 : string = "code"
                let v3861 : string =
                    match v3847 with
                    | US1_1 -> (* None *)
                        let v3859 : string = ""
                        v3859
                    | US1_0(v3858) -> (* Some *)
                        v3858
                let v3862 : string = "output"
                let v3863 : (struct (string * string) []) = [|struct (v3852, v3851); struct (v3857, v3856); struct (v3862, v3861)|]
                let v3864 : string = "$0.to_vec()"
                let v3865 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3863 v3864 
                let v3866 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v3867 : (struct (string * string) -> (std_string_String * std_string_String)) = closure73()
                let v3868 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v3865, v3867) v3866 
                let v3869 : string = "std::collections::BTreeMap::from_iter(v3868.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v3870 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3869 
                let v3871 : string = "serde_json::to_string(&v3870)"
                let v3872 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v3871 
                let v3873 : string = "$0.unwrap()"
                let v3874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3872 v3873 
                let v3875 : string = "fable_library_rust::String_::fromString($0)"
                let v3876 : string = Fable.Core.RustInterop.emitRustExpr v3874 v3875 
                let v3877 : string = "command_result"
                [|struct (v3877, v3876)|]
            else
                let v3879 : string = "fable_library_rust::String_::fromString($0)"
                let v3880 : string = Fable.Core.RustInterop.emitRustExpr v33 v3879 
                let v3881 : bool = v3880 = "fable"
                if v3881 then
                    let v3882 : string = method74()
                    let v3883 : string = "&*$0"
                    let v3884 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3882 v3883 
                    let v3885 : string = "clap::ArgMatches::get_one(&$0, v3884).cloned()"
                    let v3886 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v3885 
                    let v3887 : US5 option = None
                    let _v3887 = ref v3887 
                    let v3888 : US5 option ref = _v3887 
                    let v3889 : (US5 option -> US5 option ref) = closure16(v3888)
                    let v3890 : unit = ()
                    let v3891 : (unit -> unit) = closure17(v3886, v3889)
                    let v3892 : unit = (fun () -> v3891 (); v3890) ()
                    let v3895 : US5 option = _v3887.Value 
                    let v3906 : US5 = US5_1
                    let v3907 : US5 = v3895 |> Option.defaultValue v3906 
                    let v3914 : std_string_String =
                        match v3907 with
                        | US5_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US5_0(v3911) -> (* Some *)
                            v3911
                    let v3915 : string = "fable_library_rust::String_::fromString($0)"
                    let v3916 : string = Fable.Core.RustInterop.emitRustExpr v3914 v3915 
                    let v3917 : string = method75()
                    let v3918 : string = "&*$0"
                    let v3919 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3917 v3918 
                    let v3920 : string = "clap::ArgMatches::get_one(&$0, v3919).cloned()"
                    let v3921 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v3920 
                    let v3922 : US5 option = None
                    let _v3922 = ref v3922 
                    let v3923 : US5 option ref = _v3922 
                    let v3924 : (US5 option -> US5 option ref) = closure16(v3923)
                    let v3925 : unit = ()
                    let v3926 : (unit -> unit) = closure17(v3921, v3924)
                    let v3927 : unit = (fun () -> v3926 (); v3925) ()
                    let v3930 : US5 option = _v3922.Value 
                    let v3941 : US5 = US5_1
                    let v3942 : US5 = v3930 |> Option.defaultValue v3941 
                    let v3952 : US1 =
                        match v3942 with
                        | US5_1 -> (* None *)
                            US1_1
                        | US5_0(v3946) -> (* Some *)
                            let v3947 : string = "fable_library_rust::String_::fromString($0)"
                            let v3948 : string = Fable.Core.RustInterop.emitRustExpr v3946 v3947 
                            US1_0(v3948)
                    let v3986 : string =
                        match v3952 with
                        | US1_1 -> (* None *)
                            let v3984 : string = "{}"
                            v3984
                        | US1_0(v3953) -> (* Some *)
                            let v3954 : clap_Command = method0()
                            let v3955 : string = $"_ {v3953} --fs-path \"{v3916}\""
                            let v3956 : US22 = method54(v3955)
                            let v3962 : (string []) =
                                match v3956 with
                                | US22_1(v3958) -> (* Error *)
                                    let v3959 : string = $"resultm.get / Result value was Error: {v3958}"
                                    failwith<(string [])> v3959
                                | US22_0(v3957) -> (* Ok *)
                                    v3957
                            let v3963 : string = "$0.to_vec()"
                            let v3964 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v3962 v3963 
                            let v3965 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                            let v3966 : bool = Fable.Core.RustInterop.emitRustExpr v3964 v3965 
                            let v3967 : string = "x"
                            let v3968 : string = Fable.Core.RustInterop.emitRustExpr () v3967 
                            let v3969 : string = "&*$0"
                            let v3970 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3968 v3969 
                            let v3971 : string = "String::from($0)"
                            let v3972 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3970 v3971 
                            let v3973 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v3974 : bool = Fable.Core.RustInterop.emitRustExpr v3972 v3973 
                            let v3975 : string = "_vec_map"
                            let v3976 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3975 
                            let v3977 : string = "clap::Command::get_matches_from($0, v3976)"
                            let v3978 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v3954 v3977 
                            let v3979 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method10(v0, v3978)
                            let v3980 : string = "v3979.await"
                            let v3981 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v3980 
                            let v3982 : string = "$0.unwrap()"
                            let v3983 : string = Fable.Core.RustInterop.emitRustExpr v3981 v3982 
                            v3983
                    let v3987 : string = "command_result"
                    [|struct (v3987, v3986)|]
                else
                    let v3989 : string = "fable_library_rust::String_::fromString($0)"
                    let v3990 : string = Fable.Core.RustInterop.emitRustExpr v33 v3989 
                    let v3991 : bool = v3990 = "dib"
                    if v3991 then
                        let v3992 : string = method76()
                        let v3993 : string = "&*$0"
                        let v3994 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3992 v3993 
                        let v3995 : string = "clap::ArgMatches::get_one(&$0, v3994).cloned()"
                        let v3996 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v3995 
                        let v3997 : (std_string_String -> string) = closure74()
                        let v3998 : string option = v3996 |> Option.map v3997 
                        let v4023 : string = "$0.unwrap()"
                        let v4024 : string = Fable.Core.RustInterop.emitRustExpr v3998 v4023 
                        let v4025 : string = method84()
                        let v4026 : string = "&*$0"
                        let v4027 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4025 v4026 
                        let v4028 : string = "clap::ArgMatches::get_one(&$0, v4027).cloned()"
                        let v4029 : uint8 option = Fable.Core.RustInterop.emitRustExpr v34 v4028 
                        let v4030 : uint8 = v4029 |> Option.defaultValue 1uy 
                        let v4033 : string = method85()
                        let v4034 : string = "&*$0"
                        let v4035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4033 v4034 
                        let v4036 : string = "clap::ArgMatches::get_one(&$0, v4035).cloned()"
                        let v4037 : string option = Fable.Core.RustInterop.emitRustExpr v34 v4036 
                        let v4038 : US1 option = None
                        let _v4038 = ref v4038 
                        let v4039 : US1 option ref = _v4038 
                        let v4040 : (US1 option -> US1 option ref) = closure3(v4039)
                        let v4041 : unit = ()
                        let v4042 : (unit -> unit) = closure4(v4037, v4040)
                        let v4043 : unit = (fun () -> v4042 (); v4041) ()
                        let v4046 : US1 option = _v4038.Value 
                        let v4057 : US1 = US1_1
                        let v4058 : US1 = v4046 |> Option.defaultValue v4057 
                        let v4062 : uint8 = 1uy
                        let struct (v4063 : int32, v4064 : string) = method86(v4058, v4030, v4024, v4062)
                        let v4065 : bool = v4063 <> 0 
                        let struct (v5883 : int32, v5884 : string) =
                            if v4065 then
                                struct (v4063, v4064)
                            else
                                let v4068 : System.Threading.CancellationToken option = None
                                let v4069 : (struct (string * string) []) = [||]
                                let v4070 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v4071 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v4072 : string option = None
                                let v4073 : string = $"jupyter nbconvert \"{v4024}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v4074 : bool = true
                                let struct (v4075 : int32, v4076 : string) = method40(v4073, v4068, v4069, v4070, v4071, v4074, v4072)
                                let v4077 : unit = ()
                                let v4078 : (unit -> unit) = closure76(v4076, v4075)
                                let v4079 : unit = (fun () -> v4078 (); v4077) ()
                                let v4911 : bool = v4075 <> 0 
                                if v4911 then
                                    let v4914 : string = $"repl_result: {v4064}

jupyter_result: {v4076}"
                                    struct (v4075, v4914)
                                else
                                    let v4915 : string = "'"
                                    let v4916 : string = "''"
                                    let v4917 : string = v4024.Replace (v4915, v4916)
                                    let v4918 : System.Threading.CancellationToken option = None
                                    let v4919 : (struct (string * string) []) = [||]
                                    let v4920 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v4921 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v4922 : string option = None
                                    let v4923 : string = $"pwsh -c \"$counter = 1; $path = '{v4917}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v4924 : bool = true
                                    let struct (v4925 : int32, v4926 : string) = method40(v4923, v4918, v4919, v4920, v4921, v4924, v4922)
                                    let v4927 : unit = ()
                                    let v4928 : (unit -> unit) = closure77(v4926, v4925)
                                    let v4929 : unit = (fun () -> v4928 (); v4927) ()
                                    let v5761 : string = $"{v4024}.html"
                                    let v5762 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5763 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5764 : string = "std::fs::read(&*$0)"
                                    let v5765 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5761 v5764 
                                    let v5766 : string = "$0.unwrap()"
                                    let v5767 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5765 v5766 
                                    let _v5763 = v5767 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5768 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5763 = v5768 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5771 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5763 = v5771 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5774 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5763 = v5774 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5777 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5763 = v5777 
                                    #endif
#else
                                    let v5780 : (uint8 []) = v5761 |> System.IO.File.ReadAllBytes
                                    let v5781 : string = "$0.to_vec()"
                                    let v5782 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5780 v5781 
                                    let _v5763 = v5782 
                                    #endif
                                    let v5783 : Vec<uint8> = _v5763 
                                    let v5788 : Vec<uint8> = method14(v5783)
                                    let v5789 : string = "std::string::String::from_utf8($0)"
                                    let v5790 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5788 v5789 
                                    let v5791 : string = "$0.unwrap()"
                                    let v5792 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5790 v5791 
                                    let v5793 : string = "fable_library_rust::String_::fromString($0)"
                                    let v5794 : string = Fable.Core.RustInterop.emitRustExpr v5792 v5793 
                                    let _v5762 = v5794 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5795 : string = null |> unbox<string>
                                    let _v5762 = v5795 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5798 : string = null |> unbox<string>
                                    let _v5762 = v5798 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5801 : string = null |> unbox<string>
                                    let _v5762 = v5801 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5804 : string = null |> unbox<string>
                                    let _v5762 = v5804 
                                    #endif
#else
                                    let v5807 : string = v5761 |> System.IO.File.ReadAllText
                                    let _v5762 = v5807 
                                    #endif
                                    let v5808 : string = _v5762 
                                    let v5813 : string = "\r\n"
                                    let v5814 : string = "\n"
                                    let v5815 : string = v5808.Replace (v5813, v5814)
                                    let v5816 : string = $"{v4024}.html"
                                    let v5817 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5818 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v5816, v5815) v5818 
                                    let _v5817 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v5817 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v5817 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v5817 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v5817 = () 
                                    #endif
#else
                                    let v5819 : string = method39(v5815)
                                    System.IO.File.WriteAllText (v5816, v5819)
                                    let _v5817 = () 
                                    #endif
                                    _v5817 
                                    let v5820 : string = $"{v4024}.ipynb"
                                    let v5821 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5822 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5823 : string = "std::fs::read(&*$0)"
                                    let v5824 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5820 v5823 
                                    let v5825 : string = "$0.unwrap()"
                                    let v5826 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5824 v5825 
                                    let _v5822 = v5826 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5827 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5822 = v5827 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5830 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5822 = v5830 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5833 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5822 = v5833 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5836 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v5822 = v5836 
                                    #endif
#else
                                    let v5839 : (uint8 []) = v5820 |> System.IO.File.ReadAllBytes
                                    let v5840 : string = "$0.to_vec()"
                                    let v5841 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5839 v5840 
                                    let _v5822 = v5841 
                                    #endif
                                    let v5842 : Vec<uint8> = _v5822 
                                    let v5847 : Vec<uint8> = method14(v5842)
                                    let v5848 : string = "std::string::String::from_utf8($0)"
                                    let v5849 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5847 v5848 
                                    let v5850 : string = "$0.unwrap()"
                                    let v5851 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5849 v5850 
                                    let v5852 : string = "fable_library_rust::String_::fromString($0)"
                                    let v5853 : string = Fable.Core.RustInterop.emitRustExpr v5851 v5852 
                                    let _v5821 = v5853 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v5854 : string = null |> unbox<string>
                                    let _v5821 = v5854 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v5857 : string = null |> unbox<string>
                                    let _v5821 = v5857 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v5860 : string = null |> unbox<string>
                                    let _v5821 = v5860 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v5863 : string = null |> unbox<string>
                                    let _v5821 = v5863 
                                    #endif
#else
                                    let v5866 : string = v5820 |> System.IO.File.ReadAllText
                                    let _v5821 = v5866 
                                    #endif
                                    let v5867 : string = _v5821 
                                    let v5872 : string = v5867.Replace (v5813, v5814)
                                    let v5873 : string = "\\r\\n"
                                    let v5874 : string = "\\n"
                                    let v5875 : string = v5872.Replace (v5873, v5874)
                                    let v5876 : string = $"{v4024}.ipynb"
                                    let v5877 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v5878 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v5876, v5875) v5878 
                                    let _v5877 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v5877 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v5877 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v5877 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v5877 = () 
                                    #endif
#else
                                    let v5879 : string = method39(v5875)
                                    System.IO.File.WriteAllText (v5876, v5879)
                                    let _v5877 = () 
                                    #endif
                                    _v5877 
                                    let v5880 : string = $"repl_result: {v4064}

jupyter_result: {v4076}

pwsh_replace_html_result: {v4926}"
                                    struct (v4925, v5880)
                        let v5885 : unit = ()
                        let v5886 : (unit -> unit) = closure78(v5884, v5883)
                        let v5887 : unit = (fun () -> v5886 (); v5885) ()
                        let v6719 : bool = v5883 <> 0 
                        if v6719 then
                            let v6722 : string = $"spiral_builder.run / dib / exit_code: {v5883} / result: {v5884}"
                            failwith<unit> v6722
                        let v6723 : string = "stdio"
                        [|struct (v6723, v5884)|]
                    else
                        let v6725 : string = "fable_library_rust::String_::fromString($0)"
                        let v6726 : string = Fable.Core.RustInterop.emitRustExpr v33 v6725 
                        let v6727 : bool = v6726 = "rust"
                        let struct (v25840 : US1, v25841 : US1, v25842 : US1) =
                            if v6727 then
                                let v6728 : string = method74()
                                let v6729 : string = "&*$0"
                                let v6730 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6728 v6729 
                                let v6731 : string = "clap::ArgMatches::get_one(&$0, v6730).cloned()"
                                let v6732 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v6731 
                                let v6733 : US5 option = None
                                let _v6733 = ref v6733 
                                let v6734 : US5 option ref = _v6733 
                                let v6735 : (US5 option -> US5 option ref) = closure16(v6734)
                                let v6736 : unit = ()
                                let v6737 : (unit -> unit) = closure17(v6732, v6735)
                                let v6738 : unit = (fun () -> v6737 (); v6736) ()
                                let v6741 : US5 option = _v6733.Value 
                                let v6752 : US5 = US5_1
                                let v6753 : US5 = v6741 |> Option.defaultValue v6752 
                                let v6760 : std_string_String =
                                    match v6753 with
                                    | US5_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US5_0(v6757) -> (* Some *)
                                        v6757
                                let v6761 : string = "fable_library_rust::String_::fromString($0)"
                                let v6762 : string = Fable.Core.RustInterop.emitRustExpr v6760 v6761 
                                let v6763 : string = method13()
                                let v6764 : string = "&*$0"
                                let v6765 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6763 v6764 
                                let v6766 : string = "clap::ArgMatches::get_many(&$0, v6765).map(|x| x.cloned().into_iter().collect())"
                                let v6767 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v6766 
                                let v6768 : US9 option = None
                                let _v6768 = ref v6768 
                                let v6769 : US9 option ref = _v6768 
                                let v6770 : (US9 option -> US9 option ref) = closure18(v6769)
                                let v6771 : unit = ()
                                let v6772 : (unit -> unit) = closure19(v6767, v6770)
                                let v6773 : unit = (fun () -> v6772 (); v6771) ()
                                let v6776 : US9 option = _v6768.Value 
                                let v6787 : US9 = US9_1
                                let v6788 : US9 = v6776 |> Option.defaultValue v6787 
                                let v6792 : (std_string_String []) = [||]
                                let v6793 : string = "$0.to_vec()"
                                let v6794 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6792 v6793 
                                let v6797 : Vec<std_string_String> =
                                    match v6788 with
                                    | US9_1 -> (* None *)
                                        v6794
                                    | US9_0(v6795) -> (* Some *)
                                        v6795
                                let v6798 : string = method87()
                                let v6799 : string = "&*$0"
                                let v6800 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6798 v6799 
                                let v6801 : string = "clap::ArgMatches::get_one(&$0, v6800).cloned()"
                                let v6802 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v6801 
                                let v6803 : US5 option = None
                                let _v6803 = ref v6803 
                                let v6804 : US5 option ref = _v6803 
                                let v6805 : (US5 option -> US5 option ref) = closure16(v6804)
                                let v6806 : unit = ()
                                let v6807 : (unit -> unit) = closure17(v6802, v6805)
                                let v6808 : unit = (fun () -> v6807 (); v6806) ()
                                let v6811 : US5 option = _v6803.Value 
                                let v6822 : US5 = US5_1
                                let v6823 : US5 = v6811 |> Option.defaultValue v6822 
                                let v6833 : US1 =
                                    match v6823 with
                                    | US5_1 -> (* None *)
                                        US1_1
                                    | US5_0(v6827) -> (* Some *)
                                        let v6828 : string = "fable_library_rust::String_::fromString($0)"
                                        let v6829 : string = Fable.Core.RustInterop.emitRustExpr v6827 v6828 
                                        US1_0(v6829)
                                let v6834 : string = method88()
                                let v6835 : string = "&*$0"
                                let v6836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6834 v6835 
                                let v6837 : string = "clap::ArgMatches::get_one(&$0, v6836).cloned()"
                                let v6838 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v6837 
                                let v6839 : US5 option = None
                                let _v6839 = ref v6839 
                                let v6840 : US5 option ref = _v6839 
                                let v6841 : (US5 option -> US5 option ref) = closure16(v6840)
                                let v6842 : unit = ()
                                let v6843 : (unit -> unit) = closure17(v6838, v6841)
                                let v6844 : unit = (fun () -> v6843 (); v6842) ()
                                let v6847 : US5 option = _v6839.Value 
                                let v6858 : US5 = US5_1
                                let v6859 : US5 = v6847 |> Option.defaultValue v6858 
                                let v6869 : US1 =
                                    match v6859 with
                                    | US5_1 -> (* None *)
                                        US1_1
                                    | US5_0(v6863) -> (* Some *)
                                        let v6864 : string = "fable_library_rust::String_::fromString($0)"
                                        let v6865 : string = Fable.Core.RustInterop.emitRustExpr v6863 v6864 
                                        US1_0(v6865)
                                let v6878 : US33 =
                                    match v6833 with
                                    | US1_0(v6870) -> (* Some *)
                                        let v6871 : US34 = US34_0(v6870)
                                        US33_0(v6871)
                                    | _ ->
                                        match v6869 with
                                        | US1_0(v6873) -> (* Some *)
                                            let v6874 : US34 = US34_1(v6873)
                                            US33_0(v6874)
                                        | _ ->
                                            US33_1
                                let v6879 : bool =
                                    match v0 with
                                    | US0_0 -> (* Verbose *)
                                        true
                                    | _ ->
                                        false
                                let v6880 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6881 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6882 : string = "std::fs::read(&*$0)"
                                let v6883 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6762 v6882 
                                let v6884 : string = "$0.unwrap()"
                                let v6885 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6883 v6884 
                                let _v6881 = v6885 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6886 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v6881 = v6886 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6889 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v6881 = v6889 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6892 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v6881 = v6892 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6895 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v6881 = v6895 
                                #endif
#else
                                let v6898 : (uint8 []) = v6762 |> System.IO.File.ReadAllBytes
                                let v6899 : string = "$0.to_vec()"
                                let v6900 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6898 v6899 
                                let _v6881 = v6900 
                                #endif
                                let v6901 : Vec<uint8> = _v6881 
                                let v6906 : Vec<uint8> = method14(v6901)
                                let v6907 : string = "std::string::String::from_utf8($0)"
                                let v6908 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6906 v6907 
                                let v6909 : string = "$0.unwrap()"
                                let v6910 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6908 v6909 
                                let v6911 : string = "fable_library_rust::String_::fromString($0)"
                                let v6912 : string = Fable.Core.RustInterop.emitRustExpr v6910 v6911 
                                let _v6880 = v6912 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6913 : string = null |> unbox<string>
                                let _v6880 = v6913 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6916 : string = null |> unbox<string>
                                let _v6880 = v6916 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6919 : string = null |> unbox<string>
                                let _v6880 = v6919 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6922 : string = null |> unbox<string>
                                let _v6880 = v6922 
                                #endif
#else
                                let v6925 : string = v6762 |> System.IO.File.ReadAllText
                                let _v6880 = v6925 
                                #endif
                                let v6926 : string = _v6880 
                                let v6931 : string = method9()
                                let v6932 : Mut3 = {l0 = v6931} : Mut3
                                let v6933 : string = "{ "
                                let v6934 : string = $"{v6933}"
                                let v6937 : unit = ()
                                let v6938 : (unit -> unit) = closure10(v6932, v6934)
                                let v6939 : unit = (fun () -> v6938 (); v6937) ()
                                let v6942 : string = "extension"
                                let v6943 : string = $"{v6942}"
                                let v6946 : unit = ()
                                let v6947 : (unit -> unit) = closure10(v6932, v6943)
                                let v6948 : unit = (fun () -> v6947 (); v6946) ()
                                let v6951 : string = " = "
                                let v6952 : string = $"{v6951}"
                                let v6955 : unit = ()
                                let v6956 : (unit -> unit) = closure10(v6932, v6952)
                                let v6957 : unit = (fun () -> v6956 (); v6955) ()
                                let v6960 : string = "rs"
                                let v6961 : string = $"{v6960}"
                                let v6964 : unit = ()
                                let v6965 : (unit -> unit) = closure10(v6932, v6961)
                                let v6966 : unit = (fun () -> v6965 (); v6964) ()
                                let v6969 : string = "; "
                                let v6970 : string = $"{v6969}"
                                let v6973 : unit = ()
                                let v6974 : (unit -> unit) = closure10(v6932, v6970)
                                let v6975 : unit = (fun () -> v6974 (); v6973) ()
                                let v6978 : string = "code"
                                let v6979 : string = $"{v6978}"
                                let v6982 : unit = ()
                                let v6983 : (unit -> unit) = closure10(v6932, v6979)
                                let v6984 : unit = (fun () -> v6983 (); v6982) ()
                                let v6987 : string = $"{v6951}"
                                let v6990 : unit = ()
                                let v6991 : (unit -> unit) = closure10(v6932, v6987)
                                let v6992 : unit = (fun () -> v6991 (); v6990) ()
                                let v6995 : string = $"{v6926}"
                                let v6998 : unit = ()
                                let v6999 : (unit -> unit) = closure10(v6932, v6995)
                                let v7000 : unit = (fun () -> v6999 (); v6998) ()
                                let v7003 : string = $"{v6969}"
                                let v7006 : unit = ()
                                let v7007 : (unit -> unit) = closure10(v6932, v7003)
                                let v7008 : unit = (fun () -> v7007 (); v7006) ()
                                let v7011 : string = "runtime"
                                let v7012 : string = $"{v7011}"
                                let v7015 : unit = ()
                                let v7016 : (unit -> unit) = closure10(v6932, v7012)
                                let v7017 : unit = (fun () -> v7016 (); v7015) ()
                                let v7020 : string = $"{v6951}"
                                let v7023 : unit = ()
                                let v7024 : (unit -> unit) = closure10(v6932, v7020)
                                let v7025 : unit = (fun () -> v7024 (); v7023) ()
                                let v7028 : string = $"%A{v6878}"
                                let v7031 : string = $"{v7028}"
                                let v7034 : unit = ()
                                let v7035 : (unit -> unit) = closure10(v6932, v7031)
                                let v7036 : unit = (fun () -> v7035 (); v7034) ()
                                let v7039 : string = " }"
                                let v7040 : string = $"{v7039}"
                                let v7043 : unit = ()
                                let v7044 : (unit -> unit) = closure10(v6932, v7040)
                                let v7045 : unit = (fun () -> v7044 (); v7043) ()
                                let v7048 : string = v6932.l0
                                let v7049 : string = method89(v7048)
                                let v7050 : string = __SOURCE_DIRECTORY__
                                let v7051 : string = "polyglot"
                                let v7052 : string = ".devcontainer"
                                let v7053 : string = method15(v7051, v7052)
                                let v7054 : US12 = method18(v7053, v7050)
                                let v7853 : US1 =
                                    match v7054 with
                                    | US12_1(v7057) -> (* Error *)
                                        let v7058 : unit = ()
                                        let v7059 : (unit -> unit) = closure21(v7057)
                                        let v7060 : unit = (fun () -> v7059 (); v7058) ()
                                        US1_1
                                    | US12_0(v7055) -> (* Ok *)
                                        US1_0(v7055)
                                let v8659 : US1 =
                                    match v7853 with
                                    | US1_1 -> (* None *)
                                        let v7856 : string = method23()
                                        let v7857 : string = method15(v7051, v7052)
                                        let v7858 : US12 = method18(v7857, v7856)
                                        match v7858 with
                                        | US12_1(v7861) -> (* Error *)
                                            let v7862 : unit = ()
                                            let v7863 : (unit -> unit) = closure21(v7861)
                                            let v7864 : unit = (fun () -> v7863 (); v7862) ()
                                            US1_1
                                        | US12_0(v7859) -> (* Ok *)
                                            US1_0(v7859)
                                    | US1_0(v7854) -> (* Some *)
                                        US1_0(v7854)
                                let v8663 : string =
                                    match v8659 with
                                    | US1_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US1_0(v8660) -> (* Some *)
                                        v8660
                                let v8664 : string = method15(v8663, v7051)
                                let v8665 : string = method23()
                                let v8666 : (unit -> string) = v8665.ToLower
                                let v8667 : string = v8666 ()
                                let v8670 : (unit -> string) = v8664.ToLower
                                let v8671 : string = v8670 ()
                                let v8674 : bool = v8667.StartsWith v8671 
                                let v8679 : US12 =
                                    if v8674 then
                                        US12_1(v8671)
                                    else
                                        US12_0(v8671)
                                let v8685 : Result<string, string> =
                                    match v8679 with
                                    | US12_1(v8682) -> (* Error *)
                                        let v8683 : Result<string, string> = Error v8682 
                                        v8683
                                    | US12_0(v8680) -> (* Ok *)
                                        let v8681 : Result<string, string> = Ok v8680 
                                        v8681
                                let v8686 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                let v8687 : bool = Fable.Core.RustInterop.emitRustExpr v8685 v8686 
                                let v8688 : string = "x"
                                let v8689 : string = Fable.Core.RustInterop.emitRustExpr () v8688 
                                let v8690 : string = "true; $0 })"
                                let v8691 : bool = Fable.Core.RustInterop.emitRustExpr v8689 v8690 
                                let v8692 : string = "_result_unwrap_or_else"
                                let v8693 : string = Fable.Core.RustInterop.emitRustExpr () v8692 
                                let v8694 : string = "target/spiral_builder"
                                let v8695 : string = method15(v8693, v8694)
                                let v8696 : string = "spiral_builder"
                                let v8697 : string = method15(v8695, v8696)
                                let v8698 : string = "packages"
                                let v8699 : string = method15(v8697, v8698)
                                
                                
                                
                                let v8700 : string = "Rust"
                                let v8701 : string = method15(v8699, v8700)
                                let v8702 : string = method15(v8701, v7049)
                                let v8703 : System.IDisposable = method28(v8702)
                                let v8704 : string = $"{v8696}.fs"
                                let v8705 : string = method15(v8702, v8704)
                                let v8706 : string = method80(v8705)
                                method25(v8706, v6926)
                                let v8707 : string list = []
                                let v8708 : string seq = seq { for i = 0 to v8707.Length - 1 do yield v8707.[i] }
                                let v8711 : (string -> (string seq -> string)) = String.concat
                                let v8712 : string = "\\n        "
                                let v8713 : (string seq -> string) = v8711 v8712
                                let v8714 : string = v8713 v8708
                                let v8717 : string = "Fable.Core"
                                let v8718 : string = $"<PackageReference Include=\"{v8717}\" Version=\"*\" />"
                                let v8719 : string list = []
                                let v8720 : string list = v8718 :: v8719 
                                let v8723 : string seq = seq { for i = 0 to v8720.Length - 1 do yield v8720.[i] }
                                let v8726 : (string -> (string seq -> string)) = String.concat
                                let v8727 : (string seq -> string) = v8726 v8712
                                let v8728 : string = v8727 v8723
                                let v8731 : string = $"{v8696}.fsproj"
                                let v8732 : string = method15(v8702, v8731)
                                let v8733 : string = method80(v8732)
                                let v8734 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                let v8735 : string = $"<PropertyGroup>"
                                let v8736 : string = "\n"
                                let v8737 : string = v8734 + v8736 
                                let v8738 : string = v8737 + v8735 
                                let v8739 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                let v8740 : string = v8738 + v8736 
                                let v8741 : string = v8740 + v8739 
                                let v8742 : string = $"    <LangVersion>preview</LangVersion>"
                                let v8743 : string = v8741 + v8736 
                                let v8744 : string = v8743 + v8742 
                                let v8745 : string = $"    <RollForward>Major</RollForward>"
                                let v8746 : string = v8744 + v8736 
                                let v8747 : string = v8746 + v8745 
                                let v8748 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                let v8749 : string = v8747 + v8736 
                                let v8750 : string = v8749 + v8748 
                                let v8751 : string = $"    <PublishAot>false</PublishAot>"
                                let v8752 : string = v8750 + v8736 
                                let v8753 : string = v8752 + v8751 
                                let v8754 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                let v8755 : string = v8753 + v8736 
                                let v8756 : string = v8755 + v8754 
                                let v8757 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                let v8758 : string = v8756 + v8736 
                                let v8759 : string = v8758 + v8757 
                                let v8760 : string = $"    <SelfContained>true</SelfContained>"
                                let v8761 : string = v8759 + v8736 
                                let v8762 : string = v8761 + v8760 
                                let v8763 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                let v8764 : string = v8762 + v8736 
                                let v8765 : string = v8764 + v8763 
                                let v8766 : string = $"    <OutputType>Exe</OutputType>"
                                let v8767 : string = v8765 + v8736 
                                let v8768 : string = v8767 + v8766 
                                let v8769 : string = $"</PropertyGroup>"
                                let v8770 : string = v8768 + v8736 
                                let v8771 : string = v8770 + v8769 
                                let v8772 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                let v8773 : string = v8771 + v8736 
                                let v8774 : string = v8773 + v8772 
                                let v8775 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                let v8776 : string = v8774 + v8736 
                                let v8777 : string = v8776 + v8775 
                                let v8778 : string = $"</PropertyGroup>"
                                let v8779 : string = v8777 + v8736 
                                let v8780 : string = v8779 + v8778 
                                let v8781 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                let v8782 : string = v8780 + v8736 
                                let v8783 : string = v8782 + v8781 
                                let v8784 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                let v8785 : string = v8783 + v8736 
                                let v8786 : string = v8785 + v8784 
                                let v8787 : string = $"</PropertyGroup>"
                                let v8788 : string = v8786 + v8736 
                                let v8789 : string = v8788 + v8787 
                                let v8790 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                let v8791 : string = v8789 + v8736 
                                let v8792 : string = v8791 + v8790 
                                let v8793 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                let v8794 : string = v8792 + v8736 
                                let v8795 : string = v8794 + v8793 
                                let v8796 : string = $"</PropertyGroup>"
                                let v8797 : string = v8795 + v8736 
                                let v8798 : string = v8797 + v8796 
                                let v8799 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                let v8800 : string = v8798 + v8736 
                                let v8801 : string = v8800 + v8799 
                                let v8802 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                let v8803 : string = v8801 + v8736 
                                let v8804 : string = v8803 + v8802 
                                let v8805 : string = $"</PropertyGroup>"
                                let v8806 : string = v8804 + v8736 
                                let v8807 : string = v8806 + v8805 
                                let v8808 : string = $"<ItemGroup>"
                                let v8809 : string = v8807 + v8736 
                                let v8810 : string = v8809 + v8808 
                                let v8811 : string = $"    {v8714}"
                                let v8812 : string = v8810 + v8736 
                                let v8813 : string = v8812 + v8811 
                                let v8814 : string = $"    <Compile Include=\"{v8706}\" />"
                                let v8815 : string = v8813 + v8736 
                                let v8816 : string = v8815 + v8814 
                                let v8817 : string = $"</ItemGroup>"
                                let v8818 : string = v8816 + v8736 
                                let v8819 : string = v8818 + v8817 
                                let v8820 : string = $"<ItemGroup>"
                                let v8821 : string = v8819 + v8736 
                                let v8822 : string = v8821 + v8820 
                                let v8823 : string = $"    {v8728}"
                                let v8824 : string = v8822 + v8736 
                                let v8825 : string = v8824 + v8823 
                                let v8826 : string = $"</ItemGroup>"
                                let v8827 : string = v8825 + v8736 
                                let v8828 : string = v8827 + v8826 
                                let v8829 : string = $"</Project>"
                                let v8830 : string = v8828 + v8736 
                                let v8831 : string = v8830 + v8829 
                                method25(v8733, v8831)
                                let v8832 : string = "../../.."
                                let v8833 : string = method15(v8702, v8832)
                                let v8834 : string = "Cargo.toml"
                                let v8835 : string = method15(v8833, v8834)
                                let v8836 : bool = method27(v8835)
                                let v8837 : bool = v8836 = false
                                if v8837 then
                                    let v8838 : System.DateTime = System.DateTime.Now
                                    let v8841 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v8842 : System.Guid = v8841 ()
                                    let v8845 : System.Guid = method92(v8842, v8838)
                                    let v8846 : (System.Guid -> string) = _.ToString()
                                    let v8847 : string = v8846 v8845
                                    let v8850 : string = $"[package]"
                                    let v8851 : string = $"name = \"spiral_builder_{v8847}\""
                                    let v8852 : string = v8850 + v8736 
                                    let v8853 : string = v8852 + v8851 
                                    let v8854 : string = $"version = \"0.0.1\""
                                    let v8855 : string = v8853 + v8736 
                                    let v8856 : string = v8855 + v8854 
                                    let v8857 : string = $"edition = \"2021\""
                                    let v8858 : string = v8856 + v8736 
                                    let v8859 : string = v8858 + v8857 
                                    let v8860 : string = $""
                                    let v8861 : string = v8859 + v8736 
                                    let v8862 : string = v8861 + v8860 
                                    let v8863 : string = $"[[bin]]"
                                    let v8864 : string = v8862 + v8736 
                                    let v8865 : string = v8864 + v8863 
                                    let v8866 : string = $"name = \"spiral_builder_{v8847}\""
                                    let v8867 : string = v8865 + v8736 
                                    let v8868 : string = v8867 + v8866 
                                    let v8869 : string = $"path = \"spiral_builder.rs\""
                                    let v8870 : string = v8868 + v8736 
                                    let v8871 : string = v8870 + v8869 
                                    let v8872 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v8873 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v8835, v8871) v8873 
                                    let _v8872 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v8872 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v8872 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v8872 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v8872 = () 
                                    #endif
#else
                                    let v8874 : string = method39(v8871)
                                    System.IO.File.WriteAllText (v8835, v8874)
                                    let _v8872 = () 
                                    #endif
                                    _v8872 
                                    ()
                                let v8875 : string = method15(v8702, v8834)
                                let v8876 : bool = method27(v8875)
                                let v8877 : bool = v8876 = false
                                if v8877 then
                                    let v8878 : System.DateTime = System.DateTime.Now
                                    let v8881 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v8882 : System.Guid = v8881 ()
                                    let v8885 : System.Guid = method92(v8882, v8878)
                                    let v8886 : (System.Guid -> string) = _.ToString()
                                    let v8887 : string = v8886 v8885
                                    let v8890 : string = $"[package]"
                                    let v8891 : string = $"name = \"spiral_builder_{v8887}\""
                                    let v8892 : string = v8890 + v8736 
                                    let v8893 : string = v8892 + v8891 
                                    let v8894 : string = $"version = \"0.0.1\""
                                    let v8895 : string = v8893 + v8736 
                                    let v8896 : string = v8895 + v8894 
                                    let v8897 : string = $"edition = \"2021\""
                                    let v8898 : string = v8896 + v8736 
                                    let v8899 : string = v8898 + v8897 
                                    let v8900 : string = $""
                                    let v8901 : string = v8899 + v8736 
                                    let v8902 : string = v8901 + v8900 
                                    let v8903 : string = $"[[bin]]"
                                    let v8904 : string = v8902 + v8736 
                                    let v8905 : string = v8904 + v8903 
                                    let v8906 : string = $"name = \"spiral_builder_{v8887}\""
                                    let v8907 : string = v8905 + v8736 
                                    let v8908 : string = v8907 + v8906 
                                    let v8909 : string = $"path = \"spiral_builder.rs\""
                                    let v8910 : string = v8908 + v8736 
                                    let v8911 : string = v8910 + v8909 
                                    let v8912 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v8913 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v8875, v8911) v8913 
                                    let _v8912 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v8912 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v8912 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v8912 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v8912 = () 
                                    #endif
#else
                                    let v8914 : string = method39(v8911)
                                    System.IO.File.WriteAllText (v8875, v8914)
                                    let _v8912 = () 
                                    #endif
                                    _v8912 
                                    ()
                                let v8915 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v8916 : string = method15(v8693, v8915)
                                let v8917 : string = "fable_modules/fable-library-rust"
                                let v8918 : string = method15(v8702, v8917)
                                method96(v8916, v8918)
                                let struct (v8919 : int32, v8920 : string) = method97(v6878, v8702, v6960, v8733, v8679)
                                let v8921 : bool = v8919 <> 0 
                                let struct (v14714 : US1, v14715 : US1, v14716 : US1) =
                                    if v8921 then
                                        let v8924 : unit = ()
                                        let v8925 : (unit -> unit) = closure82(v8920, v8919)
                                        let v8926 : unit = (fun () -> v8925 (); v8924) ()
                                        let v9749 : US1 = US1_0(v6960)
                                        let v9750 : US1 = US1_1
                                        let v9751 : US1 = US1_0(v8920)
                                        struct (v9749, v9750, v9751)
                                    else
                                        let v9752 : bool =
                                            match v6878 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v9779 : Vec<std_string_String> =
                                            if v9752 then
                                                v6797
                                            else
                                                let v9753 : (std_string_String -> bool) = method102()
                                                let v9754 : Vec<std_string_String> = method103(v6797)
                                                let v9755 : string = "v9754.into_iter().filter(|x| v9753(x.clone().clone())).collect::<Vec<_>>()"
                                                let v9756 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v9755 
                                                let v9757 : string = "$0.len()"
                                                let v9758 : unativeint = Fable.Core.RustInterop.emitRustExpr v9756 v9757 
                                                let v9759 : (unativeint -> int32) = int32
                                                let v9760 : int32 = v9759 v9758
                                                let v9761 : bool = v9760 > 0
                                                if v9761 then
                                                    v6797
                                                else
                                                    let v9762 : string = "&*$0"
                                                    let v9763 : string = "near-sdk"
                                                    let v9764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9763 v9762 
                                                    let v9765 : string = "String::from($0)"
                                                    let v9766 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9764 v9765 
                                                    let v9767 : (std_string_String []) = [|v9766|]
                                                    let v9768 : string = "$0.to_vec()"
                                                    let v9769 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v9767 v9768 
                                                    let v9770 : Vec<std_string_String> = method104(v9769)
                                                    let v9771 : Vec<std_string_String> = method105(v6797)
                                                    let v9772 : string = "true; let mut v9771 = v9771"
                                                    let v9773 : bool = Fable.Core.RustInterop.emitRustExpr () v9772 
                                                    let v9774 : string = "true; v9771.extend(v9770)"
                                                    let v9775 : bool = Fable.Core.RustInterop.emitRustExpr () v9774 
                                                    let v9776 : string = "v9771"
                                                    let v9777 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v9776 
                                                    v9777
                                        let v9780 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                        let v9781 : bool = Fable.Core.RustInterop.emitRustExpr v9779 v9780 
                                        let v9782 : string = "x"
                                        let v9783 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v9782 
                                        let v9784 : string = "fable_library_rust::String_::fromString($0)"
                                        let v9785 : string = Fable.Core.RustInterop.emitRustExpr v9783 v9784 
                                        let v9786 : string = "="
                                        let v9787 : bool = v9785.Contains v9786 
                                        let v9798 : string =
                                            if v9787 then
                                                v9785
                                            else
                                                let v9790 : string = "]"
                                                let v9791 : bool = v9785.EndsWith v9790 
                                                if v9791 then
                                                    let v9792 : string = $"={{version='*',features=["
                                                    let v9793 : string = "["
                                                    let v9794 : string = v9785.Replace (v9793, v9792)
                                                    let v9795 : string = $"{v9794}}}"
                                                    v9795
                                                else
                                                    let v9796 : string = $"{v9785}='*'"
                                                    v9796
                                        let v9799 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v9800 : bool = Fable.Core.RustInterop.emitRustExpr v9798 v9799 
                                        let v9801 : string = "_vec_map"
                                        let v9802 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v9801 
                                        let v9803 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v9804 : (string []) = Fable.Core.RustInterop.emitRustExpr v9802 v9803 
                                        let v9805 : string seq = seq { for i = 0 to v9804.Length - 1 do yield v9804.[i] }
                                        let v9808 : (string -> (string seq -> string)) = String.concat
                                        let v9809 : (string seq -> string) = v9808 v8736
                                        let v9810 : string = v9809 v9805
                                        let v9813 : string = $"[package]"
                                        let v9814 : string = $"name = \"spiral_builder_{v7049}\""
                                        let v9815 : string = v9813 + v8736 
                                        let v9816 : string = v9815 + v9814 
                                        let v9817 : string = $"version = \"0.0.1\""
                                        let v9818 : string = v9816 + v8736 
                                        let v9819 : string = v9818 + v9817 
                                        let v9820 : string = $"edition = \"2021\""
                                        let v9821 : string = v9819 + v8736 
                                        let v9822 : string = v9821 + v9820 
                                        let v9823 : string = $""
                                        let v9824 : string = v9822 + v8736 
                                        let v9825 : string = v9824 + v9823 
                                        let v9826 : string = $"[dependencies]"
                                        let v9827 : string = v9825 + v8736 
                                        let v9828 : string = v9827 + v9826 
                                        let v9829 : bool =
                                            match v6878 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v9832 : string =
                                            if v9829 then
                                                let v9830 : string = $"fable_library_rust = {{ workspace = true, features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"] }}"
                                                v9830
                                            else
                                                let v9831 : string = $"fable_library_rust = {{ workspace = true }}"
                                                v9831
                                        let v9833 : string = v9828 + v8736 
                                        let v9834 : string = v9833 + v9832 
                                        let v9835 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v9836 : string = v9834 + v8736 
                                        let v9837 : string = v9836 + v9835 
                                        let v9838 : string = $"{v9810}"
                                        let v9839 : string = v9837 + v8736 
                                        let v9840 : string = v9839 + v9838 
                                        let v9841 : string = $""
                                        let v9842 : string = v9840 + v8736 
                                        let v9843 : string = v9842 + v9841 
                                        let v9844 : bool =
                                            match v6878 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v9853 : string =
                                            if v9844 then
                                                let v9845 : string = $"[[bin]]"
                                                let v9846 : string = $"name = \"spiral_builder_{v7049}\""
                                                let v9847 : string = v9845 + v8736 
                                                let v9848 : string = v9847 + v9846 
                                                v9848
                                            else
                                                let v9849 : string = $"[lib]"
                                                let v9850 : string = $"crate-type = [\"cdylib\"]"
                                                let v9851 : string = v9849 + v8736 
                                                let v9852 : string = v9851 + v9850 
                                                v9852
                                        let v9854 : string = v9843 + v8736 
                                        let v9855 : string = v9854 + v9853 
                                        let v9856 : string = $"path = \"spiral_builder.rs\" "
                                        let v9857 : string = v9855 + v8736 
                                        let v9858 : string = v9857 + v9856 
                                        let v9859 : string = method80(v8693)
                                        let v9860 : string = $"cargo-features = [\"profile-rustflags\"]"
                                        let v9861 : string = $""
                                        let v9862 : string = v9860 + v8736 
                                        let v9863 : string = v9862 + v9861 
                                        let v9864 : string = $"[workspace]"
                                        let v9865 : string = v9863 + v8736 
                                        let v9866 : string = v9865 + v9864 
                                        let v9867 : string = $"resolver = \"2\""
                                        let v9868 : string = v9866 + v8736 
                                        let v9869 : string = v9868 + v9867 
                                        let v9870 : string = $"members = [\"packages/Rust/*\"]"
                                        let v9871 : string = v9869 + v8736 
                                        let v9872 : string = v9871 + v9870 
                                        let v9873 : string = $""
                                        let v9874 : string = v9872 + v8736 
                                        let v9875 : string = v9874 + v9873 
                                        let v9876 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v9877 : string = v9875 + v8736 
                                        let v9878 : string = v9877 + v9876 
                                        let v9879 : string = $"path = \"{v9859}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v9880 : string = v9878 + v8736 
                                        let v9881 : string = v9880 + v9879 
                                        let v9882 : string = $"default-features = false"
                                        let v9883 : string = v9881 + v8736 
                                        let v9884 : string = v9883 + v9882 
                                        let v9885 : string = $"features = []"
                                        let v9886 : string = v9884 + v8736 
                                        let v9887 : string = v9886 + v9885 
                                        let v9888 : string = $""
                                        let v9889 : string = v9887 + v8736 
                                        let v9890 : string = v9889 + v9888 
                                        let v9891 : string = $"[workspace.dependencies]"
                                        let v9892 : string = v9890 + v8736 
                                        let v9893 : string = v9892 + v9891 
                                        let v9894 : string = $"inline_colorization = \"~0.1\""
                                        let v9895 : string = v9893 + v8736 
                                        let v9896 : string = v9895 + v9894 
                                        let v9897 : string = $""
                                        let v9898 : string = v9896 + v8736 
                                        let v9899 : string = v9898 + v9897 
                                        let v9900 : string = $"[profile.release]"
                                        let v9901 : string = v9899 + v8736 
                                        let v9902 : string = v9901 + v9900 
                                        let v9903 : string = $"codegen-units = 1"
                                        let v9904 : string = v9902 + v8736 
                                        let v9905 : string = v9904 + v9903 
                                        let v9906 : string = $"opt-level = \"z\""
                                        let v9907 : string = v9905 + v8736 
                                        let v9908 : string = v9907 + v9906 
                                        let v9909 : string = $"lto = true"
                                        let v9910 : string = v9908 + v8736 
                                        let v9911 : string = v9910 + v9909 
                                        let v9912 : string = $"debug = false"
                                        let v9913 : string = v9911 + v8736 
                                        let v9914 : string = v9913 + v9912 
                                        let v9915 : string = $"panic = \"abort\""
                                        let v9916 : string = v9914 + v8736 
                                        let v9917 : string = v9916 + v9915 
                                        let v9918 : string = $"overflow-checks = true"
                                        let v9919 : string = v9917 + v8736 
                                        let v9920 : string = v9919 + v9918 
                                        let v9921 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                        let v9922 : string = v9920 + v8736 
                                        let v9923 : string = v9922 + v9921 
                                        method25(v8875, v9858)
                                        method25(v8835, v9923)
                                        let v9924 : string = "src/Range.rs"
                                        let v9925 : string = method15(v8918, v9924)
                                        let v9926 : bool = method27(v9925)
                                        if v9926 then
                                            let v9927 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v9928 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v9929 : string = "std::fs::read(&*$0)"
                                            let v9930 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v9925 v9929 
                                            let v9931 : string = "$0.unwrap()"
                                            let v9932 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9930 v9931 
                                            let _v9928 = v9932 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v9933 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v9928 = v9933 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v9936 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v9928 = v9936 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v9939 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v9928 = v9939 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v9942 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v9928 = v9942 
                                            #endif
#else
                                            let v9945 : (uint8 []) = v9925 |> System.IO.File.ReadAllBytes
                                            let v9946 : string = "$0.to_vec()"
                                            let v9947 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9945 v9946 
                                            let _v9928 = v9947 
                                            #endif
                                            let v9948 : Vec<uint8> = _v9928 
                                            let v9953 : Vec<uint8> = method14(v9948)
                                            let v9954 : string = "std::string::String::from_utf8($0)"
                                            let v9955 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v9953 v9954 
                                            let v9956 : string = "$0.unwrap()"
                                            let v9957 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9955 v9956 
                                            let v9958 : string = "fable_library_rust::String_::fromString($0)"
                                            let v9959 : string = Fable.Core.RustInterop.emitRustExpr v9957 v9958 
                                            let _v9927 = v9959 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v9960 : string = null |> unbox<string>
                                            let _v9927 = v9960 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v9963 : string = null |> unbox<string>
                                            let _v9927 = v9963 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v9966 : string = null |> unbox<string>
                                            let _v9927 = v9966 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v9969 : string = null |> unbox<string>
                                            let _v9927 = v9969 
                                            #endif
#else
                                            let v9972 : string = v9925 |> System.IO.File.ReadAllText
                                            let _v9927 = v9972 
                                            #endif
                                            let v9973 : string = _v9927 
                                            let v9978 : string = "use crate::String_::fromCharCode;"
                                            let v9979 : string = "use crate::String_::fromChar;"
                                            let v9980 : string = v9973.Replace (v9978, v9979)
                                            let v9981 : string = "fromCharCode(c)"
                                            let v9982 : string = "std::char::from_u32(c).unwrap()"
                                            let v9983 : string = v9980.Replace (v9981, v9982)
                                            method25(v9925, v9983)
                                        let v9984 : uint8 = 1uy
                                        let struct (v9985 : int32, v9986 : string) = method106(v8679, v8875, v9984)
                                        let v9987 : bool = v9985 <> 0 
                                        if v9987 then
                                            let v9990 : unit = ()
                                            let v9991 : (unit -> unit) = closure87(v9986, v9985)
                                            let v9992 : unit = (fun () -> v9991 (); v9990) ()
                                            ()
                                        let v10815 : string = $"{v8696}.{v6960}"
                                        let v10816 : string = method15(v8702, v10815)
                                        let v10817 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v10818 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v10819 : string = "std::fs::read(&*$0)"
                                        let v10820 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v10816 v10819 
                                        let v10821 : string = "$0.unwrap()"
                                        let v10822 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10820 v10821 
                                        let _v10818 = v10822 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v10823 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v10818 = v10823 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v10826 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v10818 = v10826 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v10829 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v10818 = v10829 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v10832 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v10818 = v10832 
                                        #endif
#else
                                        let v10835 : (uint8 []) = v10816 |> System.IO.File.ReadAllBytes
                                        let v10836 : string = "$0.to_vec()"
                                        let v10837 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10835 v10836 
                                        let _v10818 = v10837 
                                        #endif
                                        let v10838 : Vec<uint8> = _v10818 
                                        let v10843 : Vec<uint8> = method14(v10838)
                                        let v10844 : string = "std::string::String::from_utf8($0)"
                                        let v10845 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v10843 v10844 
                                        let v10846 : string = "$0.unwrap()"
                                        let v10847 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10845 v10846 
                                        let v10848 : string = "fable_library_rust::String_::fromString($0)"
                                        let v10849 : string = Fable.Core.RustInterop.emitRustExpr v10847 v10848 
                                        let _v10817 = v10849 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v10850 : string = null |> unbox<string>
                                        let _v10817 = v10850 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v10853 : string = null |> unbox<string>
                                        let _v10817 = v10853 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v10856 : string = null |> unbox<string>
                                        let _v10817 = v10856 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v10859 : string = null |> unbox<string>
                                        let _v10817 = v10859 
                                        #endif
#else
                                        let v10862 : string = v10816 |> System.IO.File.ReadAllText
                                        let _v10817 = v10862 
                                        #endif
                                        let v10863 : string = _v10817 
                                        let v10868 : string = "\"{\".into()"
                                        let v10869 : string = Fable.Core.RustInterop.emitRustExpr () v10868 
                                        let v10870 : string = "pub fn main() -> Result<(), String> "
                                        let v10871 : string = v10870 + v10869 
                                        let v10872 : bool =
                                            match v6878 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v10905 : string =
                                            if v10872 then
                                                let v10873 : string = ""
                                                v10873
                                            else
                                                let v10874 : string = $"#[near_sdk::near_bindgen]"
                                                let v10875 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                let v10876 : string = v10874 + v8736 
                                                let v10877 : string = v10876 + v10875 
                                                let v10878 : string = $"pub struct MainState {{"
                                                let v10879 : string = v10877 + v8736 
                                                let v10880 : string = v10879 + v10878 
                                                let v10881 : string = $"}}"
                                                let v10882 : string = v10880 + v8736 
                                                let v10883 : string = v10882 + v10881 
                                                let v10884 : string = $""
                                                let v10885 : string = v10883 + v8736 
                                                let v10886 : string = v10885 + v10884 
                                                let v10887 : string = $"#[near_sdk::near_bindgen]"
                                                let v10888 : string = v10886 + v8736 
                                                let v10889 : string = v10888 + v10887 
                                                let v10890 : string = $"impl MainState {{"
                                                let v10891 : string = v10889 + v8736 
                                                let v10892 : string = v10891 + v10890 
                                                let v10893 : string = $"    pub fn state_main() {{"
                                                let v10894 : string = v10892 + v8736 
                                                let v10895 : string = v10894 + v10893 
                                                let v10896 : string = $"        Spiral_builder::method0();"
                                                let v10897 : string = v10895 + v8736 
                                                let v10898 : string = v10897 + v10896 
                                                let v10899 : string = $"    }}"
                                                let v10900 : string = v10898 + v8736 
                                                let v10901 : string = v10900 + v10899 
                                                let v10902 : string = $"}}"
                                                let v10903 : string = v10901 + v8736 
                                                let v10904 : string = v10903 + v10902 
                                                v10904
                                        let v10906 : string = $"{v10871} Ok(()) }}"
                                        let v10907 : string = v10905 + v8736 
                                        let v10908 : string = v10907 + v10906 
                                        let v10909 : bool = v10863.Contains v10871 
                                        let v11001 : string =
                                            if v10909 then
                                                v10863
                                            else
                                                let v10912 : string = "\";\".into()"
                                                let v10913 : string = Fable.Core.RustInterop.emitRustExpr () v10912 
                                                let v10914 : string = "),)"
                                                let v10915 : string = v10914 + v10913 
                                                let v10916 : string = "));"
                                                let v10917 : string = v10863.Replace (v10915, v10916)
                                                let v10918 : string = "\";\".into()"
                                                let v10919 : string = Fable.Core.RustInterop.emitRustExpr () v10918 
                                                let v10920 : string = "},)"
                                                let v10921 : string = v10920 + v10919 
                                                let v10922 : string = "});"
                                                let v10923 : string = v10917.Replace (v10921, v10922)
                                                let v10924 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v10925 : string = " defaultOf::<()>();"
                                                let v10926 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v10927 : string = $"regex::Regex::new(&$0)"
                                                let v10928 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v10924 v10927 
                                                let v10929 : string = "$0.unwrap()"
                                                let v10930 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v10928 v10929 
                                                let v10931 : string = method81(v10923)
                                                let v10932 : string = $"$0.replace_all(&*$1, &*$2)"
                                                let v10933 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v10930, v10931, v10925) v10932 
                                                let v10934 : string = "String::from($0)"
                                                let v10935 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10933 v10934 
                                                let v10936 : string = "fable_library_rust::String_::fromString($0)"
                                                let v10937 : string = Fable.Core.RustInterop.emitRustExpr v10935 v10936 
                                                let _v10926 = v10937 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v10938 : string = null |> unbox<string>
                                                let _v10926 = v10938 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v10941 : string = null |> unbox<string>
                                                let _v10926 = v10941 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v10944 : string = null |> unbox<string>
                                                let _v10926 = v10944 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v10947 : string = null |> unbox<string>
                                                let _v10926 = v10947 
                                                #endif
#else
                                                let v10950 : string = System.Text.RegularExpressions.Regex.Replace (v10923, v10924, v10925)
                                                let _v10926 = v10950 
                                                #endif
                                                let v10951 : string = _v10926 
                                                let v10956 : string = "::Slice'_"
                                                let v10957 : string = "::Slice__"
                                                let v10958 : string = v10951.Replace (v10956, v10957)
                                                let v10959 : string = "\",\".into()"
                                                let v10960 : string = Fable.Core.RustInterop.emitRustExpr () v10959 
                                                let v10961 : string = "defaultOf()"
                                                let v10962 : string = v10961 + v10960 
                                                let v10963 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v10964 : string = v10958.Replace (v10962, v10963)
                                                let v10965 : string = "\"_.\".into()"
                                                let v10966 : string = Fable.Core.RustInterop.emitRustExpr () v10965 
                                                let v10967 : string = "_self"
                                                let v10968 : string = v10967 + v10966 
                                                let v10969 : string = "self."
                                                let v10970 : string = v10964.Replace (v10968, v10969)
                                                let v10971 : string = "\"h\".into()"
                                                let v10972 : string = Fable.Core.RustInterop.emitRustExpr () v10971 
                                                let v10973 : string = "get_or_insert_wit"
                                                let v10974 : string = v10973 + v10972 
                                                let v10975 : string = "get_or_init"
                                                let v10976 : string = v10970.Replace (v10974, v10975)
                                                let v10977 : string = "\";\".into()"
                                                let v10978 : string = Fable.Core.RustInterop.emitRustExpr () v10977 
                                                let v10979 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v10980 : string = v10979 + v10978 
                                                let v10981 : string = "type ConcurrentStack_1<T> = T;"
                                                let v10982 : string = v10976.Replace (v10980, v10981)
                                                let v10983 : string = "\";\".into()"
                                                let v10984 : string = Fable.Core.RustInterop.emitRustExpr () v10983 
                                                let v10985 : string = "use fable_library_rust::System::Threading::CancellationToken"
                                                let v10986 : string = v10985 + v10984 
                                                let v10987 : string = "type CancellationToken = ();"
                                                let v10988 : string = v10982.Replace (v10986, v10987)
                                                let v10989 : string = "\";\".into()"
                                                let v10990 : string = Fable.Core.RustInterop.emitRustExpr () v10989 
                                                let v10991 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v10992 : string = v10991 + v10990 
                                                let v10993 : string = "type TimeZoneInfo = i64;"
                                                let v10994 : string = v10988.Replace (v10992, v10993)
                                                let v10995 : string = "\";\".into()"
                                                let v10996 : string = Fable.Core.RustInterop.emitRustExpr () v10995 
                                                let v10997 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v10998 : string = v10997 + v10996 
                                                let v10999 : string = "type TaskCanceledException = ();"
                                                let v11000 : string = v10994.Replace (v10998, v10999)
                                                v11000
                                        let v11002 : bool = v10909 = false
                                        if v11002 then
                                            let v11003 : string = $"{v11001}\n\n{v10908}\n"
                                            method25(v10816, v11003)
                                        let v11004 : bool =
                                            match v6878 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v11005 : bool = v11004 <> true
                                        let v11008 : string =
                                            if v11005 then
                                                let v11006 : string = $"cargo build --release --target wasm32-unknown-unknown --manifest-path \"{v8875}\""
                                                v11006
                                            else
                                                let v11007 : string = $"cargo run --manifest-path \"{v8875}\""
                                                v11007
                                        let v11009 : bool =
                                            match v6878 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v11010 : bool = v11009 <> true
                                        let v11019 : (struct (string * string) []) =
                                            if v11010 then
                                                [||]
                                            else
                                                let v11012 : string = "TRACE_LEVEL"
                                                let v11013 : string = "Verbose"
                                                let v11014 : string = "RUSTC_WRAPPER"
                                                let v11015 : string = "sccache"
                                                let v11016 : string = "RUSTFLAGS"
                                                let v11017 : string = "-C prefer-dynamic"
                                                [|struct (v11012, v11013); struct (v11014, v11015); struct (v11016, v11017)|]
                                        let v11020 : System.Threading.CancellationToken option = None
                                        let v11021 : (struct (string * string) []) = [||]
                                        let v11022 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v11023 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v11024 : string option = None
                                        let v11030 : Result<string, string> =
                                            match v8679 with
                                            | US12_1(v11027) -> (* Error *)
                                                let v11028 : Result<string, string> = Error v11027 
                                                v11028
                                            | US12_0(v11025) -> (* Ok *)
                                                let v11026 : Result<string, string> = Ok v11025 
                                                v11026
                                        let v11031 : string = "$0.ok()"
                                        let v11032 : string option = Fable.Core.RustInterop.emitRustExpr v11030 v11031 
                                        let v11033 : bool = true
                                        let struct (v11034 : int32, v11035 : string) = method40(v11008, v11020, v11019, v11022, v11023, v11033, v11032)
                                        let v11036 : bool =
                                            match v6878 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let struct (v13837 : US1, v13838 : US1, v13839 : US1) =
                                            if v11036 then
                                                let v11037 : int32 = v11019.Length
                                                let v11038 : (string []) = Array.zeroCreate<string> (v11037)
                                                let v11039 : Mut5 = {l0 = 0} : Mut5
                                                while method43(v11037, v11039) do
                                                    let v11041 : int32 = v11039.l0
                                                    let struct (v11042 : string, v11043 : string) = v11019.[int v11041]
                                                    let v11044 : string = $"$env:{v11042}=''{v11043}''"
                                                    v11038.[int v11041] <- v11044
                                                    let v11045 : int32 = v11041 + 1
                                                    v11039.l0 <- v11045
                                                    ()
                                                let v11046 : string seq = v11038 |> Seq.ofArray
                                                let v11049 : (string -> (string seq -> string)) = String.concat
                                                let v11050 : string = ";"
                                                let v11051 : (string seq -> string) = v11049 v11050
                                                let v11052 : string = v11051 v11046
                                                let v11055 : (string []) = [|v11052; v11008|]
                                                let v11056 : string seq = v11055 |> Seq.ofArray
                                                let v11059 : (string -> (string seq -> string)) = String.concat
                                                let v11060 : (string seq -> string) = v11059 v11050
                                                let v11061 : string = v11060 v11056
                                                let v11064 : string = $"pwsh -c '{v11061}'"
                                                let v11065 : bool = v11034 = 0
                                                let struct (v11980 : US1, v11981 : US1, v11982 : US1) =
                                                    if v11065 then
                                                        let v11066 : (string -> US1) = closure68()
                                                        let v11067 : (unit -> string) = closure88(v11035)
                                                        let v11068 : (exn -> US1) = closure90(v10816, v11035, v11064)
                                                        let v11069 : US1 = US1_1
                                                        let result = ref v11069
                                                        try
                                                            result.Value <- v11067 () |> v11066 
                                                        with ex ->
                                                            result.Value <- v11068 ex 
                                                        let v11070 : US1 = result.Value
                                                        let v11080 : string option =
                                                            match v11070 with
                                                            | US1_1 -> (* None *)
                                                                let v11078 : string option = None
                                                                v11078
                                                            | US1_0(v11074) -> (* Some *)
                                                                let v11075 : string option = Some v11074 
                                                                v11075
                                                        let v11081 : string = "$0.unwrap()"
                                                        let v11082 : string = Fable.Core.RustInterop.emitRustExpr v11080 v11081 
                                                        let v11083 : US1 = US1_0(v6960)
                                                        let v11084 : US1 = US1_0(v11001)
                                                        let v11085 : US1 = US1_0(v11082)
                                                        struct (v11083, v11084, v11085)
                                                    else
                                                        let v11086 : unit = ()
                                                        let v11087 : (unit -> unit) = closure92(v10816, v11035, v11034, v11064)
                                                        let v11088 : unit = (fun () -> v11087 (); v11086) ()
                                                        let v11977 : US1 = US1_0(v6960)
                                                        let v11978 : US1 = US1_1
                                                        let v11979 : US1 = US1_1
                                                        struct (v11977, v11978, v11979)
                                                struct (v11980, v11981, v11982)
                                            else
                                                let v11983 : string = $"target/spiral_builder/{v8696}/target/wasm32-unknown-unknown/release/spiral_builder_{v7049}.wasm"
                                                let v11990 : string =
                                                    match v6878 with
                                                    | US33_0(v11984) -> (* Some *)
                                                        match v11984 with
                                                        | US34_1(v11986) -> (* Contract *)
                                                            v11986
                                                        | US34_0(v11985) -> (* Wasm *)
                                                            v11985
                                                    | _ ->
                                                        let v11989 : string = ""
                                                        v11989
                                                let v11991 : string = $"'workspace/target/release/spiral_wasm -t Debug -w {v11983} {v11990}'"
                                                let v11992 : string = "scripts/invoke-block.ps1"
                                                let v11993 : string = $"pwsh -c \"pwsh {v11992} {v11991} -Linux -EnvironmentVariables NEAR_RPC_TIMEOUT_SECS=100\""
                                                let v11994 : bool = v11034 = 0
                                                let struct (v13834 : US1, v13835 : US1, v13836 : US1) =
                                                    if v11994 then
                                                        let v11995 : System.Threading.CancellationToken option = None
                                                        let v11996 : (struct (string * string) []) = [||]
                                                        let v11997 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v11998 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v11999 : string option = None
                                                        let v12000 : string option = Some v8693 
                                                        let v12003 : bool = true
                                                        let struct (v12004 : int32, v12005 : string) = method40(v11993, v11995, v11996, v11997, v11998, v12003, v12000)
                                                        let v12006 : bool = v12004 = 0
                                                        let struct (v12904 : US1, v12905 : US1, v12906 : US1) =
                                                            if v12006 then
                                                                let v12007 : US1 = US1_0(v6960)
                                                                let v12008 : US1 = US1_0(v11001)
                                                                let v12009 : US1 = US1_0(v12005)
                                                                struct (v12007, v12008, v12009)
                                                            else
                                                                let v12010 : unit = ()
                                                                let v12011 : (unit -> unit) = closure93(v10816, v11035, v12005, v12004)
                                                                let v12012 : unit = (fun () -> v12011 (); v12010) ()
                                                                let v12901 : US1 = US1_0(v6960)
                                                                let v12902 : US1 = US1_1
                                                                let v12903 : US1 = US1_1
                                                                struct (v12901, v12902, v12903)
                                                        struct (v12904, v12905, v12906)
                                                    else
                                                        let v12907 : unit = ()
                                                        let v12908 : (unit -> unit) = closure94(v10816, v11035, v11034, v11983, v11993)
                                                        let v12909 : unit = (fun () -> v12908 (); v12907) ()
                                                        let v13831 : US1 = US1_0(v6960)
                                                        let v13832 : US1 = US1_1
                                                        let v13833 : US1 = US1_1
                                                        struct (v13831, v13832, v13833)
                                                struct (v13834, v13835, v13836)
                                        let v13840 : bool =
                                            match v6878 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v13841 : bool = v13840 <> true
                                        let v13844 : string =
                                            if v13841 then
                                                let v13842 : string = "wasm32-unknown-unknown/release"
                                                v13842
                                            else
                                                let v13843 : string = "debug"
                                                v13843
                                        let v13845 : string = ""
                                        let v13846 : string = $"target/{v13844}/spiral_builder_{v7049}{v13845}"
                                        let v13847 : string = method15(v8833, v13846)
                                        let v13848 : string = ".wasm"
                                        let v13849 : string = $"target/{v13844}/spiral_builder_{v7049}{v13848}"
                                        let v13850 : string = method15(v8833, v13849)
                                        let v13851 : string = ".pdb"
                                        let v13852 : string = $"target/{v13844}/spiral_builder_{v7049}{v13851}"
                                        let v13853 : string = method15(v8833, v13852)
                                        let v13854 : string = ".exe"
                                        let v13855 : string = $"target/{v13844}/spiral_builder_{v7049}{v13854}"
                                        let v13856 : string = method15(v8833, v13855)
                                        let v13857 : string = ".d"
                                        let v13858 : string = $"target/{v13844}/spiral_builder_{v7049}{v13857}"
                                        let v13859 : string = method15(v8833, v13858)
                                        let v13860 : bool = method27(v13847)
                                        let v13861 : bool = method27(v13850)
                                        let v13862 : bool = method27(v13853)
                                        let v13863 : bool = method27(v13856)
                                        let v13864 : bool = method27(v13859)
                                        let v13865 : unit = ()
                                        let v13866 : (unit -> unit) = closure95(v10816, v13859, v13864, v13856, v13863, v13853, v13862, v13850, v13861, v13847, v13860)
                                        let v13867 : unit = (fun () -> v13866 (); v13865) ()
                                        let v14705 : UH4 =
                                            if v13860 then
                                                let v14702 : UH4 = UH4_0
                                                UH4_1(v13847, v13860, v14702)
                                            else
                                                UH4_0
                                        let v14707 : UH4 =
                                            if v13861 then
                                                UH4_1(v13850, v13861, v14705)
                                            else
                                                v14705
                                        let v14709 : UH4 =
                                            if v13862 then
                                                UH4_1(v13853, v13862, v14707)
                                            else
                                                v14707
                                        let v14711 : UH4 =
                                            if v13863 then
                                                UH4_1(v13856, v13863, v14709)
                                            else
                                                v14709
                                        let v14713 : UH4 =
                                            if v13864 then
                                                UH4_1(v13859, v13864, v14711)
                                            else
                                                v14711
                                        method108(v14713)
                                        struct (v13837, v13838, v13839)
                                struct (v14714, v14715, v14716)
                            else
                                let v14717 : string = "fable_library_rust::String_::fromString($0)"
                                let v14718 : string = Fable.Core.RustInterop.emitRustExpr v33 v14717 
                                let v14719 : bool = v14718 = "typescript"
                                let struct (v25837 : US1, v25838 : US1, v25839 : US1) =
                                    if v14719 then
                                        let v14720 : string = method74()
                                        let v14721 : string = "&*$0"
                                        let v14722 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14720 v14721 
                                        let v14723 : string = "clap::ArgMatches::get_one(&$0, v14722).cloned()"
                                        let v14724 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v14723 
                                        let v14725 : US5 option = None
                                        let _v14725 = ref v14725 
                                        let v14726 : US5 option ref = _v14725 
                                        let v14727 : (US5 option -> US5 option ref) = closure16(v14726)
                                        let v14728 : unit = ()
                                        let v14729 : (unit -> unit) = closure17(v14724, v14727)
                                        let v14730 : unit = (fun () -> v14729 (); v14728) ()
                                        let v14733 : US5 option = _v14725.Value 
                                        let v14744 : US5 = US5_1
                                        let v14745 : US5 = v14733 |> Option.defaultValue v14744 
                                        let v14752 : std_string_String =
                                            match v14745 with
                                            | US5_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US5_0(v14749) -> (* Some *)
                                                v14749
                                        let v14753 : string = "fable_library_rust::String_::fromString($0)"
                                        let v14754 : string = Fable.Core.RustInterop.emitRustExpr v14752 v14753 
                                        let v14755 : string = method13()
                                        let v14756 : string = "&*$0"
                                        let v14757 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14755 v14756 
                                        let v14758 : string = "clap::ArgMatches::get_many(&$0, v14757).map(|x| x.cloned().into_iter().collect())"
                                        let v14759 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v14758 
                                        let v14760 : US9 option = None
                                        let _v14760 = ref v14760 
                                        let v14761 : US9 option ref = _v14760 
                                        let v14762 : (US9 option -> US9 option ref) = closure18(v14761)
                                        let v14763 : unit = ()
                                        let v14764 : (unit -> unit) = closure19(v14759, v14762)
                                        let v14765 : unit = (fun () -> v14764 (); v14763) ()
                                        let v14768 : US9 option = _v14760.Value 
                                        let v14779 : US9 = US9_1
                                        let v14780 : US9 = v14768 |> Option.defaultValue v14779 
                                        let v14784 : (std_string_String []) = [||]
                                        let v14785 : string = "$0.to_vec()"
                                        let v14786 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v14784 v14785 
                                        let v14789 : Vec<std_string_String> =
                                            match v14780 with
                                            | US9_1 -> (* None *)
                                                v14786
                                            | US9_0(v14787) -> (* Some *)
                                                v14787
                                        let v14790 : bool =
                                            match v0 with
                                            | US0_0 -> (* Verbose *)
                                                true
                                            | _ ->
                                                false
                                        let v14791 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v14792 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v14793 : string = "std::fs::read(&*$0)"
                                        let v14794 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v14754 v14793 
                                        let v14795 : string = "$0.unwrap()"
                                        let v14796 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v14794 v14795 
                                        let _v14792 = v14796 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v14797 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v14792 = v14797 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v14800 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v14792 = v14800 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v14803 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v14792 = v14803 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v14806 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v14792 = v14806 
                                        #endif
#else
                                        let v14809 : (uint8 []) = v14754 |> System.IO.File.ReadAllBytes
                                        let v14810 : string = "$0.to_vec()"
                                        let v14811 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v14809 v14810 
                                        let _v14792 = v14811 
                                        #endif
                                        let v14812 : Vec<uint8> = _v14792 
                                        let v14817 : Vec<uint8> = method14(v14812)
                                        let v14818 : string = "std::string::String::from_utf8($0)"
                                        let v14819 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v14817 v14818 
                                        let v14820 : string = "$0.unwrap()"
                                        let v14821 : std_string_String = Fable.Core.RustInterop.emitRustExpr v14819 v14820 
                                        let v14822 : string = "fable_library_rust::String_::fromString($0)"
                                        let v14823 : string = Fable.Core.RustInterop.emitRustExpr v14821 v14822 
                                        let _v14791 = v14823 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v14824 : string = null |> unbox<string>
                                        let _v14791 = v14824 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v14827 : string = null |> unbox<string>
                                        let _v14791 = v14827 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v14830 : string = null |> unbox<string>
                                        let _v14791 = v14830 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v14833 : string = null |> unbox<string>
                                        let _v14791 = v14833 
                                        #endif
#else
                                        let v14836 : string = v14754 |> System.IO.File.ReadAllText
                                        let _v14791 = v14836 
                                        #endif
                                        let v14837 : string = _v14791 
                                        let v14842 : string = "ts"
                                        let v14843 : string = $"%A{struct (v14842, v14837)}"
                                        let v14846 : string = method89(v14843)
                                        let v14847 : string = __SOURCE_DIRECTORY__
                                        let v14848 : string = "polyglot"
                                        let v14849 : string = ".devcontainer"
                                        let v14850 : string = method15(v14848, v14849)
                                        let v14851 : US12 = method18(v14850, v14847)
                                        let v15653 : US1 =
                                            match v14851 with
                                            | US12_1(v14854) -> (* Error *)
                                                let v14855 : unit = ()
                                                let v14856 : (unit -> unit) = closure21(v14854)
                                                let v14857 : unit = (fun () -> v14856 (); v14855) ()
                                                US1_1
                                            | US12_0(v14852) -> (* Ok *)
                                                US1_0(v14852)
                                        let v16462 : US1 =
                                            match v15653 with
                                            | US1_1 -> (* None *)
                                                let v15656 : string = method23()
                                                let v15657 : string = method15(v14848, v14849)
                                                let v15658 : US12 = method18(v15657, v15656)
                                                match v15658 with
                                                | US12_1(v15661) -> (* Error *)
                                                    let v15662 : unit = ()
                                                    let v15663 : (unit -> unit) = closure21(v15661)
                                                    let v15664 : unit = (fun () -> v15663 (); v15662) ()
                                                    US1_1
                                                | US12_0(v15659) -> (* Ok *)
                                                    US1_0(v15659)
                                            | US1_0(v15654) -> (* Some *)
                                                US1_0(v15654)
                                        let v16466 : string =
                                            match v16462 with
                                            | US1_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US1_0(v16463) -> (* Some *)
                                                v16463
                                        let v16467 : string = method15(v16466, v14848)
                                        let v16468 : string = method23()
                                        let v16469 : (unit -> string) = v16468.ToLower
                                        let v16470 : string = v16469 ()
                                        let v16473 : (unit -> string) = v16467.ToLower
                                        let v16474 : string = v16473 ()
                                        let v16477 : bool = v16470.StartsWith v16474 
                                        let v16482 : US12 =
                                            if v16477 then
                                                US12_1(v16474)
                                            else
                                                US12_0(v16474)
                                        let v16488 : Result<string, string> =
                                            match v16482 with
                                            | US12_1(v16485) -> (* Error *)
                                                let v16486 : Result<string, string> = Error v16485 
                                                v16486
                                            | US12_0(v16483) -> (* Ok *)
                                                let v16484 : Result<string, string> = Ok v16483 
                                                v16484
                                        let v16489 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                        let v16490 : bool = Fable.Core.RustInterop.emitRustExpr v16488 v16489 
                                        let v16491 : string = "x"
                                        let v16492 : string = Fable.Core.RustInterop.emitRustExpr () v16491 
                                        let v16493 : string = "true; $0 })"
                                        let v16494 : bool = Fable.Core.RustInterop.emitRustExpr v16492 v16493 
                                        let v16495 : string = "_result_unwrap_or_else"
                                        let v16496 : string = Fable.Core.RustInterop.emitRustExpr () v16495 
                                        let v16497 : string = "target/spiral_builder"
                                        let v16498 : string = method15(v16496, v16497)
                                        let v16499 : string = "spiral_builder"
                                        let v16500 : string = method15(v16498, v16499)
                                        let v16501 : string = "packages"
                                        let v16502 : string = method15(v16500, v16501)
                                        
                                        
                                        
                                        let v16503 : string = "TypeScript"
                                        let v16504 : string = method15(v16502, v16503)
                                        let v16505 : string = method15(v16504, v14846)
                                        let v16506 : System.IDisposable = method28(v16505)
                                        let v16507 : string = $"{v16499}.fs"
                                        let v16508 : string = method15(v16505, v16507)
                                        let v16509 : string = method80(v16508)
                                        method25(v16509, v14837)
                                        let v16510 : string list = []
                                        let v16511 : string seq = seq { for i = 0 to v16510.Length - 1 do yield v16510.[i] }
                                        let v16514 : (string -> (string seq -> string)) = String.concat
                                        let v16515 : string = "\\n        "
                                        let v16516 : (string seq -> string) = v16514 v16515
                                        let v16517 : string = v16516 v16511
                                        let v16520 : string = "Fable.Core"
                                        let v16521 : string = $"<PackageReference Include=\"{v16520}\" Version=\"*\" />"
                                        let v16522 : string list = []
                                        let v16523 : string list = v16521 :: v16522 
                                        let v16526 : string seq = seq { for i = 0 to v16523.Length - 1 do yield v16523.[i] }
                                        let v16529 : (string -> (string seq -> string)) = String.concat
                                        let v16530 : (string seq -> string) = v16529 v16515
                                        let v16531 : string = v16530 v16526
                                        let v16534 : string = $"{v16499}.fsproj"
                                        let v16535 : string = method15(v16505, v16534)
                                        let v16536 : string = method80(v16535)
                                        let v16537 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                        let v16538 : string = $"<PropertyGroup>"
                                        let v16539 : string = "\n"
                                        let v16540 : string = v16537 + v16539 
                                        let v16541 : string = v16540 + v16538 
                                        let v16542 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                        let v16543 : string = v16541 + v16539 
                                        let v16544 : string = v16543 + v16542 
                                        let v16545 : string = $"    <LangVersion>preview</LangVersion>"
                                        let v16546 : string = v16544 + v16539 
                                        let v16547 : string = v16546 + v16545 
                                        let v16548 : string = $"    <RollForward>Major</RollForward>"
                                        let v16549 : string = v16547 + v16539 
                                        let v16550 : string = v16549 + v16548 
                                        let v16551 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                        let v16552 : string = v16550 + v16539 
                                        let v16553 : string = v16552 + v16551 
                                        let v16554 : string = $"    <PublishAot>false</PublishAot>"
                                        let v16555 : string = v16553 + v16539 
                                        let v16556 : string = v16555 + v16554 
                                        let v16557 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                        let v16558 : string = v16556 + v16539 
                                        let v16559 : string = v16558 + v16557 
                                        let v16560 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                        let v16561 : string = v16559 + v16539 
                                        let v16562 : string = v16561 + v16560 
                                        let v16563 : string = $"    <SelfContained>true</SelfContained>"
                                        let v16564 : string = v16562 + v16539 
                                        let v16565 : string = v16564 + v16563 
                                        let v16566 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                        let v16567 : string = v16565 + v16539 
                                        let v16568 : string = v16567 + v16566 
                                        let v16569 : string = $"    <OutputType>Exe</OutputType>"
                                        let v16570 : string = v16568 + v16539 
                                        let v16571 : string = v16570 + v16569 
                                        let v16572 : string = $"</PropertyGroup>"
                                        let v16573 : string = v16571 + v16539 
                                        let v16574 : string = v16573 + v16572 
                                        let v16575 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                        let v16576 : string = v16574 + v16539 
                                        let v16577 : string = v16576 + v16575 
                                        let v16578 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                        let v16579 : string = v16577 + v16539 
                                        let v16580 : string = v16579 + v16578 
                                        let v16581 : string = $"</PropertyGroup>"
                                        let v16582 : string = v16580 + v16539 
                                        let v16583 : string = v16582 + v16581 
                                        let v16584 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                        let v16585 : string = v16583 + v16539 
                                        let v16586 : string = v16585 + v16584 
                                        let v16587 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                        let v16588 : string = v16586 + v16539 
                                        let v16589 : string = v16588 + v16587 
                                        let v16590 : string = $"</PropertyGroup>"
                                        let v16591 : string = v16589 + v16539 
                                        let v16592 : string = v16591 + v16590 
                                        let v16593 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                        let v16594 : string = v16592 + v16539 
                                        let v16595 : string = v16594 + v16593 
                                        let v16596 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                        let v16597 : string = v16595 + v16539 
                                        let v16598 : string = v16597 + v16596 
                                        let v16599 : string = $"</PropertyGroup>"
                                        let v16600 : string = v16598 + v16539 
                                        let v16601 : string = v16600 + v16599 
                                        let v16602 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                        let v16603 : string = v16601 + v16539 
                                        let v16604 : string = v16603 + v16602 
                                        let v16605 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                        let v16606 : string = v16604 + v16539 
                                        let v16607 : string = v16606 + v16605 
                                        let v16608 : string = $"</PropertyGroup>"
                                        let v16609 : string = v16607 + v16539 
                                        let v16610 : string = v16609 + v16608 
                                        let v16611 : string = $"<ItemGroup>"
                                        let v16612 : string = v16610 + v16539 
                                        let v16613 : string = v16612 + v16611 
                                        let v16614 : string = $"    {v16517}"
                                        let v16615 : string = v16613 + v16539 
                                        let v16616 : string = v16615 + v16614 
                                        let v16617 : string = $"    <Compile Include=\"{v16509}\" />"
                                        let v16618 : string = v16616 + v16539 
                                        let v16619 : string = v16618 + v16617 
                                        let v16620 : string = $"</ItemGroup>"
                                        let v16621 : string = v16619 + v16539 
                                        let v16622 : string = v16621 + v16620 
                                        let v16623 : string = $"<ItemGroup>"
                                        let v16624 : string = v16622 + v16539 
                                        let v16625 : string = v16624 + v16623 
                                        let v16626 : string = $"    {v16531}"
                                        let v16627 : string = v16625 + v16539 
                                        let v16628 : string = v16627 + v16626 
                                        let v16629 : string = $"</ItemGroup>"
                                        let v16630 : string = v16628 + v16539 
                                        let v16631 : string = v16630 + v16629 
                                        let v16632 : string = $"</Project>"
                                        let v16633 : string = v16631 + v16539 
                                        let v16634 : string = v16633 + v16632 
                                        method25(v16536, v16634)
                                        let v16635 : string = "lib/typescript/fable/fable_modules"
                                        let v16636 : string = method15(v16496, v16635)
                                        let v16637 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v16638 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v16636 v16637 
                                        let v16639 : string = "async_walkdir::WalkDir::filter($0, |x| $1(x))"
                                        let v16640 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure96()
                                        let v16641 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v16638, v16640) v16639 
                                        let v16642 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method113()
                                        let v16643 : string = "tokio_stream::StreamExt::filter_map(v16641, |x| v16642(x))"
                                        let v16644 : _ = Fable.Core.RustInterop.emitRustExpr () v16643 
                                        let v16645 : string = "Box::pin(tokio_stream::StreamExt::collect(v16644))"
                                        let v16646 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v16645 
                                        let v16647 : string = "v16646.await"
                                        let v16648 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v16647 
                                        let v16649 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                        let v16650 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v16648 v16649 
                                        let v16651 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v16652 : (struct (string * string) -> struct (string * string)) = closure104()
                                        let v16653 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v16650, v16652) v16651 
                                        let v16654 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v16655 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v16653 v16654 
                                        let v16656 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v16657 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v16655 v16656 
                                        let v16658 : struct (string * string) option = v16657 |> Array.tryItem 0 
                                        let v16659 : US42 option = None
                                        let _v16659 = ref v16659 
                                        let v16660 : US42 option ref = _v16659 
                                        let v16661 : (US42 option -> US42 option ref) = closure105(v16660)
                                        let v16662 : unit = ()
                                        let v16663 : (unit -> unit) = closure106(v16658, v16661)
                                        let v16664 : unit = (fun () -> v16663 (); v16662) ()
                                        let v16668 : US42 option = _v16659.Value 
                                        let v16680 : US42 = US42_1
                                        let v16681 : US42 = v16668 |> Option.defaultValue v16680 
                                        let v16685 : unit = ()
                                        let v16686 : (unit -> unit) = closure107(v16681)
                                        let v16687 : unit = (fun () -> v16686 (); v16685) ()
                                        match v16681 with
                                        | US42_1 -> (* None *)
                                            ()
                                        | US42_0(v17486, v17487) -> (* Some *)
                                            let v17488 : string = $"fable-library-{v14842}.{v17487}"
                                            let v17489 : string = method15(v16636, v17488)
                                            let v17490 : string = $"fable_modules/fable-library-{v14842}.{v17487}"
                                            let v17491 : string = method15(v16505, v17490)
                                            method96(v17489, v17491)
                                        let v17492 : US33 = US33_1
                                        let struct (v17493 : int32, v17494 : string) = method97(v17492, v16505, v14842, v16536, v16482)
                                        let v17495 : bool = v17493 <> 0 
                                        let struct (v20276 : US1, v20277 : US1, v20278 : US1) =
                                            if v17495 then
                                                let v17498 : unit = ()
                                                let v17499 : (unit -> unit) = closure108(v17494, v17493)
                                                let v17500 : unit = (fun () -> v17499 (); v17498) ()
                                                let v18330 : US1 = US1_0(v14842)
                                                let v18331 : US1 = US1_1
                                                let v18332 : US1 = US1_0(v17494)
                                                struct (v18330, v18331, v18332)
                                            else
                                                let v18333 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                let v18334 : bool = Fable.Core.RustInterop.emitRustExpr v14789 v18333 
                                                let v18335 : string = "x"
                                                let v18336 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v18335 
                                                let v18337 : string = "fable_library_rust::String_::fromString($0)"
                                                let v18338 : string = Fable.Core.RustInterop.emitRustExpr v18336 v18337 
                                                let v18339 : string = "="
                                                let v18340 : bool = v18338.Contains v18339 
                                                let v18344 : string =
                                                    if v18340 then
                                                        v18338
                                                    else
                                                        let v18343 : string = $"\"{v18338}\":\"*\""
                                                        v18343
                                                let v18345 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v18346 : bool = Fable.Core.RustInterop.emitRustExpr v18344 v18345 
                                                let v18347 : string = "_vec_map"
                                                let v18348 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v18347 
                                                let v18349 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                let v18350 : (string []) = Fable.Core.RustInterop.emitRustExpr v18348 v18349 
                                                let v18351 : string seq = seq { for i = 0 to v18350.Length - 1 do yield v18350.[i] }
                                                let v18354 : (string -> (string seq -> string)) = String.concat
                                                let v18355 : string = ",\n"
                                                let v18356 : (string seq -> string) = v18354 v18355
                                                let v18357 : string = v18356 v18351
                                                let v18360 : string = $"{{"
                                                let v18361 : string = $"  \"name\": \"spiral_builder_{v14846}\","
                                                let v18362 : string = v18360 + v18361 
                                                let v18363 : string = $"  \"dependencies\": {{"
                                                let v18364 : string = v18362 + v18363 
                                                let v18365 : string = v18364 + v18357 
                                                let v18366 : string = $"  }},"
                                                let v18367 : string = v18365 + v18366 
                                                let v18368 : string = $"    \"devDependencies\": {{"
                                                let v18369 : string = v18367 + v18368 
                                                let v18370 : string = $"  }},"
                                                let v18371 : string = v18369 + v18370 
                                                let v18372 : string = $"}}"
                                                let v18373 : string = v18371 + v18372 
                                                let v18374 : string = "package.json"
                                                let v18375 : string = method15(v16505, v18374)
                                                let v18376 : string = "../.."
                                                let v18377 : string = method15(v16505, v18376)
                                                let v18378 : string = method15(v18377, v18374)
                                                method25(v18375, v18373)
                                                let v18379 : string = ""
                                                method25(v18378, v18379)
                                                let v18380 : string = $"{v16499}.{v14842}"
                                                let v18381 : string = method15(v16505, v18380)
                                                let v18382 : unit = ()
                                                let v18383 : (unit -> unit) = closure109(v18381)
                                                let v18384 : unit = (fun () -> v18383 (); v18382) ()
                                                let v19176 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v19177 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v19178 : string = "std::fs::read(&*$0)"
                                                let v19179 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v18381 v19178 
                                                let v19180 : string = "$0.unwrap()"
                                                let v19181 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v19179 v19180 
                                                let _v19177 = v19181 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v19182 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v19177 = v19182 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v19185 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v19177 = v19185 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v19188 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v19177 = v19188 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v19191 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v19177 = v19191 
                                                #endif
#else
                                                let v19194 : (uint8 []) = v18381 |> System.IO.File.ReadAllBytes
                                                let v19195 : string = "$0.to_vec()"
                                                let v19196 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v19194 v19195 
                                                let _v19177 = v19196 
                                                #endif
                                                let v19197 : Vec<uint8> = _v19177 
                                                let v19202 : Vec<uint8> = method14(v19197)
                                                let v19203 : string = "std::string::String::from_utf8($0)"
                                                let v19204 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v19202 v19203 
                                                let v19205 : string = "$0.unwrap()"
                                                let v19206 : std_string_String = Fable.Core.RustInterop.emitRustExpr v19204 v19205 
                                                let v19207 : string = "fable_library_rust::String_::fromString($0)"
                                                let v19208 : string = Fable.Core.RustInterop.emitRustExpr v19206 v19207 
                                                let _v19176 = v19208 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v19209 : string = null |> unbox<string>
                                                let _v19176 = v19209 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v19212 : string = null |> unbox<string>
                                                let _v19176 = v19212 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v19215 : string = null |> unbox<string>
                                                let _v19176 = v19215 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v19218 : string = null |> unbox<string>
                                                let _v19176 = v19218 
                                                #endif
#else
                                                let v19221 : string = v18381 |> System.IO.File.ReadAllText
                                                let _v19176 = v19221 
                                                #endif
                                                let v19222 : string = _v19176 
                                                let v19227 : string = "// spiral_builder.process_typescript"
                                                let v19228 : bool = v19222.Contains v19227 
                                                let v19266 : string =
                                                    if v19228 then
                                                        v19222
                                                    else
                                                        let v19231 : string = $"\"./fable_modules/fable-library-ts.{v16681}/"
                                                        let v19232 : string = $"\"{v16496}/lib/typescript/fable/fable_modules/fable-library-ts.{v16681}/"
                                                        let v19233 : string = v19222.Replace (v19231, v19232)
                                                        let v19234 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v19235 : string = " defaultOf::<()>();"
                                                        let v19236 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v19237 : string = $"regex::Regex::new(&$0)"
                                                        let v19238 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v19234 v19237 
                                                        let v19239 : string = "$0.unwrap()"
                                                        let v19240 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v19238 v19239 
                                                        let v19241 : string = method81(v19233)
                                                        let v19242 : string = $"$0.replace_all(&*$1, &*$2)"
                                                        let v19243 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19240, v19241, v19235) v19242 
                                                        let v19244 : string = "String::from($0)"
                                                        let v19245 : std_string_String = Fable.Core.RustInterop.emitRustExpr v19243 v19244 
                                                        let v19246 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v19247 : string = Fable.Core.RustInterop.emitRustExpr v19245 v19246 
                                                        let _v19236 = v19247 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v19248 : string = null |> unbox<string>
                                                        let _v19236 = v19248 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v19251 : string = null |> unbox<string>
                                                        let _v19236 = v19251 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v19254 : string = null |> unbox<string>
                                                        let _v19236 = v19254 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v19257 : string = null |> unbox<string>
                                                        let _v19236 = v19257 
                                                        #endif
#else
                                                        let v19260 : string = System.Text.RegularExpressions.Regex.Replace (v19233, v19234, v19235)
                                                        let _v19236 = v19260 
                                                        #endif
                                                        let v19261 : string = _v19236 
                                                        v19261
                                                let v19267 : bool = v19228 = false
                                                if v19267 then
                                                    let v19268 : string = $"{v19266}\n\n{v19227}\n"
                                                    method25(v18381, v19268)
                                                let v19269 : string = $"bun run \"{v18381}\""
                                                let v19270 : string = "PATH"
                                                let v19271 : string = method3(v19270)
                                                let v19272 : bool = v19271 = ""
                                                let v19304 : US1 =
                                                    if v19272 then
                                                        US1_1
                                                    else
                                                        let v19274 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v19275 : string = "cfg!(windows)"
                                                        let v19276 : bool = Fable.Core.RustInterop.emitRustExpr () v19275 
                                                        let _v19274 = v19276 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v19277 : string = "cfg!(windows)"
                                                        let v19278 : bool = Fable.Core.RustInterop.emitRustExpr () v19277 
                                                        let _v19274 = v19278 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v19279 : string = "cfg!(windows)"
                                                        let v19280 : bool = Fable.Core.RustInterop.emitRustExpr () v19279 
                                                        let _v19274 = v19280 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v19281 : US10 = US10_0
                                                        let v19282 : US11 = US11_3(v19281)
                                                        let v19283 : string = $"platform.is_windows / target: {v19282}"
                                                        let v19284 : bool = failwith<bool> v19283
                                                        let _v19274 = v19284 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v19285 : US10 = US10_0
                                                        let v19286 : US11 = US11_4(v19285)
                                                        let v19287 : string = $"platform.is_windows / target: {v19286}"
                                                        let v19288 : bool = failwith<bool> v19287
                                                        let _v19274 = v19288 
                                                        #endif
#else
                                                        let v19289 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v19290 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v19291 : bool = v19290 v19289
                                                        let _v19274 = v19291 
                                                        #endif
                                                        let v19292 : bool = _v19274 
                                                        let v19300 : string =
                                                            if v19292 then
                                                                let v19298 : string = ";"
                                                                v19298
                                                            else
                                                                let v19299 : string = ":"
                                                                v19299
                                                        let v19301 : string = "~/.bun/bin"
                                                        let v19302 : string = $"{v19301}{v19300}{v19271}"
                                                        US1_0(v19302)
                                                let v19310 : UH5 =
                                                    match v19304 with
                                                    | US1_1 -> (* None *)
                                                        UH5_0
                                                    | US1_0(v19305) -> (* Some *)
                                                        let v19306 : UH5 = UH5_0
                                                        UH5_1(v19270, v19305, v19306)
                                                let v19311 : string = "TRACE_LEVEL"
                                                let v19312 : string = "Verbose"
                                                let v19313 : UH5 = UH5_0
                                                let v19314 : UH5 = UH5_1(v19311, v19312, v19313)
                                                let v19315 : UH5 = method115(v19310, v19314)
                                                let v19316 : struct (string * string) list = []
                                                let v19317 : struct (string * string) list = method116(v19315, v19316)
                                                let v19318 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v19319 : (struct (string * string) []) = v19318 v19317
                                                let v19322 : System.Threading.CancellationToken option = None
                                                let v19323 : (struct (string * string) []) = [||]
                                                let v19324 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v19325 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v19326 : string option = None
                                                let v19332 : Result<string, string> =
                                                    match v16482 with
                                                    | US12_1(v19329) -> (* Error *)
                                                        let v19330 : Result<string, string> = Error v19329 
                                                        v19330
                                                    | US12_0(v19327) -> (* Ok *)
                                                        let v19328 : Result<string, string> = Ok v19327 
                                                        v19328
                                                let v19333 : string = "$0.ok()"
                                                let v19334 : string option = Fable.Core.RustInterop.emitRustExpr v19332 v19333 
                                                let v19335 : bool = true
                                                let struct (v19336 : int32, v19337 : string) = method40(v19269, v19322, v19319, v19324, v19325, v19335, v19334)
                                                let v19338 : int32 = v19319.Length
                                                let v19339 : (string []) = Array.zeroCreate<string> (v19338)
                                                let v19340 : Mut5 = {l0 = 0} : Mut5
                                                while method43(v19338, v19340) do
                                                    let v19342 : int32 = v19340.l0
                                                    let struct (v19343 : string, v19344 : string) = v19319.[int v19342]
                                                    let v19345 : string = $"$env:{v19343}=''{v19344}''"
                                                    v19339.[int v19342] <- v19345
                                                    let v19346 : int32 = v19342 + 1
                                                    v19340.l0 <- v19346
                                                    ()
                                                let v19347 : string seq = v19339 |> Seq.ofArray
                                                let v19350 : (string -> (string seq -> string)) = String.concat
                                                let v19351 : string = ";"
                                                let v19352 : (string seq -> string) = v19350 v19351
                                                let v19353 : string = v19352 v19347
                                                let v19356 : string = $"pwsh -c '{v19353}; {v19269}'"
                                                let v19357 : bool = v19336 = 0
                                                let struct (v20273 : US1, v20274 : US1, v20275 : US1) =
                                                    if v19357 then
                                                        let v19358 : (string -> US1) = closure68()
                                                        let v19359 : (unit -> string) = closure110(v19337)
                                                        let v19360 : (exn -> US1) = closure111(v18381, v19337, v19356)
                                                        let v19361 : US1 = US1_1
                                                        let result = ref v19361
                                                        try
                                                            result.Value <- v19359 () |> v19358 
                                                        with ex ->
                                                            result.Value <- v19360 ex 
                                                        let v19362 : US1 = result.Value
                                                        let v19372 : string option =
                                                            match v19362 with
                                                            | US1_1 -> (* None *)
                                                                let v19370 : string option = None
                                                                v19370
                                                            | US1_0(v19366) -> (* Some *)
                                                                let v19367 : string option = Some v19366 
                                                                v19367
                                                        let v19373 : string = "$0.unwrap()"
                                                        let v19374 : string = Fable.Core.RustInterop.emitRustExpr v19372 v19373 
                                                        let v19375 : US1 = US1_0(v14842)
                                                        let v19376 : US1 = US1_0(v19266)
                                                        let v19377 : US1 = US1_0(v19374)
                                                        struct (v19375, v19376, v19377)
                                                    else
                                                        let v19378 : unit = ()
                                                        let v19379 : (unit -> unit) = closure113(v18381, v19337, v19336, v19356)
                                                        let v19380 : unit = (fun () -> v19379 (); v19378) ()
                                                        let v20270 : US1 = US1_0(v14842)
                                                        let v20271 : US1 = US1_1
                                                        let v20272 : US1 = US1_1
                                                        struct (v20270, v20271, v20272)
                                                struct (v20273, v20274, v20275)
                                        struct (v20276, v20277, v20278)
                                    else
                                        let v20279 : string = "fable_library_rust::String_::fromString($0)"
                                        let v20280 : string = Fable.Core.RustInterop.emitRustExpr v33 v20279 
                                        let v20281 : bool = v20280 = "python"
                                        let struct (v25834 : US1, v25835 : US1, v25836 : US1) =
                                            if v20281 then
                                                let v20282 : string = method74()
                                                let v20283 : string = "&*$0"
                                                let v20284 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20282 v20283 
                                                let v20285 : string = "clap::ArgMatches::get_one(&$0, v20284).cloned()"
                                                let v20286 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v34 v20285 
                                                let v20287 : US5 option = None
                                                let _v20287 = ref v20287 
                                                let v20288 : US5 option ref = _v20287 
                                                let v20289 : (US5 option -> US5 option ref) = closure16(v20288)
                                                let v20290 : unit = ()
                                                let v20291 : (unit -> unit) = closure17(v20286, v20289)
                                                let v20292 : unit = (fun () -> v20291 (); v20290) ()
                                                let v20295 : US5 option = _v20287.Value 
                                                let v20306 : US5 = US5_1
                                                let v20307 : US5 = v20295 |> Option.defaultValue v20306 
                                                let v20314 : std_string_String =
                                                    match v20307 with
                                                    | US5_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US5_0(v20311) -> (* Some *)
                                                        v20311
                                                let v20315 : string = "fable_library_rust::String_::fromString($0)"
                                                let v20316 : string = Fable.Core.RustInterop.emitRustExpr v20314 v20315 
                                                let v20317 : string = method13()
                                                let v20318 : string = "&*$0"
                                                let v20319 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20317 v20318 
                                                let v20320 : string = "clap::ArgMatches::get_many(&$0, v20319).map(|x| x.cloned().into_iter().collect())"
                                                let v20321 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v34 v20320 
                                                let v20322 : US9 option = None
                                                let _v20322 = ref v20322 
                                                let v20323 : US9 option ref = _v20322 
                                                let v20324 : (US9 option -> US9 option ref) = closure18(v20323)
                                                let v20325 : unit = ()
                                                let v20326 : (unit -> unit) = closure19(v20321, v20324)
                                                let v20327 : unit = (fun () -> v20326 (); v20325) ()
                                                let v20330 : US9 option = _v20322.Value 
                                                let v20341 : US9 = US9_1
                                                let v20342 : US9 = v20330 |> Option.defaultValue v20341 
                                                let v20346 : (std_string_String []) = [||]
                                                let v20347 : string = "$0.to_vec()"
                                                let v20348 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v20346 v20347 
                                                let v20351 : Vec<std_string_String> =
                                                    match v20342 with
                                                    | US9_1 -> (* None *)
                                                        v20348
                                                    | US9_0(v20349) -> (* Some *)
                                                        v20349
                                                let v20352 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v20353 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v20354 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v20355 : string = "std::fs::read(&*$0)"
                                                let v20356 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v20316 v20355 
                                                let v20357 : string = "$0.unwrap()"
                                                let v20358 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20356 v20357 
                                                let _v20354 = v20358 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v20359 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v20354 = v20359 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v20362 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v20354 = v20362 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v20365 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v20354 = v20365 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v20368 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v20354 = v20368 
                                                #endif
#else
                                                let v20371 : (uint8 []) = v20316 |> System.IO.File.ReadAllBytes
                                                let v20372 : string = "$0.to_vec()"
                                                let v20373 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20371 v20372 
                                                let _v20354 = v20373 
                                                #endif
                                                let v20374 : Vec<uint8> = _v20354 
                                                let v20379 : Vec<uint8> = method14(v20374)
                                                let v20380 : string = "std::string::String::from_utf8($0)"
                                                let v20381 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v20379 v20380 
                                                let v20382 : string = "$0.unwrap()"
                                                let v20383 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20381 v20382 
                                                let v20384 : string = "fable_library_rust::String_::fromString($0)"
                                                let v20385 : string = Fable.Core.RustInterop.emitRustExpr v20383 v20384 
                                                let _v20353 = v20385 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v20386 : string = null |> unbox<string>
                                                let _v20353 = v20386 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v20389 : string = null |> unbox<string>
                                                let _v20353 = v20389 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v20392 : string = null |> unbox<string>
                                                let _v20353 = v20392 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v20395 : string = null |> unbox<string>
                                                let _v20353 = v20395 
                                                #endif
#else
                                                let v20398 : string = v20316 |> System.IO.File.ReadAllText
                                                let _v20353 = v20398 
                                                #endif
                                                let v20399 : string = _v20353 
                                                let v20404 : string = "py"
                                                let v20405 : string = $"%A{struct (v20404, v20399)}"
                                                let v20408 : string = method89(v20405)
                                                let v20409 : string = __SOURCE_DIRECTORY__
                                                let v20410 : string = "polyglot"
                                                let v20411 : string = ".devcontainer"
                                                let v20412 : string = method15(v20410, v20411)
                                                let v20413 : US12 = method18(v20412, v20409)
                                                let v21215 : US1 =
                                                    match v20413 with
                                                    | US12_1(v20416) -> (* Error *)
                                                        let v20417 : unit = ()
                                                        let v20418 : (unit -> unit) = closure21(v20416)
                                                        let v20419 : unit = (fun () -> v20418 (); v20417) ()
                                                        US1_1
                                                    | US12_0(v20414) -> (* Ok *)
                                                        US1_0(v20414)
                                                let v22024 : US1 =
                                                    match v21215 with
                                                    | US1_1 -> (* None *)
                                                        let v21218 : string = method23()
                                                        let v21219 : string = method15(v20410, v20411)
                                                        let v21220 : US12 = method18(v21219, v21218)
                                                        match v21220 with
                                                        | US12_1(v21223) -> (* Error *)
                                                            let v21224 : unit = ()
                                                            let v21225 : (unit -> unit) = closure21(v21223)
                                                            let v21226 : unit = (fun () -> v21225 (); v21224) ()
                                                            US1_1
                                                        | US12_0(v21221) -> (* Ok *)
                                                            US1_0(v21221)
                                                    | US1_0(v21216) -> (* Some *)
                                                        US1_0(v21216)
                                                let v22028 : string =
                                                    match v22024 with
                                                    | US1_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US1_0(v22025) -> (* Some *)
                                                        v22025
                                                let v22029 : string = method15(v22028, v20410)
                                                let v22030 : string = method23()
                                                let v22031 : (unit -> string) = v22030.ToLower
                                                let v22032 : string = v22031 ()
                                                let v22035 : (unit -> string) = v22029.ToLower
                                                let v22036 : string = v22035 ()
                                                let v22039 : bool = v22032.StartsWith v22036 
                                                let v22044 : US12 =
                                                    if v22039 then
                                                        US12_1(v22036)
                                                    else
                                                        US12_0(v22036)
                                                let v22050 : Result<string, string> =
                                                    match v22044 with
                                                    | US12_1(v22047) -> (* Error *)
                                                        let v22048 : Result<string, string> = Error v22047 
                                                        v22048
                                                    | US12_0(v22045) -> (* Ok *)
                                                        let v22046 : Result<string, string> = Ok v22045 
                                                        v22046
                                                let v22051 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                let v22052 : bool = Fable.Core.RustInterop.emitRustExpr v22050 v22051 
                                                let v22053 : string = "x"
                                                let v22054 : string = Fable.Core.RustInterop.emitRustExpr () v22053 
                                                let v22055 : string = "true; $0 })"
                                                let v22056 : bool = Fable.Core.RustInterop.emitRustExpr v22054 v22055 
                                                let v22057 : string = "_result_unwrap_or_else"
                                                let v22058 : string = Fable.Core.RustInterop.emitRustExpr () v22057 
                                                let v22059 : string = "target/spiral_builder"
                                                let v22060 : string = method15(v22058, v22059)
                                                let v22061 : string = "spiral_builder"
                                                let v22062 : string = method15(v22060, v22061)
                                                let v22063 : string = "packages"
                                                let v22064 : string = method15(v22062, v22063)
                                                
                                                
                                                
                                                let v22065 : string = "Python"
                                                let v22066 : string = method15(v22064, v22065)
                                                let v22067 : string = method15(v22066, v20408)
                                                let v22068 : System.IDisposable = method28(v22067)
                                                let v22069 : string = $"{v22061}.fs"
                                                let v22070 : string = method15(v22067, v22069)
                                                let v22071 : string = method80(v22070)
                                                method25(v22071, v20399)
                                                let v22072 : string list = []
                                                let v22073 : string seq = seq { for i = 0 to v22072.Length - 1 do yield v22072.[i] }
                                                let v22076 : (string -> (string seq -> string)) = String.concat
                                                let v22077 : string = "\\n        "
                                                let v22078 : (string seq -> string) = v22076 v22077
                                                let v22079 : string = v22078 v22073
                                                let v22082 : string = "Fable.Core"
                                                let v22083 : string = $"<PackageReference Include=\"{v22082}\" Version=\"*\" />"
                                                let v22084 : string list = []
                                                let v22085 : string list = v22083 :: v22084 
                                                let v22088 : string seq = seq { for i = 0 to v22085.Length - 1 do yield v22085.[i] }
                                                let v22091 : (string -> (string seq -> string)) = String.concat
                                                let v22092 : (string seq -> string) = v22091 v22077
                                                let v22093 : string = v22092 v22088
                                                let v22096 : string = $"{v22061}.fsproj"
                                                let v22097 : string = method15(v22067, v22096)
                                                let v22098 : string = method80(v22097)
                                                let v22099 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                                let v22100 : string = $"<PropertyGroup>"
                                                let v22101 : string = "\n"
                                                let v22102 : string = v22099 + v22101 
                                                let v22103 : string = v22102 + v22100 
                                                let v22104 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                                let v22105 : string = v22103 + v22101 
                                                let v22106 : string = v22105 + v22104 
                                                let v22107 : string = $"    <LangVersion>preview</LangVersion>"
                                                let v22108 : string = v22106 + v22101 
                                                let v22109 : string = v22108 + v22107 
                                                let v22110 : string = $"    <RollForward>Major</RollForward>"
                                                let v22111 : string = v22109 + v22101 
                                                let v22112 : string = v22111 + v22110 
                                                let v22113 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                                let v22114 : string = v22112 + v22101 
                                                let v22115 : string = v22114 + v22113 
                                                let v22116 : string = $"    <PublishAot>false</PublishAot>"
                                                let v22117 : string = v22115 + v22101 
                                                let v22118 : string = v22117 + v22116 
                                                let v22119 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                                let v22120 : string = v22118 + v22101 
                                                let v22121 : string = v22120 + v22119 
                                                let v22122 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                                let v22123 : string = v22121 + v22101 
                                                let v22124 : string = v22123 + v22122 
                                                let v22125 : string = $"    <SelfContained>true</SelfContained>"
                                                let v22126 : string = v22124 + v22101 
                                                let v22127 : string = v22126 + v22125 
                                                let v22128 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                                let v22129 : string = v22127 + v22101 
                                                let v22130 : string = v22129 + v22128 
                                                let v22131 : string = $"    <OutputType>Exe</OutputType>"
                                                let v22132 : string = v22130 + v22101 
                                                let v22133 : string = v22132 + v22131 
                                                let v22134 : string = $"</PropertyGroup>"
                                                let v22135 : string = v22133 + v22101 
                                                let v22136 : string = v22135 + v22134 
                                                let v22137 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                                let v22138 : string = v22136 + v22101 
                                                let v22139 : string = v22138 + v22137 
                                                let v22140 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                                let v22141 : string = v22139 + v22101 
                                                let v22142 : string = v22141 + v22140 
                                                let v22143 : string = $"</PropertyGroup>"
                                                let v22144 : string = v22142 + v22101 
                                                let v22145 : string = v22144 + v22143 
                                                let v22146 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                                let v22147 : string = v22145 + v22101 
                                                let v22148 : string = v22147 + v22146 
                                                let v22149 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                                let v22150 : string = v22148 + v22101 
                                                let v22151 : string = v22150 + v22149 
                                                let v22152 : string = $"</PropertyGroup>"
                                                let v22153 : string = v22151 + v22101 
                                                let v22154 : string = v22153 + v22152 
                                                let v22155 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                                let v22156 : string = v22154 + v22101 
                                                let v22157 : string = v22156 + v22155 
                                                let v22158 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                                let v22159 : string = v22157 + v22101 
                                                let v22160 : string = v22159 + v22158 
                                                let v22161 : string = $"</PropertyGroup>"
                                                let v22162 : string = v22160 + v22101 
                                                let v22163 : string = v22162 + v22161 
                                                let v22164 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                                let v22165 : string = v22163 + v22101 
                                                let v22166 : string = v22165 + v22164 
                                                let v22167 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                                let v22168 : string = v22166 + v22101 
                                                let v22169 : string = v22168 + v22167 
                                                let v22170 : string = $"</PropertyGroup>"
                                                let v22171 : string = v22169 + v22101 
                                                let v22172 : string = v22171 + v22170 
                                                let v22173 : string = $"<ItemGroup>"
                                                let v22174 : string = v22172 + v22101 
                                                let v22175 : string = v22174 + v22173 
                                                let v22176 : string = $"    {v22079}"
                                                let v22177 : string = v22175 + v22101 
                                                let v22178 : string = v22177 + v22176 
                                                let v22179 : string = $"    <Compile Include=\"{v22071}\" />"
                                                let v22180 : string = v22178 + v22101 
                                                let v22181 : string = v22180 + v22179 
                                                let v22182 : string = $"</ItemGroup>"
                                                let v22183 : string = v22181 + v22101 
                                                let v22184 : string = v22183 + v22182 
                                                let v22185 : string = $"<ItemGroup>"
                                                let v22186 : string = v22184 + v22101 
                                                let v22187 : string = v22186 + v22185 
                                                let v22188 : string = $"    {v22093}"
                                                let v22189 : string = v22187 + v22101 
                                                let v22190 : string = v22189 + v22188 
                                                let v22191 : string = $"</ItemGroup>"
                                                let v22192 : string = v22190 + v22101 
                                                let v22193 : string = v22192 + v22191 
                                                let v22194 : string = $"</Project>"
                                                let v22195 : string = v22193 + v22101 
                                                let v22196 : string = v22195 + v22194 
                                                method25(v22098, v22196)
                                                let v22197 : string = "lib/python/fable/fable_modules"
                                                let v22198 : string = method15(v22058, v22197)
                                                let v22199 : string = $"fable_library"
                                                let v22200 : string = method15(v22198, v22199)
                                                let v22201 : string = $"fable_modules/fable_library"
                                                let v22202 : string = method15(v22067, v22201)
                                                method96(v22200, v22202)
                                                let v22203 : US33 = US33_1
                                                let struct (v22204 : int32, v22205 : string) = method97(v22203, v22067, v20404, v22098, v22044)
                                                let v22206 : bool = v22204 <> 0 
                                                let struct (v24941 : US1, v24942 : US1, v24943 : US1) =
                                                    if v22206 then
                                                        let v22209 : unit = ()
                                                        let v22210 : (unit -> unit) = closure114(v22205, v22204)
                                                        let v22211 : unit = (fun () -> v22210 (); v22209) ()
                                                        let v23041 : US1 = US1_0(v20404)
                                                        let v23042 : US1 = US1_1
                                                        let v23043 : US1 = US1_0(v22205)
                                                        struct (v23041, v23042, v23043)
                                                    else
                                                        let v23044 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                        let v23045 : bool = Fable.Core.RustInterop.emitRustExpr v20351 v23044 
                                                        let v23046 : string = "x"
                                                        let v23047 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v23046 
                                                        let v23048 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v23049 : string = Fable.Core.RustInterop.emitRustExpr v23047 v23048 
                                                        let v23050 : string = "="
                                                        let v23051 : bool = v23049.Contains v23050 
                                                        let v23055 : string =
                                                            if v23051 then
                                                                v23049
                                                            else
                                                                let v23054 : string = $"\"{v23049}\":\"*\""
                                                                v23054
                                                        let v23056 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v23057 : bool = Fable.Core.RustInterop.emitRustExpr v23055 v23056 
                                                        let v23058 : string = "_vec_map"
                                                        let v23059 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v23058 
                                                        let v23060 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                        let v23061 : (string []) = Fable.Core.RustInterop.emitRustExpr v23059 v23060 
                                                        let v23062 : string seq = seq { for i = 0 to v23061.Length - 1 do yield v23061.[i] }
                                                        let v23065 : (string -> (string seq -> string)) = String.concat
                                                        let v23066 : string = ",\n"
                                                        let v23067 : (string seq -> string) = v23065 v23066
                                                        let v23068 : string = v23067 v23062
                                                        let v23071 : string = $"{{"
                                                        let v23072 : string = $"  \"name\": \"spiral_builder_{v20408}\","
                                                        let v23073 : string = v23071 + v23072 
                                                        let v23074 : string = $"  \"dependencies\": {{"
                                                        let v23075 : string = v23073 + v23074 
                                                        let v23076 : string = v23075 + v23068 
                                                        let v23077 : string = $"  }},"
                                                        let v23078 : string = v23076 + v23077 
                                                        let v23079 : string = $"    \"devDependencies\": {{"
                                                        let v23080 : string = v23078 + v23079 
                                                        let v23081 : string = $"  }},"
                                                        let v23082 : string = v23080 + v23081 
                                                        let v23083 : string = $"}}"
                                                        let v23084 : string = v23082 + v23083 
                                                        let v23085 : string = "package.json"
                                                        let v23086 : string = method15(v22067, v23085)
                                                        let v23087 : string = "../.."
                                                        let v23088 : string = method15(v22067, v23087)
                                                        let v23089 : string = method15(v23088, v23085)
                                                        method25(v23086, v23084)
                                                        let v23090 : string = ""
                                                        method25(v23089, v23090)
                                                        let v23091 : string = $"{v22061}.{v20404}"
                                                        let v23092 : string = method15(v22067, v23091)
                                                        let v23093 : unit = ()
                                                        let v23094 : (unit -> unit) = closure115(v23092)
                                                        let v23095 : unit = (fun () -> v23094 (); v23093) ()
                                                        let v23887 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v23888 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v23889 : string = "std::fs::read(&*$0)"
                                                        let v23890 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23092 v23889 
                                                        let v23891 : string = "$0.unwrap()"
                                                        let v23892 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v23890 v23891 
                                                        let _v23888 = v23892 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v23893 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v23888 = v23893 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v23896 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v23888 = v23896 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v23899 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v23888 = v23899 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v23902 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v23888 = v23902 
                                                        #endif
#else
                                                        let v23905 : (uint8 []) = v23092 |> System.IO.File.ReadAllBytes
                                                        let v23906 : string = "$0.to_vec()"
                                                        let v23907 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v23905 v23906 
                                                        let _v23888 = v23907 
                                                        #endif
                                                        let v23908 : Vec<uint8> = _v23888 
                                                        let v23913 : Vec<uint8> = method14(v23908)
                                                        let v23914 : string = "std::string::String::from_utf8($0)"
                                                        let v23915 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v23913 v23914 
                                                        let v23916 : string = "$0.unwrap()"
                                                        let v23917 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23915 v23916 
                                                        let v23918 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v23919 : string = Fable.Core.RustInterop.emitRustExpr v23917 v23918 
                                                        let _v23887 = v23919 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v23920 : string = null |> unbox<string>
                                                        let _v23887 = v23920 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v23923 : string = null |> unbox<string>
                                                        let _v23887 = v23923 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v23926 : string = null |> unbox<string>
                                                        let _v23887 = v23926 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v23929 : string = null |> unbox<string>
                                                        let _v23887 = v23929 
                                                        #endif
#else
                                                        let v23932 : string = v23092 |> System.IO.File.ReadAllText
                                                        let _v23887 = v23932 
                                                        #endif
                                                        let v23933 : string = _v23887 
                                                        let v23938 : string = "# spiral_builder.process_python"
                                                        let v23939 : bool = v23933.Contains v23938 
                                                        let v23980 : string =
                                                            if v23939 then
                                                                v23933
                                                            else
                                                                let v23942 : string = "\";\".into()"
                                                                let v23943 : string = Fable.Core.RustInterop.emitRustExpr () v23942 
                                                                let v23944 : string = "),)"
                                                                let v23945 : string = v23944 + v23943 
                                                                let v23946 : string = "));"
                                                                let v23947 : string = v23933.Replace (v23945, v23946)
                                                                let v23948 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v23949 : string = " defaultOf::<()>();"
                                                                let v23950 : unit = ()
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v23951 : string = $"regex::Regex::new(&$0)"
                                                                let v23952 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v23948 v23951 
                                                                let v23953 : string = "$0.unwrap()"
                                                                let v23954 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v23952 v23953 
                                                                let v23955 : string = method81(v23947)
                                                                let v23956 : string = $"$0.replace_all(&*$1, &*$2)"
                                                                let v23957 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v23954, v23955, v23949) v23956 
                                                                let v23958 : string = "String::from($0)"
                                                                let v23959 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23957 v23958 
                                                                let v23960 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v23961 : string = Fable.Core.RustInterop.emitRustExpr v23959 v23960 
                                                                let _v23950 = v23961 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v23962 : string = null |> unbox<string>
                                                                let _v23950 = v23962 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v23965 : string = null |> unbox<string>
                                                                let _v23950 = v23965 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                let v23968 : string = null |> unbox<string>
                                                                let _v23950 = v23968 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                let v23971 : string = null |> unbox<string>
                                                                let _v23950 = v23971 
                                                                #endif
#else
                                                                let v23974 : string = System.Text.RegularExpressions.Regex.Replace (v23947, v23948, v23949)
                                                                let _v23950 = v23974 
                                                                #endif
                                                                let v23975 : string = _v23950 
                                                                v23975
                                                        let v23981 : bool = v23939 = false
                                                        if v23981 then
                                                            let v23982 : string = $"{v23980}\n\n{v23938}\n"
                                                            method25(v23092, v23982)
                                                        let v23983 : string = $"python \"{v23092}\""
                                                        let v23984 : string = "TRACE_LEVEL"
                                                        let v23985 : string = "Verbose"
                                                        let v23986 : (struct (string * string) []) = [|struct (v23984, v23985)|]
                                                        let v23987 : System.Threading.CancellationToken option = None
                                                        let v23988 : (struct (string * string) []) = [||]
                                                        let v23989 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v23990 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v23991 : string option = None
                                                        let v23997 : Result<string, string> =
                                                            match v22044 with
                                                            | US12_1(v23994) -> (* Error *)
                                                                let v23995 : Result<string, string> = Error v23994 
                                                                v23995
                                                            | US12_0(v23992) -> (* Ok *)
                                                                let v23993 : Result<string, string> = Ok v23992 
                                                                v23993
                                                        let v23998 : string = "$0.ok()"
                                                        let v23999 : string option = Fable.Core.RustInterop.emitRustExpr v23997 v23998 
                                                        let v24000 : bool = true
                                                        let struct (v24001 : int32, v24002 : string) = method40(v23983, v23987, v23986, v23989, v23990, v24000, v23999)
                                                        let v24003 : int32 = v23986.Length
                                                        let v24004 : (string []) = Array.zeroCreate<string> (v24003)
                                                        let v24005 : Mut5 = {l0 = 0} : Mut5
                                                        while method43(v24003, v24005) do
                                                            let v24007 : int32 = v24005.l0
                                                            let struct (v24008 : string, v24009 : string) = v23986.[int v24007]
                                                            let v24010 : string = $"$env:{v24008}=''{v24009}''"
                                                            v24004.[int v24007] <- v24010
                                                            let v24011 : int32 = v24007 + 1
                                                            v24005.l0 <- v24011
                                                            ()
                                                        let v24012 : string seq = v24004 |> Seq.ofArray
                                                        let v24015 : (string -> (string seq -> string)) = String.concat
                                                        let v24016 : string = ";"
                                                        let v24017 : (string seq -> string) = v24015 v24016
                                                        let v24018 : string = v24017 v24012
                                                        let v24021 : string = $"pwsh -c '{v24018}; {v23983}'"
                                                        let v24022 : bool = v24001 = 0
                                                        let struct (v24938 : US1, v24939 : US1, v24940 : US1) =
                                                            if v24022 then
                                                                let v24023 : (string -> US1) = closure68()
                                                                let v24024 : (unit -> string) = closure116(v24002)
                                                                let v24025 : (exn -> US1) = closure117(v23092, v24002, v24021)
                                                                let v24026 : US1 = US1_1
                                                                let result = ref v24026
                                                                try
                                                                    result.Value <- v24024 () |> v24023 
                                                                with ex ->
                                                                    result.Value <- v24025 ex 
                                                                let v24027 : US1 = result.Value
                                                                let v24037 : string option =
                                                                    match v24027 with
                                                                    | US1_1 -> (* None *)
                                                                        let v24035 : string option = None
                                                                        v24035
                                                                    | US1_0(v24031) -> (* Some *)
                                                                        let v24032 : string option = Some v24031 
                                                                        v24032
                                                                let v24038 : string = "$0.unwrap()"
                                                                let v24039 : string = Fable.Core.RustInterop.emitRustExpr v24037 v24038 
                                                                let v24040 : US1 = US1_0(v20404)
                                                                let v24041 : US1 = US1_0(v23980)
                                                                let v24042 : US1 = US1_0(v24039)
                                                                struct (v24040, v24041, v24042)
                                                            else
                                                                let v24043 : unit = ()
                                                                let v24044 : (unit -> unit) = closure119(v23092, v24002, v24001, v24021)
                                                                let v24045 : unit = (fun () -> v24044 (); v24043) ()
                                                                let v24935 : US1 = US1_0(v20404)
                                                                let v24936 : US1 = US1_1
                                                                let v24937 : US1 = US1_1
                                                                struct (v24935, v24936, v24937)
                                                        struct (v24938, v24939, v24940)
                                                struct (v24941, v24942, v24943)
                                            else
                                                let v24944 : unit = ()
                                                let v24945 : (unit -> unit) = closure120(v34, v33)
                                                let v24946 : unit = (fun () -> v24945 (); v24944) ()
                                                let v25831 : US1 = US1_1
                                                let v25832 : US1 = US1_1
                                                let v25833 : US1 = US1_1
                                                struct (v25831, v25832, v25833)
                                        struct (v25834, v25835, v25836)
                                struct (v25837, v25838, v25839)
                        let v25846 : string =
                            match v25840 with
                            | US1_1 -> (* None *)
                                let v25844 : string = ""
                                v25844
                            | US1_0(v25843) -> (* Some *)
                                v25843
                        let v25847 : string = "extension"
                        let v25851 : string =
                            match v25841 with
                            | US1_1 -> (* None *)
                                let v25849 : string = ""
                                v25849
                            | US1_0(v25848) -> (* Some *)
                                v25848
                        let v25852 : string = "code"
                        let v25856 : string =
                            match v25842 with
                            | US1_1 -> (* None *)
                                let v25854 : string = ""
                                v25854
                            | US1_0(v25853) -> (* Some *)
                                v25853
                        let v25857 : string = "output"
                        [|struct (v25847, v25846); struct (v25852, v25851); struct (v25857, v25856)|]
        | _ ->
            let v25862 : string = "extension"
            let v25863 : string = ""
            let v25864 : string = "code"
            let v25865 : string = "output"
            [|struct (v25862, v25863); struct (v25864, v25863); struct (v25865, v25863)|]
    let v25868 : string = "$0.to_vec()"
    let v25869 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v25867 v25868 
    let v25870 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v25871 : (struct (string * string) -> (std_string_String * std_string_String)) = closure121()
    let v25872 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v25869, v25871) v25870 
    let v25873 : string = "std::collections::BTreeMap::from_iter(v25872.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v25874 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v25873 
    let v25875 : string = "serde_json::to_string(&v25874)"
    let v25876 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v25875 
    let v25877 : (serde_json_Error -> string) = method117()
    let v25878 : string = "$0.map_err(|x| $1(x))"
    let v25879 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v25876, v25877) v25878 
    let v25880 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v25881 : bool = Fable.Core.RustInterop.emitRustExpr v25879 v25880 
    let v25882 : string = "x"
    let v25883 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v25882 
    let v25884 : string = "fable_library_rust::String_::fromString($0)"
    let v25885 : string = Fable.Core.RustInterop.emitRustExpr v25883 v25884 
    let v25886 : string = "true; $0 })"
    let v25887 : bool = Fable.Core.RustInterop.emitRustExpr v25885 v25886 
    let v25888 : string = "_result_map_"
    let v25889 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v25888 
    let v25890 : Result<string, string> = method118(v25889)
    let v25891 : string = ""
    let v25892 : string = "}"
    let v25893 : string = v25891 + v25892 
    let v25894 : string = "true; v25890 " + v25893 + "); " + v25891 + " // rust.fix_closure'"
    let v25895 : bool = Fable.Core.RustInterop.emitRustExpr () v25894 
    let v25896 : string = "__future_init"
    let v25897 : _ = Fable.Core.RustInterop.emitRustExpr () v25896 
    let v25898 : string = "v25897"
    let v25899 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v25898 
    v25899
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure6(v0)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v836 : clap_Command = method0()
    let v837 : string = "clap::Command::get_matches($0)"
    let v838 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v836 v837 
    let v839 : US0 = v21.l0
    let v840 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method10(v839, v838)
    let v841 : string = $"tokio::runtime::Builder::new_multi_thread().enable_all().build().unwrap()"
    let v842 : _ = Fable.Core.RustInterop.emitRustExpr () v841 
    let v843 : string = "v842.handle().block_on($0)"
    let v844 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v840 v843 
    let v845 : string = "$0.unwrap()"
    let v846 : string = Fable.Core.RustInterop.emitRustExpr v844 v845 
    let v847 : US0 = v21.l0
    let v848 : bool =
        match v847 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v848 then
        let v849 : unit = ()
        let v850 : (unit -> unit) = closure12(v846)
        let v851 : unit = (fun () -> v850 (); v849) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
