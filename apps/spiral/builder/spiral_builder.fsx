#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::File")>]
#endif
type std_fs_File = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
#endif
type std_path_Display = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Path")>]
#endif
type std_path_Path = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
#endif
type std_path_PathBuf = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
#endif
type core_any_Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func0<$0>")>]
#endif
type Func0<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn() -> $0")>]
#endif
type Fn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn()")>]
#endif
type FnUnit = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("FnOnce() -> $0")>]
#endif
type FnOnce<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn($0)")>]
#endif
type ActionFn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn($0, $1)")>]
#endif
type ActionFn2<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("impl $0")>]
#endif
type Impl<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("MutCell<$0>")>]
#endif
type MutCell<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::any::Any")>]
#endif
type std_any_Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::cell::RefCell<$0>")>]
#endif
type std_cell_RefCell<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::rc::Rc<$0>")>]
#endif
type std_rc_Rc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::rc::Weak<$0>")>]
#endif
type std_rc_Weak<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("base64::DecodeError")>]
#endif
type base64_DecodeError = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("borsh::io::Error")>]
#endif
type borsh_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("js_sys::JsString")>]
#endif
type js_sys_JsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Value")>]
#endif
type serde_json_Value = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_wasm_bindgen::Error")>]
#endif
type serde_wasm_bindgen_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fmt::Display<$0>")>]
#endif
type std_fmt_Display<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::slice::Windows<$0>")>]
#endif
type std_slice_Windows<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Match")>]
#endif
type regex_Match = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::time::Duration")>]
#endif
type std_time_Duration = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("tokio::io::BufReader<$0>")>]
#endif
type tokio_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("futures::future::JoinAll<$0>")>]
#endif
type futures_future_JoinAll<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("futures::future::TryJoinAll<$0>")>]
#endif
type futures_future_TryJoinAll<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("tokio::prelude::stream::Fuse<$0>")>]
#endif
type futures_future_Fuse<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("tokio::task::JoinHandle<$0>")>]
#endif
type tokio_task_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("tokio_stream::StreamExt")>]
#endif
type tokio_stream_StreamExt = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::iter::Fuse<$0>")>]
#endif
type core_iter_Fuse<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
module State = let mutable trace_state = None
type IOsEnviron = abstract environ: x: unit -> obj
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = unit
  type DataReceivedEventArgs = unit
#endif
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0 of f0_0 : string
    | US3_1
and Mut4 = {mutable l0 : string}
and [<Struct>] US4 =
    | US4_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : std_string_String
    | US5_1
and [<Struct>] US8 =
    | US8_0
    | US8_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : US8
    | US7_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : US7
    | US6_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : Vec<std_string_String>
    | US9_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
    | US10_2
and [<Struct>] US11 =
    | US11_0 of f0_0 : US10
    | US11_1 of f1_0 : US10
    | US11_2 of f2_0 : US10
    | US11_3 of f3_0 : US10
    | US11_4 of f4_0 : US10
and [<Struct>] US12 =
    | US12_0 of f0_0 : string
    | US12_1 of f1_0 : string
and [<Struct>] US13 =
    | US13_0 of f0_0 : string * f0_1 : US3
    | US13_1 of f1_0 : string
and [<Struct>] US14 =
    | US14_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US14_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US14) * UH1
and [<Struct>] US15 =
    | US15_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and [<Struct>] US16 =
    | US16_0 of f0_0 : char
    | US16_1
and [<Struct>] US17 =
    | US17_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US17_1 of f1_0 : string
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : US3 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : US16 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US3 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : (string [])
    | US21_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US22 =
    | US22_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US22_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH3
and [<Struct>] US23 =
    | US23_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US23_1 of f1_0 : std_string_String
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US24_1
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_string_String
    | US25_1 of f1_0 : std_string_String
and [<Struct>] US26 =
    | US26_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US26_1
and [<Struct>] US27 =
    | US27_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_process_Output
    | US28_1 of f1_0 : std_string_String
and [<Struct>] US29 =
    | US29_0 of f0_0 : int32
    | US29_1
and [<Struct>] US30 =
    | US30_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : System.Threading.CancellationToken
    | US31_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US32 =
    | US32_0
    | US32_1 of f1_0 : std_string_String
and [<Struct>] US33 =
    | US33_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : int32 * f0_1 : string
    | US34_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US35 =
    | US35_0 of f0_0 : std_collections_HashMap<string, string>
    | US35_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : US3
    | US36_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US37 =
    | US37_0
    | US37_1
    | US37_2
and [<Struct>] US38 =
    | US38_0 of f0_0 : std_fs_FileType
    | US38_1 of f1_0 : std_string_String
and [<Struct>] US39 =
    | US39_0 of f0_0 : async_walkdir_DirEntry
    | US39_1 of f1_0 : std_string_String
and [<Struct>] US40 =
    | US40_0 of f0_0 : string * f0_1 : string
    | US40_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    let v60 : string list = []
    let v61 : string = "Poetry"
    let v62 : string list = v61 :: v60 
    let v63 : string = "Pip"
    let v64 : string list = v63 :: v62 
    let v65 : (string list -> (string [])) = List.toArray
    let v66 : (string []) = v65 v64
    let v67 : string = "$0.to_vec()"
    let v68 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let v69 : string = "true; let _result : Vec<_> = v68.into_iter().map(|x| { //"
    let v70 : bool = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = "x"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : string = "&*$0"
    let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v72 v73 
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "Box::new($0)"
    let v78 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : string = "Box::leak($0)"
    let v80 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v82 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "true; $0 }).collect::<Vec<_>>()"
    let v84 : bool = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "_result"
    let v86 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v85 
    let v87 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v88 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : string = "$0.value_parser($1)"
    let v90 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v88) v89 
    let v91 : string = "clap::Command::arg($0, $1)"
    let v92 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v90) v91 
    let v93 : string = "NAME"
    let v94 : string = "r#\"" + v93 + "\"#"
    let v95 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "VERSION"
    let v97 : string = "r#\"" + v96 + "\"#"
    let v98 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v97 
    let v99 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v95; v98|]
    let v100 : unativeint = 1 |> unativeint 
    let v101 : unativeint = 0 |> unativeint 
    let v102 : bool = v101 = v101 
    let v107 : clap_builder_ValueRange =
        if v102 then
            let v103 : string = "clap::builder::ValueRange::new(v100..)"
            let v104 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v103 
            v104
        else
            let v105 : string = "clap::builder::ValueRange::new(v100..v101)"
            let v106 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v105 
            v106
    let v108 : string = "deps"
    let v109 : string = "r#\"" + v108 + "\"#"
    let v110 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "clap::Arg::new($0)"
    let v112 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.short($1)"
    let v114 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v112, 'd') v113 
    let v115 : string = "r#\"" + v108 + "\"#"
    let v116 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v115 
    let v117 : string = "$0.long($1)"
    let v118 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v114, v116) v117 
    let v119 : string = "$0.to_vec()"
    let v120 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v99 v119 
    let v121 : string = "$0.value_names($1)"
    let v122 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v118, v120) v121 
    let v123 : string = "$0.num_args($1)"
    let v124 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v122, v107) v123 
    let v125 : string = "clap::ArgAction::Append"
    let v126 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v125 
    let v127 : string = "$0.action($1)"
    let v128 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v124, v126) v127 
    let v129 : string = "clap::Command::arg($0, $1)"
    let v130 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v92, v128) v129 
    let v131 : string = "clap::Command::subcommand($0, v130)"
    let v132 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v131 
    let v133 : string = "fable"
    let v134 : string = "r#\"" + v133 + "\"#"
    let v135 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v134 
    let v136 : string = "clap::Command::new($0)"
    let v137 : clap_Command = Fable.Core.RustInterop.emitRustExpr v135 v136 
    let v138 : string = "fs-path"
    let v139 : string = "r#\"" + v138 + "\"#"
    let v140 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v139 
    let v141 : string = "clap::Arg::new($0)"
    let v142 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v140 v141 
    let v143 : string = "$0.short($1)"
    let v144 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v142, 'f') v143 
    let v145 : string = "r#\"" + v138 + "\"#"
    let v146 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v145 
    let v147 : string = "$0.long($1)"
    let v148 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v144, v146) v147 
    let v149 : string = "$0.required($1)"
    let v150 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v148, true) v149 
    let v151 : string = "clap::Command::arg($0, $1)"
    let v152 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v137, v150) v151 
    let v153 : string = "r#\"" + v0 + "\"#"
    let v154 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v153 
    let v155 : string = "clap::Arg::new($0)"
    let v156 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v154 v155 
    let v157 : string = "$0.short($1)"
    let v158 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v156, 'c') v157 
    let v159 : string = "r#\"" + v0 + "\"#"
    let v160 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v159 
    let v161 : string = "$0.long($1)"
    let v162 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v158, v160) v161 
    let v163 : string = "clap::Command::arg($0, $1)"
    let v164 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v152, v162) v163 
    let v165 : string = "clap::Command::subcommand($0, v164)"
    let v166 : clap_Command = Fable.Core.RustInterop.emitRustExpr v132 v165 
    let v167 : string = "rust"
    let v168 : string = "r#\"" + v167 + "\"#"
    let v169 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v168 
    let v170 : string = "clap::Command::new($0)"
    let v171 : clap_Command = Fable.Core.RustInterop.emitRustExpr v169 v170 
    let v172 : string = "r#\"" + v138 + "\"#"
    let v173 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v172 
    let v174 : string = "clap::Arg::new($0)"
    let v175 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v173 v174 
    let v176 : string = "$0.short($1)"
    let v177 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v175, 'f') v176 
    let v178 : string = "r#\"" + v138 + "\"#"
    let v179 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v178 
    let v180 : string = "$0.long($1)"
    let v181 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v177, v179) v180 
    let v182 : string = "$0.required($1)"
    let v183 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v181, true) v182 
    let v184 : string = "clap::Command::arg($0, $1)"
    let v185 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v171, v183) v184 
    let v186 : string = "r#\"" + v93 + "\"#"
    let v187 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : string = "r#\"" + v96 + "\"#"
    let v189 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v188 
    let v190 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v187; v189|]
    let v191 : unativeint = 1 |> unativeint 
    let v192 : unativeint = 0 |> unativeint 
    let v193 : bool = v192 = v192 
    let v198 : clap_builder_ValueRange =
        if v193 then
            let v194 : string = "clap::builder::ValueRange::new(v191..)"
            let v195 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v194 
            v195
        else
            let v196 : string = "clap::builder::ValueRange::new(v191..v192)"
            let v197 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v196 
            v197
    let v199 : string = "r#\"" + v108 + "\"#"
    let v200 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v199 
    let v201 : string = "clap::Arg::new($0)"
    let v202 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v200 v201 
    let v203 : string = "$0.short($1)"
    let v204 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v202, 'd') v203 
    let v205 : string = "r#\"" + v108 + "\"#"
    let v206 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v205 
    let v207 : string = "$0.long($1)"
    let v208 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v204, v206) v207 
    let v209 : string = "$0.to_vec()"
    let v210 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v190 v209 
    let v211 : string = "$0.value_names($1)"
    let v212 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v208, v210) v211 
    let v213 : string = "$0.num_args($1)"
    let v214 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v212, v198) v213 
    let v215 : string = "clap::ArgAction::Append"
    let v216 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v215 
    let v217 : string = "$0.action($1)"
    let v218 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v214, v216) v217 
    let v219 : string = "clap::Command::arg($0, $1)"
    let v220 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v185, v218) v219 
    let v221 : string = "clap::Command::subcommand($0, v220)"
    let v222 : clap_Command = Fable.Core.RustInterop.emitRustExpr v166 v221 
    let v223 : string = "typescript"
    let v224 : string = "r#\"" + v223 + "\"#"
    let v225 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v224 
    let v226 : string = "clap::Command::new($0)"
    let v227 : clap_Command = Fable.Core.RustInterop.emitRustExpr v225 v226 
    let v228 : string = "r#\"" + v138 + "\"#"
    let v229 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v228 
    let v230 : string = "clap::Arg::new($0)"
    let v231 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v229 v230 
    let v232 : string = "$0.short($1)"
    let v233 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v231, 'f') v232 
    let v234 : string = "r#\"" + v138 + "\"#"
    let v235 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "$0.long($1)"
    let v237 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v233, v235) v236 
    let v238 : string = "$0.required($1)"
    let v239 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v237, true) v238 
    let v240 : string = "clap::Command::arg($0, $1)"
    let v241 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v227, v239) v240 
    let v242 : string = "r#\"" + v93 + "\"#"
    let v243 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v242 
    let v244 : string = "r#\"" + v96 + "\"#"
    let v245 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v244 
    let v246 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v243; v245|]
    let v247 : unativeint = 1 |> unativeint 
    let v248 : unativeint = 0 |> unativeint 
    let v249 : bool = v248 = v248 
    let v254 : clap_builder_ValueRange =
        if v249 then
            let v250 : string = "clap::builder::ValueRange::new(v247..)"
            let v251 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v250 
            v251
        else
            let v252 : string = "clap::builder::ValueRange::new(v247..v248)"
            let v253 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v252 
            v253
    let v255 : string = "r#\"" + v108 + "\"#"
    let v256 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v255 
    let v257 : string = "clap::Arg::new($0)"
    let v258 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v256 v257 
    let v259 : string = "$0.short($1)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v258, 'd') v259 
    let v261 : string = "r#\"" + v108 + "\"#"
    let v262 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "$0.long($1)"
    let v264 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, v262) v263 
    let v265 : string = "$0.to_vec()"
    let v266 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v246 v265 
    let v267 : string = "$0.value_names($1)"
    let v268 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v264, v266) v267 
    let v269 : string = "$0.num_args($1)"
    let v270 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v268, v254) v269 
    let v271 : string = "clap::ArgAction::Append"
    let v272 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v271 
    let v273 : string = "$0.action($1)"
    let v274 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v270, v272) v273 
    let v275 : string = "clap::Command::arg($0, $1)"
    let v276 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v241, v274) v275 
    let v277 : string = "clap::Command::subcommand($0, v276)"
    let v278 : clap_Command = Fable.Core.RustInterop.emitRustExpr v222 v277 
    let v279 : string = "python"
    let v280 : string = "r#\"" + v279 + "\"#"
    let v281 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v280 
    let v282 : string = "clap::Command::new($0)"
    let v283 : clap_Command = Fable.Core.RustInterop.emitRustExpr v281 v282 
    let v284 : string = "r#\"" + v138 + "\"#"
    let v285 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v284 
    let v286 : string = "clap::Arg::new($0)"
    let v287 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v285 v286 
    let v288 : string = "$0.short($1)"
    let v289 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v287, 'f') v288 
    let v290 : string = "r#\"" + v138 + "\"#"
    let v291 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v290 
    let v292 : string = "$0.long($1)"
    let v293 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v289, v291) v292 
    let v294 : string = "$0.required($1)"
    let v295 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v293, true) v294 
    let v296 : string = "clap::Command::arg($0, $1)"
    let v297 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v283, v295) v296 
    let v298 : string = "r#\"" + v93 + "\"#"
    let v299 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v298 
    let v300 : string = "r#\"" + v96 + "\"#"
    let v301 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v300 
    let v302 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v299; v301|]
    let v303 : unativeint = 1 |> unativeint 
    let v304 : unativeint = 0 |> unativeint 
    let v305 : bool = v304 = v304 
    let v310 : clap_builder_ValueRange =
        if v305 then
            let v306 : string = "clap::builder::ValueRange::new(v303..)"
            let v307 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v306 
            v307
        else
            let v308 : string = "clap::builder::ValueRange::new(v303..v304)"
            let v309 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v308 
            v309
    let v311 : string = "r#\"" + v108 + "\"#"
    let v312 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v311 
    let v313 : string = "clap::Arg::new($0)"
    let v314 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let v315 : string = "$0.short($1)"
    let v316 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v314, 'd') v315 
    let v317 : string = "r#\"" + v108 + "\"#"
    let v318 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v317 
    let v319 : string = "$0.long($1)"
    let v320 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v316, v318) v319 
    let v321 : string = "$0.to_vec()"
    let v322 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v302 v321 
    let v323 : string = "$0.value_names($1)"
    let v324 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v320, v322) v323 
    let v325 : string = "$0.num_args($1)"
    let v326 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v324, v310) v325 
    let v327 : string = "clap::ArgAction::Append"
    let v328 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v327 
    let v329 : string = "$0.action($1)"
    let v330 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v326, v328) v329 
    let v331 : string = "clap::Command::arg($0, $1)"
    let v332 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v297, v330) v331 
    let v333 : string = "clap::Command::subcommand($0, v332)"
    let v334 : clap_Command = Fable.Core.RustInterop.emitRustExpr v278 v333 
    let v335 : string = "dib"
    let v336 : string = "r#\"" + v335 + "\"#"
    let v337 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v336 
    let v338 : string = "clap::Command::new($0)"
    let v339 : clap_Command = Fable.Core.RustInterop.emitRustExpr v337 v338 
    let v340 : string = "path"
    let v341 : string = "r#\"" + v340 + "\"#"
    let v342 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v341 
    let v343 : string = "clap::Arg::new($0)"
    let v344 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v342 v343 
    let v345 : string = "$0.short($1)"
    let v346 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v344, 'p') v345 
    let v347 : string = "r#\"" + v340 + "\"#"
    let v348 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v347 
    let v349 : string = "$0.long($1)"
    let v350 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v346, v348) v349 
    let v351 : string = "$0.required($1)"
    let v352 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v350, true) v351 
    let v353 : string = "clap::Command::arg($0, $1)"
    let v354 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v339, v352) v353 
    let v355 : string = "u8"
    let v356 : string = "clap::value_parser!(" + v355 + ").into()"
    let v357 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v356 
    let v358 : string = "retries"
    let v359 : string = "r#\"" + v358 + "\"#"
    let v360 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v359 
    let v361 : string = "clap::Arg::new($0)"
    let v362 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v360 v361 
    let v363 : string = "$0.short($1)"
    let v364 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v362, 'r') v363 
    let v365 : string = "r#\"" + v358 + "\"#"
    let v366 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v365 
    let v367 : string = "$0.long($1)"
    let v368 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v364, v366) v367 
    let v369 : string = "$0.value_parser($1)"
    let v370 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v368, v357) v369 
    let v371 : string = "clap::Command::arg($0, $1)"
    let v372 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v354, v370) v371 
    let v373 : string = "working-directory"
    let v374 : string = "r#\"" + v373 + "\"#"
    let v375 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v374 
    let v376 : string = "clap::Arg::new($0)"
    let v377 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v375 v376 
    let v378 : string = "$0.short($1)"
    let v379 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v377, 'w') v378 
    let v380 : string = "r#\"" + v373 + "\"#"
    let v381 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v380 
    let v382 : string = "$0.long($1)"
    let v383 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v379, v381) v382 
    let v384 : string = "clap::Command::arg($0, $1)"
    let v385 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v372, v383) v384 
    let v386 : string = "clap::Command::subcommand($0, v385)"
    let v387 : clap_Command = Fable.Core.RustInterop.emitRustExpr v334 v386 
    v387
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method1 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method3 () : string =
    let v0 : string = ""
    v0
and method2 (v0 : string) : string =
    let v1 : bool = true
    let mutable _v1 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::env::var(&*$0)"
    let v3 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "true; let _result = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "fable_library_rust::String_::fromString($0)"
    let v9 : string = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_result"
    let v13 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = method3()
    let v15 : string = "$0.unwrap_or($1)"
    let v16 : string = Fable.Core.RustInterop.emitRustExpr struct (v13, v14) v15 
    v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "std::env::var(&*$0)"
    let v18 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "true; let _result = $0.map(|x| { //"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "x"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = "fable_library_rust::String_::fromString($0)"
    let v24 : string = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "true; $0 })"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "_result"
    let v28 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = method3()
    let v30 : string = "$0.unwrap_or($1)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr struct (v28, v29) v30 
    v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "std::env::var(&*$0)"
    let v33 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "true; let _result = $0.map(|x| { //"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "x"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "true; $0 })"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "_result"
    let v43 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = method3()
    let v45 : string = "$0.unwrap_or($1)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr struct (v43, v44) v45 
    v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "process.env[$0] ?? \"\""
    let v48 : string = Fable.Core.JsInterop.emitJsExpr v0 v47 
    v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = "os"
    let v50 : IOsEnviron = Fable.Core.PyInterop.importAll v49 
    let v51 : string = "v50.environ"
    let v52 : obj = Fable.Core.PyInterop.emitPyExpr () v51 
    let v53 : string = "v52.get($0)"
    let v54 : string = Fable.Core.PyInterop.emitPyExpr v0 v53 
    let mutable _v54 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v55 : (string -> string option) = Option.ofObj
    let v56 : string option = v55 v54
    v56 
    #else
    Some v54 
    #endif
    |> fun x -> _v54 <- Some x
    let v57 : string option = match _v54 with Some x -> x | None -> failwith "optionm'.of_obj / _v54=None"
    let v58 : US3 option = None
    let _v58 = ref v58 
    match v57 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v59 : string = x
    let v60 : US3 = US3_0(v59)
    v60 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v58.Value <- x
    let v61 : US3 option = _v58.Value 
    let v62 : US3 = US3_1
    let v63 : US3 = v61 |> Option.defaultValue v62 
    let v67 : string =
        match v63 with
        | US3_1 -> (* None *)
            let v65 : string = ""
            v65
        | US3_0(v64) -> (* Some *)
            v64
    v67 
    #endif
#else
    let v68 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v69 : string = v68 v0
    let mutable _v69 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v70 : (string -> string option) = Option.ofObj
    let v71 : string option = v70 v69
    v71 
    #else
    Some v69 
    #endif
    |> fun x -> _v69 <- Some x
    let v72 : string option = match _v69 with Some x -> x | None -> failwith "optionm'.of_obj / _v69=None"
    let v73 : US3 option = None
    let _v73 = ref v73 
    match v72 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v74 : string = x
    let v75 : US3 = US3_0(v74)
    v75 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v73.Value <- x
    let v76 : US3 option = _v73.Value 
    let v77 : US3 = US3_1
    let v78 : US3 = v76 |> Option.defaultValue v77 
    let v82 : string =
        match v78 with
        | US3_1 -> (* None *)
            let v80 : string = ""
            v80
        | US3_0(v79) -> (* Some *)
            v79
    v82 
    #endif
    |> fun x -> _v1 <- Some x
    let v83 : string = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v83
and method4 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure3 () (v0 : string) : unit =
    ()
and closure2 () (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) =
    let v1 : bool = true
    let mutable _v1 : struct (US1 * US2) option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method1()
    let v3 : string = method2(v2)
    let v5 : bool = "Verbose" = v3
    let v9 : US1 =
        if v5 then
            let v6 : US0 = US0_0
            US1_0(v6)
        else
            US1_1
    let v54 : US1 =
        match v9 with
        | US1_1 -> (* None *)
            let v13 : bool = "Debug" = v3
            let v17 : US1 =
                if v13 then
                    let v14 : US0 = US0_1
                    US1_0(v14)
                else
                    US1_1
            match v17 with
            | US1_1 -> (* None *)
                let v21 : bool = "Info" = v3
                let v25 : US1 =
                    if v21 then
                        let v22 : US0 = US0_2
                        US1_0(v22)
                    else
                        US1_1
                match v25 with
                | US1_1 -> (* None *)
                    let v29 : bool = "Warning" = v3
                    let v33 : US1 =
                        if v29 then
                            let v30 : US0 = US0_3
                            US1_0(v30)
                        else
                            US1_1
                    match v33 with
                    | US1_1 -> (* None *)
                        let v37 : bool = "Critical" = v3
                        let v41 : US1 =
                            if v37 then
                                let v38 : US0 = US0_4
                                US1_0(v38)
                            else
                                US1_1
                        match v41 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v42) -> (* Some *)
                            US1_0(v42)
                    | US1_0(v34) -> (* Some *)
                        US1_0(v34)
                | US1_0(v26) -> (* Some *)
                    US1_0(v26)
            | US1_0(v18) -> (* Some *)
                US1_0(v18)
        | US1_0(v10) -> (* Some *)
            US1_0(v10)
    let v55 : string = method4()
    let v56 : string = method2(v55)
    let v58 : bool = v56 = "True"
    let v64 : US2 =
        if v58 then
            let v59 : System.DateTime = System.DateTime.Now
            let v60 : (System.DateTime -> int64) = _.Ticks
            let v61 : int64 = v60 v59
            US2_0(v61)
        else
            US2_1
    struct (v54, v64) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v65 : US1 = US1_1
    let v66 : US2 = US2_1
    struct (v65, v66) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : US1 = US1_1
    let v68 : US2 = US2_1
    struct (v67, v68) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : string = method1()
    let v70 : string = method2(v69)
    let v72 : bool = "Verbose" = v70
    let v76 : US1 =
        if v72 then
            let v73 : US0 = US0_0
            US1_0(v73)
        else
            US1_1
    let v121 : US1 =
        match v76 with
        | US1_1 -> (* None *)
            let v80 : bool = "Debug" = v70
            let v84 : US1 =
                if v80 then
                    let v81 : US0 = US0_1
                    US1_0(v81)
                else
                    US1_1
            match v84 with
            | US1_1 -> (* None *)
                let v88 : bool = "Info" = v70
                let v92 : US1 =
                    if v88 then
                        let v89 : US0 = US0_2
                        US1_0(v89)
                    else
                        US1_1
                match v92 with
                | US1_1 -> (* None *)
                    let v96 : bool = "Warning" = v70
                    let v100 : US1 =
                        if v96 then
                            let v97 : US0 = US0_3
                            US1_0(v97)
                        else
                            US1_1
                    match v100 with
                    | US1_1 -> (* None *)
                        let v104 : bool = "Critical" = v70
                        let v108 : US1 =
                            if v104 then
                                let v105 : US0 = US0_4
                                US1_0(v105)
                            else
                                US1_1
                        match v108 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v109) -> (* Some *)
                            US1_0(v109)
                    | US1_0(v101) -> (* Some *)
                        US1_0(v101)
                | US1_0(v93) -> (* Some *)
                    US1_0(v93)
            | US1_0(v85) -> (* Some *)
                US1_0(v85)
        | US1_0(v77) -> (* Some *)
            US1_0(v77)
    let v122 : string = method4()
    let v123 : string = method2(v122)
    let v125 : bool = v123 = "True"
    let v131 : US2 =
        if v125 then
            let v126 : System.DateTime = System.DateTime.Now
            let v127 : (System.DateTime -> int64) = _.Ticks
            let v128 : int64 = v127 v126
            US2_0(v128)
        else
            US2_1
    struct (v121, v131) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : string = method1()
    let v133 : string = method2(v132)
    let v135 : bool = "Verbose" = v133
    let v139 : US1 =
        if v135 then
            let v136 : US0 = US0_0
            US1_0(v136)
        else
            US1_1
    let v184 : US1 =
        match v139 with
        | US1_1 -> (* None *)
            let v143 : bool = "Debug" = v133
            let v147 : US1 =
                if v143 then
                    let v144 : US0 = US0_1
                    US1_0(v144)
                else
                    US1_1
            match v147 with
            | US1_1 -> (* None *)
                let v151 : bool = "Info" = v133
                let v155 : US1 =
                    if v151 then
                        let v152 : US0 = US0_2
                        US1_0(v152)
                    else
                        US1_1
                match v155 with
                | US1_1 -> (* None *)
                    let v159 : bool = "Warning" = v133
                    let v163 : US1 =
                        if v159 then
                            let v160 : US0 = US0_3
                            US1_0(v160)
                        else
                            US1_1
                    match v163 with
                    | US1_1 -> (* None *)
                        let v167 : bool = "Critical" = v133
                        let v171 : US1 =
                            if v167 then
                                let v168 : US0 = US0_4
                                US1_0(v168)
                            else
                                US1_1
                        match v171 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v172) -> (* Some *)
                            US1_0(v172)
                    | US1_0(v164) -> (* Some *)
                        US1_0(v164)
                | US1_0(v156) -> (* Some *)
                    US1_0(v156)
            | US1_0(v148) -> (* Some *)
                US1_0(v148)
        | US1_0(v140) -> (* Some *)
            US1_0(v140)
    let v185 : string = method4()
    let v186 : string = method2(v185)
    let v188 : bool = v186 = "True"
    let v194 : US2 =
        if v188 then
            let v189 : System.DateTime = System.DateTime.Now
            let v190 : (System.DateTime -> int64) = _.Ticks
            let v191 : int64 = v190 v189
            US2_0(v191)
        else
            US2_1
    struct (v184, v194) 
    #endif
#else
    let v195 : string = method1()
    let v196 : string = method2(v195)
    let v198 : bool = "Verbose" = v196
    let v202 : US1 =
        if v198 then
            let v199 : US0 = US0_0
            US1_0(v199)
        else
            US1_1
    let v247 : US1 =
        match v202 with
        | US1_1 -> (* None *)
            let v206 : bool = "Debug" = v196
            let v210 : US1 =
                if v206 then
                    let v207 : US0 = US0_1
                    US1_0(v207)
                else
                    US1_1
            match v210 with
            | US1_1 -> (* None *)
                let v214 : bool = "Info" = v196
                let v218 : US1 =
                    if v214 then
                        let v215 : US0 = US0_2
                        US1_0(v215)
                    else
                        US1_1
                match v218 with
                | US1_1 -> (* None *)
                    let v222 : bool = "Warning" = v196
                    let v226 : US1 =
                        if v222 then
                            let v223 : US0 = US0_3
                            US1_0(v223)
                        else
                            US1_1
                    match v226 with
                    | US1_1 -> (* None *)
                        let v230 : bool = "Critical" = v196
                        let v234 : US1 =
                            if v230 then
                                let v231 : US0 = US0_4
                                US1_0(v231)
                            else
                                US1_1
                        match v234 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v235) -> (* Some *)
                            US1_0(v235)
                    | US1_0(v227) -> (* Some *)
                        US1_0(v227)
                | US1_0(v219) -> (* Some *)
                    US1_0(v219)
            | US1_0(v211) -> (* Some *)
                US1_0(v211)
        | US1_0(v203) -> (* Some *)
            US1_0(v203)
    let v248 : string = method4()
    let v249 : string = method2(v248)
    let v251 : bool = v249 = "True"
    let v257 : US2 =
        if v251 then
            let v252 : System.DateTime = System.DateTime.Now
            let v253 : (System.DateTime -> int64) = _.Ticks
            let v254 : int64 = v253 v252
            US2_0(v254)
        else
            US2_1
    struct (v247, v257) 
    #endif
    |> fun x -> _v1 <- Some x
    let struct (v258 : US1, v259 : US2) = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    let v260 : Mut2 = {l0 = true} : Mut2
    let v261 : Mut0 = {l0 = 0L} : Mut0
    let v264 : US0 =
        match v258 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v262) -> (* Some *)
            v262
    let v265 : Mut3 = {l0 = v264} : Mut3
    let v266 : (string -> unit) = closure3()
    let v267 : Mut1 = {l0 = v266} : Mut1
    let v272 : int64 option =
        match v259 with
        | US2_1 -> (* None *)
            let v270 : int64 option = None
            v270
        | US2_0(v268) -> (* Some *)
            let v269 : int64 option = Some v268 
            v269
    struct (v261, v267, v260, v265, v272)
and closure4 () () : string =
    let v0 : string = $"spiral_builder.main"
    v0
and closure5 (v0 : (string [])) () : (string []) =
    v0
and method6 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method7 () : string =
    let v0 : string = ""
    v0
and method8 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method9 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method11 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = $"{v1}"
    let v3 : string = v0.l0
    let v4 : string = v3 + v2 
    v0.l0 <- v4
    ()
and method12 (v0 : Mut4) : unit =
    ()
and method13 (v0 : Mut4, v1 : (string [])) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method10 (v0 : Mut4, v1 : (string [])) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "args"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method13(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure6 (v0 : US0, v1 : (unit -> string), v2 : (unit -> (string []))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let v330 : (string []) = v2 ()
    let v331 : string = ""
    let v332 : Mut4 = {l0 = v331} : Mut4
    method10(v332, v330)
    let v333 : string = v332.l0
    let v334 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v333}"
    let v335 : char list = []
    let v336 : (char list -> (char [])) = List.toArray
    let v337 : (char []) = v336 v335
    let v338 : string = v334.TrimStart v337 
    let v339 : char list = []
    let v340 : char list = '/' :: v339 
    let v341 : char list = ' ' :: v340 
    let v342 : (char list -> (char [])) = List.toArray
    let v343 : (char []) = v342 v341
    let v344 : string = v338.TrimEnd v343 
    v344
and method14 (v0 : US0, v1 : (unit -> string)) : unit =
    let v2 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v3 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v2 v3 |> Some
    let struct (v4 : Mut0, v5 : Mut1, v6 : Mut2, v7 : Mut3, v8 : int64 option) = State.trace_state.Value
    let v9 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v2 v9 |> Some
    let struct (v10 : Mut0, v11 : Mut1, v12 : Mut2, v13 : Mut3, v14 : int64 option) = State.trace_state.Value
    let v15 : US0 = v13.l0
    let v16 : bool = v12.l0
    let v17 : bool = v16 = false
    let v21 : bool =
        if v17 then
            false
        else
            let v18 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
            let v19 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v15
            let v20 : bool = v18 >= v19
            v20
    if v21 then
        let v22 : int64 = v4.l0
        let v23 : int64 = v22 + 1L
        v4.l0 <- v23
        let v24 : string = $"%s{v1 ()}"
        let v25 : bool = true
        let mutable _v25 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v26 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v24 v26 
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v27 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v24 v27 
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v28 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v24 v28 
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v24 
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v24 
        () 
        #endif
#else
        System.Console.WriteLine v24 
        () 
        #endif
        |> fun x -> _v25 <- Some x
        match _v25 with Some x -> x | None -> failwith "base.run_target / _v25=None"
        let v29 : (string -> unit) = v5.l0
        v29 v24
and method5 (v0 : US0, v1 : (unit -> string), v2 : (unit -> (string []))) : unit =
    let v3 : (unit -> string) = closure6(v0, v1, v2)
    method14(v0, v3)
and closure7 () (v0 : Ref<Str>) : std_string_String =
    let v1 : string = "String::from($0)"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and method16 () : string =
    let v0 : string = "py-path"
    v0
and method17 () : string =
    let v0 : string = "env"
    v0
and method18 () : string =
    let v0 : string = "deps"
    v0
and method19 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method22 (v0 : string) : string =
    v0
and method21 (v0 : string, v1 : string) : struct (string * string) =
    let v2 : string = method22(v0)
    struct (v1, v2)
and method20 (v0 : string, v1 : string) : string =
    let v2 : bool = true
    let mutable _v2 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "String::from($0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "std::path::PathBuf::from($0)"
    let v8 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v9 
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "$0.join($1)"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v8, v12) v13 
    let v15 : string = "$0.display()"
    let v16 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : bool = true
    let mutable _v17 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : string = "format!(\"{}\", $0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v18 
    v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = "format!(\"{}\", $0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v20 
    v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : string = "format!(\"{}\", $0)"
    let v23 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v22 
    v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v24 : std_string_String = null |> unbox<std_string_String>
    v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : std_string_String = null |> unbox<std_string_String>
    v25 
    #endif
#else
    let v26 : std_string_String = null |> unbox<std_string_String>
    v26 
    #endif
    |> fun x -> _v17 <- Some x
    let v27 : std_string_String = match _v17 with Some x -> x | None -> failwith "base.run_target / _v17=None"
    let v28 : string = "fable_library_rust::String_::fromString($0)"
    let v29 : string = Fable.Core.RustInterop.emitRustExpr v27 v28 
    v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : US10 = US10_1
    let v31 : US11 = US11_2(v30)
    let v32 : string = $"file_system.(</>) / target: {v31} / a: {v0} / b: {v1}"
    let v33 : string = failwith<string> v32
    v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = null |> unbox<string>
    v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : string = "path"
    let v36 : IPathJoin = Fable.Core.JsInterop.importAll v35 
    let struct (v37 : string, v38 : string) = method21(v1, v0)
    let v39 : string = "v36.join($0, $1)"
    let v40 : string = Fable.Core.JsInterop.emitJsExpr struct (v37, v38) v39 
    v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v41 : US10 = US10_0
    let v42 : US11 = US11_4(v41)
    let v43 : string = $"file_system.(</>) / target: {v42} / a: {v0} / b: {v1}"
    let v44 : string = failwith<string> v43
    v44 
    #endif
#else
    let v45 : string = System.IO.Path.Combine (v0, v1)
    v45 
    #endif
    |> fun x -> _v2 <- Some x
    let v46 : string = match _v2 with Some x -> x | None -> failwith "base.run_target / _v2=None"
    v46
and method24 (v0 : string) : bool =
    let v1 : bool = true
    let mutable _v1 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v15 : bool =
        if v9 then
            true
        else
            let v10 : string = "$0.is_dir()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            if v11 then
                true
            else
                let v12 : string = "$0.is_symlink()"
                let v13 : bool = Fable.Core.RustInterop.emitRustExpr v7 v12 
                v13
    v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : bool = null |> unbox<bool>
    v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : bool = null |> unbox<bool>
    v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : string = "fs"
    let v19 : IFsExistsSync = Fable.Core.JsInterop.importAll v18 
    let v20 : string = "$0.existsSync($1)"
    let v21 : bool = Fable.Core.JsInterop.emitJsExpr struct (v19, v0) v20 
    v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : bool = null |> unbox<bool>
    v22 
    #endif
#else
    let v23 : (string -> bool) = System.IO.Directory.Exists
    let v24 : bool = v23 v0
    v24 
    #endif
    |> fun x -> _v1 <- Some x
    let v25 : bool = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v25
and method26 (v0 : string) : string option =
    let v1 : bool = true
    let mutable _v1 : US3 option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0?"
    let v11 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : bool = true
    let mutable _v14 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : std_string_String = null |> unbox<std_string_String>
    v22 
    #endif
#else
    let v23 : std_string_String = null |> unbox<std_string_String>
    v23 
    #endif
    |> fun x -> _v14 <- Some x
    let v24 : std_string_String = match _v14 with Some x -> x | None -> failwith "base.run_target / _v14=None"
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : US3 = US3_0(v26)
    v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : US3 = null |> unbox<US3>
    v28 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v29 : US3 = null |> unbox<US3>
    v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : string = "path"
    let v31 : IPathDirname = Fable.Core.JsInterop.importAll v30 
    let v32 : string = "v31.dirname($0)"
    let v33 : string = Fable.Core.JsInterop.emitJsExpr v0 v32 
    let v34 : US3 = US3_0(v33)
    v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : US3 = null |> unbox<US3>
    v35 
    #endif
#else
    let v36 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.GetParent
    let v37 : System.IO.DirectoryInfo = v36 v0
    let v38 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let v39 : bool = v37 = v38 
    let v50 : US3 =
        if v39 then
            US3_1
        else
            let v41 : bool = true
            let mutable _v41 : string option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v42 : string = null |> unbox<string>
            v42 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v43 : string = null |> unbox<string>
            v43 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v44 : string = null |> unbox<string>
            v44 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : string = null |> unbox<string>
            v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v46 : string = null |> unbox<string>
            v46 
            #endif
#else
            let v47 : string = v37.FullName
            v47 
            #endif
            |> fun x -> _v41 <- Some x
            let v48 : string = match _v41 with Some x -> x | None -> failwith "base.run_target / _v41=None"
            US3_0(v48)
    v50 
    #endif
    |> fun x -> _v1 <- Some x
    let v51 : US3 = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    match v51 with
    | US3_1 -> (* None *)
        let v54 : string option = None
        v54
    | US3_0(v52) -> (* Some *)
        let v53 : string option = Some v52 
        v53
and closure8 () (v0 : string) : string option =
    method26(v0)
and method25 () : (string -> string option) =
    closure8()
and method27 (v0 : string, v1 : string, v2 : string) : US12 =
    let v3 : string = method20(v2, v0)
    let v4 : bool = method24(v3)
    if v4 then
        US12_0(v2)
    else
        let v6 : (string -> string option) = method25()
        let v7 : string option = v6 v2
        let v8 : US3 option = None
        let _v8 = ref v8 
        match v7 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v9 : string = x
        let v10 : US3 = US3_0(v9)
        v10 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v8.Value <- x
        let v11 : US3 option = _v8.Value 
        let v12 : US3 = US3_1
        let v13 : US3 = v11 |> Option.defaultValue v12 
        match v13 with
        | US3_1 -> (* None *)
            let v16 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v2}')"""
            US12_1(v16)
        | US3_0(v14) -> (* Some *)
            method27(v0, v1, v14)
and method23 (v0 : string, v1 : string) : US12 =
    let v2 : string = method20(v1, v0)
    let v3 : bool = method24(v2)
    if v3 then
        US12_0(v1)
    else
        let v5 : (string -> string option) = method25()
        let v6 : string option = v5 v1
        let v7 : US3 option = None
        let _v7 = ref v7 
        match v6 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v8 : string = x
        let v9 : US3 = US3_0(v8)
        v9 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v7.Value <- x
        let v10 : US3 option = _v7.Value 
        let v11 : US3 = US3_1
        let v12 : US3 = v10 |> Option.defaultValue v11 
        match v12 with
        | US3_1 -> (* None *)
            let v15 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v1}')"""
            US12_1(v15)
        | US3_0(v13) -> (* Some *)
            method27(v0, v1, v13)
and closure9 () () : string =
    let v0 : string = "file_system.get_workspace_root"
    v0
and closure10 (v0 : string) () : string =
    v0
and method29 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "error"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method11(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure11 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let v330 : string = v2 ()
    let v331 : string = ""
    let v332 : Mut4 = {l0 = v331} : Mut4
    method29(v332, v330)
    let v333 : string = v332.l0
    let v334 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v333}"
    let v335 : char list = []
    let v336 : (char list -> (char [])) = List.toArray
    let v337 : (char []) = v336 v335
    let v338 : string = v334.TrimStart v337 
    let v339 : char list = []
    let v340 : char list = '/' :: v339 
    let v341 : char list = ' ' :: v340 
    let v342 : (char list -> (char [])) = List.toArray
    let v343 : (char []) = v342 v341
    let v344 : string = v338.TrimEnd v343 
    v344
and method28 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) : unit =
    let v3 : (unit -> string) = closure11(v0, v1, v2)
    method14(v0, v3)
and method30 () : string =
    let v0 : bool = true
    let mutable _v0 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::env::current_dir()"
    let v2 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "$0.unwrap()"
    let v4 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "$0.display()"
    let v6 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : bool = true
    let mutable _v7 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v8 
    v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v10 
    v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v12 
    v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : std_string_String = null |> unbox<std_string_String>
    v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : std_string_String = null |> unbox<std_string_String>
    v15 
    #endif
#else
    let v16 : std_string_String = null |> unbox<std_string_String>
    v16 
    #endif
    |> fun x -> _v7 <- Some x
    let v17 : std_string_String = match _v7 with Some x -> x | None -> failwith "base.run_target / _v7=None"
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = null |> unbox<string>
    v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = null |> unbox<string>
    v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22 : string = null |> unbox<string>
    v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string = null |> unbox<string>
    v23 
    #endif
#else
    let v24 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v25 : string = v24 ()
    v25 
    #endif
    |> fun x -> _v0 <- Some x
    let v26 : string = match _v0 with Some x -> x | None -> failwith "base.run_target / _v0=None"
    v26
and method31 (v0 : string) : string =
    let v1 : bool = true
    let mutable _v1 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent()"
    let v9 : Ref<std_path_Path> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_path_Path> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : bool = true
    let mutable _v14 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : std_string_String = null |> unbox<std_string_String>
    v22 
    #endif
#else
    let v23 : std_string_String = null |> unbox<std_string_String>
    v23 
    #endif
    |> fun x -> _v14 <- Some x
    let v24 : std_string_String = match _v14 with Some x -> x | None -> failwith "base.run_target / _v14=None"
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v27 : (string -> string) = System.IO.Path.GetDirectoryName
    let v28 : string = v27 v0
    v28 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v29 : string = null |> unbox<string>
    v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : (string -> string) = System.IO.Path.GetDirectoryName
    let v31 : string = v30 v0
    v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : (string -> string) = System.IO.Path.GetDirectoryName
    let v33 : string = v32 v0
    v33 
    #endif
#else
    let v34 : (string -> string) = System.IO.Path.GetDirectoryName
    let v35 : string = v34 v0
    v35 
    #endif
    |> fun x -> _v1 <- Some x
    let v36 : string = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v36
and method34 (v0 : string) : bool =
    let v1 : bool = true
    let mutable _v1 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v12 : bool =
        if v9 then
            let v10 : string = "$0.is_file()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            v11
        else
            false
    v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : bool = null |> unbox<bool>
    v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : bool = null |> unbox<bool>
    v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : string = "fs"
    let v16 : IFsExistsSync = Fable.Core.JsInterop.importAll v15 
    let v17 : string = "$0.existsSync($1)"
    let v18 : bool = Fable.Core.JsInterop.emitJsExpr struct (v16, v0) v17 
    v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : bool = null |> unbox<bool>
    v19 
    #endif
#else
    let v20 : (string -> bool) = System.IO.File.Exists
    let v21 : bool = v20 v0
    v21 
    #endif
    |> fun x -> _v1 <- Some x
    let v22 : bool = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v22
and method33 (v0 : string, v1 : string) : bool =
    let v2 : bool = true
    let mutable _v2 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method34(v0)
    let v4 : bool = v3 = false
    let v31 : bool =
        if v4 then
            false
        else
            let v5 : bool = true
            let mutable _v5 : string option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v6 : bool = true
            let mutable _v6 : Vec<uint8> option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v7 : string = "std::fs::read(&*$0).unwrap()"
            let v8 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v0 v7 
            v8 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v9 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v9 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v10 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v10 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v11 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v11 
            #endif
#if FABLE_COMPILER_PYTHON
            let v12 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v12 
            #endif
#else
            let v13 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v14 : string = "$0.to_vec()"
            let v15 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v13 v14 
            v15 
            #endif
            |> fun x -> _v6 <- Some x
            let v16 : Vec<uint8> = match _v6 with Some x -> x | None -> failwith "base.run_target / _v6=None"
            let v17 : Vec<uint8> = method19(v16)
            let v18 : string = "std::string::String::from_utf8($0)"
            let v19 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v17 v18 
            let v20 : string = "$0.unwrap()"
            let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v19 v20 
            let v22 : string = "fable_library_rust::String_::fromString($0)"
            let v23 : string = Fable.Core.RustInterop.emitRustExpr v21 v22 
            v23 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v24 : string = null |> unbox<string>
            v24 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v25 : string = null |> unbox<string>
            v25 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v26 : string = null |> unbox<string>
            v26 
            #endif
#if FABLE_COMPILER_PYTHON
            let v27 : string = null |> unbox<string>
            v27 
            #endif
#else
            let v28 : string = v0 |> System.IO.File.ReadAllText
            v28 
            #endif
            |> fun x -> _v5 <- Some x
            let v29 : string = match _v5 with Some x -> x | None -> failwith "base.run_target / _v5=None"
            let v30 : bool = v1 = v29
            v30
    v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : bool = null |> unbox<bool>
    v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : bool = null |> unbox<bool>
    v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : bool = null |> unbox<bool>
    v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : bool = null |> unbox<bool>
    v35 
    #endif
#else
    let v36 : bool = null |> unbox<bool>
    v36 
    #endif
    |> fun x -> _v2 <- Some x
    let v37 : bool = match _v2 with Some x -> x | None -> failwith "base.run_target / _v2=None"
    v37
and method35 (v0 : string) : string =
    v0
and method32 (v0 : string, v1 : string) : unit =
    let v2 : bool = method33(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : bool = true
        let mutable _v4 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v5 
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v6 : string = method35(v1)
        System.IO.File.WriteAllText (v0, v6)
        () 
        #endif
        |> fun x -> _v4 <- Some x
        match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
        ()
and method37 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method39 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure14 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure13 () (v0 : char) : (UH0 -> UH0) =
    closure14(v0)
and method40 () : (char -> (UH0 -> UH0)) =
    closure13()
and method41 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v17 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v13 : (char -> string) = _.ToString()
                let v14 : string = v13 v4
                let v15 : (string -> System.Text.StringBuilder) = v1.Append
                let v16 : System.Text.StringBuilder = v15 v14
                v1
        method41(v5, v17, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure12 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US14 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US14_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '"'
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v18 : int32 = v17.Length
            let v19 : (char []) = Array.zeroCreate<char> (v18)
            let v20 : Mut5 = {l0 = 0} : Mut5
            while method39(v18, v20) do
                let v22 : int32 = v20.l0
                let v23 : char = v17.[int v22]
                v19.[int v22] <- v23
                let v24 : int32 = v22 + 1
                v20.l0 <- v24
                ()
            let v25 : ((char []) -> char list) = Array.toList
            let v26 : char list = v25 v19
            let v27 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v28 : (char -> (UH0 -> UH0)) = method40()
            let v29 : (char list -> (UH0 -> UH0)) = v27 v28
            let v30 : (UH0 -> UH0) = v29 v26
            let v31 : UH0 = UH0_0
            let v32 : UH0 = v30 v31
            let struct (v33 : System.Text.StringBuilder, v34 : int32, v35 : int32) = method41(v32, v1, v2, v3)
            US14_0(v7, v15, v33, v34, v35)
        else
            let v37 : (string -> int32) = String.length
            let v38 : int32 = v37 v0
            let v39 : string = "\n"
            let v40 : int32 = v0.IndexOf v39 
            let v41 : int32 = v40 - 1
            let v42 : bool = -2 = v41
            let v43 : int32 =
                if v42 then
                    v38
                else
                    v41
            let v44 : (int32 -> int32) = int32
            let v45 : int32 = v44 0
            let v46 : (int32 -> int32) = int32
            let v47 : int32 = v46 v43
            let v48 : string = v0.[int v45..int v47]
            let v49 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v48}"
            let v50 : int32 = v3 - 1
            let v51 : (int32 -> (string -> string)) = String.replicate
            let v52 : (string -> string) = v51 v50
            let v53 : string = " "
            let v54 : string = v52 v53
            let v55 : string = "^"
            let v56 : string = v54 + v55 
            let v57 : string = $"{v49}
{v56}
"
            US14_1(v57)
and closure15 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US14 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US14_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '''
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v18 : int32 = v17.Length
            let v19 : (char []) = Array.zeroCreate<char> (v18)
            let v20 : Mut5 = {l0 = 0} : Mut5
            while method39(v18, v20) do
                let v22 : int32 = v20.l0
                let v23 : char = v17.[int v22]
                v19.[int v22] <- v23
                let v24 : int32 = v22 + 1
                v20.l0 <- v24
                ()
            let v25 : ((char []) -> char list) = Array.toList
            let v26 : char list = v25 v19
            let v27 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v28 : (char -> (UH0 -> UH0)) = method40()
            let v29 : (char list -> (UH0 -> UH0)) = v27 v28
            let v30 : (UH0 -> UH0) = v29 v26
            let v31 : UH0 = UH0_0
            let v32 : UH0 = v30 v31
            let struct (v33 : System.Text.StringBuilder, v34 : int32, v35 : int32) = method41(v32, v1, v2, v3)
            US14_0(v7, v15, v33, v34, v35)
        else
            let v37 : (string -> int32) = String.length
            let v38 : int32 = v37 v0
            let v39 : string = "\n"
            let v40 : int32 = v0.IndexOf v39 
            let v41 : int32 = v40 - 1
            let v42 : bool = -2 = v41
            let v43 : int32 =
                if v42 then
                    v38
                else
                    v41
            let v44 : (int32 -> int32) = int32
            let v45 : int32 = v44 0
            let v46 : (int32 -> int32) = int32
            let v47 : int32 = v46 v43
            let v48 : string = v0.[int v45..int v47]
            let v49 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v48}"
            let v50 : int32 = v3 - 1
            let v51 : (int32 -> (string -> string)) = String.replicate
            let v52 : (string -> string) = v51 v50
            let v53 : string = " "
            let v54 : string = v52 v53
            let v55 : string = "^"
            let v56 : string = v54 + v55 
            let v57 : string = $"{v49}
{v56}
"
            US14_1(v57)
and method42 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US14 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US14 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US14_1(v13) -> (* Error *)
            method42(v0, v1, v6)
        | US14_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "choice / no parsers succeeded"
        US14_1(v3)
and method43 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US16 =
            if v3 then
                US16_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US16_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US16_1
        let v15 : char =
            match v11 with
            | US16_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US16_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method43(v0, v17)
and method44 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US15 =
    let v5 : bool = "" = v1
    let v53 : US14 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ''' :: v6 
            let v8 : char list = '"' :: v7 
            let v9 : (char list -> (char [])) = List.toArray
            let v10 : (char []) = v9 v8
            let v11 : string = $"parsing.none_of / unexpected end of input / chars: %A{v10} / s: %A{struct (v2, v3, v4)}"
            US14_1(v11)
        else
            let v13 : char = v1.[int 0]
            let v14 : (string -> int32) = String.length
            let v15 : int32 = v14 v1
            let v16 : (int32 -> int32) = int32
            let v17 : int32 = v16 1
            let v18 : (int32 -> int32) = int32
            let v19 : int32 = v18 v15
            let v20 : string = v1.[int v17..int v19]
            let v21 : int64 = 0L
            let v22 : bool = method43(v13, v21)
            let v23 : bool = v22 = false
            if v23 then
                let v24 : (char -> string) = _.ToString()
                let v25 : string = v24 v13
                let v26 : int32 = v25.Length
                let v27 : (char []) = Array.zeroCreate<char> (v26)
                let v28 : Mut5 = {l0 = 0} : Mut5
                while method39(v26, v28) do
                    let v30 : int32 = v28.l0
                    let v31 : char = v25.[int v30]
                    v27.[int v30] <- v31
                    let v32 : int32 = v30 + 1
                    v28.l0 <- v32
                    ()
                let v33 : ((char []) -> char list) = Array.toList
                let v34 : char list = v33 v27
                let v35 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v36 : (char -> (UH0 -> UH0)) = method40()
                let v37 : (char list -> (UH0 -> UH0)) = v35 v36
                let v38 : (UH0 -> UH0) = v37 v34
                let v39 : UH0 = UH0_0
                let v40 : UH0 = v38 v39
                let struct (v41 : System.Text.StringBuilder, v42 : int32, v43 : int32) = method41(v40, v2, v3, v4)
                US14_0(v13, v20, v41, v42, v43)
            else
                let v45 : char list = []
                let v46 : char list = ''' :: v45 
                let v47 : char list = '"' :: v46 
                let v48 : (char list -> (char [])) = List.toArray
                let v49 : (char []) = v48 v47
                let v50 : string = $"parsing.none_of / unexpected char: '{v13}' / chars: %A{v49} / s: %A{struct (v2, v3, v4)}"
                US14_1(v50)
    let v65 : US14 =
        match v53 with
        | US14_1(v62) -> (* Error *)
            US14_1(v62)
        | US14_0(v54, v55, v56, v57, v58) -> (* Ok *)
            let v59 : bool = '\\' = v54
            let v60 : char =
                if v59 then
                    '/'
                else
                    v54
            US14_0(v60, v55, v56, v57, v58)
    match v65 with
    | US14_1(v75) -> (* Error *)
        US15_0(v0, v1, v2, v3, v4)
    | US14_0(v66, v67, v68, v69, v70) -> (* Ok *)
        let v71 : (char -> string) = _.ToString()
        let v72 : string = v71 v66
        let v73 : string = v0 + v72 
        method44(v73, v67, v68, v69, v70)
and method45 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US14 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US14 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US14_1(v15) -> (* Error *)
            method45(v0, v1, v2, v3, v8)
        | US14_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US14_1(v5)
and method46 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US16 =
            if v3 then
                US16_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US16_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US16_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US16_1
        let v19 : char =
            match v15 with
            | US16_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US16_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method46(v0, v21)
and method47 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US15 =
    let v5 : bool = "" = v1
    let v55 : US14 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v8 : char list = ''' :: v7 
            let v9 : char list = '"' :: v8 
            let v10 : (char list -> (char [])) = List.toArray
            let v11 : (char []) = v10 v9
            let v12 : string = $"parsing.none_of / unexpected end of input / chars: %A{v11} / s: %A{struct (v2, v3, v4)}"
            US14_1(v12)
        else
            let v14 : char = v1.[int 0]
            let v15 : (string -> int32) = String.length
            let v16 : int32 = v15 v1
            let v17 : (int32 -> int32) = int32
            let v18 : int32 = v17 1
            let v19 : (int32 -> int32) = int32
            let v20 : int32 = v19 v16
            let v21 : string = v1.[int v18..int v20]
            let v22 : int64 = 0L
            let v23 : bool = method46(v14, v22)
            let v24 : bool = v23 = false
            if v24 then
                let v25 : (char -> string) = _.ToString()
                let v26 : string = v25 v14
                let v27 : int32 = v26.Length
                let v28 : (char []) = Array.zeroCreate<char> (v27)
                let v29 : Mut5 = {l0 = 0} : Mut5
                while method39(v27, v29) do
                    let v31 : int32 = v29.l0
                    let v32 : char = v26.[int v31]
                    v28.[int v31] <- v32
                    let v33 : int32 = v31 + 1
                    v29.l0 <- v33
                    ()
                let v34 : ((char []) -> char list) = Array.toList
                let v35 : char list = v34 v28
                let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v37 : (char -> (UH0 -> UH0)) = method40()
                let v38 : (char list -> (UH0 -> UH0)) = v36 v37
                let v39 : (UH0 -> UH0) = v38 v35
                let v40 : UH0 = UH0_0
                let v41 : UH0 = v39 v40
                let struct (v42 : System.Text.StringBuilder, v43 : int32, v44 : int32) = method41(v41, v2, v3, v4)
                US14_0(v14, v21, v42, v43, v44)
            else
                let v46 : char list = []
                let v47 : char list = ' ' :: v46 
                let v48 : char list = ''' :: v47 
                let v49 : char list = '"' :: v48 
                let v50 : (char list -> (char [])) = List.toArray
                let v51 : (char []) = v50 v49
                let v52 : string = $"parsing.none_of / unexpected char: '{v14}' / chars: %A{v51} / s: %A{struct (v2, v3, v4)}"
                US14_1(v52)
    let v67 : US14 =
        match v55 with
        | US14_1(v64) -> (* Error *)
            US14_1(v64)
        | US14_0(v56, v57, v58, v59, v60) -> (* Ok *)
            let v61 : bool = '\\' = v56
            let v62 : char =
                if v61 then
                    '/'
                else
                    v56
            US14_0(v62, v57, v58, v59, v60)
    match v67 with
    | US14_1(v77) -> (* Error *)
        US15_0(v0, v1, v2, v3, v4)
    | US14_0(v68, v69, v70, v71, v72) -> (* Ok *)
        let v73 : (char -> string) = _.ToString()
        let v74 : string = v73 v68
        let v75 : string = v0 + v74 
        method47(v75, v69, v70, v71, v72)
and method48 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method48(v0, v6)
        else
            v1
and method49 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US15 =
    let v5 : bool = "" = v1
    let v37 : US14 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US14_1(v6)
        else
            let v8 : char = v1.[int 0]
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v1
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v1.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v8
            let v18 : int32 = v17.Length
            let v19 : (char []) = Array.zeroCreate<char> (v18)
            let v20 : Mut5 = {l0 = 0} : Mut5
            while method39(v18, v20) do
                let v22 : int32 = v20.l0
                let v23 : char = v17.[int v22]
                v19.[int v22] <- v23
                let v24 : int32 = v22 + 1
                v20.l0 <- v24
                ()
            let v25 : ((char []) -> char list) = Array.toList
            let v26 : char list = v25 v19
            let v27 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v28 : (char -> (UH0 -> UH0)) = method40()
            let v29 : (char list -> (UH0 -> UH0)) = v27 v28
            let v30 : (UH0 -> UH0) = v29 v26
            let v31 : UH0 = UH0_0
            let v32 : UH0 = v30 v31
            let struct (v33 : System.Text.StringBuilder, v34 : int32, v35 : int32) = method41(v32, v2, v3, v4)
            US14_0(v8, v15, v33, v34, v35)
    match v37 with
    | US14_1(v47) -> (* Error *)
        US15_0(v0, v1, v2, v3, v4)
    | US14_0(v38, v39, v40, v41, v42) -> (* Ok *)
        let v43 : (char -> string) = _.ToString()
        let v44 : string = v43 v38
        let v45 : string = v0 + v44 
        method49(v45, v39, v40, v41, v42)
and method38 (v0 : string) : US13 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v4 : string = ""
    let v5 : string = v3 |> Option.defaultValue v4 
    let v6 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v7 : System.Text.StringBuilder = v6 v4
    let v8 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US14) = closure12()
    let v9 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US14) = closure15()
    let v10 : UH1 = UH1_0
    let v11 : UH1 = UH1_1(v9, v10)
    let v12 : UH1 = UH1_1(v8, v11)
    let v13 : US14 = method42(v5, v7, v12)
    let v130 : US15 =
        match v13 with
        | US14_1(v127) -> (* Error *)
            US15_1(v127)
        | US14_0(v14, v15, v16, v17, v18) -> (* Ok *)
            let v19 : bool = "" = v15
            let v67 : US14 =
                if v19 then
                    let v20 : char list = []
                    let v21 : char list = ''' :: v20 
                    let v22 : char list = '"' :: v21 
                    let v23 : (char list -> (char [])) = List.toArray
                    let v24 : (char []) = v23 v22
                    let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v24} / s: %A{struct (v16, v17, v18)}"
                    US14_1(v25)
                else
                    let v27 : char = v15.[int 0]
                    let v28 : (string -> int32) = String.length
                    let v29 : int32 = v28 v15
                    let v30 : (int32 -> int32) = int32
                    let v31 : int32 = v30 1
                    let v32 : (int32 -> int32) = int32
                    let v33 : int32 = v32 v29
                    let v34 : string = v15.[int v31..int v33]
                    let v35 : int64 = 0L
                    let v36 : bool = method43(v27, v35)
                    let v37 : bool = v36 = false
                    if v37 then
                        let v38 : (char -> string) = _.ToString()
                        let v39 : string = v38 v27
                        let v40 : int32 = v39.Length
                        let v41 : (char []) = Array.zeroCreate<char> (v40)
                        let v42 : Mut5 = {l0 = 0} : Mut5
                        while method39(v40, v42) do
                            let v44 : int32 = v42.l0
                            let v45 : char = v39.[int v44]
                            v41.[int v44] <- v45
                            let v46 : int32 = v44 + 1
                            v42.l0 <- v46
                            ()
                        let v47 : ((char []) -> char list) = Array.toList
                        let v48 : char list = v47 v41
                        let v49 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v50 : (char -> (UH0 -> UH0)) = method40()
                        let v51 : (char list -> (UH0 -> UH0)) = v49 v50
                        let v52 : (UH0 -> UH0) = v51 v48
                        let v53 : UH0 = UH0_0
                        let v54 : UH0 = v52 v53
                        let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method41(v54, v16, v17, v18)
                        US14_0(v27, v34, v55, v56, v57)
                    else
                        let v59 : char list = []
                        let v60 : char list = ''' :: v59 
                        let v61 : char list = '"' :: v60 
                        let v62 : (char list -> (char [])) = List.toArray
                        let v63 : (char []) = v62 v61
                        let v64 : string = $"parsing.none_of / unexpected char: '{v27}' / chars: %A{v63} / s: %A{struct (v16, v17, v18)}"
                        US14_1(v64)
            let v79 : US14 =
                match v67 with
                | US14_1(v76) -> (* Error *)
                    US14_1(v76)
                | US14_0(v68, v69, v70, v71, v72) -> (* Ok *)
                    let v73 : bool = '\\' = v68
                    let v74 : char =
                        if v73 then
                            '/'
                        else
                            v68
                    US14_0(v74, v69, v70, v71, v72)
            let v91 : US15 =
                match v79 with
                | US14_1(v80) -> (* Error *)
                    US15_1(v80)
                | US14_0(v82, v83, v84, v85, v86) -> (* Ok *)
                    let v87 : (char -> string) = _.ToString()
                    let v88 : string = v87 v82
                    method44(v88, v83, v84, v85, v86)
            let v101 : US15 =
                match v91 with
                | US15_1(v98) -> (* Error *)
                    US15_0(v4, v15, v16, v17, v18)
                | US15_0(v92, v93, v94, v95, v96) -> (* Ok *)
                    US15_0(v92, v93, v94, v95, v96)
            match v101 with
            | US15_1(v122) -> (* Error *)
                let v123 : string = "between / expected content"
                US15_1(v123)
            | US15_0(v102, v103, v104, v105, v106) -> (* Ok *)
                let v107 : UH1 = UH1_0
                let v108 : UH1 = UH1_1(v9, v107)
                let v109 : UH1 = UH1_1(v8, v108)
                let v110 : US14 = method45(v103, v104, v105, v106, v109)
                match v110 with
                | US14_1(v117) -> (* Error *)
                    let v118 : string = $"between / expected closing delimiter / e: %A{v117} / input: %A{struct (v5, v7, 1, 1)} / rest1: %A{struct (v15, v16, v17, v18)} / rest2: %A{struct (v103, v104, v105, v106)}"
                    US15_1(v118)
                | US14_0(v111, v112, v113, v114, v115) -> (* Ok *)
                    US15_0(v102, v112, v113, v114, v115)
    let v257 : US15 =
        match v130 with
        | US15_1(v136) -> (* Error *)
            let v137 : bool = "" = v5
            let v189 : US14 =
                if v137 then
                    let v138 : char list = []
                    let v139 : char list = ' ' :: v138 
                    let v140 : char list = ''' :: v139 
                    let v141 : char list = '"' :: v140 
                    let v142 : (char list -> (char [])) = List.toArray
                    let v143 : (char []) = v142 v141
                    let v144 : string = $"parsing.none_of / unexpected end of input / chars: %A{v143} / s: %A{struct (v7, 1, 1)}"
                    US14_1(v144)
                else
                    let v146 : char = v5.[int 0]
                    let v147 : (string -> int32) = String.length
                    let v148 : int32 = v147 v5
                    let v149 : (int32 -> int32) = int32
                    let v150 : int32 = v149 1
                    let v151 : (int32 -> int32) = int32
                    let v152 : int32 = v151 v148
                    let v153 : string = v5.[int v150..int v152]
                    let v154 : int64 = 0L
                    let v155 : bool = method46(v146, v154)
                    let v156 : bool = v155 = false
                    if v156 then
                        let v157 : (char -> string) = _.ToString()
                        let v158 : string = v157 v146
                        let v159 : int32 = v158.Length
                        let v160 : (char []) = Array.zeroCreate<char> (v159)
                        let v161 : Mut5 = {l0 = 0} : Mut5
                        while method39(v159, v161) do
                            let v163 : int32 = v161.l0
                            let v164 : char = v158.[int v163]
                            v160.[int v163] <- v164
                            let v165 : int32 = v163 + 1
                            v161.l0 <- v165
                            ()
                        let v166 : ((char []) -> char list) = Array.toList
                        let v167 : char list = v166 v160
                        let v168 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v169 : (char -> (UH0 -> UH0)) = method40()
                        let v170 : (char list -> (UH0 -> UH0)) = v168 v169
                        let v171 : (UH0 -> UH0) = v170 v167
                        let v172 : UH0 = UH0_0
                        let v173 : UH0 = v171 v172
                        let v174 : int32 = 1
                        let v175 : int32 = 1
                        let struct (v176 : System.Text.StringBuilder, v177 : int32, v178 : int32) = method41(v173, v7, v174, v175)
                        US14_0(v146, v153, v176, v177, v178)
                    else
                        let v180 : char list = []
                        let v181 : char list = ' ' :: v180 
                        let v182 : char list = ''' :: v181 
                        let v183 : char list = '"' :: v182 
                        let v184 : (char list -> (char [])) = List.toArray
                        let v185 : (char []) = v184 v183
                        let v186 : string = $"parsing.none_of / unexpected char: '{v146}' / chars: %A{v185} / s: %A{struct (v7, 1, 1)}"
                        US14_1(v186)
            let v201 : US14 =
                match v189 with
                | US14_1(v198) -> (* Error *)
                    US14_1(v198)
                | US14_0(v190, v191, v192, v193, v194) -> (* Ok *)
                    let v195 : bool = '\\' = v190
                    let v196 : char =
                        if v195 then
                            '/'
                        else
                            v190
                    US14_0(v196, v191, v192, v193, v194)
            let v213 : US15 =
                match v201 with
                | US14_1(v202) -> (* Error *)
                    US15_1(v202)
                | US14_0(v204, v205, v206, v207, v208) -> (* Ok *)
                    let v209 : (char -> string) = _.ToString()
                    let v210 : string = v209 v204
                    method47(v210, v205, v206, v207, v208)
            match v213 with
            | US15_1(v219) -> (* Error *)
                let v220 : int32 = v5.Length
                let v221 : bool = v220 = 0
                let v225 : US17 =
                    if v221 then
                        US17_0(v5, v7, 1, 1)
                    else
                        let v223 : string = $"parsing.eof / expected end of input / input: %A{v5}"
                        US17_1(v223)
                let v234 : US15 =
                    match v225 with
                    | US17_1(v231) -> (* Error *)
                        US15_1(v231)
                    | US17_0(v226, v227, v228, v229) -> (* Ok *)
                        US15_0(v4, v226, v227, v228, v229)
                match v234 with
                | US15_1(v250) -> (* Error *)
                    US15_1(v250)
                | US15_0(v235, v236, v237, v238, v239) -> (* Ok *)
                    let v240 : int32 = 0
                    let v241 : int32 = method48(v236, v240)
                    let v242 : (string -> int32) = String.length
                    let v243 : int32 = v242 v236
                    let v244 : (int32 -> int32) = int32
                    let v245 : int32 = v244 v241
                    let v246 : (int32 -> int32) = int32
                    let v247 : int32 = v246 v243
                    let v248 : string = v236.[int v245..int v247]
                    US15_0(v235, v248, v237, v238, v239)
            | US15_0(v214, v215, v216, v217, v218) -> (* Ok *)
                v213
        | US15_0(v131, v132, v133, v134, v135) -> (* Ok *)
            v130
    let v411 : US18 =
        match v257 with
        | US15_1(v408) -> (* Error *)
            US18_1(v408)
        | US15_0(v258, v259, v260, v261, v262) -> (* Ok *)
            let v263 : bool = "" = v259
            let v319 : US14 =
                if v263 then
                    let v264 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v260, v261, v262)}"
                    US14_1(v264)
                else
                    let v266 : char = v259.[int 0]
                    let v267 : bool = v266 = ' '
                    if v267 then
                        let v268 : (string -> int32) = String.length
                        let v269 : int32 = v268 v259
                        let v270 : (int32 -> int32) = int32
                        let v271 : int32 = v270 1
                        let v272 : (int32 -> int32) = int32
                        let v273 : int32 = v272 v269
                        let v274 : string = v259.[int v271..int v273]
                        let v275 : (char -> string) = _.ToString()
                        let v276 : string = v275 v266
                        let v277 : int32 = v276.Length
                        let v278 : (char []) = Array.zeroCreate<char> (v277)
                        let v279 : Mut5 = {l0 = 0} : Mut5
                        while method39(v277, v279) do
                            let v281 : int32 = v279.l0
                            let v282 : char = v276.[int v281]
                            v278.[int v281] <- v282
                            let v283 : int32 = v281 + 1
                            v279.l0 <- v283
                            ()
                        let v284 : ((char []) -> char list) = Array.toList
                        let v285 : char list = v284 v278
                        let v286 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v287 : (char -> (UH0 -> UH0)) = method40()
                        let v288 : (char list -> (UH0 -> UH0)) = v286 v287
                        let v289 : (UH0 -> UH0) = v288 v285
                        let v290 : UH0 = UH0_0
                        let v291 : UH0 = v289 v290
                        let struct (v292 : System.Text.StringBuilder, v293 : int32, v294 : int32) = method41(v291, v260, v261, v262)
                        US14_0(v266, v274, v292, v293, v294)
                    else
                        let v296 : (string -> int32) = String.length
                        let v297 : int32 = v296 v259
                        let v298 : string = "\n"
                        let v299 : int32 = v259.IndexOf v298 
                        let v300 : int32 = v299 - 1
                        let v301 : bool = -2 = v300
                        let v302 : int32 =
                            if v301 then
                                v297
                            else
                                v300
                        let v303 : (int32 -> int32) = int32
                        let v304 : int32 = v303 0
                        let v305 : (int32 -> int32) = int32
                        let v306 : int32 = v305 v302
                        let v307 : string = v259.[int v304..int v306]
                        let v308 : string = $"parsing.p_char / expected: '{' '}' / line: {v261} / col: {v262}
{v260}{v307}"
                        let v309 : int32 = v262 - 1
                        let v310 : (int32 -> (string -> string)) = String.replicate
                        let v311 : (string -> string) = v310 v309
                        let v312 : string = " "
                        let v313 : string = v311 v312
                        let v314 : string = "^"
                        let v315 : string = v313 + v314 
                        let v316 : string = $"{v308}
{v315}
"
                        US14_1(v316)
            let v331 : US19 =
                match v319 with
                | US14_1(v327) -> (* Error *)
                    let v328 : US16 = US16_1
                    US19_0(v328, v259, v260, v261, v262)
                | US14_0(v320, v321, v322, v323, v324) -> (* Ok *)
                    let v325 : US16 = US16_0(v320)
                    US19_0(v325, v321, v322, v323, v324)
            let v385 : US15 =
                match v331 with
                | US19_1(v382) -> (* Error *)
                    US15_1(v382)
                | US19_0(v332, v333, v334, v335, v336) -> (* Ok *)
                    let v337 : bool = "" = v333
                    let v369 : US14 =
                        if v337 then
                            let v338 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v334, v335, v336)}"
                            US14_1(v338)
                        else
                            let v340 : char = v333.[int 0]
                            let v341 : (string -> int32) = String.length
                            let v342 : int32 = v341 v333
                            let v343 : (int32 -> int32) = int32
                            let v344 : int32 = v343 1
                            let v345 : (int32 -> int32) = int32
                            let v346 : int32 = v345 v342
                            let v347 : string = v333.[int v344..int v346]
                            let v348 : (char -> string) = _.ToString()
                            let v349 : string = v348 v340
                            let v350 : int32 = v349.Length
                            let v351 : (char []) = Array.zeroCreate<char> (v350)
                            let v352 : Mut5 = {l0 = 0} : Mut5
                            while method39(v350, v352) do
                                let v354 : int32 = v352.l0
                                let v355 : char = v349.[int v354]
                                v351.[int v354] <- v355
                                let v356 : int32 = v354 + 1
                                v352.l0 <- v356
                                ()
                            let v357 : ((char []) -> char list) = Array.toList
                            let v358 : char list = v357 v351
                            let v359 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v360 : (char -> (UH0 -> UH0)) = method40()
                            let v361 : (char list -> (UH0 -> UH0)) = v359 v360
                            let v362 : (UH0 -> UH0) = v361 v358
                            let v363 : UH0 = UH0_0
                            let v364 : UH0 = v362 v363
                            let struct (v365 : System.Text.StringBuilder, v366 : int32, v367 : int32) = method41(v364, v334, v335, v336)
                            US14_0(v340, v347, v365, v366, v367)
                    match v369 with
                    | US14_1(v370) -> (* Error *)
                        US15_1(v370)
                    | US14_0(v372, v373, v374, v375, v376) -> (* Ok *)
                        let v377 : (char -> string) = _.ToString()
                        let v378 : string = v377 v372
                        method49(v378, v373, v374, v375, v376)
            let v397 : US20 =
                match v385 with
                | US15_1(v393) -> (* Error *)
                    let v394 : US3 = US3_1
                    US20_0(v394, v259, v260, v261, v262)
                | US15_0(v386, v387, v388, v389, v390) -> (* Ok *)
                    let v391 : US3 = US3_0(v386)
                    US20_0(v391, v387, v388, v389, v390)
            match v397 with
            | US20_1(v404) -> (* Error *)
                US18_1(v404)
            | US20_0(v398, v399, v400, v401, v402) -> (* Ok *)
                US18_0(v258, v398, v399, v400, v401, v402)
    match v411 with
    | US18_1(v419) -> (* Error *)
        US13_1(v419)
    | US18_0(v412, v413, v414, v415, v416, v417) -> (* Ok *)
        US13_0(v412, v413)
and method52 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US16 =
            if v3 then
                US16_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US16_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US16_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US16_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US16_1
        let v23 : char =
            match v19 with
            | US16_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US16_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method52(v0, v25)
and method53 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US15 =
    let v5 : bool = "" = v1
    let v57 : US14 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v8 : char list = '"' :: v7 
            let v9 : char list = '`' :: v8 
            let v10 : char list = '\\' :: v9 
            let v11 : (char list -> (char [])) = List.toArray
            let v12 : (char []) = v11 v10
            let v13 : string = $"parsing.none_of / unexpected end of input / chars: %A{v12} / s: %A{struct (v2, v3, v4)}"
            US14_1(v13)
        else
            let v15 : char = v1.[int 0]
            let v16 : (string -> int32) = String.length
            let v17 : int32 = v16 v1
            let v18 : (int32 -> int32) = int32
            let v19 : int32 = v18 1
            let v20 : (int32 -> int32) = int32
            let v21 : int32 = v20 v17
            let v22 : string = v1.[int v19..int v21]
            let v23 : int64 = 0L
            let v24 : bool = method52(v15, v23)
            let v25 : bool = v24 = false
            if v25 then
                let v26 : (char -> string) = _.ToString()
                let v27 : string = v26 v15
                let v28 : int32 = v27.Length
                let v29 : (char []) = Array.zeroCreate<char> (v28)
                let v30 : Mut5 = {l0 = 0} : Mut5
                while method39(v28, v30) do
                    let v32 : int32 = v30.l0
                    let v33 : char = v27.[int v32]
                    v29.[int v32] <- v33
                    let v34 : int32 = v32 + 1
                    v30.l0 <- v34
                    ()
                let v35 : ((char []) -> char list) = Array.toList
                let v36 : char list = v35 v29
                let v37 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v38 : (char -> (UH0 -> UH0)) = method40()
                let v39 : (char list -> (UH0 -> UH0)) = v37 v38
                let v40 : (UH0 -> UH0) = v39 v36
                let v41 : UH0 = UH0_0
                let v42 : UH0 = v40 v41
                let struct (v43 : System.Text.StringBuilder, v44 : int32, v45 : int32) = method41(v42, v2, v3, v4)
                US14_0(v15, v22, v43, v44, v45)
            else
                let v47 : char list = []
                let v48 : char list = ' ' :: v47 
                let v49 : char list = '"' :: v48 
                let v50 : char list = '`' :: v49 
                let v51 : char list = '\\' :: v50 
                let v52 : (char list -> (char [])) = List.toArray
                let v53 : (char []) = v52 v51
                let v54 : string = $"parsing.none_of / unexpected char: '{v15}' / chars: %A{v53} / s: %A{struct (v2, v3, v4)}"
                US14_1(v54)
    match v57 with
    | US14_1(v67) -> (* Error *)
        US15_0(v0, v1, v2, v3, v4)
    | US14_0(v58, v59, v60, v61, v62) -> (* Ok *)
        let v63 : (char -> string) = _.ToString()
        let v64 : string = v63 v58
        let v65 : string = v0 + v64 
        method53(v65, v59, v60, v61, v62)
and method55 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US16 =
            if v3 then
                US16_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US16_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US16_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US16_1
        let v19 : char =
            match v15 with
            | US16_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US16_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method55(v0, v21)
and closure16 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    let v60 : US14 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US14_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '\\'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v18 : int32 = v17.Length
                let v19 : (char []) = Array.zeroCreate<char> (v18)
                let v20 : Mut5 = {l0 = 0} : Mut5
                while method39(v18, v20) do
                    let v22 : int32 = v20.l0
                    let v23 : char = v17.[int v22]
                    v19.[int v22] <- v23
                    let v24 : int32 = v22 + 1
                    v20.l0 <- v24
                    ()
                let v25 : ((char []) -> char list) = Array.toList
                let v26 : char list = v25 v19
                let v27 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v28 : (char -> (UH0 -> UH0)) = method40()
                let v29 : (char list -> (UH0 -> UH0)) = v27 v28
                let v30 : (UH0 -> UH0) = v29 v26
                let v31 : UH0 = UH0_0
                let v32 : UH0 = v30 v31
                let struct (v33 : System.Text.StringBuilder, v34 : int32, v35 : int32) = method41(v32, v1, v2, v3)
                US14_0(v7, v15, v33, v34, v35)
            else
                let v37 : (string -> int32) = String.length
                let v38 : int32 = v37 v0
                let v39 : string = "\n"
                let v40 : int32 = v0.IndexOf v39 
                let v41 : int32 = v40 - 1
                let v42 : bool = -2 = v41
                let v43 : int32 =
                    if v42 then
                        v38
                    else
                        v41
                let v44 : (int32 -> int32) = int32
                let v45 : int32 = v44 0
                let v46 : (int32 -> int32) = int32
                let v47 : int32 = v46 v43
                let v48 : string = v0.[int v45..int v47]
                let v49 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v48}"
                let v50 : int32 = v3 - 1
                let v51 : (int32 -> (string -> string)) = String.replicate
                let v52 : (string -> string) = v51 v50
                let v53 : string = " "
                let v54 : string = v52 v53
                let v55 : string = "^"
                let v56 : string = v54 + v55 
                let v57 : string = $"{v49}
{v56}
"
                US14_1(v57)
    let v102 : US14 =
        match v60 with
        | US14_1(v99) -> (* Error *)
            US14_1(v99)
        | US14_0(v61, v62, v63, v64, v65) -> (* Ok *)
            let v66 : bool = "" = v62
            if v66 then
                let v67 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v63, v64, v65)}"
                US14_1(v67)
            else
                let v69 : char = v62.[int 0]
                let v70 : (string -> int32) = String.length
                let v71 : int32 = v70 v62
                let v72 : (int32 -> int32) = int32
                let v73 : int32 = v72 1
                let v74 : (int32 -> int32) = int32
                let v75 : int32 = v74 v71
                let v76 : string = v62.[int v73..int v75]
                let v77 : (char -> string) = _.ToString()
                let v78 : string = v77 v69
                let v79 : int32 = v78.Length
                let v80 : (char []) = Array.zeroCreate<char> (v79)
                let v81 : Mut5 = {l0 = 0} : Mut5
                while method39(v79, v81) do
                    let v83 : int32 = v81.l0
                    let v84 : char = v78.[int v83]
                    v80.[int v83] <- v84
                    let v85 : int32 = v83 + 1
                    v81.l0 <- v85
                    ()
                let v86 : ((char []) -> char list) = Array.toList
                let v87 : char list = v86 v80
                let v88 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v89 : (char -> (UH0 -> UH0)) = method40()
                let v90 : (char list -> (UH0 -> UH0)) = v88 v89
                let v91 : (UH0 -> UH0) = v90 v87
                let v92 : UH0 = UH0_0
                let v93 : UH0 = v91 v92
                let struct (v94 : System.Text.StringBuilder, v95 : int32, v96 : int32) = method41(v93, v63, v64, v65)
                US14_0(v69, v76, v94, v95, v96)
    match v102 with
    | US14_1(v110) -> (* Error *)
        US15_1(v110)
    | US14_0(v103, v104, v105, v106, v107) -> (* Ok *)
        let v108 : string = $"{'\\'}{v103}"
        US15_0(v108, v104, v105, v106, v107)
and closure17 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    let v60 : US14 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US14_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '`'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v18 : int32 = v17.Length
                let v19 : (char []) = Array.zeroCreate<char> (v18)
                let v20 : Mut5 = {l0 = 0} : Mut5
                while method39(v18, v20) do
                    let v22 : int32 = v20.l0
                    let v23 : char = v17.[int v22]
                    v19.[int v22] <- v23
                    let v24 : int32 = v22 + 1
                    v20.l0 <- v24
                    ()
                let v25 : ((char []) -> char list) = Array.toList
                let v26 : char list = v25 v19
                let v27 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v28 : (char -> (UH0 -> UH0)) = method40()
                let v29 : (char list -> (UH0 -> UH0)) = v27 v28
                let v30 : (UH0 -> UH0) = v29 v26
                let v31 : UH0 = UH0_0
                let v32 : UH0 = v30 v31
                let struct (v33 : System.Text.StringBuilder, v34 : int32, v35 : int32) = method41(v32, v1, v2, v3)
                US14_0(v7, v15, v33, v34, v35)
            else
                let v37 : (string -> int32) = String.length
                let v38 : int32 = v37 v0
                let v39 : string = "\n"
                let v40 : int32 = v0.IndexOf v39 
                let v41 : int32 = v40 - 1
                let v42 : bool = -2 = v41
                let v43 : int32 =
                    if v42 then
                        v38
                    else
                        v41
                let v44 : (int32 -> int32) = int32
                let v45 : int32 = v44 0
                let v46 : (int32 -> int32) = int32
                let v47 : int32 = v46 v43
                let v48 : string = v0.[int v45..int v47]
                let v49 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v48}"
                let v50 : int32 = v3 - 1
                let v51 : (int32 -> (string -> string)) = String.replicate
                let v52 : (string -> string) = v51 v50
                let v53 : string = " "
                let v54 : string = v52 v53
                let v55 : string = "^"
                let v56 : string = v54 + v55 
                let v57 : string = $"{v49}
{v56}
"
                US14_1(v57)
    let v102 : US14 =
        match v60 with
        | US14_1(v99) -> (* Error *)
            US14_1(v99)
        | US14_0(v61, v62, v63, v64, v65) -> (* Ok *)
            let v66 : bool = "" = v62
            if v66 then
                let v67 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v63, v64, v65)}"
                US14_1(v67)
            else
                let v69 : char = v62.[int 0]
                let v70 : (string -> int32) = String.length
                let v71 : int32 = v70 v62
                let v72 : (int32 -> int32) = int32
                let v73 : int32 = v72 1
                let v74 : (int32 -> int32) = int32
                let v75 : int32 = v74 v71
                let v76 : string = v62.[int v73..int v75]
                let v77 : (char -> string) = _.ToString()
                let v78 : string = v77 v69
                let v79 : int32 = v78.Length
                let v80 : (char []) = Array.zeroCreate<char> (v79)
                let v81 : Mut5 = {l0 = 0} : Mut5
                while method39(v79, v81) do
                    let v83 : int32 = v81.l0
                    let v84 : char = v78.[int v83]
                    v80.[int v83] <- v84
                    let v85 : int32 = v83 + 1
                    v81.l0 <- v85
                    ()
                let v86 : ((char []) -> char list) = Array.toList
                let v87 : char list = v86 v80
                let v88 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v89 : (char -> (UH0 -> UH0)) = method40()
                let v90 : (char list -> (UH0 -> UH0)) = v88 v89
                let v91 : (UH0 -> UH0) = v90 v87
                let v92 : UH0 = UH0_0
                let v93 : UH0 = v91 v92
                let struct (v94 : System.Text.StringBuilder, v95 : int32, v96 : int32) = method41(v93, v63, v64, v65)
                US14_0(v69, v76, v94, v95, v96)
    match v102 with
    | US14_1(v110) -> (* Error *)
        US15_1(v110)
    | US14_0(v103, v104, v105, v106, v107) -> (* Ok *)
        let v108 : string = $"{'`'}{v103}"
        US15_0(v108, v104, v105, v106, v107)
and method56 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US15 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method56(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US15_1(v5)
and method57 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method57(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method54 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US22 =
    let v5 : bool = "" = v1
    let v55 : US14 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v8 : char list = '`' :: v7 
            let v9 : char list = '\\' :: v8 
            let v10 : (char list -> (char [])) = List.toArray
            let v11 : (char []) = v10 v9
            let v12 : string = $"parsing.none_of / unexpected end of input / chars: %A{v11} / s: %A{struct (v2, v3, v4)}"
            US14_1(v12)
        else
            let v14 : char = v1.[int 0]
            let v15 : (string -> int32) = String.length
            let v16 : int32 = v15 v1
            let v17 : (int32 -> int32) = int32
            let v18 : int32 = v17 1
            let v19 : (int32 -> int32) = int32
            let v20 : int32 = v19 v16
            let v21 : string = v1.[int v18..int v20]
            let v22 : int64 = 0L
            let v23 : bool = method55(v14, v22)
            let v24 : bool = v23 = false
            if v24 then
                let v25 : (char -> string) = _.ToString()
                let v26 : string = v25 v14
                let v27 : int32 = v26.Length
                let v28 : (char []) = Array.zeroCreate<char> (v27)
                let v29 : Mut5 = {l0 = 0} : Mut5
                while method39(v27, v29) do
                    let v31 : int32 = v29.l0
                    let v32 : char = v26.[int v31]
                    v28.[int v31] <- v32
                    let v33 : int32 = v31 + 1
                    v29.l0 <- v33
                    ()
                let v34 : ((char []) -> char list) = Array.toList
                let v35 : char list = v34 v28
                let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v37 : (char -> (UH0 -> UH0)) = method40()
                let v38 : (char list -> (UH0 -> UH0)) = v36 v37
                let v39 : (UH0 -> UH0) = v38 v35
                let v40 : UH0 = UH0_0
                let v41 : UH0 = v39 v40
                let struct (v42 : System.Text.StringBuilder, v43 : int32, v44 : int32) = method41(v41, v2, v3, v4)
                US14_0(v14, v21, v42, v43, v44)
            else
                let v46 : char list = []
                let v47 : char list = '"' :: v46 
                let v48 : char list = '`' :: v47 
                let v49 : char list = '\\' :: v48 
                let v50 : (char list -> (char [])) = List.toArray
                let v51 : (char []) = v50 v49
                let v52 : string = $"parsing.none_of / unexpected char: '{v14}' / chars: %A{v51} / s: %A{struct (v2, v3, v4)}"
                US14_1(v52)
    let v67 : US15 =
        match v55 with
        | US14_1(v64) -> (* Error *)
            US15_1(v64)
        | US14_0(v56, v57, v58, v59, v60) -> (* Ok *)
            let v61 : (char -> string) = _.ToString()
            let v62 : string = v61 v56
            US15_0(v62, v57, v58, v59, v60)
    let v81 : US15 =
        match v67 with
        | US15_1(v73) -> (* Error *)
            let v74 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure16()
            let v75 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure17()
            let v76 : UH3 = UH3_0
            let v77 : UH3 = UH3_1(v75, v76)
            let v78 : UH3 = UH3_1(v74, v77)
            method56(v1, v2, v3, v4, v78)
        | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
            v67
    match v81 with
    | US15_1(v89) -> (* Error *)
        let v90 : UH2 = UH2_0
        let v91 : UH2 = method57(v0, v90)
        US22_0(v91, v1, v2, v3, v4)
    | US15_0(v82, v83, v84, v85, v86) -> (* Ok *)
        let v87 : UH2 = UH2_1(v82, v0)
        method54(v87, v83, v84, v85, v86)
and method58 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method58(v3, v1)
        let v5 : string list = v2 :: v4 
        v5
    | UH2_0 -> (* Nil *)
        v1
and method59 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US22 =
    let v5 : bool = "" = v1
    let v55 : US14 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v8 : char list = '`' :: v7 
            let v9 : char list = '\\' :: v8 
            let v10 : (char list -> (char [])) = List.toArray
            let v11 : (char []) = v10 v9
            let v12 : string = $"parsing.none_of / unexpected end of input / chars: %A{v11} / s: %A{struct (v2, v3, v4)}"
            US14_1(v12)
        else
            let v14 : char = v1.[int 0]
            let v15 : (string -> int32) = String.length
            let v16 : int32 = v15 v1
            let v17 : (int32 -> int32) = int32
            let v18 : int32 = v17 1
            let v19 : (int32 -> int32) = int32
            let v20 : int32 = v19 v16
            let v21 : string = v1.[int v18..int v20]
            let v22 : int64 = 0L
            let v23 : bool = method55(v14, v22)
            let v24 : bool = v23 = false
            if v24 then
                let v25 : (char -> string) = _.ToString()
                let v26 : string = v25 v14
                let v27 : int32 = v26.Length
                let v28 : (char []) = Array.zeroCreate<char> (v27)
                let v29 : Mut5 = {l0 = 0} : Mut5
                while method39(v27, v29) do
                    let v31 : int32 = v29.l0
                    let v32 : char = v26.[int v31]
                    v28.[int v31] <- v32
                    let v33 : int32 = v31 + 1
                    v29.l0 <- v33
                    ()
                let v34 : ((char []) -> char list) = Array.toList
                let v35 : char list = v34 v28
                let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v37 : (char -> (UH0 -> UH0)) = method40()
                let v38 : (char list -> (UH0 -> UH0)) = v36 v37
                let v39 : (UH0 -> UH0) = v38 v35
                let v40 : UH0 = UH0_0
                let v41 : UH0 = v39 v40
                let struct (v42 : System.Text.StringBuilder, v43 : int32, v44 : int32) = method41(v41, v2, v3, v4)
                US14_0(v14, v21, v42, v43, v44)
            else
                let v46 : char list = []
                let v47 : char list = '"' :: v46 
                let v48 : char list = '`' :: v47 
                let v49 : char list = '\\' :: v48 
                let v50 : (char list -> (char [])) = List.toArray
                let v51 : (char []) = v50 v49
                let v52 : string = $"parsing.none_of / unexpected char: '{v14}' / chars: %A{v51} / s: %A{struct (v2, v3, v4)}"
                US14_1(v52)
    let v67 : US15 =
        match v55 with
        | US14_1(v64) -> (* Error *)
            US15_1(v64)
        | US14_0(v56, v57, v58, v59, v60) -> (* Ok *)
            let v61 : (char -> string) = _.ToString()
            let v62 : string = v61 v56
            US15_0(v62, v57, v58, v59, v60)
    match v67 with
    | US15_1(v75) -> (* Error *)
        let v76 : UH2 = UH2_0
        let v77 : UH2 = method57(v0, v76)
        US22_0(v77, v1, v2, v3, v4)
    | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
        let v73 : UH2 = UH2_1(v68, v0)
        method59(v73, v69, v70, v71, v72)
and method60 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method60(v0, v6)
        else
            v1
and method51 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US22 =
    let v5 : bool = "" = v1
    let v57 : US14 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v8 : char list = '"' :: v7 
            let v9 : char list = '`' :: v8 
            let v10 : char list = '\\' :: v9 
            let v11 : (char list -> (char [])) = List.toArray
            let v12 : (char []) = v11 v10
            let v13 : string = $"parsing.none_of / unexpected end of input / chars: %A{v12} / s: %A{struct (v2, v3, v4)}"
            US14_1(v13)
        else
            let v15 : char = v1.[int 0]
            let v16 : (string -> int32) = String.length
            let v17 : int32 = v16 v1
            let v18 : (int32 -> int32) = int32
            let v19 : int32 = v18 1
            let v20 : (int32 -> int32) = int32
            let v21 : int32 = v20 v17
            let v22 : string = v1.[int v19..int v21]
            let v23 : int64 = 0L
            let v24 : bool = method52(v15, v23)
            let v25 : bool = v24 = false
            if v25 then
                let v26 : (char -> string) = _.ToString()
                let v27 : string = v26 v15
                let v28 : int32 = v27.Length
                let v29 : (char []) = Array.zeroCreate<char> (v28)
                let v30 : Mut5 = {l0 = 0} : Mut5
                while method39(v28, v30) do
                    let v32 : int32 = v30.l0
                    let v33 : char = v27.[int v32]
                    v29.[int v32] <- v33
                    let v34 : int32 = v32 + 1
                    v30.l0 <- v34
                    ()
                let v35 : ((char []) -> char list) = Array.toList
                let v36 : char list = v35 v29
                let v37 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v38 : (char -> (UH0 -> UH0)) = method40()
                let v39 : (char list -> (UH0 -> UH0)) = v37 v38
                let v40 : (UH0 -> UH0) = v39 v36
                let v41 : UH0 = UH0_0
                let v42 : UH0 = v40 v41
                let struct (v43 : System.Text.StringBuilder, v44 : int32, v45 : int32) = method41(v42, v2, v3, v4)
                US14_0(v15, v22, v43, v44, v45)
            else
                let v47 : char list = []
                let v48 : char list = ' ' :: v47 
                let v49 : char list = '"' :: v48 
                let v50 : char list = '`' :: v49 
                let v51 : char list = '\\' :: v50 
                let v52 : (char list -> (char [])) = List.toArray
                let v53 : (char []) = v52 v51
                let v54 : string = $"parsing.none_of / unexpected char: '{v15}' / chars: %A{v53} / s: %A{struct (v2, v3, v4)}"
                US14_1(v54)
    let v69 : US15 =
        match v57 with
        | US14_1(v58) -> (* Error *)
            US15_1(v58)
        | US14_0(v60, v61, v62, v63, v64) -> (* Ok *)
            let v65 : (char -> string) = _.ToString()
            let v66 : string = v65 v60
            method53(v66, v61, v62, v63, v64)
    let v292 : US15 =
        match v69 with
        | US15_1(v75) -> (* Error *)
            let v131 : US14 =
                if v5 then
                    let v76 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
                    US14_1(v76)
                else
                    let v78 : char = v1.[int 0]
                    let v79 : bool = v78 = '"'
                    if v79 then
                        let v80 : (string -> int32) = String.length
                        let v81 : int32 = v80 v1
                        let v82 : (int32 -> int32) = int32
                        let v83 : int32 = v82 1
                        let v84 : (int32 -> int32) = int32
                        let v85 : int32 = v84 v81
                        let v86 : string = v1.[int v83..int v85]
                        let v87 : (char -> string) = _.ToString()
                        let v88 : string = v87 v78
                        let v89 : int32 = v88.Length
                        let v90 : (char []) = Array.zeroCreate<char> (v89)
                        let v91 : Mut5 = {l0 = 0} : Mut5
                        while method39(v89, v91) do
                            let v93 : int32 = v91.l0
                            let v94 : char = v88.[int v93]
                            v90.[int v93] <- v94
                            let v95 : int32 = v93 + 1
                            v91.l0 <- v95
                            ()
                        let v96 : ((char []) -> char list) = Array.toList
                        let v97 : char list = v96 v90
                        let v98 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v99 : (char -> (UH0 -> UH0)) = method40()
                        let v100 : (char list -> (UH0 -> UH0)) = v98 v99
                        let v101 : (UH0 -> UH0) = v100 v97
                        let v102 : UH0 = UH0_0
                        let v103 : UH0 = v101 v102
                        let struct (v104 : System.Text.StringBuilder, v105 : int32, v106 : int32) = method41(v103, v2, v3, v4)
                        US14_0(v78, v86, v104, v105, v106)
                    else
                        let v108 : (string -> int32) = String.length
                        let v109 : int32 = v108 v1
                        let v110 : string = "\n"
                        let v111 : int32 = v1.IndexOf v110 
                        let v112 : int32 = v111 - 1
                        let v113 : bool = -2 = v112
                        let v114 : int32 =
                            if v113 then
                                v109
                            else
                                v112
                        let v115 : (int32 -> int32) = int32
                        let v116 : int32 = v115 0
                        let v117 : (int32 -> int32) = int32
                        let v118 : int32 = v117 v114
                        let v119 : string = v1.[int v116..int v118]
                        let v120 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v119}"
                        let v121 : int32 = v4 - 1
                        let v122 : (int32 -> (string -> string)) = String.replicate
                        let v123 : (string -> string) = v122 v121
                        let v124 : string = " "
                        let v125 : string = v123 v124
                        let v126 : string = "^"
                        let v127 : string = v125 + v126 
                        let v128 : string = $"{v120}
{v127}
"
                        US14_1(v128)
            let v237 : US15 =
                match v131 with
                | US14_1(v234) -> (* Error *)
                    US15_1(v234)
                | US14_0(v132, v133, v134, v135, v136) -> (* Ok *)
                    let v137 : UH2 = UH2_0
                    let v138 : US22 = method54(v137, v133, v134, v135, v136)
                    let v155 : US15 =
                        match v138 with
                        | US22_1(v152) -> (* Error *)
                            US15_1(v152)
                        | US22_0(v139, v140, v141, v142, v143) -> (* Ok *)
                            let v144 : string list = []
                            let v145 : string list = method58(v139, v144)
                            let v146 : string seq = seq { for i = 0 to v145.Length - 1 do yield v145.[i] }
                            let v147 : (string -> (string seq -> string)) = String.concat
                            let v148 : string = ""
                            let v149 : (string seq -> string) = v147 v148
                            let v150 : string = v149 v146
                            US15_0(v150, v140, v141, v142, v143)
                    match v155 with
                    | US15_1(v229) -> (* Error *)
                        let v230 : string = "between / expected content"
                        US15_1(v230)
                    | US15_0(v156, v157, v158, v159, v160) -> (* Ok *)
                        let v161 : bool = "" = v157
                        let v217 : US14 =
                            if v161 then
                                let v162 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v158, v159, v160)}"
                                US14_1(v162)
                            else
                                let v164 : char = v157.[int 0]
                                let v165 : bool = v164 = '"'
                                if v165 then
                                    let v166 : (string -> int32) = String.length
                                    let v167 : int32 = v166 v157
                                    let v168 : (int32 -> int32) = int32
                                    let v169 : int32 = v168 1
                                    let v170 : (int32 -> int32) = int32
                                    let v171 : int32 = v170 v167
                                    let v172 : string = v157.[int v169..int v171]
                                    let v173 : (char -> string) = _.ToString()
                                    let v174 : string = v173 v164
                                    let v175 : int32 = v174.Length
                                    let v176 : (char []) = Array.zeroCreate<char> (v175)
                                    let v177 : Mut5 = {l0 = 0} : Mut5
                                    while method39(v175, v177) do
                                        let v179 : int32 = v177.l0
                                        let v180 : char = v174.[int v179]
                                        v176.[int v179] <- v180
                                        let v181 : int32 = v179 + 1
                                        v177.l0 <- v181
                                        ()
                                    let v182 : ((char []) -> char list) = Array.toList
                                    let v183 : char list = v182 v176
                                    let v184 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v185 : (char -> (UH0 -> UH0)) = method40()
                                    let v186 : (char list -> (UH0 -> UH0)) = v184 v185
                                    let v187 : (UH0 -> UH0) = v186 v183
                                    let v188 : UH0 = UH0_0
                                    let v189 : UH0 = v187 v188
                                    let struct (v190 : System.Text.StringBuilder, v191 : int32, v192 : int32) = method41(v189, v158, v159, v160)
                                    US14_0(v164, v172, v190, v191, v192)
                                else
                                    let v194 : (string -> int32) = String.length
                                    let v195 : int32 = v194 v157
                                    let v196 : string = "\n"
                                    let v197 : int32 = v157.IndexOf v196 
                                    let v198 : int32 = v197 - 1
                                    let v199 : bool = -2 = v198
                                    let v200 : int32 =
                                        if v199 then
                                            v195
                                        else
                                            v198
                                    let v201 : (int32 -> int32) = int32
                                    let v202 : int32 = v201 0
                                    let v203 : (int32 -> int32) = int32
                                    let v204 : int32 = v203 v200
                                    let v205 : string = v157.[int v202..int v204]
                                    let v206 : string = $"parsing.p_char / expected: '{'"'}' / line: {v159} / col: {v160}
{v158}{v205}"
                                    let v207 : int32 = v160 - 1
                                    let v208 : (int32 -> (string -> string)) = String.replicate
                                    let v209 : (string -> string) = v208 v207
                                    let v210 : string = " "
                                    let v211 : string = v209 v210
                                    let v212 : string = "^"
                                    let v213 : string = v211 + v212 
                                    let v214 : string = $"{v206}
{v213}
"
                                    US14_1(v214)
                        match v217 with
                        | US14_1(v224) -> (* Error *)
                            let v225 : string = $"between / expected closing delimiter / e: %A{v224} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v133, v134, v135, v136)} / rest2: %A{struct (v157, v158, v159, v160)}"
                            US15_1(v225)
                        | US14_0(v218, v219, v220, v221, v222) -> (* Ok *)
                            US15_0(v156, v219, v220, v221, v222)
            match v237 with
            | US15_1(v243) -> (* Error *)
                let v244 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure16()
                let v245 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure17()
                let v246 : UH3 = UH3_0
                let v247 : UH3 = UH3_1(v245, v246)
                let v248 : UH3 = UH3_1(v244, v247)
                let v249 : US15 = method56(v1, v2, v3, v4, v248)
                let v260 : US15 =
                    match v249 with
                    | US15_1(v257) -> (* Error *)
                        US15_1(v257)
                    | US15_0(v250, v251, v252, v253, v254) -> (* Ok *)
                        let v255 : string = ""
                        US15_0(v255, v251, v252, v253, v254)
                let v271 : US22 =
                    match v260 with
                    | US15_1(v268) -> (* Error *)
                        US22_1(v268)
                    | US15_0(v261, v262, v263, v264, v265) -> (* Ok *)
                        let v266 : UH2 = UH2_0
                        method59(v266, v262, v263, v264, v265)
                match v271 with
                | US22_1(v285) -> (* Error *)
                    US15_1(v285)
                | US22_0(v272, v273, v274, v275, v276) -> (* Ok *)
                    let v277 : string list = []
                    let v278 : string list = method58(v272, v277)
                    let v279 : string seq = seq { for i = 0 to v278.Length - 1 do yield v278.[i] }
                    let v280 : (string -> (string seq -> string)) = String.concat
                    let v281 : string = ""
                    let v282 : (string seq -> string) = v280 v281
                    let v283 : string = v282 v279
                    US15_0(v283, v273, v274, v275, v276)
            | US15_0(v238, v239, v240, v241, v242) -> (* Ok *)
                v237
        | US15_0(v70, v71, v72, v73, v74) -> (* Ok *)
            v69
    match v292 with
    | US15_1(v293) -> (* Error *)
        let v294 : UH2 = UH2_0
        let v295 : UH2 = method57(v0, v294)
        US22_0(v295, v1, v2, v3, v4)
    | US15_0(v297, v298, v299, v300, v301) -> (* Ok *)
        let v302 : int32 = 0
        let v303 : int32 = method60(v298, v302)
        let v304 : bool = 0 = v303
        let v315 : US17 =
            if v304 then
                let v305 : string = "spaces1 / expected at least one space"
                US17_1(v305)
            else
                let v307 : (string -> int32) = String.length
                let v308 : int32 = v307 v298
                let v309 : (int32 -> int32) = int32
                let v310 : int32 = v309 v303
                let v311 : (int32 -> int32) = int32
                let v312 : int32 = v311 v308
                let v313 : string = v298.[int v310..int v312]
                US17_0(v313, v299, v300, v301)
        match v315 with
        | US17_1(v316) -> (* Error *)
            let v317 : UH2 = UH2_0
            let v318 : UH2 = UH2_1(v297, v317)
            let v319 : UH2 = method57(v0, v318)
            US22_0(v319, v298, v299, v300, v301)
        | US17_0(v321, v322, v323, v324) -> (* Ok *)
            let v325 : UH2 = UH2_1(v297, v0)
            method51(v325, v321, v322, v323, v324)
and method50 (v0 : string) : US21 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v4 : string = ""
    let v5 : string = v3 |> Option.defaultValue v4 
    let v6 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v7 : System.Text.StringBuilder = v6 v4
    let v8 : UH2 = UH2_0
    let v9 : int32 = 1
    let v10 : int32 = 1
    let v11 : US22 = method51(v8, v5, v7, v9, v10)
    match v11 with
    | US22_1(v22) -> (* Error *)
        US21_1(v22)
    | US22_0(v12, v13, v14, v15, v16) -> (* Ok *)
        let v17 : string list = []
        let v18 : string list = method58(v12, v17)
        let v19 : (string list -> (string [])) = List.toArray
        let v20 : (string []) = v19 v18
        US21_0(v20)
and closure18 () () : string =
    let v0 : string = $"runtime.execute_with_options"
    v0
and closure19 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option) =
    struct (v7, v8, v0, v1, v2, v3, v4, v5, v6)
and method63 (v0 : Mut4, v1 : Vec<std_string_String>) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method65 (v0 : Mut4, v1 : System.Threading.CancellationToken option) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method66 (v0 : Mut4, v1 : (struct (string * string) [])) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method67 (v0 : Mut4, v1 : (struct (int32 * string * bool) -> Async<unit>) option) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method68 (v0 : Mut4, v1 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method69 (v0 : Mut4, v1 : bool) : unit =
    let v4 : string =
        if v1 then
            let v2 : string = "true"
            v2
        else
            let v3 : string = "false"
            v3
    let v5 : string = $"{v4}"
    let v6 : string = v0.l0
    let v7 : string = v6 + v5 
    v0.l0 <- v7
    ()
and method70 (v0 : Mut4, v1 : string option) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method64 (v0 : Mut4, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : unit =
    let v8 : string = "{ "
    method11(v0, v8)
    method12(v0)
    let v9 : string = "command"
    method11(v0, v9)
    let v10 : string = " = "
    method11(v0, v10)
    method11(v0, v1)
    let v11 : string = "; "
    method11(v0, v11)
    let v12 : string = "cancellation_token"
    method11(v0, v12)
    method11(v0, v10)
    method65(v0, v2)
    method11(v0, v11)
    let v13 : string = "environment_variables"
    method11(v0, v13)
    method11(v0, v10)
    method66(v0, v3)
    method11(v0, v11)
    let v14 : string = "on_line"
    method11(v0, v14)
    method11(v0, v10)
    method67(v0, v4)
    method11(v0, v11)
    let v15 : string = "stdin"
    method11(v0, v15)
    method11(v0, v10)
    method68(v0, v5)
    method11(v0, v11)
    let v16 : string = "trace"
    method11(v0, v16)
    method11(v0, v10)
    method69(v0, v6)
    method11(v0, v11)
    let v17 : string = "working_directory"
    method11(v0, v17)
    method11(v0, v10)
    method70(v0, v7)
    let v18 : string = " }"
    method11(v0, v18)
and method62 (v0 : Mut4, v1 : string, v2 : Vec<std_string_String>, v3 : string, v4 : System.Threading.CancellationToken option, v5 : (struct (string * string) []), v6 : (struct (int32 * string * bool) -> Async<unit>) option, v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v8 : bool, v9 : string option) : unit =
    let v10 : string = "{ "
    method11(v0, v10)
    method12(v0)
    let v11 : string = "file_name"
    method11(v0, v11)
    let v12 : string = " = "
    method11(v0, v12)
    method11(v0, v1)
    let v13 : string = "; "
    method11(v0, v13)
    let v14 : string = "arguments"
    method11(v0, v14)
    method11(v0, v12)
    method63(v0, v2)
    method11(v0, v13)
    let v15 : string = "options"
    method11(v0, v15)
    method11(v0, v12)
    method64(v0, v3, v4, v5, v6, v7, v8, v9)
    let v16 : string = " }"
    method11(v0, v16)
and closure20 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : string, v331 : Vec<std_string_String>, v332 : string, v333 : System.Threading.CancellationToken option, v334 : (struct (string * string) []), v335 : (struct (int32 * string * bool) -> Async<unit>) option, v336 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v337 : bool, v338 : string option) = v2 ()
    let v339 : string = ""
    let v340 : Mut4 = {l0 = v339} : Mut4
    method62(v340, v330, v331, v332, v333, v334, v335, v336, v337, v338)
    let v341 : string = v340.l0
    let v342 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v341}"
    let v343 : char list = []
    let v344 : (char list -> (char [])) = List.toArray
    let v345 : (char []) = v344 v343
    let v346 : string = v342.TrimStart v345 
    let v347 : char list = []
    let v348 : char list = '/' :: v347 
    let v349 : char list = ' ' :: v348 
    let v350 : (char list -> (char [])) = List.toArray
    let v351 : (char []) = v350 v349
    let v352 : string = v346.TrimEnd v351 
    v352
and method61 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) : unit =
    let v3 : (unit -> string) = closure20(v0, v1, v2)
    method14(v0, v3)
and closure21 () (v0 : std_io_Error) : std_string_String =
    let v1 : bool = true
    let mutable _v1 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v9 : std_string_String = null |> unbox<std_string_String>
    v9 
    #endif
#else
    let v10 : std_string_String = null |> unbox<std_string_String>
    v10 
    #endif
    |> fun x -> _v1 <- Some x
    let v11 : std_string_String = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v11
and method71 () : (std_io_Error -> std_string_String) =
    closure21()
and closure22 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US23 =
    US23_0(v0)
and method72 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US23) =
    closure22()
and closure23 () (v0 : std_string_String) : US23 =
    US23_1(v0)
and method73 () : (std_string_String -> US23) =
    closure23()
and closure24 () () : string =
    let v0 : string = $"runtime.execute_with_options / child error"
    v0
and closure25 (v0 : std_string_String) () : std_string_String =
    v0
and method76 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method75 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "error"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method76(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure26 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let v330 : std_string_String = v2 ()
    let v331 : string = ""
    let v332 : Mut4 = {l0 = v331} : Mut4
    method75(v332, v330)
    let v333 : string = v332.l0
    let v334 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v333}"
    let v335 : char list = []
    let v336 : (char list -> (char [])) = List.toArray
    let v337 : (char []) = v336 v335
    let v338 : string = v334.TrimStart v337 
    let v339 : char list = []
    let v340 : char list = '/' :: v339 
    let v341 : char list = ' ' :: v340 
    let v342 : (char list -> (char [])) = List.toArray
    let v343 : (char []) = v342 v341
    let v344 : string = v338.TrimEnd v343 
    v344
and method74 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) : unit =
    let v3 : (unit -> string) = closure26(v0, v1, v2)
    method14(v0, v3)
and method77 (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : std_sync_Arc<std_sync_Mutex<std_process_Child option>> =
    v0
and closure27 () (v0 : std_string_String) : US25 =
    US25_0(v0)
and method78 () : (std_string_String -> US25) =
    closure27()
and closure28 () (v0 : std_string_String) : US25 =
    US25_1(v0)
and method79 () : (std_string_String -> US25) =
    closure28()
and closure29 () () : string =
    let v0 : string = $"runtime.stdio_line"
    v0
and closure30 (v0 : std_string_String) () : std_string_String =
    v0
and method81 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "e"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method76(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure31 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let v330 : std_string_String = v2 ()
    let v331 : string = ""
    let v332 : Mut4 = {l0 = v331} : Mut4
    method81(v332, v330)
    let v333 : string = v332.l0
    let v334 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v333}"
    let v335 : char list = []
    let v336 : (char list -> (char [])) = List.toArray
    let v337 : (char []) = v336 v335
    let v338 : string = v334.TrimStart v337 
    let v339 : char list = []
    let v340 : char list = '/' :: v339 
    let v341 : char list = ' ' :: v340 
    let v342 : (char list -> (char [])) = List.toArray
    let v343 : (char []) = v342 v341
    let v344 : string = v338.TrimEnd v343 
    v344
and method80 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) : unit =
    let v3 : (unit -> string) = closure31(v0, v1, v2)
    method14(v0, v3)
and closure32 (v0 : string) () : string =
    v0
and closure33 () () : unit =
    ()
and closure34 (v0 : US0, v1 : (unit -> string), v2 : (unit -> unit)) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    v2 ()
    let v330 : string = ""
    let v331 : Mut4 = {l0 = v330} : Mut4
    method12(v331)
    let v332 : string = v331.l0
    let v333 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v332}"
    let v334 : char list = []
    let v335 : (char list -> (char [])) = List.toArray
    let v336 : (char []) = v335 v334
    let v337 : string = v333.TrimStart v336 
    let v338 : char list = []
    let v339 : char list = '/' :: v338 
    let v340 : char list = ' ' :: v339 
    let v341 : (char list -> (char [])) = List.toArray
    let v342 : (char []) = v341 v340
    let v343 : string = v337.TrimEnd v342 
    v343
and method82 (v0 : US0, v1 : (unit -> string), v2 : (unit -> unit)) : unit =
    let v3 : (unit -> string) = closure34(v0, v1, v2)
    method14(v0, v3)
and method83 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>>) : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> =
    v0
and closure35 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    let v1 : bool = true
    let mutable _v1 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v9 : std_string_String = null |> unbox<std_string_String>
    v9 
    #endif
#else
    let v10 : std_string_String = null |> unbox<std_string_String>
    v10 
    #endif
    |> fun x -> _v1 <- Some x
    let v11 : std_string_String = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v11
and method84 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure35()
and method85 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and method86 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> =
    v0
and method87 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> =
    v0
and method88 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and method89 (v0 : std_thread_JoinHandle<Result<unit, string>>) : std_thread_JoinHandle<Result<unit, string>> =
    v0
and closure36 () (v0 : std_process_Output) : US28 =
    US28_0(v0)
and closure37 () (v0 : std_string_String) : US28 =
    US28_1(v0)
and closure38 () () : string =
    let v0 : string = $"runtime.execute_with_options / output error"
    v0
and closure39 (v0 : std_string_String) () : std_string_String =
    v0
and method90 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>) : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> =
    v0
and closure40 () () : string =
    let v0 : string = $"runtime.execute_with_options / result"
    v0
and closure41 (v0 : int32, v1 : string) () : struct (int32 * int32) =
    let v2 : int32 = v1.Length
    struct (v0, v2)
and method93 (v0 : Mut4, v1 : int32) : unit =
    let v2 : string = $"{v1}"
    let v3 : string = v0.l0
    let v4 : string = v3 + v2 
    v0.l0 <- v4
    ()
and method92 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method93(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "std_trace_length"
    method11(v0, v7)
    method11(v0, v5)
    method93(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure42 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : int32) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method92(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method91 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure42(v0, v1, v2)
    method14(v0, v3)
and closure43 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure44 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) () : struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option) =
    struct (v0, v1, v2, v3, v4, v5, v6)
and method96 (v0 : Mut4, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : unit =
    let v8 : string = "{ "
    method11(v0, v8)
    method12(v0)
    let v9 : string = "options"
    method11(v0, v9)
    let v10 : string = " = "
    method11(v0, v10)
    method64(v0, v1, v2, v3, v4, v5, v6, v7)
    let v11 : string = " }"
    method11(v0, v11)
and closure45 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : string, v331 : System.Threading.CancellationToken option, v332 : (struct (string * string) []), v333 : (struct (int32 * string * bool) -> Async<unit>) option, v334 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v335 : bool, v336 : string option) = v2 ()
    let v337 : string = ""
    let v338 : Mut4 = {l0 = v337} : Mut4
    method96(v338, v330, v331, v332, v333, v334, v335, v336)
    let v339 : string = v338.l0
    let v340 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v339}"
    let v341 : char list = []
    let v342 : (char list -> (char [])) = List.toArray
    let v343 : (char []) = v342 v341
    let v344 : string = v340.TrimStart v343 
    let v345 : char list = []
    let v346 : char list = '/' :: v345 
    let v347 : char list = ' ' :: v346 
    let v348 : (char list -> (char [])) = List.toArray
    let v349 : (char []) = v348 v347
    let v350 : string = v344.TrimEnd v349 
    v350
and method95 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) : unit =
    let v3 : (unit -> string) = closure45(v0, v1, v2)
    method14(v0, v3)
and closure47 (v0 : string) () : string =
    v0
and closure46 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : bool = true
    let mutable _v10 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : Async<unit> = null |> unbox<Async<unit>>
    v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Async<unit> = null |> unbox<Async<unit>>
    v15 
    #endif
#else
    let v16 : Async<unit> option = None
    let mutable _v16 = v16 
    async {
    let v17 : string = v9.Data
    let v18 : string = null |> unbox<string>
    let v19 : bool = v17 = v18
    let v20 : bool = v19 <> true
    if v20 then
        let v21 : US30 option = None
        let _v21 = ref v21 
        match v3 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v22 : (struct (int32 * string * bool) -> Async<unit>) = x
        let v23 : US30 = US30_0(v22)
        v23 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v21.Value <- x
        let v24 : US30 option = _v21.Value 
        let v25 : US30 = US30_1
        let v26 : US30 = v24 |> Option.defaultValue v25 
        match v26 with
        | US30_1 -> (* None *)
            ()
        | US30_0(v27) -> (* Some *)
            let v28 : int32 = v7.Id
            let v29 : Async<unit> = v27 struct (v28, v17, false)
            do! v29 
            ()
        let v30 : string = $"> {v17}"
        if v5 then
            let v31 : US0 = US0_0
            let v32 : (unit -> string) = closure47(v30)
            let v33 : (unit -> unit) = closure33()
            method82(v31, v32, v33)
        else
            let v34 : (string -> unit) = System.Console.WriteLine
            v34 v30
        let v35 : string = ""
        let v36 : string = $"{v35}{v17}{v35}"
        let v37 : (string -> unit) = v8.Push
        v37 v36
    }
    |> fun x -> _v16 <- Some x
    let v38 : Async<unit> = match _v16 with Some x -> x | None -> failwith "async.new_async_unit / _v16=None"
    v38 
    #endif
    |> fun x -> _v10 <- Some x
    let v39 : Async<unit> = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v40 : bool = true
    let mutable _v40 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v41 : (Async<unit> -> unit) = Async.StartImmediate
    v41 v39
    () 
    #endif
    |> fun x -> _v40 <- Some x
    match _v40 with Some x -> x | None -> failwith "base.run_target / _v40=None"
    ()
and closure48 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : bool = true
    let mutable _v10 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : Async<unit> = null |> unbox<Async<unit>>
    v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Async<unit> = null |> unbox<Async<unit>>
    v15 
    #endif
#else
    let v16 : Async<unit> option = None
    let mutable _v16 = v16 
    async {
    let v17 : string = v9.Data
    let v18 : string = null |> unbox<string>
    let v19 : bool = v17 = v18
    let v20 : bool = v19 <> true
    if v20 then
        let v21 : US30 option = None
        let _v21 = ref v21 
        match v3 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v22 : (struct (int32 * string * bool) -> Async<unit>) = x
        let v23 : US30 = US30_0(v22)
        v23 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v21.Value <- x
        let v24 : US30 option = _v21.Value 
        let v25 : US30 = US30_1
        let v26 : US30 = v24 |> Option.defaultValue v25 
        match v26 with
        | US30_1 -> (* None *)
            ()
        | US30_0(v27) -> (* Some *)
            let v28 : int32 = v7.Id
            let v29 : Async<unit> = v27 struct (v28, v17, true)
            do! v29 
            ()
        let v30 : string = $"! {v17}"
        if v5 then
            let v31 : US0 = US0_0
            let v32 : (unit -> string) = closure47(v30)
            let v33 : (unit -> unit) = closure33()
            method82(v31, v32, v33)
        else
            let v34 : (string -> unit) = System.Console.WriteLine
            v34 v30
        let v35 : string = "\u001b[7;4m"
        let v36 : string = "\u001b[0m"
        let v37 : string = $"{v35}{v17}{v36}"
        let v38 : (string -> unit) = v8.Push
        v38 v37
    }
    |> fun x -> _v16 <- Some x
    let v39 : Async<unit> = match _v16 with Some x -> x | None -> failwith "async.new_async_unit / _v16=None"
    v39 
    #endif
    |> fun x -> _v10 <- Some x
    let v40 : Async<unit> = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v41 : bool = true
    let mutable _v41 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v42 : (Async<unit> -> unit) = Async.StartImmediate
    v42 v40
    () 
    #endif
    |> fun x -> _v41 <- Some x
    match _v41 with Some x -> x | None -> failwith "base.run_target / _v41=None"
    ()
and closure49 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = true
    let mutable _v1 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = null |> unbox<bool>
    v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : bool = null |> unbox<bool>
    v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : bool = null |> unbox<bool>
    v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : bool = null |> unbox<bool>
    v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : bool = null |> unbox<bool>
    v6 
    #endif
#else
    let v7 : bool = v0.HasExited
    v7 
    #endif
    |> fun x -> _v1 <- Some x
    let v8 : bool = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    let v9 : bool = v8 = false
    if v9 then
        let v10 : bool = true
        let mutable _v10 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v11 : (unit -> unit) = v0.Kill
        v11 ()
        () 
        #endif
        |> fun x -> _v10 <- Some x
        match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
        ()
and closure50 () () : string =
    let v0 : string = $"runtime.execute_with_options_async / WaitForExitAsync"
    v0
and closure51 (v0 : System.Threading.Tasks.TaskCanceledException) () : System.Threading.Tasks.TaskCanceledException =
    v0
and method99 (v0 : Mut4, v1 : System.Threading.Tasks.TaskCanceledException) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method98 (v0 : Mut4, v1 : System.Threading.Tasks.TaskCanceledException) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "ex"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method99(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure52 (v0 : US0, v1 : (unit -> string), v2 : (unit -> System.Threading.Tasks.TaskCanceledException)) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let v330 : System.Threading.Tasks.TaskCanceledException = v2 ()
    let v331 : string = ""
    let v332 : Mut4 = {l0 = v331} : Mut4
    method98(v332, v330)
    let v333 : string = v332.l0
    let v334 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v333}"
    let v335 : char list = []
    let v336 : (char list -> (char [])) = List.toArray
    let v337 : (char []) = v336 v335
    let v338 : string = v334.TrimStart v337 
    let v339 : char list = []
    let v340 : char list = '/' :: v339 
    let v341 : char list = ' ' :: v340 
    let v342 : (char list -> (char [])) = List.toArray
    let v343 : (char []) = v342 v341
    let v344 : string = v338.TrimEnd v343 
    v344
and method97 (v0 : US0, v1 : (unit -> string), v2 : (unit -> System.Threading.Tasks.TaskCanceledException)) : unit =
    let v3 : (unit -> string) = closure52(v0, v1, v2)
    method14(v0, v3)
and closure53 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure54 (v0 : int32, v1 : string) () : struct (int32 * int32) =
    let v2 : int32 = v1.Length
    struct (v0, v2)
and method101 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method93(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "output_length"
    method11(v0, v7)
    method11(v0, v5)
    method93(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure55 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : int32) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method101(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method100 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure55(v0, v1, v2)
    method14(v0, v3)
and method94 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    let v7 : bool = true
    let mutable _v7 : Async<struct (int32 * string)> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v12 
    #endif
#else
    let v13 : bool = true
    let mutable _v13 : Async<struct (int32 * string)> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v18 
    #endif
#else
    let v19 : Async<struct (int32 * string)> option = None
    let mutable _v19 = v19 
    async {
    let v20 : US13 = method38(v0)
    let struct (v29 : string, v30 : US3) =
        match v20 with
        | US13_1(v23) -> (* Error *)
            let v24 : string = $"resultm.get / Result value was Error: {v23}"
            failwith<struct (string * US3)> v24
        | US13_0(v21, v22) -> (* Ok *)
            struct (v21, v22)
    let v31 : US3 option = None
    let _v31 = ref v31 
    match v6 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v32 : string = x
    let v33 : US3 = US3_0(v32)
    v33 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v31.Value <- x
    let v34 : US3 option = _v31.Value 
    let v35 : US3 = US3_1
    let v36 : US3 = v34 |> Option.defaultValue v35 
    let v40 : string =
        match v36 with
        | US3_1 -> (* None *)
            let v38 : string = ""
            v38
        | US3_0(v37) -> (* Some *)
            v37
    let v41 : US0 = US0_1
    let v42 : (unit -> string) = closure43()
    let v43 : (unit -> struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option)) = closure44(v0, v1, v2, v3, v4, v5, v6)
    method95(v41, v42, v43)
    let v44 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v48 : string =
        match v30 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v45) -> (* Some *)
            v45
    let start_info = System.Diagnostics.ProcessStartInfo (
      Arguments = v48,
      StandardOutputEncoding = v44,
      WorkingDirectory = v40,
      FileName = v29,
      CreateNoWindow = true,
      RedirectStandardError = true,
      RedirectStandardOutput = true,
      UseShellExecute = false
    )
    let v49 : System.Diagnostics.ProcessStartInfo = start_info
    let v50 : int32 = v2.Length
    let v51 : Mut5 = {l0 = 0} : Mut5
    while method39(v50, v51) do
        let v53 : int32 = v51.l0
        let struct (v54 : string, v55 : string) = v2.[int v53]
        v49.EnvironmentVariables.[v54] <- v55 
        let v56 : int32 = v53 + 1
        v51.l0 <- v56
        ()
    let v57 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v49)
    use v57 = v57 
    let v58 : System.Diagnostics.Process = v57 
    let v59 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
    let v60 : System.Collections.Concurrent.ConcurrentStack<string> = v59 ()
    let v61 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure46(v0, v1, v2, v3, v4, v5, v6, v58, v60)
    v58.OutputDataReceived.Add v61 
    let v62 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure48(v0, v1, v2, v3, v4, v5, v6, v58, v60)
    v58.ErrorDataReceived.Add v62 
    let v63 : (unit -> bool) = v58.Start
    let v64 : bool = v63 ()
    let v65 : bool = v64 = false
    if v65 then
        let v66 : string = $"runtime.execute_with_options_async / process_start error"
        failwith<unit> v66
    let v67 : (unit -> unit) = v58.BeginErrorReadLine
    v67 ()
    let v68 : (unit -> unit) = v58.BeginOutputReadLine
    v68 ()
    let v69 : US31 option = None
    let _v69 = ref v69 
    match v1 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v70 : System.Threading.CancellationToken = x
    let v71 : US31 = US31_0(v70)
    v71 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v69.Value <- x
    let v72 : US31 option = _v69.Value 
    let v73 : US31 = US31_1
    let v74 : US31 = v72 |> Option.defaultValue v73 
    let v78 : System.Threading.CancellationToken =
        match v74 with
        | US31_1 -> (* None *)
            let v76 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
            v76
        | US31_0(v75) -> (* Some *)
            v75
    let v79 : bool = true
    let mutable _v79 : Async<System.Threading.CancellationToken> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v80 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v80 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v81 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v83 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v83 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v84 
    #endif
#else
    let v85 : bool = true
    let mutable _v85 : Async<System.Threading.CancellationToken> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v86 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v86 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v87 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v90 
    #endif
#else
    let v91 : Async<System.Threading.CancellationToken> option = None
    let mutable _v91 = v91 
    async {
    let v92 : Async<System.Threading.CancellationToken> = Async.CancellationToken
    let! v92 = v92 
    let v93 : System.Threading.CancellationToken = v92 
    let v94 : System.Threading.CancellationToken = Async.DefaultCancellationToken
    let v95 : (System.Threading.CancellationToken []) = [|v93; v94; v78|]
    let v96 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
    let v97 : System.Threading.CancellationTokenSource = v96 v95
    let v98 : System.Threading.CancellationToken = v97.Token
    return v98 
    }
    |> fun x -> _v91 <- Some x
    let v99 : Async<System.Threading.CancellationToken> = match _v91 with Some x -> x | None -> failwith "async.new_async_unit / _v91=None"
    v99 
    #endif
    |> fun x -> _v85 <- Some x
    let v100 : Async<System.Threading.CancellationToken> = match _v85 with Some x -> x | None -> failwith "base.run_target / _v85=None"
    v100 
    #endif
    |> fun x -> _v79 <- Some x
    let v101 : Async<System.Threading.CancellationToken> = match _v79 with Some x -> x | None -> failwith "base.run_target / _v79=None"
    let! v101 = v101 
    let v102 : System.Threading.CancellationToken = v101 
    let v103 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v102.Register
    let v104 : (unit -> unit) = closure49(v58)
    let v105 : System.Threading.CancellationTokenRegistration = v103 v104
    use v105 = v105 
    let v106 : System.Threading.CancellationTokenRegistration = v105 
    let v107 : bool = true
    let mutable _v107 : Async<int32> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v108 : Async<int32> = null |> unbox<Async<int32>>
    v108 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v109 : Async<int32> = null |> unbox<Async<int32>>
    v109 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v110 : Async<int32> = null |> unbox<Async<int32>>
    v110 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : Async<int32> = null |> unbox<Async<int32>>
    v111 
    #endif
#if FABLE_COMPILER_PYTHON
    let v112 : Async<int32> = null |> unbox<Async<int32>>
    v112 
    #endif
#else
    let v113 : Async<int32> option = None
    let mutable _v113 = v113 
    async {
    try
    let v114 : System.Threading.Tasks.Task = v58.WaitForExitAsync v102 
    let v115 : bool = true
    let mutable _v115 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v116 : Async<unit> = null |> unbox<Async<unit>>
    v116 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v117 : Async<unit> = null |> unbox<Async<unit>>
    v117 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v118 : Async<unit> = null |> unbox<Async<unit>>
    v118 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v119 : Async<unit> = null |> unbox<Async<unit>>
    v119 
    #endif
#if FABLE_COMPILER_PYTHON
    let v120 : Async<unit> = null |> unbox<Async<unit>>
    v120 
    #endif
#else
    let v121 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
    let v122 : Async<unit> = v121 v114
    v122 
    #endif
    |> fun x -> _v115 <- Some x
    let v123 : Async<unit> = match _v115 with Some x -> x | None -> failwith "base.run_target / _v115=None"
    do! v123 
    let v124 : int32 = v58.ExitCode
    return v124 
    with ex ->
    let v125 : exn = ex
    let v126 : bool = true
    let mutable _v126 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v127 : string = $"%A{v125}"
    v127 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v128 : string = $"%A{v125}"
    v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = $"%A{v125}"
    v129 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v130 : string = $"%A{v125}"
    v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v131 : string = $"%A{v125}"
    v131 
    #endif
#else
    let v132 : string = $"{v125.GetType ()}: {v125.Message}"
    v132 
    #endif
    |> fun x -> _v126 <- Some x
    let v133 : string = match _v126 with Some x -> x | None -> failwith "base.run_target / _v126=None"
    let v134 : (string -> unit) = v60.Push
    v134 v133
    let v135 : System.Threading.Tasks.TaskCanceledException = v125 |> unbox<System.Threading.Tasks.TaskCanceledException>
    let v136 : US0 = US0_3
    let v137 : (unit -> string) = closure50()
    let v138 : (unit -> System.Threading.Tasks.TaskCanceledException) = closure51(v135)
    method97(v136, v137, v138)
    return -2147483648 
    (*
    *)
    }
    |> fun x -> _v113 <- Some x
    let v139 : Async<int32> = match _v113 with Some x -> x | None -> failwith "async.new_async_unit / _v113=None"
    v139 
    #endif
    |> fun x -> _v107 <- Some x
    let v140 : Async<int32> = match _v107 with Some x -> x | None -> failwith "base.run_target / _v107=None"
    let! v140 = v140 
    let v141 : int32 = v140 
    let v142 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.rev
    let v143 : string seq = v142 v60
    let v144 : (string -> (string seq -> string)) = String.concat
    let v145 : string = "\n"
    let v146 : (string seq -> string) = v144 v145
    let v147 : string = v146 v143
    let v148 : US0 = US0_1
    let v149 : (unit -> string) = closure53()
    let v150 : (unit -> struct (int32 * int32)) = closure54(v141, v147)
    method100(v148, v149, v150)
    return struct (v141, v147) 
    }
    |> fun x -> _v19 <- Some x
    let v151 : Async<struct (int32 * string)> = match _v19 with Some x -> x | None -> failwith "async.new_async_unit / _v19=None"
    v151 
    #endif
    |> fun x -> _v13 <- Some x
    let v152 : Async<struct (int32 * string)> = match _v13 with Some x -> x | None -> failwith "base.run_target / _v13=None"
    v152 
    #endif
    |> fun x -> _v7 <- Some x
    let v153 : Async<struct (int32 * string)> = match _v7 with Some x -> x | None -> failwith "base.run_target / _v7=None"
    v153
and method36 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    let v7 : bool = true
    let mutable _v7 : struct (int32 * string) option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = method37(v0, v1, v2, v3, v4, v5, v6)
    let v9 : US13 = method38(v8)
    let struct (v18 : string, v19 : US3) =
        match v9 with
        | US13_1(v12) -> (* Error *)
            let v13 : string = $"resultm.get / Result value was Error: {v12}"
            failwith<struct (string * US3)> v13
        | US13_0(v10, v11) -> (* Ok *)
            struct (v10, v11)
    let v23 : string =
        match v19 with
        | US3_1 -> (* None *)
            let v21 : string = ""
            v21
        | US3_0(v20) -> (* Some *)
            v20
    let v24 : US21 = method50(v23)
    let v30 : (string []) =
        match v24 with
        | US21_1(v26) -> (* Error *)
            let v27 : string = $"resultm.get / Result value was Error: {v26}"
            failwith<(string [])> v27
        | US21_0(v25) -> (* Ok *)
            v25
    let v31 : string = "$0.to_vec()"
    let v32 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "true; let _result : Vec<_> = v32.into_iter().map(|x| { //"
    let v34 : bool = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : string = "x"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "true; $0 }).collect::<Vec<_>>()"
    let v42 : bool = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "_result"
    let v44 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : US0 = US0_1
    let v46 : (unit -> string) = closure18()
    let v47 : (unit -> struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option)) = closure19(v0, v1, v2, v3, v4, v5, v6, v18, v44)
    method61(v45, v46, v47)
    let v48 : bool = true
    let mutable _v48 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v49 : string = "std::process::Command::new(&*$0)"
    let v50 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v18 v49 
    let v51 : string = "true; let mut v50 = v50"
    let v52 : bool = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : string = "std::process::Command::args(&mut $0, &*$1)"
    let v54 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v50, v44) v53 
    let v55 : string = "std::process::Stdio::piped()"
    let v56 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "std::process::Command::stdout($0, std::process::Stdio::piped())"
    let v58 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v54 v57 
    let v59 : string = "std::process::Stdio::piped()"
    let v60 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "std::process::Command::stderr($0, std::process::Stdio::piped())"
    let v62 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v58 v61 
    let v63 : string = "std::process::Stdio::piped()"
    let v64 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v63 
    let v65 : string = "std::process::Command::stdin($0, std::process::Stdio::piped())"
    let v66 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v62 v65 
    let v67 : US3 option = None
    let _v67 = ref v67 
    match v6 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v68 : string = x
    let v69 : US3 = US3_0(v68)
    v69 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v67.Value <- x
    let v70 : US3 option = _v67.Value 
    let v71 : US3 = US3_1
    let v72 : US3 = v70 |> Option.defaultValue v71 
    let v77 : Ref<Mut<std_process_Command>> =
        match v72 with
        | US3_1 -> (* None *)
            v66
        | US3_0(v73) -> (* Some *)
            let v74 : string = "std::process::Command::current_dir(v66, &*$0)"
            let v75 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v73 v74 
            v75
    let v78 : uint64 = System.Convert.ToUInt64 v2.Length
    let v79 : bool = v78 = 0UL
    let v95 : Ref<Mut<std_process_Command>> =
        if v79 then
            v77
        else
            let v80 : string = "$0.to_vec()"
            let v81 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v80 
            let v82 : string = "true; let _result = $0.into_iter().fold(v77, |acc, x| { //"
            let v83 : bool = Fable.Core.RustInterop.emitRustExpr v81 v82 
            let v84 : string = "acc"
            let v85 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v84 
            let v86 : string = "x"
            let struct (v87 : string, v88 : string) = Fable.Core.RustInterop.emitRustExpr () v86 
            let v89 : string = "std::process::Command::env(v85, &*$0, &*$1)"
            let v90 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v87, v88) v89 
            let v91 : string = "true; $0 })"
            let v92 : bool = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : string = "_result"
            let v94 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v93 
            v94
    let v96 : string = "std::process::Command::spawn($0)"
    let v97 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : (std_io_Error -> std_string_String) = method71()
    let v99 : string = "$0.map_err(|x| $1(x))"
    let v100 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v97, v98) v99 
    let v101 : string = "true; let _result = $0.map(|x| { //"
    let v102 : bool = Fable.Core.RustInterop.emitRustExpr v100 v101 
    let v103 : string = "x"
    let v104 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : std_process_Child option = Some v104 
    let v106 : string = "std::sync::Mutex::new($0)"
    let v107 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "std::sync::Arc::new($0)"
    let v109 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "true; $0 })"
    let v111 : bool = Fable.Core.RustInterop.emitRustExpr v109 v110 
    let v112 : string = "_result"
    let v113 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US23) = method72()
    let v115 : (std_string_String -> US23) = method73()
    let v116 : string = "match v113 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v117 : US23 = Fable.Core.RustInterop.emitRustExpr struct (v114, v115) v116 
    let struct (v513 : int32, v514 : US5, v515 : US24) =
        match v117 with
        | US23_1(v504) -> (* Error *)
            let v505 : US0 = US0_4
            let v506 : (unit -> string) = closure24()
            let v507 : (unit -> std_string_String) = closure25(v504)
            method74(v505, v506, v507)
            let v508 : US5 = US5_0(v504)
            let v509 : US24 = US24_1
            struct (-1, v508, v509)
        | US23_0(v118) -> (* Ok *)
            let v119 : string = "true; let _result = (|| { //"
            let v120 : bool = Fable.Core.RustInterop.emitRustExpr () v119 
            let v121 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method77(v118)
            let v122 : string = "v121.lock()"
            let v123 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v122 
            let v124 : string = "$0.unwrap()"
            let v125 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v123 v124 
            let v126 : string = "true; let mut v125 = v125"
            let v127 : bool = Fable.Core.RustInterop.emitRustExpr () v126 
            let v128 : string = "&mut $0"
            let v129 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v125 v128 
            let v130 : string = "$0.as_mut()"
            let v131 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v129 v130 
            let v132 : string = "$0.unwrap()"
            let v133 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v131 v132 
            let v134 : string = "&mut v133.stdout"
            let v135 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr () v134 
            let v136 : string = "Option::take($0)"
            let v137 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v135 v136 
            let v138 : string = "$0.unwrap()"
            let v139 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v137 v138 
            let v140 : string = "true; $0 })()"
            let v141 : bool = Fable.Core.RustInterop.emitRustExpr v139 v140 
            let v142 : string = "_result"
            let v143 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v142 
            let v144 : string = "true; let _result = (|| { //"
            let v145 : bool = Fable.Core.RustInterop.emitRustExpr () v144 
            let v146 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method77(v118)
            let v147 : string = "v146.lock()"
            let v148 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v147 
            let v149 : string = "$0.unwrap()"
            let v150 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v148 v149 
            let v151 : string = "true; let mut v150 = v150"
            let v152 : bool = Fable.Core.RustInterop.emitRustExpr () v151 
            let v153 : string = "&mut $0"
            let v154 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v150 v153 
            let v155 : string = "$0.as_mut()"
            let v156 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v154 v155 
            let v157 : string = "$0.unwrap()"
            let v158 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v156 v157 
            let v159 : string = "&mut v158.stderr"
            let v160 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr () v159 
            let v161 : string = "Option::take($0)"
            let v162 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v160 v161 
            let v163 : string = "$0.unwrap()"
            let v164 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v162 v163 
            let v165 : string = "true; $0 })()"
            let v166 : bool = Fable.Core.RustInterop.emitRustExpr v164 v165 
            let v167 : string = "_result"
            let v168 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v167 
            let v169 : string = "true; let _result = (|| { //"
            let v170 : bool = Fable.Core.RustInterop.emitRustExpr () v169 
            let v171 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method77(v118)
            let v172 : string = "v171.lock()"
            let v173 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v172 
            let v174 : string = "$0.unwrap()"
            let v175 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v173 v174 
            let v176 : string = "true; let mut v175 = v175"
            let v177 : bool = Fable.Core.RustInterop.emitRustExpr () v176 
            let v178 : string = "&mut $0"
            let v179 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v175 v178 
            let v180 : string = "$0.as_mut()"
            let v181 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v179 v180 
            let v182 : string = "$0.unwrap()"
            let v183 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v181 v182 
            let v184 : string = "&mut $0.stdin"
            let v185 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v183 v184 
            let v186 : string = "Option::take($0)"
            let v187 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v185 v186 
            let v188 : string = "$0.unwrap()"
            let v189 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v187 v188 
            let v190 : std_process_ChildStdin option = Some v189 
            let v191 : string = "std::sync::Mutex::new($0)"
            let v192 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v190 v191 
            let v193 : string = "std::sync::Arc::new($0)"
            let v194 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v192 v193 
            let v195 : string = "true; $0 })()"
            let v196 : bool = Fable.Core.RustInterop.emitRustExpr v194 v195 
            let v197 : string = "_result"
            let v198 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v197 
            let v199 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v200 : std_sync_mpsc_Sender<std_string_String>, v201 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v199 
            let v202 : string = "std::sync::Mutex::new($0)"
            let v203 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v200 v202 
            let v204 : string = "std::sync::Arc::new($0)"
            let v205 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v203 v204 
            let v206 : string = "std::sync::Mutex::new($0)"
            let v207 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v200 v206 
            let v208 : string = "std::sync::Arc::new($0)"
            let v209 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v207 v208 
            let v210 : string = "std::sync::Mutex::new($0)"
            let v211 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v201 v210 
            let v212 : string = "std::sync::Arc::new($0)"
            let v213 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v211 v212 
            let v214 : string = "true; let __result = std::thread::spawn(move || { //"
            let v215 : bool = Fable.Core.RustInterop.emitRustExpr () v214 
            let v216 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v217 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v143 v216 
            let v218 : string = "std::io::BufReader::new(v217)"
            let v219 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v218 
            let v220 : string = "std::io::BufRead::lines(v219)"
            let v221 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v220 
            let v222 : string = "true; let mut v221 = v221; let _result = v221.try_for_each(|x| { //"
            let v223 : bool = Fable.Core.RustInterop.emitRustExpr () v222 
            let v224 : string = "x"
            let v225 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v224 
            let v226 : string = "$0.clone()"
            let v227 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v205 v226 
            let v228 : (std_io_Error -> std_string_String) = method71()
            let v229 : string = "$0.map_err(|x| $1(x))"
            let v230 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v225, v228) v229 
            let v231 : (std_string_String -> US25) = method78()
            let v232 : (std_string_String -> US25) = method79()
            let v233 : string = "match v230 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v234 : US25 = Fable.Core.RustInterop.emitRustExpr struct (v231, v232) v233 
            let v267 : std_string_String =
                match v234 with
                | US25_1(v257) -> (* Error *)
                    let v258 : US0 = US0_4
                    let v259 : (unit -> string) = closure29()
                    let v260 : (unit -> std_string_String) = closure30(v257)
                    method80(v258, v259, v260)
                    let v261 : string = $"\u001b[4;7m{v257}\u001b[0m"
                    let v262 : string = "&*$0"
                    let v263 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v261 v262 
                    let v264 : string = "String::from($0)"
                    let v265 : std_string_String = Fable.Core.RustInterop.emitRustExpr v263 v264 
                    v265
                | US25_0(v235) -> (* Ok *)
                    let v236 : string = "fable_library_rust::String_::fromString($0)"
                    let v237 : string = Fable.Core.RustInterop.emitRustExpr v235 v236 
                    let v238 : string = "encoding_rs::UTF_8"
                    let v239 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v238 
                    let v240 : string = "$0.encode(&*$1).0"
                    let v241 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v239, v237) v240 
                    let v242 : string = "$0.as_ref()"
                    let v243 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v241 v242 
                    let v244 : string = "std::str::from_utf8($0)"
                    let v245 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v243 v244 
                    let v246 : string = "$0.unwrap()"
                    let v247 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v245 v246 
                    let v248 : string = "String::from($0)"
                    let v249 : std_string_String = Fable.Core.RustInterop.emitRustExpr v247 v248 
                    let v250 : string = "fable_library_rust::String_::fromString($0)"
                    let v251 : string = Fable.Core.RustInterop.emitRustExpr v249 v250 
                    let v252 : string = $"> {v251}"
                    if v5 then
                        let v253 : US0 = US0_0
                        let v254 : (unit -> string) = closure32(v252)
                        let v255 : (unit -> unit) = closure33()
                        method82(v253, v254, v255)
                    else
                        let v256 : (string -> unit) = System.Console.WriteLine
                        v256 v252
                    v249
            let v268 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method83(v227)
            let v269 : string = "v268.lock()"
            let v270 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "$0.unwrap()"
            let v272 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v270 v271 
            let v273 : string = "&$0"
            let v274 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v272 v273 
            let v275 : string = "$0.send($1)"
            let v276 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v274, v267) v275 
            let v277 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method84()
            let v278 : string = "$0.map_err(|x| $1(x))"
            let v279 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v276, v277) v278 
            let v280 : string = "$0"
            let v281 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v279 v280 
            let v282 : string = "true; $0 }); //"
            let v283 : bool = Fable.Core.RustInterop.emitRustExpr v281 v282 
            let v284 : string = "_result.map_err(|x| x.into())"
            let v285 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v284 
            let v286 : Result<unit, string> = method85(v285)
            let v287 : string = ""
            let v288 : string = "}"
            let v289 : string = v287 + v288 
            let v290 : string = "v286 " + v289 + "); " + v287 + " //"
            Fable.Core.RustInterop.emitRustExpr () v290 
            let v291 : string = "__result"
            let v292 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v291 
            let v293 : string = "true; let __result = std::thread::spawn(move || { //"
            let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
            let v295 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v296 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v168 v295 
            let v297 : string = "std::io::BufReader::new(v296)"
            let v298 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v297 
            let v299 : string = "std::io::BufRead::lines(v298)"
            let v300 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v299 
            let v301 : string = "true; let mut v300 = v300; let _result = v300.try_for_each(|x| { //"
            let v302 : bool = Fable.Core.RustInterop.emitRustExpr () v301 
            let v303 : string = "x"
            let v304 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v303 
            let v305 : string = "$0.clone()"
            let v306 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v209 v305 
            let v307 : (std_io_Error -> std_string_String) = method71()
            let v308 : string = "$0.map_err(|x| $1(x))"
            let v309 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v304, v307) v308 
            let v310 : (std_string_String -> US25) = method78()
            let v311 : (std_string_String -> US25) = method79()
            let v312 : string = "match v309 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v313 : US25 = Fable.Core.RustInterop.emitRustExpr struct (v310, v311) v312 
            let v351 : std_string_String =
                match v313 with
                | US25_1(v341) -> (* Error *)
                    let v342 : US0 = US0_4
                    let v343 : (unit -> string) = closure29()
                    let v344 : (unit -> std_string_String) = closure30(v341)
                    method80(v342, v343, v344)
                    let v345 : string = $"\u001b[4;7m{v341}\u001b[0m"
                    let v346 : string = "&*$0"
                    let v347 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v345 v346 
                    let v348 : string = "String::from($0)"
                    let v349 : std_string_String = Fable.Core.RustInterop.emitRustExpr v347 v348 
                    v349
                | US25_0(v314) -> (* Ok *)
                    let v315 : string = "fable_library_rust::String_::fromString($0)"
                    let v316 : string = Fable.Core.RustInterop.emitRustExpr v314 v315 
                    let v317 : string = "encoding_rs::UTF_8"
                    let v318 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v317 
                    let v319 : string = "$0.encode(&*$1).0"
                    let v320 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v318, v316) v319 
                    let v321 : string = "$0.as_ref()"
                    let v322 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v320 v321 
                    let v323 : string = "std::str::from_utf8($0)"
                    let v324 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v322 v323 
                    let v325 : string = "$0.unwrap()"
                    let v326 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v324 v325 
                    let v327 : string = "String::from($0)"
                    let v328 : std_string_String = Fable.Core.RustInterop.emitRustExpr v326 v327 
                    let v329 : string = "fable_library_rust::String_::fromString($0)"
                    let v330 : string = Fable.Core.RustInterop.emitRustExpr v328 v329 
                    let v331 : string = $"! {v330}"
                    if v5 then
                        let v332 : US0 = US0_0
                        let v333 : (unit -> string) = closure32(v331)
                        let v334 : (unit -> unit) = closure33()
                        method82(v332, v333, v334)
                    else
                        let v335 : (string -> unit) = System.Console.WriteLine
                        v335 v331
                    let v336 : string = $"\u001b[4;7m{v328}\u001b[0m"
                    let v337 : string = "&*$0"
                    let v338 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v336 v337 
                    let v339 : string = "String::from($0)"
                    let v340 : std_string_String = Fable.Core.RustInterop.emitRustExpr v338 v339 
                    v340
            let v352 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method83(v306)
            let v353 : string = "v352.lock()"
            let v354 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v353 
            let v355 : string = "$0.unwrap()"
            let v356 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v354 v355 
            let v357 : string = "&$0"
            let v358 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v356 v357 
            let v359 : string = "$0.send($1)"
            let v360 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v358, v351) v359 
            let v361 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method84()
            let v362 : string = "$0.map_err(|x| $1(x))"
            let v363 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v360, v361) v362 
            let v364 : string = "$0"
            let v365 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v363 v364 
            let v366 : string = "true; $0 }); //"
            let v367 : bool = Fable.Core.RustInterop.emitRustExpr v365 v366 
            let v368 : string = "_result.map_err(|x| x.into())"
            let v369 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v368 
            let v370 : Result<unit, string> = method85(v369)
            let v371 : string = v287 + v288 
            let v372 : string = "v370 " + v371 + "); " + v287 + " //"
            Fable.Core.RustInterop.emitRustExpr () v372 
            let v373 : string = "__result"
            let v374 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v373 
            let v375 : US26 option = None
            let _v375 = ref v375 
            match v4 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v376 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) = x
            let v377 : US26 = US26_0(v376)
            v377 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v375.Value <- x
            let v378 : US26 option = _v375.Value 
            let v379 : US26 = US26_1
            let v380 : US26 = v378 |> Option.defaultValue v379 
            match v380 with
            | US26_1 -> (* None *)
                ()
            | US26_0(v381) -> (* Some *)
                let v382 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = method86(v198)
                let v383 : string = "v382.lock()"
                let v384 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v383 
                let v385 : string = "$0.unwrap()"
                let v386 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v384 v385 
                let v387 : string = "true; let mut v386 = v386"
                let v388 : bool = Fable.Core.RustInterop.emitRustExpr () v387 
                let v389 : string = "&mut $0"
                let v390 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v386 v389 
                let v391 : string = "Option::take($0)"
                let v392 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v390 v391 
                let v393 : string = "true; let _result = v392.map(|x| { //"
                let v394 : bool = Fable.Core.RustInterop.emitRustExpr () v393 
                let v395 : string = "x"
                let v396 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v395 
                let v397 : string = "std::sync::Mutex::new($0)"
                let v398 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v396 v397 
                let v399 : string = "std::sync::Arc::new($0)"
                let v400 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v398 v399 
                let v401 : string = "true; $0 })"
                let v402 : bool = Fable.Core.RustInterop.emitRustExpr v400 v401 
                let v403 : string = "_result"
                let v404 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v403 
                let v405 : US27 option = None
                let _v405 = ref v405 
                match v404 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v406 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = x
                let v407 : US27 = US27_0(v406)
                v407 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v405.Value <- x
                let v408 : US27 option = _v405.Value 
                let v409 : US27 = US27_1
                let v410 : US27 = v408 |> Option.defaultValue v409 
                match v410 with
                | US27_1 -> (* None *)
                    ()
                | US27_0(v411) -> (* Some *)
                    v381 v411
                    let v412 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = method87(v411)
                    let v413 : string = "v412.lock()"
                    let v414 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v413 
                    let v415 : string = "$0.unwrap()"
                    let v416 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v414 v415 
                    let v417 : std_sync_MutexGuard<std_process_ChildStdin> = method88(v416)
                    let v418 : string = "true; let mut v417 = v417"
                    let v419 : bool = Fable.Core.RustInterop.emitRustExpr () v418 
                    let v420 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v421 : bool = Fable.Core.RustInterop.emitRustExpr v417 v420 
                    ()
            let v422 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method77(v118)
            let v423 : string = "v422.lock()"
            let v424 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v423 
            let v425 : string = "$0.unwrap()"
            let v426 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v424 v425 
            let v427 : string = "true; let mut v426 = v426"
            let v428 : bool = Fable.Core.RustInterop.emitRustExpr () v427 
            let v429 : string = "&mut $0"
            let v430 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v426 v429 
            let v431 : string = "Option::take($0)"
            let v432 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v430 v431 
            let v433 : string = "$0.unwrap()"
            let v434 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v432 v433 
            let v435 : string = "$0.wait_with_output()"
            let v436 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v434 v435 
            let v437 : (std_io_Error -> std_string_String) = method71()
            let v438 : string = "$0.map_err(|x| $1(x))"
            let v439 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v436, v437) v438 
            let v440 : std_thread_JoinHandle<Result<unit, string>> = method89(v374)
            let v441 : string = "v440"
            let v442 : string = v441 + v287 
            let v443 : string = v442 + v287 
            let v444 : std_thread_JoinHandle<Result<unit, string>> = method89(v292)
            let v445 : string = "v444"
            let v446 : string = ", "
            let v447 : string = v445 + v446 
            let v448 : string = v447 + v443 
            let v449 : string = "vec![" + v448 + "]"
            let v450 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v449 
            let v451 : string = "true; v450.into_iter().for_each(|x| { //"
            let v452 : bool = Fable.Core.RustInterop.emitRustExpr () v451 
            let v453 : string = "x"
            let v454 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v453 
            let v455 : string = "std::thread::JoinHandle::join($0)"
            let v456 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v454 v455 
            let v457 : string = "$0.unwrap()"
            let v458 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v456 v457 
            let v459 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v458 v459 
            let v460 : string = "true; () }}); { //"
            let v461 : bool = Fable.Core.RustInterop.emitRustExpr () v460 
            let v462 : (std_process_Output -> US28) = closure36()
            let v463 : (std_string_String -> US28) = closure37()
            let v464 : US28 = match v439 with Ok x -> v462 x | Error x -> v463 x
            match v464 with
            | US28_1(v492) -> (* Error *)
                let v493 : US0 = US0_4
                let v494 : (unit -> string) = closure38()
                let v495 : (unit -> std_string_String) = closure39(v492)
                method74(v493, v494, v495)
                let v496 : US5 = US5_0(v492)
                let v497 : US24 = US24_1
                struct (-2, v496, v497)
            | US28_0(v465) -> (* Ok *)
                let v466 : string = "$0.status"
                let v467 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v465 v466 
                let v468 : string = "$0.code()"
                let v469 : int32 option = Fable.Core.RustInterop.emitRustExpr v467 v468 
                let v470 : US29 option = None
                let _v470 = ref v470 
                match v469 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v471 : int32 = x
                let v472 : US29 = US29_0(v471)
                v472 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v470.Value <- x
                let v473 : US29 option = _v470.Value 
                let v474 : US29 = US29_1
                let v475 : US29 = v473 |> Option.defaultValue v474 
                match v475 with
                | US29_1 -> (* None *)
                    let v479 : string = "&*$0"
                    let v480 : string = "runtime.execute_with_options / exit_code=None"
                    let v481 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v480 v479 
                    let v482 : string = "String::from($0)"
                    let v483 : std_string_String = Fable.Core.RustInterop.emitRustExpr v481 v482 
                    let v484 : US5 = US5_0(v483)
                    let v485 : US24 = US24_0(v213)
                    struct (-1, v484, v485)
                | US29_0(v476) -> (* Some *)
                    let v477 : US5 = US5_1
                    let v478 : US24 = US24_0(v213)
                    struct (v476, v477, v478)
    let v520 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v515 with
        | US24_1 -> (* None *)
            let v518 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v518
        | US24_0(v516) -> (* Some *)
            let v517 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v516 
            v517
    let v521 : string = "true; let _result = v520.map(|x| { //"
    let v522 : bool = Fable.Core.RustInterop.emitRustExpr () v521 
    let v523 : string = "x"
    let v524 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v523 
    let v525 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = method90(v524)
    let v526 : string = "v525.lock()"
    let v527 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v526 
    let v528 : string = "$0.unwrap()"
    let v529 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v527 v528 
    let v530 : string = "v529.iter()"
    let v531 : _ = Fable.Core.RustInterop.emitRustExpr () v530 
    let v532 : string = "v531.collect::<Vec<_>>()"
    let v533 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v532 
    let v534 : string = "true; let _result : Vec<_> = v533.into_iter().map(|x| { //"
    let v535 : bool = Fable.Core.RustInterop.emitRustExpr () v534 
    let v536 : string = "x"
    let v537 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v536 
    let v538 : string = "fable_library_rust::String_::fromString($0)"
    let v539 : string = Fable.Core.RustInterop.emitRustExpr v537 v538 
    let v540 : string = "true; $0 }).collect::<Vec<_>>()"
    let v541 : bool = Fable.Core.RustInterop.emitRustExpr v539 v540 
    let v542 : string = "_result"
    let v543 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v542 
    let v544 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v545 : (string []) = Fable.Core.RustInterop.emitRustExpr v543 v544 
    let v546 : ((string []) -> string seq) = Seq.ofArray
    let v547 : string seq = v546 v545
    let v548 : (string -> (string seq -> string)) = String.concat
    let v549 : string = "\n"
    let v550 : (string seq -> string) = v548 v549
    let v551 : string = v550 v547
    let v552 : string = "true; $0 })"
    let v553 : bool = Fable.Core.RustInterop.emitRustExpr v551 v552 
    let v554 : string = "_result"
    let v555 : string option = Fable.Core.RustInterop.emitRustExpr () v554 
    let v562 : US3 =
        match v514 with
        | US5_1 -> (* None *)
            US3_1
        | US5_0(v556) -> (* Some *)
            let v557 : string = "fable_library_rust::String_::fromString($0)"
            let v558 : string = Fable.Core.RustInterop.emitRustExpr v556 v557 
            US3_0(v558)
    let v566 : string =
        match v562 with
        | US3_1 -> (* None *)
            let v564 : string = ""
            v564
        | US3_0(v563) -> (* Some *)
            v563
    let v567 : string = v555 |> Option.defaultValue v566 
    let v568 : US0 = US0_0
    let v569 : (unit -> string) = closure40()
    let v570 : (unit -> struct (int32 * int32)) = closure41(v513, v567)
    method91(v568, v569, v570)
    let v571 : (int32 * string) = v513, v567 
    v571 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _v48 <- Some x
    let v572 : (int32 * string) = match _v48 with Some x -> x | None -> failwith "base.capture / _v48=None"
    let (a, b) = v572 
    let v573 : int32 = a
    let v574 : string = b
    struct (v573, v574) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v575 : int32, v576 : string) = null |> unbox<struct (int32 * string)>
    struct (v575, v576) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v577 : int32, v578 : string) = null |> unbox<struct (int32 * string)>
    struct (v577, v578) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v579 : int32, v580 : string) = null |> unbox<struct (int32 * string)>
    struct (v579, v580) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v581 : int32, v582 : string) = null |> unbox<struct (int32 * string)>
    struct (v581, v582) 
    #endif
#else
    let v583 : Async<struct (int32 * string)> = method94(v0, v1, v2, v3, v4, v5, v6)
    let v584 : bool = true
    let mutable _v584 : struct (int32 * string) option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v585 : int32, v586 : string) = null |> unbox<struct (int32 * string)>
    struct (v585, v586) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v587 : int32, v588 : string) = null |> unbox<struct (int32 * string)>
    struct (v587, v588) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v589 : int32, v590 : string) = null |> unbox<struct (int32 * string)>
    struct (v589, v590) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v591 : int32, v592 : string) = null |> unbox<struct (int32 * string)>
    struct (v591, v592) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v593 : int32, v594 : string) = null |> unbox<struct (int32 * string)>
    struct (v593, v594) 
    #endif
#else
    let v595 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v596 : int32, v597 : string) = v595 v583
    struct (v596, v597) 
    #endif
    |> fun x -> _v584 <- Some x
    let struct (v598 : int32, v599 : string) = match _v584 with Some x -> x | None -> failwith "base.run_target / _v584=None"
    struct (v598, v599) 
    #endif
    |> fun x -> _v7 <- Some x
    let struct (v600 : int32, v601 : string) = match _v7 with Some x -> x | None -> failwith "base.run_target / _v7=None"
    struct (v600, v601)
and closure56 () () : string =
    let v0 : string = "spiral_builder.process_cuda / env install error"
    v0
and closure57 (v0 : US8, v1 : string, v2 : string, v3 : int32) () : struct (US8 * int32 * string * string) =
    struct (v0, v3, v2, v1)
and method104 (v0 : Mut4, v1 : US8) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method103 (v0 : Mut4, v1 : US8, v2 : int32, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "env"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method104(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "exit_code"
    method11(v0, v9)
    method11(v0, v7)
    method93(v0, v2)
    method11(v0, v8)
    let v10 : string = "run_result"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "new_code_path"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure58 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (US8 * int32 * string * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : US8, v331 : int32, v332 : string, v333 : string) = v2 ()
    let v334 : string = ""
    let v335 : Mut4 = {l0 = v334} : Mut4
    method103(v335, v330, v331, v332, v333)
    let v336 : string = v335.l0
    let v337 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v336}"
    let v338 : char list = []
    let v339 : (char list -> (char [])) = List.toArray
    let v340 : (char []) = v339 v338
    let v341 : string = v337.TrimStart v340 
    let v342 : char list = []
    let v343 : char list = '/' :: v342 
    let v344 : char list = ' ' :: v343 
    let v345 : (char list -> (char [])) = List.toArray
    let v346 : (char []) = v345 v344
    let v347 : string = v341.TrimEnd v346 
    v347
and method102 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (US8 * int32 * string * string))) : unit =
    let v3 : (unit -> string) = closure58(v0, v1, v2)
    method14(v0, v3)
and closure59 () (v0 : string) : US3 =
    US3_0(v0)
and closure60 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : ((string []) -> string seq) = Seq.ofArray
    let v4 : string seq = v3 v2
    let v5 : (string -> (string seq -> string)) = String.concat
    let v6 : (string seq -> string) = v5 v1
    v6 v4
and closure62 () () : string =
    let v0 : string = "spiral_builder.process_cuda / Exception"
    v0
and closure63 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v1, v0, v2)
and method107 (v0 : Mut4, v1 : exn) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method106 (v0 : Mut4, v1 : exn, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "ex"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method107(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "run_result"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "new_code_path"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "external_command"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure64 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : exn, v331 : string, v332 : string, v333 : string) = v2 ()
    let v334 : string = ""
    let v335 : Mut4 = {l0 = v334} : Mut4
    method106(v335, v330, v331, v332, v333)
    let v336 : string = v335.l0
    let v337 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v336}"
    let v338 : char list = []
    let v339 : (char list -> (char [])) = List.toArray
    let v340 : (char []) = v339 v338
    let v341 : string = v337.TrimStart v340 
    let v342 : char list = []
    let v343 : char list = '/' :: v342 
    let v344 : char list = ' ' :: v343 
    let v345 : (char list -> (char [])) = List.toArray
    let v346 : (char []) = v345 v344
    let v347 : string = v341.TrimEnd v346 
    v347
and method105 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) : unit =
    let v3 : (unit -> string) = closure64(v0, v1, v2)
    method14(v0, v3)
and closure61 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure62()
    let v6 : (unit -> struct (exn * string * string * string)) = closure63(v0, v1, v2, v3)
    method105(v4, v5, v6)
    US3_1
and closure65 () () : string =
    let v0 : string = "spiral_builder.process_cuda / error"
    v0
and closure66 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and method109 (v0 : Mut4, v1 : int32, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "exit_code"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method93(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "run_result"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "new_code_path"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "external_command"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure67 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : string, v332 : string, v333 : string) = v2 ()
    let v334 : string = ""
    let v335 : Mut4 = {l0 = v334} : Mut4
    method109(v335, v330, v331, v332, v333)
    let v336 : string = v335.l0
    let v337 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v336}"
    let v338 : char list = []
    let v339 : (char list -> (char [])) = List.toArray
    let v340 : (char []) = v339 v338
    let v341 : string = v337.TrimStart v340 
    let v342 : char list = []
    let v343 : char list = '/' :: v342 
    let v344 : char list = ' ' :: v343 
    let v345 : (char list -> (char [])) = List.toArray
    let v346 : (char []) = v345 v344
    let v347 : string = v341.TrimEnd v346 
    v347
and method108 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) : unit =
    let v3 : (unit -> string) = closure67(v0, v1, v2)
    method14(v0, v3)
and closure68 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and method110 () : string =
    let v0 : string = "fs-path"
    v0
and method111 () : string =
    let v0 : string = "command"
    v0
and method112 () : string =
    let v0 : string = "path"
    v0
and method116 (v0 : string) : string =
    v0
and method118 () : string =
    let v0 : string = ""
    v0
and method119 (v0 : string) : string =
    v0
and method120 () : string =
    let v0 : string = "^\\\\\\\\\\?\\\\"
    v0
and method117 (v0 : string) : string =
    let v2 : bool = v0 = ""
    if v2 then
        let v3 : string = ""
        v3
    else
        let v4 : string = method118()
        let v5 : bool = true
        let mutable _v5 : string option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = method119(v0)
        let v7 : string = $"regex::Regex::new(&$0)"
        let v8 : string = "^\\\\\\\\\\?\\\\"
        let v9 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v8 v7 
        let v10 : string = "$0.unwrap()"
        let v11 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v9 v10 
        let v12 : string = $"$0.replace_all(&$1, &*$2)"
        let v13 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v11, v6, v4) v12 
        let v14 : string = "String::from($0)"
        let v15 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v14 
        let v16 : string = "fable_library_rust::String_::fromString($0)"
        let v17 : string = Fable.Core.RustInterop.emitRustExpr v15 v16 
        v17 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v18 : string = null |> unbox<string>
        v18 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v19 : string = null |> unbox<string>
        v19 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v20 : string = null |> unbox<string>
        v20 
        #endif
#if FABLE_COMPILER_PYTHON
        let v21 : string = null |> unbox<string>
        v21 
        #endif
#else
        let v22 : string = method120()
        let v23 : string = System.Text.RegularExpressions.Regex.Replace (v0, v22, v4)
        v23 
        #endif
        |> fun x -> _v5 <- Some x
        let v24 : string = match _v5 with Some x -> x | None -> failwith "base.run_target / _v5=None"
        let v25 : string = $"{v24.[0] |> string |> _.ToLower()}{v24.[1..]}"
        let v26 : string = "\\"
        let v27 : string = "/"
        let v28 : string = v25.Replace (v26, v27)
        v28
and method121 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method122 () : char =
    let v0 : bool = true
    let mutable _v0 : char option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::path::MAIN_SEPARATOR"
    let v2 : char = Fable.Core.RustInterop.emitRustExpr () v1 
    v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : char = System.IO.Path.DirectorySeparatorChar
    v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : char = System.IO.Path.DirectorySeparatorChar
    v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : char = System.IO.Path.DirectorySeparatorChar
    v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : char = System.IO.Path.DirectorySeparatorChar
    v6 
    #endif
#else
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    v7 
    #endif
    |> fun x -> _v0 <- Some x
    let v8 : char = match _v0 with Some x -> x | None -> failwith "base.run_target / _v0=None"
    v8
and method123 (v0 : string) : string =
    v0
and method115 (v0 : string) : string =
    let v1 : bool = true
    let mutable _v1 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method116(v0)
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "String::from($0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "std::path::PathBuf::from($0)"
    let v8 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "$0.exists()"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : bool = v10 = false
    let v101 : string =
        if v11 then
            let v12 : string = method30()
            let v13 : string = method20(v12, v2)
            let v14 : string = method117(v13)
            let v15 : string = "/"
            let v16 : (string []) = v14.Split v15 
            let v17 : (string []) = [||]
            let v18 : int32 = v16.Length
            let v19 : Mut6 = {l0 = 0; l1 = 0; l2 = v17} : Mut6
            while method121(v18, v19) do
                let v21 : int32 = v19.l0
                let v22 : int32 =  -v21
                let v23 : int32 = v22 + v18
                let v24 : int32 = v23 - 1
                let struct (v25 : int32, v26 : (string [])) = v19.l1, v19.l2
                let v27 : string = v16.[int v24]
                let v28 : bool = ".." = v27
                let struct (v70 : int32, v71 : (string [])) =
                    if v28 then
                        let v29 : int32 = v25 + 1
                        struct (v29, v26)
                    else
                        let v30 : bool = "." = v27
                        if v30 then
                            struct (v25, v26)
                        else
                            let v31 : bool = 0 = v25
                            if v31 then
                                let v32 : string = ":"
                                let v33 : bool = v27.EndsWith v32 
                                if v33 then
                                    let v34 : string = $"{v12.[0]}:"
                                    let v35 : (string []) = [|v34|]
                                    let v36 : int32 = v35.Length
                                    let v37 : int32 = v26.Length
                                    let v38 : int32 = v36 + v37
                                    let v39 : (string []) = Array.zeroCreate<string> (v38)
                                    let v40 : Mut5 = {l0 = 0} : Mut5
                                    while method39(v38, v40) do
                                        let v42 : int32 = v40.l0
                                        let v43 : bool = v42 < v36
                                        let v47 : string =
                                            if v43 then
                                                let v44 : string = v35.[int v42]
                                                v44
                                            else
                                                let v45 : int32 = v42 - v36
                                                let v46 : string = v26.[int v45]
                                                v46
                                        v39.[int v42] <- v47
                                        let v48 : int32 = v42 + 1
                                        v40.l0 <- v48
                                        ()
                                    struct (0, v39)
                                else
                                    let v49 : (string []) = [|v27|]
                                    let v50 : int32 = v49.Length
                                    let v51 : int32 = v26.Length
                                    let v52 : int32 = v50 + v51
                                    let v53 : (string []) = Array.zeroCreate<string> (v52)
                                    let v54 : Mut5 = {l0 = 0} : Mut5
                                    while method39(v52, v54) do
                                        let v56 : int32 = v54.l0
                                        let v57 : bool = v56 < v50
                                        let v61 : string =
                                            if v57 then
                                                let v58 : string = v49.[int v56]
                                                v58
                                            else
                                                let v59 : int32 = v56 - v50
                                                let v60 : string = v26.[int v59]
                                                v60
                                        v53.[int v56] <- v61
                                        let v62 : int32 = v56 + 1
                                        v54.l0 <- v62
                                        ()
                                    struct (0, v53)
                            else
                                let v65 : int32 = v25 - 1
                                struct (v65, v26)
                let v72 : int32 = v21 + 1
                v19.l0 <- v72
                v19.l1 <- v70
                v19.l2 <- v71
                ()
            let struct (v73 : int32, v74 : (string [])) = v19.l1, v19.l2
            let v75 : string seq = seq { for i = 0 to v74.Length - 1 do yield v74.[i] }
            let v76 : char = method122()
            let v77 : (char -> string) = _.ToString()
            let v78 : string = v77 v76
            let v79 : (string -> (string seq -> string)) = String.concat
            let v80 : (string seq -> string) = v79 v78
            v80 v75
        else
            let v82 : string = "std::fs::canonicalize(&*$0)"
            let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v82 
            let v84 : string = "$0.unwrap()"
            let v85 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v83 v84 
            let v86 : string = "$0.display()"
            let v87 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v85 v86 
            let v88 : bool = true
            let mutable _v88 : std_string_String option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v89 : string = "format!(\"{}\", $0)"
            let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v87 v89 
            v90 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v91 : string = "format!(\"{}\", $0)"
            let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v87 v91 
            v92 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v93 : string = "format!(\"{}\", $0)"
            let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v87 v93 
            v94 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v95 : std_string_String = null |> unbox<std_string_String>
            v95 
            #endif
#if FABLE_COMPILER_PYTHON
            let v96 : std_string_String = null |> unbox<std_string_String>
            v96 
            #endif
#else
            let v97 : std_string_String = null |> unbox<std_string_String>
            v97 
            #endif
            |> fun x -> _v88 <- Some x
            let v98 : std_string_String = match _v88 with Some x -> x | None -> failwith "base.run_target / _v88=None"
            let v99 : string = "fable_library_rust::String_::fromString($0)"
            let v100 : string = Fable.Core.RustInterop.emitRustExpr v98 v99 
            v100
    v101 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v102 : string = null |> unbox<string>
    v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = null |> unbox<string>
    v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = null |> unbox<string>
    v104 
    #endif
#if FABLE_COMPILER_PYTHON
    let v105 : string = null |> unbox<string>
    v105 
    #endif
#else
    let v106 : string = method123(v0)
    let v107 : (string -> string) = System.IO.Path.GetFullPath
    let v108 : string = v107 v106
    v108 
    #endif
    |> fun x -> _v1 <- Some x
    let v109 : string = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v109
and method114 (v0 : string) : string =
    let v1 : string = method115(v0)
    method117(v1)
and method113 (v0 : string) : string =
    let v1 : string = method30()
    let v2 : string = method20(v1, v0)
    method114(v2)
and closure69 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method113(v2)
and method124 () : string =
    let v0 : string = "retries"
    v0
and method125 () : string =
    let v0 : string = "working-directory"
    v0
and closure70 () () : string =
    let v0 : string = "spiral_builder.run / repl error"
    v0
and closure71 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : struct (int32 * string * string) =
    let v4 : string = $"{v1}/{v0}"
    struct (v3, v2, v4)
and method128 (v0 : Mut4, v1 : int32, v2 : string, v3 : string) : unit =
    let v4 : string = "{ "
    method11(v0, v4)
    method12(v0)
    let v5 : string = "exit_code"
    method11(v0, v5)
    let v6 : string = " = "
    method11(v0, v6)
    method93(v0, v1)
    let v7 : string = "; "
    method11(v0, v7)
    let v8 : string = "repl_result"
    method11(v0, v8)
    method11(v0, v6)
    method11(v0, v2)
    method11(v0, v7)
    let v9 : string = "retry"
    method11(v0, v9)
    method11(v0, v6)
    method11(v0, v3)
    let v10 : string = " }"
    method11(v0, v10)
and closure72 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : string, v332 : string) = v2 ()
    let v333 : string = ""
    let v334 : Mut4 = {l0 = v333} : Mut4
    method128(v334, v330, v331, v332)
    let v335 : string = v334.l0
    let v336 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v335}"
    let v337 : char list = []
    let v338 : (char list -> (char [])) = List.toArray
    let v339 : (char []) = v338 v337
    let v340 : string = v336.TrimStart v339 
    let v341 : char list = []
    let v342 : char list = '/' :: v341 
    let v343 : char list = ' ' :: v342 
    let v344 : (char list -> (char [])) = List.toArray
    let v345 : (char []) = v344 v343
    let v346 : string = v340.TrimEnd v345 
    v346
and method127 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string))) : unit =
    let v3 : (unit -> string) = closure72(v0, v1, v2)
    method14(v0, v3)
and method126 (v0 : string option, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v15 : bool = false
    let struct (v16 : int32, v17 : string) = method36(v9, v4, v14, v6, v7, v15, v0)
    let v18 : bool = v16 = 0
    let v20 : bool =
        if v18 then
            true
        else
            let v19 : bool = v3 >= v1
            v19
    if v20 then
        struct (v16, v17)
    else
        let v21 : US0 = US0_1
        let v22 : (unit -> string) = closure70()
        let v23 : (unit -> struct (int32 * string * string)) = closure71(v1, v3, v17, v16)
        method127(v21, v22, v23)
        let v24 : uint8 = v3 + 1uy
        method126(v0, v1, v2, v24)
and closure73 () () : string =
    let v0 : string = "spiral_builder.run / dib / jupyter nbconvert"
    v0
and closure74 (v0 : string, v1 : int32) () : struct (int32 * int32) =
    let v2 : int32 = v0.Length
    struct (v1, v2)
and method130 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method93(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "jupyter_result_length"
    method11(v0, v7)
    method11(v0, v5)
    method93(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure75 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : int32) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method130(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method129 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure75(v0, v1, v2)
    method14(v0, v3)
and closure76 () () : string =
    let v0 : string = "spiral_builder.run / dib / html cell ids"
    v0
and closure77 (v0 : string, v1 : int32) () : struct (int32 * int32) =
    let v2 : int32 = v0.Length
    struct (v1, v2)
and method132 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method93(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "pwsh_replace_html_result_length"
    method11(v0, v7)
    method11(v0, v5)
    method93(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure78 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : int32) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method132(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method131 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure78(v0, v1, v2)
    method14(v0, v3)
and closure79 () () : string =
    let v0 : string = "spiral_builder.run / dib"
    v0
and closure80 (v0 : string, v1 : int32) () : struct (int32 * int32) =
    let v2 : int32 = v0.Length
    struct (v1, v2)
and method134 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method93(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "result_length"
    method11(v0, v7)
    method11(v0, v5)
    method93(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure81 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : int32) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method134(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method133 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure81(v0, v1, v2)
    method14(v0, v3)
and method136 () : string =
    let v0 : string = ""
    v0
and method135 (v0 : string) : string =
    let v1 : bool = true
    let mutable _v1 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v3 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v4 : (string -> (uint8 [])) = v3 v2
    let v5 : (uint8 []) = v4 v0
    let v6 : string = "$0.to_vec()"
    let v7 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::io::Cursor::new(v7)"
    let v9 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "std::io::BufReader::new(v9)"
    let v11 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "true; let mut v11 = v11"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v14 
    let v15 : string = "result"
    let v16 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "true; let mut v16 = v16"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : unativeint = 0 |> unativeint 
    let v20 : string = "[$0; 1024]"
    let v21 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v20 
    let v22 : string = "true; loop { // rust.loop"
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : string = "true; let mut v21 = v21"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = "std::io::Read::read(&mut v11, &mut v21)"
    let v27 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "$0.unwrap()"
    let v29 : unativeint = Fable.Core.RustInterop.emitRustExpr v27 v28 
    let v30 : bool = v29 = v19 
    if v30 then
        let v31 : string = "true; break"
        let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
        ()
    let v33 : string = "v21.len()"
    let v34 : unativeint = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : uint8 = v34 |> uint8 
    let v36 : unativeint = v29 |> unativeint 
    let v37 : unativeint = v36 |> unbox<unativeint>
    let v38 : bool = v37 = v34 
    let v43 : Ref<Slice'<uint8>> =
        if v38 then
            let v39 : string = "&v21[v19..]"
            let v40 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v39 
            v40
        else
            let v41 : string = "&v21[$0..$1]"
            let v42 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v19, v36) v41 
            v42
    let v44 : string = "sha2::Digest::update(&mut v16, v43)"
    Fable.Core.RustInterop.emitRustExpr () v44 
    let v45 : string = "true; } // rust.loop"
    let v46 : bool = Fable.Core.RustInterop.emitRustExpr () v45 
    let v47 : string = "true; } // rust.loop"
    let v48 : bool = Fable.Core.RustInterop.emitRustExpr () v47 
    let v49 : string = "true; } // rust.loop"
    let v50 : bool = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = "true; { // rust.loop"
    let v52 : bool = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : string = "true; { // rust.loop"
    let v54 : bool = Fable.Core.RustInterop.emitRustExpr () v53 
    let v55 : string = "&sha2::Digest::finalize(v16)"
    let v56 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : string = "true; let _result : Vec<_> = v58.into_iter().map(|x| { //"
    let v60 : bool = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "x"
    let v62 : uint8 = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "format!(\"{:02x}\", $0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "fable_library_rust::String_::fromString($0)"
    let v66 : string = Fable.Core.RustInterop.emitRustExpr v64 v65 
    let v67 : string = "true; $0 }).collect::<Vec<_>>()"
    let v68 : bool = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let v69 : string = "_result"
    let v70 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v72 : (string []) = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v73 : string seq = seq { for i = 0 to v72.Length - 1 do yield v72.[i] }
    let v74 : (string -> (string seq -> string)) = String.concat
    let v75 : string = ""
    let v76 : (string seq -> string) = v74 v75
    let v77 : string = v76 v73
    let v78 : Result<string, std_io_Error> = Ok v77 
    let v79 : string = "$0.unwrap()"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    v80 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v81 : string = null |> unbox<string>
    v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = null |> unbox<string>
    v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v83 : string = "crypto"
    let v84 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v83 
    let v85 : string = "v84.createHash($0)"
    let v86 : string = "sha256"
    let v87 : obj = Fable.Core.JsInterop.emitJsExpr v86 v85 
    let v88 : string = "$0.update($1, 'utf8')"
    let v89 : obj = Fable.Core.JsInterop.emitJsExpr struct (v87, v0) v88 
    let v90 : string = "$0.digest($1)"
    let v91 : string = "hex"
    let v92 : string = Fable.Core.JsInterop.emitJsExpr struct (v89, v91) v90 
    v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : string = "hashlib"
    let v94 : IHashlibSha256 = Fable.Core.PyInterop.importAll v93 
    let v95 : string = "v94.sha256()"
    let v96 : obj = Fable.Core.PyInterop.emitPyExpr () v95 
    let v97 : string = "$0.encode($1)"
    let v98 : string = "utf-8"
    let v99 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v98) v97 
    let v100 : string = "v96.update($0)"
    Fable.Core.PyInterop.emitPyExpr v99 v100 
    let v101 : string = "v96.hexdigest()"
    let v102 : string = Fable.Core.PyInterop.emitPyExpr () v101 
    v102 
    #endif
#else
    let v103 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v104 : System.Security.Cryptography.SHA256 = v103 ()
    use v104 = v104 
    let v105 : System.Security.Cryptography.SHA256 = v104 
    let v106 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v107 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v108 : (string -> (uint8 [])) = v107 v106
    let v109 : (uint8 []) = v108 v0
    let v110 : ((uint8 []) -> (uint8 [])) = v105.ComputeHash
    let v111 : (uint8 []) = v110 v109
    let v112 : int32 = v111.Length
    let v113 : (string []) = Array.zeroCreate<string> (v112)
    let v114 : Mut5 = {l0 = 0} : Mut5
    while method39(v112, v114) do
        let v116 : int32 = v114.l0
        let v117 : uint8 = v111.[int v116]
        let v118 : (string -> string) = v117.ToString
        let v119 : string = "x2"
        let v120 : string = v118 v119
        v113.[int v116] <- v120
        let v121 : int32 = v116 + 1
        v114.l0 <- v121
        ()
    let v122 : string seq = seq { for i = 0 to v113.Length - 1 do yield v113.[i] }
    let v123 : string = method136()
    let v124 : (string -> (string seq -> string)) = String.concat
    let v125 : (string seq -> string) = v124 v123
    let v126 : string = v125 v122
    v126 
    #endif
    |> fun x -> _v1 <- Some x
    let v127 : string = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v127
and method138 (v0 : string) : string =
    v0
and closure82 () () : US32 =
    US32_0
and closure83 () (v0 : std_string_String) : US32 =
    US32_1(v0)
and closure84 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure85 (v0 : string, v1 : std_string_String) () : struct (string * std_string_String) =
    struct (v0, v1)
and method140 (v0 : Mut4, v1 : string, v2 : std_string_String) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "dir"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method11(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "error"
    method11(v0, v7)
    method11(v0, v5)
    method76(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure86 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * std_string_String))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : string, v331 : std_string_String) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method140(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method139 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * std_string_String))) : unit =
    let v3 : (unit -> string) = closure86(v0, v1, v2)
    method14(v0, v3)
and closure87 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure88 (v0 : string) () : string =
    v0
and method142 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "dir"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method11(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure89 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let v330 : string = v2 ()
    let v331 : string = ""
    let v332 : Mut4 = {l0 = v331} : Mut4
    method142(v332, v330)
    let v333 : string = v332.l0
    let v334 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v333}"
    let v335 : char list = []
    let v336 : (char list -> (char [])) = List.toArray
    let v337 : (char []) = v336 v335
    let v338 : string = v334.TrimStart v337 
    let v339 : char list = []
    let v340 : char list = '/' :: v339 
    let v341 : char list = ' ' :: v340 
    let v342 : (char list -> (char [])) = List.toArray
    let v343 : (char []) = v342 v341
    let v344 : string = v338.TrimEnd v343 
    v344
and method141 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) : unit =
    let v3 : (unit -> string) = closure89(v0, v1, v2)
    method14(v0, v3)
and method145 (v0 : string) : string =
    v0
and method144 (v0 : bool, v1 : string) : unit =
    let v2 : bool = true
    let mutable _v2 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method145(v1)
    let v4 : bool = method24(v3)
    if v4 then
        if v0 then
            let v5 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v5 
            ()
        else
            let v6 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v6 
            ()
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    () 
    #endif
    |> fun x -> _v2 <- Some x
    match _v2 with Some x -> x | None -> failwith "base.run_target / _v2=None"
    ()
and closure90 (v0 : string) () : unit =
    let v1 : bool = true
    method144(v1, v0)
and method143 (v0 : string) : (unit -> unit) =
    closure90(v0)
and method146 (v0 : string) : (unit -> unit) =
    closure90(v0)
and closure91 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure92 (v0 : string, v1 : string) () : struct (string * string) =
    struct (v0, v1)
and method148 (v0 : Mut4, v1 : string, v2 : string) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "dir"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method11(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "result"
    method11(v0, v7)
    method11(v0, v5)
    method11(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure93 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : string, v331 : string) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method148(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method147 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) : unit =
    let v3 : (unit -> string) = closure93(v0, v1, v2)
    method14(v0, v3)
and closure95 () () : string =
    let v0 : string = "file_system.delete_directory_async"
    v0
and method151 (v0 : string) : string =
    let v1 : bool = true
    let mutable _v1 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.file_name()"
    let v9 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.to_os_string()"
    let v13 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.to_str()"
    let v15 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "$0.unwrap()"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "String::from($0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "fable_library_rust::String_::fromString($0)"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr v19 v20 
    v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : US10 = US10_1
    let v23 : US11 = US11_2(v22)
    let v24 : string = $"file_system.get_file_name / target: {v23} / path: {v0}"
    let v25 : string = failwith<string> v24
    v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : string = null |> unbox<string>
    v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : US10 = US10_0
    let v28 : US11 = US11_3(v27)
    let v29 : string = $"file_system.get_file_name / target: {v28} / path: {v0}"
    let v30 : string = failwith<string> v29
    v30 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : US10 = US10_0
    let v32 : US11 = US11_4(v31)
    let v33 : string = $"file_system.get_file_name / target: {v32} / path: {v0}"
    let v34 : string = failwith<string> v33
    v34 
    #endif
#else
    let v35 : (string -> string) = System.IO.Path.GetFileName
    let v36 : string = v35 v0
    v36 
    #endif
    |> fun x -> _v1 <- Some x
    let v37 : string = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v37
and closure96 (v0 : string, v1 : string) () : struct (string * string) =
    let v2 : string = method151(v0)
    struct (v1, v2)
and method153 (v0 : Mut4, v1 : string, v2 : string) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "ex"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method11(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "path"
    method11(v0, v7)
    method11(v0, v5)
    method11(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure97 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : string, v331 : string) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method153(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method152 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) : unit =
    let v3 : (unit -> string) = closure97(v0, v1, v2)
    method14(v0, v3)
and method150 (v0 : string, v1 : int64) : Async<int64> =
    let v2 : bool = true
    let mutable _v2 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : Async<int64> = null |> unbox<Async<int64>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : Async<int64> = null |> unbox<Async<int64>>
    v7 
    #endif
#else
    let v8 : Async<int64> option = None
    let mutable _v8 = v8 
    async {
    try
    let v9 : bool = true
    method144(v9, v0)
    return v1 
    with ex ->
    let v10 : exn = ex
    let v11 : int64 = v1 % 100L
    let v12 : bool = v11 = 0L
    if v12 then
        let v13 : bool = true
        let mutable _v13 : string option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v14 : string = $"%A{v10}"
        v14 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v15 : string = $"%A{v10}"
        v15 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v16 : string = $"%A{v10}"
        v16 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v17 : string = $"%A{v10}"
        v17 
        #endif
#if FABLE_COMPILER_PYTHON
        let v18 : string = $"%A{v10}"
        v18 
        #endif
#else
        let v19 : string = $"{v10.GetType ()}: {v10.Message}"
        v19 
        #endif
        |> fun x -> _v13 <- Some x
        let v20 : string = match _v13 with Some x -> x | None -> failwith "base.run_target / _v13=None"
        let v21 : US0 = US0_1
        let v22 : (unit -> string) = closure95()
        let v23 : (unit -> struct (string * string)) = closure96(v0, v20)
        method152(v21, v22, v23)
    let v24 : bool = true
    let mutable _v24 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v26 : Async<unit> = null |> unbox<Async<unit>>
    v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : Async<unit> = null |> unbox<Async<unit>>
    v27 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Async<unit> = null |> unbox<Async<unit>>
    v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v29 : Async<unit> = null |> unbox<Async<unit>>
    v29 
    #endif
#else
    let v30 : (int32 -> Async<unit>) = Async.Sleep
    let v31 : Async<unit> = v30 10
    v31 
    #endif
    |> fun x -> _v24 <- Some x
    let v32 : Async<unit> = match _v24 with Some x -> x | None -> failwith "base.run_target / _v24=None"
    do! v32 
    let v33 : int64 = v1 + 1L
    let v34 : Async<int64> = method150(v0, v33)
    return! v34 
    (*
    let v35 : int64 = *)
    }
    |> fun x -> _v8 <- Some x
    let v36 : Async<int64> = match _v8 with Some x -> x | None -> failwith "async.new_async_unit / _v8=None"
    v36 
    #endif
    |> fun x -> _v2 <- Some x
    let v37 : Async<int64> = match _v2 with Some x -> x | None -> failwith "base.run_target / _v2=None"
    v37
and closure94 (v0 : string) () : unit =
    let v1 : bool = true
    let mutable _v1 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<int64> = null |> unbox<Async<int64>>
    v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : Async<int64> = null |> unbox<Async<int64>>
    v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#else
    let v7 : int64 = 0L
    let v8 : Async<int64> = method150(v0, v7)
    v8 
    #endif
    |> fun x -> _v1 <- Some x
    let v9 : Async<int64> = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    let v10 : bool = true
    let mutable _v10 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : Async<unit> = null |> unbox<Async<unit>>
    v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Async<unit> = null |> unbox<Async<unit>>
    v15 
    #endif
#else
    let v16 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v17 : Async<unit> = v16 v9
    v17 
    #endif
    |> fun x -> _v10 <- Some x
    let v18 : Async<unit> = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v19 : bool = true
    let mutable _v19 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v20 : (Async<unit> -> unit) = Async.RunSynchronously
    v20 v18
    () 
    #endif
    |> fun x -> _v19 <- Some x
    match _v19 with Some x -> x | None -> failwith "base.run_target / _v19=None"
    ()
and method149 (v0 : string) : (unit -> unit) =
    closure94(v0)
and method154 (v0 : string) : (unit -> unit) =
    closure94(v0)
and method137 (v0 : string) : System.IDisposable =
    let v1 : bool = true
    let mutable _v1 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method138(v0)
    let v3 : string = "std::fs::create_dir_all(&*$0)"
    let v4 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (std_io_Error -> std_string_String) = method71()
    let v6 : string = "$0.map_err(|x| $1(x))"
    let v7 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v6 
    let v8 : (unit -> US32) = closure82()
    let v9 : (std_string_String -> US32) = closure83()
    let v10 : US32 = match v7 with Ok () -> v8 () | Error x -> v9 x
    match v10 with
    | US32_1(v14) -> (* Error *)
        let v15 : US0 = US0_4
        let v16 : (unit -> string) = closure84()
        let v17 : (unit -> struct (string * std_string_String)) = closure85(v2, v14)
        method139(v15, v16, v17)
    | US32_0 -> (* Ok *)
        let v11 : US0 = US0_0
        let v12 : (unit -> string) = closure87()
        let v13 : (unit -> string) = closure88(v2)
        method141(v11, v12, v13)
    let v18 : bool = true
    let mutable _v18 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v19 : (unit -> unit) = method143(v2)
    let v20 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v19 "$0()" )
    v20 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : (unit -> unit) = method143(v2)
    let v22 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v21 "$0()" )
    v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : (unit -> unit) = method143(v2)
    let v24 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v23 "$0()" )
    v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v25 : (unit -> unit) = method146(v2)
    let v26 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v25 () }
    v26 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : (unit -> unit) = method146(v2)
    let v28 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v27 () }
    v28 
    #endif
#else
    let v29 : (unit -> unit) = method146(v2)
    let v30 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v29 () }
    v30 
    #endif
    |> fun x -> _v18 <- Some x
    let v31 : System.IDisposable = match _v18 with Some x -> x | None -> failwith "base.run_target / _v18=None"
    v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : System.IDisposable = null |> unbox<System.IDisposable>
    v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : System.IDisposable = null |> unbox<System.IDisposable>
    v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : bool = true
    let mutable _v34 : System.IO.DirectoryInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v35 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v36 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v36 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v37 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v37 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v39 
    #endif
#else
    let v40 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v41 : System.IO.DirectoryInfo = v40 v0
    v41 
    #endif
    |> fun x -> _v34 <- Some x
    let v42 : System.IO.DirectoryInfo = match _v34 with Some x -> x | None -> failwith "base.run_target / _v34=None"
    let v43 : bool = true
    let mutable _v43 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : bool = null |> unbox<bool>
    v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : bool = null |> unbox<bool>
    v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : bool = null |> unbox<bool>
    v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : bool = null |> unbox<bool>
    v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : bool = null |> unbox<bool>
    v48 
    #endif
#else
    let v49 : bool = v42.Exists
    v49 
    #endif
    |> fun x -> _v43 <- Some x
    let v50 : bool = match _v43 with Some x -> x | None -> failwith "base.run_target / _v43=None"
    let v51 : bool = v50 = false
    if v51 then
        let v52 : bool = true
        let mutable _v52 : System.DateTime option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : System.DateTime = null |> unbox<System.DateTime>
        v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : System.DateTime = null |> unbox<System.DateTime>
        v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v55 : System.DateTime = null |> unbox<System.DateTime>
        v55 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v56 : System.DateTime = null |> unbox<System.DateTime>
        v56 
        #endif
#if FABLE_COMPILER_PYTHON
        let v57 : System.DateTime = null |> unbox<System.DateTime>
        v57 
        #endif
#else
        let v58 : System.DateTime = v42.CreationTime
        v58 
        #endif
        |> fun x -> _v52 <- Some x
        let v59 : System.DateTime = match _v52 with Some x -> x | None -> failwith "base.run_target / _v52=None"
        let v60 : obj = {| Exists = v50; CreationTime = v59 |}
        let v61 : string = $"%A{v60}"
        let v62 : US0 = US0_1
        let v63 : (unit -> string) = closure91()
        let v64 : (unit -> struct (string * string)) = closure92(v0, v61)
        method147(v62, v63, v64)
    let v65 : bool = true
    let mutable _v65 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : (unit -> unit) = method149(v0)
    let v67 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v66 "$0()" )
    v67 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v68 : (unit -> unit) = method149(v0)
    let v69 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v68 "$0()" )
    v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : (unit -> unit) = method149(v0)
    let v71 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v70 "$0()" )
    v71 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v72 : (unit -> unit) = method154(v0)
    let v73 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v72 () }
    v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v74 : (unit -> unit) = method154(v0)
    let v75 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v74 () }
    v75 
    #endif
#else
    let v76 : (unit -> unit) = method154(v0)
    let v77 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v76 () }
    v77 
    #endif
    |> fun x -> _v65 <- Some x
    let v78 : System.IDisposable = match _v65 with Some x -> x | None -> failwith "base.run_target / _v65=None"
    v78 
    #endif
#if FABLE_COMPILER_PYTHON
    let v79 : bool = true
    let mutable _v79 : System.IO.DirectoryInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v80 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v80 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v81 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v83 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v83 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v84 
    #endif
#else
    let v85 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v86 : System.IO.DirectoryInfo = v85 v0
    v86 
    #endif
    |> fun x -> _v79 <- Some x
    let v87 : System.IO.DirectoryInfo = match _v79 with Some x -> x | None -> failwith "base.run_target / _v79=None"
    let v88 : bool = true
    let mutable _v88 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : bool = null |> unbox<bool>
    v89 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v90 : bool = null |> unbox<bool>
    v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : bool = null |> unbox<bool>
    v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v92 : bool = null |> unbox<bool>
    v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : bool = null |> unbox<bool>
    v93 
    #endif
#else
    let v94 : bool = v87.Exists
    v94 
    #endif
    |> fun x -> _v88 <- Some x
    let v95 : bool = match _v88 with Some x -> x | None -> failwith "base.run_target / _v88=None"
    let v96 : bool = v95 = false
    if v96 then
        let v97 : bool = true
        let mutable _v97 : System.DateTime option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v98 : System.DateTime = null |> unbox<System.DateTime>
        v98 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v99 : System.DateTime = null |> unbox<System.DateTime>
        v99 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v100 : System.DateTime = null |> unbox<System.DateTime>
        v100 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v101 : System.DateTime = null |> unbox<System.DateTime>
        v101 
        #endif
#if FABLE_COMPILER_PYTHON
        let v102 : System.DateTime = null |> unbox<System.DateTime>
        v102 
        #endif
#else
        let v103 : System.DateTime = v87.CreationTime
        v103 
        #endif
        |> fun x -> _v97 <- Some x
        let v104 : System.DateTime = match _v97 with Some x -> x | None -> failwith "base.run_target / _v97=None"
        let v105 : obj = {| Exists = v95; CreationTime = v104 |}
        let v106 : string = $"%A{v105}"
        let v107 : US0 = US0_1
        let v108 : (unit -> string) = closure91()
        let v109 : (unit -> struct (string * string)) = closure92(v0, v106)
        method147(v107, v108, v109)
    let v110 : bool = true
    let mutable _v110 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v111 : (unit -> unit) = method149(v0)
    let v112 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v111 "$0()" )
    v112 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v113 : (unit -> unit) = method149(v0)
    let v114 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v113 "$0()" )
    v114 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : (unit -> unit) = method149(v0)
    let v116 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v115 "$0()" )
    v116 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v117 : (unit -> unit) = method154(v0)
    let v118 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v117 () }
    v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v119 : (unit -> unit) = method154(v0)
    let v120 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v119 () }
    v120 
    #endif
#else
    let v121 : (unit -> unit) = method154(v0)
    let v122 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v121 () }
    v122 
    #endif
    |> fun x -> _v110 <- Some x
    let v123 : System.IDisposable = match _v110 with Some x -> x | None -> failwith "base.run_target / _v110=None"
    v123 
    #endif
#else
    let v124 : bool = true
    let mutable _v124 : System.IO.DirectoryInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v125 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v125 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v126 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v126 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v127 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v128 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v128 
    #endif
#if FABLE_COMPILER_PYTHON
    let v129 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v129 
    #endif
#else
    let v130 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v131 : System.IO.DirectoryInfo = v130 v0
    v131 
    #endif
    |> fun x -> _v124 <- Some x
    let v132 : System.IO.DirectoryInfo = match _v124 with Some x -> x | None -> failwith "base.run_target / _v124=None"
    let v133 : bool = true
    let mutable _v133 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v134 : bool = null |> unbox<bool>
    v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : bool = null |> unbox<bool>
    v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : bool = null |> unbox<bool>
    v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : bool = null |> unbox<bool>
    v137 
    #endif
#if FABLE_COMPILER_PYTHON
    let v138 : bool = null |> unbox<bool>
    v138 
    #endif
#else
    let v139 : bool = v132.Exists
    v139 
    #endif
    |> fun x -> _v133 <- Some x
    let v140 : bool = match _v133 with Some x -> x | None -> failwith "base.run_target / _v133=None"
    let v141 : bool = v140 = false
    if v141 then
        let v142 : bool = true
        let mutable _v142 : System.DateTime option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v143 : System.DateTime = null |> unbox<System.DateTime>
        v143 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v144 : System.DateTime = null |> unbox<System.DateTime>
        v144 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v145 : System.DateTime = null |> unbox<System.DateTime>
        v145 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v146 : System.DateTime = null |> unbox<System.DateTime>
        v146 
        #endif
#if FABLE_COMPILER_PYTHON
        let v147 : System.DateTime = null |> unbox<System.DateTime>
        v147 
        #endif
#else
        let v148 : System.DateTime = v132.CreationTime
        v148 
        #endif
        |> fun x -> _v142 <- Some x
        let v149 : System.DateTime = match _v142 with Some x -> x | None -> failwith "base.run_target / _v142=None"
        let v150 : obj = {| Exists = v140; CreationTime = v149 |}
        let v151 : string = $"%A{v150}"
        let v152 : US0 = US0_1
        let v153 : (unit -> string) = closure91()
        let v154 : (unit -> struct (string * string)) = closure92(v0, v151)
        method147(v152, v153, v154)
    let v155 : bool = true
    let mutable _v155 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v156 : (unit -> unit) = method149(v0)
    let v157 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v156 "$0()" )
    v157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v158 : (unit -> unit) = method149(v0)
    let v159 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v158 "$0()" )
    v159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v160 : (unit -> unit) = method149(v0)
    let v161 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v160 "$0()" )
    v161 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v162 : (unit -> unit) = method154(v0)
    let v163 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v162 () }
    v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v164 : (unit -> unit) = method154(v0)
    let v165 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v164 () }
    v165 
    #endif
#else
    let v166 : (unit -> unit) = method154(v0)
    let v167 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v166 () }
    v167 
    #endif
    |> fun x -> _v155 <- Some x
    let v168 : System.IDisposable = match _v155 with Some x -> x | None -> failwith "base.run_target / _v155=None"
    v168 
    #endif
    |> fun x -> _v1 <- Some x
    let v169 : System.IDisposable = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v169
and method156 (v0 : chrono_DateTime<chrono_Utc>) : chrono_DateTime<chrono_Utc> =
    v0
and method157 (v0 : chrono_DateTime<chrono_Local>) : chrono_DateTime<chrono_Local> =
    v0
and method158 () : string =
    let v0 : string = "hh:mm"
    v0
and method159 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method160 () : string =
    let v0 : string = "hhmm"
    v0
and method155 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    let v2 : bool = true
    let mutable _v2 : System.Guid option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v4 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v5 : System.DateTime = v4 v3
    let v6 : System.DateTimeKind = System.DateTimeKind.Local
    let v7 : System.DateTime = System.DateTime.SpecifyKind (v1, v6)
    let v8 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v9 : System.DateTime = v8 v7
    let v10 : (System.DateTime -> int64) = _.Ticks
    let v11 : int64 = v10 v9
    let v12 : (System.DateTime -> int64) = _.Ticks
    let v13 : int64 = v12 v5
    let v14 : int64 = v11 - v13
    let v15 : int64 = v14 / 10L
    let v16 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v17 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : US33 option = None
    let _v18 = ref v18 
    match v17 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v19 : chrono_DateTime<chrono_Utc> = x
    let v20 : US33 = US33_0(v19)
    v20 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v18.Value <- x
    let v21 : US33 option = _v18.Value 
    let v22 : US33 = US33_1
    let v23 : US33 = v21 |> Option.defaultValue v22 
    let v42 : US3 =
        match v23 with
        | US33_1 -> (* None *)
            US3_1
        | US33_0(v24) -> (* Some *)
            let v25 : chrono_DateTime<chrono_Utc> = method156(v24)
            let v26 : string = "v25.naive_utc()"
            let v27 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr () v26 
            let v28 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v27)"
            let v29 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr () v28 
            let v30 : string = "%Y%m%d-%H%M-%S%f"
            let v31 : string = "r#\"" + v30 + "\"#"
            let v32 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v31 
            let v33 : chrono_DateTime<chrono_Local> = method157(v29)
            let v34 : string = "v33.format(v32).to_string()"
            let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v34 
            let v36 : string = "fable_library_rust::String_::fromString($0)"
            let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let v38 : string = $"{v37.[0..17]}-{v37.[18..21]}-{v37.[22]}"
            US3_0(v38)
    let v46 : string =
        match v42 with
        | US3_1 -> (* None *)
            let v44 : string = ""
            v44
        | US3_0(v43) -> (* Some *)
            v43
    let v47 : bool = true
    let mutable _v47 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "0i64.into()"
    let v49 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v48 
    v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v51 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v53 
    #endif
#else
    let v54 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v54 
    #endif
    |> fun x -> _v47 <- Some x
    let v55 : System.TimeZoneInfo = match _v47 with Some x -> x | None -> failwith "base.run_target / _v47=None"
    let v56 : bool = true
    let mutable _v56 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v58 : System.TimeSpan = v57 ()
    v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v60 : System.TimeSpan = v59 ()
    v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v62 : System.TimeSpan = v61 ()
    v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : US10 = US10_0
    let v64 : US11 = US11_3(v63)
    let v65 : string = $"date_time.get_utc_offset / target: {v64}"
    let v66 : System.TimeSpan = failwith<System.TimeSpan> v65
    v66 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : US10 = US10_0
    let v68 : US11 = US11_4(v67)
    let v69 : string = $"date_time.get_utc_offset / target: {v68}"
    let v70 : System.TimeSpan = failwith<System.TimeSpan> v69
    v70 
    #endif
#else
    let v71 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v72 : bool = true
    let mutable _v72 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v73 : string = "0i64.into()"
    let v74 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v73 
    v74 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v75 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v76 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v77 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v77 
    #endif
#if FABLE_COMPILER_PYTHON
    let v78 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v78 
    #endif
#else
    let v79 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v79 
    #endif
    |> fun x -> _v72 <- Some x
    let v80 : System.TimeZoneInfo = match _v72 with Some x -> x | None -> failwith "base.run_target / _v72=None"
    let v81 : (System.DateTime -> System.TimeSpan) = v71 v80
    let v82 : System.TimeSpan = v81 v9
    v82 
    #endif
    |> fun x -> _v56 <- Some x
    let v83 : System.TimeSpan = match _v56 with Some x -> x | None -> failwith "base.run_target / _v56=None"
    let v84 : (System.TimeSpan -> int32) = _.Hours
    let v85 : int32 = v84 v83
    let v86 : bool = v85 > 0
    let v87 : uint8 =
        if v86 then
            1uy
        else
            0uy
    let v88 : string = method158()
    let v89 : bool = true
    let mutable _v89 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v90 : string = v83.ToString v88 
    v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = v83.ToString v88 
    v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v92 : string = v83.ToString v88 
    v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : string = v83.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : string = v83.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v94 
    #endif
#else
    let v95 : string = v83.ToString v88 
    v95 
    #endif
    |> fun x -> _v89 <- Some x
    let v96 : string = match _v89 with Some x -> x | None -> failwith "base.run_target / _v89=None"
    let v97 : string = $"{v87}{v96.[0..1]}{v96.[3..4]}"
    let v98 : (System.Guid -> string) = _.ToString()
    let v99 : string = v98 v0
    let v100 : System.Guid = System.Guid $"{v46}{v97}{v99.[v46.Length + v97.Length..]}"
    v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v102 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v103 : System.DateTime = v102 v101
    let v104 : System.DateTimeKind = System.DateTimeKind.Local
    let v105 : System.DateTime = System.DateTime.SpecifyKind (v1, v104)
    let v106 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v107 : System.DateTime = v106 v105
    let v108 : (System.DateTime -> int64) = _.Ticks
    let v109 : int64 = v108 v107
    let v110 : (System.DateTime -> int64) = _.Ticks
    let v111 : int64 = v110 v103
    let v112 : int64 = v109 - v111
    let v113 : int64 = v112 / 10L
    let v114 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v115 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v113 v114 
    let v116 : US33 option = None
    let _v116 = ref v116 
    match v115 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v117 : chrono_DateTime<chrono_Utc> = x
    let v118 : US33 = US33_0(v117)
    v118 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v116.Value <- x
    let v119 : US33 option = _v116.Value 
    let v120 : US33 = US33_1
    let v121 : US33 = v119 |> Option.defaultValue v120 
    let v140 : US3 =
        match v121 with
        | US33_1 -> (* None *)
            US3_1
        | US33_0(v122) -> (* Some *)
            let v123 : chrono_DateTime<chrono_Utc> = method156(v122)
            let v124 : string = "v123.naive_utc()"
            let v125 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr () v124 
            let v126 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v125)"
            let v127 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr () v126 
            let v128 : string = "%Y%m%d-%H%M-%S%f"
            let v129 : string = "r#\"" + v128 + "\"#"
            let v130 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v129 
            let v131 : chrono_DateTime<chrono_Local> = method157(v127)
            let v132 : string = "v131.format(v130).to_string()"
            let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v132 
            let v134 : string = "fable_library_rust::String_::fromString($0)"
            let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
            let v136 : string = $"{v135.[0..17]}-{v135.[18..21]}-{v135.[22]}"
            US3_0(v136)
    let v144 : string =
        match v140 with
        | US3_1 -> (* None *)
            let v142 : string = ""
            v142
        | US3_0(v141) -> (* Some *)
            v141
    let v145 : bool = true
    let mutable _v145 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v146 : string = "0i64.into()"
    let v147 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v146 
    v147 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v148 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v148 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v149 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v150 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v151 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v151 
    #endif
#else
    let v152 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v152 
    #endif
    |> fun x -> _v145 <- Some x
    let v153 : System.TimeZoneInfo = match _v145 with Some x -> x | None -> failwith "base.run_target / _v145=None"
    let v154 : bool = true
    let mutable _v154 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v155 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v156 : System.TimeSpan = v155 ()
    v156 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v157 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v158 : System.TimeSpan = v157 ()
    v158 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v159 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v160 : System.TimeSpan = v159 ()
    v160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v161 : US10 = US10_0
    let v162 : US11 = US11_3(v161)
    let v163 : string = $"date_time.get_utc_offset / target: {v162}"
    let v164 : System.TimeSpan = failwith<System.TimeSpan> v163
    v164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : US10 = US10_0
    let v166 : US11 = US11_4(v165)
    let v167 : string = $"date_time.get_utc_offset / target: {v166}"
    let v168 : System.TimeSpan = failwith<System.TimeSpan> v167
    v168 
    #endif
#else
    let v169 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v170 : bool = true
    let mutable _v170 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v171 : string = "0i64.into()"
    let v172 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v171 
    v172 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v173 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v173 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v174 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v174 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v175 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v175 
    #endif
#if FABLE_COMPILER_PYTHON
    let v176 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v176 
    #endif
#else
    let v177 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v177 
    #endif
    |> fun x -> _v170 <- Some x
    let v178 : System.TimeZoneInfo = match _v170 with Some x -> x | None -> failwith "base.run_target / _v170=None"
    let v179 : (System.DateTime -> System.TimeSpan) = v169 v178
    let v180 : System.TimeSpan = v179 v107
    v180 
    #endif
    |> fun x -> _v154 <- Some x
    let v181 : System.TimeSpan = match _v154 with Some x -> x | None -> failwith "base.run_target / _v154=None"
    let v182 : (System.TimeSpan -> int32) = _.Hours
    let v183 : int32 = v182 v181
    let v184 : bool = v183 > 0
    let v185 : uint8 =
        if v184 then
            1uy
        else
            0uy
    let v186 : string = method158()
    let v187 : bool = true
    let mutable _v187 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v188 : string = v181.ToString v186 
    v188 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v189 : string = v181.ToString v186 
    v189 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v190 : string = v181.ToString v186 
    v190 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v191 : string = v181.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v191 
    #endif
#if FABLE_COMPILER_PYTHON
    let v192 : string = v181.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v192 
    #endif
#else
    let v193 : string = v181.ToString v186 
    v193 
    #endif
    |> fun x -> _v187 <- Some x
    let v194 : string = match _v187 with Some x -> x | None -> failwith "base.run_target / _v187=None"
    let v195 : string = $"{v185}{v194.[0..1]}{v194.[3..4]}"
    let v196 : (System.Guid -> string) = _.ToString()
    let v197 : string = v196 v0
    let v198 : System.Guid = System.Guid $"{v144}{v195}{v197.[v144.Length + v195.Length..]}"
    v198 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v199 : System.Guid = null |> unbox<System.Guid>
    v199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v200 : string = method159()
    let v201 : (string -> string) = v1.ToString
    let v202 : string = v201 v200
    let v203 : bool = true
    let mutable _v203 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v204 : string = "0i64.into()"
    let v205 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v204 
    v205 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v206 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v206 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v207 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v207 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v208 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v208 
    #endif
#if FABLE_COMPILER_PYTHON
    let v209 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v209 
    #endif
#else
    let v210 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v210 
    #endif
    |> fun x -> _v203 <- Some x
    let v211 : System.TimeZoneInfo = match _v203 with Some x -> x | None -> failwith "base.run_target / _v203=None"
    let v212 : bool = true
    let mutable _v212 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v213 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v214 : System.TimeSpan = v213 ()
    v214 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v215 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v216 : System.TimeSpan = v215 ()
    v216 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v217 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v218 : System.TimeSpan = v217 ()
    v218 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v219 : US10 = US10_0
    let v220 : US11 = US11_3(v219)
    let v221 : string = $"date_time.get_utc_offset / target: {v220}"
    let v222 : System.TimeSpan = failwith<System.TimeSpan> v221
    v222 
    #endif
#if FABLE_COMPILER_PYTHON
    let v223 : US10 = US10_0
    let v224 : US11 = US11_4(v223)
    let v225 : string = $"date_time.get_utc_offset / target: {v224}"
    let v226 : System.TimeSpan = failwith<System.TimeSpan> v225
    v226 
    #endif
#else
    let v227 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v228 : bool = true
    let mutable _v228 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v229 : string = "0i64.into()"
    let v230 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v229 
    v230 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v231 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v231 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v232 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v232 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v233 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v233 
    #endif
#if FABLE_COMPILER_PYTHON
    let v234 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v234 
    #endif
#else
    let v235 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v235 
    #endif
    |> fun x -> _v228 <- Some x
    let v236 : System.TimeZoneInfo = match _v228 with Some x -> x | None -> failwith "base.run_target / _v228=None"
    let v237 : (System.DateTime -> System.TimeSpan) = v227 v236
    let v238 : System.TimeSpan = v237 v1
    v238 
    #endif
    |> fun x -> _v212 <- Some x
    let v239 : System.TimeSpan = match _v212 with Some x -> x | None -> failwith "base.run_target / _v212=None"
    let v240 : (System.TimeSpan -> int32) = _.Hours
    let v241 : int32 = v240 v239
    let v242 : bool = v241 > 0
    let v243 : uint8 =
        if v242 then
            1uy
        else
            0uy
    let v244 : string = method160()
    let v245 : bool = true
    let mutable _v245 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v246 : string = v239.ToString v244 
    v246 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v247 : string = v239.ToString v244 
    v247 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v248 : string = v239.ToString v244 
    v248 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v249 : string = v239.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v249 
    #endif
#if FABLE_COMPILER_PYTHON
    let v250 : string = v239.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v250 
    #endif
#else
    let v251 : string = v239.ToString v244 
    v251 
    #endif
    |> fun x -> _v245 <- Some x
    let v252 : string = match _v245 with Some x -> x | None -> failwith "base.run_target / _v245=None"
    let v253 : string = $"{v243}{v252}"
    let v254 : (System.Guid -> string) = _.ToString()
    let v255 : string = v254 v0
    let v256 : System.Guid = System.Guid $"{v202}{v253}{v255.[v202.Length + v253.Length..]}"
    v256 
    #endif
#if FABLE_COMPILER_PYTHON
    let v257 : string = method159()
    let v258 : (string -> string) = v1.ToString
    let v259 : string = v258 v257
    let v260 : bool = true
    let mutable _v260 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v261 : string = "0i64.into()"
    let v262 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v261 
    v262 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v263 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v263 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v264 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v264 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v265 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v265 
    #endif
#if FABLE_COMPILER_PYTHON
    let v266 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v266 
    #endif
#else
    let v267 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v267 
    #endif
    |> fun x -> _v260 <- Some x
    let v268 : System.TimeZoneInfo = match _v260 with Some x -> x | None -> failwith "base.run_target / _v260=None"
    let v269 : bool = true
    let mutable _v269 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v270 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v271 : System.TimeSpan = v270 ()
    v271 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v272 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v273 : System.TimeSpan = v272 ()
    v273 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v274 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v275 : System.TimeSpan = v274 ()
    v275 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v276 : US10 = US10_0
    let v277 : US11 = US11_3(v276)
    let v278 : string = $"date_time.get_utc_offset / target: {v277}"
    let v279 : System.TimeSpan = failwith<System.TimeSpan> v278
    v279 
    #endif
#if FABLE_COMPILER_PYTHON
    let v280 : US10 = US10_0
    let v281 : US11 = US11_4(v280)
    let v282 : string = $"date_time.get_utc_offset / target: {v281}"
    let v283 : System.TimeSpan = failwith<System.TimeSpan> v282
    v283 
    #endif
#else
    let v284 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v285 : bool = true
    let mutable _v285 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v286 : string = "0i64.into()"
    let v287 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v286 
    v287 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v288 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v288 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v289 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v289 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v290 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v290 
    #endif
#if FABLE_COMPILER_PYTHON
    let v291 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v291 
    #endif
#else
    let v292 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v292 
    #endif
    |> fun x -> _v285 <- Some x
    let v293 : System.TimeZoneInfo = match _v285 with Some x -> x | None -> failwith "base.run_target / _v285=None"
    let v294 : (System.DateTime -> System.TimeSpan) = v284 v293
    let v295 : System.TimeSpan = v294 v1
    v295 
    #endif
    |> fun x -> _v269 <- Some x
    let v296 : System.TimeSpan = match _v269 with Some x -> x | None -> failwith "base.run_target / _v269=None"
    let v297 : (System.TimeSpan -> int32) = _.Hours
    let v298 : int32 = v297 v296
    let v299 : bool = v298 > 0
    let v300 : uint8 =
        if v299 then
            1uy
        else
            0uy
    let v301 : string = method160()
    let v302 : bool = true
    let mutable _v302 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v303 : string = v296.ToString v301 
    v303 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v304 : string = v296.ToString v301 
    v304 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v305 : string = v296.ToString v301 
    v305 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v306 : string = v296.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v306 
    #endif
#if FABLE_COMPILER_PYTHON
    let v307 : string = v296.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v307 
    #endif
#else
    let v308 : string = v296.ToString v301 
    v308 
    #endif
    |> fun x -> _v302 <- Some x
    let v309 : string = match _v302 with Some x -> x | None -> failwith "base.run_target / _v302=None"
    let v310 : string = $"{v300}{v309}"
    let v311 : (System.Guid -> string) = _.ToString()
    let v312 : string = v311 v0
    let v313 : System.Guid = System.Guid $"{v259}{v310}{v312.[v259.Length + v310.Length..]}"
    v313 
    #endif
#else
    let v314 : string = method159()
    let v315 : (string -> string) = v1.ToString
    let v316 : string = v315 v314
    let v317 : bool = true
    let mutable _v317 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v318 : string = "0i64.into()"
    let v319 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v318 
    v319 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v320 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v320 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v321 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v322 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v322 
    #endif
#if FABLE_COMPILER_PYTHON
    let v323 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v323 
    #endif
#else
    let v324 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v324 
    #endif
    |> fun x -> _v317 <- Some x
    let v325 : System.TimeZoneInfo = match _v317 with Some x -> x | None -> failwith "base.run_target / _v317=None"
    let v326 : bool = true
    let mutable _v326 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v327 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v328 : System.TimeSpan = v327 ()
    v328 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v329 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v330 : System.TimeSpan = v329 ()
    v330 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v331 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v332 : System.TimeSpan = v331 ()
    v332 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v333 : US10 = US10_0
    let v334 : US11 = US11_3(v333)
    let v335 : string = $"date_time.get_utc_offset / target: {v334}"
    let v336 : System.TimeSpan = failwith<System.TimeSpan> v335
    v336 
    #endif
#if FABLE_COMPILER_PYTHON
    let v337 : US10 = US10_0
    let v338 : US11 = US11_4(v337)
    let v339 : string = $"date_time.get_utc_offset / target: {v338}"
    let v340 : System.TimeSpan = failwith<System.TimeSpan> v339
    v340 
    #endif
#else
    let v341 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v342 : bool = true
    let mutable _v342 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v343 : string = "0i64.into()"
    let v344 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v343 
    v344 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v345 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v345 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v346 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v346 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v347 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v347 
    #endif
#if FABLE_COMPILER_PYTHON
    let v348 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v348 
    #endif
#else
    let v349 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v349 
    #endif
    |> fun x -> _v342 <- Some x
    let v350 : System.TimeZoneInfo = match _v342 with Some x -> x | None -> failwith "base.run_target / _v342=None"
    let v351 : (System.DateTime -> System.TimeSpan) = v341 v350
    let v352 : System.TimeSpan = v351 v1
    v352 
    #endif
    |> fun x -> _v326 <- Some x
    let v353 : System.TimeSpan = match _v326 with Some x -> x | None -> failwith "base.run_target / _v326=None"
    let v354 : (System.TimeSpan -> int32) = _.Hours
    let v355 : int32 = v354 v353
    let v356 : bool = v355 > 0
    let v357 : uint8 =
        if v356 then
            1uy
        else
            0uy
    let v358 : string = method160()
    let v359 : bool = true
    let mutable _v359 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v360 : string = v353.ToString v358 
    v360 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v361 : string = v353.ToString v358 
    v361 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v362 : string = v353.ToString v358 
    v362 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v363 : string = v353.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v363 
    #endif
#if FABLE_COMPILER_PYTHON
    let v364 : string = v353.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v364 
    #endif
#else
    let v365 : string = v353.ToString v358 
    v365 
    #endif
    |> fun x -> _v359 <- Some x
    let v366 : string = match _v359 with Some x -> x | None -> failwith "base.run_target / _v359=None"
    let v367 : string = $"{v357}{v366}"
    let v368 : (System.Guid -> string) = _.ToString()
    let v369 : string = v368 v0
    let v370 : System.Guid = System.Guid $"{v316}{v367}{v369.[v316.Length + v367.Length..]}"
    v370 
    #endif
    |> fun x -> _v2 <- Some x
    let v371 : System.Guid = match _v2 with Some x -> x | None -> failwith "base.run_target / _v2=None"
    v371
and method161 (v0 : string, v1 : string) : unit =
    let v2 : bool = method24(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method137(v0)
        ()
    let v5 : string = method31(v1)
    let v6 : bool = method24(v5)
    let v7 : bool = v6 = false
    if v7 then
        let v8 : System.IDisposable = method137(v5)
        ()
    let v9 : bool = method24(v1)
    let v14 : bool =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v10 
            let v12 : string = "v11.is_err()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
            v13
        else
            false
    if v14 then
        let v15 : bool = true
        method144(v15, v1)
    let v16 : bool = method24(v1)
    let v17 : bool = v16 = false
    if v17 then
        let v18 : bool = true
        let mutable _v18 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v19 : bool = true
        let mutable _v19 : unit option = None 
        
#if _FREEBSD
        let v20 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v20 
        () 
        #endif
#if _LINUX
        let v21 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v21 
        () 
        #endif
#if _OSX
        let v22 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v22 
        () 
        #endif
#if _WINDOWS
        let v23 : string = "std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v23 
        () 
        #endif
        |> fun x -> _v19 <- Some x
        match _v19 with Some x -> x | None -> failwith "runtime.run_platform / _v19=None"
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v24 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        () 
        #endif
        |> fun x -> _v18 <- Some x
        match _v18 with Some x -> x | None -> failwith "base.run_target / _v18=None"
        ()
and closure98 () () : string =
    let v0 : string = "common.retry_fn' / loop"
    v0
and closure99 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : struct (bool * string * int32 * string) =
    let v5 : string = $"{v1}/{v0}"
    struct (v4, v5, v2, v3)
and method167 (v0 : Mut4, v1 : int32, v2 : string) : unit =
    method93(v0, v1)
    let v3 : string = ", "
    method11(v0, v3)
    method11(v0, v2)
and method166 (v0 : Mut4, v1 : bool, v2 : string, v3 : int32, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "is_error"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method69(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "retry"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "result"
    method11(v0, v10)
    method11(v0, v7)
    method167(v0, v3, v4)
    let v11 : string = " }"
    method11(v0, v11)
and closure100 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (bool * string * int32 * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : bool, v331 : string, v332 : int32, v333 : string) = v2 ()
    let v334 : string = ""
    let v335 : Mut4 = {l0 = v334} : Mut4
    method166(v335, v330, v331, v332, v333)
    let v336 : string = v335.l0
    let v337 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v336}"
    let v338 : char list = []
    let v339 : (char list -> (char [])) = List.toArray
    let v340 : (char []) = v339 v338
    let v341 : string = v337.TrimStart v340 
    let v342 : char list = []
    let v343 : char list = '/' :: v342 
    let v344 : char list = ' ' :: v343 
    let v345 : (char list -> (char [])) = List.toArray
    let v346 : (char []) = v345 v344
    let v347 : string = v341.TrimEnd v346 
    v347
and method165 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (bool * string * int32 * string))) : unit =
    let v3 : (unit -> string) = closure100(v0, v1, v2)
    method14(v0, v3)
and method164 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method36(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US34 =
        if v11 then
            US34_0(v9, v10)
        else
            US34_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US34_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US34_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : US0 = US0_1
        let v29 : (unit -> string) = closure98()
        let v30 : (unit -> struct (bool * string * int32 * string)) = closure99(v0, v8, v23, v24, v22)
        method165(v28, v29, v30)
        let v31 : uint8 = v8 + 1uy
        method164(v0, v1, v2, v3, v4, v5, v6, v7, v31)
and method163 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method164(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method162 (v0 : string, v1 : string, v2 : string, v3 : US12) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : bool = true
    let mutable _v9 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10 : string = "cfg!(windows)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "cfg!(windows)"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : string = "cfg!(windows)"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr () v14 
    v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : US10 = US10_0
    let v17 : US11 = US11_3(v16)
    let v18 : string = $"platform.is_windows / target: {v17}"
    let v19 : bool = failwith<bool> v18
    v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : US10 = US10_0
    let v21 : US11 = US11_4(v20)
    let v22 : string = $"platform.is_windows / target: {v21}"
    let v23 : bool = failwith<bool> v22
    v23 
    #endif
#else
    let v24 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v25 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v26 : bool = v25 v24
    v26 
    #endif
    |> fun x -> _v9 <- Some x
    let v27 : bool = match _v9 with Some x -> x | None -> failwith "base.run_target / _v9=None"
    let v30 : string =
        if v27 then
            let v28 : string = "_WINDOWS"
            v28
        else
            let v29 : string = "_LINUX"
            v29
    let v31 : string = $"dotnet fable \"{v2}\" --optimize --lang {v1} --extension .{v1} --outDir \"{v0}\" --define {v30}"
    let v37 : Result<string, string> =
        match v3 with
        | US12_1(v34) -> (* Error *)
            let v35 : Result<string, string> = Error v34 
            v35
        | US12_0(v32) -> (* Ok *)
            let v33 : Result<string, string> = Ok v32 
            v33
    let v38 : string = "v37.ok()"
    let v39 : string option = Fable.Core.RustInterop.emitRustExpr () v38 
    let v40 : uint8 = 3uy
    let v41 : bool = true
    method163(v40, v31, v4, v5, v6, v7, v41, v39)
and closure101 () () : string =
    let v0 : string = "spiral_builder.process_rust / dotnet fable error"
    v0
and closure102 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and method169 (v0 : Mut4, v1 : int32, v2 : string) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method93(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "dotnet_fable_result"
    method11(v0, v7)
    method11(v0, v5)
    method11(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure103 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : string) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method169(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method168 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) : unit =
    let v3 : (unit -> string) = closure103(v0, v1, v2)
    method14(v0, v3)
and method171 () : string =
    let v0 : string = "a"
    v0
and closure104 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : struct (bool * string * int32 * string) =
    let v4 : string = $"{v0}/{3uy}"
    struct (v3, v4, v1, v2)
and method170 (v0 : string, v1 : US12, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v0}\" --"
    let v14 : Result<string, string> =
        match v1 with
        | US12_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US12_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    let v15 : string = "v14.ok()"
    let v16 : string option = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : bool = true
    let struct (v18 : int32, v19 : string) = method36(v8, v3, v4, v5, v6, v17, v16)
    let v20 : string = "failed to load manifest for workspace member"
    let v21 : bool = v19.Contains v20 
    let v22 : bool = v21 = false
    let v152 : US34 =
        if v22 then
            let v23 : bool = v18 = 0
            if v23 then
                US34_0(v18, v19)
            else
                US34_1(v18, v19)
        else
            let v27 : string = $"regex::Regex::new(&$0)"
            let v28 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v29 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v28 v27 
            let v30 : string = "$0.unwrap()"
            let v31 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v29 v30 
            let v32 : string = "&*$0"
            let v33 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19 v32 
            let v34 : string = "String::from($0)"
            let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v34 
            let v36 : string = "true; let _result = (move || { //"
            let v37 : bool = Fable.Core.RustInterop.emitRustExpr () v36 
            let v38 : string = "Box::new($0)"
            let v39 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v35 v38 
            let v40 : string = "Box::leak($0)"
            let v41 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v39 v40 
            let v42 : string = $"v31.captures_iter(v41)"
            let v43 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v42 
            let v44 : string = "true; let _result : Vec<_> = v43.map(|x| { //"
            let v45 : bool = Fable.Core.RustInterop.emitRustExpr () v44 
            let v46 : string = $"x"
            let v47 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v46 
            let v48 : string = "Box::new($0)"
            let v49 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v47 v48 
            let v50 : string = "Box::leak($0)"
            let v51 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v49 v50 
            let v52 : string = $"$0.capture_names()"
            let v53 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v31 v52 
            let v54 : string = "true; let _result : std::collections::HashMap<_, _> = v53.map(|x| { //"
            let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
            let v56 : string = "x.unwrap_or(\"\").to_string().into()"
            let v57 : string = Fable.Core.RustInterop.emitRustExpr () v56 
            let v58 : string = "$0.clone()"
            let v59 : string = Fable.Core.RustInterop.emitRustExpr v57 v58 
            let v60 : string = $"v51.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v61 : string = Fable.Core.RustInterop.emitRustExpr v57 v60 
            let v62 : (string * string) = v59, v61 
            let v63 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v64 : bool = Fable.Core.RustInterop.emitRustExpr v62 v63 
            let v65 : string = "_result"
            let v66 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v65 
            let v67 : string = "true; $0 }).collect::<Vec<_>>()"
            let v68 : bool = Fable.Core.RustInterop.emitRustExpr v66 v67 
            let v69 : string = "_result"
            let v70 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v69 
            let v71 : string = "true; $0 })()"
            let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
            let v73 : string = "_result"
            let v74 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v73 
            let v75 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v76 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v74 v75 
            let v77 : (int32 -> ((std_collections_HashMap<string, string> []) -> std_collections_HashMap<string, string> option)) = Array.tryItem
            let v78 : ((std_collections_HashMap<string, string> []) -> std_collections_HashMap<string, string> option) = v77 0
            let v79 : std_collections_HashMap<string, string> option = v78 v76
            let v80 : US35 option = None
            let _v80 = ref v80 
            match v79 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v81 : std_collections_HashMap<string, string> = x
            let v82 : US35 = US35_0(v81)
            v82 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v80.Value <- x
            let v83 : US35 option = _v80.Value 
            let v84 : US35 = US35_1
            let v85 : US35 = v83 |> Option.defaultValue v84 
            let v99 : US36 =
                match v85 with
                | US35_1 -> (* None *)
                    US36_1
                | US35_0(v86) -> (* Some *)
                    let v87 : string = method171()
                    let v88 : string = "std::collections::HashMap::get(&$0, &v87).map(|x| x).cloned()"
                    let v89 : string option = Fable.Core.RustInterop.emitRustExpr v86 v88 
                    let v90 : US3 option = None
                    let _v90 = ref v90 
                    match v89 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v91 : string = x
                    let v92 : US3 = US3_0(v91)
                    v92 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v90.Value <- x
                    let v93 : US3 option = _v90.Value 
                    let v94 : US3 = US3_1
                    let v95 : US3 = v93 |> Option.defaultValue v94 
                    US36_0(v95)
            let v106 : US3 =
                match v99 with
                | US36_0(v100) -> (* Some *)
                    match v100 with
                    | US3_0(v101) -> (* Some *)
                        US3_0(v101)
                    | _ ->
                        US3_1
                | _ ->
                    US3_1
            match v106 with
            | US3_1 -> (* None *)
                US34_1(v18, v19)
            | US3_0(v108) -> (* Some *)
                let v109 : bool = method34(v108)
                let v110 : bool = v109 = false
                if v110 then
                    let v111 : string = method31(v108)
                    let v112 : System.IDisposable = method137(v111)
                    let v113 : System.DateTime = System.DateTime.Now
                    let v114 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v115 : System.Guid = v114 ()
                    let v116 : System.Guid = method155(v115, v113)
                    let v117 : (System.Guid -> string) = _.ToString()
                    let v118 : string = v117 v116
                    let v119 : string = $"[package]"
                    let v120 : string = $"name = \"spiral_builder_{v118}\""
                    let v121 : string = "\n"
                    let v122 : string = v119 + v121 
                    let v123 : string = v122 + v120 
                    let v124 : string = $"version = \"0.0.1\""
                    let v125 : string = v123 + v121 
                    let v126 : string = v125 + v124 
                    let v127 : string = $"edition = \"2021\""
                    let v128 : string = v126 + v121 
                    let v129 : string = v128 + v127 
                    let v130 : string = $""
                    let v131 : string = v129 + v121 
                    let v132 : string = v131 + v130 
                    let v133 : string = $"[[bin]]"
                    let v134 : string = v132 + v121 
                    let v135 : string = v134 + v133 
                    let v136 : string = $"name = \"spiral_builder_{v118}\""
                    let v137 : string = v135 + v121 
                    let v138 : string = v137 + v136 
                    let v139 : string = "rs"
                    let v140 : string = $"path = \"spiral_builder.{v139}\""
                    let v141 : string = v138 + v121 
                    let v142 : string = v141 + v140 
                    let v143 : bool = true
                    let mutable _v143 : unit option = None 
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v144 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v108, v142) v144 
                    () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    null |> unbox<unit>
                    () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    null |> unbox<unit>
                    () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    null |> unbox<unit>
                    () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    null |> unbox<unit>
                    () 
                    #endif
#else
                    let v145 : string = method35(v142)
                    System.IO.File.WriteAllText (v108, v145)
                    () 
                    #endif
                    |> fun x -> _v143 <- Some x
                    match _v143 with Some x -> x | None -> failwith "base.run_target / _v143=None"
                    ()
                let v146 : bool = v18 = 0
                if v146 then
                    US34_0(v18, v19)
                else
                    US34_1(v18, v19)
    let struct (v160 : bool, v161 : int32, v162 : string) =
        match v152 with
        | US34_1(v155, v156) -> (* Error *)
            struct (true, v155, v156)
        | US34_0(v153, v154) -> (* Ok *)
            struct (false, v153, v154)
    let v163 : bool = v160 = false
    let v165 : bool =
        if v163 then
            true
        else
            let v164 : bool = v2 >= 3uy
            v164
    if v165 then
        struct (v161, v162)
    else
        let v166 : US0 = US0_1
        let v167 : (unit -> string) = closure98()
        let v168 : (unit -> struct (bool * string * int32 * string)) = closure104(v2, v161, v162, v160)
        method165(v166, v167, v168)
        let v169 : uint8 = v2 + 1uy
        method170(v0, v1, v169)
and closure105 () () : string =
    let v0 : string = "spiral_builder.process_rust / cargo fmt error"
    v0
and closure106 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and method173 (v0 : Mut4, v1 : int32, v2 : string) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "exit_code"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method93(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "cargo_fmt_result"
    method11(v0, v7)
    method11(v0, v5)
    method11(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure107 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : string) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method173(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method172 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) : unit =
    let v3 : (unit -> string) = closure107(v0, v1, v2)
    method14(v0, v3)
and method174 () : string =
    let v0 : string = " defaultOf::<()>();"
    v0
and method175 () : string =
    let v0 : string = "\\s\\sdefaultOf\\(\\);"
    v0
and closure108 () () : string =
    let v0 : string = "spiral_builder.process_rust"
    v0
and closure109 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool) () : struct (string * UH4) =
    let v9 : UH4 = UH4_0
    let v10 : UH4 = UH4_1(v7, v8, v9)
    let v11 : UH4 = UH4_1(v5, v6, v10)
    let v12 : UH4 = UH4_1(v3, v4, v11)
    let v13 : UH4 = UH4_1(v1, v2, v12)
    struct (v0, v13)
and method178 (v0 : Mut4, v1 : UH4) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method177 (v0 : Mut4, v1 : string, v2 : UH4) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "new_code_path"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method11(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "cleanup"
    method11(v0, v7)
    method11(v0, v5)
    method178(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure110 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * UH4))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : string, v331 : UH4) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method177(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method176 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * UH4))) : unit =
    let v3 : (unit -> string) = closure110(v0, v1, v2)
    method14(v0, v3)
and method179 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        let v4 : bool = true
        let mutable _v4 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0).unwrap()"
        Fable.Core.RustInterop.emitRustExpr v1 v5 
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v6 : (string -> unit) = System.IO.File.Delete
        v6 v1
        () 
        #endif
        |> fun x -> _v4 <- Some x
        match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
        method179(v3)
    | UH4_0 -> (* Nil *)
        ()
and closure112 () (v0 : string) : bool =
    let v1 : string = "profile [optimized] target"
    let v2 : bool = v0.Contains v1 
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string = "profile [unoptimized] target"
        let v5 : bool = v0.Contains v4 
        let v6 : bool = v5 = false
        if v6 then
            let v7 : string = "profile [unoptimized + debuginfo] target"
            let v8 : bool = v0.Contains v7 
            let v9 : bool = v8 = false
            v9
        else
            false
    else
        false
and closure111 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : ((string -> bool) -> ((string []) -> (string []))) = Array.skipWhile
    let v4 : (string -> bool) = closure112()
    let v5 : ((string []) -> (string [])) = v3 v4
    let v6 : (string []) = v5 v2
    let v7 : (int32 -> ((string []) -> (string []))) = Array.skip
    let v8 : ((string []) -> (string [])) = v7 2
    let v9 : (string []) = v8 v6
    let v10 : ((string []) -> string seq) = Seq.ofArray
    let v11 : string seq = v10 v9
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v1
    v13 v11
and closure114 () () : string =
    let v0 : string = "spiral_builder.process_rust / Exception"
    v0
and closure115 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v1, v0, v2)
and method181 (v0 : Mut4, v1 : exn, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "ex"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method107(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "cargo_run_result"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "new_code_path"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "external_command"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure116 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : exn, v331 : string, v332 : string, v333 : string) = v2 ()
    let v334 : string = ""
    let v335 : Mut4 = {l0 = v334} : Mut4
    method181(v335, v330, v331, v332, v333)
    let v336 : string = v335.l0
    let v337 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v336}"
    let v338 : char list = []
    let v339 : (char list -> (char [])) = List.toArray
    let v340 : (char []) = v339 v338
    let v341 : string = v337.TrimStart v340 
    let v342 : char list = []
    let v343 : char list = '/' :: v342 
    let v344 : char list = ' ' :: v343 
    let v345 : (char list -> (char [])) = List.toArray
    let v346 : (char []) = v345 v344
    let v347 : string = v341.TrimEnd v346 
    v347
and method180 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) : unit =
    let v3 : (unit -> string) = closure116(v0, v1, v2)
    method14(v0, v3)
and closure113 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure114()
    let v6 : (unit -> struct (exn * string * string * string)) = closure115(v0, v1, v2, v3)
    method180(v4, v5, v6)
    US3_1
and closure117 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure118 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and method183 (v0 : Mut4, v1 : int32, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "exit_code"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method93(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "cargo_run_result"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "new_code_path"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "external_command"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure119 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : int32, v331 : string, v332 : string, v333 : string) = v2 ()
    let v334 : string = ""
    let v335 : Mut4 = {l0 = v334} : Mut4
    method183(v335, v330, v331, v332, v333)
    let v336 : string = v335.l0
    let v337 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v336}"
    let v338 : char list = []
    let v339 : (char list -> (char [])) = List.toArray
    let v340 : (char []) = v339 v338
    let v341 : string = v337.TrimStart v340 
    let v342 : char list = []
    let v343 : char list = '/' :: v342 
    let v344 : char list = ' ' :: v343 
    let v345 : (char list -> (char [])) = List.toArray
    let v346 : (char []) = v345 v344
    let v347 : string = v341.TrimEnd v346 
    v347
and method182 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) : unit =
    let v3 : (unit -> string) = closure119(v0, v1, v2)
    method14(v0, v3)
and method186 (v0 : async_walkdir_DirEntry) : async_walkdir_DirEntry =
    v0
and closure121 () (v0 : std_fs_FileType) : US38 =
    US38_0(v0)
and closure122 () (v0 : std_string_String) : US38 =
    US38_1(v0)
and method187 (v0 : std_fs_FileType) : std_fs_FileType =
    v0
and method188 (v0 : US37) : US37 =
    v0
and method185 (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US37>>, Send<Dyn<std_future_Future<US37>>>>>> =
    let v1 : string = "let __result = Box::pin(async move { //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : async_walkdir_DirEntry = method186(v0)
    let v3 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v2))"
    let v4 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "v4.await"
    let v6 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : (std_io_Error -> std_string_String) = method71()
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v8 
    let v10 : (std_fs_FileType -> US38) = closure121()
    let v11 : (std_string_String -> US38) = closure122()
    let v12 : US38 = match v9 with Ok x -> v10 x | Error x -> v11 x
    let v22 : US37 =
        match v12 with
        | US38_0(v13) -> (* Ok *)
            let v14 : std_fs_FileType = method187(v13)
            let v15 : string = "std::fs::FileType::is_dir(&v14)"
            let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
            let v17 : bool = v16 = false
            if v17 then
                US37_0
            else
                US37_2
        | _ ->
            US37_2
    let v23 : US37 = method188(v22)
    let v24 : string = ""
    let v25 : string = "}"
    let v26 : string = v24 + v25 
    let v27 : string = v26 + v25 
    let v28 : string = "{"
    let v29 : string = v24 + v28 
    let v30 : string = "v23 " + v27 + "); " + v29 + " //"
    Fable.Core.RustInterop.emitRustExpr () v30 
    let v31 : string = "__result"
    let v32 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US37>>, Send<Dyn<std_future_Future<US37>>>>>> = Fable.Core.RustInterop.emitRustExpr () v31 
    v32
and method189 (v0 : async_walkdir_Filtering) : async_walkdir_Filtering =
    v0
and method184 (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v1 : string = "let __result = Box::pin(async { //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US37>>, Send<Dyn<std_future_Future<US37>>>>>> = method185(v0)
    let v3 : string = "v2.await"
    let v4 : US37 = Fable.Core.RustInterop.emitRustExpr () v3 
    let v13 : async_walkdir_Filtering =
        match v4 with
        | US37_2 -> (* Continue *)
            let v9 : string = "async_walkdir::Filtering::Continue"
            let v10 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v9 
            v10
        | US37_0 -> (* Ignore *)
            let v5 : string = "async_walkdir::Filtering::Ignore"
            let v6 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v5 
            v6
        | US37_1 -> (* IgnoreDir *)
            let v7 : string = "async_walkdir::Filtering::IgnoreDir"
            let v8 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v7 
            v8
    let v14 : async_walkdir_Filtering = method189(v13)
    let v15 : string = ""
    let v16 : string = "}"
    let v17 : string = v15 + v16 
    let v18 : string = v17 + v16 
    let v19 : string = "{"
    let v20 : string = v15 + v19 
    let v21 : string = "v14 " + v18 + "); " + v20 + " //"
    Fable.Core.RustInterop.emitRustExpr () v21 
    let v22 : string = "__result"
    let v23 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v22 
    v23
and closure120 () (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    method184(v0)
and closure124 () (v0 : async_walkdir_Error) : std_string_String =
    let v1 : bool = true
    let mutable _v1 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v9 : std_string_String = null |> unbox<std_string_String>
    v9 
    #endif
#else
    let v10 : std_string_String = null |> unbox<std_string_String>
    v10 
    #endif
    |> fun x -> _v1 <- Some x
    let v11 : std_string_String = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v11
and method191 () : (async_walkdir_Error -> std_string_String) =
    closure124()
and closure125 () (v0 : async_walkdir_DirEntry) : US39 =
    US39_0(v0)
and closure126 () (v0 : std_string_String) : US39 =
    US39_1(v0)
and closure127 () () : string =
    let v0 : string = "spiral_builder.process_typescript / stream_filter_map"
    v0
and closure128 (v0 : std_string_String) () : std_string_String =
    v0
and closure123 () (v0 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v1 : (async_walkdir_Error -> std_string_String) = method191()
    let v2 : string = "$0.map_err(|x| $1(x))"
    let v3 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v2 
    let v4 : (async_walkdir_DirEntry -> US39) = closure125()
    let v5 : (std_string_String -> US39) = closure126()
    let v6 : US39 = match v3 with Ok x -> v4 x | Error x -> v5 x
    let v117 : US40 =
        match v6 with
        | US39_1(v111) -> (* Error *)
            let v112 : US0 = US0_4
            let v113 : (unit -> string) = closure127()
            let v114 : (unit -> std_string_String) = closure128(v111)
            method74(v112, v113, v114)
            US40_1
        | US39_0(v7) -> (* Ok *)
            let v8 : string = "async_walkdir::DirEntry::path(&$0)"
            let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
            let v10 : string = "$0.display()"
            let v11 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v9 v10 
            let v12 : bool = true
            let mutable _v12 : std_string_String option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v13 : string = "format!(\"{}\", $0)"
            let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v13 
            v14 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v15 : string = "format!(\"{}\", $0)"
            let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v15 
            v16 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v17 : string = "format!(\"{}\", $0)"
            let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v17 
            v18 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v19 : std_string_String = null |> unbox<std_string_String>
            v19 
            #endif
#if FABLE_COMPILER_PYTHON
            let v20 : std_string_String = null |> unbox<std_string_String>
            v20 
            #endif
#else
            let v21 : std_string_String = null |> unbox<std_string_String>
            v21 
            #endif
            |> fun x -> _v12 <- Some x
            let v22 : std_string_String = match _v12 with Some x -> x | None -> failwith "base.run_target / _v12=None"
            let v23 : string = "fable_library_rust::String_::fromString($0)"
            let v24 : string = Fable.Core.RustInterop.emitRustExpr v22 v23 
            let v25 : string = "ts"
            let v26 : string = $"fable-library-{v25}\.(?<a>[\d.]+)$"
            let v27 : string = $"regex::Regex::new(&$0)"
            let v28 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v26 v27 
            let v29 : string = "$0.unwrap()"
            let v30 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v28 v29 
            let v31 : string = "&*$0"
            let v32 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v24 v31 
            let v33 : string = "String::from($0)"
            let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v33 
            let v35 : string = "true; let _result = (move || { //"
            let v36 : bool = Fable.Core.RustInterop.emitRustExpr () v35 
            let v37 : string = "Box::new($0)"
            let v38 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v34 v37 
            let v39 : string = "Box::leak($0)"
            let v40 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let v41 : string = $"v30.captures_iter(v40)"
            let v42 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v41 
            let v43 : string = "true; let _result : Vec<_> = v42.map(|x| { //"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr () v43 
            let v45 : string = $"x"
            let v46 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "Box::new($0)"
            let v48 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v46 v47 
            let v49 : string = "Box::leak($0)"
            let v50 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v48 v49 
            let v51 : string = $"$0.capture_names()"
            let v52 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v30 v51 
            let v53 : string = "true; let _result : std::collections::HashMap<_, _> = v52.map(|x| { //"
            let v54 : bool = Fable.Core.RustInterop.emitRustExpr () v53 
            let v55 : string = "x.unwrap_or(\"\").to_string().into()"
            let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55 
            let v57 : string = "$0.clone()"
            let v58 : string = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let v59 : string = $"v50.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v60 : string = Fable.Core.RustInterop.emitRustExpr v56 v59 
            let v61 : (string * string) = v58, v60 
            let v62 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v63 : bool = Fable.Core.RustInterop.emitRustExpr v61 v62 
            let v64 : string = "_result"
            let v65 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v64 
            let v66 : string = "true; $0 }).collect::<Vec<_>>()"
            let v67 : bool = Fable.Core.RustInterop.emitRustExpr v65 v66 
            let v68 : string = "_result"
            let v69 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v68 
            let v70 : string = "true; $0 })()"
            let v71 : bool = Fable.Core.RustInterop.emitRustExpr v69 v70 
            let v72 : string = "_result"
            let v73 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v72 
            let v74 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v75 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : (int32 -> ((std_collections_HashMap<string, string> []) -> std_collections_HashMap<string, string> option)) = Array.tryItem
            let v77 : ((std_collections_HashMap<string, string> []) -> std_collections_HashMap<string, string> option) = v76 0
            let v78 : std_collections_HashMap<string, string> option = v77 v75
            let v79 : US35 option = None
            let _v79 = ref v79 
            match v78 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v80 : std_collections_HashMap<string, string> = x
            let v81 : US35 = US35_0(v80)
            v81 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v79.Value <- x
            let v82 : US35 option = _v79.Value 
            let v83 : US35 = US35_1
            let v84 : US35 = v82 |> Option.defaultValue v83 
            let v98 : US36 =
                match v84 with
                | US35_1 -> (* None *)
                    US36_1
                | US35_0(v85) -> (* Some *)
                    let v86 : string = method171()
                    let v87 : string = "std::collections::HashMap::get(&$0, &v86).map(|x| x).cloned()"
                    let v88 : string option = Fable.Core.RustInterop.emitRustExpr v85 v87 
                    let v89 : US3 option = None
                    let _v89 = ref v89 
                    match v88 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v90 : string = x
                    let v91 : US3 = US3_0(v90)
                    v91 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v89.Value <- x
                    let v92 : US3 option = _v89.Value 
                    let v93 : US3 = US3_1
                    let v94 : US3 = v92 |> Option.defaultValue v93 
                    US36_0(v94)
            let v105 : US3 =
                match v98 with
                | US36_0(v99) -> (* Some *)
                    match v99 with
                    | US3_0(v100) -> (* Some *)
                        US3_0(v100)
                    | _ ->
                        US3_1
                | _ ->
                    US3_1
            match v105 with
            | US3_1 -> (* None *)
                US40_1
            | US3_0(v107) -> (* Some *)
                US40_0(v24, v107)
    match v117 with
    | US40_1 -> (* None *)
        let v121 : struct (string * string) option = None
        v121
    | US40_0(v118, v119) -> (* Some *)
        let v120 : struct (string * string) option = Some struct (v118, v119) 
        v120
and method190 () : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure123()
and closure129 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure130 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure131 (v0 : US40) () : std_string_String =
    let v1 : bool = true
    let mutable _v1 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{:#?}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{:#?}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{:#?}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v9 : std_string_String = null |> unbox<std_string_String>
    v9 
    #endif
#else
    let v10 : std_string_String = null |> unbox<std_string_String>
    v10 
    #endif
    |> fun x -> _v1 <- Some x
    let v11 : std_string_String = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    v11
and method193 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "version"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method76(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure132 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let v330 : std_string_String = v2 ()
    let v331 : string = ""
    let v332 : Mut4 = {l0 = v331} : Mut4
    method193(v332, v330)
    let v333 : string = v332.l0
    let v334 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v333}"
    let v335 : char list = []
    let v336 : (char list -> (char [])) = List.toArray
    let v337 : (char []) = v336 v335
    let v338 : string = v334.TrimStart v337 
    let v339 : char list = []
    let v340 : char list = '/' :: v339 
    let v341 : char list = ' ' :: v340 
    let v342 : (char list -> (char [])) = List.toArray
    let v343 : (char []) = v342 v341
    let v344 : string = v338.TrimEnd v343 
    v344
and method192 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) : unit =
    let v3 : (unit -> string) = closure132(v0, v1, v2)
    method14(v0, v3)
and closure133 () () : string =
    let v0 : string = $"spiral_builder.process_typescript"
    v0
and closure134 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and closure135 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure136 (v0 : string) () : string =
    v0
and method195 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = "{ "
    method11(v0, v2)
    method12(v0)
    let v3 : string = "new_code_path"
    method11(v0, v3)
    let v4 : string = " = "
    method11(v0, v4)
    method11(v0, v1)
    let v5 : string = " }"
    method11(v0, v5)
and closure137 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let v330 : string = v2 ()
    let v331 : string = ""
    let v332 : Mut4 = {l0 = v331} : Mut4
    method195(v332, v330)
    let v333 : string = v332.l0
    let v334 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v333}"
    let v335 : char list = []
    let v336 : (char list -> (char [])) = List.toArray
    let v337 : (char []) = v336 v335
    let v338 : string = v334.TrimStart v337 
    let v339 : char list = []
    let v340 : char list = '/' :: v339 
    let v341 : char list = ' ' :: v340 
    let v342 : (char list -> (char [])) = List.toArray
    let v343 : (char []) = v342 v341
    let v344 : string = v338.TrimEnd v343 
    v344
and method194 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) : unit =
    let v3 : (unit -> string) = closure137(v0, v1, v2)
    method14(v0, v3)
and method196 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method196(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method197 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method197(v4, v1)
        let v6 : struct (string * string) list = struct (v2, v3) :: v5 
        v6
    | UH5_0 -> (* Nil *)
        v1
and closure138 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : ((string []) -> string seq) = Seq.ofArray
    let v4 : string seq = v3 v2
    let v5 : (string -> (string seq -> string)) = String.concat
    let v6 : (string seq -> string) = v5 v1
    v6 v4
and closure140 () () : string =
    let v0 : string = "spiral_builder.process_typescript / Exception"
    v0
and closure141 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v0, v2, v1)
and method199 (v0 : Mut4, v1 : exn, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method11(v0, v5)
    method12(v0)
    let v6 : string = "ex"
    method11(v0, v6)
    let v7 : string = " = "
    method11(v0, v7)
    method107(v0, v1)
    let v8 : string = "; "
    method11(v0, v8)
    let v9 : string = "new_code_path"
    method11(v0, v9)
    method11(v0, v7)
    method11(v0, v2)
    method11(v0, v8)
    let v10 : string = "external_command"
    method11(v0, v10)
    method11(v0, v7)
    method11(v0, v3)
    method11(v0, v8)
    let v11 : string = "run_result"
    method11(v0, v11)
    method11(v0, v7)
    method11(v0, v4)
    let v12 : string = " }"
    method11(v0, v12)
and closure142 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : exn, v331 : string, v332 : string, v333 : string) = v2 ()
    let v334 : string = ""
    let v335 : Mut4 = {l0 = v334} : Mut4
    method199(v335, v330, v331, v332, v333)
    let v336 : string = v335.l0
    let v337 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v336}"
    let v338 : char list = []
    let v339 : (char list -> (char [])) = List.toArray
    let v340 : (char []) = v339 v338
    let v341 : string = v337.TrimStart v340 
    let v342 : char list = []
    let v343 : char list = '/' :: v342 
    let v344 : char list = ' ' :: v343 
    let v345 : (char list -> (char [])) = List.toArray
    let v346 : (char []) = v345 v344
    let v347 : string = v341.TrimEnd v346 
    v347
and method198 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) : unit =
    let v3 : (unit -> string) = closure142(v0, v1, v2)
    method14(v0, v3)
and closure139 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure140()
    let v6 : (unit -> struct (exn * string * string * string)) = closure141(v0, v1, v2, v3)
    method198(v4, v5, v6)
    US3_1
and closure143 () () : string =
    let v0 : string = "spiral_builder.process_typescript / error"
    v0
and closure144 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and closure145 () () : string =
    let v0 : string = $"spiral_builder.process_python"
    v0
and closure146 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and closure147 () () : string =
    let v0 : string = "spiral_builder.process_python"
    v0
and closure148 (v0 : string) () : string =
    v0
and closure149 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : ((string []) -> string seq) = Seq.ofArray
    let v4 : string seq = v3 v2
    let v5 : (string -> (string seq -> string)) = String.concat
    let v6 : (string seq -> string) = v5 v1
    v6 v4
and closure151 () () : string =
    let v0 : string = "spiral_builder.process_python / Exception"
    v0
and closure152 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v1, v0, v2)
and closure150 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure151()
    let v6 : (unit -> struct (exn * string * string * string)) = closure152(v0, v1, v2, v3)
    method105(v4, v5, v6)
    US3_1
and closure153 () () : string =
    let v0 : string = "spiral_builder.process_python / error"
    v0
and closure154 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and closure155 () () : string =
    let v0 : string = "spiral_builder.run / invalid subcommand"
    v0
and closure156 (v0 : clap_ArgMatches, v1 : std_string_String) () : struct (std_string_String * clap_ArgMatches) =
    struct (v1, v0)
and method202 (v0 : Mut4, v1 : clap_ArgMatches) : unit =
    let v2 : string = $"%A{v1}"
    method11(v0, v2)
and method201 (v0 : Mut4, v1 : std_string_String, v2 : clap_ArgMatches) : unit =
    let v3 : string = "{ "
    method11(v0, v3)
    method12(v0)
    let v4 : string = "subcommand"
    method11(v0, v4)
    let v5 : string = " = "
    method11(v0, v5)
    method76(v0, v1)
    let v6 : string = "; "
    method11(v0, v6)
    let v7 : string = "arg_matches"
    method11(v0, v7)
    method11(v0, v5)
    method202(v0, v2)
    let v8 : string = " }"
    method11(v0, v8)
and closure157 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (std_string_String * clap_ArgMatches))) () : string =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v5 : Mut0, v6 : Mut1, v7 : Mut2, v8 : Mut3, v9 : int64 option) = State.trace_state.Value
    let v10 : bool = true
    let mutable _v10 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : US2 option = None
    let _v11 = ref v11 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v12 : int64 = x
    let v13 : US2 = US2_0(v12)
    v13 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v11.Value <- x
    let v14 : US2 option = _v11.Value 
    let v15 : US2 = US2_1
    let v16 : US2 = v14 |> Option.defaultValue v15 
    let v35 : System.DateTime =
        match v16 with
        | US2_1 -> (* None *)
            let v33 : System.DateTime = System.DateTime.Now
            v33
        | US2_0(v17) -> (* Some *)
            let v18 : System.DateTime = System.DateTime.Now
            let v19 : (System.DateTime -> int64) = _.Ticks
            let v20 : int64 = v19 v18
            let v21 : int64 = v20 - v17
            let v22 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v23 : System.TimeSpan = v22 v21
            let v24 : (System.TimeSpan -> int32) = _.Hours
            let v25 : int32 = v24 v23
            let v26 : (System.TimeSpan -> int32) = _.Minutes
            let v27 : int32 = v26 v23
            let v28 : (System.TimeSpan -> int32) = _.Seconds
            let v29 : int32 = v28 v23
            let v30 : (System.TimeSpan -> int32) = _.Milliseconds
            let v31 : int32 = v30 v23
            let v32 : System.DateTime = System.DateTime (1, 1, 1, v25, v27, v29, v31)
            v32
    let v36 : string = method6()
    let v37 : (string -> string) = v35.ToString
    let v38 : string = v37 v36
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : US2 option = None
    let _v39 = ref v39 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v40 : int64 = x
    let v41 : US2 = US2_0(v40)
    v41 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v39.Value <- x
    let v42 : US2 option = _v39.Value 
    let v43 : US2 = US2_1
    let v44 : US2 = v42 |> Option.defaultValue v43 
    let v63 : System.DateTime =
        match v44 with
        | US2_1 -> (* None *)
            let v61 : System.DateTime = System.DateTime.Now
            v61
        | US2_0(v45) -> (* Some *)
            let v46 : System.DateTime = System.DateTime.Now
            let v47 : (System.DateTime -> int64) = _.Ticks
            let v48 : int64 = v47 v46
            let v49 : int64 = v48 - v45
            let v50 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v51 : System.TimeSpan = v50 v49
            let v52 : (System.TimeSpan -> int32) = _.Hours
            let v53 : int32 = v52 v51
            let v54 : (System.TimeSpan -> int32) = _.Minutes
            let v55 : int32 = v54 v51
            let v56 : (System.TimeSpan -> int32) = _.Seconds
            let v57 : int32 = v56 v51
            let v58 : (System.TimeSpan -> int32) = _.Milliseconds
            let v59 : int32 = v58 v51
            let v60 : System.DateTime = System.DateTime (1, 1, 1, v53, v55, v57, v59)
            v60
    let v64 : string = method6()
    let v65 : (string -> string) = v63.ToString
    let v66 : string = v65 v64
    v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = method7()
    v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : US2 option = None
    let _v68 = ref v68 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v69 : int64 = x
    let v70 : US2 = US2_0(v69)
    v70 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v68.Value <- x
    let v71 : US2 option = _v68.Value 
    let v72 : US2 = US2_1
    let v73 : US2 = v71 |> Option.defaultValue v72 
    let v92 : System.DateTime =
        match v73 with
        | US2_1 -> (* None *)
            let v90 : System.DateTime = System.DateTime.Now
            v90
        | US2_0(v74) -> (* Some *)
            let v75 : System.DateTime = System.DateTime.Now
            let v76 : (System.DateTime -> int64) = _.Ticks
            let v77 : int64 = v76 v75
            let v78 : int64 = v77 - v74
            let v79 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v80 : System.TimeSpan = v79 v78
            let v81 : (System.TimeSpan -> int32) = _.Hours
            let v82 : int32 = v81 v80
            let v83 : (System.TimeSpan -> int32) = _.Minutes
            let v84 : int32 = v83 v80
            let v85 : (System.TimeSpan -> int32) = _.Seconds
            let v86 : int32 = v85 v80
            let v87 : (System.TimeSpan -> int32) = _.Milliseconds
            let v88 : int32 = v87 v80
            let v89 : System.DateTime = System.DateTime (1, 1, 1, v82, v84, v86, v88)
            v89
    let v93 : string = method8()
    let v94 : (string -> string) = v92.ToString
    let v95 : string = v94 v93
    v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : US2 option = None
    let _v96 = ref v96 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v97 : int64 = x
    let v98 : US2 = US2_0(v97)
    v98 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v96.Value <- x
    let v99 : US2 option = _v96.Value 
    let v100 : US2 = US2_1
    let v101 : US2 = v99 |> Option.defaultValue v100 
    let v120 : System.DateTime =
        match v101 with
        | US2_1 -> (* None *)
            let v118 : System.DateTime = System.DateTime.Now
            v118
        | US2_0(v102) -> (* Some *)
            let v103 : System.DateTime = System.DateTime.Now
            let v104 : (System.DateTime -> int64) = _.Ticks
            let v105 : int64 = v104 v103
            let v106 : int64 = v105 - v102
            let v107 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v108 : System.TimeSpan = v107 v106
            let v109 : (System.TimeSpan -> int32) = _.Hours
            let v110 : int32 = v109 v108
            let v111 : (System.TimeSpan -> int32) = _.Minutes
            let v112 : int32 = v111 v108
            let v113 : (System.TimeSpan -> int32) = _.Seconds
            let v114 : int32 = v113 v108
            let v115 : (System.TimeSpan -> int32) = _.Milliseconds
            let v116 : int32 = v115 v108
            let v117 : System.DateTime = System.DateTime (1, 1, 1, v110, v112, v114, v116)
            v117
    let v121 : string = method8()
    let v122 : (string -> string) = v120.ToString
    let v123 : string = v122 v121
    v123 
    #endif
#else
    let v124 : US2 option = None
    let _v124 = ref v124 
    match v9 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v125 : int64 = x
    let v126 : US2 = US2_0(v125)
    v126 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v124.Value <- x
    let v127 : US2 option = _v124.Value 
    let v128 : US2 = US2_1
    let v129 : US2 = v127 |> Option.defaultValue v128 
    let v148 : System.DateTime =
        match v129 with
        | US2_1 -> (* None *)
            let v146 : System.DateTime = System.DateTime.Now
            v146
        | US2_0(v130) -> (* Some *)
            let v131 : System.DateTime = System.DateTime.Now
            let v132 : (System.DateTime -> int64) = _.Ticks
            let v133 : int64 = v132 v131
            let v134 : int64 = v133 - v130
            let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v136 : System.TimeSpan = v135 v134
            let v137 : (System.TimeSpan -> int32) = _.Hours
            let v138 : int32 = v137 v136
            let v139 : (System.TimeSpan -> int32) = _.Minutes
            let v140 : int32 = v139 v136
            let v141 : (System.TimeSpan -> int32) = _.Seconds
            let v142 : int32 = v141 v136
            let v143 : (System.TimeSpan -> int32) = _.Milliseconds
            let v144 : int32 = v143 v136
            let v145 : System.DateTime = System.DateTime (1, 1, 1, v138, v140, v142, v144)
            v145
    let v149 : string = method8()
    let v150 : (string -> string) = v148.ToString
    let v151 : string = v150 v149
    v151 
    #endif
    |> fun x -> _v10 <- Some x
    let v152 : string = match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
    let v155 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v159 : US3 =
        if v155 then
            let v156 : string = "Verbose"
            US3_0(v156)
        else
            US3_1
    let v208 : US3 =
        match v159 with
        | US3_1 -> (* None *)
            let v164 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v168 : US3 =
                if v164 then
                    let v165 : string = "Debug"
                    US3_0(v165)
                else
                    US3_1
            match v168 with
            | US3_1 -> (* None *)
                let v173 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v177 : US3 =
                    if v173 then
                        let v174 : string = "Info"
                        US3_0(v174)
                    else
                        US3_1
                match v177 with
                | US3_1 -> (* None *)
                    let v182 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v186 : US3 =
                        if v182 then
                            let v183 : string = "Warning"
                            US3_0(v183)
                        else
                            US3_1
                    match v186 with
                    | US3_1 -> (* None *)
                        let v191 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v195 : US3 =
                            if v191 then
                                let v192 : string = "Critical"
                                US3_0(v192)
                            else
                                US3_1
                        match v195 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v196) -> (* Some *)
                            US3_0(v196)
                    | US3_0(v187) -> (* Some *)
                        US3_0(v187)
                | US3_0(v178) -> (* Some *)
                    US3_0(v178)
            | US3_0(v169) -> (* Some *)
                US3_0(v169)
        | US3_0(v160) -> (* Some *)
            US3_0(v160)
    let v212 : string =
        match v208 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v209) -> (* Some *)
            v209
    let v213 : (unit -> string) = v212.ToLower
    let v214 : string = v213 ()
    let v215 : string = v214.PadLeft (7, ' ')
    let v216 : bool = true
    let mutable _v216 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v225 : string = "inline_colorization::color_bright_red"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v225 
            v226
        | US0_1 -> (* Debug *)
            let v219 : string = "inline_colorization::color_bright_blue"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v219 
            v220
        | US0_2 -> (* Info *)
            let v221 : string = "inline_colorization::color_bright_green"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v221 
            v222
        | US0_0 -> (* Verbose *)
            let v217 : string = "inline_colorization::color_bright_black"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v217 
            v218
        | US0_3 -> (* Warning *)
            let v223 : string = "inline_colorization::color_yellow"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v223 
            v224
    let v232 : string = "&*$0"
    let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v232 
    let v234 : string = "inline_colorization::color_reset"
    let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "\"{v231}{v233}{v235}\""
    let v237 : string = @$"format!(" + v236 + ")"
    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "fable_library_rust::String_::fromString($0)"
    let v240 : string = Fable.Core.RustInterop.emitRustExpr v238 v239 
    v240 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v255 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v249 : string = "inline_colorization::color_bright_red"
            let v250 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v249 
            v250
        | US0_1 -> (* Debug *)
            let v243 : string = "inline_colorization::color_bright_blue"
            let v244 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US0_2 -> (* Info *)
            let v245 : string = "inline_colorization::color_bright_green"
            let v246 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US0_0 -> (* Verbose *)
            let v241 : string = "inline_colorization::color_bright_black"
            let v242 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US0_3 -> (* Warning *)
            let v247 : string = "inline_colorization::color_yellow"
            let v248 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v247 
            v248
    let v256 : string = "&*$0"
    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v256 
    let v258 : string = "inline_colorization::color_reset"
    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v258 
    let v260 : string = "\"{v255}{v257}{v259}\""
    let v261 : string = @$"format!(" + v260 + ")"
    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
    let v263 : string = "fable_library_rust::String_::fromString($0)"
    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
    v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v279 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v273 : string = "inline_colorization::color_bright_red"
            let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v273 
            v274
        | US0_1 -> (* Debug *)
            let v267 : string = "inline_colorization::color_bright_blue"
            let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v267 
            v268
        | US0_2 -> (* Info *)
            let v269 : string = "inline_colorization::color_bright_green"
            let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v269 
            v270
        | US0_0 -> (* Verbose *)
            let v265 : string = "inline_colorization::color_bright_black"
            let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v265 
            v266
        | US0_3 -> (* Warning *)
            let v271 : string = "inline_colorization::color_yellow"
            let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v271 
            v272
    let v280 : string = "&*$0"
    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v280 
    let v282 : string = "inline_colorization::color_reset"
    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v282 
    let v284 : string = "\"{v279}{v281}{v283}\""
    let v285 : string = @$"format!(" + v284 + ")"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "fable_library_rust::String_::fromString($0)"
    let v288 : string = Fable.Core.RustInterop.emitRustExpr v286 v287 
    v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v298 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v293 : string = "\u001b[91m"
            v293
        | US0_1 -> (* Debug *)
            let v290 : string = "\u001b[94m"
            v290
        | US0_2 -> (* Info *)
            let v291 : string = "\u001b[92m"
            v291
        | US0_0 -> (* Verbose *)
            let v289 : string = "\u001b[90m"
            v289
        | US0_3 -> (* Warning *)
            let v292 : string = "\u001b[93m"
            v292
    let v299 : string = method9()
    let v300 : string = v298 + v215 
    let v301 : string = v300 + v299 
    v301 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v306 : string = "\u001b[91m"
            v306
        | US0_1 -> (* Debug *)
            let v303 : string = "\u001b[94m"
            v303
        | US0_2 -> (* Info *)
            let v304 : string = "\u001b[92m"
            v304
        | US0_0 -> (* Verbose *)
            let v302 : string = "\u001b[90m"
            v302
        | US0_3 -> (* Warning *)
            let v305 : string = "\u001b[93m"
            v305
    let v312 : string = method9()
    let v313 : string = v311 + v215 
    let v314 : string = v313 + v312 
    v314 
    #endif
#else
    let v324 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v319 : string = "\u001b[91m"
            v319
        | US0_1 -> (* Debug *)
            let v316 : string = "\u001b[94m"
            v316
        | US0_2 -> (* Info *)
            let v317 : string = "\u001b[92m"
            v317
        | US0_0 -> (* Verbose *)
            let v315 : string = "\u001b[90m"
            v315
        | US0_3 -> (* Warning *)
            let v318 : string = "\u001b[93m"
            v318
    let v325 : string = method9()
    let v326 : string = v324 + v215 
    let v327 : string = v326 + v325 
    v327 
    #endif
    |> fun x -> _v216 <- Some x
    let v328 : string = match _v216 with Some x -> x | None -> failwith "base.run_target / _v216=None"
    let v329 : int64 = v5.l0
    let struct (v330 : std_string_String, v331 : clap_ArgMatches) = v2 ()
    let v332 : string = ""
    let v333 : Mut4 = {l0 = v332} : Mut4
    method201(v333, v330, v331)
    let v334 : string = v333.l0
    let v335 : string = $"{v152} {v328} #{v329} %s{v1 ()} / {v334}"
    let v336 : char list = []
    let v337 : (char list -> (char [])) = List.toArray
    let v338 : (char []) = v337 v336
    let v339 : string = v335.TrimStart v338 
    let v340 : char list = []
    let v341 : char list = '/' :: v340 
    let v342 : char list = ' ' :: v341 
    let v343 : (char list -> (char [])) = List.toArray
    let v344 : (char []) = v343 v342
    let v345 : string = v339.TrimEnd v344 
    v345
and method200 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (std_string_String * clap_ArgMatches))) : unit =
    let v3 : (unit -> string) = closure157(v0, v1, v2)
    method14(v0, v3)
and closure158 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and closure159 () (v0 : serde_json_Error) : string =
    let v1 : bool = true
    let mutable _v1 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v9 : std_string_String = null |> unbox<std_string_String>
    v9 
    #endif
#else
    let v10 : std_string_String = null |> unbox<std_string_String>
    v10 
    #endif
    |> fun x -> _v1 <- Some x
    let v11 : std_string_String = match _v1 with Some x -> x | None -> failwith "base.run_target / _v1=None"
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v11 v12 
    v13
and method203 () : (serde_json_Error -> string) =
    closure159()
and method204 (v0 : Result<string, string>) : Result<string, string> =
    v0
and method15 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "let __result = Box::pin(async move { //"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v4 : (Ref<Str> -> std_string_String) = closure7()
    let v5 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v4) v3 
    let v6 : US4 option = None
    let _v6 = ref v6 
    match v5 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v7 : std_string_String, v8 : clap_ArgMatches) = x
    let v9 : US4 = US4_0(v7, v8)
    v9 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v6.Value <- x
    let v10 : US4 option = _v6.Value 
    let v11 : US4 = US4_1
    let v12 : US4 = v10 |> Option.defaultValue v11 
    let v2354 : (struct (string * string) []) =
        match v12 with
        | US4_0(v13, v14) -> (* Some *)
            let v15 : string = "fable_library_rust::String_::fromString($0)"
            let v16 : string = Fable.Core.RustInterop.emitRustExpr v13 v15 
            let v18 : bool = v16 = "cuda"
            if v18 then
                let v19 : string = method16()
                let v20 : string = "&*$0"
                let v21 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19 v20 
                let v22 : string = "clap::ArgMatches::get_one(&$0, v21).cloned()"
                let v23 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v14 v22 
                let v24 : US5 option = None
                let _v24 = ref v24 
                match v23 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v25 : std_string_String = x
                let v26 : US5 = US5_0(v25)
                v26 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v24.Value <- x
                let v27 : US5 option = _v24.Value 
                let v28 : US5 = US5_1
                let v29 : US5 = v27 |> Option.defaultValue v28 
                let v33 : std_string_String =
                    match v29 with
                    | US5_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US5_0(v30) -> (* Some *)
                        v30
                let v34 : string = "fable_library_rust::String_::fromString($0)"
                let v35 : string = Fable.Core.RustInterop.emitRustExpr v33 v34 
                let v36 : string = method17()
                let v37 : string = "&*$0"
                let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v36 v37 
                let v39 : string = "clap::ArgMatches::get_one(&$0, v38).cloned()"
                let v40 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v14 v39 
                let v41 : US5 option = None
                let _v41 = ref v41 
                match v40 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v42 : std_string_String = x
                let v43 : US5 = US5_0(v42)
                v43 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v41.Value <- x
                let v44 : US5 option = _v41.Value 
                let v45 : US5 = US5_1
                let v46 : US5 = v44 |> Option.defaultValue v45 
                let v74 : US6 =
                    match v46 with
                    | US5_1 -> (* None *)
                        US6_1
                    | US5_0(v47) -> (* Some *)
                        let v48 : string = "fable_library_rust::String_::fromString($0)"
                        let v49 : string = Fable.Core.RustInterop.emitRustExpr v47 v48 
                        let v51 : bool = "Pip" = v49
                        let v55 : US7 =
                            if v51 then
                                let v52 : US8 = US8_0
                                US7_0(v52)
                            else
                                US7_1
                        let v70 : US7 =
                            match v55 with
                            | US7_1 -> (* None *)
                                let v59 : bool = "Poetry" = v49
                                let v63 : US7 =
                                    if v59 then
                                        let v60 : US8 = US8_1
                                        US7_0(v60)
                                    else
                                        US7_1
                                match v63 with
                                | US7_1 -> (* None *)
                                    US7_1
                                | US7_0(v64) -> (* Some *)
                                    US7_0(v64)
                            | US7_0(v56) -> (* Some *)
                                US7_0(v56)
                        US6_0(v70)
                let v81 : US7 =
                    match v74 with
                    | US6_0(v75) -> (* Some *)
                        match v75 with
                        | US7_0(v76) -> (* Some *)
                            US7_0(v76)
                        | _ ->
                            US7_1
                    | _ ->
                        US7_1
                let v85 : US8 =
                    match v81 with
                    | US7_1 -> (* None *)
                        US8_0
                    | US7_0(v82) -> (* Some *)
                        v82
                let v86 : string = method18()
                let v87 : string = "&*$0"
                let v88 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v86 v87 
                let v89 : string = "clap::ArgMatches::get_many(&$0, v88).map(|x| x.cloned().into_iter().collect())"
                let v90 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v14 v89 
                let v91 : US9 option = None
                let _v91 = ref v91 
                match v90 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v92 : Vec<std_string_String> = x
                let v93 : US9 = US9_0(v92)
                v93 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v91.Value <- x
                let v94 : US9 option = _v91.Value 
                let v95 : US9 = US9_1
                let v96 : US9 = v94 |> Option.defaultValue v95 
                let v97 : (std_string_String []) = [||]
                let v98 : string = "$0.to_vec()"
                let v99 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v97 v98 
                let v102 : Vec<std_string_String> =
                    match v96 with
                    | US9_1 -> (* None *)
                        v99
                    | US9_0(v100) -> (* Some *)
                        v100
                let v103 : bool = true
                let mutable _v103 : string option = None 
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v104 : bool = true
                let mutable _v104 : Vec<uint8> option = None 
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v105 : string = "std::fs::read(&*$0).unwrap()"
                let v106 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v35 v105 
                v106 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v107 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v107 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v108 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v108 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v110 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v110 
                #endif
#else
                let v111 : (uint8 []) = v35 |> System.IO.File.ReadAllBytes
                let v112 : string = "$0.to_vec()"
                let v113 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v111 v112 
                v113 
                #endif
                |> fun x -> _v104 <- Some x
                let v114 : Vec<uint8> = match _v104 with Some x -> x | None -> failwith "base.run_target / _v104=None"
                let v115 : Vec<uint8> = method19(v114)
                let v116 : string = "std::string::String::from_utf8($0)"
                let v117 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v115 v116 
                let v118 : string = "$0.unwrap()"
                let v119 : std_string_String = Fable.Core.RustInterop.emitRustExpr v117 v118 
                let v120 : string = "fable_library_rust::String_::fromString($0)"
                let v121 : string = Fable.Core.RustInterop.emitRustExpr v119 v120 
                v121 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v122 : string = null |> unbox<string>
                v122 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v123 : string = null |> unbox<string>
                v123 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v124 : string = null |> unbox<string>
                v124 
                #endif
#if FABLE_COMPILER_PYTHON
                let v125 : string = null |> unbox<string>
                v125 
                #endif
#else
                let v126 : string = v35 |> System.IO.File.ReadAllText
                v126 
                #endif
                |> fun x -> _v103 <- Some x
                let v127 : string = match _v103 with Some x -> x | None -> failwith "base.run_target / _v103=None"
                let v128 : string = __SOURCE_DIRECTORY__
                let v129 : string = "polyglot"
                let v130 : string = ".paket"
                let v131 : string = method20(v129, v130)
                let v132 : US12 = method23(v131, v128)
                let v141 : US3 =
                    match v132 with
                    | US12_1(v135) -> (* Error *)
                        let v136 : US0 = US0_3
                        let v137 : (unit -> string) = closure9()
                        let v138 : (unit -> string) = closure10(v135)
                        method28(v136, v137, v138)
                        US3_1
                    | US12_0(v133) -> (* Ok *)
                        US3_0(v133)
                let v157 : US3 =
                    match v141 with
                    | US3_1 -> (* None *)
                        let v144 : string = method30()
                        let v145 : string = method20(v129, v130)
                        let v146 : US12 = method23(v145, v144)
                        match v146 with
                        | US12_1(v149) -> (* Error *)
                            let v150 : US0 = US0_3
                            let v151 : (unit -> string) = closure9()
                            let v152 : (unit -> string) = closure10(v149)
                            method28(v150, v151, v152)
                            US3_1
                        | US12_0(v147) -> (* Ok *)
                            US3_0(v147)
                    | US3_0(v142) -> (* Some *)
                        US3_0(v142)
                let v161 : string =
                    match v157 with
                    | US3_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US3_0(v158) -> (* Some *)
                        v158
                let v162 : string = method20(v161, v129)
                let v163 : string = method30()
                let v164 : (unit -> string) = v163.ToLower
                let v165 : string = v164 ()
                let v166 : (unit -> string) = v162.ToLower
                let v167 : string = v166 ()
                let v168 : bool = v165.StartsWith v167 
                let v171 : US12 =
                    if v168 then
                        US12_1(v167)
                    else
                        US12_0(v167)
                let v177 : Result<string, string> =
                    match v171 with
                    | US12_1(v174) -> (* Error *)
                        let v175 : Result<string, string> = Error v174 
                        v175
                    | US12_0(v172) -> (* Ok *)
                        let v173 : Result<string, string> = Ok v172 
                        v173
                let v178 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                let v179 : bool = Fable.Core.RustInterop.emitRustExpr v177 v178 
                let v180 : string = "x"
                let v181 : string = Fable.Core.RustInterop.emitRustExpr () v180 
                let v182 : string = "true; $0 })"
                let v183 : bool = Fable.Core.RustInterop.emitRustExpr v181 v182 
                let v184 : string = "_result"
                let v185 : string = Fable.Core.RustInterop.emitRustExpr () v184 
                let v186 : string = method31(v35)
                let v192 : string =
                    match v85 with
                    | US8_0 -> (* Pip *)
                        let v187 : string = "requirements.txt"
                        method20(v186, v187)
                    | US8_1 -> (* Poetry *)
                        let v189 : string = "pyproject.toml"
                        method20(v186, v189)
                let v193 : string = "true; let _result : Vec<_> = v102.into_iter().map(|x| { //"
                let v194 : bool = Fable.Core.RustInterop.emitRustExpr () v193 
                let v195 : string = "x"
                let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v195 
                let v197 : string = "fable_library_rust::String_::fromString($0)"
                let v198 : string = Fable.Core.RustInterop.emitRustExpr v196 v197 
                let v199 : string = "="
                let v200 : bool = v198.Contains v199 
                let v209 : string =
                    if v200 then
                        v198
                    else
                        let v201 : string = "]"
                        let v202 : bool = v198.EndsWith v201 
                        if v202 then
                            let v203 : string = $"={{version='*',features=["
                            let v204 : string = "["
                            let v205 : string = v198.Replace (v204, v203)
                            let v206 : string = $"{v205}}}"
                            v206
                        else
                            let v207 : string = $"{v198}='*'"
                            v207
                let v210 : string = "true; $0 }).collect::<Vec<_>>()"
                let v211 : bool = Fable.Core.RustInterop.emitRustExpr v209 v210 
                let v212 : string = "_result"
                let v213 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v212 
                let v214 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v215 : (string []) = Fable.Core.RustInterop.emitRustExpr v213 v214 
                let v216 : string seq = seq { for i = 0 to v215.Length - 1 do yield v215.[i] }
                let v217 : (string -> (string seq -> string)) = String.concat
                let v218 : string = "\n"
                let v219 : (string seq -> string) = v217 v218
                let v220 : string = v219 v216
                let v222 : bool = v220 = ""
                let struct (v276 : int32, v277 : string) =
                    if v222 then
                        let v223 : string = ""
                        struct (0, v223)
                    else
                        let v262 : string =
                            match v85 with
                            | US8_0 -> (* Pip *)
                                v220
                            | US8_1 -> (* Poetry *)
                                let v224 : string = $"[tool.poetry]"
                                let v225 : string = $"name = \"test\""
                                let v226 : string = v224 + v218 
                                let v227 : string = v226 + v225 
                                let v228 : string = $"version = \"0.0.1\""
                                let v229 : string = v227 + v218 
                                let v230 : string = v229 + v228 
                                let v231 : string = $"description = \"\""
                                let v232 : string = v230 + v218 
                                let v233 : string = v232 + v231 
                                let v234 : string = $"authors = []"
                                let v235 : string = v233 + v218 
                                let v236 : string = v235 + v234 
                                let v237 : string = $""
                                let v238 : string = v236 + v218 
                                let v239 : string = v238 + v237 
                                let v240 : string = $"[tool.poetry.dependencies]"
                                let v241 : string = v239 + v218 
                                let v242 : string = v241 + v240 
                                let v243 : string = $"python=\"~3.12\""
                                let v244 : string = v242 + v218 
                                let v245 : string = v244 + v243 
                                let v246 : string = $"{v220}"
                                let v247 : string = v245 + v218 
                                let v248 : string = v247 + v246 
                                let v249 : string = $""
                                let v250 : string = v248 + v218 
                                let v251 : string = v250 + v249 
                                let v252 : string = $"[build-system]"
                                let v253 : string = v251 + v218 
                                let v254 : string = v253 + v252 
                                let v255 : string = $"requires = [\"poetry-core\"]"
                                let v256 : string = v254 + v218 
                                let v257 : string = v256 + v255 
                                let v258 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v259 : string = v257 + v218 
                                let v260 : string = v259 + v258 
                                v260
                        method32(v192, v262)
                        let v263 : System.Threading.CancellationToken option = None
                        let v264 : (struct (string * string) []) = [||]
                        let v265 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v266 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v267 : string option = None
                        let v271 : string =
                            match v85 with
                            | US8_0 -> (* Pip *)
                                let v268 : string = $"pip install -r requirements.txt"
                                v268
                            | US8_1 -> (* Poetry *)
                                let v269 : string = $"poetry install"
                                v269
                        let v272 : string option = Some v186 
                        let v273 : bool = true
                        method36(v271, v263, v264, v265, v266, v273, v272)
                let v278 : bool = v276 <> 0 
                let struct (v348 : US3, v349 : US3, v350 : US3) =
                    if v278 then
                        let v279 : US0 = US0_4
                        let v280 : (unit -> string) = closure56()
                        let v281 : (unit -> struct (US8 * int32 * string * string)) = closure57(v85, v35, v277, v276)
                        method102(v279, v280, v281)
                        let v282 : string = "py"
                        let v283 : US3 = US3_0(v282)
                        let v284 : US3 = US3_1
                        let v285 : US3 = US3_1
                        struct (v283, v284, v285)
                    else
                        let v289 : string =
                            match v85 with
                            | US8_0 -> (* Pip *)
                                let v286 : string = $"python \"{v35}\""
                                v286
                            | US8_1 -> (* Poetry *)
                                let v287 : string = $"poetry run python \"{v35}\""
                                v287
                        let v290 : string = "TRACE_LEVEL"
                        let v291 : string = "Verbose"
                        let v292 : (struct (string * string) []) = [|struct (v290, v291)|]
                        let v293 : System.Threading.CancellationToken option = None
                        let v294 : (struct (string * string) []) = [||]
                        let v295 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v296 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v297 : string option = None
                        let v298 : string option = Some v186 
                        let v299 : bool = true
                        let struct (v300 : int32, v301 : string) = method36(v289, v293, v292, v295, v296, v299, v298)
                        let v302 : int32 = v292.Length
                        let v303 : (string []) = Array.zeroCreate<string> (v302)
                        let v304 : Mut5 = {l0 = 0} : Mut5
                        while method39(v302, v304) do
                            let v306 : int32 = v304.l0
                            let struct (v307 : string, v308 : string) = v292.[int v306]
                            let v309 : string = $"$env:{v307}=''{v308}''"
                            v303.[int v306] <- v309
                            let v310 : int32 = v306 + 1
                            v304.l0 <- v310
                            ()
                        let v311 : ((string []) -> string seq) = Seq.ofArray
                        let v312 : string seq = v311 v303
                        let v313 : (string -> (string seq -> string)) = String.concat
                        let v314 : string = ";"
                        let v315 : (string seq -> string) = v313 v314
                        let v316 : string = v315 v312
                        let v317 : string = $"pwsh -c '{v316}; {v289}'"
                        let v318 : bool = v300 = 0
                        let v321 : bool =
                            if v318 then
                                true
                            else
                                let v319 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v320 : bool = v301.Contains v319 
                                v320
                        let struct (v345 : US3, v346 : US3, v347 : US3) =
                            if v321 then
                                let v322 : (string -> US3) = closure59()
                                let v323 : (unit -> string) = closure60(v301)
                                let v324 : (exn -> US3) = closure61(v35, v301, v317)
                                let v325 : US3 = US3_1
                                let result = ref v325
                                try
                                    result.Value <- v323 () |> v322 
                                with ex ->
                                    result.Value <- v324 ex 
                                let v326 : US3 = result.Value
                                let v331 : string option =
                                    match v326 with
                                    | US3_1 -> (* None *)
                                        let v329 : string option = None
                                        v329
                                    | US3_0(v327) -> (* Some *)
                                        let v328 : string option = Some v327 
                                        v328
                                let v332 : string = "$0.unwrap()"
                                let v333 : string = Fable.Core.RustInterop.emitRustExpr v331 v332 
                                let v334 : string = "py"
                                let v335 : US3 = US3_0(v334)
                                let v336 : US3 = US3_0(v127)
                                let v337 : US3 = US3_0(v333)
                                struct (v335, v336, v337)
                            else
                                let v338 : US0 = US0_4
                                let v339 : (unit -> string) = closure65()
                                let v340 : (unit -> struct (int32 * string * string * string)) = closure66(v35, v301, v300, v317)
                                method108(v338, v339, v340)
                                let v341 : string = "py"
                                let v342 : US3 = US3_0(v341)
                                let v343 : US3 = US3_1
                                let v344 : US3 = US3_1
                                struct (v342, v343, v344)
                        struct (v345, v346, v347)
                let v354 : string =
                    match v348 with
                    | US3_1 -> (* None *)
                        let v352 : string = ""
                        v352
                    | US3_0(v351) -> (* Some *)
                        v351
                let v355 : string = "extension"
                let v359 : string =
                    match v349 with
                    | US3_1 -> (* None *)
                        let v357 : string = ""
                        v357
                    | US3_0(v356) -> (* Some *)
                        v356
                let v360 : string = "code"
                let v364 : string =
                    match v350 with
                    | US3_1 -> (* None *)
                        let v362 : string = ""
                        v362
                    | US3_0(v361) -> (* Some *)
                        v361
                let v365 : string = "output"
                let v366 : (struct (string * string) []) = [|struct (v355, v354); struct (v360, v359); struct (v365, v364)|]
                let v367 : string = "$0.to_vec()"
                let v368 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v366 v367 
                let v369 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v370 : (struct (string * string) -> (std_string_String * std_string_String)) = closure68()
                let v371 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v368, v370) v369 
                let v372 : string = "std::collections::BTreeMap::from_iter(v371.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v373 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v372 
                let v374 : string = "serde_json::to_string(&v373)"
                let v375 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v374 
                let v376 : string = "$0.unwrap()"
                let v377 : std_string_String = Fable.Core.RustInterop.emitRustExpr v375 v376 
                let v378 : string = "fable_library_rust::String_::fromString($0)"
                let v379 : string = Fable.Core.RustInterop.emitRustExpr v377 v378 
                let v380 : string = "command_result"
                [|struct (v380, v379)|]
            else
                let v382 : string = "fable_library_rust::String_::fromString($0)"
                let v383 : string = Fable.Core.RustInterop.emitRustExpr v13 v382 
                let v385 : bool = v383 = "fable"
                if v385 then
                    let v386 : string = method110()
                    let v387 : string = "&*$0"
                    let v388 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v386 v387 
                    let v389 : string = "clap::ArgMatches::get_one(&$0, v388).cloned()"
                    let v390 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v14 v389 
                    let v391 : US5 option = None
                    let _v391 = ref v391 
                    match v390 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v392 : std_string_String = x
                    let v393 : US5 = US5_0(v392)
                    v393 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v391.Value <- x
                    let v394 : US5 option = _v391.Value 
                    let v395 : US5 = US5_1
                    let v396 : US5 = v394 |> Option.defaultValue v395 
                    let v400 : std_string_String =
                        match v396 with
                        | US5_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US5_0(v397) -> (* Some *)
                            v397
                    let v401 : string = "fable_library_rust::String_::fromString($0)"
                    let v402 : string = Fable.Core.RustInterop.emitRustExpr v400 v401 
                    let v403 : string = method111()
                    let v404 : string = "&*$0"
                    let v405 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v403 v404 
                    let v406 : string = "clap::ArgMatches::get_one(&$0, v405).cloned()"
                    let v407 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v14 v406 
                    let v408 : US5 option = None
                    let _v408 = ref v408 
                    match v407 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v409 : std_string_String = x
                    let v410 : US5 = US5_0(v409)
                    v410 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v408.Value <- x
                    let v411 : US5 option = _v408.Value 
                    let v412 : US5 = US5_1
                    let v413 : US5 = v411 |> Option.defaultValue v412 
                    let v420 : US3 =
                        match v413 with
                        | US5_1 -> (* None *)
                            US3_1
                        | US5_0(v414) -> (* Some *)
                            let v415 : string = "fable_library_rust::String_::fromString($0)"
                            let v416 : string = Fable.Core.RustInterop.emitRustExpr v414 v415 
                            US3_0(v416)
                    let v454 : string =
                        match v420 with
                        | US3_1 -> (* None *)
                            let v452 : string = "{}"
                            v452
                        | US3_0(v421) -> (* Some *)
                            let v422 : clap_Command = method0()
                            let v423 : string = $"_ {v421} --fs-path \"{v402}\""
                            let v424 : US21 = method50(v423)
                            let v430 : (string []) =
                                match v424 with
                                | US21_1(v426) -> (* Error *)
                                    let v427 : string = $"resultm.get / Result value was Error: {v426}"
                                    failwith<(string [])> v427
                                | US21_0(v425) -> (* Ok *)
                                    v425
                            let v431 : string = "$0.to_vec()"
                            let v432 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v430 v431 
                            let v433 : string = "true; let _result : Vec<_> = v432.into_iter().map(|x| { //"
                            let v434 : bool = Fable.Core.RustInterop.emitRustExpr () v433 
                            let v435 : string = "x"
                            let v436 : string = Fable.Core.RustInterop.emitRustExpr () v435 
                            let v437 : string = "&*$0"
                            let v438 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v436 v437 
                            let v439 : string = "String::from($0)"
                            let v440 : std_string_String = Fable.Core.RustInterop.emitRustExpr v438 v439 
                            let v441 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v442 : bool = Fable.Core.RustInterop.emitRustExpr v440 v441 
                            let v443 : string = "_result"
                            let v444 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v443 
                            let v445 : string = "clap::Command::get_matches_from($0, v444)"
                            let v446 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v422 v445 
                            let v447 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method15(v0, v446)
                            let v448 : string = "v447.await"
                            let v449 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v448 
                            let v450 : string = "$0.unwrap()"
                            let v451 : string = Fable.Core.RustInterop.emitRustExpr v449 v450 
                            v451
                    let v455 : string = "command_result"
                    [|struct (v455, v454)|]
                else
                    let v457 : string = "fable_library_rust::String_::fromString($0)"
                    let v458 : string = Fable.Core.RustInterop.emitRustExpr v13 v457 
                    let v460 : bool = v458 = "dib"
                    if v460 then
                        let v461 : string = method112()
                        let v462 : string = "&*$0"
                        let v463 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v461 v462 
                        let v464 : string = "clap::ArgMatches::get_one(&$0, v463).cloned()"
                        let v465 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v14 v464 
                        let v466 : (std_string_String -> string) = closure69()
                        let v467 : string option = v465 |> Option.map v466 
                        let v468 : string = "$0.unwrap()"
                        let v469 : string = Fable.Core.RustInterop.emitRustExpr v467 v468 
                        let v470 : string = method124()
                        let v471 : string = "&*$0"
                        let v472 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v470 v471 
                        let v473 : string = "clap::ArgMatches::get_one(&$0, v472).cloned()"
                        let v474 : uint8 option = Fable.Core.RustInterop.emitRustExpr v14 v473 
                        let v475 : uint8 = v474 |> Option.defaultValue 1uy 
                        let v476 : string = method125()
                        let v477 : string = "&*$0"
                        let v478 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v476 v477 
                        let v479 : string = "clap::ArgMatches::get_one(&$0, v478).cloned()"
                        let v480 : string option = Fable.Core.RustInterop.emitRustExpr v14 v479 
                        let v481 : uint8 = 1uy
                        let struct (v482 : int32, v483 : string) = method126(v480, v475, v469, v481)
                        let v484 : bool = v482 <> 0 
                        let struct (v584 : int32, v585 : string) =
                            if v484 then
                                struct (v482, v483)
                            else
                                let v485 : System.Threading.CancellationToken option = None
                                let v486 : (struct (string * string) []) = [||]
                                let v487 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v488 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v489 : string option = None
                                let v490 : string = $"jupyter nbconvert \"{v469}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v491 : bool = true
                                let struct (v492 : int32, v493 : string) = method36(v490, v485, v486, v487, v488, v491, v489)
                                let v494 : US0 = US0_1
                                let v495 : (unit -> string) = closure73()
                                let v496 : (unit -> struct (int32 * int32)) = closure74(v493, v492)
                                method129(v494, v495, v496)
                                let v497 : bool = v492 <> 0 
                                if v497 then
                                    let v498 : string = $"repl_result: {v483}

jupyter_result: {v493}"
                                    struct (v492, v498)
                                else
                                    let v499 : string = "'"
                                    let v500 : string = "''"
                                    let v501 : string = v469.Replace (v499, v500)
                                    let v502 : System.Threading.CancellationToken option = None
                                    let v503 : (struct (string * string) []) = [||]
                                    let v504 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v505 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v506 : string option = None
                                    let v507 : string = $"pwsh -c \"$counter = 1; $path = '{v501}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v508 : bool = true
                                    let struct (v509 : int32, v510 : string) = method36(v507, v502, v503, v504, v505, v508, v506)
                                    let v511 : US0 = US0_1
                                    let v512 : (unit -> string) = closure76()
                                    let v513 : (unit -> struct (int32 * int32)) = closure77(v510, v509)
                                    method131(v511, v512, v513)
                                    let v514 : string = $"{v469}.html"
                                    let v515 : bool = true
                                    let mutable _v515 : string option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v516 : bool = true
                                    let mutable _v516 : Vec<uint8> option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v517 : string = "std::fs::read(&*$0).unwrap()"
                                    let v518 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v514 v517 
                                    v518 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v519 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v519 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v520 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v520 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v521 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v521 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v522 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v522 
                                    #endif
#else
                                    let v523 : (uint8 []) = v514 |> System.IO.File.ReadAllBytes
                                    let v524 : string = "$0.to_vec()"
                                    let v525 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v523 v524 
                                    v525 
                                    #endif
                                    |> fun x -> _v516 <- Some x
                                    let v526 : Vec<uint8> = match _v516 with Some x -> x | None -> failwith "base.run_target / _v516=None"
                                    let v527 : Vec<uint8> = method19(v526)
                                    let v528 : string = "std::string::String::from_utf8($0)"
                                    let v529 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v527 v528 
                                    let v530 : string = "$0.unwrap()"
                                    let v531 : std_string_String = Fable.Core.RustInterop.emitRustExpr v529 v530 
                                    let v532 : string = "fable_library_rust::String_::fromString($0)"
                                    let v533 : string = Fable.Core.RustInterop.emitRustExpr v531 v532 
                                    v533 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v534 : string = null |> unbox<string>
                                    v534 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v535 : string = null |> unbox<string>
                                    v535 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v536 : string = null |> unbox<string>
                                    v536 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v537 : string = null |> unbox<string>
                                    v537 
                                    #endif
#else
                                    let v538 : string = v514 |> System.IO.File.ReadAllText
                                    v538 
                                    #endif
                                    |> fun x -> _v515 <- Some x
                                    let v539 : string = match _v515 with Some x -> x | None -> failwith "base.run_target / _v515=None"
                                    let v540 : string = "\r\n"
                                    let v541 : string = "\n"
                                    let v542 : string = v539.Replace (v540, v541)
                                    let v543 : string = $"{v469}.html"
                                    let v544 : bool = true
                                    let mutable _v544 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v545 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v543, v542) v545 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v546 : string = method35(v542)
                                    System.IO.File.WriteAllText (v543, v546)
                                    () 
                                    #endif
                                    |> fun x -> _v544 <- Some x
                                    match _v544 with Some x -> x | None -> failwith "base.run_target / _v544=None"
                                    let v547 : string = $"{v469}.ipynb"
                                    let v548 : bool = true
                                    let mutable _v548 : string option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v549 : bool = true
                                    let mutable _v549 : Vec<uint8> option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v550 : string = "std::fs::read(&*$0).unwrap()"
                                    let v551 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v547 v550 
                                    v551 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v552 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v552 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v553 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v553 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v554 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v554 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v555 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v555 
                                    #endif
#else
                                    let v556 : (uint8 []) = v547 |> System.IO.File.ReadAllBytes
                                    let v557 : string = "$0.to_vec()"
                                    let v558 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v556 v557 
                                    v558 
                                    #endif
                                    |> fun x -> _v549 <- Some x
                                    let v559 : Vec<uint8> = match _v549 with Some x -> x | None -> failwith "base.run_target / _v549=None"
                                    let v560 : Vec<uint8> = method19(v559)
                                    let v561 : string = "std::string::String::from_utf8($0)"
                                    let v562 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v560 v561 
                                    let v563 : string = "$0.unwrap()"
                                    let v564 : std_string_String = Fable.Core.RustInterop.emitRustExpr v562 v563 
                                    let v565 : string = "fable_library_rust::String_::fromString($0)"
                                    let v566 : string = Fable.Core.RustInterop.emitRustExpr v564 v565 
                                    v566 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v567 : string = null |> unbox<string>
                                    v567 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v568 : string = null |> unbox<string>
                                    v568 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v569 : string = null |> unbox<string>
                                    v569 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v570 : string = null |> unbox<string>
                                    v570 
                                    #endif
#else
                                    let v571 : string = v547 |> System.IO.File.ReadAllText
                                    v571 
                                    #endif
                                    |> fun x -> _v548 <- Some x
                                    let v572 : string = match _v548 with Some x -> x | None -> failwith "base.run_target / _v548=None"
                                    let v573 : string = v572.Replace (v540, v541)
                                    let v574 : string = "\\r\\n"
                                    let v575 : string = "\\n"
                                    let v576 : string = v573.Replace (v574, v575)
                                    let v577 : string = $"{v469}.ipynb"
                                    let v578 : bool = true
                                    let mutable _v578 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v579 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v577, v576) v579 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v580 : string = method35(v576)
                                    System.IO.File.WriteAllText (v577, v580)
                                    () 
                                    #endif
                                    |> fun x -> _v578 <- Some x
                                    match _v578 with Some x -> x | None -> failwith "base.run_target / _v578=None"
                                    let v581 : string = $"repl_result: {v483}

jupyter_result: {v493}

pwsh_replace_html_result: {v510}"
                                    struct (v509, v581)
                        let v586 : US0 = US0_1
                        let v587 : (unit -> string) = closure79()
                        let v588 : (unit -> struct (int32 * int32)) = closure80(v585, v584)
                        method133(v586, v587, v588)
                        let v589 : bool = v584 <> 0 
                        if v589 then
                            let v590 : string = $"spiral_builder.run / dib / exit_code: {v584} / result: {v585}"
                            failwith<unit> v590
                        let v591 : string = "stdio"
                        [|struct (v591, v585)|]
                    else
                        let v593 : string = "fable_library_rust::String_::fromString($0)"
                        let v594 : string = Fable.Core.RustInterop.emitRustExpr v13 v593 
                        let v596 : bool = v594 = "rust"
                        let struct (v2327 : US3, v2328 : US3, v2329 : US3) =
                            if v596 then
                                let v597 : string = method110()
                                let v598 : string = "&*$0"
                                let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v597 v598 
                                let v600 : string = "clap::ArgMatches::get_one(&$0, v599).cloned()"
                                let v601 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v14 v600 
                                let v602 : US5 option = None
                                let _v602 = ref v602 
                                match v601 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v603 : std_string_String = x
                                let v604 : US5 = US5_0(v603)
                                v604 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v602.Value <- x
                                let v605 : US5 option = _v602.Value 
                                let v606 : US5 = US5_1
                                let v607 : US5 = v605 |> Option.defaultValue v606 
                                let v611 : std_string_String =
                                    match v607 with
                                    | US5_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US5_0(v608) -> (* Some *)
                                        v608
                                let v612 : string = "fable_library_rust::String_::fromString($0)"
                                let v613 : string = Fable.Core.RustInterop.emitRustExpr v611 v612 
                                let v614 : string = method18()
                                let v615 : string = "&*$0"
                                let v616 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v614 v615 
                                let v617 : string = "clap::ArgMatches::get_many(&$0, v616).map(|x| x.cloned().into_iter().collect())"
                                let v618 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v14 v617 
                                let v619 : US9 option = None
                                let _v619 = ref v619 
                                match v618 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v620 : Vec<std_string_String> = x
                                let v621 : US9 = US9_0(v620)
                                v621 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v619.Value <- x
                                let v622 : US9 option = _v619.Value 
                                let v623 : US9 = US9_1
                                let v624 : US9 = v622 |> Option.defaultValue v623 
                                let v625 : (std_string_String []) = [||]
                                let v626 : string = "$0.to_vec()"
                                let v627 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v625 v626 
                                let v630 : Vec<std_string_String> =
                                    match v624 with
                                    | US9_1 -> (* None *)
                                        v627
                                    | US9_0(v628) -> (* Some *)
                                        v628
                                let v632 : bool =
                                    match v0 with
                                    | US0_0 -> (* Verbose *)
                                        true
                                    | _ ->
                                        false
                                let v633 : bool = true
                                let mutable _v633 : string option = None 
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v634 : bool = true
                                let mutable _v634 : Vec<uint8> option = None 
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v635 : string = "std::fs::read(&*$0).unwrap()"
                                let v636 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v613 v635 
                                v636 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v637 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v637 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v638 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v638 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v639 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v639 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v640 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v640 
                                #endif
#else
                                let v641 : (uint8 []) = v613 |> System.IO.File.ReadAllBytes
                                let v642 : string = "$0.to_vec()"
                                let v643 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v641 v642 
                                v643 
                                #endif
                                |> fun x -> _v634 <- Some x
                                let v644 : Vec<uint8> = match _v634 with Some x -> x | None -> failwith "base.run_target / _v634=None"
                                let v645 : Vec<uint8> = method19(v644)
                                let v646 : string = "std::string::String::from_utf8($0)"
                                let v647 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v645 v646 
                                let v648 : string = "$0.unwrap()"
                                let v649 : std_string_String = Fable.Core.RustInterop.emitRustExpr v647 v648 
                                let v650 : string = "fable_library_rust::String_::fromString($0)"
                                let v651 : string = Fable.Core.RustInterop.emitRustExpr v649 v650 
                                v651 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v652 : string = null |> unbox<string>
                                v652 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v653 : string = null |> unbox<string>
                                v653 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v654 : string = null |> unbox<string>
                                v654 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v655 : string = null |> unbox<string>
                                v655 
                                #endif
#else
                                let v656 : string = v613 |> System.IO.File.ReadAllText
                                v656 
                                #endif
                                |> fun x -> _v633 <- Some x
                                let v657 : string = match _v633 with Some x -> x | None -> failwith "base.run_target / _v633=None"
                                let v658 : string = "rs"
                                let v659 : string = $"%A{struct (v658, v657)}"
                                let v660 : string = method135(v659)
                                let v661 : string = __SOURCE_DIRECTORY__
                                let v662 : string = "polyglot"
                                let v663 : string = ".paket"
                                let v664 : string = method20(v662, v663)
                                let v665 : US12 = method23(v664, v661)
                                let v674 : US3 =
                                    match v665 with
                                    | US12_1(v668) -> (* Error *)
                                        let v669 : US0 = US0_3
                                        let v670 : (unit -> string) = closure9()
                                        let v671 : (unit -> string) = closure10(v668)
                                        method28(v669, v670, v671)
                                        US3_1
                                    | US12_0(v666) -> (* Ok *)
                                        US3_0(v666)
                                let v690 : US3 =
                                    match v674 with
                                    | US3_1 -> (* None *)
                                        let v677 : string = method30()
                                        let v678 : string = method20(v662, v663)
                                        let v679 : US12 = method23(v678, v677)
                                        match v679 with
                                        | US12_1(v682) -> (* Error *)
                                            let v683 : US0 = US0_3
                                            let v684 : (unit -> string) = closure9()
                                            let v685 : (unit -> string) = closure10(v682)
                                            method28(v683, v684, v685)
                                            US3_1
                                        | US12_0(v680) -> (* Ok *)
                                            US3_0(v680)
                                    | US3_0(v675) -> (* Some *)
                                        US3_0(v675)
                                let v694 : string =
                                    match v690 with
                                    | US3_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US3_0(v691) -> (* Some *)
                                        v691
                                let v695 : string = method20(v694, v662)
                                let v696 : string = "target/spiral_builder"
                                let v697 : string = method20(v695, v696)
                                let v698 : string = "spiral_builder"
                                let v699 : string = method20(v697, v698)
                                let v700 : string = "packages"
                                let v701 : string = method20(v699, v700)
                                let v702 : string = method20(v701, v660)
                                let v703 : System.IDisposable = method137(v702)
                                let v704 : string = $"{v698}.fs"
                                let v705 : string = method20(v702, v704)
                                let v706 : string = method117(v705)
                                method32(v706, v657)
                                let v707 : string list = []
                                let v708 : string seq = seq { for i = 0 to v707.Length - 1 do yield v707.[i] }
                                let v709 : (string -> (string seq -> string)) = String.concat
                                let v710 : string = "\\n        "
                                let v711 : (string seq -> string) = v709 v710
                                let v712 : string = v711 v708
                                let v713 : string = "Fable.Core"
                                let v714 : string = $"<PackageReference Include=\"{v713}\" Version=\"*\" />"
                                let v715 : string list = []
                                let v716 : string list = v714 :: v715 
                                let v717 : string seq = seq { for i = 0 to v716.Length - 1 do yield v716.[i] }
                                let v718 : (string -> (string seq -> string)) = String.concat
                                let v719 : (string seq -> string) = v718 v710
                                let v720 : string = v719 v717
                                let v721 : string = $"{v698}.fsproj"
                                let v722 : string = method20(v702, v721)
                                let v723 : string = method117(v722)
                                let v724 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                let v725 : string = $"<PropertyGroup>"
                                let v726 : string = "\n"
                                let v727 : string = v724 + v726 
                                let v728 : string = v727 + v725 
                                let v729 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                let v730 : string = v728 + v726 
                                let v731 : string = v730 + v729 
                                let v732 : string = $"    <LangVersion>preview</LangVersion>"
                                let v733 : string = v731 + v726 
                                let v734 : string = v733 + v732 
                                let v735 : string = $"    <RollForward>Major</RollForward>"
                                let v736 : string = v734 + v726 
                                let v737 : string = v736 + v735 
                                let v738 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                let v739 : string = v737 + v726 
                                let v740 : string = v739 + v738 
                                let v741 : string = $"    <PublishAot>false</PublishAot>"
                                let v742 : string = v740 + v726 
                                let v743 : string = v742 + v741 
                                let v744 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                let v745 : string = v743 + v726 
                                let v746 : string = v745 + v744 
                                let v747 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                let v748 : string = v746 + v726 
                                let v749 : string = v748 + v747 
                                let v750 : string = $"    <SelfContained>true</SelfContained>"
                                let v751 : string = v749 + v726 
                                let v752 : string = v751 + v750 
                                let v753 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                let v754 : string = v752 + v726 
                                let v755 : string = v754 + v753 
                                let v756 : string = $"    <OutputType>Exe</OutputType>"
                                let v757 : string = v755 + v726 
                                let v758 : string = v757 + v756 
                                let v759 : string = $"</PropertyGroup>"
                                let v760 : string = v758 + v726 
                                let v761 : string = v760 + v759 
                                let v762 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                let v763 : string = v761 + v726 
                                let v764 : string = v763 + v762 
                                let v765 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                let v766 : string = v764 + v726 
                                let v767 : string = v766 + v765 
                                let v768 : string = $"</PropertyGroup>"
                                let v769 : string = v767 + v726 
                                let v770 : string = v769 + v768 
                                let v771 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                let v772 : string = v770 + v726 
                                let v773 : string = v772 + v771 
                                let v774 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                let v775 : string = v773 + v726 
                                let v776 : string = v775 + v774 
                                let v777 : string = $"</PropertyGroup>"
                                let v778 : string = v776 + v726 
                                let v779 : string = v778 + v777 
                                let v780 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                let v781 : string = v779 + v726 
                                let v782 : string = v781 + v780 
                                let v783 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                let v784 : string = v782 + v726 
                                let v785 : string = v784 + v783 
                                let v786 : string = $"</PropertyGroup>"
                                let v787 : string = v785 + v726 
                                let v788 : string = v787 + v786 
                                let v789 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                let v790 : string = v788 + v726 
                                let v791 : string = v790 + v789 
                                let v792 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                let v793 : string = v791 + v726 
                                let v794 : string = v793 + v792 
                                let v795 : string = $"</PropertyGroup>"
                                let v796 : string = v794 + v726 
                                let v797 : string = v796 + v795 
                                let v798 : string = $"<ItemGroup>"
                                let v799 : string = v797 + v726 
                                let v800 : string = v799 + v798 
                                let v801 : string = $"    {v712}"
                                let v802 : string = v800 + v726 
                                let v803 : string = v802 + v801 
                                let v804 : string = $"    <Compile Include=\"{v706}\" />"
                                let v805 : string = v803 + v726 
                                let v806 : string = v805 + v804 
                                let v807 : string = $"</ItemGroup>"
                                let v808 : string = v806 + v726 
                                let v809 : string = v808 + v807 
                                let v810 : string = $"<ItemGroup>"
                                let v811 : string = v809 + v726 
                                let v812 : string = v811 + v810 
                                let v813 : string = $"    {v720}"
                                let v814 : string = v812 + v726 
                                let v815 : string = v814 + v813 
                                let v816 : string = $"</ItemGroup>"
                                let v817 : string = v815 + v726 
                                let v818 : string = v817 + v816 
                                let v819 : string = $"</Project>"
                                let v820 : string = v818 + v726 
                                let v821 : string = v820 + v819 
                                method32(v723, v821)
                                let v822 : string = method31(v723)
                                let v823 : string = "Cargo.toml"
                                let v824 : string = method20(v822, v823)
                                let v825 : string = "../.."
                                let v826 : string = method20(v822, v825)
                                let v827 : string = method20(v826, v823)
                                let v828 : bool = method34(v824)
                                let v829 : bool = v828 = false
                                if v829 then
                                    let v830 : System.DateTime = System.DateTime.Now
                                    let v831 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v832 : System.Guid = v831 ()
                                    let v833 : System.Guid = method155(v832, v830)
                                    let v834 : (System.Guid -> string) = _.ToString()
                                    let v835 : string = v834 v833
                                    let v836 : string = $"[package]"
                                    let v837 : string = $"name = \"spiral_builder_{v835}\""
                                    let v838 : string = v836 + v726 
                                    let v839 : string = v838 + v837 
                                    let v840 : string = $"version = \"0.0.1\""
                                    let v841 : string = v839 + v726 
                                    let v842 : string = v841 + v840 
                                    let v843 : string = $"edition = \"2021\""
                                    let v844 : string = v842 + v726 
                                    let v845 : string = v844 + v843 
                                    let v846 : string = $""
                                    let v847 : string = v845 + v726 
                                    let v848 : string = v847 + v846 
                                    let v849 : string = $"[[bin]]"
                                    let v850 : string = v848 + v726 
                                    let v851 : string = v850 + v849 
                                    let v852 : string = $"name = \"spiral_builder_{v835}\""
                                    let v853 : string = v851 + v726 
                                    let v854 : string = v853 + v852 
                                    let v855 : string = $"path = \"spiral_builder.{v658}\""
                                    let v856 : string = v854 + v726 
                                    let v857 : string = v856 + v855 
                                    let v858 : bool = true
                                    let mutable _v858 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v859 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v824, v857) v859 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v860 : string = method35(v857)
                                    System.IO.File.WriteAllText (v824, v860)
                                    () 
                                    #endif
                                    |> fun x -> _v858 <- Some x
                                    match _v858 with Some x -> x | None -> failwith "base.run_target / _v858=None"
                                    ()
                                let v861 : bool = method34(v827)
                                let v862 : bool = v861 = false
                                if v862 then
                                    let v863 : System.DateTime = System.DateTime.Now
                                    let v864 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v865 : System.Guid = v864 ()
                                    let v866 : System.Guid = method155(v865, v863)
                                    let v867 : (System.Guid -> string) = _.ToString()
                                    let v868 : string = v867 v866
                                    let v869 : string = $"[package]"
                                    let v870 : string = $"name = \"spiral_builder_{v868}\""
                                    let v871 : string = v869 + v726 
                                    let v872 : string = v871 + v870 
                                    let v873 : string = $"version = \"0.0.1\""
                                    let v874 : string = v872 + v726 
                                    let v875 : string = v874 + v873 
                                    let v876 : string = $"edition = \"2021\""
                                    let v877 : string = v875 + v726 
                                    let v878 : string = v877 + v876 
                                    let v879 : string = $""
                                    let v880 : string = v878 + v726 
                                    let v881 : string = v880 + v879 
                                    let v882 : string = $"[[bin]]"
                                    let v883 : string = v881 + v726 
                                    let v884 : string = v883 + v882 
                                    let v885 : string = $"name = \"spiral_builder_{v868}\""
                                    let v886 : string = v884 + v726 
                                    let v887 : string = v886 + v885 
                                    let v888 : string = $"path = \"spiral_builder.{v658}\""
                                    let v889 : string = v887 + v726 
                                    let v890 : string = v889 + v888 
                                    let v891 : bool = true
                                    let mutable _v891 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v892 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v827, v890) v892 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v893 : string = method35(v890)
                                    System.IO.File.WriteAllText (v827, v893)
                                    () 
                                    #endif
                                    |> fun x -> _v891 <- Some x
                                    match _v891 with Some x -> x | None -> failwith "base.run_target / _v891=None"
                                    ()
                                let v894 : string = __SOURCE_DIRECTORY__
                                let v895 : string = method20(v662, v663)
                                let v896 : US12 = method23(v895, v894)
                                let v905 : US3 =
                                    match v896 with
                                    | US12_1(v899) -> (* Error *)
                                        let v900 : US0 = US0_3
                                        let v901 : (unit -> string) = closure9()
                                        let v902 : (unit -> string) = closure10(v899)
                                        method28(v900, v901, v902)
                                        US3_1
                                    | US12_0(v897) -> (* Ok *)
                                        US3_0(v897)
                                let v921 : US3 =
                                    match v905 with
                                    | US3_1 -> (* None *)
                                        let v908 : string = method30()
                                        let v909 : string = method20(v662, v663)
                                        let v910 : US12 = method23(v909, v908)
                                        match v910 with
                                        | US12_1(v913) -> (* Error *)
                                            let v914 : US0 = US0_3
                                            let v915 : (unit -> string) = closure9()
                                            let v916 : (unit -> string) = closure10(v913)
                                            method28(v914, v915, v916)
                                            US3_1
                                        | US12_0(v911) -> (* Ok *)
                                            US3_0(v911)
                                    | US3_0(v906) -> (* Some *)
                                        US3_0(v906)
                                let v925 : string =
                                    match v921 with
                                    | US3_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US3_0(v922) -> (* Some *)
                                        v922
                                let v926 : string = method20(v925, v662)
                                let v927 : string = method30()
                                let v928 : (unit -> string) = v927.ToLower
                                let v929 : string = v928 ()
                                let v930 : (unit -> string) = v926.ToLower
                                let v931 : string = v930 ()
                                let v932 : bool = v929.StartsWith v931 
                                let v935 : US12 =
                                    if v932 then
                                        US12_1(v931)
                                    else
                                        US12_0(v931)
                                let v941 : Result<string, string> =
                                    match v935 with
                                    | US12_1(v938) -> (* Error *)
                                        let v939 : Result<string, string> = Error v938 
                                        v939
                                    | US12_0(v936) -> (* Ok *)
                                        let v937 : Result<string, string> = Ok v936 
                                        v937
                                let v942 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                let v943 : bool = Fable.Core.RustInterop.emitRustExpr v941 v942 
                                let v944 : string = "x"
                                let v945 : string = Fable.Core.RustInterop.emitRustExpr () v944 
                                let v946 : string = "true; $0 })"
                                let v947 : bool = Fable.Core.RustInterop.emitRustExpr v945 v946 
                                let v948 : string = "_result"
                                let v949 : string = Fable.Core.RustInterop.emitRustExpr () v948 
                                let v950 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v951 : string = method20(v949, v950)
                                let v952 : string = "fable_modules/fable-library-rust"
                                let v953 : string = method20(v822, v952)
                                method161(v951, v953)
                                let struct (v954 : int32, v955 : string) = method162(v822, v658, v723, v935)
                                let v956 : bool = v954 <> 0 
                                let struct (v1305 : US3, v1306 : US3, v1307 : US3) =
                                    if v956 then
                                        let v957 : US0 = US0_4
                                        let v958 : (unit -> string) = closure101()
                                        let v959 : (unit -> struct (int32 * string)) = closure102(v955, v954)
                                        method168(v957, v958, v959)
                                        let v960 : US3 = US3_0(v658)
                                        let v961 : US3 = US3_1
                                        let v962 : US3 = US3_0(v955)
                                        struct (v960, v961, v962)
                                    else
                                        let v963 : string = "true; let _result : Vec<_> = v630.into_iter().map(|x| { //"
                                        let v964 : bool = Fable.Core.RustInterop.emitRustExpr () v963 
                                        let v965 : string = "x"
                                        let v966 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v965 
                                        let v967 : string = "fable_library_rust::String_::fromString($0)"
                                        let v968 : string = Fable.Core.RustInterop.emitRustExpr v966 v967 
                                        let v969 : string = "="
                                        let v970 : bool = v968.Contains v969 
                                        let v979 : string =
                                            if v970 then
                                                v968
                                            else
                                                let v971 : string = "]"
                                                let v972 : bool = v968.EndsWith v971 
                                                if v972 then
                                                    let v973 : string = $"={{version='*',features=["
                                                    let v974 : string = "["
                                                    let v975 : string = v968.Replace (v974, v973)
                                                    let v976 : string = $"{v975}}}"
                                                    v976
                                                else
                                                    let v977 : string = $"{v968}='*'"
                                                    v977
                                        let v980 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v981 : bool = Fable.Core.RustInterop.emitRustExpr v979 v980 
                                        let v982 : string = "_result"
                                        let v983 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v982 
                                        let v984 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v985 : (string []) = Fable.Core.RustInterop.emitRustExpr v983 v984 
                                        let v986 : string seq = seq { for i = 0 to v985.Length - 1 do yield v985.[i] }
                                        let v987 : (string -> (string seq -> string)) = String.concat
                                        let v988 : (string seq -> string) = v987 v726
                                        let v989 : string = v988 v986
                                        let v990 : string = $"[package]"
                                        let v991 : string = $"name = \"spiral_builder_{v660}\""
                                        let v992 : string = v990 + v726 
                                        let v993 : string = v992 + v991 
                                        let v994 : string = $"version = \"0.0.1\""
                                        let v995 : string = v993 + v726 
                                        let v996 : string = v995 + v994 
                                        let v997 : string = $"edition = \"2021\""
                                        let v998 : string = v996 + v726 
                                        let v999 : string = v998 + v997 
                                        let v1000 : string = $""
                                        let v1001 : string = v999 + v726 
                                        let v1002 : string = v1001 + v1000 
                                        let v1003 : string = $"[dependencies]"
                                        let v1004 : string = v1002 + v726 
                                        let v1005 : string = v1004 + v1003 
                                        let v1006 : string = $"fable_library_rust = {{ workspace = true }}"
                                        let v1007 : string = v1005 + v726 
                                        let v1008 : string = v1007 + v1006 
                                        let v1009 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v1010 : string = v1008 + v726 
                                        let v1011 : string = v1010 + v1009 
                                        let v1012 : string = $"{v989}"
                                        let v1013 : string = v1011 + v726 
                                        let v1014 : string = v1013 + v1012 
                                        let v1015 : string = $""
                                        let v1016 : string = v1014 + v726 
                                        let v1017 : string = v1016 + v1015 
                                        let v1018 : string = $"[[bin]]"
                                        let v1019 : string = v1017 + v726 
                                        let v1020 : string = v1019 + v1018 
                                        let v1021 : string = $"name = \"spiral_builder_{v660}\""
                                        let v1022 : string = v1020 + v726 
                                        let v1023 : string = v1022 + v1021 
                                        let v1024 : string = $"path = \"spiral_builder.rs\" "
                                        let v1025 : string = v1023 + v726 
                                        let v1026 : string = v1025 + v1024 
                                        let v1027 : string = method117(v949)
                                        let v1028 : string = $"[workspace]"
                                        let v1029 : string = $"resolver = \"2\""
                                        let v1030 : string = v1028 + v726 
                                        let v1031 : string = v1030 + v1029 
                                        let v1032 : string = $"members = [\"packages/*\"]"
                                        let v1033 : string = v1031 + v726 
                                        let v1034 : string = v1033 + v1032 
                                        let v1035 : string = $""
                                        let v1036 : string = v1034 + v726 
                                        let v1037 : string = v1036 + v1035 
                                        let v1038 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v1039 : string = v1037 + v726 
                                        let v1040 : string = v1039 + v1038 
                                        let v1041 : string = $"path = \"{v1027}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v1042 : string = v1040 + v726 
                                        let v1043 : string = v1042 + v1041 
                                        let v1044 : string = $"default-features = false"
                                        let v1045 : string = v1043 + v726 
                                        let v1046 : string = v1045 + v1044 
                                        let v1047 : string = $"features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"]"
                                        let v1048 : string = v1046 + v726 
                                        let v1049 : string = v1048 + v1047 
                                        let v1050 : string = $""
                                        let v1051 : string = v1049 + v726 
                                        let v1052 : string = v1051 + v1050 
                                        let v1053 : string = $"[workspace.dependencies]"
                                        let v1054 : string = v1052 + v726 
                                        let v1055 : string = v1054 + v1053 
                                        let v1056 : string = $"inline_colorization = \"~0.1\""
                                        let v1057 : string = v1055 + v726 
                                        let v1058 : string = v1057 + v1056 
                                        method32(v824, v1026)
                                        method32(v827, v1058)
                                        let v1059 : string = "src/Range.rs"
                                        let v1060 : string = method20(v953, v1059)
                                        let v1061 : bool = method34(v1060)
                                        if v1061 then
                                            let v1062 : bool = true
                                            let mutable _v1062 : string option = None 
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v1063 : bool = true
                                            let mutable _v1063 : Vec<uint8> option = None 
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v1064 : string = "std::fs::read(&*$0).unwrap()"
                                            let v1065 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1060 v1064 
                                            v1065 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v1066 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v1066 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v1067 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v1067 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v1068 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v1068 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v1069 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v1069 
                                            #endif
#else
                                            let v1070 : (uint8 []) = v1060 |> System.IO.File.ReadAllBytes
                                            let v1071 : string = "$0.to_vec()"
                                            let v1072 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1070 v1071 
                                            v1072 
                                            #endif
                                            |> fun x -> _v1063 <- Some x
                                            let v1073 : Vec<uint8> = match _v1063 with Some x -> x | None -> failwith "base.run_target / _v1063=None"
                                            let v1074 : Vec<uint8> = method19(v1073)
                                            let v1075 : string = "std::string::String::from_utf8($0)"
                                            let v1076 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1074 v1075 
                                            let v1077 : string = "$0.unwrap()"
                                            let v1078 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1076 v1077 
                                            let v1079 : string = "fable_library_rust::String_::fromString($0)"
                                            let v1080 : string = Fable.Core.RustInterop.emitRustExpr v1078 v1079 
                                            v1080 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v1081 : string = null |> unbox<string>
                                            v1081 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v1082 : string = null |> unbox<string>
                                            v1082 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v1083 : string = null |> unbox<string>
                                            v1083 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v1084 : string = null |> unbox<string>
                                            v1084 
                                            #endif
#else
                                            let v1085 : string = v1060 |> System.IO.File.ReadAllText
                                            v1085 
                                            #endif
                                            |> fun x -> _v1062 <- Some x
                                            let v1086 : string = match _v1062 with Some x -> x | None -> failwith "base.run_target / _v1062=None"
                                            let v1087 : string = "use crate::String_::fromCharCode;"
                                            let v1088 : string = "use crate::String_::fromChar;"
                                            let v1089 : string = v1086.Replace (v1087, v1088)
                                            let v1090 : string = "fromCharCode(c)"
                                            let v1091 : string = "std::char::from_u32(c).unwrap()"
                                            let v1092 : string = v1089.Replace (v1090, v1091)
                                            method32(v1060, v1092)
                                        let v1093 : uint8 = 1uy
                                        let struct (v1094 : int32, v1095 : string) = method170(v824, v935, v1093)
                                        let v1096 : bool = v1094 <> 0 
                                        if v1096 then
                                            let v1097 : US0 = US0_4
                                            let v1098 : (unit -> string) = closure105()
                                            let v1099 : (unit -> struct (int32 * string)) = closure106(v1095, v1094)
                                            method172(v1097, v1098, v1099)
                                        let v1100 : string = $"{v698}.{v658}"
                                        let v1101 : string = method20(v822, v1100)
                                        let v1102 : bool = true
                                        let mutable _v1102 : string option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1103 : bool = true
                                        let mutable _v1103 : Vec<uint8> option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1104 : string = "std::fs::read(&*$0).unwrap()"
                                        let v1105 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1101 v1104 
                                        v1105 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1106 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v1106 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1107 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v1107 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1108 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v1108 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1109 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v1109 
                                        #endif
#else
                                        let v1110 : (uint8 []) = v1101 |> System.IO.File.ReadAllBytes
                                        let v1111 : string = "$0.to_vec()"
                                        let v1112 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1110 v1111 
                                        v1112 
                                        #endif
                                        |> fun x -> _v1103 <- Some x
                                        let v1113 : Vec<uint8> = match _v1103 with Some x -> x | None -> failwith "base.run_target / _v1103=None"
                                        let v1114 : Vec<uint8> = method19(v1113)
                                        let v1115 : string = "std::string::String::from_utf8($0)"
                                        let v1116 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1114 v1115 
                                        let v1117 : string = "$0.unwrap()"
                                        let v1118 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1116 v1117 
                                        let v1119 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1120 : string = Fable.Core.RustInterop.emitRustExpr v1118 v1119 
                                        v1120 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1121 : string = null |> unbox<string>
                                        v1121 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1122 : string = null |> unbox<string>
                                        v1122 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1123 : string = null |> unbox<string>
                                        v1123 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1124 : string = null |> unbox<string>
                                        v1124 
                                        #endif
#else
                                        let v1125 : string = v1101 |> System.IO.File.ReadAllText
                                        v1125 
                                        #endif
                                        |> fun x -> _v1102 <- Some x
                                        let v1126 : string = match _v1102 with Some x -> x | None -> failwith "base.run_target / _v1102=None"
                                        let v1127 : string = "\"{\".into()"
                                        let v1128 : string = Fable.Core.RustInterop.emitRustExpr () v1127 
                                        let v1129 : string = "pub fn main() -> Result<(), String> "
                                        let v1130 : string = v1129 + v1128 
                                        let v1131 : string = $"{v1130} Ok(()) }}"
                                        let v1132 : bool = v1126.Contains v1130 
                                        let v1208 : string =
                                            if v1132 then
                                                v1126
                                            else
                                                let v1133 : string = "\";\".into()"
                                                let v1134 : string = Fable.Core.RustInterop.emitRustExpr () v1133 
                                                let v1135 : string = "),)"
                                                let v1136 : string = v1135 + v1134 
                                                let v1137 : string = "));"
                                                let v1138 : string = v1126.Replace (v1136, v1137)
                                                let v1139 : string = "\";\".into()"
                                                let v1140 : string = Fable.Core.RustInterop.emitRustExpr () v1139 
                                                let v1141 : string = "},)"
                                                let v1142 : string = v1141 + v1140 
                                                let v1143 : string = "});"
                                                let v1144 : string = v1138.Replace (v1142, v1143)
                                                let v1145 : string = method174()
                                                let v1146 : bool = true
                                                let mutable _v1146 : string option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1147 : string = method119(v1144)
                                                let v1148 : string = $"regex::Regex::new(&$0)"
                                                let v1149 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v1150 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v1149 v1148 
                                                let v1151 : string = "$0.unwrap()"
                                                let v1152 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1150 v1151 
                                                let v1153 : string = $"$0.replace_all(&$1, &*$2)"
                                                let v1154 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v1152, v1147, v1145) v1153 
                                                let v1155 : string = "String::from($0)"
                                                let v1156 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1154 v1155 
                                                let v1157 : string = "fable_library_rust::String_::fromString($0)"
                                                let v1158 : string = Fable.Core.RustInterop.emitRustExpr v1156 v1157 
                                                v1158 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1159 : string = null |> unbox<string>
                                                v1159 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1160 : string = null |> unbox<string>
                                                v1160 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1161 : string = null |> unbox<string>
                                                v1161 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1162 : string = null |> unbox<string>
                                                v1162 
                                                #endif
#else
                                                let v1163 : string = method175()
                                                let v1164 : string = System.Text.RegularExpressions.Regex.Replace (v1144, v1163, v1145)
                                                v1164 
                                                #endif
                                                |> fun x -> _v1146 <- Some x
                                                let v1165 : string = match _v1146 with Some x -> x | None -> failwith "base.run_target / _v1146=None"
                                                let v1166 : string = "\",\".into()"
                                                let v1167 : string = Fable.Core.RustInterop.emitRustExpr () v1166 
                                                let v1168 : string = "defaultOf()"
                                                let v1169 : string = v1168 + v1167 
                                                let v1170 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v1171 : string = v1165.Replace (v1169, v1170)
                                                let v1172 : string = "\"_.\".into()"
                                                let v1173 : string = Fable.Core.RustInterop.emitRustExpr () v1172 
                                                let v1174 : string = "_self"
                                                let v1175 : string = v1174 + v1173 
                                                let v1176 : string = "self."
                                                let v1177 : string = v1171.Replace (v1175, v1176)
                                                let v1178 : string = "\"h\".into()"
                                                let v1179 : string = Fable.Core.RustInterop.emitRustExpr () v1178 
                                                let v1180 : string = "get_or_insert_wit"
                                                let v1181 : string = v1180 + v1179 
                                                let v1182 : string = "get_or_init"
                                                let v1183 : string = v1177.Replace (v1181, v1182)
                                                let v1184 : string = "\";\".into()"
                                                let v1185 : string = Fable.Core.RustInterop.emitRustExpr () v1184 
                                                let v1186 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v1187 : string = v1186 + v1185 
                                                let v1188 : string = "type ConcurrentStack_1<T> = T;"
                                                let v1189 : string = v1183.Replace (v1187, v1188)
                                                let v1190 : string = "\";\".into()"
                                                let v1191 : string = Fable.Core.RustInterop.emitRustExpr () v1190 
                                                let v1192 : string = "use fable_library_rust::System::Threading::CancellationToken"
                                                let v1193 : string = v1192 + v1191 
                                                let v1194 : string = "type CancellationToken = ();"
                                                let v1195 : string = v1189.Replace (v1193, v1194)
                                                let v1196 : string = "\";\".into()"
                                                let v1197 : string = Fable.Core.RustInterop.emitRustExpr () v1196 
                                                let v1198 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v1199 : string = v1198 + v1197 
                                                let v1200 : string = "type TimeZoneInfo = i64;"
                                                let v1201 : string = v1195.Replace (v1199, v1200)
                                                let v1202 : string = "\";\".into()"
                                                let v1203 : string = Fable.Core.RustInterop.emitRustExpr () v1202 
                                                let v1204 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v1205 : string = v1204 + v1203 
                                                let v1206 : string = "type TaskCanceledException = ();"
                                                let v1207 : string = v1201.Replace (v1205, v1206)
                                                v1207
                                        let v1209 : bool = v1132 = false
                                        if v1209 then
                                            let v1210 : string = $"{v1208}\n\n{v1131}\n"
                                            method32(v1101, v1210)
                                        let v1211 : string = $"cargo +nightly run --manifest-path \"{v824}\""
                                        let v1212 : string = "TRACE_LEVEL"
                                        let v1213 : string = "Verbose"
                                        let v1214 : string = "RUSTC_WRAPPER"
                                        let v1215 : string = "sccache"
                                        let v1216 : string = "RUSTFLAGS"
                                        let v1217 : string = "-C prefer-dynamic"
                                        let v1218 : (struct (string * string) []) = [|struct (v1212, v1213); struct (v1214, v1215); struct (v1216, v1217)|]
                                        let v1219 : System.Threading.CancellationToken option = None
                                        let v1220 : (struct (string * string) []) = [||]
                                        let v1221 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v1222 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v1223 : string option = None
                                        let v1229 : Result<string, string> =
                                            match v935 with
                                            | US12_1(v1226) -> (* Error *)
                                                let v1227 : Result<string, string> = Error v1226 
                                                v1227
                                            | US12_0(v1224) -> (* Ok *)
                                                let v1225 : Result<string, string> = Ok v1224 
                                                v1225
                                        let v1230 : string = "v1229.ok()"
                                        let v1231 : string option = Fable.Core.RustInterop.emitRustExpr () v1230 
                                        let v1232 : bool = true
                                        let struct (v1233 : int32, v1234 : string) = method36(v1211, v1219, v1218, v1221, v1222, v1232, v1231)
                                        let v1235 : string = ""
                                        let v1236 : string = $"target/debug/spiral_builder_{v660}{v1235}"
                                        let v1237 : string = method20(v826, v1236)
                                        let v1238 : string = ".pdb"
                                        let v1239 : string = $"target/debug/spiral_builder_{v660}{v1238}"
                                        let v1240 : string = method20(v826, v1239)
                                        let v1241 : string = ".exe"
                                        let v1242 : string = $"target/debug/spiral_builder_{v660}{v1241}"
                                        let v1243 : string = method20(v826, v1242)
                                        let v1244 : string = ".d"
                                        let v1245 : string = $"target/debug/spiral_builder_{v660}{v1244}"
                                        let v1246 : string = method20(v826, v1245)
                                        let v1247 : bool = method34(v1237)
                                        let v1248 : bool = method34(v1240)
                                        let v1249 : bool = method34(v1243)
                                        let v1250 : bool = method34(v1246)
                                        let v1251 : US0 = US0_0
                                        let v1252 : (unit -> string) = closure108()
                                        let v1253 : (unit -> struct (string * UH4)) = closure109(v1101, v1246, v1250, v1243, v1249, v1240, v1248, v1237, v1247)
                                        method176(v1251, v1252, v1253)
                                        let v1257 : UH4 =
                                            if v1247 then
                                                let v1254 : UH4 = UH4_0
                                                UH4_1(v1237, v1247, v1254)
                                            else
                                                UH4_0
                                        let v1259 : UH4 =
                                            if v1248 then
                                                UH4_1(v1240, v1248, v1257)
                                            else
                                                v1257
                                        let v1261 : UH4 =
                                            if v1249 then
                                                UH4_1(v1243, v1249, v1259)
                                            else
                                                v1259
                                        let v1263 : UH4 =
                                            if v1250 then
                                                UH4_1(v1246, v1250, v1261)
                                            else
                                                v1261
                                        method179(v1263)
                                        let v1264 : int32 = v1218.Length
                                        let v1265 : (string []) = Array.zeroCreate<string> (v1264)
                                        let v1266 : Mut5 = {l0 = 0} : Mut5
                                        while method39(v1264, v1266) do
                                            let v1268 : int32 = v1266.l0
                                            let struct (v1269 : string, v1270 : string) = v1218.[int v1268]
                                            let v1271 : string = $"$env:{v1269}=''{v1270}''"
                                            v1265.[int v1268] <- v1271
                                            let v1272 : int32 = v1268 + 1
                                            v1266.l0 <- v1272
                                            ()
                                        let v1273 : ((string []) -> string seq) = Seq.ofArray
                                        let v1274 : string seq = v1273 v1265
                                        let v1275 : (string -> (string seq -> string)) = String.concat
                                        let v1276 : string = ";"
                                        let v1277 : (string seq -> string) = v1275 v1276
                                        let v1278 : string = v1277 v1274
                                        let v1279 : string = $"pwsh -c '{v1278}; {v1211}'"
                                        let v1280 : bool = v1233 = 0
                                        let struct (v1302 : US3, v1303 : US3, v1304 : US3) =
                                            if v1280 then
                                                let v1281 : (string -> US3) = closure59()
                                                let v1282 : (unit -> string) = closure111(v1234)
                                                let v1283 : (exn -> US3) = closure113(v1101, v1234, v1279)
                                                let v1284 : US3 = US3_1
                                                let result = ref v1284
                                                try
                                                    result.Value <- v1282 () |> v1281 
                                                with ex ->
                                                    result.Value <- v1283 ex 
                                                let v1285 : US3 = result.Value
                                                let v1290 : string option =
                                                    match v1285 with
                                                    | US3_1 -> (* None *)
                                                        let v1288 : string option = None
                                                        v1288
                                                    | US3_0(v1286) -> (* Some *)
                                                        let v1287 : string option = Some v1286 
                                                        v1287
                                                let v1291 : string = "$0.unwrap()"
                                                let v1292 : string = Fable.Core.RustInterop.emitRustExpr v1290 v1291 
                                                let v1293 : US3 = US3_0(v658)
                                                let v1294 : US3 = US3_0(v1208)
                                                let v1295 : US3 = US3_0(v1292)
                                                struct (v1293, v1294, v1295)
                                            else
                                                let v1296 : US0 = US0_4
                                                let v1297 : (unit -> string) = closure117()
                                                let v1298 : (unit -> struct (int32 * string * string * string)) = closure118(v1101, v1234, v1233, v1279)
                                                method182(v1296, v1297, v1298)
                                                let v1299 : US3 = US3_0(v658)
                                                let v1300 : US3 = US3_1
                                                let v1301 : US3 = US3_1
                                                struct (v1299, v1300, v1301)
                                        struct (v1302, v1303, v1304)
                                struct (v1305, v1306, v1307)
                            else
                                let v1308 : string = "fable_library_rust::String_::fromString($0)"
                                let v1309 : string = Fable.Core.RustInterop.emitRustExpr v13 v1308 
                                let v1311 : bool = v1309 = "typescript"
                                let struct (v2324 : US3, v2325 : US3, v2326 : US3) =
                                    if v1311 then
                                        let v1312 : string = method110()
                                        let v1313 : string = "&*$0"
                                        let v1314 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1312 v1313 
                                        let v1315 : string = "clap::ArgMatches::get_one(&$0, v1314).cloned()"
                                        let v1316 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v14 v1315 
                                        let v1317 : US5 option = None
                                        let _v1317 = ref v1317 
                                        match v1316 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v1318 : std_string_String = x
                                        let v1319 : US5 = US5_0(v1318)
                                        v1319 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v1317.Value <- x
                                        let v1320 : US5 option = _v1317.Value 
                                        let v1321 : US5 = US5_1
                                        let v1322 : US5 = v1320 |> Option.defaultValue v1321 
                                        let v1326 : std_string_String =
                                            match v1322 with
                                            | US5_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US5_0(v1323) -> (* Some *)
                                                v1323
                                        let v1327 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1328 : string = Fable.Core.RustInterop.emitRustExpr v1326 v1327 
                                        let v1329 : string = method18()
                                        let v1330 : string = "&*$0"
                                        let v1331 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1329 v1330 
                                        let v1332 : string = "clap::ArgMatches::get_many(&$0, v1331).map(|x| x.cloned().into_iter().collect())"
                                        let v1333 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v14 v1332 
                                        let v1334 : US9 option = None
                                        let _v1334 = ref v1334 
                                        match v1333 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v1335 : Vec<std_string_String> = x
                                        let v1336 : US9 = US9_0(v1335)
                                        v1336 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v1334.Value <- x
                                        let v1337 : US9 option = _v1334.Value 
                                        let v1338 : US9 = US9_1
                                        let v1339 : US9 = v1337 |> Option.defaultValue v1338 
                                        let v1340 : (std_string_String []) = [||]
                                        let v1341 : string = "$0.to_vec()"
                                        let v1342 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1340 v1341 
                                        let v1345 : Vec<std_string_String> =
                                            match v1339 with
                                            | US9_1 -> (* None *)
                                                v1342
                                            | US9_0(v1343) -> (* Some *)
                                                v1343
                                        let v1347 : bool =
                                            match v0 with
                                            | US0_0 -> (* Verbose *)
                                                true
                                            | _ ->
                                                false
                                        let v1348 : bool = true
                                        let mutable _v1348 : string option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1349 : bool = true
                                        let mutable _v1349 : Vec<uint8> option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v1350 : string = "std::fs::read(&*$0).unwrap()"
                                        let v1351 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1328 v1350 
                                        v1351 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1352 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v1352 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1353 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v1353 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1354 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v1354 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1355 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v1355 
                                        #endif
#else
                                        let v1356 : (uint8 []) = v1328 |> System.IO.File.ReadAllBytes
                                        let v1357 : string = "$0.to_vec()"
                                        let v1358 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1356 v1357 
                                        v1358 
                                        #endif
                                        |> fun x -> _v1349 <- Some x
                                        let v1359 : Vec<uint8> = match _v1349 with Some x -> x | None -> failwith "base.run_target / _v1349=None"
                                        let v1360 : Vec<uint8> = method19(v1359)
                                        let v1361 : string = "std::string::String::from_utf8($0)"
                                        let v1362 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1360 v1361 
                                        let v1363 : string = "$0.unwrap()"
                                        let v1364 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1362 v1363 
                                        let v1365 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1366 : string = Fable.Core.RustInterop.emitRustExpr v1364 v1365 
                                        v1366 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v1367 : string = null |> unbox<string>
                                        v1367 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v1368 : string = null |> unbox<string>
                                        v1368 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v1369 : string = null |> unbox<string>
                                        v1369 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v1370 : string = null |> unbox<string>
                                        v1370 
                                        #endif
#else
                                        let v1371 : string = v1328 |> System.IO.File.ReadAllText
                                        v1371 
                                        #endif
                                        |> fun x -> _v1348 <- Some x
                                        let v1372 : string = match _v1348 with Some x -> x | None -> failwith "base.run_target / _v1348=None"
                                        let v1373 : string = "ts"
                                        let v1374 : string = $"%A{struct (v1373, v1372)}"
                                        let v1375 : string = method135(v1374)
                                        let v1376 : string = __SOURCE_DIRECTORY__
                                        let v1377 : string = "polyglot"
                                        let v1378 : string = ".paket"
                                        let v1379 : string = method20(v1377, v1378)
                                        let v1380 : US12 = method23(v1379, v1376)
                                        let v1389 : US3 =
                                            match v1380 with
                                            | US12_1(v1383) -> (* Error *)
                                                let v1384 : US0 = US0_3
                                                let v1385 : (unit -> string) = closure9()
                                                let v1386 : (unit -> string) = closure10(v1383)
                                                method28(v1384, v1385, v1386)
                                                US3_1
                                            | US12_0(v1381) -> (* Ok *)
                                                US3_0(v1381)
                                        let v1405 : US3 =
                                            match v1389 with
                                            | US3_1 -> (* None *)
                                                let v1392 : string = method30()
                                                let v1393 : string = method20(v1377, v1378)
                                                let v1394 : US12 = method23(v1393, v1392)
                                                match v1394 with
                                                | US12_1(v1397) -> (* Error *)
                                                    let v1398 : US0 = US0_3
                                                    let v1399 : (unit -> string) = closure9()
                                                    let v1400 : (unit -> string) = closure10(v1397)
                                                    method28(v1398, v1399, v1400)
                                                    US3_1
                                                | US12_0(v1395) -> (* Ok *)
                                                    US3_0(v1395)
                                            | US3_0(v1390) -> (* Some *)
                                                US3_0(v1390)
                                        let v1409 : string =
                                            match v1405 with
                                            | US3_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US3_0(v1406) -> (* Some *)
                                                v1406
                                        let v1410 : string = method20(v1409, v1377)
                                        let v1411 : string = "target/spiral_builder"
                                        let v1412 : string = method20(v1410, v1411)
                                        let v1413 : string = "spiral_builder"
                                        let v1414 : string = method20(v1412, v1413)
                                        let v1415 : string = "packages"
                                        let v1416 : string = method20(v1414, v1415)
                                        let v1417 : string = method20(v1416, v1375)
                                        let v1418 : System.IDisposable = method137(v1417)
                                        let v1419 : string = $"{v1413}.fs"
                                        let v1420 : string = method20(v1417, v1419)
                                        let v1421 : string = method117(v1420)
                                        method32(v1421, v1372)
                                        let v1422 : string list = []
                                        let v1423 : string seq = seq { for i = 0 to v1422.Length - 1 do yield v1422.[i] }
                                        let v1424 : (string -> (string seq -> string)) = String.concat
                                        let v1425 : string = "\\n        "
                                        let v1426 : (string seq -> string) = v1424 v1425
                                        let v1427 : string = v1426 v1423
                                        let v1428 : string = "Fable.Core"
                                        let v1429 : string = $"<PackageReference Include=\"{v1428}\" Version=\"*\" />"
                                        let v1430 : string list = []
                                        let v1431 : string list = v1429 :: v1430 
                                        let v1432 : string seq = seq { for i = 0 to v1431.Length - 1 do yield v1431.[i] }
                                        let v1433 : (string -> (string seq -> string)) = String.concat
                                        let v1434 : (string seq -> string) = v1433 v1425
                                        let v1435 : string = v1434 v1432
                                        let v1436 : string = $"{v1413}.fsproj"
                                        let v1437 : string = method20(v1417, v1436)
                                        let v1438 : string = method117(v1437)
                                        let v1439 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                        let v1440 : string = $"<PropertyGroup>"
                                        let v1441 : string = "\n"
                                        let v1442 : string = v1439 + v1441 
                                        let v1443 : string = v1442 + v1440 
                                        let v1444 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                        let v1445 : string = v1443 + v1441 
                                        let v1446 : string = v1445 + v1444 
                                        let v1447 : string = $"    <LangVersion>preview</LangVersion>"
                                        let v1448 : string = v1446 + v1441 
                                        let v1449 : string = v1448 + v1447 
                                        let v1450 : string = $"    <RollForward>Major</RollForward>"
                                        let v1451 : string = v1449 + v1441 
                                        let v1452 : string = v1451 + v1450 
                                        let v1453 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                        let v1454 : string = v1452 + v1441 
                                        let v1455 : string = v1454 + v1453 
                                        let v1456 : string = $"    <PublishAot>false</PublishAot>"
                                        let v1457 : string = v1455 + v1441 
                                        let v1458 : string = v1457 + v1456 
                                        let v1459 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                        let v1460 : string = v1458 + v1441 
                                        let v1461 : string = v1460 + v1459 
                                        let v1462 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                        let v1463 : string = v1461 + v1441 
                                        let v1464 : string = v1463 + v1462 
                                        let v1465 : string = $"    <SelfContained>true</SelfContained>"
                                        let v1466 : string = v1464 + v1441 
                                        let v1467 : string = v1466 + v1465 
                                        let v1468 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                        let v1469 : string = v1467 + v1441 
                                        let v1470 : string = v1469 + v1468 
                                        let v1471 : string = $"    <OutputType>Exe</OutputType>"
                                        let v1472 : string = v1470 + v1441 
                                        let v1473 : string = v1472 + v1471 
                                        let v1474 : string = $"</PropertyGroup>"
                                        let v1475 : string = v1473 + v1441 
                                        let v1476 : string = v1475 + v1474 
                                        let v1477 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                        let v1478 : string = v1476 + v1441 
                                        let v1479 : string = v1478 + v1477 
                                        let v1480 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                        let v1481 : string = v1479 + v1441 
                                        let v1482 : string = v1481 + v1480 
                                        let v1483 : string = $"</PropertyGroup>"
                                        let v1484 : string = v1482 + v1441 
                                        let v1485 : string = v1484 + v1483 
                                        let v1486 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                        let v1487 : string = v1485 + v1441 
                                        let v1488 : string = v1487 + v1486 
                                        let v1489 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                        let v1490 : string = v1488 + v1441 
                                        let v1491 : string = v1490 + v1489 
                                        let v1492 : string = $"</PropertyGroup>"
                                        let v1493 : string = v1491 + v1441 
                                        let v1494 : string = v1493 + v1492 
                                        let v1495 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                        let v1496 : string = v1494 + v1441 
                                        let v1497 : string = v1496 + v1495 
                                        let v1498 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                        let v1499 : string = v1497 + v1441 
                                        let v1500 : string = v1499 + v1498 
                                        let v1501 : string = $"</PropertyGroup>"
                                        let v1502 : string = v1500 + v1441 
                                        let v1503 : string = v1502 + v1501 
                                        let v1504 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                        let v1505 : string = v1503 + v1441 
                                        let v1506 : string = v1505 + v1504 
                                        let v1507 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                        let v1508 : string = v1506 + v1441 
                                        let v1509 : string = v1508 + v1507 
                                        let v1510 : string = $"</PropertyGroup>"
                                        let v1511 : string = v1509 + v1441 
                                        let v1512 : string = v1511 + v1510 
                                        let v1513 : string = $"<ItemGroup>"
                                        let v1514 : string = v1512 + v1441 
                                        let v1515 : string = v1514 + v1513 
                                        let v1516 : string = $"    {v1427}"
                                        let v1517 : string = v1515 + v1441 
                                        let v1518 : string = v1517 + v1516 
                                        let v1519 : string = $"    <Compile Include=\"{v1421}\" />"
                                        let v1520 : string = v1518 + v1441 
                                        let v1521 : string = v1520 + v1519 
                                        let v1522 : string = $"</ItemGroup>"
                                        let v1523 : string = v1521 + v1441 
                                        let v1524 : string = v1523 + v1522 
                                        let v1525 : string = $"<ItemGroup>"
                                        let v1526 : string = v1524 + v1441 
                                        let v1527 : string = v1526 + v1525 
                                        let v1528 : string = $"    {v1435}"
                                        let v1529 : string = v1527 + v1441 
                                        let v1530 : string = v1529 + v1528 
                                        let v1531 : string = $"</ItemGroup>"
                                        let v1532 : string = v1530 + v1441 
                                        let v1533 : string = v1532 + v1531 
                                        let v1534 : string = $"</Project>"
                                        let v1535 : string = v1533 + v1441 
                                        let v1536 : string = v1535 + v1534 
                                        method32(v1438, v1536)
                                        let v1537 : string = method31(v1438)
                                        let v1538 : string = __SOURCE_DIRECTORY__
                                        let v1539 : string = method20(v1377, v1378)
                                        let v1540 : US12 = method23(v1539, v1538)
                                        let v1549 : US3 =
                                            match v1540 with
                                            | US12_1(v1543) -> (* Error *)
                                                let v1544 : US0 = US0_3
                                                let v1545 : (unit -> string) = closure9()
                                                let v1546 : (unit -> string) = closure10(v1543)
                                                method28(v1544, v1545, v1546)
                                                US3_1
                                            | US12_0(v1541) -> (* Ok *)
                                                US3_0(v1541)
                                        let v1565 : US3 =
                                            match v1549 with
                                            | US3_1 -> (* None *)
                                                let v1552 : string = method30()
                                                let v1553 : string = method20(v1377, v1378)
                                                let v1554 : US12 = method23(v1553, v1552)
                                                match v1554 with
                                                | US12_1(v1557) -> (* Error *)
                                                    let v1558 : US0 = US0_3
                                                    let v1559 : (unit -> string) = closure9()
                                                    let v1560 : (unit -> string) = closure10(v1557)
                                                    method28(v1558, v1559, v1560)
                                                    US3_1
                                                | US12_0(v1555) -> (* Ok *)
                                                    US3_0(v1555)
                                            | US3_0(v1550) -> (* Some *)
                                                US3_0(v1550)
                                        let v1569 : string =
                                            match v1565 with
                                            | US3_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US3_0(v1566) -> (* Some *)
                                                v1566
                                        let v1570 : string = method20(v1569, v1377)
                                        let v1571 : string = method30()
                                        let v1572 : (unit -> string) = v1571.ToLower
                                        let v1573 : string = v1572 ()
                                        let v1574 : (unit -> string) = v1570.ToLower
                                        let v1575 : string = v1574 ()
                                        let v1576 : bool = v1573.StartsWith v1575 
                                        let v1579 : US12 =
                                            if v1576 then
                                                US12_1(v1575)
                                            else
                                                US12_0(v1575)
                                        let v1585 : Result<string, string> =
                                            match v1579 with
                                            | US12_1(v1582) -> (* Error *)
                                                let v1583 : Result<string, string> = Error v1582 
                                                v1583
                                            | US12_0(v1580) -> (* Ok *)
                                                let v1581 : Result<string, string> = Ok v1580 
                                                v1581
                                        let v1586 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                        let v1587 : bool = Fable.Core.RustInterop.emitRustExpr v1585 v1586 
                                        let v1588 : string = "x"
                                        let v1589 : string = Fable.Core.RustInterop.emitRustExpr () v1588 
                                        let v1590 : string = "true; $0 })"
                                        let v1591 : bool = Fable.Core.RustInterop.emitRustExpr v1589 v1590 
                                        let v1592 : string = "_result"
                                        let v1593 : string = Fable.Core.RustInterop.emitRustExpr () v1592 
                                        let v1594 : string = "lib/typescript/fable/fable_modules"
                                        let v1595 : string = method20(v1593, v1594)
                                        let v1596 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v1597 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v1595 v1596 
                                        let v1598 : string = "async_walkdir::WalkDir::filter($0, |x| $1(x))"
                                        let v1599 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure120()
                                        let v1600 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v1597, v1599) v1598 
                                        let v1601 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method190()
                                        let v1602 : string = "tokio_stream::StreamExt::collect(tokio_stream::StreamExt::filter_map(v1600, |x| v1601(x))).await"
                                        let v1603 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v1602 
                                        let v1604 : string = "rayon::iter::IntoParallelIterator::into_par_iter(v1603)"
                                        let v1605 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v1604 
                                        let v1606 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v1607 : (struct (string * string) -> struct (string * string)) = closure129()
                                        let v1608 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v1605, v1607) v1606 
                                        let v1609 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v1610 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v1608 v1609 
                                        let v1611 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v1612 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v1610 v1611 
                                        let v1613 : (int32 -> ((struct (string * string) []) -> struct (string * string) option)) = Array.tryItem
                                        let v1614 : ((struct (string * string) []) -> struct (string * string) option) = v1613 0
                                        let v1615 : struct (string * string) option = v1614 v1612
                                        let v1616 : US40 option = None
                                        let _v1616 = ref v1616 
                                        match v1615 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let struct (v1617 : string, v1618 : string) = x
                                        let v1619 : US40 = US40_0(v1617, v1618)
                                        v1619 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v1616.Value <- x
                                        let v1620 : US40 option = _v1616.Value 
                                        let v1621 : US40 = US40_1
                                        let v1622 : US40 = v1620 |> Option.defaultValue v1621 
                                        let v1623 : US0 = US0_1
                                        let v1624 : (unit -> string) = closure130()
                                        let v1625 : (unit -> std_string_String) = closure131(v1622)
                                        method192(v1623, v1624, v1625)
                                        match v1622 with
                                        | US40_1 -> (* None *)
                                            ()
                                        | US40_0(v1626, v1627) -> (* Some *)
                                            let v1628 : string = $"fable-library-{v1373}.{v1627}"
                                            let v1629 : string = method20(v1595, v1628)
                                            let v1630 : string = $"fable_modules/fable-library-{v1373}.{v1627}"
                                            let v1631 : string = method20(v1537, v1630)
                                            method161(v1629, v1631)
                                        let struct (v1632 : int32, v1633 : string) = method162(v1537, v1373, v1438, v1579)
                                        let v1634 : bool = v1632 <> 0 
                                        let struct (v1844 : US3, v1845 : US3, v1846 : US3) =
                                            if v1634 then
                                                let v1635 : US0 = US0_4
                                                let v1636 : (unit -> string) = closure133()
                                                let v1637 : (unit -> struct (int32 * string)) = closure134(v1633, v1632)
                                                method168(v1635, v1636, v1637)
                                                let v1638 : US3 = US3_0(v1373)
                                                let v1639 : US3 = US3_1
                                                let v1640 : US3 = US3_0(v1633)
                                                struct (v1638, v1639, v1640)
                                            else
                                                let v1641 : string = "true; let _result : Vec<_> = v1345.into_iter().map(|x| { //"
                                                let v1642 : bool = Fable.Core.RustInterop.emitRustExpr () v1641 
                                                let v1643 : string = "x"
                                                let v1644 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1643 
                                                let v1645 : string = "fable_library_rust::String_::fromString($0)"
                                                let v1646 : string = Fable.Core.RustInterop.emitRustExpr v1644 v1645 
                                                let v1647 : string = "="
                                                let v1648 : bool = v1646.Contains v1647 
                                                let v1650 : string =
                                                    if v1648 then
                                                        v1646
                                                    else
                                                        let v1649 : string = $"\"{v1646}\":\"*\""
                                                        v1649
                                                let v1651 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v1652 : bool = Fable.Core.RustInterop.emitRustExpr v1650 v1651 
                                                let v1653 : string = "_result"
                                                let v1654 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1653 
                                                let v1655 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                let v1656 : (string []) = Fable.Core.RustInterop.emitRustExpr v1654 v1655 
                                                let v1657 : string seq = seq { for i = 0 to v1656.Length - 1 do yield v1656.[i] }
                                                let v1658 : (string -> (string seq -> string)) = String.concat
                                                let v1659 : string = ",\n"
                                                let v1660 : (string seq -> string) = v1658 v1659
                                                let v1661 : string = v1660 v1657
                                                let v1662 : string = $"{{"
                                                let v1663 : string = $"  \"name\": \"spiral_builder_{v1375}\","
                                                let v1664 : string = v1662 + v1663 
                                                let v1665 : string = $"  \"dependencies\": {{"
                                                let v1666 : string = v1664 + v1665 
                                                let v1667 : string = v1666 + v1661 
                                                let v1668 : string = $"  }},"
                                                let v1669 : string = v1667 + v1668 
                                                let v1670 : string = $"    \"devDependencies\": {{"
                                                let v1671 : string = v1669 + v1670 
                                                let v1672 : string = $"  }},"
                                                let v1673 : string = v1671 + v1672 
                                                let v1674 : string = $"}}"
                                                let v1675 : string = v1673 + v1674 
                                                let v1676 : string = "package.json"
                                                let v1677 : string = method20(v1537, v1676)
                                                let v1678 : string = "../.."
                                                let v1679 : string = method20(v1537, v1678)
                                                let v1680 : string = method20(v1679, v1676)
                                                method32(v1677, v1675)
                                                let v1681 : string = ""
                                                method32(v1680, v1681)
                                                let v1682 : string = $"{v1413}.{v1373}"
                                                let v1683 : string = method20(v1537, v1682)
                                                let v1684 : US0 = US0_1
                                                let v1685 : (unit -> string) = closure135()
                                                let v1686 : (unit -> string) = closure136(v1683)
                                                method194(v1684, v1685, v1686)
                                                let v1687 : bool = true
                                                let mutable _v1687 : string option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1688 : bool = true
                                                let mutable _v1688 : Vec<uint8> option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1689 : string = "std::fs::read(&*$0).unwrap()"
                                                let v1690 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1683 v1689 
                                                v1690 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1691 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v1691 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1692 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v1692 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1693 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v1693 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1694 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v1694 
                                                #endif
#else
                                                let v1695 : (uint8 []) = v1683 |> System.IO.File.ReadAllBytes
                                                let v1696 : string = "$0.to_vec()"
                                                let v1697 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1695 v1696 
                                                v1697 
                                                #endif
                                                |> fun x -> _v1688 <- Some x
                                                let v1698 : Vec<uint8> = match _v1688 with Some x -> x | None -> failwith "base.run_target / _v1688=None"
                                                let v1699 : Vec<uint8> = method19(v1698)
                                                let v1700 : string = "std::string::String::from_utf8($0)"
                                                let v1701 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1699 v1700 
                                                let v1702 : string = "$0.unwrap()"
                                                let v1703 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1701 v1702 
                                                let v1704 : string = "fable_library_rust::String_::fromString($0)"
                                                let v1705 : string = Fable.Core.RustInterop.emitRustExpr v1703 v1704 
                                                v1705 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1706 : string = null |> unbox<string>
                                                v1706 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1707 : string = null |> unbox<string>
                                                v1707 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1708 : string = null |> unbox<string>
                                                v1708 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1709 : string = null |> unbox<string>
                                                v1709 
                                                #endif
#else
                                                let v1710 : string = v1683 |> System.IO.File.ReadAllText
                                                v1710 
                                                #endif
                                                |> fun x -> _v1687 <- Some x
                                                let v1711 : string = match _v1687 with Some x -> x | None -> failwith "base.run_target / _v1687=None"
                                                let v1712 : string = "// spiral_builder.process_typescript"
                                                let v1713 : bool = v1711.Contains v1712 
                                                let v1738 : string =
                                                    if v1713 then
                                                        v1711
                                                    else
                                                        let v1714 : string = $"\"./fable_modules/fable-library-ts.{v1622}/"
                                                        let v1715 : string = $"\"{v1593}/lib/typescript/fable/fable_modules/fable-library-ts.{v1622}/"
                                                        let v1716 : string = v1711.Replace (v1714, v1715)
                                                        let v1717 : string = method174()
                                                        let v1718 : bool = true
                                                        let mutable _v1718 : string option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v1719 : string = method119(v1716)
                                                        let v1720 : string = $"regex::Regex::new(&$0)"
                                                        let v1721 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v1722 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v1721 v1720 
                                                        let v1723 : string = "$0.unwrap()"
                                                        let v1724 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1722 v1723 
                                                        let v1725 : string = $"$0.replace_all(&$1, &*$2)"
                                                        let v1726 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v1724, v1719, v1717) v1725 
                                                        let v1727 : string = "String::from($0)"
                                                        let v1728 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1726 v1727 
                                                        let v1729 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v1730 : string = Fable.Core.RustInterop.emitRustExpr v1728 v1729 
                                                        v1730 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v1731 : string = null |> unbox<string>
                                                        v1731 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v1732 : string = null |> unbox<string>
                                                        v1732 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v1733 : string = null |> unbox<string>
                                                        v1733 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v1734 : string = null |> unbox<string>
                                                        v1734 
                                                        #endif
#else
                                                        let v1735 : string = method175()
                                                        let v1736 : string = System.Text.RegularExpressions.Regex.Replace (v1716, v1735, v1717)
                                                        v1736 
                                                        #endif
                                                        |> fun x -> _v1718 <- Some x
                                                        let v1737 : string = match _v1718 with Some x -> x | None -> failwith "base.run_target / _v1718=None"
                                                        v1737
                                                let v1739 : bool = v1713 = false
                                                if v1739 then
                                                    let v1740 : string = $"{v1738}\n\n{v1712}\n"
                                                    method32(v1683, v1740)
                                                let v1741 : string = $"bun run \"{v1683}\""
                                                let v1742 : string = "PATH"
                                                let v1743 : string = method2(v1742)
                                                let v1744 : bool = v1743 = ""
                                                let v1771 : US3 =
                                                    if v1744 then
                                                        US3_1
                                                    else
                                                        let v1746 : bool = true
                                                        let mutable _v1746 : bool option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v1747 : string = "cfg!(windows)"
                                                        let v1748 : bool = Fable.Core.RustInterop.emitRustExpr () v1747 
                                                        v1748 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v1749 : string = "cfg!(windows)"
                                                        let v1750 : bool = Fable.Core.RustInterop.emitRustExpr () v1749 
                                                        v1750 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v1751 : string = "cfg!(windows)"
                                                        let v1752 : bool = Fable.Core.RustInterop.emitRustExpr () v1751 
                                                        v1752 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v1753 : US10 = US10_0
                                                        let v1754 : US11 = US11_3(v1753)
                                                        let v1755 : string = $"platform.is_windows / target: {v1754}"
                                                        let v1756 : bool = failwith<bool> v1755
                                                        v1756 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v1757 : US10 = US10_0
                                                        let v1758 : US11 = US11_4(v1757)
                                                        let v1759 : string = $"platform.is_windows / target: {v1758}"
                                                        let v1760 : bool = failwith<bool> v1759
                                                        v1760 
                                                        #endif
#else
                                                        let v1761 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v1762 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v1763 : bool = v1762 v1761
                                                        v1763 
                                                        #endif
                                                        |> fun x -> _v1746 <- Some x
                                                        let v1764 : bool = match _v1746 with Some x -> x | None -> failwith "base.run_target / _v1746=None"
                                                        let v1767 : string =
                                                            if v1764 then
                                                                let v1765 : string = ";"
                                                                v1765
                                                            else
                                                                let v1766 : string = ":"
                                                                v1766
                                                        let v1768 : string = "~/.bun/bin"
                                                        let v1769 : string = $"{v1768}{v1767}{v1743}"
                                                        US3_0(v1769)
                                                let v1777 : UH5 =
                                                    match v1771 with
                                                    | US3_1 -> (* None *)
                                                        UH5_0
                                                    | US3_0(v1772) -> (* Some *)
                                                        let v1773 : UH5 = UH5_0
                                                        UH5_1(v1742, v1772, v1773)
                                                let v1778 : string = "TRACE_LEVEL"
                                                let v1779 : string = "Verbose"
                                                let v1780 : UH5 = UH5_0
                                                let v1781 : UH5 = UH5_1(v1778, v1779, v1780)
                                                let v1782 : UH5 = method196(v1777, v1781)
                                                let v1783 : struct (string * string) list = []
                                                let v1784 : struct (string * string) list = method197(v1782, v1783)
                                                let v1785 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v1786 : (struct (string * string) []) = v1785 v1784
                                                let v1787 : System.Threading.CancellationToken option = None
                                                let v1788 : (struct (string * string) []) = [||]
                                                let v1789 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v1790 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v1791 : string option = None
                                                let v1797 : Result<string, string> =
                                                    match v1579 with
                                                    | US12_1(v1794) -> (* Error *)
                                                        let v1795 : Result<string, string> = Error v1794 
                                                        v1795
                                                    | US12_0(v1792) -> (* Ok *)
                                                        let v1793 : Result<string, string> = Ok v1792 
                                                        v1793
                                                let v1798 : string = "v1797.ok()"
                                                let v1799 : string option = Fable.Core.RustInterop.emitRustExpr () v1798 
                                                let v1800 : bool = true
                                                let struct (v1801 : int32, v1802 : string) = method36(v1741, v1787, v1786, v1789, v1790, v1800, v1799)
                                                let v1803 : int32 = v1786.Length
                                                let v1804 : (string []) = Array.zeroCreate<string> (v1803)
                                                let v1805 : Mut5 = {l0 = 0} : Mut5
                                                while method39(v1803, v1805) do
                                                    let v1807 : int32 = v1805.l0
                                                    let struct (v1808 : string, v1809 : string) = v1786.[int v1807]
                                                    let v1810 : string = $"$env:{v1808}=''{v1809}''"
                                                    v1804.[int v1807] <- v1810
                                                    let v1811 : int32 = v1807 + 1
                                                    v1805.l0 <- v1811
                                                    ()
                                                let v1812 : ((string []) -> string seq) = Seq.ofArray
                                                let v1813 : string seq = v1812 v1804
                                                let v1814 : (string -> (string seq -> string)) = String.concat
                                                let v1815 : string = ";"
                                                let v1816 : (string seq -> string) = v1814 v1815
                                                let v1817 : string = v1816 v1813
                                                let v1818 : string = $"pwsh -c '{v1817}; {v1741}'"
                                                let v1819 : bool = v1801 = 0
                                                let struct (v1841 : US3, v1842 : US3, v1843 : US3) =
                                                    if v1819 then
                                                        let v1820 : (string -> US3) = closure59()
                                                        let v1821 : (unit -> string) = closure138(v1802)
                                                        let v1822 : (exn -> US3) = closure139(v1683, v1802, v1818)
                                                        let v1823 : US3 = US3_1
                                                        let result = ref v1823
                                                        try
                                                            result.Value <- v1821 () |> v1820 
                                                        with ex ->
                                                            result.Value <- v1822 ex 
                                                        let v1824 : US3 = result.Value
                                                        let v1829 : string option =
                                                            match v1824 with
                                                            | US3_1 -> (* None *)
                                                                let v1827 : string option = None
                                                                v1827
                                                            | US3_0(v1825) -> (* Some *)
                                                                let v1826 : string option = Some v1825 
                                                                v1826
                                                        let v1830 : string = "$0.unwrap()"
                                                        let v1831 : string = Fable.Core.RustInterop.emitRustExpr v1829 v1830 
                                                        let v1832 : US3 = US3_0(v1373)
                                                        let v1833 : US3 = US3_0(v1738)
                                                        let v1834 : US3 = US3_0(v1831)
                                                        struct (v1832, v1833, v1834)
                                                    else
                                                        let v1835 : US0 = US0_4
                                                        let v1836 : (unit -> string) = closure143()
                                                        let v1837 : (unit -> struct (int32 * string * string * string)) = closure144(v1683, v1802, v1801, v1818)
                                                        method108(v1835, v1836, v1837)
                                                        let v1838 : US3 = US3_0(v1373)
                                                        let v1839 : US3 = US3_1
                                                        let v1840 : US3 = US3_1
                                                        struct (v1838, v1839, v1840)
                                                struct (v1841, v1842, v1843)
                                        struct (v1844, v1845, v1846)
                                    else
                                        let v1847 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1848 : string = Fable.Core.RustInterop.emitRustExpr v13 v1847 
                                        let v1850 : bool = v1848 = "python"
                                        let struct (v2321 : US3, v2322 : US3, v2323 : US3) =
                                            if v1850 then
                                                let v1851 : string = method110()
                                                let v1852 : string = "&*$0"
                                                let v1853 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1851 v1852 
                                                let v1854 : string = "clap::ArgMatches::get_one(&$0, v1853).cloned()"
                                                let v1855 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v14 v1854 
                                                let v1856 : US5 option = None
                                                let _v1856 = ref v1856 
                                                match v1855 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v1857 : std_string_String = x
                                                let v1858 : US5 = US5_0(v1857)
                                                v1858 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v1856.Value <- x
                                                let v1859 : US5 option = _v1856.Value 
                                                let v1860 : US5 = US5_1
                                                let v1861 : US5 = v1859 |> Option.defaultValue v1860 
                                                let v1865 : std_string_String =
                                                    match v1861 with
                                                    | US5_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US5_0(v1862) -> (* Some *)
                                                        v1862
                                                let v1866 : string = "fable_library_rust::String_::fromString($0)"
                                                let v1867 : string = Fable.Core.RustInterop.emitRustExpr v1865 v1866 
                                                let v1868 : string = method18()
                                                let v1869 : string = "&*$0"
                                                let v1870 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1868 v1869 
                                                let v1871 : string = "clap::ArgMatches::get_many(&$0, v1870).map(|x| x.cloned().into_iter().collect())"
                                                let v1872 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v14 v1871 
                                                let v1873 : US9 option = None
                                                let _v1873 = ref v1873 
                                                match v1872 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v1874 : Vec<std_string_String> = x
                                                let v1875 : US9 = US9_0(v1874)
                                                v1875 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v1873.Value <- x
                                                let v1876 : US9 option = _v1873.Value 
                                                let v1877 : US9 = US9_1
                                                let v1878 : US9 = v1876 |> Option.defaultValue v1877 
                                                let v1879 : (std_string_String []) = [||]
                                                let v1880 : string = "$0.to_vec()"
                                                let v1881 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1879 v1880 
                                                let v1884 : Vec<std_string_String> =
                                                    match v1878 with
                                                    | US9_1 -> (* None *)
                                                        v1881
                                                    | US9_0(v1882) -> (* Some *)
                                                        v1882
                                                let v1886 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v1887 : bool = true
                                                let mutable _v1887 : string option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1888 : bool = true
                                                let mutable _v1888 : Vec<uint8> option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1889 : string = "std::fs::read(&*$0).unwrap()"
                                                let v1890 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1867 v1889 
                                                v1890 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1891 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v1891 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1892 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v1892 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1893 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v1893 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1894 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v1894 
                                                #endif
#else
                                                let v1895 : (uint8 []) = v1867 |> System.IO.File.ReadAllBytes
                                                let v1896 : string = "$0.to_vec()"
                                                let v1897 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1895 v1896 
                                                v1897 
                                                #endif
                                                |> fun x -> _v1888 <- Some x
                                                let v1898 : Vec<uint8> = match _v1888 with Some x -> x | None -> failwith "base.run_target / _v1888=None"
                                                let v1899 : Vec<uint8> = method19(v1898)
                                                let v1900 : string = "std::string::String::from_utf8($0)"
                                                let v1901 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1899 v1900 
                                                let v1902 : string = "$0.unwrap()"
                                                let v1903 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1901 v1902 
                                                let v1904 : string = "fable_library_rust::String_::fromString($0)"
                                                let v1905 : string = Fable.Core.RustInterop.emitRustExpr v1903 v1904 
                                                v1905 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1906 : string = null |> unbox<string>
                                                v1906 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1907 : string = null |> unbox<string>
                                                v1907 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1908 : string = null |> unbox<string>
                                                v1908 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1909 : string = null |> unbox<string>
                                                v1909 
                                                #endif
#else
                                                let v1910 : string = v1867 |> System.IO.File.ReadAllText
                                                v1910 
                                                #endif
                                                |> fun x -> _v1887 <- Some x
                                                let v1911 : string = match _v1887 with Some x -> x | None -> failwith "base.run_target / _v1887=None"
                                                let v1912 : string = "py"
                                                let v1913 : string = $"%A{struct (v1912, v1911)}"
                                                let v1914 : string = method135(v1913)
                                                let v1915 : string = __SOURCE_DIRECTORY__
                                                let v1916 : string = "polyglot"
                                                let v1917 : string = ".paket"
                                                let v1918 : string = method20(v1916, v1917)
                                                let v1919 : US12 = method23(v1918, v1915)
                                                let v1928 : US3 =
                                                    match v1919 with
                                                    | US12_1(v1922) -> (* Error *)
                                                        let v1923 : US0 = US0_3
                                                        let v1924 : (unit -> string) = closure9()
                                                        let v1925 : (unit -> string) = closure10(v1922)
                                                        method28(v1923, v1924, v1925)
                                                        US3_1
                                                    | US12_0(v1920) -> (* Ok *)
                                                        US3_0(v1920)
                                                let v1944 : US3 =
                                                    match v1928 with
                                                    | US3_1 -> (* None *)
                                                        let v1931 : string = method30()
                                                        let v1932 : string = method20(v1916, v1917)
                                                        let v1933 : US12 = method23(v1932, v1931)
                                                        match v1933 with
                                                        | US12_1(v1936) -> (* Error *)
                                                            let v1937 : US0 = US0_3
                                                            let v1938 : (unit -> string) = closure9()
                                                            let v1939 : (unit -> string) = closure10(v1936)
                                                            method28(v1937, v1938, v1939)
                                                            US3_1
                                                        | US12_0(v1934) -> (* Ok *)
                                                            US3_0(v1934)
                                                    | US3_0(v1929) -> (* Some *)
                                                        US3_0(v1929)
                                                let v1948 : string =
                                                    match v1944 with
                                                    | US3_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US3_0(v1945) -> (* Some *)
                                                        v1945
                                                let v1949 : string = method20(v1948, v1916)
                                                let v1950 : string = "target/spiral_builder"
                                                let v1951 : string = method20(v1949, v1950)
                                                let v1952 : string = "spiral_builder"
                                                let v1953 : string = method20(v1951, v1952)
                                                let v1954 : string = "packages"
                                                let v1955 : string = method20(v1953, v1954)
                                                let v1956 : string = method20(v1955, v1914)
                                                let v1957 : System.IDisposable = method137(v1956)
                                                let v1958 : string = $"{v1952}.fs"
                                                let v1959 : string = method20(v1956, v1958)
                                                let v1960 : string = method117(v1959)
                                                method32(v1960, v1911)
                                                let v1961 : string list = []
                                                let v1962 : string seq = seq { for i = 0 to v1961.Length - 1 do yield v1961.[i] }
                                                let v1963 : (string -> (string seq -> string)) = String.concat
                                                let v1964 : string = "\\n        "
                                                let v1965 : (string seq -> string) = v1963 v1964
                                                let v1966 : string = v1965 v1962
                                                let v1967 : string = "Fable.Core"
                                                let v1968 : string = $"<PackageReference Include=\"{v1967}\" Version=\"*\" />"
                                                let v1969 : string list = []
                                                let v1970 : string list = v1968 :: v1969 
                                                let v1971 : string seq = seq { for i = 0 to v1970.Length - 1 do yield v1970.[i] }
                                                let v1972 : (string -> (string seq -> string)) = String.concat
                                                let v1973 : (string seq -> string) = v1972 v1964
                                                let v1974 : string = v1973 v1971
                                                let v1975 : string = $"{v1952}.fsproj"
                                                let v1976 : string = method20(v1956, v1975)
                                                let v1977 : string = method117(v1976)
                                                let v1978 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                                let v1979 : string = $"<PropertyGroup>"
                                                let v1980 : string = "\n"
                                                let v1981 : string = v1978 + v1980 
                                                let v1982 : string = v1981 + v1979 
                                                let v1983 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                                let v1984 : string = v1982 + v1980 
                                                let v1985 : string = v1984 + v1983 
                                                let v1986 : string = $"    <LangVersion>preview</LangVersion>"
                                                let v1987 : string = v1985 + v1980 
                                                let v1988 : string = v1987 + v1986 
                                                let v1989 : string = $"    <RollForward>Major</RollForward>"
                                                let v1990 : string = v1988 + v1980 
                                                let v1991 : string = v1990 + v1989 
                                                let v1992 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                                let v1993 : string = v1991 + v1980 
                                                let v1994 : string = v1993 + v1992 
                                                let v1995 : string = $"    <PublishAot>false</PublishAot>"
                                                let v1996 : string = v1994 + v1980 
                                                let v1997 : string = v1996 + v1995 
                                                let v1998 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                                let v1999 : string = v1997 + v1980 
                                                let v2000 : string = v1999 + v1998 
                                                let v2001 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                                let v2002 : string = v2000 + v1980 
                                                let v2003 : string = v2002 + v2001 
                                                let v2004 : string = $"    <SelfContained>true</SelfContained>"
                                                let v2005 : string = v2003 + v1980 
                                                let v2006 : string = v2005 + v2004 
                                                let v2007 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                                let v2008 : string = v2006 + v1980 
                                                let v2009 : string = v2008 + v2007 
                                                let v2010 : string = $"    <OutputType>Exe</OutputType>"
                                                let v2011 : string = v2009 + v1980 
                                                let v2012 : string = v2011 + v2010 
                                                let v2013 : string = $"</PropertyGroup>"
                                                let v2014 : string = v2012 + v1980 
                                                let v2015 : string = v2014 + v2013 
                                                let v2016 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                                let v2017 : string = v2015 + v1980 
                                                let v2018 : string = v2017 + v2016 
                                                let v2019 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                                let v2020 : string = v2018 + v1980 
                                                let v2021 : string = v2020 + v2019 
                                                let v2022 : string = $"</PropertyGroup>"
                                                let v2023 : string = v2021 + v1980 
                                                let v2024 : string = v2023 + v2022 
                                                let v2025 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                                let v2026 : string = v2024 + v1980 
                                                let v2027 : string = v2026 + v2025 
                                                let v2028 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                                let v2029 : string = v2027 + v1980 
                                                let v2030 : string = v2029 + v2028 
                                                let v2031 : string = $"</PropertyGroup>"
                                                let v2032 : string = v2030 + v1980 
                                                let v2033 : string = v2032 + v2031 
                                                let v2034 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                                let v2035 : string = v2033 + v1980 
                                                let v2036 : string = v2035 + v2034 
                                                let v2037 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                                let v2038 : string = v2036 + v1980 
                                                let v2039 : string = v2038 + v2037 
                                                let v2040 : string = $"</PropertyGroup>"
                                                let v2041 : string = v2039 + v1980 
                                                let v2042 : string = v2041 + v2040 
                                                let v2043 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                                let v2044 : string = v2042 + v1980 
                                                let v2045 : string = v2044 + v2043 
                                                let v2046 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                                let v2047 : string = v2045 + v1980 
                                                let v2048 : string = v2047 + v2046 
                                                let v2049 : string = $"</PropertyGroup>"
                                                let v2050 : string = v2048 + v1980 
                                                let v2051 : string = v2050 + v2049 
                                                let v2052 : string = $"<ItemGroup>"
                                                let v2053 : string = v2051 + v1980 
                                                let v2054 : string = v2053 + v2052 
                                                let v2055 : string = $"    {v1966}"
                                                let v2056 : string = v2054 + v1980 
                                                let v2057 : string = v2056 + v2055 
                                                let v2058 : string = $"    <Compile Include=\"{v1960}\" />"
                                                let v2059 : string = v2057 + v1980 
                                                let v2060 : string = v2059 + v2058 
                                                let v2061 : string = $"</ItemGroup>"
                                                let v2062 : string = v2060 + v1980 
                                                let v2063 : string = v2062 + v2061 
                                                let v2064 : string = $"<ItemGroup>"
                                                let v2065 : string = v2063 + v1980 
                                                let v2066 : string = v2065 + v2064 
                                                let v2067 : string = $"    {v1974}"
                                                let v2068 : string = v2066 + v1980 
                                                let v2069 : string = v2068 + v2067 
                                                let v2070 : string = $"</ItemGroup>"
                                                let v2071 : string = v2069 + v1980 
                                                let v2072 : string = v2071 + v2070 
                                                let v2073 : string = $"</Project>"
                                                let v2074 : string = v2072 + v1980 
                                                let v2075 : string = v2074 + v2073 
                                                method32(v1977, v2075)
                                                let v2076 : string = method31(v1977)
                                                let v2077 : string = __SOURCE_DIRECTORY__
                                                let v2078 : string = method20(v1916, v1917)
                                                let v2079 : US12 = method23(v2078, v2077)
                                                let v2088 : US3 =
                                                    match v2079 with
                                                    | US12_1(v2082) -> (* Error *)
                                                        let v2083 : US0 = US0_3
                                                        let v2084 : (unit -> string) = closure9()
                                                        let v2085 : (unit -> string) = closure10(v2082)
                                                        method28(v2083, v2084, v2085)
                                                        US3_1
                                                    | US12_0(v2080) -> (* Ok *)
                                                        US3_0(v2080)
                                                let v2104 : US3 =
                                                    match v2088 with
                                                    | US3_1 -> (* None *)
                                                        let v2091 : string = method30()
                                                        let v2092 : string = method20(v1916, v1917)
                                                        let v2093 : US12 = method23(v2092, v2091)
                                                        match v2093 with
                                                        | US12_1(v2096) -> (* Error *)
                                                            let v2097 : US0 = US0_3
                                                            let v2098 : (unit -> string) = closure9()
                                                            let v2099 : (unit -> string) = closure10(v2096)
                                                            method28(v2097, v2098, v2099)
                                                            US3_1
                                                        | US12_0(v2094) -> (* Ok *)
                                                            US3_0(v2094)
                                                    | US3_0(v2089) -> (* Some *)
                                                        US3_0(v2089)
                                                let v2108 : string =
                                                    match v2104 with
                                                    | US3_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US3_0(v2105) -> (* Some *)
                                                        v2105
                                                let v2109 : string = method20(v2108, v1916)
                                                let v2110 : string = method30()
                                                let v2111 : (unit -> string) = v2110.ToLower
                                                let v2112 : string = v2111 ()
                                                let v2113 : (unit -> string) = v2109.ToLower
                                                let v2114 : string = v2113 ()
                                                let v2115 : bool = v2112.StartsWith v2114 
                                                let v2118 : US12 =
                                                    if v2115 then
                                                        US12_1(v2114)
                                                    else
                                                        US12_0(v2114)
                                                let v2124 : Result<string, string> =
                                                    match v2118 with
                                                    | US12_1(v2121) -> (* Error *)
                                                        let v2122 : Result<string, string> = Error v2121 
                                                        v2122
                                                    | US12_0(v2119) -> (* Ok *)
                                                        let v2120 : Result<string, string> = Ok v2119 
                                                        v2120
                                                let v2125 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                                let v2126 : bool = Fable.Core.RustInterop.emitRustExpr v2124 v2125 
                                                let v2127 : string = "x"
                                                let v2128 : string = Fable.Core.RustInterop.emitRustExpr () v2127 
                                                let v2129 : string = "true; $0 })"
                                                let v2130 : bool = Fable.Core.RustInterop.emitRustExpr v2128 v2129 
                                                let v2131 : string = "_result"
                                                let v2132 : string = Fable.Core.RustInterop.emitRustExpr () v2131 
                                                let v2133 : string = "lib/python/fable/fable_modules"
                                                let v2134 : string = method20(v2132, v2133)
                                                let v2135 : string = $"fable-library-{v1912}"
                                                let v2136 : string = method20(v2134, v2135)
                                                let v2137 : string = $"fable_modules/fable-library"
                                                let v2138 : string = method20(v2076, v2137)
                                                method161(v2136, v2138)
                                                let struct (v2139 : int32, v2140 : string) = method162(v2076, v1912, v1977, v2118)
                                                let v2141 : bool = v2139 <> 0 
                                                let struct (v2312 : US3, v2313 : US3, v2314 : US3) =
                                                    if v2141 then
                                                        let v2142 : US0 = US0_4
                                                        let v2143 : (unit -> string) = closure145()
                                                        let v2144 : (unit -> struct (int32 * string)) = closure146(v2140, v2139)
                                                        method168(v2142, v2143, v2144)
                                                        let v2145 : US3 = US3_0(v1912)
                                                        let v2146 : US3 = US3_1
                                                        let v2147 : US3 = US3_0(v2140)
                                                        struct (v2145, v2146, v2147)
                                                    else
                                                        let v2148 : string = "true; let _result : Vec<_> = v1884.into_iter().map(|x| { //"
                                                        let v2149 : bool = Fable.Core.RustInterop.emitRustExpr () v2148 
                                                        let v2150 : string = "x"
                                                        let v2151 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2150 
                                                        let v2152 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v2153 : string = Fable.Core.RustInterop.emitRustExpr v2151 v2152 
                                                        let v2154 : string = "="
                                                        let v2155 : bool = v2153.Contains v2154 
                                                        let v2157 : string =
                                                            if v2155 then
                                                                v2153
                                                            else
                                                                let v2156 : string = $"\"{v2153}\":\"*\""
                                                                v2156
                                                        let v2158 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v2159 : bool = Fable.Core.RustInterop.emitRustExpr v2157 v2158 
                                                        let v2160 : string = "_result"
                                                        let v2161 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2160 
                                                        let v2162 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                        let v2163 : (string []) = Fable.Core.RustInterop.emitRustExpr v2161 v2162 
                                                        let v2164 : string seq = seq { for i = 0 to v2163.Length - 1 do yield v2163.[i] }
                                                        let v2165 : (string -> (string seq -> string)) = String.concat
                                                        let v2166 : string = ",\n"
                                                        let v2167 : (string seq -> string) = v2165 v2166
                                                        let v2168 : string = v2167 v2164
                                                        let v2169 : string = $"{{"
                                                        let v2170 : string = $"  \"name\": \"spiral_builder_{v1914}\","
                                                        let v2171 : string = v2169 + v2170 
                                                        let v2172 : string = $"  \"dependencies\": {{"
                                                        let v2173 : string = v2171 + v2172 
                                                        let v2174 : string = v2173 + v2168 
                                                        let v2175 : string = $"  }},"
                                                        let v2176 : string = v2174 + v2175 
                                                        let v2177 : string = $"    \"devDependencies\": {{"
                                                        let v2178 : string = v2176 + v2177 
                                                        let v2179 : string = $"  }},"
                                                        let v2180 : string = v2178 + v2179 
                                                        let v2181 : string = $"}}"
                                                        let v2182 : string = v2180 + v2181 
                                                        let v2183 : string = "package.json"
                                                        let v2184 : string = method20(v2076, v2183)
                                                        let v2185 : string = "../.."
                                                        let v2186 : string = method20(v2076, v2185)
                                                        let v2187 : string = method20(v2186, v2183)
                                                        method32(v2184, v2182)
                                                        let v2188 : string = ""
                                                        method32(v2187, v2188)
                                                        let v2189 : string = $"{v1952}.{v1912}"
                                                        let v2190 : string = method20(v2076, v2189)
                                                        let v2191 : US0 = US0_1
                                                        let v2192 : (unit -> string) = closure147()
                                                        let v2193 : (unit -> string) = closure148(v2190)
                                                        method194(v2191, v2192, v2193)
                                                        let v2194 : bool = true
                                                        let mutable _v2194 : string option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v2195 : bool = true
                                                        let mutable _v2195 : Vec<uint8> option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v2196 : string = "std::fs::read(&*$0).unwrap()"
                                                        let v2197 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2190 v2196 
                                                        v2197 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v2198 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v2198 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v2199 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v2199 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v2200 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v2200 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v2201 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v2201 
                                                        #endif
#else
                                                        let v2202 : (uint8 []) = v2190 |> System.IO.File.ReadAllBytes
                                                        let v2203 : string = "$0.to_vec()"
                                                        let v2204 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2202 v2203 
                                                        v2204 
                                                        #endif
                                                        |> fun x -> _v2195 <- Some x
                                                        let v2205 : Vec<uint8> = match _v2195 with Some x -> x | None -> failwith "base.run_target / _v2195=None"
                                                        let v2206 : Vec<uint8> = method19(v2205)
                                                        let v2207 : string = "std::string::String::from_utf8($0)"
                                                        let v2208 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2206 v2207 
                                                        let v2209 : string = "$0.unwrap()"
                                                        let v2210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2208 v2209 
                                                        let v2211 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v2212 : string = Fable.Core.RustInterop.emitRustExpr v2210 v2211 
                                                        v2212 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v2213 : string = null |> unbox<string>
                                                        v2213 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v2214 : string = null |> unbox<string>
                                                        v2214 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v2215 : string = null |> unbox<string>
                                                        v2215 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v2216 : string = null |> unbox<string>
                                                        v2216 
                                                        #endif
#else
                                                        let v2217 : string = v2190 |> System.IO.File.ReadAllText
                                                        v2217 
                                                        #endif
                                                        |> fun x -> _v2194 <- Some x
                                                        let v2218 : string = match _v2194 with Some x -> x | None -> failwith "base.run_target / _v2194=None"
                                                        let v2219 : string = "# spiral_builder.process_python"
                                                        let v2220 : bool = v2218.Contains v2219 
                                                        let v2248 : string =
                                                            if v2220 then
                                                                v2218
                                                            else
                                                                let v2221 : string = "\";\".into()"
                                                                let v2222 : string = Fable.Core.RustInterop.emitRustExpr () v2221 
                                                                let v2223 : string = "),)"
                                                                let v2224 : string = v2223 + v2222 
                                                                let v2225 : string = "));"
                                                                let v2226 : string = v2218.Replace (v2224, v2225)
                                                                let v2227 : string = method174()
                                                                let v2228 : bool = true
                                                                let mutable _v2228 : string option = None 
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v2229 : string = method119(v2226)
                                                                let v2230 : string = $"regex::Regex::new(&$0)"
                                                                let v2231 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v2232 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v2231 v2230 
                                                                let v2233 : string = "$0.unwrap()"
                                                                let v2234 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v2232 v2233 
                                                                let v2235 : string = $"$0.replace_all(&$1, &*$2)"
                                                                let v2236 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v2234, v2229, v2227) v2235 
                                                                let v2237 : string = "String::from($0)"
                                                                let v2238 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2236 v2237 
                                                                let v2239 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v2240 : string = Fable.Core.RustInterop.emitRustExpr v2238 v2239 
                                                                v2240 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v2241 : string = null |> unbox<string>
                                                                v2241 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v2242 : string = null |> unbox<string>
                                                                v2242 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                let v2243 : string = null |> unbox<string>
                                                                v2243 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                let v2244 : string = null |> unbox<string>
                                                                v2244 
                                                                #endif
#else
                                                                let v2245 : string = method175()
                                                                let v2246 : string = System.Text.RegularExpressions.Regex.Replace (v2226, v2245, v2227)
                                                                v2246 
                                                                #endif
                                                                |> fun x -> _v2228 <- Some x
                                                                let v2247 : string = match _v2228 with Some x -> x | None -> failwith "base.run_target / _v2228=None"
                                                                v2247
                                                        let v2249 : bool = v2220 = false
                                                        if v2249 then
                                                            let v2250 : string = $"{v2248}\n\n{v2219}\n"
                                                            method32(v2190, v2250)
                                                        let v2251 : string = $"python \"{v2190}\""
                                                        let v2252 : string = "TRACE_LEVEL"
                                                        let v2253 : string = "Verbose"
                                                        let v2254 : (struct (string * string) []) = [|struct (v2252, v2253)|]
                                                        let v2255 : System.Threading.CancellationToken option = None
                                                        let v2256 : (struct (string * string) []) = [||]
                                                        let v2257 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v2258 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v2259 : string option = None
                                                        let v2265 : Result<string, string> =
                                                            match v2118 with
                                                            | US12_1(v2262) -> (* Error *)
                                                                let v2263 : Result<string, string> = Error v2262 
                                                                v2263
                                                            | US12_0(v2260) -> (* Ok *)
                                                                let v2261 : Result<string, string> = Ok v2260 
                                                                v2261
                                                        let v2266 : string = "v2265.ok()"
                                                        let v2267 : string option = Fable.Core.RustInterop.emitRustExpr () v2266 
                                                        let v2268 : bool = true
                                                        let struct (v2269 : int32, v2270 : string) = method36(v2251, v2255, v2254, v2257, v2258, v2268, v2267)
                                                        let v2271 : int32 = v2254.Length
                                                        let v2272 : (string []) = Array.zeroCreate<string> (v2271)
                                                        let v2273 : Mut5 = {l0 = 0} : Mut5
                                                        while method39(v2271, v2273) do
                                                            let v2275 : int32 = v2273.l0
                                                            let struct (v2276 : string, v2277 : string) = v2254.[int v2275]
                                                            let v2278 : string = $"$env:{v2276}=''{v2277}''"
                                                            v2272.[int v2275] <- v2278
                                                            let v2279 : int32 = v2275 + 1
                                                            v2273.l0 <- v2279
                                                            ()
                                                        let v2280 : ((string []) -> string seq) = Seq.ofArray
                                                        let v2281 : string seq = v2280 v2272
                                                        let v2282 : (string -> (string seq -> string)) = String.concat
                                                        let v2283 : string = ";"
                                                        let v2284 : (string seq -> string) = v2282 v2283
                                                        let v2285 : string = v2284 v2281
                                                        let v2286 : string = $"pwsh -c '{v2285}; {v2251}'"
                                                        let v2287 : bool = v2269 = 0
                                                        let struct (v2309 : US3, v2310 : US3, v2311 : US3) =
                                                            if v2287 then
                                                                let v2288 : (string -> US3) = closure59()
                                                                let v2289 : (unit -> string) = closure149(v2270)
                                                                let v2290 : (exn -> US3) = closure150(v2190, v2270, v2286)
                                                                let v2291 : US3 = US3_1
                                                                let result = ref v2291
                                                                try
                                                                    result.Value <- v2289 () |> v2288 
                                                                with ex ->
                                                                    result.Value <- v2290 ex 
                                                                let v2292 : US3 = result.Value
                                                                let v2297 : string option =
                                                                    match v2292 with
                                                                    | US3_1 -> (* None *)
                                                                        let v2295 : string option = None
                                                                        v2295
                                                                    | US3_0(v2293) -> (* Some *)
                                                                        let v2294 : string option = Some v2293 
                                                                        v2294
                                                                let v2298 : string = "$0.unwrap()"
                                                                let v2299 : string = Fable.Core.RustInterop.emitRustExpr v2297 v2298 
                                                                let v2300 : US3 = US3_0(v1912)
                                                                let v2301 : US3 = US3_0(v2248)
                                                                let v2302 : US3 = US3_0(v2299)
                                                                struct (v2300, v2301, v2302)
                                                            else
                                                                let v2303 : US0 = US0_4
                                                                let v2304 : (unit -> string) = closure153()
                                                                let v2305 : (unit -> struct (int32 * string * string * string)) = closure154(v2190, v2270, v2269, v2286)
                                                                method108(v2303, v2304, v2305)
                                                                let v2306 : US3 = US3_0(v1912)
                                                                let v2307 : US3 = US3_1
                                                                let v2308 : US3 = US3_1
                                                                struct (v2306, v2307, v2308)
                                                        struct (v2309, v2310, v2311)
                                                struct (v2312, v2313, v2314)
                                            else
                                                let v2315 : US0 = US0_1
                                                let v2316 : (unit -> string) = closure155()
                                                let v2317 : (unit -> struct (std_string_String * clap_ArgMatches)) = closure156(v14, v13)
                                                method200(v2315, v2316, v2317)
                                                let v2318 : US3 = US3_1
                                                let v2319 : US3 = US3_1
                                                let v2320 : US3 = US3_1
                                                struct (v2318, v2319, v2320)
                                        struct (v2321, v2322, v2323)
                                struct (v2324, v2325, v2326)
                        let v2333 : string =
                            match v2327 with
                            | US3_1 -> (* None *)
                                let v2331 : string = ""
                                v2331
                            | US3_0(v2330) -> (* Some *)
                                v2330
                        let v2334 : string = "extension"
                        let v2338 : string =
                            match v2328 with
                            | US3_1 -> (* None *)
                                let v2336 : string = ""
                                v2336
                            | US3_0(v2335) -> (* Some *)
                                v2335
                        let v2339 : string = "code"
                        let v2343 : string =
                            match v2329 with
                            | US3_1 -> (* None *)
                                let v2341 : string = ""
                                v2341
                            | US3_0(v2340) -> (* Some *)
                                v2340
                        let v2344 : string = "output"
                        [|struct (v2334, v2333); struct (v2339, v2338); struct (v2344, v2343)|]
        | _ ->
            let v2349 : string = "extension"
            let v2350 : string = ""
            let v2351 : string = "code"
            let v2352 : string = "output"
            [|struct (v2349, v2350); struct (v2351, v2350); struct (v2352, v2350)|]
    let v2355 : string = "$0.to_vec()"
    let v2356 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2354 v2355 
    let v2357 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v2358 : (struct (string * string) -> (std_string_String * std_string_String)) = closure158()
    let v2359 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v2356, v2358) v2357 
    let v2360 : string = "std::collections::BTreeMap::from_iter(v2359.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v2361 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2360 
    let v2362 : string = "serde_json::to_string(&v2361)"
    let v2363 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v2362 
    let v2364 : (serde_json_Error -> string) = method203()
    let v2365 : string = "$0.map_err(|x| $1(x))"
    let v2366 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v2363, v2364) v2365 
    let v2367 : string = "true; let _result = $0.map(|x| { //"
    let v2368 : bool = Fable.Core.RustInterop.emitRustExpr v2366 v2367 
    let v2369 : string = "x"
    let v2370 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2369 
    let v2371 : string = "fable_library_rust::String_::fromString($0)"
    let v2372 : string = Fable.Core.RustInterop.emitRustExpr v2370 v2371 
    let v2373 : string = "true; $0 })"
    let v2374 : bool = Fable.Core.RustInterop.emitRustExpr v2372 v2373 
    let v2375 : string = "_result"
    let v2376 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v2375 
    let v2377 : Result<string, string> = method204(v2376)
    let v2378 : string = ""
    let v2379 : string = "}"
    let v2380 : string = v2378 + v2379 
    let v2381 : string = v2380 + v2379 
    let v2382 : string = v2381 + v2379 
    let v2383 : string = "{"
    let v2384 : string = v2378 + v2383 
    let v2385 : string = v2384 + v2383 
    let v2386 : string = "v2377 " + v2382 + "); " + v2385 + " //"
    Fable.Core.RustInterop.emitRustExpr () v2386 
    let v2387 : string = "__result"
    let v2388 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v2387 
    v2388
and closure1 () (v0 : (string [])) : int32 =
    let v1 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v2 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v1 v2 |> Some
    let struct (v3 : Mut0, v4 : Mut1, v5 : Mut2, v6 : Mut3, v7 : int64 option) = State.trace_state.Value
    let v8 : US0 = US0_1
    let v9 : (unit -> string) = closure4()
    let v10 : (unit -> (string [])) = closure5(v0)
    method5(v8, v9, v10)
    let v11 : clap_Command = method0()
    let v12 : string = "clap::Command::get_matches($0)"
    let v13 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : US0 = v6.l0
    let v15 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method15(v14, v13)
    let v16 : string = $"tokio::runtime::Builder::new_multi_thread().enable_all().build().unwrap()"
    let v17 : _ = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.handle().block_on($0)"
    let v19 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v15 v18 
    let v20 : string = "$0.unwrap()"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : US0 = v6.l0
    let v24 : bool =
        match v22 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v24 then
        let v25 : (string -> unit) = System.Console.WriteLine
        v25 v21
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
