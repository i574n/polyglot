#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_7e2cd9e0 {
    pub mod Spiral_builder {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::Interfaces_::System::IDisposable;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::item;
        use fable_library_rust::List_::length as length_1;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::singleton;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::List_::List;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::NativeArray_::count as count_2;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::defaultOf;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::getValue;
        use fable_library_rust::Option_::map as map_1;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::padLeft;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::replicate;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::toUpper;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::zero;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type ConcurrentStack_1<T> = T;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::Text::StringBuilder;
        type CancellationToken = ();
        type TaskCanceledException = ();
        type TimeZoneInfo = i64;
        pub mod State {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral_builder::Mut0>,
                        LrcPtr<Spiral_builder::Mut1>,
                        LrcPtr<Spiral_builder::Mut2>,
                        LrcPtr<Spiral_builder::Mut3>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + Clone + 'static> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub trait IPathJoin {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + Clone + 'static> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + Clone + 'static> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + Clone + 'static> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Spiral_builder::Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral_builder::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral_builder::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Spiral_builder::Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        pub trait ICryptoCreateHash {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + Clone + 'static> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256 {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + Clone + 'static> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for Spiral_builder::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Spiral_builder::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Spiral_builder::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut3 {
            pub l0: MutCell<Spiral_builder::US0>,
        }
        impl core::fmt::Display for Spiral_builder::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US1 {
            US1_0(string),
            US1_1,
        }
        impl core::fmt::Display for Spiral_builder::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0(Spiral_builder::US0),
            US2_1,
        }
        impl core::fmt::Display for Spiral_builder::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US3 {
            US3_0(i64),
            US3_1,
        }
        impl core::fmt::Display for Spiral_builder::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut4 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Spiral_builder::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(std::string::String, clap::ArgMatches),
            US4_1,
        }
        impl core::fmt::Display for Spiral_builder::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(std::string::String),
            US5_1,
        }
        impl core::fmt::Display for Spiral_builder::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US8 {
            US8_0,
            US8_1,
        }
        impl core::fmt::Display for Spiral_builder::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US7 {
            US7_0(Spiral_builder::US8),
            US7_1,
        }
        impl core::fmt::Display for Spiral_builder::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US6 {
            US6_0(Spiral_builder::US7),
            US6_1,
        }
        impl core::fmt::Display for Spiral_builder::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Vec<std::string::String>),
            US9_1,
        }
        impl core::fmt::Display for Spiral_builder::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US10 {
            US10_0,
            US10_1,
            US10_2,
        }
        impl core::fmt::Display for Spiral_builder::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US11 {
            US11_0(Spiral_builder::US10),
            US11_1(Spiral_builder::US10),
            US11_2(Spiral_builder::US10),
            US11_3(Spiral_builder::US10),
            US11_4(Spiral_builder::US10),
        }
        impl core::fmt::Display for Spiral_builder::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US12 {
            US12_0(string),
            US12_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0,
            US13_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US14 {
            US14_0(string, Spiral_builder::US1),
            US14_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US15_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Spiral_builder::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral_builder::UH0>),
        }
        impl core::fmt::Display for Spiral_builder::UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US15>,
                LrcPtr<Spiral_builder::UH1>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US16_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US17 {
            US17_0(char),
            US17_1,
        }
        impl core::fmt::Display for Spiral_builder::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(string, LrcPtr<StringBuilder>, i32, i32),
            US18_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(
                string,
                Spiral_builder::US1,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US19_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(
                Spiral_builder::US17,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US20_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(Spiral_builder::US1, string, LrcPtr<StringBuilder>, i32, i32),
            US21_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US22 {
            US22_0(Array<string>),
            US22_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral_builder::UH2>),
        }
        impl core::fmt::Display for Spiral_builder::UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(
                LrcPtr<Spiral_builder::UH2>,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US23_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US16>,
                LrcPtr<Spiral_builder::UH3>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US25_1,
        }
        impl core::fmt::Display for Spiral_builder::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(std::string::String),
            US26_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US27_1,
        }
        impl core::fmt::Display for Spiral_builder::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US28_1,
        }
        impl core::fmt::Display for Spiral_builder::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(std::process::Output),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US30 {
            US30_0(i32),
            US30_1,
        }
        impl core::fmt::Display for Spiral_builder::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Func1<(i32, string, bool), Arc<Async<()>>>),
            US31_1,
        }
        impl core::fmt::Display for Spiral_builder::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US32 {
            US32_0(CancellationToken),
            US32_1,
        }
        impl core::fmt::Display for Spiral_builder::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US34 {
            US34_0(string),
            US34_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US33 {
            US33_0(Spiral_builder::US34),
            US33_1,
        }
        impl core::fmt::Display for Spiral_builder::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(chrono::DateTime<chrono::Utc>),
            US35_1,
        }
        impl core::fmt::Display for Spiral_builder::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US36 {
            US36_0(i32, string),
            US36_1(i32, string),
        }
        impl core::fmt::Display for Spiral_builder::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US37 {
            US37_0(std::collections::HashMap<string, string>),
            US37_1,
        }
        impl core::fmt::Display for Spiral_builder::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0(Spiral_builder::US1),
            US38_1,
        }
        impl core::fmt::Display for Spiral_builder::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, bool, LrcPtr<Spiral_builder::UH4>),
        }
        impl core::fmt::Display for Spiral_builder::UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US39 {
            US39_0,
            US39_1,
            US39_2,
        }
        impl core::fmt::Display for Spiral_builder::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(std::fs::FileType),
            US40_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US41 {
            US41_0,
            US41_1,
            US41_2,
        }
        impl core::fmt::Display for Spiral_builder::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US42 {
            US42_0(async_walkdir::DirEntry),
            US42_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US43 {
            US43_0(string, string),
            US43_1,
        }
        impl core::fmt::Display for Spiral_builder::US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, string, LrcPtr<Spiral_builder::UH5>),
        }
        impl core::fmt::Display for Spiral_builder::UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"cuda\"#");
            let v31: &'static str = r#"cuda"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"py-path\"#");
            let v36: &'static str = r#"py-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('p');
            let v41: string = string("r#\"py-path\"#");
            let v42: &'static str = r#"py-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"env\"#");
            let v51: &'static str = r#"env"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('e');
            let v56: string = string("r#\"env\"#");
            let v57: &'static str = r#"env"#;
            let v59: clap::Arg = v55.long(v57);
            let v70: Array<string> =
                toArray(ofArray(new_array(&[string("Pip"), string("Poetry")])));
            let v74: Vec<string> = v70.to_vec();
            let v76: bool = true;
            let _vec_map: Vec<_> = v74
                .into_iter()
                .map(|x| {
                    //;
                    let v78: string = x;
                    let v80: &str = &*v78;
                    let v82: std::string::String = String::from(v80);
                    let v84: Box<std::string::String> = Box::new(v82);
                    let v86: &'static mut std::string::String = Box::leak(v84);
                    let v88: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v86);
                    let v90: bool = true;
                    v88
                })
                .collect::<Vec<_>>();
            let v92: Vec<clap::builder::PossibleValue> = _vec_map;
            let v94: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v92),
            );
            let v96: clap::Arg = v59.value_parser(v94);
            let v98: clap::Command = clap::Command::arg(v48, v96);
            let v100: string = string("r#\"NAME\"#");
            let v103: string = string("r#\"VERSION\"#");
            let v105: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v106: usize = 1_i32 as usize;
            let v109: usize = 0_i32 as usize;
            let v120: clap::builder::ValueRange = if v109 == v109 {
                clap::builder::ValueRange::new(v106..)
            } else {
                let v118: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v106..v109)
            };
            let v122: string = string("r#\"deps\"#");
            let v123: &'static str = r#"deps"#;
            let v125: clap::Arg = clap::Arg::new(v123);
            let v127: clap::Arg = v125.short('d');
            let v128: string = string("r#\"deps\"#");
            let v129: &'static str = r#"deps"#;
            let v131: clap::Arg = v127.long(v129);
            let v133: Vec<&'static str> = v105.to_vec();
            let v135: clap::Arg = v131.value_names(v133);
            let v137: clap::Arg = v135.num_args(v120);
            let v139: clap::ArgAction = clap::ArgAction::Append;
            let v141: clap::Arg = v137.action(v139);
            let v143: clap::Command = clap::Command::arg(v98, v141);
            let v145: clap::Command = clap::Command::subcommand(v28, v143);
            let v147: string = string("r#\"fable\"#");
            let v148: &'static str = r#"fable"#;
            let v150: clap::Command = clap::Command::new(v148);
            let v152: string = string("r#\"fs-path\"#");
            let v153: &'static str = r#"fs-path"#;
            let v155: clap::Arg = clap::Arg::new(v153);
            let v157: clap::Arg = v155.short('f');
            let v158: string = string("r#\"fs-path\"#");
            let v159: &'static str = r#"fs-path"#;
            let v161: clap::Arg = v157.long(v159);
            let v163: clap::Arg = v161.required(true);
            let v165: clap::Command = clap::Command::arg(v150, v163);
            let v166: string = string("r#\"command\"#");
            let v167: &'static str = r#"command"#;
            let v169: clap::Arg = clap::Arg::new(v167);
            let v171: clap::Arg = v169.short('c');
            let v172: string = string("r#\"command\"#");
            let v173: &'static str = r#"command"#;
            let v175: clap::Arg = v171.long(v173);
            let v177: clap::Command = clap::Command::arg(v165, v175);
            let v179: clap::Command = clap::Command::subcommand(v145, v177);
            let v181: string = string("r#\"rust\"#");
            let v182: &'static str = r#"rust"#;
            let v184: clap::Command = clap::Command::new(v182);
            let v185: string = string("r#\"fs-path\"#");
            let v186: &'static str = r#"fs-path"#;
            let v188: clap::Arg = clap::Arg::new(v186);
            let v190: clap::Arg = v188.short('f');
            let v191: string = string("r#\"fs-path\"#");
            let v192: &'static str = r#"fs-path"#;
            let v194: clap::Arg = v190.long(v192);
            let v196: clap::Arg = v194.required(true);
            let v198: clap::Command = clap::Command::arg(v184, v196);
            let v199: string = string("r#\"NAME\"#");
            let v201: string = string("r#\"VERSION\"#");
            let v203: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v204: usize = 1_i32 as usize;
            let v207: usize = 0_i32 as usize;
            let v218: clap::builder::ValueRange = if v207 == v207 {
                clap::builder::ValueRange::new(v204..)
            } else {
                let v216: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v204..v207)
            };
            let v219: string = string("r#\"deps\"#");
            let v220: &'static str = r#"deps"#;
            let v222: clap::Arg = clap::Arg::new(v220);
            let v224: clap::Arg = v222.short('d');
            let v225: string = string("r#\"deps\"#");
            let v226: &'static str = r#"deps"#;
            let v228: clap::Arg = v224.long(v226);
            let v230: Vec<&'static str> = v203.to_vec();
            let v232: clap::Arg = v228.value_names(v230);
            let v234: clap::Arg = v232.num_args(v218);
            let v236: clap::ArgAction = clap::ArgAction::Append;
            let v238: clap::Arg = v234.action(v236);
            let v240: clap::Command = clap::Command::arg(v198, v238);
            let v241: usize = 0_i32 as usize;
            let v244: usize = 1_i32 as usize;
            let v255: clap::builder::ValueRange = if v244 == v241 {
                clap::builder::ValueRange::new(v241..)
            } else {
                let v253: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v241..=v244)
            };
            let v257: string = string("r#\"wasm\"#");
            let v258: &'static str = r#"wasm"#;
            let v260: clap::Arg = clap::Arg::new(v258);
            let v262: clap::Arg = v260.short('w');
            let v263: string = string("r#\"wasm\"#");
            let v264: &'static str = r#"wasm"#;
            let v266: clap::Arg = v262.long(v264);
            let v268: clap::Arg = v266.num_args(v255);
            let v270: clap::Arg = v268.require_equals(true);
            let v272: string = string("r#\"\"#");
            let v273: &str = r#""#;
            let v275: clap::Arg = v270.default_missing_value(v273);
            let v277: clap::Command = clap::Command::arg(v240, v275);
            let v278: usize = 0_i32 as usize;
            let v281: usize = 1_i32 as usize;
            let v292: clap::builder::ValueRange = if v281 == v278 {
                clap::builder::ValueRange::new(v278..)
            } else {
                let v290: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v278..=v281)
            };
            let v294: string = string("r#\"contract\"#");
            let v295: &'static str = r#"contract"#;
            let v297: clap::Arg = clap::Arg::new(v295);
            let v299: clap::Arg = v297.short('c');
            let v300: string = string("r#\"contract\"#");
            let v301: &'static str = r#"contract"#;
            let v303: clap::Arg = v299.long(v301);
            let v305: clap::Arg = v303.num_args(v292);
            let v307: clap::Arg = v305.require_equals(true);
            let v308: string = string("r#\"\"#");
            let v309: &str = r#""#;
            let v311: clap::Arg = v307.default_missing_value(v309);
            let v313: clap::Command = clap::Command::arg(v277, v311);
            let v315: clap::Command = clap::Command::subcommand(v179, v313);
            let v317: string = string("r#\"typescript\"#");
            let v318: &'static str = r#"typescript"#;
            let v320: clap::Command = clap::Command::new(v318);
            let v321: string = string("r#\"fs-path\"#");
            let v322: &'static str = r#"fs-path"#;
            let v324: clap::Arg = clap::Arg::new(v322);
            let v326: clap::Arg = v324.short('f');
            let v327: string = string("r#\"fs-path\"#");
            let v328: &'static str = r#"fs-path"#;
            let v330: clap::Arg = v326.long(v328);
            let v332: clap::Arg = v330.required(true);
            let v334: clap::Command = clap::Command::arg(v320, v332);
            let v335: string = string("r#\"NAME\"#");
            let v337: string = string("r#\"VERSION\"#");
            let v339: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v340: usize = 1_i32 as usize;
            let v343: usize = 0_i32 as usize;
            let v353: clap::builder::ValueRange = if v343 == v343 {
                clap::builder::ValueRange::new(v340..)
            } else {
                let v351: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v340..v343)
            };
            let v354: string = string("r#\"deps\"#");
            let v355: &'static str = r#"deps"#;
            let v357: clap::Arg = clap::Arg::new(v355);
            let v359: clap::Arg = v357.short('d');
            let v360: string = string("r#\"deps\"#");
            let v361: &'static str = r#"deps"#;
            let v363: clap::Arg = v359.long(v361);
            let v365: Vec<&'static str> = v339.to_vec();
            let v367: clap::Arg = v363.value_names(v365);
            let v369: clap::Arg = v367.num_args(v353);
            let v371: clap::ArgAction = clap::ArgAction::Append;
            let v373: clap::Arg = v369.action(v371);
            let v375: clap::Command = clap::Command::arg(v334, v373);
            let v377: clap::Command = clap::Command::subcommand(v315, v375);
            let v379: string = string("r#\"python\"#");
            let v380: &'static str = r#"python"#;
            let v382: clap::Command = clap::Command::new(v380);
            let v383: string = string("r#\"fs-path\"#");
            let v384: &'static str = r#"fs-path"#;
            let v386: clap::Arg = clap::Arg::new(v384);
            let v388: clap::Arg = v386.short('f');
            let v389: string = string("r#\"fs-path\"#");
            let v390: &'static str = r#"fs-path"#;
            let v392: clap::Arg = v388.long(v390);
            let v394: clap::Arg = v392.required(true);
            let v396: clap::Command = clap::Command::arg(v382, v394);
            let v397: string = string("r#\"NAME\"#");
            let v399: string = string("r#\"VERSION\"#");
            let v401: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v402: usize = 1_i32 as usize;
            let v405: usize = 0_i32 as usize;
            let v415: clap::builder::ValueRange = if v405 == v405 {
                clap::builder::ValueRange::new(v402..)
            } else {
                let v413: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v402..v405)
            };
            let v416: string = string("r#\"deps\"#");
            let v417: &'static str = r#"deps"#;
            let v419: clap::Arg = clap::Arg::new(v417);
            let v421: clap::Arg = v419.short('d');
            let v422: string = string("r#\"deps\"#");
            let v423: &'static str = r#"deps"#;
            let v425: clap::Arg = v421.long(v423);
            let v427: Vec<&'static str> = v401.to_vec();
            let v429: clap::Arg = v425.value_names(v427);
            let v431: clap::Arg = v429.num_args(v415);
            let v433: clap::ArgAction = clap::ArgAction::Append;
            let v435: clap::Arg = v431.action(v433);
            let v437: clap::Command = clap::Command::arg(v396, v435);
            let v439: clap::Command = clap::Command::subcommand(v377, v437);
            let v441: string = string("r#\"dib\"#");
            let v442: &'static str = r#"dib"#;
            let v444: clap::Command = clap::Command::new(v442);
            let v446: string = string("r#\"path\"#");
            let v447: &'static str = r#"path"#;
            let v449: clap::Arg = clap::Arg::new(v447);
            let v451: clap::Arg = v449.short('p');
            let v452: string = string("r#\"path\"#");
            let v453: &'static str = r#"path"#;
            let v455: clap::Arg = v451.long(v453);
            let v457: clap::Arg = v455.required(true);
            let v459: clap::Command = clap::Command::arg(v444, v457);
            let v461: string = string("clap::value_parser!(u8).into()");
            let v462: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v464: string = string("r#\"retries\"#");
            let v465: &'static str = r#"retries"#;
            let v467: clap::Arg = clap::Arg::new(v465);
            let v469: clap::Arg = v467.short('r');
            let v470: string = string("r#\"retries\"#");
            let v471: &'static str = r#"retries"#;
            let v473: clap::Arg = v469.long(v471);
            let v475: clap::Arg = v473.value_parser(v462);
            let v477: clap::Command = clap::Command::arg(v459, v475);
            let v479: string = string("r#\"working-directory\"#");
            let v480: &'static str = r#"working-directory"#;
            let v482: clap::Arg = clap::Arg::new(v480);
            let v484: clap::Arg = v482.short('w');
            let v485: string = string("r#\"working-directory\"#");
            let v486: &'static str = r#"working-directory"#;
            let v488: clap::Arg = v484.long(v486);
            let v490: clap::Command = clap::Command::arg(v477, v488);
            clap::Command::subcommand(v439, v490)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v1_1: bool = true;
            () //;
        } /* /*;
          {
              let v4: string = string("*/ #[test] fn verify_app() { //");
              let v5: bool = */
        #[test]
        fn verify_app() {
            //;
            let v6: clap::Command = Spiral_builder::method0();
            clap::Command::debug_assert(v6);
            {
                //;
                ()
            }
        }
        pub fn method2() -> string {
            string("TRACE_LEVEL")
        }
        pub fn method4() -> string {
            string("")
        }
        pub fn closure3(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US1>>>,
            v1_1: Option<Spiral_builder::US1>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US1>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure4(
            v0_1: Option<string>,
            v1_1: Func1<Option<Spiral_builder::US1>, LrcPtr<MutCell<Option<Spiral_builder::US1>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US1>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US1>,
                    Some(v0_1_0_0) => {
                        let x: string = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US1::US1_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method3(v0_1: string) -> string {
            let v3: Result<std::string::String, std::env::VarError> = std::env::var(&*v0_1);
            let v5: bool = true;
            let _result_map_ = v3.map(|x| {
                //;
                let v7: std::string::String = x;
                let v9: string = fable_library_rust::String_::fromString(v7);
                let v11: bool = true;
                v9
            });
            let v13: Result<string, std::env::VarError> = _result_map_;
            let v14: string = Spiral_builder::method4();
            v13.unwrap_or(v14)
        }
        pub fn method5() -> string {
            string("AUTOMATION")
        }
        pub fn closure5(unitVar: (), v0_1: string) {
            ();
        }
        pub fn method1(
            v0_1: Spiral_builder::US0,
        ) -> (
            LrcPtr<Spiral_builder::Mut0>,
            LrcPtr<Spiral_builder::Mut1>,
            LrcPtr<Spiral_builder::Mut2>,
            LrcPtr<Spiral_builder::Mut3>,
            Option<i64>,
        ) {
            let v3: string = Spiral_builder::method3(Spiral_builder::method2());
            let v8: Spiral_builder::US2 = if string("Verbose") == v3.clone() {
                Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_0)
            } else {
                Spiral_builder::US2::US2_1
            };
            let _v1: (Spiral_builder::US2, Spiral_builder::US3) = (
                match &v8 {
                    Spiral_builder::US2::US2_0(v8_0_0) => Spiral_builder::US2::US2_0(match &v8 {
                        Spiral_builder::US2::US2_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => {
                        let v15: Spiral_builder::US2 = if string("Debug") == v3.clone() {
                            Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_1)
                        } else {
                            Spiral_builder::US2::US2_1
                        };
                        match &v15 {
                            Spiral_builder::US2::US2_0(v15_0_0) => {
                                Spiral_builder::US2::US2_0(match &v15 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v22: Spiral_builder::US2 = if string("Info") == v3.clone() {
                                    Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_2)
                                } else {
                                    Spiral_builder::US2::US2_1
                                };
                                match &v22 {
                                    Spiral_builder::US2::US2_0(v22_0_0) => {
                                        Spiral_builder::US2::US2_0(match &v22 {
                                            Spiral_builder::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v29: Spiral_builder::US2 = if string("Warning")
                                            == v3.clone()
                                        {
                                            Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_3)
                                        } else {
                                            Spiral_builder::US2::US2_1
                                        };
                                        match &v29 {
                                            Spiral_builder::US2::US2_0(v29_0_0) => {
                                                Spiral_builder::US2::US2_0(match &v29 {
                                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v36: Spiral_builder::US2 =
                                                    if string("Critical") == v3.clone() {
                                                        Spiral_builder::US2::US2_0(
                                                            Spiral_builder::US0::US0_4,
                                                        )
                                                    } else {
                                                        Spiral_builder::US2::US2_1
                                                    };
                                                match &v36 {
                                                    Spiral_builder::US2::US2_0(v36_0_0) => {
                                                        Spiral_builder::US2::US2_0(match &v36 {
                                                            Spiral_builder::US2::US2_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => Spiral_builder::US2::US2_1,
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                if Spiral_builder::method3(Spiral_builder::method5()) == string("True") {
                    Spiral_builder::US3::US3_0({
                        let _arg: DateTime = DateTime::now();
                        _arg.ticks()
                    })
                } else {
                    Spiral_builder::US3::US3_1
                },
            );
            let v295: Spiral_builder::US3 = _v1.1.clone();
            let v294: Spiral_builder::US2 = _v1.0.clone();
            (
                LrcPtr::new(Spiral_builder::Mut0 {
                    l0: MutCell::new(0_i64),
                }),
                LrcPtr::new(Spiral_builder::Mut1 {
                    l0: MutCell::new(Func1::new(move |v: string| Spiral_builder::closure5((), v))),
                }),
                LrcPtr::new(Spiral_builder::Mut2 {
                    l0: MutCell::new(true),
                }),
                LrcPtr::new(Spiral_builder::Mut3 {
                    l0: MutCell::new(match &v294 {
                        Spiral_builder::US2::US2_0(v294_0_0) => match &v294 {
                            Spiral_builder::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => v0_1,
                    }),
                }),
                match &v295 {
                    Spiral_builder::US3::US3_0(v295_0_0) => Some(match &v295 {
                        Spiral_builder::US3::US3_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => None::<i64>,
                },
            )
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = Spiral_builder::method1(Spiral_builder::US0::US0_0);
                Spiral_builder::State::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                )));
                ()
            };
        }
        pub fn closure7(v0_1: LrcPtr<Spiral_builder::Mut0>, unitVar: ()) {
            let v2: i64 = v0_1.l0.get().clone() + 1_i64;
            v0_1.l0.set(v2);
            ()
        }
        pub fn closure8(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US3>>>,
            v1_1: Option<Spiral_builder::US3>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US3>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure9(
            v0_1: Option<i64>,
            v1_1: Func1<Option<Spiral_builder::US3>, LrcPtr<MutCell<Option<Spiral_builder::US3>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US3>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US3>,
                    Some(v0_1_0_0) => {
                        let x: i64 = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US3::US3_0(x)
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method6() -> string {
            string("hh:mm:ss")
        }
        pub fn method7() -> string {
            string("HH:mm:ss")
        }
        pub fn method8() -> string {
            string("(")
        }
        pub fn method9() -> string {
            string(" ")
        }
        pub fn method10() -> string {
            string("")
        }
        pub fn closure10(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string, unitVar: ()) {
            let v3: string = append(v0_1.l0.get().clone(), v1_1);
            v0_1.l0.set(v3);
            ()
        }
        pub fn method11() -> string {
            string("\u{001b}[0m")
        }
        pub fn closure11(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.main")
        }
        pub fn closure13(v0_1: string, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn closure12(unitVar: (), v0_1: string) {
            let v3: () = {
                Spiral_builder::closure13(v0_1, ());
                ()
            };
            ()
        }
        pub fn closure6(v0_1: Array<string>, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v615: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v624: string = padLeft(
                    toLower(match &v615 {
                        Spiral_builder::US1::US1_0(v615_0_0) => match &v615 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v640: &str = inline_colorization::color_bright_blue;
                let v642: &str = &*v624;
                let v644: &str = inline_colorization::color_reset;
                let v646: string = string("format!(\"{v640}{v642}{v644}\")");
                let v647: std::string::String = format!("{v640}{v642}{v644}");
                let v649: string = fable_library_rust::String_::fromString(v647);
                let v690: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v692: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v699: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v708: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string("args")), ());
                    ()
                };
                let v717: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v728: () = {
                    Spiral_builder::closure10(
                        v692.clone(),
                        sprintf!("{}", sprintf!("{:?}", v0_1)),
                        (),
                    );
                    ()
                };
                let v737: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v740: string = v692.l0.get().clone();
                let v779: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v649,
                            v690,
                            Spiral_builder::closure11((), ()),
                            v740
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v779.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v779)
            }
        }
        pub fn closure14(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn closure15(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US4>>>,
            v1_1: Option<Spiral_builder::US4>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US4>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure16(
            v0_1: Option<(std::string::String, clap::ArgMatches)>,
            v1_1: Func1<Option<Spiral_builder::US4>, LrcPtr<MutCell<Option<Spiral_builder::US4>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US4>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US4>,
                    Some(v0_1_0_0) => {
                        let x: (std::string::String, clap::ArgMatches) = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US4::US4_0(x.0.clone(), x.1.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method13() -> string {
            string("py-path")
        }
        pub fn closure17(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US5>>>,
            v1_1: Option<Spiral_builder::US5>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US5>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure18(
            v0_1: Option<std::string::String>,
            v1_1: Func1<Option<Spiral_builder::US5>, LrcPtr<MutCell<Option<Spiral_builder::US5>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US5>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US5>,
                    Some(v0_1_0_0) => {
                        let x: std::string::String = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US5::US5_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method14() -> string {
            string("env")
        }
        pub fn method15() -> string {
            string("deps")
        }
        pub fn closure19(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US9>>>,
            v1_1: Option<Spiral_builder::US9>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US9>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure20(
            v0_1: Option<Vec<std::string::String>>,
            v1_1: Func1<Option<Spiral_builder::US9>, LrcPtr<MutCell<Option<Spiral_builder::US9>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US9>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US9>,
                    Some(v0_1_0_0) => {
                        let x: Vec<std::string::String> = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US9::US9_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method16(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method19(v0_1: string) -> string {
            v0_1
        }
        pub fn method18(v0_1: string, v1_1: string) -> (string, string) {
            (v1_1, Spiral_builder::method19(v0_1))
        }
        pub fn method17(v0_1: string, v1_1: string) -> string {
            let v4: &str = &*v0_1;
            let v6: std::string::String = String::from(v4);
            let v8: std::path::PathBuf = std::path::PathBuf::from(v6);
            let v10: &str = &*v1_1;
            let v12: std::string::String = String::from(v10);
            let v14: std::path::PathBuf = v8.join(v12);
            let v16: std::path::Display = v14.display();
            let v19: std::string::String = format!("{}", v16);
            fable_library_rust::String_::fromString(v19)
        }
        pub fn method21(v0_1: string) -> bool {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            if v7.clone().exists() {
                true
            } else {
                if v7.clone().is_dir() {
                    true
                } else {
                    v7.is_symlink()
                }
            }
        }
        pub fn method23(v0_1: string) -> Option<string> {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            let v9: Option<std::path::PathBuf> = v7.parent().map(std::path::PathBuf::from);
            let v11: std::path::PathBuf = v9?;
            let v13: std::path::Display = v11.display();
            let v16: std::string::String = format!("{}", v13);
            let v85: Spiral_builder::US1 =
                Spiral_builder::US1::US1_0(fable_library_rust::String_::fromString(v16));
            match &v85 {
                Spiral_builder::US1::US1_0(v85_0_0) => Some(match &v85 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => None::<string>,
            }
        }
        pub fn closure21(unitVar: (), v0_1: string) -> Option<string> {
            Spiral_builder::method23(v0_1)
        }
        pub fn method22() -> Func1<string, Option<string>> {
            Func1::new(move |v: string| Spiral_builder::closure21((), v))
        }
        pub fn method24(v0_1: string, v1_1: string, v2: string) -> Spiral_builder::US12 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<string> = MutCell::new(v2.clone());
            '_method24: loop {
                break '_method24 (if Spiral_builder::method21(Spiral_builder::method17(
                    v2.get().clone(),
                    v0_1.get().clone(),
                )) {
                    Spiral_builder::US12::US12_0(v2.get().clone())
                } else {
                    let v7: Option<string> = (Spiral_builder::method22())(v2.get().clone());
                    let _v8: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                        refCell(None::<Spiral_builder::US1>);
                    let v13: () = {
                        Spiral_builder::closure4(
                            v7,
                            Func1::new({
                                let _v8 = _v8.clone();
                                move |v: Option<Spiral_builder::US1>| {
                                    Spiral_builder::closure3(_v8.clone(), v)
                                }
                            }),
                            (),
                        );
                        ()
                    };
                    let v28: Spiral_builder::US1 =
                        defaultValue(Spiral_builder::US1::US1_1, _v8.get().clone());
                    match &v28 {
                        Spiral_builder::US1::US1_0(v28_0_0) => {
                            let v0_1_temp: string = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: string = match &v28 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method24;
                        }
                        _ => Spiral_builder::US12::US12_1(sprintf!(
                            "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                            string("dir"),
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone()
                        )),
                    }
                });
            }
        }
        pub fn method20(v0_1: string, v1_1: string) -> Spiral_builder::US12 {
            if Spiral_builder::method21(Spiral_builder::method17(v1_1.clone(), v0_1.clone())) {
                Spiral_builder::US12::US12_0(v1_1.clone())
            } else {
                let v6: Option<string> = (Spiral_builder::method22())(v1_1.clone());
                let _v7: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                    refCell(None::<Spiral_builder::US1>);
                let v12: () = {
                    Spiral_builder::closure4(
                        v6,
                        Func1::new({
                            let _v7 = _v7.clone();
                            move |v: Option<Spiral_builder::US1>| {
                                Spiral_builder::closure3(_v7.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v27: Spiral_builder::US1 =
                    defaultValue(Spiral_builder::US1::US1_1, _v7.get().clone());
                match &v27 {
                    Spiral_builder::US1::US1_0(v27_0_0) => Spiral_builder::method24(
                        v0_1.clone(),
                        v1_1.clone(),
                        match &v27 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    _ => Spiral_builder::US12::US12_1(sprintf!(
                        "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                        string("dir"),
                        v0_1.clone(),
                        v1_1.clone(),
                        v1_1.clone()
                    )),
                }
            }
        }
        pub fn closure23(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.get_workspace_root")
        }
        pub fn closure22(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_3)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v737: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v613: string = Spiral_builder::method8();
                        let v625: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v636: () = {
                            Spiral_builder::closure10(
                                v625.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v640: Array<string> = split(v625.l0.get().clone(), v613, -1_i32, 0_i32);
                        let v643: string = v640[0_i32].clone();
                        let v647: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v658: () = {
                            Spiral_builder::closure10(
                                v647.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_3)),
                                (),
                            );
                            ()
                        };
                        let v668: Spiral_builder::US1 =
                            if startsWith(v647.l0.get().clone(), v643, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v668 {
                            Spiral_builder::US1::US1_0(v668_0_0) => {
                                Spiral_builder::US1::US1_0(match &v668 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v672: string = Spiral_builder::method8();
                                let v684: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v695: () = {
                                    Spiral_builder::closure10(
                                        v684.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v699: Array<string> =
                                    split(v684.l0.get().clone(), v672, -1_i32, 0_i32);
                                let v702: string = v699[0_i32].clone();
                                let v706: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v717: () = {
                                    Spiral_builder::closure10(
                                        v706.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v727: Spiral_builder::US1 =
                                    if startsWith(v706.l0.get().clone(), v702, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v727 {
                                    Spiral_builder::US1::US1_0(v727_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v727 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => Spiral_builder::US1::US1_0(string("Warning")),
                                }
                            }
                        }
                    }
                };
                let v746: string = padLeft(
                    toLower(match &v737 {
                        Spiral_builder::US1::US1_0(v737_0_0) => match &v737 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v762: &str = inline_colorization::color_yellow;
                let v764: &str = &*v746;
                let v766: &str = inline_colorization::color_reset;
                let v768: string = string("format!(\"{v762}{v764}{v766}\")");
                let v769: std::string::String = format!("{v762}{v764}{v766}");
                let v771: string = fable_library_rust::String_::fromString(v769);
                let v812: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v814: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v821: () = {
                    Spiral_builder::closure10(v814.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v830: () = {
                    Spiral_builder::closure10(v814.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v839: () = {
                    Spiral_builder::closure10(v814.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v847: () = {
                    Spiral_builder::closure10(v814.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v856: () = {
                    Spiral_builder::closure10(v814.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v859: string = v814.l0.get().clone();
                let v898: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v771,
                            v812,
                            Spiral_builder::closure23((), ()),
                            v859
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v898.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v898)
            }
        }
        pub fn method25() -> string {
            let v2: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v4: std::path::PathBuf = v2.unwrap();
            let v6: std::path::Display = v4.display();
            let v9: std::string::String = format!("{}", v6);
            fable_library_rust::String_::fromString(v9)
        }
        pub fn method26(v0_1: string) -> string {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            let v9: Option<&std::path::Path> = v7.parent();
            let v11: &std::path::Path = v9.unwrap();
            let v13: std::path::Display = v11.display();
            let v16: std::string::String = format!("{}", v13);
            fable_library_rust::String_::fromString(v16)
        }
        pub fn method29(v0_1: string) -> bool {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            if v7.clone().exists() {
                v7.is_file()
            } else {
                false
            }
        }
        pub fn method28(v0_1: string, v1_1: string) -> bool {
            if Spiral_builder::method29(v0_1.clone()) == false {
                false
            } else {
                let v8: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v0_1);
                let v31: Vec<u8> = Spiral_builder::method16(v8.unwrap());
                let v33: Result<std::string::String, std::string::FromUtf8Error> =
                    std::string::String::from_utf8(v31);
                let v35: std::string::String = v33.unwrap();
                v1_1 == fable_library_rust::String_::fromString(v35)
            }
        }
        pub fn method31(v0_1: string) -> string {
            v0_1
        }
        pub fn closure24(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method32() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure24((), v))
        }
        pub fn closure25(unitVar: (), unitVar_1: ()) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_0
        }
        pub fn closure26(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_1(v0_1)
        }
        pub fn closure28(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure27(v0_1: string, v1_1: std::string::String, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v799: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v614: string = Spiral_builder::method8();
                        let v626: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v637: () = {
                            Spiral_builder::closure10(
                                v626.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v641: Array<string> = split(v626.l0.get().clone(), v614, -1_i32, 0_i32);
                        let v644: string = v641[0_i32].clone();
                        let v648: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v659: () = {
                            Spiral_builder::closure10(
                                v648.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v669: Spiral_builder::US1 =
                            if startsWith(v648.l0.get().clone(), v644, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v669 {
                            Spiral_builder::US1::US1_0(v669_0_0) => {
                                Spiral_builder::US1::US1_0(match &v669 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v673: string = Spiral_builder::method8();
                                let v685: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v696: () = {
                                    Spiral_builder::closure10(
                                        v685.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v700: Array<string> =
                                    split(v685.l0.get().clone(), v673, -1_i32, 0_i32);
                                let v703: string = v700[0_i32].clone();
                                let v707: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v718: () = {
                                    Spiral_builder::closure10(
                                        v707.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v728: Spiral_builder::US1 =
                                    if startsWith(v707.l0.get().clone(), v703, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v728 {
                                    Spiral_builder::US1::US1_0(v728_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v728 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v732: string = Spiral_builder::method8();
                                        let v744: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v755: () = {
                                            Spiral_builder::closure10(
                                                v744.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v759: Array<string> =
                                            split(v744.l0.get().clone(), v732, -1_i32, 0_i32);
                                        let v762: string = v759[0_i32].clone();
                                        let v766: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v777: () = {
                                            Spiral_builder::closure10(
                                                v766.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v787: Spiral_builder::US1 =
                                            if startsWith(v766.l0.get().clone(), v762, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v787 {
                                            Spiral_builder::US1::US1_0(v787_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v787 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v808: string = padLeft(
                    toLower(match &v799 {
                        Spiral_builder::US1::US1_0(v799_0_0) => match &v799 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v824: &str = inline_colorization::color_bright_red;
                let v826: &str = &*v808;
                let v828: &str = inline_colorization::color_reset;
                let v830: string = string("format!(\"{v824}{v826}{v828}\")");
                let v831: std::string::String = format!("{v824}{v826}{v828}");
                let v833: string = fable_library_rust::String_::fromString(v831);
                let v874: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v876: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v883: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v892: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("dir")), ());
                    ()
                };
                let v901: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v909: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v918: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v927: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v935: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v940: std::string::String = format!("{:#?}", v1_1);
                let v970: () = {
                    Spiral_builder::closure10(
                        v876.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v940)),
                        (),
                    );
                    ()
                };
                let v979: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v982: string = v876.l0.get().clone();
                let v1021: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v833,
                            v874,
                            Spiral_builder::closure28((), ()),
                            v982
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1021.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1021)
            }
        }
        pub fn closure30(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure29(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_black;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("dir")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v659: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v668: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v671: string = v626.l0.get().clone();
                let v710: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure30((), ()),
                            v671
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v710.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v710)
            }
        }
        pub fn method35(v0_1: string) -> string {
            v0_1
        }
        pub fn method34(v0_1: bool, v1_1: string) {
            let v3: string = Spiral_builder::method35(v1_1);
            if Spiral_builder::method21(v3.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v3.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v3).unwrap();
                    ()
                };
            }
            ();
            ()
        }
        pub fn closure31(v0_1: string, unitVar: ()) {
            Spiral_builder::method34(true, v0_1);
        }
        pub fn method33(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure31(v0_1.clone(), ())
            })
        }
        pub fn method36(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure31(v0_1.clone(), ())
            })
        }
        pub fn closure33(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure32(v0_1: string, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v616: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v625: string = padLeft(
                    toLower(match &v616 {
                        Spiral_builder::US1::US1_0(v616_0_0) => match &v616 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v641: &str = inline_colorization::color_bright_blue;
                let v643: &str = &*v625;
                let v645: &str = inline_colorization::color_reset;
                let v647: string = string("format!(\"{v641}{v643}{v645}\")");
                let v648: std::string::String = format!("{v641}{v643}{v645}");
                let v650: string = fable_library_rust::String_::fromString(v648);
                let v691: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v693: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v700: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v709: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string("dir")), ());
                    ()
                };
                let v718: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v726: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v735: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v744: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string("result")), ());
                    ()
                };
                let v752: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v760: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v769: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v772: string = v693.l0.get().clone();
                let v811: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v650,
                            v691,
                            Spiral_builder::closure33((), ()),
                            v772
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v811.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v811)
            }
        }
        pub fn method39(v0_1: string) -> string {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            let v9: Option<&std::ffi::OsStr> = v7.file_name();
            let v11: &std::ffi::OsStr = v9.unwrap();
            let v13: std::ffi::OsString = v11.to_os_string();
            let v15: Option<&str> = v13.to_str();
            let v17: &str = v15.unwrap();
            let v19: std::string::String = String::from(v17);
            fable_library_rust::String_::fromString(v19)
        }
        pub fn closure36(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.delete_directory_async")
        }
        pub fn closure35(v0_1: string, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v616: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v625: string = padLeft(
                    toLower(match &v616 {
                        Spiral_builder::US1::US1_0(v616_0_0) => match &v616 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v641: &str = inline_colorization::color_bright_blue;
                let v643: &str = &*v625;
                let v645: &str = inline_colorization::color_reset;
                let v647: string = string("format!(\"{v641}{v643}{v645}\")");
                let v648: std::string::String = format!("{v641}{v643}{v645}");
                let v650: string = fable_library_rust::String_::fromString(v648);
                let v691: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v692: string = Spiral_builder::method39(v0_1);
                let v694: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v701: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v710: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v719: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v727: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v736: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v745: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("path")), ());
                    ()
                };
                let v753: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v761: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v692), ());
                    ()
                };
                let v770: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v773: string = v694.l0.get().clone();
                let v812: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v650,
                            v691,
                            Spiral_builder::closure36((), ()),
                            v773
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v812.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v812)
            }
        }
        pub fn method38(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            defaultOf()
        }
        pub fn closure34(v0_1: string, unitVar: ()) {
            let v2: Arc<Async<i64>> = defaultOf();
            let v25: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn method37(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure34(v0_1.clone(), ())
            })
        }
        pub fn method40(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure34(v0_1.clone(), ())
            })
        }
        pub fn method30(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let v2: string = Spiral_builder::method31(v0_1);
            let v4: Result<(), std::io::Error> = std::fs::create_dir_all(&*v2.clone());
            let v5 = Spiral_builder::method32();
            let v7: Result<(), std::string::String> = v4.map_err(|x| v5(x));
            let v10: Spiral_builder::US13 = match &v7 {
                Err(v7_1_0) => Spiral_builder::closure26((), v7_1_0.clone()),
                _ => Spiral_builder::closure25((), ()),
            };
            match &v10 {
                Spiral_builder::US13::US13_0 => {
                    let v13: () = {
                        Spiral_builder::closure29(v2.clone(), ());
                        ()
                    };
                    ()
                }
                Spiral_builder::US13::US13_1(v10_1_0) => {
                    let v750: () = {
                        Spiral_builder::closure27(
                            v2.clone(),
                            match &v10 {
                                Spiral_builder::US13::US13_1(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            (),
                        );
                        ()
                    };
                    ()
                }
            }
            {
                let v1795 = Spiral_builder::method33(v2.clone());
                interface_cast!(
                    Spiral_builder::Disposable::_ctor__3A5B6456(Func0::new({
                        let v1795 = v1795.clone();
                        move || v1795.clone()()
                    })),
                    Lrc<dyn IDisposable>,
                )
            }
        }
        pub fn method41(v0_1: string) -> string {
            v0_1
        }
        pub fn method27(v0_1: string, v1_1: string) {
            if Spiral_builder::method28(v0_1.clone(), v1_1.clone()) == false {
                let v4: string = Spiral_builder::method26(v0_1.clone());
                if Spiral_builder::method21(v4.clone()) == false {
                    let v7: LrcPtr<dyn IDisposable> = Spiral_builder::method30(v4);
                    ()
                }
                std::fs::write(&*v0_1, &*v1_1).unwrap();
                ();
                ()
            };
        }
        pub fn method43(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            v0_1
        }
        pub fn method45(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut5>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn closure39(
            v0_1: char,
            v1_1: LrcPtr<Spiral_builder::UH0>,
        ) -> LrcPtr<Spiral_builder::UH0> {
            LrcPtr::new(Spiral_builder::UH0::UH0_1(v0_1, v1_1))
        }
        pub fn closure38(
            unitVar: (),
            v0_1: char,
        ) -> Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Spiral_builder::UH0>| Spiral_builder::closure39(v0_1, v)
            })
        }
        pub fn method46(
        ) -> Func1<char, Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>>> {
            Func1::new(move |v: char| Spiral_builder::closure38((), v))
        }
        pub fn method47(
            v0_1: LrcPtr<Spiral_builder::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method47: loop {
                break '_method47 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH0::UH0_0 => {
                        (v1_1.get().clone(), v2.get().clone(), v3.get().clone())
                    }
                    Spiral_builder::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == v4;
                        let patternInput: (i32, i32) = if v6 {
                            (v2.get().clone() + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), v3.get().clone() + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v12: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v18: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method47;
                        }
                    }
                });
            }
        }
        pub fn closure37(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\"' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method45(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method47(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method46())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\"',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn closure40(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\'' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method45(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method47(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method46())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\'',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn method48(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v2.clone());
            '_method48: loop {
                break '_method48 (match v2.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral_builder::US15 = (match v2.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral_builder::US15::US15_0(
                                v7_0_0,
                                v7_0_1,
                                v7_0_2,
                                v7_0_3,
                                v7_0_4,
                            ) => v7.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method48;
                            }
                        }
                    }
                });
            }
        }
        pub fn method49(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method49: loop {
                break '_method49 (if v1_1.get().clone() >= 2_i64 {
                    false
                } else {
                    let v11: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            Spiral_builder::US17::US17_1
                        }
                    };
                    if v0_1.get().clone()
                        == match &v11 {
                            Spiral_builder::US17::US17_0(v11_0_0) => match &v11 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method49;
                    }
                });
            }
        }
        pub fn method50(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method50: loop {
                break '_method50 ({
                    let v70: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v19: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v26: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method49(v19, 0_i64) == false {
                            let v31: string = ofChar(v19);
                            let v34: i32 = length(v31.clone());
                            let v35: Array<char> = new_init(&'\u{0000}', v34);
                            let v36: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method45(v34, v36.clone()) {
                                let v38: i32 = v36.l0.get().clone();
                                let v39: char = getCharAt(v31.clone(), v38);
                                v35.get_mut()[v38 as usize] = v39;
                                {
                                    let v40: i32 = v38 + 1_i32;
                                    v36.l0.set(v40);
                                    ()
                                }
                            }
                            {
                                let v41: List<char> = ofArray(v35.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method47(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method46())(b0)(b1)
                                                },
                                            ),
                                            v41,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v19,
                                    v26,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v19,
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v82: Spiral_builder::US15 = match &v70 {
                        Spiral_builder::US15::US15_0(
                            v70_0_0,
                            v70_0_1,
                            v70_0_2,
                            v70_0_3,
                            v70_0_4,
                        ) => {
                            let v71: char = v70_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v71 { '/' } else { v71 },
                                v70_0_1.clone(),
                                v70_0_2.clone(),
                                v70_0_3.clone(),
                                v70_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v70_1_0) => {
                            Spiral_builder::US15::US15_1(v70_1_0.clone())
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method50;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method51(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v4.clone());
            '_method51: loop {
                break '_method51 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US15 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US15::US15_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method51;
                            }
                        }
                    }
                });
            }
        }
        pub fn method52(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method52: loop {
                break '_method52 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0(' ')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method52;
                    }
                });
            }
        }
        pub fn method53(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method53: loop {
                break '_method53 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method52(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method45(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method47(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method46())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v88: Spiral_builder::US15 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => {
                            let v77: char = v76_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v77 { '/' } else { v77 },
                                v76_0_1.clone(),
                                v76_0_2.clone(),
                                v76_0_3.clone(),
                                v76_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US15::US15_1(v76_1_0.clone())
                        }
                    };
                    match &v88 {
                        Spiral_builder::US15::US15_0(
                            v88_0_0,
                            v88_0_1,
                            v88_0_2,
                            v88_0_3,
                            v88_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v88_0_0.clone()));
                            let v1_1_temp: string = v88_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v88_0_2.clone();
                            let v3_temp: i32 = v88_0_3.clone();
                            let v4_temp: i32 = v88_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method53;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method54(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method54: loop {
                break '_method54 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method54;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method55(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method55: loop {
                break '_method55 ({
                    let v42: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v8: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v15: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        let v17: string = ofChar(v8);
                        let v20: i32 = length(v17.clone());
                        let v21: Array<char> = new_init(&'\u{0000}', v20);
                        let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method45(v20, v22.clone()) {
                            let v24: i32 = v22.l0.get().clone();
                            let v25: char = getCharAt(v17.clone(), v24);
                            v21.get_mut()[v24 as usize] = v25;
                            {
                                let v26: i32 = v24 + 1_i32;
                                v22.l0.set(v26);
                                ()
                            }
                        }
                        {
                            let v27: List<char> = ofArray(v21.clone());
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method47(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method46())(b0)(b1)
                                            },
                                        ),
                                        v27,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                );
                            Spiral_builder::US15::US15_0(
                                v8,
                                v15,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        }
                    };
                    match &v42 {
                        Spiral_builder::US15::US15_0(
                            v42_0_0,
                            v42_0_1,
                            v42_0_2,
                            v42_0_3,
                            v42_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v42_0_0.clone()));
                            let v1_1_temp: string = v42_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v42_0_2.clone();
                            let v3_temp: i32 = v42_0_3.clone();
                            let v4_temp: i32 = v42_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method55;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method44(v0_1: string) -> Spiral_builder::US14 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v7: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v11: LrcPtr<StringBuilder> = StringBuilder::_ctor__Z721C83C5(string(""));
                fn v12(
                    arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure37((), arg10_0040)
                }
                fn v13(
                    arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure40((), arg10_0040_1)
                }
                let v17: Spiral_builder::US15 = Spiral_builder::method48(
                    v7.clone(),
                    v11.clone(),
                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                        Func1::from(v12),
                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                            Func1::from(v13),
                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                        )),
                    )),
                );
                let v153: Spiral_builder::US16 = match &v17 {
                    Spiral_builder::US15::US15_0(v17_0_0, v17_0_1, v17_0_2, v17_0_3, v17_0_4) => {
                        let v22: i32 = v17_0_4.clone();
                        let v21: i32 = v17_0_3.clone();
                        let v20: LrcPtr<StringBuilder> = v17_0_2.clone();
                        let v19: string = v17_0_1.clone();
                        let v88: Spiral_builder::US15 = if string("") == v19.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v20.clone(), v21, v22)
                            ))
                        } else {
                            let v37: char = getCharAt(v19.clone(), 0_i32);
                            let v44: string =
                                getSlice(v19.clone(), Some(1_i32), Some(length(v19.clone())));
                            if Spiral_builder::method49(v37, 0_i64) == false {
                                let v49: string = ofChar(v37);
                                let v52: i32 = length(v49.clone());
                                let v53: Array<char> = new_init(&'\u{0000}', v52);
                                let v54: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method45(v52, v54.clone()) {
                                    let v56: i32 = v54.l0.get().clone();
                                    let v57: char = getCharAt(v49.clone(), v56);
                                    v53.get_mut()[v56 as usize] = v57;
                                    {
                                        let v58: i32 = v56 + 1_i32;
                                        v54.l0.set(v58);
                                        ()
                                    }
                                }
                                {
                                    let v59: List<char> = ofArray(v53.clone());
                                    let patternInput:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method47(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method46())(b0)(b1)),
                                                                                  v59,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v20.clone(),
                                                                         v21,
                                                                         v22);
                                    Spiral_builder::US15::US15_0(
                                        v37,
                                        v44,
                                        patternInput.0.clone(),
                                        patternInput.1.clone(),
                                        patternInput.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v37,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'']))),
                                                                              (v20.clone(),
                                                                               v21,
                                                                               v22)))
                            }
                        };
                        let v100: Spiral_builder::US15 = match &v88 {
                            Spiral_builder::US15::US15_0(
                                v88_0_0,
                                v88_0_1,
                                v88_0_2,
                                v88_0_3,
                                v88_0_4,
                            ) => {
                                let v89: char = v88_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v89 { '/' } else { v89 },
                                    v88_0_1.clone(),
                                    v88_0_2.clone(),
                                    v88_0_3.clone(),
                                    v88_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v88_1_0) => {
                                Spiral_builder::US15::US15_1(v88_1_0.clone())
                            }
                        };
                        let v114: Spiral_builder::US16 = match &v100 {
                            Spiral_builder::US15::US15_0(
                                v100_0_0,
                                v100_0_1,
                                v100_0_2,
                                v100_0_3,
                                v100_0_4,
                            ) => Spiral_builder::method50(
                                ofChar(v100_0_0.clone()),
                                v100_0_1.clone(),
                                v100_0_2.clone(),
                                v100_0_3.clone(),
                                v100_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v100_1_0) => {
                                Spiral_builder::US16::US16_1(v100_1_0.clone())
                            }
                        };
                        let v124: Spiral_builder::US16 = match &v114 {
                            Spiral_builder::US16::US16_0(
                                v114_0_0,
                                v114_0_1,
                                v114_0_2,
                                v114_0_3,
                                v114_0_4,
                            ) => Spiral_builder::US16::US16_0(
                                v114_0_0.clone(),
                                v114_0_1.clone(),
                                v114_0_2.clone(),
                                v114_0_3.clone(),
                                v114_0_4.clone(),
                            ),
                            _ => Spiral_builder::US16::US16_0(
                                string(""),
                                v19.clone(),
                                v20.clone(),
                                v21,
                                v22,
                            ),
                        };
                        match &v124 {
                            Spiral_builder::US16::US16_0(
                                v124_0_0,
                                v124_0_1,
                                v124_0_2,
                                v124_0_3,
                                v124_0_4,
                            ) => {
                                let v129: i32 = v124_0_4.clone();
                                let v128: i32 = v124_0_3.clone();
                                let v127: LrcPtr<StringBuilder> = v124_0_2.clone();
                                let v126: string = v124_0_1.clone();
                                let v133: Spiral_builder::US15 = Spiral_builder::method51(
                                    v126.clone(),
                                    v127.clone(),
                                    v128,
                                    v129,
                                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                        Func1::from(v12),
                                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                            Func1::from(v13),
                                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v133 {
                                        Spiral_builder::US15::US15_0(v133_0_0,
                                                                     v133_0_1,
                                                                     v133_0_2,
                                                                     v133_0_3,
                                                                     v133_0_4)
                                        =>
                                        Spiral_builder::US16::US16_0(v124_0_0.clone(),
                                                                     v133_0_1.clone(),
                                                                     v133_0_2.clone(),
                                                                     v133_0_3.clone(),
                                                                     v133_0_4.clone()),
                                        Spiral_builder::US15::US15_1(v133_1_0)
                                        =>
                                        Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                              v133_1_0.clone(),
                                                                              (v7.clone(),
                                                                               v11.clone(),
                                                                               1_i32,
                                                                               1_i32),
                                                                              (v19,
                                                                               v20,
                                                                               v21,
                                                                               v22),
                                                                              (v126,
                                                                               v127,
                                                                               v128,
                                                                               v129))),
                                    }
                            }
                            _ => Spiral_builder::US16::US16_1(string("between / expected content")),
                        }
                    }
                    Spiral_builder::US15::US15_1(v17_1_0) => {
                        Spiral_builder::US16::US16_1(v17_1_0.clone())
                    }
                };
                let v303: Spiral_builder::US16 = match &v153 {
                    Spiral_builder::US16::US16_0(
                        v153_0_0,
                        v153_0_1,
                        v153_0_2,
                        v153_0_3,
                        v153_0_4,
                    ) => v153.clone(),
                    _ => {
                        let v233: Spiral_builder::US15 = if string("") == v7.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v11.clone(), 1_i32, 1_i32)
                            ))
                        } else {
                            let v177: char = getCharAt(v7.clone(), 0_i32);
                            let v184: string =
                                getSlice(v7.clone(), Some(1_i32), Some(length(v7.clone())));
                            if Spiral_builder::method52(v177, 0_i64) == false {
                                let v189: string = ofChar(v177);
                                let v192: i32 = length(v189.clone());
                                let v193: Array<char> = new_init(&'\u{0000}', v192);
                                let v194: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method45(v192, v194.clone()) {
                                    let v196: i32 = v194.l0.get().clone();
                                    let v197: char = getCharAt(v189.clone(), v196);
                                    v193.get_mut()[v196 as usize] = v197;
                                    {
                                        let v198: i32 = v196 + 1_i32;
                                        v194.l0.set(v198);
                                        ()
                                    }
                                }
                                {
                                    let v199: List<char> = ofArray(v193.clone());
                                    let patternInput_1:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method47(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method46())(b0)(b1)),
                                                                                  v199,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v11.clone(),
                                                                         1_i32,
                                                                         1_i32);
                                    Spiral_builder::US15::US15_0(
                                        v177,
                                        v184,
                                        patternInput_1.0.clone(),
                                        patternInput_1.1.clone(),
                                        patternInput_1.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v177,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'',
                                                                                                          ' ']))),
                                                                              (v11.clone(),
                                                                               1_i32,
                                                                               1_i32)))
                            }
                        };
                        let v245: Spiral_builder::US15 = match &v233 {
                            Spiral_builder::US15::US15_0(
                                v233_0_0,
                                v233_0_1,
                                v233_0_2,
                                v233_0_3,
                                v233_0_4,
                            ) => {
                                let v234: char = v233_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v234 { '/' } else { v234 },
                                    v233_0_1.clone(),
                                    v233_0_2.clone(),
                                    v233_0_3.clone(),
                                    v233_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v233_1_0) => {
                                Spiral_builder::US15::US15_1(v233_1_0.clone())
                            }
                        };
                        let v259: Spiral_builder::US16 = match &v245 {
                            Spiral_builder::US15::US15_0(
                                v245_0_0,
                                v245_0_1,
                                v245_0_2,
                                v245_0_3,
                                v245_0_4,
                            ) => Spiral_builder::method53(
                                ofChar(v245_0_0.clone()),
                                v245_0_1.clone(),
                                v245_0_2.clone(),
                                v245_0_3.clone(),
                                v245_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v245_1_0) => {
                                Spiral_builder::US16::US16_1(v245_1_0.clone())
                            }
                        };
                        match &v259 {
                            Spiral_builder::US16::US16_0(
                                v259_0_0,
                                v259_0_1,
                                v259_0_2,
                                v259_0_3,
                                v259_0_4,
                            ) => v259.clone(),
                            _ => {
                                let v271: Spiral_builder::US18 = if length(v7.clone()) == 0_i32 {
                                    Spiral_builder::US18::US18_0(
                                        v7.clone(),
                                        v11.clone(),
                                        1_i32,
                                        1_i32,
                                    )
                                } else {
                                    Spiral_builder::US18::US18_1(sprintf!(
                                        "parsing.eof / expected end of input / input: {:?}",
                                        v7.clone()
                                    ))
                                };
                                let v280: Spiral_builder::US16 = match &v271 {
                                    Spiral_builder::US18::US18_0(
                                        v271_0_0,
                                        v271_0_1,
                                        v271_0_2,
                                        v271_0_3,
                                    ) => Spiral_builder::US16::US16_0(
                                        string(""),
                                        v271_0_0.clone(),
                                        v271_0_1.clone(),
                                        v271_0_2.clone(),
                                        v271_0_3.clone(),
                                    ),
                                    Spiral_builder::US18::US18_1(v271_1_0) => {
                                        Spiral_builder::US16::US16_1(v271_1_0.clone())
                                    }
                                };
                                match &v280 {
                                    Spiral_builder::US16::US16_0(
                                        v280_0_0,
                                        v280_0_1,
                                        v280_0_2,
                                        v280_0_3,
                                        v280_0_4,
                                    ) => {
                                        let v282: string = v280_0_1.clone();
                                        Spiral_builder::US16::US16_0(
                                            v280_0_0.clone(),
                                            getSlice(
                                                v282.clone(),
                                                Some(Spiral_builder::method54(v282.clone(), 0_i32)),
                                                Some(length(v282)),
                                            ),
                                            v280_0_2.clone(),
                                            v280_0_3.clone(),
                                            v280_0_4.clone(),
                                        )
                                    }
                                    Spiral_builder::US16::US16_1(v280_1_0) => {
                                        Spiral_builder::US16::US16_1(v280_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v471: Spiral_builder::US19 = match &v303 {
                    Spiral_builder::US16::US16_0(
                        v303_0_0,
                        v303_0_1,
                        v303_0_2,
                        v303_0_3,
                        v303_0_4,
                    ) => {
                        let v308: i32 = v303_0_4.clone();
                        let v307: i32 = v303_0_3.clone();
                        let v306: LrcPtr<StringBuilder> = v303_0_2.clone();
                        let v305: string = v303_0_1.clone();
                        let v372: Spiral_builder::US15 = if string("") == v305.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.p_char / unexpected end of input / s: {:?}",
                                (v306.clone(), v307, v308)
                            ))
                        } else {
                            let v312: char = getCharAt(v305.clone(), 0_i32);
                            if v312 == ' ' {
                                let v320: string =
                                    getSlice(v305.clone(), Some(1_i32), Some(length(v305.clone())));
                                let v322: string = ofChar(v312);
                                let v325: i32 = length(v322.clone());
                                let v326: Array<char> = new_init(&'\u{0000}', v325);
                                let v327: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method45(v325, v327.clone()) {
                                    let v329: i32 = v327.l0.get().clone();
                                    let v330: char = getCharAt(v322.clone(), v329);
                                    v326.get_mut()[v329 as usize] = v330;
                                    {
                                        let v331: i32 = v329 + 1_i32;
                                        v327.l0.set(v331);
                                        ()
                                    }
                                }
                                {
                                    let v332: List<char> = ofArray(v326.clone());
                                    let patternInput_2:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method47(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method46())(b0)(b1)),
                                                                                  v332,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v306.clone(),
                                                                         v307,
                                                                         v308);
                                    Spiral_builder::US15::US15_0(
                                        v312,
                                        v320,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                }
                            } else {
                                let v348: i32 = length(v305.clone());
                                let v351: i32 = indexOf(v305.clone(), string("\n")) - 1_i32;
                                Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                              sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                       ' ',
                                                                                       v307,
                                                                                       v308,
                                                                                       v306.clone(),
                                                                                       getSlice(v305.clone(),
                                                                                                Some(0_i32),
                                                                                                Some(if -2_i32
                                                                                                            ==
                                                                                                            v351
                                                                                                        {
                                                                                                         v348
                                                                                                     } else {
                                                                                                         v351
                                                                                                     }))),
                                                                              append(replicate(v308
                                                                                                   -
                                                                                                   1_i32,
                                                                                               string(" ")),
                                                                                     string("^"))))
                            }
                        };
                        let v384: Spiral_builder::US20 = match &v372 {
                            Spiral_builder::US15::US15_0(
                                v372_0_0,
                                v372_0_1,
                                v372_0_2,
                                v372_0_3,
                                v372_0_4,
                            ) => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_0(v372_0_0.clone()),
                                v372_0_1.clone(),
                                v372_0_2.clone(),
                                v372_0_3.clone(),
                                v372_0_4.clone(),
                            ),
                            _ => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_1,
                                v305.clone(),
                                v306.clone(),
                                v307,
                                v308,
                            ),
                        };
                        let v445: Spiral_builder::US16 = match &v384 {
                            Spiral_builder::US20::US20_0(
                                v384_0_0,
                                v384_0_1,
                                v384_0_2,
                                v384_0_3,
                                v384_0_4,
                            ) => {
                                let v389: i32 = v384_0_4.clone();
                                let v388: i32 = v384_0_3.clone();
                                let v387: LrcPtr<StringBuilder> = v384_0_2.clone();
                                let v386: string = v384_0_1.clone();
                                let v427: Spiral_builder::US15 = if string("") == v386.clone() {
                                    Spiral_builder::US15::US15_1(sprintf!(
                                        "parsing.any_char / unexpected end of input / s: {:?}",
                                        (v387.clone(), v388, v389)
                                    ))
                                } else {
                                    let v393: char = getCharAt(v386.clone(), 0_i32);
                                    let v400: string =
                                        getSlice(v386.clone(), Some(1_i32), Some(length(v386)));
                                    let v402: string = ofChar(v393);
                                    let v405: i32 = length(v402.clone());
                                    let v406: Array<char> = new_init(&'\u{0000}', v405);
                                    let v407: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method45(v405, v407.clone()) {
                                        let v409: i32 = v407.l0.get().clone();
                                        let v410: char = getCharAt(v402.clone(), v409);
                                        v406.get_mut()[v409 as usize] = v410;
                                        {
                                            let v411: i32 = v409 + 1_i32;
                                            v407.l0.set(v411);
                                            ()
                                        }
                                    }
                                    {
                                        let v412: List<char> = ofArray(v406.clone());
                                        let patternInput_3:
                                                            (LrcPtr<StringBuilder>,
                                                             i32, i32) =
                                                        Spiral_builder::method47(foldBack(Func2::new(move
                                                                                                         |b0:
                                                                                                              char,
                                                                                                          b1:
                                                                                                              LrcPtr<Spiral_builder::UH0>|
                                                                                                         (Spiral_builder::method46())(b0)(b1)),
                                                                                          v412,
                                                                                          LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                 v387,
                                                                                 v388,
                                                                                 v389);
                                        Spiral_builder::US15::US15_0(
                                            v393,
                                            v400,
                                            patternInput_3.0.clone(),
                                            patternInput_3.1.clone(),
                                            patternInput_3.2.clone(),
                                        )
                                    }
                                };
                                match &v427 {
                                    Spiral_builder::US15::US15_0(
                                        v427_0_0,
                                        v427_0_1,
                                        v427_0_2,
                                        v427_0_3,
                                        v427_0_4,
                                    ) => Spiral_builder::method55(
                                        ofChar(v427_0_0.clone()),
                                        v427_0_1.clone(),
                                        v427_0_2.clone(),
                                        v427_0_3.clone(),
                                        v427_0_4.clone(),
                                    ),
                                    Spiral_builder::US15::US15_1(v427_1_0) => {
                                        Spiral_builder::US16::US16_1(v427_1_0.clone())
                                    }
                                }
                            }
                            Spiral_builder::US20::US20_1(v384_1_0) => {
                                Spiral_builder::US16::US16_1(v384_1_0.clone())
                            }
                        };
                        let v457: Spiral_builder::US21 = match &v445 {
                            Spiral_builder::US16::US16_0(
                                v445_0_0,
                                v445_0_1,
                                v445_0_2,
                                v445_0_3,
                                v445_0_4,
                            ) => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_0(v445_0_0.clone()),
                                v445_0_1.clone(),
                                v445_0_2.clone(),
                                v445_0_3.clone(),
                                v445_0_4.clone(),
                            ),
                            _ => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_1,
                                v305,
                                v306,
                                v307,
                                v308,
                            ),
                        };
                        match &v457 {
                            Spiral_builder::US21::US21_0(
                                v457_0_0,
                                v457_0_1,
                                v457_0_2,
                                v457_0_3,
                                v457_0_4,
                            ) => Spiral_builder::US19::US19_0(
                                v303_0_0.clone(),
                                v457_0_0.clone(),
                                v457_0_1.clone(),
                                v457_0_2.clone(),
                                v457_0_3.clone(),
                                v457_0_4.clone(),
                            ),
                            Spiral_builder::US21::US21_1(v457_1_0) => {
                                Spiral_builder::US19::US19_1(v457_1_0.clone())
                            }
                        }
                    }
                    Spiral_builder::US16::US16_1(v303_1_0) => {
                        Spiral_builder::US19::US19_1(v303_1_0.clone())
                    }
                };
                match &v471 {
                    Spiral_builder::US19::US19_0(
                        v471_0_0,
                        v471_0_1,
                        v471_0_2,
                        v471_0_3,
                        v471_0_4,
                        v471_0_5,
                    ) => Spiral_builder::US14::US14_0(v471_0_0.clone(), v471_0_1.clone()),
                    Spiral_builder::US19::US19_1(v471_1_0) => {
                        Spiral_builder::US14::US14_1(v471_1_0.clone())
                    }
                }
            }
        }
        pub fn method58(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method58: loop {
                break '_method58 (if v1_1.get().clone() >= 4_i64 {
                    false
                } else {
                    let v19: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                if v11 == 0_i64 {
                                    Spiral_builder::US17::US17_0(' ')
                                } else {
                                    let v14: i64 = v11 - 1_i64;
                                    Spiral_builder::US17::US17_1
                                }
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v19 {
                            Spiral_builder::US17::US17_0(v19_0_0) => match &v19 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method58;
                    }
                });
            }
        }
        pub fn method59(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method59: loop {
                break '_method59 ({
                    let v82: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method58(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method45(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method47(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method46())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method59;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method61(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method61: loop {
                break '_method61 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method61;
                    }
                });
            }
        }
        pub fn closure41(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\\' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method45(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method47(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method46())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\\',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method45(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method47(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method46())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '\\', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn closure42(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '`' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method45(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method47(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method46())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '`',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method45(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method47(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method46())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '`', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn method62(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH3>,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH3>> = MutCell::new(v4.clone());
            '_method62: loop {
                break '_method62 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH3::UH3_0 => {
                        Spiral_builder::US16::US16_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US16 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US16::US16_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method62;
                            }
                        }
                    }
                });
            }
        }
        pub fn method63(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v1_1.clone());
            '_method63: loop {
                break '_method63 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                            match v0_1.get().clone().as_ref() {
                                Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            };
                        let v1_1_temp: LrcPtr<Spiral_builder::UH2> =
                            LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                v1_1.get().clone(),
                            ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method63;
                    }
                });
            }
        }
        pub fn method60(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method60: loop {
                break '_method60 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method61(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method45(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method47(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method46())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    let v104: Spiral_builder::US16 = match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => v90.clone(),
                        _ => Spiral_builder::method62(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral_builder::closure41((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral_builder::closure42((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral_builder::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v104 {
                        Spiral_builder::US16::US16_0(
                            v104_0_0,
                            v104_0_1,
                            v104_0_2,
                            v104_0_3,
                            v104_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v104_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v104_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v104_0_2.clone();
                            let v3_temp: i32 = v104_0_3.clone();
                            let v4_temp: i32 = v104_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method60;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method63(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method64(v0_1: LrcPtr<Spiral_builder::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v1_1.clone(),
                Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    Spiral_builder::method64(
                        match v0_1.as_ref() {
                            Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method65(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method65: loop {
                break '_method65 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method61(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method45(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method47(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method46())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v90_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v90_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v90_0_2.clone();
                            let v3_temp: i32 = v90_0_3.clone();
                            let v4_temp: i32 = v90_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method65;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method63(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method66(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method66: loop {
                break '_method66 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method66;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method57(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method57: loop {
                break '_method57 ({
                    let v5: bool = string("") == v1_1.get().clone();
                    let v82: Spiral_builder::US15 = if v5 {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method58(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method45(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method47(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method46())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v96: Spiral_builder::US16 = match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => Spiral_builder::method59(
                            ofChar(v82_0_0.clone()),
                            v82_0_1.clone(),
                            v82_0_2.clone(),
                            v82_0_3.clone(),
                            v82_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v82_1_0) => {
                            Spiral_builder::US16::US16_1(v82_1_0.clone())
                        }
                    };
                    let v341: Spiral_builder::US16 = match &v96 {
                        Spiral_builder::US16::US16_0(
                            v96_0_0,
                            v96_0_1,
                            v96_0_2,
                            v96_0_3,
                            v96_0_4,
                        ) => v96.clone(),
                        _ => {
                            let v165: Spiral_builder::US15 = if v5 {
                                Spiral_builder::US15::US15_1(sprintf!(
                                    "parsing.p_char / unexpected end of input / s: {:?}",
                                    (v2.get().clone(), v3.get().clone(), v4.get().clone())
                                ))
                            } else {
                                let v105: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if v105 == '\"' {
                                    let v113: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some(length(v1_1.get().clone())),
                                    );
                                    let v115: string = ofChar(v105);
                                    let v118: i32 = length(v115.clone());
                                    let v119: Array<char> = new_init(&'\u{0000}', v118);
                                    let v120: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method45(v118, v120.clone()) {
                                        let v122: i32 = v120.l0.get().clone();
                                        let v123: char = getCharAt(v115.clone(), v122);
                                        v119.get_mut()[v122 as usize] = v123;
                                        {
                                            let v124: i32 = v122 + 1_i32;
                                            v120.l0.set(v124);
                                            ()
                                        }
                                    }
                                    {
                                        let v125: List<char> = ofArray(v119.clone());
                                        let patternInput_1:
                                                                 (LrcPtr<StringBuilder>,
                                                                  i32, i32) =
                                                             Spiral_builder::method47(foldBack(Func2::new(move
                                                                                                              |b0:
                                                                                                                   char,
                                                                                                               b1:
                                                                                                                   LrcPtr<Spiral_builder::UH0>|
                                                                                                              (Spiral_builder::method46())(b0)(b1)),
                                                                                               v125,
                                                                                               LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                      v2.get().clone(),
                                                                                      v3.get().clone(),
                                                                                      v4.get().clone());
                                        Spiral_builder::US15::US15_0(
                                            v105,
                                            v113,
                                            patternInput_1.0.clone(),
                                            patternInput_1.1.clone(),
                                            patternInput_1.2.clone(),
                                        )
                                    }
                                } else {
                                    let v141: i32 = length(v1_1.get().clone());
                                    let v144: i32 =
                                        indexOf(v1_1.get().clone(), string("\n")) - 1_i32;
                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                           sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                    '\"',
                                                                                                    v3.get().clone(),
                                                                                                    v4.get().clone(),
                                                                                                    v2.get().clone(),
                                                                                                    getSlice(v1_1.get().clone(),
                                                                                                             Some(0_i32),
                                                                                                             Some(if -2_i32
                                                                                                                         ==
                                                                                                                         v144
                                                                                                                     {
                                                                                                                      v141
                                                                                                                  } else {
                                                                                                                      v144
                                                                                                                  }))),
                                                                                           append(replicate(v4.get().clone()
                                                                                                                -
                                                                                                                1_i32,
                                                                                                            string(" ")),
                                                                                                  string("^"))))
                                }
                            };
                            let v282: Spiral_builder::US16 = match &v165 {
                                Spiral_builder::US15::US15_0(
                                    v165_0_0,
                                    v165_0_1,
                                    v165_0_2,
                                    v165_0_3,
                                    v165_0_4,
                                ) => {
                                    let v170: i32 = v165_0_4.clone();
                                    let v169: i32 = v165_0_3.clone();
                                    let v168: LrcPtr<StringBuilder> = v165_0_2.clone();
                                    let v167: string = v165_0_1.clone();
                                    let v172: Spiral_builder::US23 = Spiral_builder::method60(
                                        LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        v167.clone(),
                                        v168.clone(),
                                        v169,
                                        v170,
                                    );
                                    let v193: Spiral_builder::US16 = match &v172 {
                                        Spiral_builder::US23::US23_0(
                                            v172_0_0,
                                            v172_0_1,
                                            v172_0_2,
                                            v172_0_3,
                                            v172_0_4,
                                        ) => {
                                            let v179: List<string> = Spiral_builder::method64(
                                                v172_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v179 = v179.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v179 = v179.clone();
                                                                    move |i: i32| {
                                                                        item(i, v179.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v179.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v172_0_1.clone(),
                                                v172_0_2.clone(),
                                                v172_0_3.clone(),
                                                v172_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v172_1_0) => {
                                            Spiral_builder::US16::US16_1(v172_1_0.clone())
                                        }
                                    };
                                    match &v193 {
                                        Spiral_builder::US16::US16_0(
                                            v193_0_0,
                                            v193_0_1,
                                            v193_0_2,
                                            v193_0_3,
                                            v193_0_4,
                                        ) => {
                                            let v198: i32 = v193_0_4.clone();
                                            let v197: i32 = v193_0_3.clone();
                                            let v196: LrcPtr<StringBuilder> = v193_0_2.clone();
                                            let v195: string = v193_0_1.clone();
                                            let v262: Spiral_builder::US15 = if string("")
                                                == v195.clone()
                                            {
                                                Spiral_builder::US15::US15_1(sprintf!("parsing.p_char / unexpected end of input / s: {:?}",
                                                                                                           (v196.clone(),
                                                                                                            v197,
                                                                                                            v198)))
                                            } else {
                                                let v202: char = getCharAt(v195.clone(), 0_i32);
                                                if v202 == '\"' {
                                                    let v210: string = getSlice(
                                                        v195.clone(),
                                                        Some(1_i32),
                                                        Some(length(v195.clone())),
                                                    );
                                                    let v212: string = ofChar(v202);
                                                    let v215: i32 = length(v212.clone());
                                                    let v216: Array<char> =
                                                        new_init(&'\u{0000}', v215);
                                                    let v217: LrcPtr<Spiral_builder::Mut5> =
                                                        LrcPtr::new(Spiral_builder::Mut5 {
                                                            l0: MutCell::new(0_i32),
                                                        });
                                                    while Spiral_builder::method45(
                                                        v215,
                                                        v217.clone(),
                                                    ) {
                                                        let v219: i32 = v217.l0.get().clone();
                                                        let v220: char =
                                                            getCharAt(v212.clone(), v219);
                                                        v216.get_mut()[v219 as usize] = v220;
                                                        {
                                                            let v221: i32 = v219 + 1_i32;
                                                            v217.l0.set(v221);
                                                            ()
                                                        }
                                                    }
                                                    {
                                                        let v222: List<char> =
                                                            ofArray(v216.clone());
                                                        let patternInput_2:
                                                                                     (LrcPtr<StringBuilder>,
                                                                                      i32,
                                                                                      i32) =
                                                                                 Spiral_builder::method47(foldBack(Func2::new(move
                                                                                                                                  |b0:
                                                                                                                                       char,
                                                                                                                                   b1:
                                                                                                                                       LrcPtr<Spiral_builder::UH0>|
                                                                                                                                  (Spiral_builder::method46())(b0)(b1)),
                                                                                                                   v222,
                                                                                                                   LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                                          v196.clone(),
                                                                                                          v197,
                                                                                                          v198);
                                                        Spiral_builder::US15::US15_0(
                                                            v202,
                                                            v210,
                                                            patternInput_2.0.clone(),
                                                            patternInput_2.1.clone(),
                                                            patternInput_2.2.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v238: i32 = length(v195.clone());
                                                    let v241: i32 =
                                                        indexOf(v195.clone(), string("\n")) - 1_i32;
                                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                                               sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                                        '\"',
                                                                                                                        v197,
                                                                                                                        v198,
                                                                                                                        v196.clone(),
                                                                                                                        getSlice(v195.clone(),
                                                                                                                                 Some(0_i32),
                                                                                                                                 Some(if -2_i32
                                                                                                                                             ==
                                                                                                                                             v241
                                                                                                                                         {
                                                                                                                                          v238
                                                                                                                                      } else {
                                                                                                                                          v241
                                                                                                                                      }))),
                                                                                                               append(replicate(v198
                                                                                                                                    -
                                                                                                                                    1_i32,
                                                                                                                                string(" ")),
                                                                                                                      string("^"))))
                                                }
                                            };
                                            match &v262 {
                                                                 Spiral_builder::US15::US15_0(v262_0_0,
                                                                                              v262_0_1,
                                                                                              v262_0_2,
                                                                                              v262_0_3,
                                                                                              v262_0_4)
                                                                 =>
                                                                 Spiral_builder::US16::US16_0(v193_0_0.clone(),
                                                                                              v262_0_1.clone(),
                                                                                              v262_0_2.clone(),
                                                                                              v262_0_3.clone(),
                                                                                              v262_0_4.clone()),
                                                                 Spiral_builder::US15::US15_1(v262_1_0)
                                                                 =>
                                                                 Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                                                       v262_1_0.clone(),
                                                                                                       (v1_1.get().clone(),
                                                                                                        v2.get().clone(),
                                                                                                        v3.get().clone(),
                                                                                                        v4.get().clone()),
                                                                                                       (v167,
                                                                                                        v168,
                                                                                                        v169,
                                                                                                        v170),
                                                                                                       (v195,
                                                                                                        v196,
                                                                                                        v197,
                                                                                                        v198))),
                                                             }
                                        }
                                        _ => Spiral_builder::US16::US16_1(string(
                                            "between / expected content",
                                        )),
                                    }
                                }
                                Spiral_builder::US15::US15_1(v165_1_0) => {
                                    Spiral_builder::US16::US16_1(v165_1_0.clone())
                                }
                            };
                            match &v282 {
                                Spiral_builder::US16::US16_0(
                                    v282_0_0,
                                    v282_0_1,
                                    v282_0_2,
                                    v282_0_3,
                                    v282_0_4,
                                ) => v282.clone(),
                                _ => {
                                    let v294:
                                                         Spiral_builder::US16 =
                                                     Spiral_builder::method62(v1_1.get().clone(),
                                                                              v2.get().clone(),
                                                                              v3.get().clone(),
                                                                              v4.get().clone(),
                                                                              LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                    |arg10_0040:
                                                                                                                                         (string,
                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                          i32,
                                                                                                                                          i32)|
                                                                                                                                    Spiral_builder::closure41((),
                                                                                                                                                              arg10_0040)),
                                                                                                                     LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                                                           |arg10_0040_1:
                                                                                                                                                                                (string,
                                                                                                                                                                                 LrcPtr<StringBuilder>,
                                                                                                                                                                                 i32,
                                                                                                                                                                                 i32)|
                                                                                                                                                                           Spiral_builder::closure42((),
                                                                                                                                                                                                     arg10_0040_1)),
                                                                                                                                                            LrcPtr::new(Spiral_builder::UH3::UH3_0))))));
                                    let v305: Spiral_builder::US16 = match &v294 {
                                        Spiral_builder::US16::US16_0(
                                            v294_0_0,
                                            v294_0_1,
                                            v294_0_2,
                                            v294_0_3,
                                            v294_0_4,
                                        ) => Spiral_builder::US16::US16_0(
                                            string(""),
                                            v294_0_1.clone(),
                                            v294_0_2.clone(),
                                            v294_0_3.clone(),
                                            v294_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v294_1_0) => {
                                            Spiral_builder::US16::US16_1(v294_1_0.clone())
                                        }
                                    };
                                    let v316: Spiral_builder::US23 = match &v305 {
                                        Spiral_builder::US16::US16_0(
                                            v305_0_0,
                                            v305_0_1,
                                            v305_0_2,
                                            v305_0_3,
                                            v305_0_4,
                                        ) => Spiral_builder::method65(
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            v305_0_1.clone(),
                                            v305_0_2.clone(),
                                            v305_0_3.clone(),
                                            v305_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v305_1_0) => {
                                            Spiral_builder::US23::US23_1(v305_1_0.clone())
                                        }
                                    };
                                    match &v316 {
                                        Spiral_builder::US23::US23_0(
                                            v316_0_0,
                                            v316_0_1,
                                            v316_0_2,
                                            v316_0_3,
                                            v316_0_4,
                                        ) => {
                                            let v323: List<string> = Spiral_builder::method64(
                                                v316_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v323 = v323.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v323 = v323.clone();
                                                                    move |i_1: i32| {
                                                                        item(i_1, v323.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v323.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v316_0_1.clone(),
                                                v316_0_2.clone(),
                                                v316_0_3.clone(),
                                                v316_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v316_1_0) => {
                                            Spiral_builder::US16::US16_1(v316_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v341 {
                        Spiral_builder::US16::US16_0(
                            v341_0_0,
                            v341_0_1,
                            v341_0_2,
                            v341_0_3,
                            v341_0_4,
                        ) => {
                            let v350: i32 = v341_0_4.clone();
                            let v349: i32 = v341_0_3.clone();
                            let v348: LrcPtr<StringBuilder> = v341_0_2.clone();
                            let v347: string = v341_0_1.clone();
                            let v346: string = v341_0_0.clone();
                            let v352: i32 = Spiral_builder::method66(v347.clone(), 0_i32);
                            let v364: Spiral_builder::US18 = if 0_i32 == v352 {
                                Spiral_builder::US18::US18_1(string(
                                    "spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral_builder::US18::US18_0(
                                    getSlice(v347.clone(), Some(v352), Some(length(v347.clone()))),
                                    v348.clone(),
                                    v349,
                                    v350,
                                )
                            };
                            match &v364 {
                                Spiral_builder::US18::US18_0(
                                    v364_0_0,
                                    v364_0_1,
                                    v364_0_2,
                                    v364_0_3,
                                ) => {
                                    let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            v0_1.get().clone(),
                                        ));
                                    let v1_1_temp: string = v364_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v364_0_1.clone();
                                    let v3_temp: i32 = v364_0_2.clone();
                                    let v4_temp: i32 = v364_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method57;
                                }
                                _ => Spiral_builder::US23::US23_0(
                                    Spiral_builder::method63(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        )),
                                    ),
                                    v347,
                                    v348,
                                    v349,
                                    v350,
                                ),
                            }
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method63(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method56(v0_1: string) -> Spiral_builder::US22 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v15: Spiral_builder::US23 = Spiral_builder::method57(
                    LrcPtr::new(Spiral_builder::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(string("")),
                    1_i32,
                    1_i32,
                );
                match &v15 {
                    Spiral_builder::US23::US23_0(v15_0_0, v15_0_1, v15_0_2, v15_0_3, v15_0_4) => {
                        Spiral_builder::US22::US22_0(toArray(Spiral_builder::method64(
                            v15_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral_builder::US23::US23_1(v15_1_0) => {
                        Spiral_builder::US22::US22_1(v15_1_0.clone())
                    }
                }
            }
        }
        pub fn closure44(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options")
        }
        pub fn closure43(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            unitVar: (),
        ) {
            fn v10() {
                Spiral_builder::closure2((), ());
            }
            let v11: () = {
                v10();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v40: () = {
                v10();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v68: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v10();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v109: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v114: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v109 = _v109.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v109.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v129: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v109.get().clone());
                let v169: DateTime = match &v129 {
                    Spiral_builder::US3::US3_0(v129_0_0) => {
                        let v143: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v129 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v143.hours(),
                            v143.minutes(),
                            v143.seconds(),
                            v143.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v174: string = {
                    let provider: string = Spiral_builder::method6();
                    v169.toString(provider)
                };
                let v562: string = Spiral_builder::method8();
                let v574: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v585: () = {
                    Spiral_builder::closure10(
                        v574.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v589: Array<string> = split(v574.l0.get().clone(), v562, -1_i32, 0_i32);
                let v592: string = v589[0_i32].clone();
                let v596: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v607: () = {
                    Spiral_builder::closure10(
                        v596.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v617: Spiral_builder::US1 = if startsWith(v596.l0.get().clone(), v592, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v623: Spiral_builder::US1 = match &v617 {
                    Spiral_builder::US1::US1_0(v617_0_0) => {
                        Spiral_builder::US1::US1_0(match &v617 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v632: string = padLeft(
                    toLower(match &v623 {
                        Spiral_builder::US1::US1_0(v623_0_0) => match &v623 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v648: &str = inline_colorization::color_bright_blue;
                let v650: &str = &*v632;
                let v652: &str = inline_colorization::color_reset;
                let v654: string = string("format!(\"{v648}{v650}{v652}\")");
                let v655: std::string::String = format!("{v648}{v650}{v652}");
                let v657: string = fable_library_rust::String_::fromString(v655);
                let v698: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v700: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v707: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v716: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", string("file_name")),
                        (),
                    );
                    ()
                };
                let v725: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v733: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", v7), ());
                    ()
                };
                let v742: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v751: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", string("arguments")),
                        (),
                    );
                    ()
                };
                let v759: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v764: std::string::String = format!("{:#?}", v8);
                let v794: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v764)),
                        (),
                    );
                    ()
                };
                let v802: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v811: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("options")), ());
                    ()
                };
                let v819: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v827: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v836: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("command")), ());
                    ()
                };
                let v844: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v852: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v860: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v869: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", string("cancellation_token")),
                        (),
                    );
                    ()
                };
                let v877: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v882: std::string::String = format!("{:#?}", v1_1);
                let v912: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v882)),
                        (),
                    );
                    ()
                };
                let v920: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v929: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", string("environment_variables")),
                        (),
                    );
                    ()
                };
                let v937: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v948: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", sprintf!("{:?}", v2)),
                        (),
                    );
                    ()
                };
                let v956: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v965: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("on_line")), ());
                    ()
                };
                let v973: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v978: std::string::String = format!("{:#?}", v3);
                let v1008: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v978)),
                        (),
                    );
                    ()
                };
                let v1016: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1025: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("stdin")), ());
                    ()
                };
                let v1033: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1038: std::string::String = format!("{:#?}", v4);
                let v1068: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v1038)),
                        (),
                    );
                    ()
                };
                let v1076: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1085: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("trace")), ());
                    ()
                };
                let v1093: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1104: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", if v5 { string("true") } else { string("false") }),
                        (),
                    );
                    ()
                };
                let v1112: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1121: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", string("working_directory")),
                        (),
                    );
                    ()
                };
                let v1129: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1134: std::string::String = format!("{:#?}", v6);
                let v1164: () = {
                    Spiral_builder::closure10(
                        v700.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v1134)),
                        (),
                    );
                    ()
                };
                let v1173: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1181: () = {
                    Spiral_builder::closure10(v700.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1184: string = v700.l0.get().clone();
                let v1223: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v174,
                            v657,
                            v698,
                            Spiral_builder::closure44((), ()),
                            v1184
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1223.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1223)
            }
        }
        pub fn closure45(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_0(v0_1)
        }
        pub fn method67() -> Func1<
            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
            Spiral_builder::US24,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral_builder::closure45((), v)
                },
            )
        }
        pub fn closure46(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_1(v0_1)
        }
        pub fn method68() -> Func1<std::string::String, Spiral_builder::US24> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure46((), v))
        }
        pub fn closure48(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / child error")
        }
        pub fn closure47(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v798: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v613: string = Spiral_builder::method8();
                        let v625: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v636: () = {
                            Spiral_builder::closure10(
                                v625.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v640: Array<string> = split(v625.l0.get().clone(), v613, -1_i32, 0_i32);
                        let v643: string = v640[0_i32].clone();
                        let v647: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v658: () = {
                            Spiral_builder::closure10(
                                v647.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v668: Spiral_builder::US1 =
                            if startsWith(v647.l0.get().clone(), v643, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v668 {
                            Spiral_builder::US1::US1_0(v668_0_0) => {
                                Spiral_builder::US1::US1_0(match &v668 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v672: string = Spiral_builder::method8();
                                let v684: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v695: () = {
                                    Spiral_builder::closure10(
                                        v684.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v699: Array<string> =
                                    split(v684.l0.get().clone(), v672, -1_i32, 0_i32);
                                let v702: string = v699[0_i32].clone();
                                let v706: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v717: () = {
                                    Spiral_builder::closure10(
                                        v706.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v727: Spiral_builder::US1 =
                                    if startsWith(v706.l0.get().clone(), v702, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v727 {
                                    Spiral_builder::US1::US1_0(v727_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v727 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v731: string = Spiral_builder::method8();
                                        let v743: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v754: () = {
                                            Spiral_builder::closure10(
                                                v743.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v758: Array<string> =
                                            split(v743.l0.get().clone(), v731, -1_i32, 0_i32);
                                        let v761: string = v758[0_i32].clone();
                                        let v765: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v776: () = {
                                            Spiral_builder::closure10(
                                                v765.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v786: Spiral_builder::US1 =
                                            if startsWith(v765.l0.get().clone(), v761, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v786 {
                                            Spiral_builder::US1::US1_0(v786_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v786 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v807: string = padLeft(
                    toLower(match &v798 {
                        Spiral_builder::US1::US1_0(v798_0_0) => match &v798 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v823: &str = inline_colorization::color_bright_red;
                let v825: &str = &*v807;
                let v827: &str = inline_colorization::color_reset;
                let v829: string = string("format!(\"{v823}{v825}{v827}\")");
                let v830: std::string::String = format!("{v823}{v825}{v827}");
                let v832: string = fable_library_rust::String_::fromString(v830);
                let v873: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v875: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v882: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v891: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v900: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v905: std::string::String = format!("{:#?}", v0_1);
                let v935: () = {
                    Spiral_builder::closure10(
                        v875.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v905)),
                        (),
                    );
                    ()
                };
                let v944: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v947: string = v875.l0.get().clone();
                let v986: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v832,
                            v873,
                            Spiral_builder::closure48((), ()),
                            v947
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v986.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v986)
            }
        }
        pub fn closure49(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_0(v0_1)
        }
        pub fn method69() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure49((), v))
        }
        pub fn closure50(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_1(v0_1)
        }
        pub fn method70() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure50((), v))
        }
        pub fn closure52(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.stdio_line")
        }
        pub fn closure51(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v798: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v613: string = Spiral_builder::method8();
                        let v625: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v636: () = {
                            Spiral_builder::closure10(
                                v625.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v640: Array<string> = split(v625.l0.get().clone(), v613, -1_i32, 0_i32);
                        let v643: string = v640[0_i32].clone();
                        let v647: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v658: () = {
                            Spiral_builder::closure10(
                                v647.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v668: Spiral_builder::US1 =
                            if startsWith(v647.l0.get().clone(), v643, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v668 {
                            Spiral_builder::US1::US1_0(v668_0_0) => {
                                Spiral_builder::US1::US1_0(match &v668 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v672: string = Spiral_builder::method8();
                                let v684: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v695: () = {
                                    Spiral_builder::closure10(
                                        v684.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v699: Array<string> =
                                    split(v684.l0.get().clone(), v672, -1_i32, 0_i32);
                                let v702: string = v699[0_i32].clone();
                                let v706: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v717: () = {
                                    Spiral_builder::closure10(
                                        v706.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v727: Spiral_builder::US1 =
                                    if startsWith(v706.l0.get().clone(), v702, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v727 {
                                    Spiral_builder::US1::US1_0(v727_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v727 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v731: string = Spiral_builder::method8();
                                        let v743: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v754: () = {
                                            Spiral_builder::closure10(
                                                v743.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v758: Array<string> =
                                            split(v743.l0.get().clone(), v731, -1_i32, 0_i32);
                                        let v761: string = v758[0_i32].clone();
                                        let v765: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v776: () = {
                                            Spiral_builder::closure10(
                                                v765.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v786: Spiral_builder::US1 =
                                            if startsWith(v765.l0.get().clone(), v761, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v786 {
                                            Spiral_builder::US1::US1_0(v786_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v786 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v807: string = padLeft(
                    toLower(match &v798 {
                        Spiral_builder::US1::US1_0(v798_0_0) => match &v798 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v823: &str = inline_colorization::color_bright_red;
                let v825: &str = &*v807;
                let v827: &str = inline_colorization::color_reset;
                let v829: string = string("format!(\"{v823}{v825}{v827}\")");
                let v830: std::string::String = format!("{v823}{v825}{v827}");
                let v832: string = fable_library_rust::String_::fromString(v830);
                let v873: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v875: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v882: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v891: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string("e")), ());
                    ()
                };
                let v900: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v905: std::string::String = format!("{:#?}", v0_1);
                let v935: () = {
                    Spiral_builder::closure10(
                        v875.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v905)),
                        (),
                    );
                    ()
                };
                let v944: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v947: string = v875.l0.get().clone();
                let v986: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v832,
                            v873,
                            Spiral_builder::closure52((), ()),
                            v947
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v986.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v986)
            }
        }
        pub fn closure54(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure53(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_black;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v627: string = v626.l0.get().clone();
                let v666: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure54(v0_1, ()),
                            v627
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v666.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v666)
            }
        }
        pub fn closure55(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method71(
        ) -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral_builder::closure55((), v)
            })
        }
        pub fn method72(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn closure56(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US27>>>,
            v1_1: Option<Spiral_builder::US27>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US27>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure57(
            v0_1: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v1_1: Func1<
                Option<Spiral_builder::US27>,
                LrcPtr<MutCell<Option<Spiral_builder::US27>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US27>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US27>,
                    Some(v0_1_0_0) => {
                        let x = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US27::US27_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn closure58(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US28>>>,
            v1_1: Option<Spiral_builder::US28>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US28>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure59(
            v0_1: Option<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>>,
            v1_1: Func1<
                Option<Spiral_builder::US28>,
                LrcPtr<MutCell<Option<Spiral_builder::US28>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US28>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US28>,
                    Some(v0_1_0_0) => {
                        let x: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> =
                            v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US28::US28_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method73(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn method74(
            v0_1: std::thread::JoinHandle<Result<(), string>>,
        ) -> std::thread::JoinHandle<Result<(), string>> {
            v0_1
        }
        pub fn closure60(unitVar: (), v0_1: std::process::Output) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_0(v0_1)
        }
        pub fn closure61(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_1(v0_1)
        }
        pub fn closure63(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / output error")
        }
        pub fn closure62(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v798: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v613: string = Spiral_builder::method8();
                        let v625: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v636: () = {
                            Spiral_builder::closure10(
                                v625.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v640: Array<string> = split(v625.l0.get().clone(), v613, -1_i32, 0_i32);
                        let v643: string = v640[0_i32].clone();
                        let v647: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v658: () = {
                            Spiral_builder::closure10(
                                v647.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v668: Spiral_builder::US1 =
                            if startsWith(v647.l0.get().clone(), v643, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v668 {
                            Spiral_builder::US1::US1_0(v668_0_0) => {
                                Spiral_builder::US1::US1_0(match &v668 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v672: string = Spiral_builder::method8();
                                let v684: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v695: () = {
                                    Spiral_builder::closure10(
                                        v684.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v699: Array<string> =
                                    split(v684.l0.get().clone(), v672, -1_i32, 0_i32);
                                let v702: string = v699[0_i32].clone();
                                let v706: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v717: () = {
                                    Spiral_builder::closure10(
                                        v706.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v727: Spiral_builder::US1 =
                                    if startsWith(v706.l0.get().clone(), v702, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v727 {
                                    Spiral_builder::US1::US1_0(v727_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v727 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v731: string = Spiral_builder::method8();
                                        let v743: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v754: () = {
                                            Spiral_builder::closure10(
                                                v743.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v758: Array<string> =
                                            split(v743.l0.get().clone(), v731, -1_i32, 0_i32);
                                        let v761: string = v758[0_i32].clone();
                                        let v765: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v776: () = {
                                            Spiral_builder::closure10(
                                                v765.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v786: Spiral_builder::US1 =
                                            if startsWith(v765.l0.get().clone(), v761, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v786 {
                                            Spiral_builder::US1::US1_0(v786_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v786 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v807: string = padLeft(
                    toLower(match &v798 {
                        Spiral_builder::US1::US1_0(v798_0_0) => match &v798 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v823: &str = inline_colorization::color_bright_red;
                let v825: &str = &*v807;
                let v827: &str = inline_colorization::color_reset;
                let v829: string = string("format!(\"{v823}{v825}{v827}\")");
                let v830: std::string::String = format!("{v823}{v825}{v827}");
                let v832: string = fable_library_rust::String_::fromString(v830);
                let v873: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v875: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v882: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v891: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v900: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v905: std::string::String = format!("{:#?}", v0_1);
                let v935: () = {
                    Spiral_builder::closure10(
                        v875.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v905)),
                        (),
                    );
                    ()
                };
                let v944: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v947: string = v875.l0.get().clone();
                let v986: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v832,
                            v873,
                            Spiral_builder::closure63((), ()),
                            v947
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v986.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v986)
            }
        }
        pub fn closure64(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US30>>>,
            v1_1: Option<Spiral_builder::US30>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US30>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure65(
            v0_1: Option<i32>,
            v1_1: Func1<
                Option<Spiral_builder::US30>,
                LrcPtr<MutCell<Option<Spiral_builder::US30>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US30>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US30>,
                    Some(v0_1_0_0) => {
                        let x: i32 = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US30::US30_0(x)
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn closure67(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / result")
        }
        pub fn closure66(v0_1: i32, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_black;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: i32 = length(v1_1);
                let v628: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v635: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v644: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v653: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v661: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v670: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v679: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("std_trace_length")),
                        (),
                    );
                    ()
                };
                let v687: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v626), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v707: string = v628.l0.get().clone();
                let v746: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure67((), ()),
                            v707
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v746.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v746)
            }
        }
        pub fn closure69(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async")
        }
        pub fn closure68(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            unitVar: (),
        ) {
            fn v8() {
                Spiral_builder::closure2((), ());
            }
            let v9: () = {
                v8();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v38: () = {
                v8();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v66: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v66,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v74: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v78: () = {
                    v8();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v107: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v112: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v107 = _v107.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v107.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v127: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v107.get().clone());
                let v167: DateTime = match &v127 {
                    Spiral_builder::US3::US3_0(v127_0_0) => {
                        let v141: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v127 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v141.hours(),
                            v141.minutes(),
                            v141.seconds(),
                            v141.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v172: string = {
                    let provider: string = Spiral_builder::method6();
                    v167.toString(provider)
                };
                let v560: string = Spiral_builder::method8();
                let v572: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v583: () = {
                    Spiral_builder::closure10(
                        v572.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v587: Array<string> = split(v572.l0.get().clone(), v560, -1_i32, 0_i32);
                let v590: string = v587[0_i32].clone();
                let v594: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v605: () = {
                    Spiral_builder::closure10(
                        v594.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v615: Spiral_builder::US1 = if startsWith(v594.l0.get().clone(), v590, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v621: Spiral_builder::US1 = match &v615 {
                    Spiral_builder::US1::US1_0(v615_0_0) => {
                        Spiral_builder::US1::US1_0(match &v615 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v630: string = padLeft(
                    toLower(match &v621 {
                        Spiral_builder::US1::US1_0(v621_0_0) => match &v621 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v646: &str = inline_colorization::color_bright_blue;
                let v648: &str = &*v630;
                let v650: &str = inline_colorization::color_reset;
                let v652: string = string("format!(\"{v646}{v648}{v650}\")");
                let v653: std::string::String = format!("{v646}{v648}{v650}");
                let v655: string = fable_library_rust::String_::fromString(v653);
                let v696: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v698: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v705: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v714: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("options")), ());
                    ()
                };
                let v723: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v731: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v740: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("command")), ());
                    ()
                };
                let v748: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v756: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v765: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v774: () = {
                    Spiral_builder::closure10(
                        v698.clone(),
                        sprintf!("{}", string("cancellation_token")),
                        (),
                    );
                    ()
                };
                let v782: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v787: std::string::String = format!("{:#?}", v1_1);
                let v817: () = {
                    Spiral_builder::closure10(
                        v698.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v787)),
                        (),
                    );
                    ()
                };
                let v825: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v834: () = {
                    Spiral_builder::closure10(
                        v698.clone(),
                        sprintf!("{}", string("environment_variables")),
                        (),
                    );
                    ()
                };
                let v842: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v853: () = {
                    Spiral_builder::closure10(
                        v698.clone(),
                        sprintf!("{}", sprintf!("{:?}", v2)),
                        (),
                    );
                    ()
                };
                let v861: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v870: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("on_line")), ());
                    ()
                };
                let v878: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v883: std::string::String = format!("{:#?}", v3);
                let v913: () = {
                    Spiral_builder::closure10(
                        v698.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v883)),
                        (),
                    );
                    ()
                };
                let v921: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v930: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("stdin")), ());
                    ()
                };
                let v938: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v943: std::string::String = format!("{:#?}", v4);
                let v973: () = {
                    Spiral_builder::closure10(
                        v698.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v943)),
                        (),
                    );
                    ()
                };
                let v981: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v990: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("trace")), ());
                    ()
                };
                let v998: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1009: () = {
                    Spiral_builder::closure10(
                        v698.clone(),
                        sprintf!("{}", if v5 { string("true") } else { string("false") }),
                        (),
                    );
                    ()
                };
                let v1017: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1026: () = {
                    Spiral_builder::closure10(
                        v698.clone(),
                        sprintf!("{}", string("working_directory")),
                        (),
                    );
                    ()
                };
                let v1034: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1039: std::string::String = format!("{:#?}", v6);
                let v1069: () = {
                    Spiral_builder::closure10(
                        v698.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v1039)),
                        (),
                    );
                    ()
                };
                let v1078: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1086: () = {
                    Spiral_builder::closure10(v698.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1089: string = v698.l0.get().clone();
                let v1128: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v172,
                            v655,
                            v696,
                            Spiral_builder::closure69((), ()),
                            v1089
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1128.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1128)
            }
        }
        pub fn closure71(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US31>>>,
            v1_1: Option<Spiral_builder::US31>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US31>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure72(
            v0_1: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v1_1: Func1<
                Option<Spiral_builder::US31>,
                LrcPtr<MutCell<Option<Spiral_builder::US31>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US31>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US31>,
                    Some(v0_1_0_0) => {
                        let x = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US31::US31_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn closure74(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure73(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_black;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v627: string = v626.l0.get().clone();
                let v666: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure74(v0_1, ()),
                            v627
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v666.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v666)
            }
        }
        pub fn closure70(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure75(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure76(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US32>>>,
            v1_1: Option<Spiral_builder::US32>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US32>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure77(
            v0_1: Option<CancellationToken>,
            v1_1: Func1<
                Option<Spiral_builder::US32>,
                LrcPtr<MutCell<Option<Spiral_builder::US32>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US32>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US32>,
                    Some(v0_1_0_0) => {
                        let x: CancellationToken = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US32::US32_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn closure78(v0_1: (), unitVar: ()) {
            if unbox::<bool>(&defaultOf()) == false {
                ();
                ()
            };
        }
        pub fn closure80(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async / WaitForExitAsync")
        }
        pub fn closure79(v0_1: LrcPtr<TaskCanceledException>, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_3)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v737: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v613: string = Spiral_builder::method8();
                        let v625: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v636: () = {
                            Spiral_builder::closure10(
                                v625.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v640: Array<string> = split(v625.l0.get().clone(), v613, -1_i32, 0_i32);
                        let v643: string = v640[0_i32].clone();
                        let v647: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v658: () = {
                            Spiral_builder::closure10(
                                v647.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_3)),
                                (),
                            );
                            ()
                        };
                        let v668: Spiral_builder::US1 =
                            if startsWith(v647.l0.get().clone(), v643, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v668 {
                            Spiral_builder::US1::US1_0(v668_0_0) => {
                                Spiral_builder::US1::US1_0(match &v668 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v672: string = Spiral_builder::method8();
                                let v684: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v695: () = {
                                    Spiral_builder::closure10(
                                        v684.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v699: Array<string> =
                                    split(v684.l0.get().clone(), v672, -1_i32, 0_i32);
                                let v702: string = v699[0_i32].clone();
                                let v706: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v717: () = {
                                    Spiral_builder::closure10(
                                        v706.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v727: Spiral_builder::US1 =
                                    if startsWith(v706.l0.get().clone(), v702, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v727 {
                                    Spiral_builder::US1::US1_0(v727_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v727 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => Spiral_builder::US1::US1_0(string("Warning")),
                                }
                            }
                        }
                    }
                };
                let v746: string = padLeft(
                    toLower(match &v737 {
                        Spiral_builder::US1::US1_0(v737_0_0) => match &v737 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v762: &str = inline_colorization::color_yellow;
                let v764: &str = &*v746;
                let v766: &str = inline_colorization::color_reset;
                let v768: string = string("format!(\"{v762}{v764}{v766}\")");
                let v769: std::string::String = format!("{v762}{v764}{v766}");
                let v771: string = fable_library_rust::String_::fromString(v769);
                let v812: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v814: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v821: () = {
                    Spiral_builder::closure10(v814.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v830: () = {
                    Spiral_builder::closure10(v814.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v839: () = {
                    Spiral_builder::closure10(v814.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v844: std::string::String = format!("{:#?}", v0_1);
                let v874: () = {
                    Spiral_builder::closure10(
                        v814.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v844)),
                        (),
                    );
                    ()
                };
                let v883: () = {
                    Spiral_builder::closure10(v814.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v886: string = v814.l0.get().clone();
                let v925: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v771,
                            v812,
                            Spiral_builder::closure80((), ()),
                            v886
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v925.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v925)
            }
        }
        pub fn closure82(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async")
        }
        pub fn closure81(v0_1: i32, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v616: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v625: string = padLeft(
                    toLower(match &v616 {
                        Spiral_builder::US1::US1_0(v616_0_0) => match &v616 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v641: &str = inline_colorization::color_bright_blue;
                let v643: &str = &*v625;
                let v645: &str = inline_colorization::color_reset;
                let v647: string = string("format!(\"{v641}{v643}{v645}\")");
                let v648: std::string::String = format!("{v641}{v643}{v645}");
                let v650: string = fable_library_rust::String_::fromString(v648);
                let v691: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v692: i32 = length(v1_1);
                let v694: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v701: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v710: () = {
                    Spiral_builder::closure10(
                        v694.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v719: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v727: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v736: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v745: () = {
                    Spiral_builder::closure10(
                        v694.clone(),
                        sprintf!("{}", string("output_length")),
                        (),
                    );
                    ()
                };
                let v753: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v761: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v692), ());
                    ()
                };
                let v770: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v773: string = v694.l0.get().clone();
                let v812: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v650,
                            v691,
                            Spiral_builder::closure82((), ()),
                            v773
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v812.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v812)
            }
        }
        pub fn method75(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            defaultOf()
        }
        pub fn method42(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> (i32, string) {
            let v9: Spiral_builder::US14 = Spiral_builder::method44(Spiral_builder::method43(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
            ));
            let patternInput: (string, Spiral_builder::US1) = match &v9 {
                Spiral_builder::US14::US14_0(v9_0_0, v9_0_1) => (v9_0_0.clone(), v9_0_1.clone()),
                Spiral_builder::US14::US14_1(v9_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v9_1_0.clone()),
                ),
            };
            let v19: Spiral_builder::US1 = patternInput.1.clone();
            let v18: string = patternInput.0.clone();
            let v24: Spiral_builder::US22 = Spiral_builder::method56(match &v19 {
                Spiral_builder::US1::US1_0(v19_0_0) => match &v19 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            });
            let v30: Array<string> = match &v24 {
                Spiral_builder::US22::US22_0(v24_0_0) => v24_0_0.clone(),
                Spiral_builder::US22::US22_1(v24_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v24_1_0.clone()),
                ),
            };
            let v32: Vec<string> = v30.to_vec();
            let v34: bool = true;
            let _vec_map: Vec<_> = v32
                .into_iter()
                .map(|x| {
                    //;
                    let v36: string = x;
                    let v38: &str = &*v36;
                    let v40: std::string::String = String::from(v38);
                    let v42: bool = true;
                    v40
                })
                .collect::<Vec<_>>();
            let v44: Vec<std::string::String> = _vec_map;
            let v47: () = {
                Spiral_builder::closure43(
                    v0_1,
                    v1_1,
                    v2.clone(),
                    v3,
                    v4.clone(),
                    v5,
                    v6.clone(),
                    v18.clone(),
                    v44.clone(),
                    (),
                );
                ()
            };
            let _v1286: MutCell<Option<LrcPtr<(i32, string)>>> =
                MutCell::new(None::<LrcPtr<(i32, string)>>);
            {
                let x_3: LrcPtr<(i32, string)> = (Func0::new({
                    let v18 = v18.clone();
                    let v2 = v2.clone();
                    let v4 = v4.clone();
                    let v44 = v44.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    move || {
                        let v1288: std::process::Command =
                            std::process::Command::new(&*v18.clone());
                        let v1290: bool = true;
                        let mut v1288 = v1288;
                        let v1292: &mut std::process::Command =
                            std::process::Command::args(&mut v1288, &*v44.clone());
                        let v1294: std::process::Stdio = std::process::Stdio::piped();
                        let v1296: &mut std::process::Command =
                            std::process::Command::stdout(v1292, std::process::Stdio::piped());
                        let v1298: std::process::Stdio = std::process::Stdio::piped();
                        let v1300: &mut std::process::Command =
                            std::process::Command::stderr(v1296, std::process::Stdio::piped());
                        let v1302: std::process::Stdio = std::process::Stdio::piped();
                        let v1304: &mut std::process::Command =
                            std::process::Command::stdin(v1300, std::process::Stdio::piped());
                        let _v1305: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                            refCell(None::<Spiral_builder::US1>);
                        let v1310: () = {
                            Spiral_builder::closure4(
                                v6.clone(),
                                Func1::new({
                                    let _v1305 = _v1305.clone();
                                    move |v: Option<Spiral_builder::US1>| {
                                        Spiral_builder::closure3(_v1305.clone(), v)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v1325: Spiral_builder::US1 =
                            defaultValue(Spiral_builder::US1::US1_1, _v1305.get().clone());
                        let v1333: &mut std::process::Command = match &v1325 {
                            Spiral_builder::US1::US1_0(v1325_0_0) => {
                                std::process::Command::current_dir(
                                    v1304,
                                    &*match &v1325 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                )
                            }
                            _ => v1304,
                        };
                        let v1351: &mut std::process::Command = if count_2(v2.clone()) as u64
                            == 0_u64
                        {
                            v1333
                        } else {
                            let v1337: Vec<(string, string)> = v2.clone().to_vec();
                            let v1339: bool = true;
                            let _vec_fold_ = v1337.into_iter().fold(v1333, |acc, x| {
                                //;
                                let v1341: &mut std::process::Command = acc;
                                let patternInput_1: (string, string) = x;
                                let v1346: &mut std::process::Command = std::process::Command::env(
                                    v1341,
                                    &*patternInput_1.0.clone(),
                                    &*patternInput_1.1.clone(),
                                );
                                let v1348: bool = true;
                                v1346
                            });
                            _vec_fold_
                        };
                        let v1353: Result<std::process::Child, std::io::Error> =
                            std::process::Command::spawn(v1351);
                        let v1354 = Spiral_builder::method32();
                        let v1356: Result<std::process::Child, std::string::String> =
                            v1353.map_err(|x| v1354(x));
                        let v1358: bool = true;
                        let _result_map_ = v1356.map(|x| {
                            //;
                            let v1360: std::process::Child = x;
                            let v1365: std::sync::Mutex<Option<std::process::Child>> =
                                std::sync::Mutex::new(Some(v1360));
                            let v1367: std::sync::Arc<
                                std::sync::Mutex<Option<std::process::Child>>,
                            > = std::sync::Arc::new(v1365);
                            let v1369: bool = true;
                            v1367
                        });
                        let v1371: Result<
                            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                            std::string::String,
                        > = _result_map_;
                        let v1372 = Spiral_builder::method67();
                        let v1373 = Spiral_builder::method68();
                        let v1375: Spiral_builder::US24 = match v1371 {
                            Ok(x) => v1372(x),
                            Err(e) => v1373(e),
                        };
                        let patternInput_3: (i32, Spiral_builder::US5, Spiral_builder::US25) =
                            match &v1375 {
                                Spiral_builder::US24::US24_0(v1375_0_0) => {
                                    let v1376: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v1375_0_0.clone();
                                    let v1378: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v1380: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v1376.clone();
                                        let v1382: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v1380.lock();
                                        let v1384: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = v1382.unwrap();
                                        let v1386: bool = true;
                                        let mut v1384 = v1384;
                                        let v1388: &mut Option<std::process::Child> = &mut v1384;
                                        let v1390: Option<&mut std::process::Child> =
                                            v1388.as_mut();
                                        let v1392: &mut std::process::Child = v1390.unwrap();
                                        let v1394: &mut Option<std::process::ChildStdout> =
                                            &mut v1392.stdout;
                                        let v1396: Option<std::process::ChildStdout> =
                                            Option::take(v1394);
                                        let v1398: std::process::ChildStdout = v1396.unwrap();
                                        let v1400: bool = true;
                                        v1398
                                    })();
                                    let v1402: std::process::ChildStdout = _capture;
                                    let v1404: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v1406: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v1376.clone();
                                        let v1408: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v1406.lock();
                                        let v1410: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = v1408.unwrap();
                                        let v1412: bool = true;
                                        let mut v1410 = v1410;
                                        let v1414: &mut Option<std::process::Child> = &mut v1410;
                                        let v1416: Option<&mut std::process::Child> =
                                            v1414.as_mut();
                                        let v1418: &mut std::process::Child = v1416.unwrap();
                                        let v1420: &mut Option<std::process::ChildStderr> =
                                            &mut v1418.stderr;
                                        let v1422: Option<std::process::ChildStderr> =
                                            Option::take(v1420);
                                        let v1424: std::process::ChildStderr = v1422.unwrap();
                                        let v1426: bool = true;
                                        v1424
                                    })();
                                    let v1428: std::process::ChildStderr = _capture;
                                    let v1430: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v1432: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v1376.clone();
                                        let v1434: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v1432.lock();
                                        let v1436: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = v1434.unwrap();
                                        let v1438: bool = true;
                                        let mut v1436 = v1436;
                                        let v1440: &mut Option<std::process::Child> = &mut v1436;
                                        let v1442: Option<&mut std::process::Child> =
                                            v1440.as_mut();
                                        let v1444: &mut std::process::Child = v1442.unwrap();
                                        let v1446: &mut Option<std::process::ChildStdin> =
                                            &mut v1444.stdin;
                                        let v1448: Option<std::process::ChildStdin> =
                                            Option::take(v1446);
                                        let v1450: std::process::ChildStdin = v1448.unwrap();
                                        let v1455: std::sync::Mutex<
                                            Option<std::process::ChildStdin>,
                                        > = std::sync::Mutex::new(Some(v1450));
                                        let v1457: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = std::sync::Arc::new(v1455);
                                        let v1459: bool = true;
                                        v1457
                                    })();
                                    let v1461: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::ChildStdin>>,
                                    > = _capture;
                                    let patternInput_2: (
                                        std::sync::mpsc::Sender<std::string::String>,
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    ) = {
                                        let (sender, receiver) = std::sync::mpsc::channel();
                                        (sender, std::sync::Arc::new(receiver))
                                    };
                                    let v1463: std::sync::mpsc::Sender<std::string::String> =
                                        patternInput_2.0.clone();
                                    let v1466: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v1463.clone());
                                    let v1468: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v1466);
                                    let v1470: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v1463);
                                    let v1472: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v1470);
                                    let v1474: std::sync::Mutex<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    > = std::sync::Mutex::new(patternInput_2.1.clone());
                                    let v1476: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    > = std::sync::Arc::new(v1474);
                                    let v1478: bool = true;
                                    let __spawn = std::thread::spawn(move || {
                                        //;
                                        let v1480: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStdout,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v1402);
                                        let v1482: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v1480);
                                        let v1484: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStdout,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v1482);
                                        let v1486: bool = true;
                                        let mut v1484 = v1484;
                                        let _iter_try_for_each = v1484.try_for_each(|x| {
                                            //;
                                            let v1488: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v1490: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v1468.clone();
                                            let v1491 = Spiral_builder::method32();
                                            let v1493: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v1488.map_err(|x| v1491(x));
                                            let v1494 = Spiral_builder::method69();
                                            let v1495 = Spiral_builder::method70();
                                            let v1497: Spiral_builder::US26 = match v1493 {
                                                Ok(x) => v1494(x),
                                                Err(e) => v1495(e),
                                            };
                                            let v3231: std::string::String = match &v1497 {
                                                Spiral_builder::US26::US26_0(v1497_0_0) => {
                                                    let v1500: string =
                                                        fable_library_rust::String_::fromString(
                                                            v1497_0_0.clone(),
                                                        );
                                                    let v1502: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v1504: std::borrow::Cow<[u8]> =
                                                        v1502.encode(&*v1500).0;
                                                    let v1506: &[u8] = v1504.as_ref();
                                                    let v1508: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v1506);
                                                    let v1510: &str = v1508.unwrap();
                                                    let v1512: std::string::String =
                                                        String::from(v1510);
                                                    let v1515: string = sprintf!(
                                                        "> {}",
                                                        fable_library_rust::String_::fromString(
                                                            v1512.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v1518: () = {
                                                            Spiral_builder::closure53(
                                                                v1515.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v2210: () = {
                                                            Spiral_builder::closure13(v1515, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    v1512
                                                }
                                                Spiral_builder::US26::US26_1(v1497_1_0) => {
                                                    let v2212: std::string::String =
                                                        v1497_1_0.clone();
                                                    let v2215: () = {
                                                        Spiral_builder::closure51(
                                                            v2212.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v3225: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v2212
                                                    );
                                                    let v3227: &str = &*v3225;
                                                    String::from(v3227)
                                                }
                                            };
                                            let v3233: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v1490;
                                            let v3235: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v3233.lock();
                                            let v3237: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v3235.unwrap();
                                            let v3239: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v3237;
                                            let v3241: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v3239.send(v3231);
                                            let v3242 = Spiral_builder::method71();
                                            let v3244: Result<(), std::string::String> =
                                                v3241.map_err(|x| v3242(x));
                                            let v3246: _ = v3244;
                                            let v3248: bool = true;
                                            v3246
                                        }); //;
                                        let v3251: Result<(), string> = Spiral_builder::method72(
                                            _iter_try_for_each.map_err(|x| x.into()),
                                        );
                                        let v3255: string =
                                            string("true; v3251 });  // rust.fix_closure\'");
                                        let v3256: bool = true;
                                        v3251
                                    }); // rust.fix_closure';
                                    let v3258: std::thread::JoinHandle<Result<(), string>> =
                                        __spawn;
                                    let v3260: bool = true;
                                    let __spawn = std::thread::spawn(move || {
                                        //;
                                        let v3262: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStderr,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v1428);
                                        let v3264: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStderr,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v3262);
                                        let v3266: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStderr,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v3264);
                                        let v3268: bool = true;
                                        let mut v3266 = v3266;
                                        let _iter_try_for_each = v3266.try_for_each(|x| {
                                            //;
                                            let v3270: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v3272: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v1472.clone();
                                            let v3273 = Spiral_builder::method32();
                                            let v3275: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v3270.map_err(|x| v3273(x));
                                            let v3276 = Spiral_builder::method69();
                                            let v3277 = Spiral_builder::method70();
                                            let v3279: Spiral_builder::US26 = match v3275 {
                                                Ok(x) => v3276(x),
                                                Err(e) => v3277(e),
                                            };
                                            let v5014: std::string::String = match &v3279 {
                                                Spiral_builder::US26::US26_0(v3279_0_0) => {
                                                    let v3282: string =
                                                        fable_library_rust::String_::fromString(
                                                            v3279_0_0.clone(),
                                                        );
                                                    let v3284: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v3286: std::borrow::Cow<[u8]> =
                                                        v3284.encode(&*v3282).0;
                                                    let v3288: &[u8] = v3286.as_ref();
                                                    let v3290: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v3288);
                                                    let v3292: &str = v3290.unwrap();
                                                    let v3294: std::string::String =
                                                        String::from(v3292);
                                                    let v3297: string = sprintf!(
                                                        "! {}",
                                                        fable_library_rust::String_::fromString(
                                                            v3294.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v3300: () = {
                                                            Spiral_builder::closure53(
                                                                v3297.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v3990: () = {
                                                            Spiral_builder::closure13(v3297, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    {
                                                        let v3992: string = sprintf!(
                                                            "\u{001b}[4;7m{}\u{001b}[0m",
                                                            v3294
                                                        );
                                                        let v3994: &str = &*v3992;
                                                        String::from(v3994)
                                                    }
                                                }
                                                Spiral_builder::US26::US26_1(v3279_1_0) => {
                                                    let v3997: std::string::String =
                                                        v3279_1_0.clone();
                                                    let v4000: () = {
                                                        Spiral_builder::closure51(
                                                            v3997.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v5008: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v3997
                                                    );
                                                    let v5010: &str = &*v5008;
                                                    String::from(v5010)
                                                }
                                            };
                                            let v5016: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v3272;
                                            let v5018: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v5016.lock();
                                            let v5020: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v5018.unwrap();
                                            let v5022: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v5020;
                                            let v5024: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v5022.send(v5014);
                                            let v5025 = Spiral_builder::method71();
                                            let v5027: Result<(), std::string::String> =
                                                v5024.map_err(|x| v5025(x));
                                            let v5029: _ = v5027;
                                            let v5031: bool = true;
                                            v5029
                                        }); //;
                                        let v5034: Result<(), string> = Spiral_builder::method72(
                                            _iter_try_for_each.map_err(|x| x.into()),
                                        );
                                        let v5036: string =
                                            string("true; v5034 });  // rust.fix_closure\'");
                                        let v5037: bool = true;
                                        v5034
                                    }); // rust.fix_closure';
                                    let v5039: std::thread::JoinHandle<Result<(), string>> =
                                        __spawn;
                                    let _v5040: LrcPtr<MutCell<Option<Spiral_builder::US27>>> =
                                        refCell(None::<Spiral_builder::US27>);
                                    let v5045: () = {
                                        Spiral_builder::closure57(
                                            v4.clone(),
                                            Func1::new({
                                                let _v5040 = _v5040.clone();
                                                move |v_1: Option<Spiral_builder::US27>| {
                                                    Spiral_builder::closure56(_v5040.clone(), v_1)
                                                }
                                            }),
                                            (),
                                        );
                                        ()
                                    };
                                    let v5060: Spiral_builder::US27 = defaultValue(
                                        Spiral_builder::US27::US27_1,
                                        _v5040.get().clone(),
                                    );
                                    match &v5060 {
                                        Spiral_builder::US27::US27_0(v5060_0_0) => {
                                            let v5066: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::ChildStdin>>,
                                            > = v1461;
                                            let v5068: Result<
                                                std::sync::MutexGuard<
                                                    Option<std::process::ChildStdin>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::ChildStdin>,
                                                    >,
                                                >,
                                            > = v5066.lock();
                                            let v5070: std::sync::MutexGuard<
                                                Option<std::process::ChildStdin>,
                                            > = v5068.unwrap();
                                            let v5072: bool = true;
                                            let mut v5070 = v5070;
                                            let v5074: &mut Option<std::process::ChildStdin> =
                                                &mut v5070;
                                            let v5076: Option<std::process::ChildStdin> =
                                                Option::take(v5074);
                                            let v5078: bool = true;
                                            let _optionm_map_ = v5076.map(|x| {
                                                //;
                                                let v5080: std::process::ChildStdin = x;
                                                let v5082: std::sync::Mutex<
                                                    std::process::ChildStdin,
                                                > = std::sync::Mutex::new(v5080);
                                                let v5084: std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                > = std::sync::Arc::new(v5082);
                                                let v5086: bool = true;
                                                v5084
                                            });
                                            let v5088: Option<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                            > = _optionm_map_;
                                            let _v5089: LrcPtr<
                                                MutCell<Option<Spiral_builder::US28>>,
                                            > = refCell(None::<Spiral_builder::US28>);
                                            let v5094: () = {
                                                Spiral_builder::closure59(
                                                    v5088,
                                                    Func1::new({
                                                        let _v5089 = _v5089.clone();
                                                        move |v_2: Option<Spiral_builder::US28>| {
                                                            Spiral_builder::closure58(
                                                                _v5089.clone(),
                                                                v_2,
                                                            )
                                                        }
                                                    }),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v5109: Spiral_builder::US28 = defaultValue(
                                                Spiral_builder::US28::US28_1,
                                                _v5089.get().clone(),
                                            );
                                            match &v5109 {
                                                Spiral_builder::US28::US28_0(v5109_0_0) => {
                                                    let v5113: std::sync::Arc<
                                                        std::sync::Mutex<std::process::ChildStdin>,
                                                    > = match &v5109 {
                                                        Spiral_builder::US28::US28_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    };
                                                    (match &v5060 {
                                                        Spiral_builder::US27::US27_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    })(
                                                        v5113.clone()
                                                    );
                                                    {
                                                        let v5115: std::sync::Arc<
                                                            std::sync::Mutex<
                                                                std::process::ChildStdin,
                                                            >,
                                                        > = v5113;
                                                        let v5117: Result<
                                                            std::sync::MutexGuard<
                                                                std::process::ChildStdin,
                                                            >,
                                                            std::sync::PoisonError<
                                                                std::sync::MutexGuard<
                                                                    std::process::ChildStdin,
                                                                >,
                                                            >,
                                                        > = v5115.lock();
                                                        let v5120: std::sync::MutexGuard<
                                                            std::process::ChildStdin,
                                                        > = Spiral_builder::method73(
                                                            v5117.unwrap(),
                                                        );
                                                        let v5122: bool = true;
                                                        let mut v5120 = v5120;
                                                        let v5124: bool = true;
                                                        std::io::Write::flush(&mut *v5120).unwrap();
                                                        ()
                                                    }
                                                }
                                                _ => (),
                                            }
                                        }
                                        _ => (),
                                    }
                                    {
                                        let v5126: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v1376;
                                        let v5128: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v5126.lock();
                                        let v5130: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = v5128.unwrap();
                                        let v5132: bool = true;
                                        let mut v5130 = v5130;
                                        let v5134: &mut Option<std::process::Child> = &mut v5130;
                                        let v5136: Option<std::process::Child> =
                                            Option::take(v5134);
                                        let v5138: std::process::Child = v5136.unwrap();
                                        let v5140: Result<std::process::Output, std::io::Error> =
                                            v5138.wait_with_output();
                                        let v5141 = Spiral_builder::method32();
                                        let v5143: Result<
                                            std::process::Output,
                                            std::string::String,
                                        > = v5140.map_err(|x| v5141(x));
                                        let v5144: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method74(v5039);
                                        let v5147: string = string("v5144");
                                        let v5148: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method74(v3258);
                                        let v5153: string = append(
                                            append(
                                                string("vec!["),
                                                append(string("v5148, "), v5147),
                                            ),
                                            string("]"),
                                        );
                                        let v5154: Vec<
                                            std::thread::JoinHandle<Result<(), string>>,
                                        > = vec![v5148, v5144];
                                        let v5156: bool = true;
                                        v5154.into_iter().for_each(|x| {
                                            //;
                                            let v5158: std::thread::JoinHandle<Result<(), string>> =
                                                x;
                                            let v5160: Result<
                                                Result<(), string>,
                                                Box<dyn core::any::Any + 'static + Send>,
                                            > = std::thread::JoinHandle::join(v5158);
                                            let v5162: Result<(), string> = v5160.unwrap();
                                            v5162.unwrap();
                                            {
                                                let v5165: bool = true;
                                                let v5167: bool = true;
                                            }
                                        });
                                        {
                                            //;
                                            let v5170: Spiral_builder::US29 = match &v5143 {
                                                Err(v5143_1_0) => {
                                                    Spiral_builder::closure61((), v5143_1_0.clone())
                                                }
                                                Ok(v5143_0_0) => {
                                                    Spiral_builder::closure60((), v5143_0_0.clone())
                                                }
                                            };
                                            match &v5170 {
                                                Spiral_builder::US29::US29_0(v5170_0_0) => {
                                                    let v5173: std::process::ExitStatus =
                                                        v5170_0_0.clone().status;
                                                    let v5175: Option<i32> = v5173.code();
                                                    let _v5176: LrcPtr<
                                                        MutCell<Option<Spiral_builder::US30>>,
                                                    > = refCell(None::<Spiral_builder::US30>);
                                                    let v5181: () = {
                                                        Spiral_builder::closure65(
                                                            v5175,
                                                            Func1::new({
                                                                let _v5176 = _v5176.clone();
                                                                move
                                                                                                                             |v_5:
                                                                                                                                  Option<Spiral_builder::US30>|
                                                                                                                             Spiral_builder::closure64(_v5176.clone(),
                                                                                                                                                       v_5)
                                                            }),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v5196: Spiral_builder::US30 = defaultValue(
                                                        Spiral_builder::US30::US30_1,
                                                        _v5176.get().clone(),
                                                    );
                                                    match &v5196 {
                                                        Spiral_builder::US30::US30_0(v5196_0_0) => (
                                                            match &v5196 {
                                                                Spiral_builder::US30::US30_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            Spiral_builder::US5::US5_1,
                                                            Spiral_builder::US25::US25_0(
                                                                v1476.clone(),
                                                            ),
                                                        ),
                                                        _ => {
                                                            let v5205:
                                                                                        &str =
                                                                                    &*string("runtime.execute_with_options / exit_code=None");
                                                            (
                                                                -1_i32,
                                                                Spiral_builder::US5::US5_0(
                                                                    String::from(v5205),
                                                                ),
                                                                Spiral_builder::US25::US25_0(
                                                                    v1476.clone(),
                                                                ),
                                                            )
                                                        }
                                                    }
                                                }
                                                Spiral_builder::US29::US29_1(v5170_1_0) => {
                                                    let v5216: std::string::String =
                                                        v5170_1_0.clone();
                                                    let v5219: () = {
                                                        Spiral_builder::closure62(
                                                            v5216.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        -2_i32,
                                                        Spiral_builder::US5::US5_0(v5216),
                                                        Spiral_builder::US25::US25_1,
                                                    )
                                                }
                                            }
                                        }
                                    }
                                }
                                Spiral_builder::US24::US24_1(v1375_1_0) => {
                                    let v6235: std::string::String = v1375_1_0.clone();
                                    let v6238: () = {
                                        Spiral_builder::closure47(v6235.clone(), ());
                                        ()
                                    };
                                    (
                                        -1_i32,
                                        Spiral_builder::US5::US5_0(v6235),
                                        Spiral_builder::US25::US25_1,
                                    )
                                }
                            };
                        let v7255: Spiral_builder::US25 = patternInput_3.2.clone();
                        let v7254: Spiral_builder::US5 = patternInput_3.1.clone();
                        let v7253: i32 = patternInput_3.0.clone();
                        let v7262: Option<
                            std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            >,
                        > = match &v7255 {
                            Spiral_builder::US25::US25_0(v7255_0_0) => Some(match &v7255 {
                                Spiral_builder::US25::US25_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => {
                                None::<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                >
                            }
                        };
                        let v7264: bool = true;
                        let _optionm_map_ = v7262.map(|x| {
                            //;
                            let v7266: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = x;
                            let v7268: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = v7266;
                            let v7270: Result<
                                std::sync::MutexGuard<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                                std::sync::PoisonError<
                                    std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                >,
                            > = v7268.lock();
                            let v7272: std::sync::MutexGuard<
                                std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                            > = v7270.unwrap();
                            let v7274 = v7272.iter();
                            let v7276: Vec<std::string::String> = v7274.collect::<Vec<_>>();
                            let v7278: bool = true;
                            let _vec_map: Vec<_> = v7276
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v7280: std::string::String = x;
                                    let v7282: string =
                                        fable_library_rust::String_::fromString(v7280);
                                    let v7284: bool = true;
                                    v7282
                                })
                                .collect::<Vec<_>>();
                            let v7286: Vec<string> = _vec_map;
                            let v7295: string = join(
                                string("\n"),
                                toArray_1(ofArray_1(fable_library_rust::NativeArray_::array_from(
                                    v7286,
                                ))),
                            );
                            let v7299: bool = true;
                            v7295
                        });
                        let v7301: Option<string> = _optionm_map_;
                        let v7308: Spiral_builder::US1 = match &v7254 {
                            Spiral_builder::US5::US5_0(v7254_0_0) => Spiral_builder::US1::US1_0(
                                fable_library_rust::String_::fromString(match &v7254 {
                                    Spiral_builder::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }),
                            ),
                            _ => Spiral_builder::US1::US1_1,
                        };
                        let v7313: string = defaultValue(
                            match &v7308 {
                                Spiral_builder::US1::US1_0(v7308_0_0) => match &v7308 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => string(""),
                            },
                            v7301,
                        );
                        let v7318: () = {
                            Spiral_builder::closure66(v7253, v7313.clone(), ());
                            ()
                        };
                        LrcPtr::new((v7253, v7313))
                    }
                }))();
                _v1286.set(Some(x_3))
            }
            {
                let v8088: LrcPtr<(i32, string)> = match &_v1286.get().clone() {
                    None => panic!("{}", string("base.capture / _v1286=None"),),
                    Some(_v1286_0_0) => _v1286_0_0.clone(),
                };
                let _v7: (i32, string) = (v8088.0.clone(), v8088.1.clone());
                (_v7.0.clone(), _v7.1.clone())
            }
        }
        pub fn closure84(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / env install error")
        }
        pub fn closure83(
            v0_1: Spiral_builder::US8,
            v1_1: string,
            v2: string,
            v3: i32,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("env")), ());
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v914: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", sprintf!("{:?}", v0_1)),
                        (),
                    );
                    ()
                };
                let v923: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v932: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v940: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v948: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v956: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v965: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v973: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v981: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v989: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v998: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v1006: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1014: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v1023: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1026: string = v878.l0.get().clone();
                let v1065: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure84((), ()),
                            v1026
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1065.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1065)
            }
        }
        pub fn closure85(unitVar: (), v0_1: string) -> Spiral_builder::US1 {
            Spiral_builder::US1::US1_0(v0_1)
        }
        pub fn closure86(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure89(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / Exception")
        }
        pub fn closure88(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v908: std::string::String = format!("{:#?}", v3);
                let v938: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v908)),
                        (),
                    );
                    ()
                };
                let v947: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v956: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v964: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v972: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v980: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v989: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v997: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1005: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v1013: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1022: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v1030: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1038: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v1047: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1050: string = v878.l0.get().clone();
                let v1089: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure89((), ()),
                            v1050
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1089.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1089)
            }
        }
        pub fn closure87(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure88(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn closure91(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / error")
        }
        pub fn closure90(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v911: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v920: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v929: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v937: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v945: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v953: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v962: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v970: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v978: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v986: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v995: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v1003: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1011: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v1020: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1023: string = v878.l0.get().clone();
                let v1062: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure91((), ()),
                            v1023
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1062.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1062)
            }
        }
        pub fn closure92(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: &str = &*_arg.0.clone();
            let v5: std::string::String = String::from(v3);
            let v7: &str = &*_arg.1.clone();
            LrcPtr::new((v5, String::from(v7)))
        }
        pub fn method76() -> string {
            string("fs-path")
        }
        pub fn method77() -> string {
            string("command")
        }
        pub fn method78() -> string {
            string("path")
        }
        pub fn method83(v0_1: string) -> string {
            v0_1
        }
        pub fn method82(v0_1: string) -> string {
            if v0_1.clone() == string("") {
                string("")
            } else {
                let v7: Result<regex::Regex, regex::Error> =
                    regex::Regex::new(&string("^\\\\\\\\\\?\\\\"));
                let v9: regex::Regex = v7.unwrap();
                let v10: string = Spiral_builder::method83(v0_1);
                let v12: std::borrow::Cow<str> = v9.replace_all(&*v10, &*string(""));
                let v14: std::string::String = String::from(v12);
                let v30: string = fable_library_rust::String_::fromString(v14);
                replace(
                    sprintf!(
                        "{}{}",
                        toLower(ofChar(getCharAt(v30.clone(), 0_i32))),
                        getSlice(v30, Some(1_i32), None::<i32>)
                    ),
                    string("\\"),
                    string("/"),
                )
            }
        }
        pub fn method84(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut6>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn method85() -> char {
            std::path::MAIN_SEPARATOR
        }
        pub fn method81(v0_1: string) -> string {
            let v3: &str = &*v0_1.clone();
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            if v7.exists() == false {
                let v11: string = Spiral_builder::method25();
                let v15: Array<string> = split(
                    Spiral_builder::method82(Spiral_builder::method17(v11.clone(), v0_1.clone())),
                    string("/"),
                    -1_i32,
                    0_i32,
                );
                let v19: i32 = count_2(v15.clone());
                let v20: LrcPtr<Spiral_builder::Mut6> = LrcPtr::new(Spiral_builder::Mut6 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(0_i32),
                    l2: MutCell::new(new_empty::<string>()),
                });
                while Spiral_builder::method84(v19, v20.clone()) {
                    let v22: i32 = v20.l0.get().clone();
                    let v25: i32 = v22.wrapping_neg() + v19 - 1_i32;
                    let matchValue: i32 = v20.l1.get().clone();
                    let v27: Array<string> = v20.l2.get().clone();
                    let v26: i32 = matchValue;
                    let v28: string = v15[v25].clone();
                    let patternInput_1: (i32, Array<string>) = if string("..") == v28.clone() {
                        (v26 + 1_i32, v27.clone())
                    } else {
                        if string(".") == v28.clone() {
                            (v26, v27.clone())
                        } else {
                            if 0_i32 == v26 {
                                if endsWith(v28.clone(), string(":"), false) {
                                    let v36: Array<string> = new_array(&[sprintf!(
                                        "{}:",
                                        getCharAt(v11.clone(), 0_i32)
                                    )]);
                                    let v37: i32 = count_2(v36.clone());
                                    let v39: i32 = v37 + count_2(v27.clone());
                                    let v40: Array<string> = new_init(&string(""), v39);
                                    let v41: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method45(v39, v41.clone()) {
                                        let v43: i32 = v41.l0.get().clone();
                                        let v48: string = if v43 < v37 {
                                            v36[v43].clone()
                                        } else {
                                            let v46: i32 = v43 - v37;
                                            v27[v46].clone()
                                        };
                                        v40.get_mut()[v43 as usize] = v48;
                                        {
                                            let v49: i32 = v43 + 1_i32;
                                            v41.l0.set(v49);
                                            ()
                                        }
                                    }
                                    (0_i32, v40.clone())
                                } else {
                                    let v50: Array<string> = new_array(&[v28]);
                                    let v51: i32 = count_2(v50.clone());
                                    let v53: i32 = v51 + count_2(v27.clone());
                                    let v54: Array<string> = new_init(&string(""), v53);
                                    let v55: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method45(v53, v55.clone()) {
                                        let v57: i32 = v55.l0.get().clone();
                                        let v62: string = if v57 < v51 {
                                            v50[v57].clone()
                                        } else {
                                            let v60: i32 = v57 - v51;
                                            v27[v60].clone()
                                        };
                                        v54.get_mut()[v57 as usize] = v62;
                                        {
                                            let v63: i32 = v57 + 1_i32;
                                            v55.l0.set(v63);
                                            ()
                                        }
                                    }
                                    (0_i32, v54.clone())
                                }
                            } else {
                                (v26 - 1_i32, v27.clone())
                            }
                        }
                    };
                    let v73: i32 = v22 + 1_i32;
                    v20.l0.set(v73);
                    v20.l1.set(patternInput_1.0.clone());
                    v20.l2.set(patternInput_1.1.clone());
                    ()
                }
                {
                    let matchValue_2: i32 = v20.l1.get().clone();
                    let v75: Array<string> = v20.l2.get().clone();
                    let v76: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                        let v75 = v75.clone();
                        move || {
                            map(
                                Func1::new({
                                    let v75 = v75.clone();
                                    move |i: i32| v75[i].clone()
                                }),
                                rangeNumeric(0_i32, 1_i32, count_2(v75.clone()) - 1_i32),
                            )
                        }
                    }));
                    join(ofChar(Spiral_builder::method85()), toArray_1(v76))
                }
            } else {
                let v90: Result<std::path::PathBuf, std::io::Error> = std::fs::canonicalize(&*v0_1);
                let v92: std::path::PathBuf = v90.unwrap();
                let v94: std::path::Display = v92.display();
                let v97: std::string::String = format!("{}", v94);
                fable_library_rust::String_::fromString(v97)
            }
        }
        pub fn method80(v0_1: string) -> string {
            Spiral_builder::method82(Spiral_builder::method81(v0_1))
        }
        pub fn method79(v0_1: string) -> string {
            Spiral_builder::method80(Spiral_builder::method17(Spiral_builder::method25(), v0_1))
        }
        pub fn closure93(unitVar: (), v0_1: std::string::String) -> string {
            Spiral_builder::method79(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method86() -> string {
            string("retries")
        }
        pub fn method87() -> string {
            string("working-directory")
        }
        pub fn closure95(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / repl error")
        }
        pub fn closure94(v0_1: u8, v1_1: u8, v2: string, v3: i32, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v618: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v627: string = padLeft(
                    toLower(match &v618 {
                        Spiral_builder::US1::US1_0(v618_0_0) => match &v618 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v643: &str = inline_colorization::color_bright_blue;
                let v645: &str = &*v627;
                let v647: &str = inline_colorization::color_reset;
                let v649: string = string("format!(\"{v643}{v645}{v647}\")");
                let v650: std::string::String = format!("{v643}{v645}{v647}");
                let v652: string = fable_library_rust::String_::fromString(v650);
                let v693: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v694: string = sprintf!("{}/{}", v1_1, v0_1);
                let v696: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v703: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v712: () = {
                    Spiral_builder::closure10(
                        v696.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v721: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v729: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v738: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v747: () = {
                    Spiral_builder::closure10(
                        v696.clone(),
                        sprintf!("{}", string("repl_result")),
                        (),
                    );
                    ()
                };
                let v755: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v763: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v771: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v780: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v788: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v796: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", v694), ());
                    ()
                };
                let v805: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v808: string = v696.l0.get().clone();
                let v847: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v652,
                            v693,
                            Spiral_builder::closure95((), ()),
                            v808
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v847.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v847)
            }
        }
        pub fn method88(v0_1: Spiral_builder::US1, v1_1: u8, v2: string, v3: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US1> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<u8> = MutCell::new(v3);
            '_method88: loop {
                break '_method88 ({
                    let patternInput: (i32, string) = Spiral_builder::method42(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}.ipynb\"",
                            v2.get().clone(),
                            v2.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        match &v0_1.get().clone() {
                            Spiral_builder::US1::US1_0(v0_1_0_0) => {
                                Some(match &v0_1.get().clone() {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => None::<string>,
                        },
                    );
                    let v24: string = patternInput.1.clone();
                    let v23: i32 = patternInput.0.clone();
                    if if v23 == 0_i32 {
                        true
                    } else {
                        v3.get().clone() >= v1_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral_builder::closure94(
                                v1_1.get().clone(),
                                v3.get().clone(),
                                v24,
                                v23,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: Spiral_builder::US1 = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: u8 = v3.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method88;
                        }
                    }
                });
            }
        }
        pub fn closure97(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib / jupyter nbconvert")
        }
        pub fn closure96(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v616: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v625: string = padLeft(
                    toLower(match &v616 {
                        Spiral_builder::US1::US1_0(v616_0_0) => match &v616 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v641: &str = inline_colorization::color_bright_blue;
                let v643: &str = &*v625;
                let v645: &str = inline_colorization::color_reset;
                let v647: string = string("format!(\"{v641}{v643}{v645}\")");
                let v648: std::string::String = format!("{v641}{v643}{v645}");
                let v650: string = fable_library_rust::String_::fromString(v648);
                let v691: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v692: i32 = length(v0_1);
                let v694: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v701: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v710: () = {
                    Spiral_builder::closure10(
                        v694.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v719: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v727: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v736: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v745: () = {
                    Spiral_builder::closure10(
                        v694.clone(),
                        sprintf!("{}", string("jupyter_result_length")),
                        (),
                    );
                    ()
                };
                let v753: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v761: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v692), ());
                    ()
                };
                let v770: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v773: string = v694.l0.get().clone();
                let v812: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v650,
                            v691,
                            Spiral_builder::closure97((), ()),
                            v773
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v812.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v812)
            }
        }
        pub fn closure99(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib / html cell ids")
        }
        pub fn closure98(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v616: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v625: string = padLeft(
                    toLower(match &v616 {
                        Spiral_builder::US1::US1_0(v616_0_0) => match &v616 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v641: &str = inline_colorization::color_bright_blue;
                let v643: &str = &*v625;
                let v645: &str = inline_colorization::color_reset;
                let v647: string = string("format!(\"{v641}{v643}{v645}\")");
                let v648: std::string::String = format!("{v641}{v643}{v645}");
                let v650: string = fable_library_rust::String_::fromString(v648);
                let v691: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v692: i32 = length(v0_1);
                let v694: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v701: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v710: () = {
                    Spiral_builder::closure10(
                        v694.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v719: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v727: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v736: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v745: () = {
                    Spiral_builder::closure10(
                        v694.clone(),
                        sprintf!("{}", string("pwsh_replace_html_result_length")),
                        (),
                    );
                    ()
                };
                let v753: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v761: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v692), ());
                    ()
                };
                let v770: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v773: string = v694.l0.get().clone();
                let v812: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v650,
                            v691,
                            Spiral_builder::closure99((), ()),
                            v773
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v812.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v812)
            }
        }
        pub fn closure101(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib")
        }
        pub fn closure100(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v616: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v625: string = padLeft(
                    toLower(match &v616 {
                        Spiral_builder::US1::US1_0(v616_0_0) => match &v616 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v641: &str = inline_colorization::color_bright_blue;
                let v643: &str = &*v625;
                let v645: &str = inline_colorization::color_reset;
                let v647: string = string("format!(\"{v641}{v643}{v645}\")");
                let v648: std::string::String = format!("{v641}{v643}{v645}");
                let v650: string = fable_library_rust::String_::fromString(v648);
                let v691: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v692: i32 = length(v0_1);
                let v694: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v701: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v710: () = {
                    Spiral_builder::closure10(
                        v694.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v719: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v727: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v736: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v745: () = {
                    Spiral_builder::closure10(
                        v694.clone(),
                        sprintf!("{}", string("result_length")),
                        (),
                    );
                    ()
                };
                let v753: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v761: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", v692), ());
                    ()
                };
                let v770: () = {
                    Spiral_builder::closure10(v694.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v773: string = v694.l0.get().clone();
                let v812: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v650,
                            v691,
                            Spiral_builder::closure101((), ()),
                            v773
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v812.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v812)
            }
        }
        pub fn method89() -> string {
            string("wasm")
        }
        pub fn method90() -> string {
            string("contract")
        }
        pub fn method92() -> string {
            string("")
        }
        pub fn method93() -> string {
            string("")
        }
        pub fn method91(v0_1: string) -> string {
            let v5: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v7: Vec<u8> = v5.to_vec();
            let v9: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v7);
            let v11: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v9);
            let v13: bool = true;
            let mut v11 = v11;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v16: sha2::Sha256 = result;
                let v18: bool = true;
                let mut v16 = v16;
                let v19: usize = 0_i32 as usize;
                let v23: _ = [0_u8; 1024];
                let v25: bool = true;
                loop {
                    // rust.loop;
                    let v27: bool = true;
                    let mut v23 = v23;
                    let v29: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v11, &mut v23);
                    let v31: usize = v29.unwrap();
                    if v31 == v19 {
                        let v36: bool = true;
                        break;
                        ()
                    }
                    {
                        let v38: usize = v23.len();
                        let v39: u8 = v38 as u8;
                        let v42: usize = v31;
                        let v55: &_ = if v42 == v38 {
                            &v23[v19..]
                        } else {
                            &v23[v19..v42]
                        };
                        sha2::Digest::update(&mut v16, v55);
                        {
                            let v58: bool = true;
                        } // rust.loop;
                        let v60: bool = true;
                    } // rust.loop;
                    let v62: bool = true;
                } // rust.loop;
                let v64: bool = true;
                {
                    // rust.loop;
                    let v66: bool = true;
                    {
                        // rust.loop;
                        let v68: &[u8] = &sha2::Digest::finalize(v16);
                        let v70: Vec<u8> = v68.iter().map(|x| *x).collect::<Vec<_>>();
                        let v72: bool = true;
                        let _vec_map: Vec<_> = v70
                            .into_iter()
                            .map(|x| {
                                //;
                                let v74: u8 = x;
                                let v76: std::string::String = format!("{:02x}", v74);
                                let v78: string = fable_library_rust::String_::fromString(v76);
                                let v80: bool = true;
                                v78
                            })
                            .collect::<Vec<_>>();
                        let v82: Vec<string> = _vec_map;
                        let v84: Array<string> = fable_library_rust::NativeArray_::array_from(v82);
                        let v85: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v84 = v84.clone();
                            move || {
                                map(
                                    Func1::new({
                                        let v84 = v84.clone();
                                        move |i: i32| v84[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, count_2(v84.clone()) - 1_i32),
                                )
                            }
                        }));
                        let v91: string = join(Spiral_builder::method92(), toArray_1(v85));
                        Ok::<string, std::io::Error>(v91).unwrap()
                    }
                }
            }
        }
        pub fn closure102(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US35>>>,
            v1_1: Option<Spiral_builder::US35>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US35>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure103(
            v0_1: Option<chrono::DateTime<chrono::Utc>>,
            v1_1: Func1<
                Option<Spiral_builder::US35>,
                LrcPtr<MutCell<Option<Spiral_builder::US35>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US35>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US35>,
                    Some(v0_1_0_0) => {
                        let x: chrono::DateTime<chrono::Utc> = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US35::US35_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method95() -> string {
            string("hh:mm")
        }
        pub fn method96() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method97() -> string {
            string("hhmm")
        }
        pub fn method94(v0_1: Guid, v1_1: DateTime) -> Guid {
            let v7: DateTime = {
                let _arg: DateTime =
                    DateTime::new_ymdhms_kind(1970_i32, 1_i32, 1_i32, 0_i32, 0_i32, 0_i32, 1_i32);
                _arg.toUniversalTime()
            };
            let v25: i64 = ({
                let _arg_2: DateTime = {
                    let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                    _arg_1.toUniversalTime()
                };
                _arg_2.ticks()
            } - v7.ticks())
                / 10_i64;
            let v27: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v25);
            let _v28: LrcPtr<MutCell<Option<Spiral_builder::US35>>> =
                refCell(None::<Spiral_builder::US35>);
            let v33: () = {
                Spiral_builder::closure103(
                    v27,
                    Func1::new({
                        let _v28 = _v28.clone();
                        move |v: Option<Spiral_builder::US35>| {
                            Spiral_builder::closure102(_v28.clone(), v)
                        }
                    }),
                    (),
                );
                ()
            };
            let v48: Spiral_builder::US35 =
                defaultValue(Spiral_builder::US35::US35_1, _v28.get().clone());
            let v68: Spiral_builder::US1 = match &v48 {
                Spiral_builder::US35::US35_0(v48_0_0) => {
                    let v54: chrono::NaiveDateTime = match &v48 {
                        Spiral_builder::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v56: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v54);
                    let v58: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                    let v59: &str = r#"%Y%m%d-%H%M-%S%f"#;
                    let v61: std::string::String = v56.format(v59).to_string();
                    let v63: string = fable_library_rust::String_::fromString(v61);
                    Spiral_builder::US1::US1_0(sprintf!(
                        "{}-{}-{}",
                        getSlice(v63.clone(), Some(0_i32), Some(17_i32)),
                        getSlice(v63.clone(), Some(18_i32), Some(21_i32)),
                        getCharAt(v63, 22_i32)
                    ))
                }
                _ => Spiral_builder::US1::US1_1,
            };
            let v72: string = match &v68 {
                Spiral_builder::US1::US1_0(v68_0_0) => match &v68 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            };
            let v75: LrcPtr<TimeZoneInfo> = 0i64.into();
            let v150: u8 = if zero.hours() > 0_i32 { 1_u8 } else { 0_u8 };
            let v151: string = Spiral_builder::method95();
            let v159: string = zero.to_string(v151);
            let v162: string = sprintf!(
                "{}{}{}",
                v150,
                getSlice(v159.clone(), Some(0_i32), Some(1_i32)),
                getSlice(v159, Some(3_i32), Some(4_i32))
            );
            parse(sprintf!(
                "{}{}{}",
                v72.clone(),
                v162.clone(),
                getSlice(
                    toString(v0_1),
                    Some(length(v72) + length(v162)),
                    None::<i32>
                )
            ))
        }
        pub fn method98(v0_1: string, v1_1: string) {
            if Spiral_builder::method21(v0_1.clone()) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral_builder::method30(v0_1.clone());
                ()
            }
            {
                let v5: string = Spiral_builder::method26(v1_1.clone());
                if Spiral_builder::method21(v5.clone()) == false {
                    let v8: LrcPtr<dyn IDisposable> = Spiral_builder::method30(v5);
                    ()
                }
                if if Spiral_builder::method21(v1_1.clone()) {
                    let v11: Result<std::path::PathBuf, std::io::Error> =
                        std::fs::read_link(&*v1_1.clone());
                    v11.is_err()
                } else {
                    false
                } {
                    Spiral_builder::method34(true, v1_1.clone());
                }
                if Spiral_builder::method21(v1_1.clone()) == false {
                    let _v19: MutCell<Option<()>> = MutCell::new(None::<()>);
                    std::os::unix::fs::symlink(&*v0_1, &*v1_1).unwrap();
                    _v19.set(Some(()));
                    match &_v19.get().clone() {
                        None => panic!("{}", string("runtime.run_platform / _v19=None"),),
                        Some(_v19_0_0) => _v19_0_0.clone(),
                    }
                    ();
                    ()
                }
            }
        }
        pub fn closure105(unitVar: (), unitVar_1: ()) -> string {
            string("common.retry_fn\' / loop")
        }
        pub fn closure104(v0_1: u8, v1_1: u8, v2: i32, v3: string, v4: bool, unitVar: ()) {
            fn v6() {
                Spiral_builder::closure2((), ());
            }
            let v7: () = {
                v6();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v36: () = {
                v6();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v64: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v64,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v72: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v76: () = {
                    v6();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v105: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v110: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v105 = _v105.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v105.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v125: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v105.get().clone());
                let v165: DateTime = match &v125 {
                    Spiral_builder::US3::US3_0(v125_0_0) => {
                        let v139: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v125 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v139.hours(),
                            v139.minutes(),
                            v139.seconds(),
                            v139.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v170: string = {
                    let provider: string = Spiral_builder::method6();
                    v165.toString(provider)
                };
                let v558: string = Spiral_builder::method8();
                let v570: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v581: () = {
                    Spiral_builder::closure10(
                        v570.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v585: Array<string> = split(v570.l0.get().clone(), v558, -1_i32, 0_i32);
                let v588: string = v585[0_i32].clone();
                let v592: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v603: () = {
                    Spiral_builder::closure10(
                        v592.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v613: Spiral_builder::US1 = if startsWith(v592.l0.get().clone(), v588, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v619: Spiral_builder::US1 = match &v613 {
                    Spiral_builder::US1::US1_0(v613_0_0) => {
                        Spiral_builder::US1::US1_0(match &v613 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v628: string = padLeft(
                    toLower(match &v619 {
                        Spiral_builder::US1::US1_0(v619_0_0) => match &v619 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v644: &str = inline_colorization::color_bright_blue;
                let v646: &str = &*v628;
                let v648: &str = inline_colorization::color_reset;
                let v650: string = string("format!(\"{v644}{v646}{v648}\")");
                let v651: std::string::String = format!("{v644}{v646}{v648}");
                let v653: string = fable_library_rust::String_::fromString(v651);
                let v694: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v695: string = sprintf!("{}/{}", v1_1, v0_1);
                let v697: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v704: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v713: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string("is_error")), ());
                    ()
                };
                let v722: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v733: () = {
                    Spiral_builder::closure10(
                        v697.clone(),
                        sprintf!("{}", if v4 { string("true") } else { string("false") }),
                        (),
                    );
                    ()
                };
                let v742: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v751: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v759: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v767: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", v695), ());
                    ()
                };
                let v775: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v784: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string("result")), ());
                    ()
                };
                let v792: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v800: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v809: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string(", ")), ());
                    ()
                };
                let v817: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v826: () = {
                    Spiral_builder::closure10(v697.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v829: string = v697.l0.get().clone();
                let v868: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v170,
                            v653,
                            v694,
                            Spiral_builder::closure105((), ()),
                            v829
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v868.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v868)
            }
        }
        pub fn method101(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<u8> = MutCell::new(v8);
            '_method101: loop {
                break '_method101 ({
                    let patternInput: (i32, string) = Spiral_builder::method42(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                    );
                    let v9: i32 = patternInput.0.clone();
                    let v10: string = patternInput.1.clone();
                    let v14: Spiral_builder::US36 = if v9 == 0_i32 {
                        Spiral_builder::US36::US36_0(v9, v10.clone())
                    } else {
                        Spiral_builder::US36::US36_1(v9, v10)
                    };
                    let patternInput_1: (bool, i32, string) = match &v14 {
                        Spiral_builder::US36::US36_0(v14_0_0, v14_0_1) => {
                            (false, v14_0_0.clone(), v14_0_1.clone())
                        }
                        Spiral_builder::US36::US36_1(v14_1_0, v14_1_1) => {
                            (true, v14_1_0.clone(), v14_1_1.clone())
                        }
                    };
                    let v24: string = patternInput_1.2.clone();
                    let v23: i32 = patternInput_1.1.clone();
                    let v22: bool = patternInput_1.0.clone();
                    if if v22 == false {
                        true
                    } else {
                        v8.get().clone() >= v0_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral_builder::closure104(
                                v0_1.get().clone(),
                                v8.get().clone(),
                                v23,
                                v24,
                                v22,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: u8 = v8.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            continue '_method101;
                        }
                    }
                });
            }
        }
        pub fn method100(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) -> (i32, string) {
            Spiral_builder::method101(v0_1, v1_1, v2, v3, v4, v5, v6, v7, 1_u8)
        }
        pub fn method99(
            v0_1: Spiral_builder::US33,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Spiral_builder::US12,
        ) -> (i32, string) {
            let v186: string = sprintf!(
                "dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\"{}{}",
                v3,
                v2.clone(),
                v2,
                v1_1,
                sprintf!(
                    " --define {}",
                    if cfg!(windows) {
                        string("_WINDOWS")
                    } else {
                        string("_LINUX")
                    }
                ),
                match &v0_1 {
                    Spiral_builder::US33::US33_0(v0_1_0_0) => {
                        let v38: Spiral_builder::US34 = match &v0_1 {
                            Spiral_builder::US33::US33_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v105: Spiral_builder::US1 =
                            if if let Spiral_builder::US34::US34_0(v38_0_0) = &v38 {
                                string("")
                                    == match &v38 {
                                        Spiral_builder::US34::US34_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                            } else {
                                false
                            } {
                                Spiral_builder::US1::US1_0(string("Wasm"))
                            } else {
                                let v51: string = Spiral_builder::method8();
                                let v63: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v74: () = {
                                    Spiral_builder::closure10(
                                        v63.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!(
                                                "{:?}",
                                                Spiral_builder::US34::US34_0(string(""))
                                            )
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v78: Array<string> =
                                    split(v63.l0.get().clone(), v51, -1_i32, 0_i32);
                                let v81: string = v78[0_i32].clone();
                                let v85: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v94: () = {
                                    Spiral_builder::closure10(
                                        v85.clone(),
                                        sprintf!("{}", sprintf!("{:?}", v38.clone())),
                                        (),
                                    );
                                    ()
                                };
                                if startsWith(v85.l0.get().clone(), v81, false) {
                                    Spiral_builder::US1::US1_0(string("Wasm"))
                                } else {
                                    Spiral_builder::US1::US1_1
                                }
                            };
                        let v175: Spiral_builder::US1 = match &v105 {
                            Spiral_builder::US1::US1_0(v105_0_0) => {
                                Spiral_builder::US1::US1_0(match &v105 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US1 =
                                    if if let Spiral_builder::US34::US34_1(v38_1_0) = &v38 {
                                        string("")
                                            == match &v38 {
                                                Spiral_builder::US34::US34_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US1::US1_0(string("Contract"))
                                    } else {
                                        let v114: string = Spiral_builder::method8();
                                        let v126: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v137: () = {
                                            Spiral_builder::closure10(
                                                v126.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!(
                                                        "{:?}",
                                                        Spiral_builder::US34::US34_1(string(""))
                                                    )
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v141: Array<string> =
                                            split(v126.l0.get().clone(), v114, -1_i32, 0_i32);
                                        let v144: string = v141[0_i32].clone();
                                        let v148: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v157: () = {
                                            Spiral_builder::closure10(
                                                v148.clone(),
                                                sprintf!("{}", sprintf!("{:?}", v38.clone())),
                                                (),
                                            );
                                            ()
                                        };
                                        if startsWith(v148.l0.get().clone(), v144, false) {
                                            Spiral_builder::US1::US1_0(string("Contract"))
                                        } else {
                                            Spiral_builder::US1::US1_1
                                        }
                                    };
                                match &v168 {
                                    Spiral_builder::US1::US1_0(v168_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v168 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => Spiral_builder::US1::US1_1,
                                }
                            }
                        };
                        sprintf!(
                            " --define {}",
                            toUpper(match &v175 {
                                Spiral_builder::US1::US1_0(v175_0_0) => match &v175 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            })
                        )
                    }
                    _ => string(""),
                }
            );
            let v192: Result<string, string> = match &v4 {
                Spiral_builder::US12::US12_0(v4_0_0) => Ok::<string, string>(v4_0_0.clone()),
                Spiral_builder::US12::US12_1(v4_1_0) => Err::<string, string>(v4_1_0.clone()),
            };
            Spiral_builder::method100(
                3_u8,
                v186,
                None::<CancellationToken>,
                new_empty::<(string, string)>(),
                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                true,
                v192.ok(),
            )
        }
        pub fn closure107(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / dotnet fable error")
        }
        pub fn closure106(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v799: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v614: string = Spiral_builder::method8();
                        let v626: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v637: () = {
                            Spiral_builder::closure10(
                                v626.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v641: Array<string> = split(v626.l0.get().clone(), v614, -1_i32, 0_i32);
                        let v644: string = v641[0_i32].clone();
                        let v648: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v659: () = {
                            Spiral_builder::closure10(
                                v648.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v669: Spiral_builder::US1 =
                            if startsWith(v648.l0.get().clone(), v644, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v669 {
                            Spiral_builder::US1::US1_0(v669_0_0) => {
                                Spiral_builder::US1::US1_0(match &v669 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v673: string = Spiral_builder::method8();
                                let v685: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v696: () = {
                                    Spiral_builder::closure10(
                                        v685.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v700: Array<string> =
                                    split(v685.l0.get().clone(), v673, -1_i32, 0_i32);
                                let v703: string = v700[0_i32].clone();
                                let v707: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v718: () = {
                                    Spiral_builder::closure10(
                                        v707.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v728: Spiral_builder::US1 =
                                    if startsWith(v707.l0.get().clone(), v703, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v728 {
                                    Spiral_builder::US1::US1_0(v728_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v728 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v732: string = Spiral_builder::method8();
                                        let v744: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v755: () = {
                                            Spiral_builder::closure10(
                                                v744.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v759: Array<string> =
                                            split(v744.l0.get().clone(), v732, -1_i32, 0_i32);
                                        let v762: string = v759[0_i32].clone();
                                        let v766: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v777: () = {
                                            Spiral_builder::closure10(
                                                v766.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v787: Spiral_builder::US1 =
                                            if startsWith(v766.l0.get().clone(), v762, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v787 {
                                            Spiral_builder::US1::US1_0(v787_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v787 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v808: string = padLeft(
                    toLower(match &v799 {
                        Spiral_builder::US1::US1_0(v799_0_0) => match &v799 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v824: &str = inline_colorization::color_bright_red;
                let v826: &str = &*v808;
                let v828: &str = inline_colorization::color_reset;
                let v830: string = string("format!(\"{v824}{v826}{v828}\")");
                let v831: std::string::String = format!("{v824}{v826}{v828}");
                let v833: string = fable_library_rust::String_::fromString(v831);
                let v874: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v876: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v883: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v892: () = {
                    Spiral_builder::closure10(
                        v876.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v901: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v909: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v918: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v927: () = {
                    Spiral_builder::closure10(
                        v876.clone(),
                        sprintf!("{}", string("dotnet_fable_result")),
                        (),
                    );
                    ()
                };
                let v935: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v943: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v952: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v955: string = v876.l0.get().clone();
                let v994: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v833,
                            v874,
                            Spiral_builder::closure107((), ()),
                            v955
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v994.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v994)
            }
        }
        pub fn closure108(unitVar: (), v0_1: std::string::String) -> bool {
            contains(
                fable_library_rust::String_::fromString(v0_1),
                string("near-sdk"),
            )
        }
        pub fn method102() -> Func1<std::string::String, bool> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure108((), v))
        }
        pub fn method103(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method104(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method105(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure109(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US37>>>,
            v1_1: Option<Spiral_builder::US37>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US37>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure110(
            v0_1: Option<std::collections::HashMap<string, string>>,
            v1_1: Func1<
                Option<Spiral_builder::US37>,
                LrcPtr<MutCell<Option<Spiral_builder::US37>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US37>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US37>,
                    Some(v0_1_0_0) => {
                        let x: std::collections::HashMap<string, string> = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US37::US37_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method107() -> string {
            string("a")
        }
        pub fn closure111(v0_1: u8, v1_1: i32, v2: string, v3: bool, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v618: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v627: string = padLeft(
                    toLower(match &v618 {
                        Spiral_builder::US1::US1_0(v618_0_0) => match &v618 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v643: &str = inline_colorization::color_bright_blue;
                let v645: &str = &*v627;
                let v647: &str = inline_colorization::color_reset;
                let v649: string = string("format!(\"{v643}{v645}{v647}\")");
                let v650: std::string::String = format!("{v643}{v645}{v647}");
                let v652: string = fable_library_rust::String_::fromString(v650);
                let v693: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v694: string = sprintf!("{}/{}", v0_1, 3_u8);
                let v696: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v703: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v712: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("is_error")), ());
                    ()
                };
                let v721: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v732: () = {
                    Spiral_builder::closure10(
                        v696.clone(),
                        sprintf!("{}", if v3 { string("true") } else { string("false") }),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v750: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v758: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v766: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", v694), ());
                    ()
                };
                let v774: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v783: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string("result")), ());
                    ()
                };
                let v791: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v799: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v808: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string(", ")), ());
                    ()
                };
                let v816: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v825: () = {
                    Spiral_builder::closure10(v696.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v828: string = v696.l0.get().clone();
                let v867: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v652,
                            v693,
                            Spiral_builder::closure105((), ()),
                            v828
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v867.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v867)
            }
        }
        pub fn method106(v0_1: Spiral_builder::US12, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US12> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method106: loop {
                break '_method106 ({
                    let v8: string =
                        sprintf!("cargo fmt --manifest-path \"{}\" --", v1_1.get().clone());
                    let v14: Result<string, string> = match &v0_1.get().clone() {
                        Spiral_builder::US12::US12_0(v0_1_0_0) => {
                            Ok::<string, string>(v0_1_0_0.clone())
                        }
                        Spiral_builder::US12::US12_1(v0_1_1_0) => {
                            Err::<string, string>(v0_1_1_0.clone())
                        }
                    };
                    let patternInput: (i32, string) = Spiral_builder::method42(
                        v8,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v14.ok(),
                    );
                    let v19: string = patternInput.1.clone();
                    let v18: i32 = patternInput.0.clone();
                    let v193: Spiral_builder::US36 = if contains(
                        v19.clone(),
                        string("failed to load manifest for workspace member"),
                    ) == false
                    {
                        if v18 == 0_i32 {
                            Spiral_builder::US36::US36_0(v18, v19.clone())
                        } else {
                            Spiral_builder::US36::US36_1(v18, v19.clone())
                        }
                    } else {
                        let v31: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v33: regex::Regex = v31.unwrap();
                        let v35: &str = &*v19.clone();
                        let v37: std::string::String = String::from(v35);
                        let v39: bool = true;
                        let _capture_move = (move || {
                            //;
                            let v41: Box<std::string::String> = Box::new(v37);
                            let v43: &'static mut std::string::String = Box::leak(v41);
                            let v45: regex::CaptureMatches = v33.captures_iter(v43);
                            let v47: bool = true;
                            let _regex_captures: Vec<_> = v45
                                .map(|x| {
                                    //;
                                    let v49: regex::Captures<'static> = x;
                                    let v51: Box<regex::Captures<'static>> = Box::new(v49);
                                    let v53: &'static mut regex::Captures<'static> = Box::leak(v51);
                                    let v55: regex::CaptureNames = v33.capture_names();
                                    let v57: bool = true;
                                    let _regex_captures: std::collections::HashMap<_, _> = v55
                                        .map(|x| {
                                            //;
                                            let v59: string = x.unwrap_or("").to_string().into();
                                            let v61: string = v59.clone().clone();
                                            let v63: string = v53
                                                .name(&v59)
                                                .map(|x| x.as_str())
                                                .unwrap_or("")
                                                .to_string()
                                                .into();
                                            let v66: bool = true;
                                            LrcPtr::new((v61, v63))
                                        })
                                        .map(|x| {
                                            std::sync::Arc::try_unwrap(x)
                                                .unwrap_or_else(|x| (*x).clone())
                                        })
                                        .collect();
                                    let v68: std::collections::HashMap<string, string> =
                                        _regex_captures;
                                    let v70: bool = true;
                                    v68
                                })
                                .collect::<Vec<_>>();
                            let v72: Vec<std::collections::HashMap<string, string>> =
                                _regex_captures;
                            let v74: bool = true;
                            v72
                        })();
                        let v76: Vec<std::collections::HashMap<string, string>> = _capture_move;
                        let v79: Option<std::collections::HashMap<string, string>> =
                            tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v76));
                        let _v80: LrcPtr<MutCell<Option<Spiral_builder::US37>>> =
                            refCell(None::<Spiral_builder::US37>);
                        let v85: () = {
                            Spiral_builder::closure110(
                                v79,
                                Func1::new({
                                    let _v80 = _v80.clone();
                                    move |v: Option<Spiral_builder::US37>| {
                                        Spiral_builder::closure109(_v80.clone(), v)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v100: Spiral_builder::US37 =
                            defaultValue(Spiral_builder::US37::US37_1, _v80.get().clone());
                        let v135: Spiral_builder::US38 = match &v100 {
                            Spiral_builder::US37::US37_0(v100_0_0) => {
                                let v105: string = Spiral_builder::method107();
                                let v107: Option<string> = std::collections::HashMap::get(
                                    &match &v100 {
                                        Spiral_builder::US37::US37_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    &v105,
                                )
                                .map(|x| x)
                                .cloned();
                                let _v108: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                                    refCell(None::<Spiral_builder::US1>);
                                let v113: () = {
                                    Spiral_builder::closure4(
                                        v107,
                                        Func1::new({
                                            let _v108 = _v108.clone();
                                            move |v_1: Option<Spiral_builder::US1>| {
                                                Spiral_builder::closure3(_v108.clone(), v_1)
                                            }
                                        }),
                                        (),
                                    );
                                    ()
                                };
                                Spiral_builder::US38::US38_0(defaultValue(
                                    Spiral_builder::US1::US1_1,
                                    _v108.get().clone(),
                                ))
                            }
                            _ => Spiral_builder::US38::US38_1,
                        };
                        let v142: Spiral_builder::US1 =
                            if let Spiral_builder::US38::US38_0(v135_0_0) = &v135 {
                                let v136: Spiral_builder::US1 = match &v135 {
                                    Spiral_builder::US38::US38_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US1::US1_0(v136_0_0) = &v136 {
                                    Spiral_builder::US1::US1_0(match &v136 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US1::US1_1
                                }
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v142 {
                            Spiral_builder::US1::US1_0(v142_0_0) => {
                                let v144: string = match &v142 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if Spiral_builder::method29(v144.clone()) == false {
                                    let v148: LrcPtr<dyn IDisposable> = Spiral_builder::method30(
                                        Spiral_builder::method26(v144.clone()),
                                    );
                                    let v149: DateTime = DateTime::now();
                                    let v158: string =
                                        toString(Spiral_builder::method94(new_guid(), v149));
                                    let v183: string =
                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                         v158.clone())),
                                                                                                                                         string("\n")),
                                                                                                                                  string("version = \"0.0.1\"")),
                                                                                                                           string("\n")),
                                                                                                                    string("edition = \"2021\"")),
                                                                                                             string("\n")),
                                                                                                      string("")),
                                                                                               string("\n")),
                                                                                        string("[[bin]]")),
                                                                                 string("\n")),
                                                                          sprintf!("name = \"spiral_builder_{}\"",
                                                                                   v158)),
                                                                   string("\n")),
                                                            string("path = \"spiral_builder.rs\""));
                                    std::fs::write(&*v144, &*v183).unwrap();
                                    ();
                                    ()
                                }
                                if v18 == 0_i32 {
                                    Spiral_builder::US36::US36_0(v18, v19.clone())
                                } else {
                                    Spiral_builder::US36::US36_1(v18, v19.clone())
                                }
                            }
                            _ => Spiral_builder::US36::US36_1(v18, v19.clone()),
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v193 {
                        Spiral_builder::US36::US36_0(v193_0_0, v193_0_1) => {
                            (false, v193_0_0.clone(), v193_0_1.clone())
                        }
                        Spiral_builder::US36::US36_1(v193_1_0, v193_1_1) => {
                            (true, v193_1_0.clone(), v193_1_1.clone())
                        }
                    };
                    let v203: string = patternInput_1.2.clone();
                    let v202: i32 = patternInput_1.1.clone();
                    let v201: bool = patternInput_1.0.clone();
                    if if v201 == false {
                        true
                    } else {
                        v2.get().clone() >= 3_u8
                    } {
                        (v202, v203.clone())
                    } else {
                        let v209: () = {
                            Spiral_builder::closure111(v2.get().clone(), v202, v203, v201, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral_builder::US12 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = v2.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method106;
                        }
                    }
                });
            }
        }
        pub fn closure113(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / cargo fmt error")
        }
        pub fn closure112(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v799: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v614: string = Spiral_builder::method8();
                        let v626: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v637: () = {
                            Spiral_builder::closure10(
                                v626.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v641: Array<string> = split(v626.l0.get().clone(), v614, -1_i32, 0_i32);
                        let v644: string = v641[0_i32].clone();
                        let v648: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v659: () = {
                            Spiral_builder::closure10(
                                v648.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v669: Spiral_builder::US1 =
                            if startsWith(v648.l0.get().clone(), v644, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v669 {
                            Spiral_builder::US1::US1_0(v669_0_0) => {
                                Spiral_builder::US1::US1_0(match &v669 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v673: string = Spiral_builder::method8();
                                let v685: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v696: () = {
                                    Spiral_builder::closure10(
                                        v685.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v700: Array<string> =
                                    split(v685.l0.get().clone(), v673, -1_i32, 0_i32);
                                let v703: string = v700[0_i32].clone();
                                let v707: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v718: () = {
                                    Spiral_builder::closure10(
                                        v707.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v728: Spiral_builder::US1 =
                                    if startsWith(v707.l0.get().clone(), v703, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v728 {
                                    Spiral_builder::US1::US1_0(v728_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v728 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v732: string = Spiral_builder::method8();
                                        let v744: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v755: () = {
                                            Spiral_builder::closure10(
                                                v744.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v759: Array<string> =
                                            split(v744.l0.get().clone(), v732, -1_i32, 0_i32);
                                        let v762: string = v759[0_i32].clone();
                                        let v766: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v777: () = {
                                            Spiral_builder::closure10(
                                                v766.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v787: Spiral_builder::US1 =
                                            if startsWith(v766.l0.get().clone(), v762, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v787 {
                                            Spiral_builder::US1::US1_0(v787_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v787 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v808: string = padLeft(
                    toLower(match &v799 {
                        Spiral_builder::US1::US1_0(v799_0_0) => match &v799 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v824: &str = inline_colorization::color_bright_red;
                let v826: &str = &*v808;
                let v828: &str = inline_colorization::color_reset;
                let v830: string = string("format!(\"{v824}{v826}{v828}\")");
                let v831: std::string::String = format!("{v824}{v826}{v828}");
                let v833: string = fable_library_rust::String_::fromString(v831);
                let v874: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v876: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v883: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v892: () = {
                    Spiral_builder::closure10(
                        v876.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v901: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v909: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v918: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v927: () = {
                    Spiral_builder::closure10(
                        v876.clone(),
                        sprintf!("{}", string("cargo_fmt_result")),
                        (),
                    );
                    ()
                };
                let v935: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v943: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v952: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v955: string = v876.l0.get().clone();
                let v994: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v833,
                            v874,
                            Spiral_builder::closure113((), ()),
                            v955
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v994.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v994)
            }
        }
        pub fn closure115(unitVar: (), v0_1: string) -> bool {
            if contains(v0_1.clone(), string("profile [optimized] target")) == false {
                if contains(v0_1.clone(), string("profile [unoptimized] target")) == false {
                    contains(v0_1, string("profile [unoptimized + debuginfo] target")) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure114(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(skip(
                    2_i32,
                    skipWhile(
                        Func1::new(move |v: string| Spiral_builder::closure115((), v)),
                        split(v0_1, string("\n"), -1_i32, 0_i32),
                    ),
                ))),
            )
        }
        pub fn closure118(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / Exception")
        }
        pub fn closure117(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v908: std::string::String = format!("{:#?}", v3);
                let v938: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v908)),
                        (),
                    );
                    ()
                };
                let v947: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v956: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("cargo_result")),
                        (),
                    );
                    ()
                };
                let v964: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v972: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v980: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v989: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v997: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1005: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v1013: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1022: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v1030: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1038: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v1047: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1050: string = v878.l0.get().clone();
                let v1089: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure118((), ()),
                            v1050
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1089.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1089)
            }
        }
        pub fn closure116(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure117(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn closure120(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / error")
        }
        pub fn closure119(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v911: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v920: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v929: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("cargo_result")),
                        (),
                    );
                    ()
                };
                let v937: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v945: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v953: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v962: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v970: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v978: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v986: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v995: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v1003: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1011: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v1020: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1023: string = v878.l0.get().clone();
                let v1062: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure120((), ()),
                            v1023
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1062.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1062)
            }
        }
        pub fn closure122(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / wasm error")
        }
        pub fn closure121(v0_1: string, v1_1: string, v2: string, v3: i32, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v911: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v920: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v929: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("spiral_wasm_result")),
                        (),
                    );
                    ()
                };
                let v937: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v945: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v953: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v962: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("cargo_result")),
                        (),
                    );
                    ()
                };
                let v970: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v978: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v986: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v995: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v1003: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1011: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v1020: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1023: string = v878.l0.get().clone();
                let v1062: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure122((), ()),
                            v1023
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1062.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1062)
            }
        }
        pub fn closure124(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / error")
        }
        pub fn closure123(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            v4: string,
            unitVar: (),
        ) {
            fn v6() {
                Spiral_builder::closure2((), ());
            }
            let v7: () = {
                v6();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v36: () = {
                v6();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v64: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v64,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v72: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v76: () = {
                    v6();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v105: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v110: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v105 = _v105.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v105.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v125: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v105.get().clone());
                let v165: DateTime = match &v125 {
                    Spiral_builder::US3::US3_0(v125_0_0) => {
                        let v139: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v125 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v139.hours(),
                            v139.minutes(),
                            v139.seconds(),
                            v139.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v170: string = {
                    let provider: string = Spiral_builder::method6();
                    v165.toString(provider)
                };
                let v558: string = Spiral_builder::method8();
                let v570: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v581: () = {
                    Spiral_builder::closure10(
                        v570.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v585: Array<string> = split(v570.l0.get().clone(), v558, -1_i32, 0_i32);
                let v588: string = v585[0_i32].clone();
                let v592: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v603: () = {
                    Spiral_builder::closure10(
                        v592.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v613: Spiral_builder::US1 = if startsWith(v592.l0.get().clone(), v588, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v802: Spiral_builder::US1 = match &v613 {
                    Spiral_builder::US1::US1_0(v613_0_0) => {
                        Spiral_builder::US1::US1_0(match &v613 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v617: string = Spiral_builder::method8();
                        let v629: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v640: () = {
                            Spiral_builder::closure10(
                                v629.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v644: Array<string> = split(v629.l0.get().clone(), v617, -1_i32, 0_i32);
                        let v647: string = v644[0_i32].clone();
                        let v651: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v662: () = {
                            Spiral_builder::closure10(
                                v651.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v672: Spiral_builder::US1 =
                            if startsWith(v651.l0.get().clone(), v647, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v672 {
                            Spiral_builder::US1::US1_0(v672_0_0) => {
                                Spiral_builder::US1::US1_0(match &v672 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v676: string = Spiral_builder::method8();
                                let v688: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v699: () = {
                                    Spiral_builder::closure10(
                                        v688.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v703: Array<string> =
                                    split(v688.l0.get().clone(), v676, -1_i32, 0_i32);
                                let v706: string = v703[0_i32].clone();
                                let v710: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v721: () = {
                                    Spiral_builder::closure10(
                                        v710.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v731: Spiral_builder::US1 =
                                    if startsWith(v710.l0.get().clone(), v706, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v731 {
                                    Spiral_builder::US1::US1_0(v731_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v731 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v735: string = Spiral_builder::method8();
                                        let v747: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v758: () = {
                                            Spiral_builder::closure10(
                                                v747.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v762: Array<string> =
                                            split(v747.l0.get().clone(), v735, -1_i32, 0_i32);
                                        let v765: string = v762[0_i32].clone();
                                        let v769: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v780: () = {
                                            Spiral_builder::closure10(
                                                v769.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v790: Spiral_builder::US1 =
                                            if startsWith(v769.l0.get().clone(), v765, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v790 {
                                            Spiral_builder::US1::US1_0(v790_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v790 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v811: string = padLeft(
                    toLower(match &v802 {
                        Spiral_builder::US1::US1_0(v802_0_0) => match &v802 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v827: &str = inline_colorization::color_bright_red;
                let v829: &str = &*v811;
                let v831: &str = inline_colorization::color_reset;
                let v833: string = string("format!(\"{v827}{v829}{v831}\")");
                let v834: std::string::String = format!("{v827}{v829}{v831}");
                let v836: string = fable_library_rust::String_::fromString(v834);
                let v877: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v879: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v886: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v895: () = {
                    Spiral_builder::closure10(
                        v879.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v904: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v912: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v921: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v930: () = {
                    Spiral_builder::closure10(
                        v879.clone(),
                        sprintf!("{}", string("cargo_result")),
                        (),
                    );
                    ()
                };
                let v938: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v946: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v954: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v963: () = {
                    Spiral_builder::closure10(
                        v879.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v971: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v979: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v987: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v996: () = {
                    Spiral_builder::closure10(
                        v879.clone(),
                        sprintf!("{}", string("wasm_path")),
                        (),
                    );
                    ()
                };
                let v1004: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1012: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v1020: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1029: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string("command")), ());
                    ()
                };
                let v1037: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1045: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", v4), ());
                    ()
                };
                let v1054: () = {
                    Spiral_builder::closure10(v879.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1057: string = v879.l0.get().clone();
                let v1096: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v170,
                            v836,
                            v877,
                            Spiral_builder::closure124((), ()),
                            v1057
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1096.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1096)
            }
        }
        pub fn closure126(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / cleanup")
        }
        pub fn closure125(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            v9: string,
            v10: bool,
            unitVar: (),
        ) {
            fn v12() {
                Spiral_builder::closure2((), ());
            }
            let v13: () = {
                v12();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v42: () = {
                v12();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v70: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v70,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v78: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v82: () = {
                    v12();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v111: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v116: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v111 = _v111.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v111.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v131: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v111.get().clone());
                let v171: DateTime = match &v131 {
                    Spiral_builder::US3::US3_0(v131_0_0) => {
                        let v145: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v131 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v145.hours(),
                            v145.minutes(),
                            v145.seconds(),
                            v145.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v176: string = {
                    let provider: string = Spiral_builder::method6();
                    v171.toString(provider)
                };
                let v568: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v584: &str = inline_colorization::color_bright_black;
                let v586: &str = &*v568;
                let v588: &str = inline_colorization::color_reset;
                let v590: string = string("format!(\"{v584}{v586}{v588}\")");
                let v591: std::string::String = format!("{v584}{v586}{v588}");
                let v593: string = fable_library_rust::String_::fromString(v591);
                let v634: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v636: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v643: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v652: () = {
                    Spiral_builder::closure10(
                        v636.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v661: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v669: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v678: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v687: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string("cleanup")), ());
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v718: () = {
                    Spiral_builder::closure10(
                        v636.clone(),
                        sprintf!(
                            "{}",
                            sprintf!(
                                "{:?}",
                                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                    v1_1,
                                    v2,
                                    LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                        v3,
                                        v4,
                                        LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                            v5,
                                            v6,
                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                                v7,
                                                v8,
                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                                    v9,
                                                    v10,
                                                    LrcPtr::new(Spiral_builder::UH4::UH4_0)
                                                ))
                                            ))
                                        ))
                                    ))
                                ))
                            )
                        ),
                        (),
                    );
                    ()
                };
                let v727: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v730: string = v636.l0.get().clone();
                let v769: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v176,
                            v593,
                            v634,
                            Spiral_builder::closure126((), ()),
                            v730
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v769.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v769)
            }
        }
        pub fn method108(v0_1: LrcPtr<Spiral_builder::UH4>) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH4>> = MutCell::new(v0_1.clone());
            '_method108: loop {
                break '_method108 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH4::UH4_0 => (),
                    Spiral_builder::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        std::fs::remove_file(&*match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        })
                        .unwrap();
                        ();
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH4> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH4::UH4_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            v0_1.set(v0_1_temp);
                            continue '_method108;
                        }
                    }
                });
            }
        }
        pub fn method109(v0_1: async_walkdir::DirEntry) -> async_walkdir::DirEntry {
            v0_1
        }
        pub fn closure128(unitVar: (), v0_1: std::fs::FileType) -> Spiral_builder::US40 {
            Spiral_builder::US40::US40_0(v0_1)
        }
        pub fn closure129(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US40 {
            Spiral_builder::US40::US40_1(v0_1)
        }
        pub fn method110(v0_1: std::fs::FileType) -> std::fs::FileType {
            v0_1
        }
        pub fn method111(v0_1: Spiral_builder::US41) -> Spiral_builder::US41 {
            v0_1
        }
        pub fn method112(v0_1: async_walkdir::Filtering) -> async_walkdir::Filtering {
            v0_1
        }
        pub fn closure127(
            unitVar: (),
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let v2: bool = true;
            let __future_init = Box::pin(async {
                //;
                let v4: bool = true;
                let __future_init = Box::pin(async move {
                    //;
                    let v5: async_walkdir::DirEntry = Spiral_builder::method109(v0_1.clone());
                    let v7: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                    Output = Result<std::fs::FileType, std::io::Error>,
                                > + Send,
                        >,
                    > = Box::pin(async_walkdir::DirEntry::file_type(&v5));
                    let v9: Result<std::fs::FileType, std::io::Error> = v7.await;
                    let v10 = Spiral_builder::method32();
                    let v12: Result<std::fs::FileType, std::string::String> =
                        v9.map_err(|x| v10(x));
                    let v15: Spiral_builder::US40 = match &v12 {
                        Err(v12_1_0) => Spiral_builder::closure129((), v12_1_0.clone()),
                        Ok(v12_0_0) => Spiral_builder::closure128((), v12_0_0.clone()),
                    };
                    let v94: Spiral_builder::US41 = Spiral_builder::method111(
                        if let Spiral_builder::US40::US40_0(v15_0_0) = &v15 {
                            let v17: std::fs::FileType = Spiral_builder::method110(match &v15 {
                                Spiral_builder::US40::US40_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            if std::fs::FileType::is_dir(&v17) == false {
                                Spiral_builder::US41::US41_0
                            } else {
                                let v23: std::path::PathBuf =
                                    async_walkdir::DirEntry::path(&v0_1.clone());
                                let v25: std::path::Display = v23.display();
                                let v28: std::string::String = format!("{}", v25);
                                if startsWith(
                                    Spiral_builder::method26(
                                        fable_library_rust::String_::fromString(v28),
                                    ),
                                    string("fable-library-ts."),
                                    false,
                                ) {
                                    Spiral_builder::US41::US41_2
                                } else {
                                    Spiral_builder::US41::US41_1
                                }
                            }
                        } else {
                            let v59: std::path::PathBuf = async_walkdir::DirEntry::path(&v0_1);
                            let v61: std::path::Display = v59.display();
                            let v64: std::string::String = format!("{}", v61);
                            if startsWith(
                                Spiral_builder::method26(fable_library_rust::String_::fromString(
                                    v64,
                                )),
                                string("fable-library-ts."),
                                false,
                            ) {
                                Spiral_builder::US41::US41_2
                            } else {
                                Spiral_builder::US41::US41_1
                            }
                        },
                    );
                    let v98: string = string("true; v94 });  // rust.fix_closure\'");
                    let v99: bool = true;
                    v94
                }); // rust.fix_closure';
                let v101 = __future_init;
                let v103: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Spiral_builder::US41> + Send>,
                > = v101;
                let v105: Spiral_builder::US41 = v103.await;
                let v115: async_walkdir::Filtering = Spiral_builder::method112(match &v105 {
                    Spiral_builder::US41::US41_0 => async_walkdir::Filtering::Ignore,
                    Spiral_builder::US41::US41_1 => async_walkdir::Filtering::IgnoreDir,
                    _ => async_walkdir::Filtering::Continue,
                });
                let v117: string = string("true; v115 });  // rust.fix_closure\'");
                let v118: bool = true;
                v115
            }); // rust.fix_closure';
            let v120 = __future_init;
            v120
        }
        pub fn closure131(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method114() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral_builder::closure131((), v))
        }
        pub fn closure132(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral_builder::US42 {
            Spiral_builder::US42::US42_0(v0_1)
        }
        pub fn closure133(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US42 {
            Spiral_builder::US42::US42_1(v0_1)
        }
        pub fn closure135(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / stream_filter_map")
        }
        pub fn closure134(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v798: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v613: string = Spiral_builder::method8();
                        let v625: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v636: () = {
                            Spiral_builder::closure10(
                                v625.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v640: Array<string> = split(v625.l0.get().clone(), v613, -1_i32, 0_i32);
                        let v643: string = v640[0_i32].clone();
                        let v647: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v658: () = {
                            Spiral_builder::closure10(
                                v647.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v668: Spiral_builder::US1 =
                            if startsWith(v647.l0.get().clone(), v643, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v668 {
                            Spiral_builder::US1::US1_0(v668_0_0) => {
                                Spiral_builder::US1::US1_0(match &v668 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v672: string = Spiral_builder::method8();
                                let v684: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v695: () = {
                                    Spiral_builder::closure10(
                                        v684.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v699: Array<string> =
                                    split(v684.l0.get().clone(), v672, -1_i32, 0_i32);
                                let v702: string = v699[0_i32].clone();
                                let v706: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v717: () = {
                                    Spiral_builder::closure10(
                                        v706.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v727: Spiral_builder::US1 =
                                    if startsWith(v706.l0.get().clone(), v702, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v727 {
                                    Spiral_builder::US1::US1_0(v727_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v727 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v731: string = Spiral_builder::method8();
                                        let v743: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v754: () = {
                                            Spiral_builder::closure10(
                                                v743.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v758: Array<string> =
                                            split(v743.l0.get().clone(), v731, -1_i32, 0_i32);
                                        let v761: string = v758[0_i32].clone();
                                        let v765: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v776: () = {
                                            Spiral_builder::closure10(
                                                v765.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v786: Spiral_builder::US1 =
                                            if startsWith(v765.l0.get().clone(), v761, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v786 {
                                            Spiral_builder::US1::US1_0(v786_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v786 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v807: string = padLeft(
                    toLower(match &v798 {
                        Spiral_builder::US1::US1_0(v798_0_0) => match &v798 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v823: &str = inline_colorization::color_bright_red;
                let v825: &str = &*v807;
                let v827: &str = inline_colorization::color_reset;
                let v829: string = string("format!(\"{v823}{v825}{v827}\")");
                let v830: std::string::String = format!("{v823}{v825}{v827}");
                let v832: string = fable_library_rust::String_::fromString(v830);
                let v873: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v875: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v882: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v891: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v900: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v905: std::string::String = format!("{:#?}", v0_1);
                let v935: () = {
                    Spiral_builder::closure10(
                        v875.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v905)),
                        (),
                    );
                    ()
                };
                let v944: () = {
                    Spiral_builder::closure10(v875.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v947: string = v875.l0.get().clone();
                let v986: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v832,
                            v873,
                            Spiral_builder::closure135((), ()),
                            v947
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v986.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v986)
            }
        }
        pub fn closure130(
            unitVar: (),
            v0_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v1_1 = Spiral_builder::method114();
            let v3: Result<async_walkdir::DirEntry, std::string::String> =
                v0_1.map_err(|x| v1_1(x));
            let v6: Spiral_builder::US42 = match &v3 {
                Err(v3_1_0) => Spiral_builder::closure133((), v3_1_0.clone()),
                Ok(v3_0_0) => Spiral_builder::closure132((), v3_0_0.clone()),
            };
            let v1170: Spiral_builder::US43 = match &v6 {
                Spiral_builder::US42::US42_0(v6_0_0) => {
                    let v9: std::path::PathBuf = async_walkdir::DirEntry::path(&v6_0_0.clone());
                    let v11: std::path::Display = v9.display();
                    let v14: std::string::String = format!("{}", v11);
                    let v34: string = fable_library_rust::String_::fromString(v14);
                    let v36: string = sprintf!("fable-library-{}\\.(?<a>[\\d.]+)$", string("ts"));
                    let v38: Result<regex::Regex, regex::Error> = regex::Regex::new(&v36);
                    let v40: regex::Regex = v38.unwrap();
                    let v42: &str = &*v34.clone();
                    let v44: std::string::String = String::from(v42);
                    let v46: bool = true;
                    let _capture_move = (move || {
                        //;
                        let v48: Box<std::string::String> = Box::new(v44);
                        let v50: &'static mut std::string::String = Box::leak(v48);
                        let v52: regex::CaptureMatches = v40.captures_iter(v50);
                        let v54: bool = true;
                        let _regex_captures: Vec<_> = v52
                            .map(|x| {
                                //;
                                let v56: regex::Captures<'static> = x;
                                let v58: Box<regex::Captures<'static>> = Box::new(v56);
                                let v60: &'static mut regex::Captures<'static> = Box::leak(v58);
                                let v62: regex::CaptureNames = v40.capture_names();
                                let v64: bool = true;
                                let _regex_captures: std::collections::HashMap<_, _> = v62
                                    .map(|x| {
                                        //;
                                        let v66: string = x.unwrap_or("").to_string().into();
                                        let v68: string = v66.clone().clone();
                                        let v70: string = v60
                                            .name(&v66)
                                            .map(|x| x.as_str())
                                            .unwrap_or("")
                                            .to_string()
                                            .into();
                                        let v73: bool = true;
                                        LrcPtr::new((v68, v70))
                                    })
                                    .map(|x| {
                                        std::sync::Arc::try_unwrap(x)
                                            .unwrap_or_else(|x| (*x).clone())
                                    })
                                    .collect();
                                let v75: std::collections::HashMap<string, string> =
                                    _regex_captures;
                                let v77: bool = true;
                                v75
                            })
                            .collect::<Vec<_>>();
                        let v79: Vec<std::collections::HashMap<string, string>> = _regex_captures;
                        let v81: bool = true;
                        v79
                    })();
                    let v83: Vec<std::collections::HashMap<string, string>> = _capture_move;
                    let v86: Option<std::collections::HashMap<string, string>> =
                        tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v83));
                    let _v87: LrcPtr<MutCell<Option<Spiral_builder::US37>>> =
                        refCell(None::<Spiral_builder::US37>);
                    let v92: () = {
                        Spiral_builder::closure110(
                            v86,
                            Func1::new({
                                let _v87 = _v87.clone();
                                move |v_2: Option<Spiral_builder::US37>| {
                                    Spiral_builder::closure109(_v87.clone(), v_2)
                                }
                            }),
                            (),
                        );
                        ()
                    };
                    let v107: Spiral_builder::US37 =
                        defaultValue(Spiral_builder::US37::US37_1, _v87.get().clone());
                    let v142: Spiral_builder::US38 = match &v107 {
                        Spiral_builder::US37::US37_0(v107_0_0) => {
                            let v112: string = Spiral_builder::method107();
                            let v114: Option<string> = std::collections::HashMap::get(
                                &match &v107 {
                                    Spiral_builder::US37::US37_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                &v112,
                            )
                            .map(|x| x)
                            .cloned();
                            let _v115: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                                refCell(None::<Spiral_builder::US1>);
                            let v120: () = {
                                Spiral_builder::closure4(
                                    v114,
                                    Func1::new({
                                        let _v115 = _v115.clone();
                                        move |v_3: Option<Spiral_builder::US1>| {
                                            Spiral_builder::closure3(_v115.clone(), v_3)
                                        }
                                    }),
                                    (),
                                );
                                ()
                            };
                            Spiral_builder::US38::US38_0(defaultValue(
                                Spiral_builder::US1::US1_1,
                                _v115.get().clone(),
                            ))
                        }
                        _ => Spiral_builder::US38::US38_1,
                    };
                    let v149: Spiral_builder::US1 =
                        if let Spiral_builder::US38::US38_0(v142_0_0) = &v142 {
                            let v143: Spiral_builder::US1 = match &v142 {
                                Spiral_builder::US38::US38_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Spiral_builder::US1::US1_0(v143_0_0) = &v143 {
                                Spiral_builder::US1::US1_0(match &v143 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                Spiral_builder::US1::US1_1
                            }
                        } else {
                            Spiral_builder::US1::US1_1
                        };
                    match &v149 {
                        Spiral_builder::US1::US1_0(v149_0_0) => Spiral_builder::US43::US43_0(
                            v34,
                            match &v149 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                        _ => Spiral_builder::US43::US43_1,
                    }
                }
                Spiral_builder::US42::US42_1(v6_1_0) => {
                    let v158: () = {
                        Spiral_builder::closure134(v6_1_0.clone(), ());
                        ()
                    };
                    Spiral_builder::US43::US43_1
                }
            };
            match &v1170 {
                Spiral_builder::US43::US43_0(v1170_0_0, v1170_0_1) => Some((
                    match &v1170 {
                        Spiral_builder::US43::US43_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    match &v1170 {
                        Spiral_builder::US43::US43_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    },
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method113(
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new(
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral_builder::closure130((), v)
                },
            )
        }
        pub fn closure136(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure137(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US43>>>,
            v1_1: Option<Spiral_builder::US43>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US43>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure138(
            v0_1: Option<(string, string)>,
            v1_1: Func1<
                Option<Spiral_builder::US43>,
                LrcPtr<MutCell<Option<Spiral_builder::US43>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US43>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US43>,
                    Some(v0_1_0_0) => {
                        let x: (string, string) = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US43::US43_0(x.0.clone(), x.1.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn closure140(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure139(v0_1: Spiral_builder::US43, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v615: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v624: string = padLeft(
                    toLower(match &v615 {
                        Spiral_builder::US1::US1_0(v615_0_0) => match &v615 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v640: &str = inline_colorization::color_bright_blue;
                let v642: &str = &*v624;
                let v644: &str = inline_colorization::color_reset;
                let v646: string = string("format!(\"{v640}{v642}{v644}\")");
                let v647: std::string::String = format!("{v640}{v642}{v644}");
                let v649: string = fable_library_rust::String_::fromString(v647);
                let v690: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v692: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v699: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v708: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string("version")), ());
                    ()
                };
                let v717: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v728: () = {
                    Spiral_builder::closure10(
                        v692.clone(),
                        sprintf!("{}", sprintf!("{:?}", v0_1)),
                        (),
                    );
                    ()
                };
                let v737: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v740: string = v692.l0.get().clone();
                let v779: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v649,
                            v690,
                            Spiral_builder::closure140((), ()),
                            v740
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v779.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v779)
            }
        }
        pub fn closure142(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure141(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v799: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v614: string = Spiral_builder::method8();
                        let v626: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v637: () = {
                            Spiral_builder::closure10(
                                v626.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v641: Array<string> = split(v626.l0.get().clone(), v614, -1_i32, 0_i32);
                        let v644: string = v641[0_i32].clone();
                        let v648: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v659: () = {
                            Spiral_builder::closure10(
                                v648.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v669: Spiral_builder::US1 =
                            if startsWith(v648.l0.get().clone(), v644, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v669 {
                            Spiral_builder::US1::US1_0(v669_0_0) => {
                                Spiral_builder::US1::US1_0(match &v669 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v673: string = Spiral_builder::method8();
                                let v685: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v696: () = {
                                    Spiral_builder::closure10(
                                        v685.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v700: Array<string> =
                                    split(v685.l0.get().clone(), v673, -1_i32, 0_i32);
                                let v703: string = v700[0_i32].clone();
                                let v707: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v718: () = {
                                    Spiral_builder::closure10(
                                        v707.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v728: Spiral_builder::US1 =
                                    if startsWith(v707.l0.get().clone(), v703, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v728 {
                                    Spiral_builder::US1::US1_0(v728_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v728 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v732: string = Spiral_builder::method8();
                                        let v744: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v755: () = {
                                            Spiral_builder::closure10(
                                                v744.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v759: Array<string> =
                                            split(v744.l0.get().clone(), v732, -1_i32, 0_i32);
                                        let v762: string = v759[0_i32].clone();
                                        let v766: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v777: () = {
                                            Spiral_builder::closure10(
                                                v766.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v787: Spiral_builder::US1 =
                                            if startsWith(v766.l0.get().clone(), v762, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v787 {
                                            Spiral_builder::US1::US1_0(v787_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v787 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v808: string = padLeft(
                    toLower(match &v799 {
                        Spiral_builder::US1::US1_0(v799_0_0) => match &v799 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v824: &str = inline_colorization::color_bright_red;
                let v826: &str = &*v808;
                let v828: &str = inline_colorization::color_reset;
                let v830: string = string("format!(\"{v824}{v826}{v828}\")");
                let v831: std::string::String = format!("{v824}{v826}{v828}");
                let v833: string = fable_library_rust::String_::fromString(v831);
                let v874: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v876: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v883: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v892: () = {
                    Spiral_builder::closure10(
                        v876.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v901: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v909: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v918: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v927: () = {
                    Spiral_builder::closure10(
                        v876.clone(),
                        sprintf!("{}", string("dotnet_fable_result")),
                        (),
                    );
                    ()
                };
                let v935: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v943: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v952: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v955: string = v876.l0.get().clone();
                let v994: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v833,
                            v874,
                            Spiral_builder::closure142((), ()),
                            v955
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v994.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v994)
            }
        }
        pub fn closure144(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure143(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v615: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v624: string = padLeft(
                    toLower(match &v615 {
                        Spiral_builder::US1::US1_0(v615_0_0) => match &v615 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v640: &str = inline_colorization::color_bright_blue;
                let v642: &str = &*v624;
                let v644: &str = inline_colorization::color_reset;
                let v646: string = string("format!(\"{v640}{v642}{v644}\")");
                let v647: std::string::String = format!("{v640}{v642}{v644}");
                let v649: string = fable_library_rust::String_::fromString(v647);
                let v690: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v692: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v699: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v708: () = {
                    Spiral_builder::closure10(
                        v692.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v717: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v725: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v734: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v737: string = v692.l0.get().clone();
                let v776: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v649,
                            v690,
                            Spiral_builder::closure144((), ()),
                            v737
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v776.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v776)
            }
        }
        pub fn method115(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: LrcPtr<Spiral_builder::UH5>,
        ) -> LrcPtr<Spiral_builder::UH5> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral_builder::UH5::UH5_1(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        Spiral_builder::method115(
                            match v0_1.as_ref() {
                                Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method116(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    Spiral_builder::method116(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure145(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure148(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / Exception")
        }
        pub fn closure147(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v908: std::string::String = format!("{:#?}", v3);
                let v938: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v908)),
                        (),
                    );
                    ()
                };
                let v947: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v956: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v964: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v972: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v980: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v989: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v997: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1005: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v1013: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1022: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v1030: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1038: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v1047: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1050: string = v878.l0.get().clone();
                let v1089: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure148((), ()),
                            v1050
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1089.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1089)
            }
        }
        pub fn closure146(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure147(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn closure150(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / error")
        }
        pub fn closure149(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v911: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v920: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v929: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v937: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v945: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v953: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v962: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v970: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v978: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v986: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v995: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v1003: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1011: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v1020: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1023: string = v878.l0.get().clone();
                let v1062: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure150((), ()),
                            v1023
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1062.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1062)
            }
        }
        pub fn closure152(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python")
        }
        pub fn closure151(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v799: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v614: string = Spiral_builder::method8();
                        let v626: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v637: () = {
                            Spiral_builder::closure10(
                                v626.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v641: Array<string> = split(v626.l0.get().clone(), v614, -1_i32, 0_i32);
                        let v644: string = v641[0_i32].clone();
                        let v648: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v659: () = {
                            Spiral_builder::closure10(
                                v648.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v669: Spiral_builder::US1 =
                            if startsWith(v648.l0.get().clone(), v644, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v669 {
                            Spiral_builder::US1::US1_0(v669_0_0) => {
                                Spiral_builder::US1::US1_0(match &v669 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v673: string = Spiral_builder::method8();
                                let v685: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v696: () = {
                                    Spiral_builder::closure10(
                                        v685.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v700: Array<string> =
                                    split(v685.l0.get().clone(), v673, -1_i32, 0_i32);
                                let v703: string = v700[0_i32].clone();
                                let v707: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v718: () = {
                                    Spiral_builder::closure10(
                                        v707.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v728: Spiral_builder::US1 =
                                    if startsWith(v707.l0.get().clone(), v703, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v728 {
                                    Spiral_builder::US1::US1_0(v728_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v728 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v732: string = Spiral_builder::method8();
                                        let v744: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v755: () = {
                                            Spiral_builder::closure10(
                                                v744.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v759: Array<string> =
                                            split(v744.l0.get().clone(), v732, -1_i32, 0_i32);
                                        let v762: string = v759[0_i32].clone();
                                        let v766: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v777: () = {
                                            Spiral_builder::closure10(
                                                v766.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v787: Spiral_builder::US1 =
                                            if startsWith(v766.l0.get().clone(), v762, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v787 {
                                            Spiral_builder::US1::US1_0(v787_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v787 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v808: string = padLeft(
                    toLower(match &v799 {
                        Spiral_builder::US1::US1_0(v799_0_0) => match &v799 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v824: &str = inline_colorization::color_bright_red;
                let v826: &str = &*v808;
                let v828: &str = inline_colorization::color_reset;
                let v830: string = string("format!(\"{v824}{v826}{v828}\")");
                let v831: std::string::String = format!("{v824}{v826}{v828}");
                let v833: string = fable_library_rust::String_::fromString(v831);
                let v874: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v876: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v883: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v892: () = {
                    Spiral_builder::closure10(
                        v876.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v901: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v909: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v918: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v927: () = {
                    Spiral_builder::closure10(
                        v876.clone(),
                        sprintf!("{}", string("dotnet_fable_result")),
                        (),
                    );
                    ()
                };
                let v935: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v943: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v952: () = {
                    Spiral_builder::closure10(v876.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v955: string = v876.l0.get().clone();
                let v994: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v833,
                            v874,
                            Spiral_builder::closure152((), ()),
                            v955
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v994.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v994)
            }
        }
        pub fn closure154(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python")
        }
        pub fn closure153(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v554: string = Spiral_builder::method8();
                let v566: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v577: () = {
                    Spiral_builder::closure10(
                        v566.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v581: Array<string> = split(v566.l0.get().clone(), v554, -1_i32, 0_i32);
                let v584: string = v581[0_i32].clone();
                let v588: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v599: () = {
                    Spiral_builder::closure10(
                        v588.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v609: Spiral_builder::US1 = if startsWith(v588.l0.get().clone(), v584, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v615: Spiral_builder::US1 = match &v609 {
                    Spiral_builder::US1::US1_0(v609_0_0) => {
                        Spiral_builder::US1::US1_0(match &v609 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v624: string = padLeft(
                    toLower(match &v615 {
                        Spiral_builder::US1::US1_0(v615_0_0) => match &v615 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v640: &str = inline_colorization::color_bright_blue;
                let v642: &str = &*v624;
                let v644: &str = inline_colorization::color_reset;
                let v646: string = string("format!(\"{v640}{v642}{v644}\")");
                let v647: std::string::String = format!("{v640}{v642}{v644}");
                let v649: string = fable_library_rust::String_::fromString(v647);
                let v690: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v692: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v699: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v708: () = {
                    Spiral_builder::closure10(
                        v692.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v717: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v725: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v734: () = {
                    Spiral_builder::closure10(v692.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v737: string = v692.l0.get().clone();
                let v776: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v649,
                            v690,
                            Spiral_builder::closure154((), ()),
                            v737
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v776.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v776)
            }
        }
        pub fn closure155(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure158(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python / Exception")
        }
        pub fn closure157(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v908: std::string::String = format!("{:#?}", v3);
                let v938: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v908)),
                        (),
                    );
                    ()
                };
                let v947: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v956: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v964: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v972: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v980: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v989: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v997: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1005: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v1013: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1022: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v1030: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1038: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v1047: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1050: string = v878.l0.get().clone();
                let v1089: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure158((), ()),
                            v1050
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1089.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1089)
            }
        }
        pub fn closure156(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure157(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn closure160(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python / error")
        }
        pub fn closure159(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v557: string = Spiral_builder::method8();
                let v569: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v580: () = {
                    Spiral_builder::closure10(
                        v569.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v584: Array<string> = split(v569.l0.get().clone(), v557, -1_i32, 0_i32);
                let v587: string = v584[0_i32].clone();
                let v591: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v602: () = {
                    Spiral_builder::closure10(
                        v591.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                        (),
                    );
                    ()
                };
                let v612: Spiral_builder::US1 = if startsWith(v591.l0.get().clone(), v587, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v801: Spiral_builder::US1 = match &v612 {
                    Spiral_builder::US1::US1_0(v612_0_0) => {
                        Spiral_builder::US1::US1_0(match &v612 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => {
                        let v616: string = Spiral_builder::method8();
                        let v628: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v639: () = {
                            Spiral_builder::closure10(
                                v628.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                                (),
                            );
                            ()
                        };
                        let v643: Array<string> = split(v628.l0.get().clone(), v616, -1_i32, 0_i32);
                        let v646: string = v643[0_i32].clone();
                        let v650: LrcPtr<Spiral_builder::Mut4> =
                            LrcPtr::new(Spiral_builder::Mut4 {
                                l0: MutCell::new(Spiral_builder::method10()),
                            });
                        let v661: () = {
                            Spiral_builder::closure10(
                                v650.clone(),
                                sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_4)),
                                (),
                            );
                            ()
                        };
                        let v671: Spiral_builder::US1 =
                            if startsWith(v650.l0.get().clone(), v646, false) {
                                Spiral_builder::US1::US1_0(string("Debug"))
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v671 {
                            Spiral_builder::US1::US1_0(v671_0_0) => {
                                Spiral_builder::US1::US1_0(match &v671 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v675: string = Spiral_builder::method8();
                                let v687: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v698: () = {
                                    Spiral_builder::closure10(
                                        v687.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_2)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v702: Array<string> =
                                    split(v687.l0.get().clone(), v675, -1_i32, 0_i32);
                                let v705: string = v702[0_i32].clone();
                                let v709: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(Spiral_builder::method10()),
                                    });
                                let v720: () = {
                                    Spiral_builder::closure10(
                                        v709.clone(),
                                        sprintf!(
                                            "{}",
                                            sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                        ),
                                        (),
                                    );
                                    ()
                                };
                                let v730: Spiral_builder::US1 =
                                    if startsWith(v709.l0.get().clone(), v705, false) {
                                        Spiral_builder::US1::US1_0(string("Info"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v730 {
                                    Spiral_builder::US1::US1_0(v730_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v730 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v734: string = Spiral_builder::method8();
                                        let v746: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v757: () = {
                                            Spiral_builder::closure10(
                                                v746.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_3)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v761: Array<string> =
                                            split(v746.l0.get().clone(), v734, -1_i32, 0_i32);
                                        let v764: string = v761[0_i32].clone();
                                        let v768: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v779: () = {
                                            Spiral_builder::closure10(
                                                v768.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US0::US0_4)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v789: Spiral_builder::US1 =
                                            if startsWith(v768.l0.get().clone(), v764, false) {
                                                Spiral_builder::US1::US1_0(string("Warning"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        match &v789 {
                                            Spiral_builder::US1::US1_0(v789_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v789 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("Critical")),
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let v810: string = padLeft(
                    toLower(match &v801 {
                        Spiral_builder::US1::US1_0(v801_0_0) => match &v801 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v826: &str = inline_colorization::color_bright_red;
                let v828: &str = &*v810;
                let v830: &str = inline_colorization::color_reset;
                let v832: string = string("format!(\"{v826}{v828}{v830}\")");
                let v833: std::string::String = format!("{v826}{v828}{v830}");
                let v835: string = fable_library_rust::String_::fromString(v833);
                let v876: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v878: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v885: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v894: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v903: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v911: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v920: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v929: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v937: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v945: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v953: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v962: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v970: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v978: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v986: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v995: () = {
                    Spiral_builder::closure10(
                        v878.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v1003: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1011: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v1020: () = {
                    Spiral_builder::closure10(v878.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1023: string = v878.l0.get().clone();
                let v1062: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v835,
                            v876,
                            Spiral_builder::closure160((), ()),
                            v1023
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1062.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1062)
            }
        }
        pub fn closure162(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / invalid subcommand")
        }
        pub fn closure161(v0_1: clap::ArgMatches, v1_1: std::string::String, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v555: string = Spiral_builder::method8();
                let v567: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v578: () = {
                    Spiral_builder::closure10(
                        v567.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_0)),
                        (),
                    );
                    ()
                };
                let v582: Array<string> = split(v567.l0.get().clone(), v555, -1_i32, 0_i32);
                let v585: string = v582[0_i32].clone();
                let v589: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v600: () = {
                    Spiral_builder::closure10(
                        v589.clone(),
                        sprintf!("{}", sprintf!("{:?}", Spiral_builder::US0::US0_1)),
                        (),
                    );
                    ()
                };
                let v610: Spiral_builder::US1 = if startsWith(v589.l0.get().clone(), v585, false) {
                    Spiral_builder::US1::US1_0(string("Verbose"))
                } else {
                    Spiral_builder::US1::US1_1
                };
                let v616: Spiral_builder::US1 = match &v610 {
                    Spiral_builder::US1::US1_0(v610_0_0) => {
                        Spiral_builder::US1::US1_0(match &v610 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        })
                    }
                    _ => Spiral_builder::US1::US1_0(string("Debug")),
                };
                let v625: string = padLeft(
                    toLower(match &v616 {
                        Spiral_builder::US1::US1_0(v616_0_0) => match &v616 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => panic!("{}", string("Option does not have a value."),),
                    }),
                    7_i32,
                    ' ',
                );
                let v641: &str = inline_colorization::color_bright_blue;
                let v643: &str = &*v625;
                let v645: &str = inline_colorization::color_reset;
                let v647: string = string("format!(\"{v641}{v643}{v645}\")");
                let v648: std::string::String = format!("{v641}{v643}{v645}");
                let v650: string = fable_library_rust::String_::fromString(v648);
                let v691: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v693: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method10()),
                });
                let v700: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v709: () = {
                    Spiral_builder::closure10(
                        v693.clone(),
                        sprintf!("{}", string("subcommand")),
                        (),
                    );
                    ()
                };
                let v718: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v723: std::string::String = format!("{:#?}", v1_1);
                let v753: () = {
                    Spiral_builder::closure10(
                        v693.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v723)),
                        (),
                    );
                    ()
                };
                let v762: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v771: () = {
                    Spiral_builder::closure10(
                        v693.clone(),
                        sprintf!("{}", string("arg_matches")),
                        (),
                    );
                    ()
                };
                let v779: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v784: std::string::String = format!("{:#?}", v0_1);
                let v814: () = {
                    Spiral_builder::closure10(
                        v693.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v784)),
                        (),
                    );
                    ()
                };
                let v823: () = {
                    Spiral_builder::closure10(v693.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v826: string = v693.l0.get().clone();
                let v865: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v650,
                            v691,
                            Spiral_builder::closure162((), ()),
                            v826
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v865.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v865)
            }
        }
        pub fn closure163(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: &str = &*_arg.0.clone();
            let v5: std::string::String = String::from(v3);
            let v7: &str = &*_arg.1.clone();
            LrcPtr::new((v5, String::from(v7)))
        }
        pub fn closure164(unitVar: (), v0_1: serde_json::Error) -> string {
            let v3: std::string::String = format!("{}", v0_1);
            fable_library_rust::String_::fromString(v3)
        }
        pub fn method117() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral_builder::closure164((), v))
        }
        pub fn method118(v0_1: Result<string, string>) -> Result<string, string> {
            v0_1
        }
        pub fn method12(
            v0_1: Spiral_builder::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let v3: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v6: Option<(std::string::String, clap::ArgMatches)> =
                    clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                        (
                            Func1::new(move |v: &str| Spiral_builder::closure14((), v))(a),
                            b.clone(),
                        )
                    });
                let _v7: LrcPtr<MutCell<Option<Spiral_builder::US4>>> =
                    refCell(None::<Spiral_builder::US4>);
                let v12: () = {
                    Spiral_builder::closure16(
                        v6,
                        Func1::new({
                            let _v7 = _v7.clone();
                            move |v_1: Option<Spiral_builder::US4>| {
                                Spiral_builder::closure15(_v7.clone(), v_1)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v29: Spiral_builder::US4 =
                    defaultValue(Spiral_builder::US4::US4_1, _v7.get().clone());
                let v29137: Array<(string, string)> = if let Spiral_builder::US4::US4_0(
                    v29_0_0,
                    v29_0_1,
                ) = &v29
                {
                    let v34: clap::ArgMatches = match &v29 {
                        Spiral_builder::US4::US4_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v33: std::string::String = match &v29 {
                        Spiral_builder::US4::US4_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    };
                    if fable_library_rust::String_::fromString(v33.clone()) == string("cuda") {
                        let v38: string = Spiral_builder::method13();
                        let v40: &str = &*v38;
                        let v42: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v34.clone(), v40).cloned();
                        let _v43: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                            refCell(None::<Spiral_builder::US5>);
                        let v48: () = {
                            Spiral_builder::closure18(
                                v42,
                                Func1::new({
                                    let _v43 = _v43.clone();
                                    move |v_2: Option<Spiral_builder::US5>| {
                                        Spiral_builder::closure17(_v43.clone(), v_2)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v63: Spiral_builder::US5 =
                            defaultValue(Spiral_builder::US5::US5_1, _v43.get().clone());
                        let v70: std::string::String = match &v63 {
                            Spiral_builder::US5::US5_0(v63_0_0) => match &v63 {
                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        };
                        let v72: string = fable_library_rust::String_::fromString(v70);
                        let v73: string = Spiral_builder::method14();
                        let v75: &str = &*v73;
                        let v77: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v34.clone(), v75).cloned();
                        let _v78: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                            refCell(None::<Spiral_builder::US5>);
                        let v83: () = {
                            Spiral_builder::closure18(
                                v77,
                                Func1::new({
                                    let _v78 = _v78.clone();
                                    move |v_3: Option<Spiral_builder::US5>| {
                                        Spiral_builder::closure17(_v78.clone(), v_3)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v98: Spiral_builder::US5 =
                            defaultValue(Spiral_builder::US5::US5_1, _v78.get().clone());
                        let v127: Spiral_builder::US6 = match &v98 {
                            Spiral_builder::US5::US5_0(v98_0_0) => {
                                let v104: string =
                                    fable_library_rust::String_::fromString(match &v98 {
                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                let v109: Spiral_builder::US7 = if string("Pip") == v104.clone() {
                                    Spiral_builder::US7::US7_0(Spiral_builder::US8::US8_0)
                                } else {
                                    Spiral_builder::US7::US7_1
                                };
                                Spiral_builder::US6::US6_0(match &v109 {
                                    Spiral_builder::US7::US7_0(v109_0_0) => {
                                        Spiral_builder::US7::US7_0(match &v109 {
                                            Spiral_builder::US7::US7_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v116: Spiral_builder::US7 = if string("Poetry") == v104
                                        {
                                            Spiral_builder::US7::US7_0(Spiral_builder::US8::US8_1)
                                        } else {
                                            Spiral_builder::US7::US7_1
                                        };
                                        match &v116 {
                                            Spiral_builder::US7::US7_0(v116_0_0) => {
                                                Spiral_builder::US7::US7_0(match &v116 {
                                                    Spiral_builder::US7::US7_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US7::US7_1,
                                        }
                                    }
                                })
                            }
                            _ => Spiral_builder::US6::US6_1,
                        };
                        let v134: Spiral_builder::US7 =
                            if let Spiral_builder::US6::US6_0(v127_0_0) = &v127 {
                                let v128: Spiral_builder::US7 = match &v127 {
                                    Spiral_builder::US6::US6_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US7::US7_0(v128_0_0) = &v128 {
                                    Spiral_builder::US7::US7_0(match &v128 {
                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US7::US7_1
                                }
                            } else {
                                Spiral_builder::US7::US7_1
                            };
                        let v138: Spiral_builder::US8 = match &v134 {
                            Spiral_builder::US7::US7_0(v134_0_0) => match &v134 {
                                Spiral_builder::US7::US7_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => Spiral_builder::US8::US8_0,
                        };
                        let v139: string = Spiral_builder::method15();
                        let v141: &str = &*v139;
                        let v143: Option<Vec<std::string::String>> =
                            clap::ArgMatches::get_many(&v34.clone(), v141)
                                .map(|x| x.cloned().into_iter().collect());
                        let _v144: LrcPtr<MutCell<Option<Spiral_builder::US9>>> =
                            refCell(None::<Spiral_builder::US9>);
                        let v149: () = {
                            Spiral_builder::closure20(
                                v143,
                                Func1::new({
                                    let _v144 = _v144.clone();
                                    move |v_4: Option<Spiral_builder::US9>| {
                                        Spiral_builder::closure19(_v144.clone(), v_4)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v164: Spiral_builder::US9 =
                            defaultValue(Spiral_builder::US9::US9_1, _v144.get().clone());
                        let v170: Vec<std::string::String> =
                            new_empty::<std::string::String>().to_vec();
                        let v173: Vec<std::string::String> = match &v164 {
                            Spiral_builder::US9::US9_0(v164_0_0) => match &v164 {
                                Spiral_builder::US9::US9_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => v170,
                        };
                        let v177: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v72.clone());
                        let v200: Vec<u8> = Spiral_builder::method16(v177.unwrap());
                        let v202: Result<std::string::String, std::string::FromUtf8Error> =
                            std::string::String::from_utf8(v200);
                        let v204: std::string::String = v202.unwrap();
                        let v206: string = fable_library_rust::String_::fromString(v204);
                        let v229: Spiral_builder::US12 = Spiral_builder::method20(
                            Spiral_builder::method17(string("polyglot"), string(".devcontainer")),
                            string(
                                "/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder",
                            ),
                        );
                        let v1159: Spiral_builder::US1 = match &v229 {
                            Spiral_builder::US12::US12_0(v229_0_0) => {
                                Spiral_builder::US1::US1_0(v229_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v229_1_0) => {
                                let v235: () = {
                                    Spiral_builder::closure22(v229_1_0.clone(), ());
                                    ()
                                };
                                Spiral_builder::US1::US1_1
                            }
                        };
                        let v2096: Spiral_builder::US1 = match &v1159 {
                            Spiral_builder::US1::US1_0(v1159_0_0) => {
                                Spiral_builder::US1::US1_0(match &v1159 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v1162: string = Spiral_builder::method25();
                                let v1164: Spiral_builder::US12 = Spiral_builder::method20(
                                    Spiral_builder::method17(
                                        string("polyglot"),
                                        string(".devcontainer"),
                                    ),
                                    v1162,
                                );
                                match &v1164 {
                                    Spiral_builder::US12::US12_0(v1164_0_0) => {
                                        Spiral_builder::US1::US1_0(v1164_0_0.clone())
                                    }
                                    Spiral_builder::US12::US12_1(v1164_1_0) => {
                                        let v1170: () = {
                                            Spiral_builder::closure22(v1164_1_0.clone(), ());
                                            ()
                                        };
                                        Spiral_builder::US1::US1_1
                                    }
                                }
                            }
                        };
                        let v2101: string = Spiral_builder::method17(
                            match &v2096 {
                                Spiral_builder::US1::US1_0(v2096_0_0) => match &v2096 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                            string("polyglot"),
                        );
                        let v2104: string = toLower(Spiral_builder::method25());
                        let v2108: string = toLower(v2101);
                        let v2116: Spiral_builder::US12 = if startsWith(v2104, v2108.clone(), false)
                        {
                            Spiral_builder::US12::US12_1(v2108.clone())
                        } else {
                            Spiral_builder::US12::US12_0(v2108)
                        };
                        let v2122: Result<string, string> = match &v2116 {
                            Spiral_builder::US12::US12_0(v2116_0_0) => {
                                Ok::<string, string>(v2116_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v2116_1_0) => {
                                Err::<string, string>(v2116_1_0.clone())
                            }
                        };
                        let v2124: bool = true;
                        let _result_unwrap_or_else = v2122.unwrap_or_else(|x| {
                            //;
                            let v2126: string = x;
                            let v2128: bool = true;
                            v2126
                        });
                        let v2130: string = _result_unwrap_or_else;
                        let v2131: string = Spiral_builder::method26(v72.clone());
                        let v2137: string = match &v138 {
                            Spiral_builder::US8::US8_1 => {
                                Spiral_builder::method17(v2131.clone(), string("pyproject.toml"))
                            }
                            _ => {
                                Spiral_builder::method17(v2131.clone(), string("requirements.txt"))
                            }
                        };
                        let v2139: bool = true;
                        let _vec_map: Vec<_> = v173
                            .into_iter()
                            .map(|x| {
                                //;
                                let v2141: std::string::String = x;
                                let v2143: string = fable_library_rust::String_::fromString(v2141);
                                let v2156: string = if contains(v2143.clone(), string("=")) {
                                    v2143.clone()
                                } else {
                                    if endsWith(v2143.clone(), string("]"), false) {
                                        sprintf!(
                                            "{}}}",
                                            replace(
                                                v2143.clone(),
                                                string("["),
                                                string("={version=\'*\',features=[")
                                            )
                                        )
                                    } else {
                                        sprintf!("{}=\'*\'", v2143)
                                    }
                                };
                                let v2158: bool = true;
                                v2156
                            })
                            .collect::<Vec<_>>();
                        let v2160: Vec<string> = _vec_map;
                        let v2162: Array<string> =
                            fable_library_rust::NativeArray_::array_from(v2160);
                        let v2169: string = join(
                            string("\n"),
                            toArray_1(delay(Func0::new({
                                let v2162 = v2162.clone();
                                move || {
                                    map(
                                        Func1::new({
                                            let v2162 = v2162.clone();
                                            move |i: i32| v2162[i].clone()
                                        }),
                                        rangeNumeric(0_i32, 1_i32, count_2(v2162.clone()) - 1_i32),
                                    )
                                }
                            }))),
                        );
                        let patternInput: (i32, string) = if v2169.clone() == string("") {
                            (0_i32, string(""))
                        } else {
                            Spiral_builder::method27(v2137,
                                                         match &v138 {
                                                             Spiral_builder::US8::US8_1
                                                             =>
                                                             append(append(append(append(append(append(append(append(append(string("[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n"),
                                                                                                                            sprintf!("{}",
                                                                                                                                     v2169.clone())),
                                                                                                                     string("\n")),
                                                                                                              string("")),
                                                                                                       string("\n")),
                                                                                                string("[build-system]")),
                                                                                         string("\n")),
                                                                                  string("requires = [\"poetry-core\"]")),
                                                                           string("\n")),
                                                                    string("build-backend = \"poetry.core.masonry.api\"")),
                                                             _ =>
                                                             v2169.clone(),
                                                         });
                            Spiral_builder::method42(
                                match &v138 {
                                    Spiral_builder::US8::US8_1 => string("poetry install"),
                                    _ => string("pip install -r requirements.txt"),
                                },
                                None::<CancellationToken>,
                                new_empty::<(string, string)>(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v2131.clone()),
                            )
                        };
                        let v2228: i32 = patternInput.0.clone();
                        let patternInput_4: (
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                        ) = if v2228 != 0_i32 {
                            let v2235: () = {
                                Spiral_builder::closure83(
                                    v138.clone(),
                                    v72.clone(),
                                    patternInput.1.clone(),
                                    v2228,
                                    (),
                                );
                                ()
                            };
                            (
                                Spiral_builder::US1::US1_0(string("py")),
                                Spiral_builder::US1::US1_1,
                                Spiral_builder::US1::US1_1,
                            )
                        } else {
                            let v3328: string = match &v138 {
                                Spiral_builder::US8::US8_1 => {
                                    sprintf!("poetry run python \"{}\"", v72.clone())
                                }
                                _ => sprintf!("python \"{}\"", v72.clone()),
                            };
                            let v3331: Array<(string, string)> =
                                new_array(&[(string("TRACE_LEVEL"), string("Verbose"))]);
                            let patternInput_1: (i32, string) = Spiral_builder::method42(
                                v3328.clone(),
                                None::<CancellationToken>,
                                v3331.clone(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v2131.clone()),
                            );
                            let v3342: string = patternInput_1.1.clone();
                            let v3341: i32 = patternInput_1.0.clone();
                            let v3343: i32 = count_2(v3331.clone());
                            let v3344: Array<string> = new_init(&string(""), v3343);
                            let v3345: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method45(v3343, v3345.clone()) {
                                let v3347: i32 = v3345.l0.get().clone();
                                let patternInput_2: (string, string) = v3331[v3347].clone();
                                let v3350: string = sprintf!(
                                    "$env:{}=\'\'{}\'\'",
                                    patternInput_2.0.clone(),
                                    patternInput_2.1.clone()
                                );
                                v3344.get_mut()[v3347 as usize] = v3350;
                                {
                                    let v3351: i32 = v3347 + 1_i32;
                                    v3345.l0.set(v3351);
                                    ()
                                }
                            }
                            {
                                let v3361: string = sprintf!(
                                    "pwsh -c \'{}; {}\'",
                                    join(string(";"), toArray_1(ofArray_1(v3344.clone()))),
                                    v3328
                                );
                                let patternInput_3: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if if v3341 == 0_i32 {
                                    true
                                } else {
                                    contains(v3342.clone(),
                                                        string("cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"))
                                } {
                                    let result: LrcPtr<MutCell<Spiral_builder::US1>> =
                                        refCell(Spiral_builder::US1::US1_1);
                                    try_catch(
                                        || {
                                            result.set(Spiral_builder::closure85(
                                                (),
                                                Spiral_builder::closure86(v3342.clone(), ()),
                                            ))
                                        },
                                        |ex: LrcPtr<Exception>| {
                                            result.set(Spiral_builder::closure87(
                                                v72.clone(),
                                                v3342.clone(),
                                                v3361.clone(),
                                                ex.clone(),
                                            ))
                                        },
                                    );
                                    {
                                        let v3372: Spiral_builder::US1 = result.get().clone();
                                        let v3382: Option<string> = match &v3372 {
                                            Spiral_builder::US1::US1_0(v3372_0_0) => {
                                                Some(match &v3372 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => None::<string>,
                                        };
                                        (
                                            Spiral_builder::US1::US1_0(string("py")),
                                            Spiral_builder::US1::US1_0(v206),
                                            Spiral_builder::US1::US1_0(v3382.unwrap()),
                                        )
                                    }
                                } else {
                                    let v3391: () = {
                                        Spiral_builder::closure90(
                                            v72.clone(),
                                            v3342,
                                            v3341,
                                            v3361,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral_builder::US1::US1_0(string("py")),
                                        Spiral_builder::US1::US1_1,
                                        Spiral_builder::US1::US1_1,
                                    )
                                };
                                (
                                    patternInput_3.0.clone(),
                                    patternInput_3.1.clone(),
                                    patternInput_3.2.clone(),
                                )
                            }
                        };
                        let v4482: Spiral_builder::US1 = patternInput_4.2.clone();
                        let v4481: Spiral_builder::US1 = patternInput_4.1.clone();
                        let v4480: Spiral_builder::US1 = patternInput_4.0.clone();
                        let v4498: Array<(string, string)> = new_array(&[
                            (
                                string("extension"),
                                match &v4480 {
                                    Spiral_builder::US1::US1_0(v4480_0_0) => match &v4480 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("code"),
                                match &v4481 {
                                    Spiral_builder::US1::US1_0(v4481_0_0) => match &v4481 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("output"),
                                match &v4482 {
                                    Spiral_builder::US1::US1_0(v4482_0_0) => match &v4482 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                        ]);
                        let v4500: Vec<(string, string)> = v4498.to_vec();
                        let v4503: Vec<LrcPtr<(std::string::String, std::string::String)>> = v4500
                            .into_iter()
                            .map(|x| {
                                Func1::new(move |arg10_0040_9: (string, string)| {
                                    Spiral_builder::closure92((), arg10_0040_9)
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v4504: string =
                            string("std::collections::BTreeMap::from_iter(v4503.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                        let v4505: std::collections::BTreeMap<
                            std::string::String,
                            std::string::String,
                        > = std::collections::BTreeMap::from_iter(
                            v4503
                                .iter()
                                .map(|x| x.as_ref())
                                .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                        );
                        let v4507: Result<std::string::String, serde_json::Error> =
                            serde_json::to_string(&v4505);
                        let v4509: std::string::String = v4507.unwrap();
                        new_array(&[(
                            string("command_result"),
                            fable_library_rust::String_::fromString(v4509),
                        )])
                    } else {
                        if fable_library_rust::String_::fromString(v33.clone()) == string("fable") {
                            let v4517: string = Spiral_builder::method76();
                            let v4519: &str = &*v4517;
                            let v4521: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v34.clone(), v4519).cloned();
                            let _v4522: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                refCell(None::<Spiral_builder::US5>);
                            let v4527: () = {
                                Spiral_builder::closure18(
                                    v4521,
                                    Func1::new({
                                        let _v4522 = _v4522.clone();
                                        move |v_7: Option<Spiral_builder::US5>| {
                                            Spiral_builder::closure17(_v4522.clone(), v_7)
                                        }
                                    }),
                                    (),
                                );
                                ()
                            };
                            let v4542: Spiral_builder::US5 =
                                defaultValue(Spiral_builder::US5::US5_1, _v4522.get().clone());
                            let v4549: std::string::String = match &v4542 {
                                Spiral_builder::US5::US5_0(v4542_0_0) => match &v4542 {
                                    Spiral_builder::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v4551: string = fable_library_rust::String_::fromString(v4549);
                            let v4552: string = Spiral_builder::method77();
                            let v4554: &str = &*v4552;
                            let v4556: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v34.clone(), v4554).cloned();
                            let _v4557: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                refCell(None::<Spiral_builder::US5>);
                            let v4562: () = {
                                Spiral_builder::closure18(
                                    v4556,
                                    Func1::new({
                                        let _v4557 = _v4557.clone();
                                        move |v_8: Option<Spiral_builder::US5>| {
                                            Spiral_builder::closure17(_v4557.clone(), v_8)
                                        }
                                    }),
                                    (),
                                );
                                ()
                            };
                            let v4577: Spiral_builder::US5 =
                                defaultValue(Spiral_builder::US5::US5_1, _v4557.get().clone());
                            let v4587: Spiral_builder::US1 = match &v4577 {
                                Spiral_builder::US5::US5_0(v4577_0_0) => {
                                    Spiral_builder::US1::US1_0(
                                        fable_library_rust::String_::fromString(match &v4577 {
                                            Spiral_builder::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }),
                                    )
                                }
                                _ => Spiral_builder::US1::US1_1,
                            };
                            new_array(&[(
                                string("command_result"),
                                match &v4587 {
                                    Spiral_builder::US1::US1_0(v4587_0_0) => {
                                        let v4589: clap::Command = Spiral_builder::method0();
                                        let v4591: Spiral_builder::US22 =
                                            Spiral_builder::method56(sprintf!(
                                                "_ {} --fs-path \"{}\"",
                                                match &v4587 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                },
                                                v4551
                                            ));
                                        let v4597: Array<string> = match &v4591 {
                                            Spiral_builder::US22::US22_0(v4591_0_0) => {
                                                v4591_0_0.clone()
                                            }
                                            Spiral_builder::US22::US22_1(v4591_1_0) => panic!(
                                                "{}",
                                                sprintf!(
                                                    "resultm.get / Result value was Error: {}",
                                                    v4591_1_0.clone()
                                                ),
                                            ),
                                        };
                                        let v4599: Vec<string> = v4597.to_vec();
                                        let v4601: bool = true;
                                        let _vec_map: Vec<_> = v4599
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v4603: string = x;
                                                let v4605: &str = &*v4603;
                                                let v4607: std::string::String =
                                                    String::from(v4605);
                                                let v4609: bool = true;
                                                v4607
                                            })
                                            .collect::<Vec<_>>();
                                        let v4611: Vec<std::string::String> = _vec_map;
                                        let v4614: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<string, string>,
                                                >,
                                            >,
                                        > = Spiral_builder::method12(
                                            v0_1.clone(),
                                            clap::Command::get_matches_from(v4589, v4611),
                                        );
                                        let v4616: Result<string, string> = v4614.await;
                                        v4616.unwrap()
                                    }
                                    _ => string("{}"),
                                },
                            )])
                        } else {
                            if fable_library_rust::String_::fromString(v33.clone()) == string("dib")
                            {
                                let v4627: string = Spiral_builder::method78();
                                let v4629: &str = &*v4627;
                                let v4633: Option<string> = map_1(
                                    Func1::new(move |v_9: std::string::String| {
                                        Spiral_builder::closure93((), v_9)
                                    }),
                                    clap::ArgMatches::get_one(&v34.clone(), v4629).cloned(),
                                );
                                let v4659: string = v4633.unwrap();
                                let v4660: string = Spiral_builder::method86();
                                let v4662: &str = &*v4660;
                                let v4665: u8 = defaultValue(
                                    1_u8,
                                    clap::ArgMatches::get_one(&v34.clone(), v4662).cloned(),
                                );
                                let v4668: string = Spiral_builder::method87();
                                let v4670: &str = &*v4668;
                                let v4672: Option<string> =
                                    clap::ArgMatches::get_one(&v34.clone(), v4670).cloned();
                                let _v4673: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                                    refCell(None::<Spiral_builder::US1>);
                                let v4678: () = {
                                    Spiral_builder::closure4(
                                        v4672,
                                        Func1::new({
                                            let _v4673 = _v4673.clone();
                                            move |v_10: Option<Spiral_builder::US1>| {
                                                Spiral_builder::closure3(_v4673.clone(), v_10)
                                            }
                                        }),
                                        (),
                                    );
                                    ()
                                };
                                let patternInput_5: (i32, string) = Spiral_builder::method88(
                                    defaultValue(Spiral_builder::US1::US1_1, _v4673.get().clone()),
                                    v4665,
                                    v4659.clone(),
                                    1_u8,
                                );
                                let v4699: string = patternInput_5.1.clone();
                                let v4698: i32 = patternInput_5.0.clone();
                                let patternInput_8: (i32, string) = if v4698 != 0_i32 {
                                    (v4698, v4699.clone())
                                } else {
                                    let patternInput_6: (i32, string) =
                                            Spiral_builder::method42(sprintf!("jupyter nbconvert \"{}.ipynb\" --to html --HTMLExporter.theme=dark",
                                                                              v4659.clone()),
                                                                     None::<CancellationToken>,
                                                                     new_empty::<(string,
                                                                                  string)>(),
                                                                     None::<Func1<(i32,
                                                                                   string,
                                                                                   bool),
                                                                                  Arc<Async<()>>>>,
                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                  ()>>,
                                                                     true,
                                                                     None::<string>);
                                    let v4711: string = patternInput_6.1.clone();
                                    let v4710: i32 = patternInput_6.0.clone();
                                    let v4714: () = {
                                        Spiral_builder::closure96(v4711.clone(), v4710, ());
                                        ()
                                    };
                                    if v4710 != 0_i32 {
                                        (
                                            v4710,
                                            sprintf!(
                                                "repl_result: {}\n\njupyter_result: {}",
                                                v4699.clone(),
                                                v4711.clone()
                                            ),
                                        )
                                    } else {
                                        let patternInput_7:
                                                    (i32, string) =
                                                Spiral_builder::method42(sprintf!("pwsh -c \"$counter = 1; $path = \'{}.html\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{{8}}\', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\"",
                                                                                  replace(v4659.clone(),
                                                                                          string("\'"),
                                                                                          string("\'\'"))),
                                                                         None::<CancellationToken>,
                                                                         new_empty::<(string,
                                                                                      string)>(),
                                                                         None::<Func1<(i32,
                                                                                       string,
                                                                                       bool),
                                                                                      Arc<Async<()>>>>,
                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                      ()>>,
                                                                         true,
                                                                         None::<string>);
                                        let v5564: string = patternInput_7.1.clone();
                                        let v5563: i32 = patternInput_7.0.clone();
                                        let v5567: () = {
                                            Spiral_builder::closure98(v5564.clone(), v5563, ());
                                            ()
                                        };
                                        let v6402: string = sprintf!("{}.html", v4659.clone());
                                        let v6406: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v6402);
                                        let v6429: Vec<u8> =
                                            Spiral_builder::method16(v6406.unwrap());
                                        let v6431: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v6429);
                                        let v6433: std::string::String = v6431.unwrap();
                                        let v6456: string = replace(
                                            fable_library_rust::String_::fromString(v6433),
                                            string("\r\n"),
                                            string("\n"),
                                        );
                                        let v6457: string = sprintf!("{}.html", v4659.clone());
                                        std::fs::write(&*v6457, &*v6456).unwrap();
                                        ();
                                        {
                                            let v6461: string = sprintf!("{}.ipynb", v4659.clone());
                                            let v6465: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v6461);
                                            let v6488: Vec<u8> =
                                                Spiral_builder::method16(v6465.unwrap());
                                            let v6490: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v6488);
                                            let v6492: std::string::String = v6490.unwrap();
                                            let v6516: string = replace(
                                                replace(
                                                    fable_library_rust::String_::fromString(v6492),
                                                    string("\r\n"),
                                                    string("\n"),
                                                ),
                                                string("\\r\\n"),
                                                string("\\n"),
                                            );
                                            let v6517: string = sprintf!("{}.ipynb", v4659);
                                            std::fs::write(&*v6517, &*v6516).unwrap();
                                            ();
                                            (v5563,
                                                 sprintf!("repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                          v4699, v4711,
                                                          v5564))
                                        }
                                    }
                                };
                                let v6525: string = patternInput_8.1.clone();
                                let v6524: i32 = patternInput_8.0.clone();
                                let v6528: () = {
                                    Spiral_builder::closure100(v6525.clone(), v6524, ());
                                    ()
                                };
                                if v6524 != 0_i32 {
                                    panic!(
                                        "{}",
                                        sprintf!(
                                            "spiral_builder.run / dib / exit_code: {} / result: {}",
                                            v6524,
                                            v6525.clone()
                                        )
                                    );
                                }
                                new_array(&[(string("stdio"), v6525)])
                            } else {
                                let patternInput_31: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if fable_library_rust::String_::fromString(v33.clone())
                                    == string("rust")
                                {
                                    let v7372: string = Spiral_builder::method76();
                                    let v7374: &str = &*v7372;
                                    let v7376: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v34.clone(), v7374).cloned();
                                    let _v7377: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                        refCell(None::<Spiral_builder::US5>);
                                    let v7382: () = {
                                        Spiral_builder::closure18(
                                            v7376,
                                            Func1::new({
                                                let _v7377 = _v7377.clone();
                                                move |v_11: Option<Spiral_builder::US5>| {
                                                    Spiral_builder::closure17(_v7377.clone(), v_11)
                                                }
                                            }),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7397: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        _v7377.get().clone(),
                                    );
                                    let v7404: std::string::String = match &v7397 {
                                        Spiral_builder::US5::US5_0(v7397_0_0) => match &v7397 {
                                            Spiral_builder::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v7406: string =
                                        fable_library_rust::String_::fromString(v7404);
                                    let v7407: string = Spiral_builder::method15();
                                    let v7409: &str = &*v7407;
                                    let v7411: Option<Vec<std::string::String>> =
                                        clap::ArgMatches::get_many(&v34.clone(), v7409)
                                            .map(|x| x.cloned().into_iter().collect());
                                    let _v7412: LrcPtr<MutCell<Option<Spiral_builder::US9>>> =
                                        refCell(None::<Spiral_builder::US9>);
                                    let v7417: () = {
                                        Spiral_builder::closure20(
                                            v7411,
                                            Func1::new({
                                                let _v7412 = _v7412.clone();
                                                move |v_12: Option<Spiral_builder::US9>| {
                                                    Spiral_builder::closure19(_v7412.clone(), v_12)
                                                }
                                            }),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7432: Spiral_builder::US9 = defaultValue(
                                        Spiral_builder::US9::US9_1,
                                        _v7412.get().clone(),
                                    );
                                    let v7438: Vec<std::string::String> =
                                        new_empty::<std::string::String>().to_vec();
                                    let v7441: Vec<std::string::String> = match &v7432 {
                                        Spiral_builder::US9::US9_0(v7432_0_0) => match &v7432 {
                                            Spiral_builder::US9::US9_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => v7438,
                                    };
                                    let v7442: string = Spiral_builder::method89();
                                    let v7444: &str = &*v7442;
                                    let v7446: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v34.clone(), v7444).cloned();
                                    let _v7447: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                        refCell(None::<Spiral_builder::US5>);
                                    let v7452: () = {
                                        Spiral_builder::closure18(
                                            v7446,
                                            Func1::new({
                                                let _v7447 = _v7447.clone();
                                                move |v_13: Option<Spiral_builder::US5>| {
                                                    Spiral_builder::closure17(_v7447.clone(), v_13)
                                                }
                                            }),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7467: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        _v7447.get().clone(),
                                    );
                                    let v7477: Spiral_builder::US1 = match &v7467 {
                                        Spiral_builder::US5::US5_0(v7467_0_0) => {
                                            Spiral_builder::US1::US1_0(
                                                fable_library_rust::String_::fromString(
                                                    match &v7467 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    },
                                                ),
                                            )
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    };
                                    let v7478: string = Spiral_builder::method90();
                                    let v7480: &str = &*v7478;
                                    let v7482: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v34.clone(), v7480).cloned();
                                    let _v7483: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                        refCell(None::<Spiral_builder::US5>);
                                    let v7488: () = {
                                        Spiral_builder::closure18(
                                            v7482,
                                            Func1::new({
                                                let _v7483 = _v7483.clone();
                                                move |v_14: Option<Spiral_builder::US5>| {
                                                    Spiral_builder::closure17(_v7483.clone(), v_14)
                                                }
                                            }),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7503: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        _v7483.get().clone(),
                                    );
                                    let v7513: Spiral_builder::US1 = match &v7503 {
                                        Spiral_builder::US5::US5_0(v7503_0_0) => {
                                            Spiral_builder::US1::US1_0(
                                                fable_library_rust::String_::fromString(
                                                    match &v7503 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    },
                                                ),
                                            )
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    };
                                    let v7522: Spiral_builder::US33 =
                                        if let Spiral_builder::US1::US1_0(v7477_0_0) = &v7477 {
                                            Spiral_builder::US33::US33_0(
                                                Spiral_builder::US34::US34_0(match &v7477 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }),
                                            )
                                        } else {
                                            if let Spiral_builder::US1::US1_0(v7513_0_0) = &v7513 {
                                                Spiral_builder::US33::US33_0(
                                                    Spiral_builder::US34::US34_1(match &v7513 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }),
                                                )
                                            } else {
                                                Spiral_builder::US33::US33_1
                                            }
                                        };
                                    let v7523: bool = if let Spiral_builder::US0::US0_0 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    };
                                    let v7527: Result<Vec<u8>, std::io::Error> =
                                        std::fs::read(&*v7406);
                                    let v7550: Vec<u8> = Spiral_builder::method16(v7527.unwrap());
                                    let v7552: Result<
                                        std::string::String,
                                        std::string::FromUtf8Error,
                                    > = std::string::String::from_utf8(v7550);
                                    let v7554: std::string::String = v7552.unwrap();
                                    let v7570: string =
                                        fable_library_rust::String_::fromString(v7554);
                                    let v7576: LrcPtr<Spiral_builder::Mut4> =
                                        LrcPtr::new(Spiral_builder::Mut4 {
                                            l0: MutCell::new(Spiral_builder::method10()),
                                        });
                                    let v7583: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string("{ ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7592: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string("extension")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7601: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string(" = ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7610: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string("rs")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7619: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string("; ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7628: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string("code")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7636: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string(" = ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7644: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", v7570.clone()),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7652: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string("; ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7661: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string("runtime")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7669: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string(" = ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7680: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", sprintf!("{:?}", v7522.clone())),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7689: () = {
                                        Spiral_builder::closure10(
                                            v7576.clone(),
                                            sprintf!("{}", string(" }")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v7693: string =
                                        Spiral_builder::method91(v7576.l0.get().clone());
                                    let v7698: Spiral_builder::US12 =
                                            Spiral_builder::method20(Spiral_builder::method17(string("polyglot"),
                                                                                              string(".devcontainer")),
                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                    let v8625: Spiral_builder::US1 = match &v7698 {
                                        Spiral_builder::US12::US12_0(v7698_0_0) => {
                                            Spiral_builder::US1::US1_0(v7698_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v7698_1_0) => {
                                            let v7704: () = {
                                                Spiral_builder::closure22(v7698_1_0.clone(), ());
                                                ()
                                            };
                                            Spiral_builder::US1::US1_1
                                        }
                                    };
                                    let v9559: Spiral_builder::US1 = match &v8625 {
                                        Spiral_builder::US1::US1_0(v8625_0_0) => {
                                            Spiral_builder::US1::US1_0(match &v8625 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => {
                                            let v8628: string = Spiral_builder::method25();
                                            let v8630: Spiral_builder::US12 =
                                                Spiral_builder::method20(
                                                    Spiral_builder::method17(
                                                        string("polyglot"),
                                                        string(".devcontainer"),
                                                    ),
                                                    v8628,
                                                );
                                            match &v8630 {
                                                Spiral_builder::US12::US12_0(v8630_0_0) => {
                                                    Spiral_builder::US1::US1_0(v8630_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v8630_1_0) => {
                                                    let v8636: () = {
                                                        Spiral_builder::closure22(
                                                            v8630_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            }
                                        }
                                    };
                                    let v9564: string = Spiral_builder::method17(
                                        match &v9559 {
                                            Spiral_builder::US1::US1_0(v9559_0_0) => match &v9559 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        },
                                        string("polyglot"),
                                    );
                                    let v9567: string = toLower(Spiral_builder::method25());
                                    let v9571: string = toLower(v9564);
                                    let v9579: Spiral_builder::US12 =
                                        if startsWith(v9567, v9571.clone(), false) {
                                            Spiral_builder::US12::US12_1(v9571.clone())
                                        } else {
                                            Spiral_builder::US12::US12_0(v9571)
                                        };
                                    let v9585: Result<string, string> = match &v9579 {
                                        Spiral_builder::US12::US12_0(v9579_0_0) => {
                                            Ok::<string, string>(v9579_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v9579_1_0) => {
                                            Err::<string, string>(v9579_1_0.clone())
                                        }
                                    };
                                    let v9587: bool = true;
                                    let _result_unwrap_or_else = v9585.unwrap_or_else(|x| {
                                        //;
                                        let v9589: string = x;
                                        let v9591: bool = true;
                                        v9589
                                    });
                                    let v9593: string = _result_unwrap_or_else;
                                    let v9602: string = Spiral_builder::method17(
                                        Spiral_builder::method17(
                                            Spiral_builder::method17(
                                                Spiral_builder::method17(
                                                    Spiral_builder::method17(
                                                        v9593.clone(),
                                                        string("target/spiral_builder"),
                                                    ),
                                                    string("spiral_builder"),
                                                ),
                                                string("packages"),
                                            ),
                                            string("Rust"),
                                        ),
                                        v7693.clone(),
                                    );
                                    let v9603: LrcPtr<dyn IDisposable> =
                                        Spiral_builder::method30(v9602.clone());
                                    let v9606: string =
                                        Spiral_builder::method82(Spiral_builder::method17(
                                            v9602.clone(),
                                            sprintf!("{}.fs", string("spiral_builder")),
                                        ));
                                    Spiral_builder::method27(v9606.clone(), v7570);
                                    {
                                        let v9607: List<string> = empty::<string>();
                                        let v9614: string = join(
                                            string("\\n        "),
                                            toArray_1(delay(Func0::new({
                                                let v9607 = v9607.clone();
                                                move || {
                                                    map(
                                                        Func1::new({
                                                            let v9607 = v9607.clone();
                                                            move |i_1: i32| item(i_1, v9607.clone())
                                                        }),
                                                        rangeNumeric(
                                                            0_i32,
                                                            1_i32,
                                                            length_1(v9607.clone()) - 1_i32,
                                                        ),
                                                    )
                                                }
                                            }))),
                                        );
                                        let v9620: List<string> = singleton(sprintf!(
                                            "<PackageReference Include=\"{}\" Version=\"*\" />",
                                            string("Fable.Core")
                                        ));
                                        let v9628: string = join(
                                            string("\\n        "),
                                            toArray_1(delay(Func0::new({
                                                let v9620 = v9620.clone();
                                                move || {
                                                    map(
                                                        Func1::new({
                                                            let v9620 = v9620.clone();
                                                            move |i_2: i32| item(i_2, v9620.clone())
                                                        }),
                                                        rangeNumeric(
                                                            0_i32,
                                                            1_i32,
                                                            length_1(v9620.clone()) - 1_i32,
                                                        ),
                                                    )
                                                }
                                            }))),
                                        );
                                        let v9633: string =
                                            Spiral_builder::method82(Spiral_builder::method17(
                                                v9602.clone(),
                                                sprintf!("{}.fsproj", string("spiral_builder")),
                                            ));
                                        Spiral_builder::method27(v9633.clone(),
                                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                sprintf!("    {}",
                                                                                                                                                                         v9614)),
                                                                                                                                                         string("\n")),
                                                                                                                                                  sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                           v9606)),
                                                                                                                                           string("\n")),
                                                                                                                                    string("</ItemGroup>")),
                                                                                                                             string("\n")),
                                                                                                                      string("<ItemGroup>")),
                                                                                                               string("\n")),
                                                                                                        sprintf!("    {}",
                                                                                                                 v9628)),
                                                                                                 string("\n")),
                                                                                          string("</ItemGroup>")),
                                                                                   string("\n")),
                                                                            string("</Project>")));
                                        {
                                            let v9733: string = Spiral_builder::method17(
                                                v9602.clone(),
                                                string("../../.."),
                                            );
                                            let v9735: string = Spiral_builder::method17(
                                                v9733.clone(),
                                                string("Cargo.toml"),
                                            );
                                            if Spiral_builder::method29(v9735.clone()) == false {
                                                let v9738: DateTime = DateTime::now();
                                                let v9747: string = toString(
                                                    Spiral_builder::method94(new_guid(), v9738),
                                                );
                                                let v9771: string =
                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                   sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                            v9747.clone())),
                                                                                                                                            string("\n")),
                                                                                                                                     string("version = \"0.0.1\"")),
                                                                                                                              string("\n")),
                                                                                                                       string("edition = \"2021\"")),
                                                                                                                string("\n")),
                                                                                                         string("")),
                                                                                                  string("\n")),
                                                                                           string("[[bin]]")),
                                                                                    string("\n")),
                                                                             sprintf!("name = \"spiral_builder_{}\"",
                                                                                      v9747)),
                                                                      string("\n")),
                                                               string("path = \"spiral_builder.rs\""));
                                                std::fs::write(&*v9735.clone(), &*v9771).unwrap();
                                                ();
                                                ()
                                            }
                                            {
                                                let v9775: string = Spiral_builder::method17(
                                                    v9602.clone(),
                                                    string("Cargo.toml"),
                                                );
                                                if Spiral_builder::method29(v9775.clone()) == false
                                                {
                                                    let v9778: DateTime = DateTime::now();
                                                    let v9787: string = toString(
                                                        Spiral_builder::method94(new_guid(), v9778),
                                                    );
                                                    let v9811: string =
                                                            append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                       sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                v9787.clone())),
                                                                                                                                                string("\n")),
                                                                                                                                         string("version = \"0.0.1\"")),
                                                                                                                                  string("\n")),
                                                                                                                           string("edition = \"2021\"")),
                                                                                                                    string("\n")),
                                                                                                             string("")),
                                                                                                      string("\n")),
                                                                                               string("[[bin]]")),
                                                                                        string("\n")),
                                                                                 sprintf!("name = \"spiral_builder_{}\"",
                                                                                          v9787)),
                                                                          string("\n")),
                                                                   string("path = \"spiral_builder.rs\""));
                                                    std::fs::write(&*v9775.clone(), &*v9811)
                                                        .unwrap();
                                                    ();
                                                    ()
                                                }
                                                {
                                                    let v9816: string =
                                                            Spiral_builder::method17(v9593.clone(),
                                                                                     string("lib/rust/fable/fable_modules/fable-library-rust"));
                                                    let v9818: string = Spiral_builder::method17(
                                                        v9602.clone(),
                                                        string("fable_modules/fable-library-rust"),
                                                    );
                                                    Spiral_builder::method98(v9816, v9818.clone());
                                                    {
                                                        let patternInput_9: (i32, string) =
                                                            Spiral_builder::method99(
                                                                v7522.clone(),
                                                                v9602.clone(),
                                                                string("rs"),
                                                                v9633,
                                                                v9579.clone(),
                                                            );
                                                        let v9820: string =
                                                            patternInput_9.1.clone();
                                                        let v9819: i32 = patternInput_9.0.clone();
                                                        let patternInput_18: (
                                                            Spiral_builder::US1,
                                                            Spiral_builder::US1,
                                                            Spiral_builder::US1,
                                                        ) = if v9819 != 0_i32 {
                                                            let v9826: () = {
                                                                Spiral_builder::closure106(
                                                                    v9820.clone(),
                                                                    v9819,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral_builder::US1::US1_0(string(
                                                                    "rs",
                                                                )),
                                                                Spiral_builder::US1::US1_1,
                                                                Spiral_builder::US1::US1_0(v9820),
                                                            )
                                                        } else {
                                                            let v10869:
                                                                            Vec<std::string::String> =
                                                                        if if let Spiral_builder::US33::US33_1
                                                                                  =
                                                                                  &v7522
                                                                              {
                                                                               true
                                                                           } else {
                                                                               false
                                                                           } {
                                                                            v7441.clone()
                                                                        } else {
                                                                            let v10843 =
                                                                                Spiral_builder::method102();
                                                                            let v10844:
                                                                                    Vec<std::string::String> =
                                                                                Spiral_builder::method103(v7441.clone());
                                                                            let v10846:
                                                                                    Vec<std::string::String> =
                                                                                v10844.into_iter().filter(|x| v10843(x.clone().clone())).collect::<Vec<_>>();
                                                                            if v10846.len()
                                                                                   as
                                                                                   i32
                                                                                   >
                                                                                   0_i32
                                                                               {
                                                                                v7441.clone()
                                                                            } else {
                                                                                let v10854:
                                                                                        &str =
                                                                                    &*string("near-sdk");
                                                                                let v10857:
                                                                                        Array<std::string::String> =
                                                                                    new_array(&[String::from(v10854)]);
                                                                                let v10860:
                                                                                        Vec<std::string::String> =
                                                                                    Spiral_builder::method104(v10857.to_vec());
                                                                                let v10861:
                                                                                        Vec<std::string::String> =
                                                                                    Spiral_builder::method105(v7441);
                                                                                let v10863:
                                                                                        bool =
                                                                                    true; let mut v10861 = v10861;
                                                                                let v10865:
                                                                                        bool =
                                                                                    true; v10861.extend(v10860);
                                                                                v10861
                                                                            }
                                                                        };
                                                            let v10871: bool = true;
                                                            let _vec_map : Vec<_> = v10869.into_iter().map(|x| { //;
                                                                    let v10873:
                                                                            std::string::String =
                                                                        x;
                                                                    let v10875:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v10873);
                                                                    let v10888:
                                                                            string =
                                                                        if contains(v10875.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v10875.clone()
                                                                        } else {
                                                                            if endsWith(v10875.clone(),
                                                                                        string("]"),
                                                                                        false)
                                                                               {
                                                                                sprintf!("{}}}",
                                                                                         replace(v10875.clone(),
                                                                                                 string("["),
                                                                                                 string("={version=\'*\',features=[")))
                                                                            } else {
                                                                                sprintf!("{}=\'*\'",
                                                                                         v10875)
                                                                            }
                                                                        };
                                                                    let v10890:
                                                                            bool =
                                                                        true; v10888 }).collect::<Vec<_>>();
                                                            let v10892: Vec<string> = _vec_map;
                                                            let v10894:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v10892);
                                                            let v10948:
                                                                            string =
                                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                                                                           sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                                                                    v7693.clone())),
                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                             string("version = \"0.0.1\"")),
                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                               string("edition = \"2021\"")),
                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                 string("")),
                                                                                                                                                                          string("\n")),
                                                                                                                                                                   string("[dependencies]")),
                                                                                                                                                            string("\n")),
                                                                                                                                                     (if if let Spiral_builder::US33::US33_1
                                                                                                                                                                =
                                                                                                                                                                &v7522
                                                                                                                                                            {
                                                                                                                                                             true
                                                                                                                                                         } else {
                                                                                                                                                             false
                                                                                                                                                         }
                                                                                                                                                         {
                                                                                                                                                          let v10920:
                                                                                                                                                                  string =
                                                                                                                                                              string("fable_library_rust = { workspace = true, features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"] }");
                                                                                                                                                          v10920
                                                                                                                                                      } else {
                                                                                                                                                          string("fable_library_rust = { workspace = true }")
                                                                                                                                                      })),
                                                                                                                                              string("\n")),
                                                                                                                                       string("inline_colorization = { workspace = true }")),
                                                                                                                                string("\n")),
                                                                                                                         sprintf!("{}",
                                                                                                                                  join(string("\n"),
                                                                                                                                       toArray_1(delay(Func0::new({
                                                                                                                                                                      let v10894
                                                                                                                                                                          =
                                                                                                                                                                          v10894.clone();
                                                                                                                                                                      move
                                                                                                                                                                          ||
                                                                                                                                                                          map(Func1::new({
                                                                                                                                                                                             let v10894
                                                                                                                                                                                                 =
                                                                                                                                                                                                 v10894.clone();
                                                                                                                                                                                             move
                                                                                                                                                                                                 |i_3:
                                                                                                                                                                                                      i32|
                                                                                                                                                                                                 v10894[i_3].clone()
                                                                                                                                                                                         }),
                                                                                                                                                                              rangeNumeric(0_i32,
                                                                                                                                                                                           1_i32,
                                                                                                                                                                                           count_2(v10894.clone())
                                                                                                                                                                                               -
                                                                                                                                                                                               1_i32))
                                                                                                                                                                  })))))),
                                                                                                                  string("\n")),
                                                                                                           string("")),
                                                                                                    string("\n")),
                                                                                             (if if let Spiral_builder::US33::US33_1
                                                                                                        =
                                                                                                        &v7522
                                                                                                    {
                                                                                                     true
                                                                                                 } else {
                                                                                                     false
                                                                                                 }
                                                                                                 {
                                                                                                  append(string("[[bin]]\n"),
                                                                                                         sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                  v7693.clone()))
                                                                                              } else {
                                                                                                  string("[lib]\ncrate-type = [\"cdylib\"]")
                                                                                              })),
                                                                                      string("\n")),
                                                                               string("path = \"spiral_builder.rs\" "));
                                                            let v11013:
                                                                            string =
                                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("cargo-features = [\"profile-rustflags\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                                                                                                                                   sprintf!("path = \"{}/lib/rust/fable/fable_modules/fable-library-rust\"",
                                                                                                                                                                                                                                                                                            Spiral_builder::method82(v9593.clone()))),
                                                                                                                                                                                                                                                                            string("\n")),
                                                                                                                                                                                                                                                                     string("default-features = false")),
                                                                                                                                                                                                                                                              string("\n")),
                                                                                                                                                                                                                                                       string("features = []")),
                                                                                                                                                                                                                                                string("\n")),
                                                                                                                                                                                                                                         string("")),
                                                                                                                                                                                                                                  string("\n")),
                                                                                                                                                                                                                           string("[workspace.dependencies]")),
                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                             string("inline_colorization = \"~0.1\"")),
                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                               string("")),
                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                 string("[profile.release]")),
                                                                                                                                                                          string("\n")),
                                                                                                                                                                   string("codegen-units = 1")),
                                                                                                                                                            string("\n")),
                                                                                                                                                     string("opt-level = \"z\"")),
                                                                                                                                              string("\n")),
                                                                                                                                       string("lto = true")),
                                                                                                                                string("\n")),
                                                                                                                         string("debug = false")),
                                                                                                                  string("\n")),
                                                                                                           string("panic = \"abort\"")),
                                                                                                    string("\n")),
                                                                                             string("overflow-checks = true")),
                                                                                      string("\n")),
                                                                               string("rustflags = [\"-C\", \"link-arg=-s\"]"));
                                                            Spiral_builder::method27(
                                                                v9775.clone(),
                                                                v10948,
                                                            );
                                                            Spiral_builder::method27(v9735, v11013);
                                                            {
                                                                let v11015: string =
                                                                    Spiral_builder::method17(
                                                                        v9818,
                                                                        string("src/Range.rs"),
                                                                    );
                                                                if Spiral_builder::method29(
                                                                    v11015.clone(),
                                                                ) {
                                                                    let v11020: Result<
                                                                        Vec<u8>,
                                                                        std::io::Error,
                                                                    > = std::fs::read(
                                                                        &*v11015.clone(),
                                                                    );
                                                                    let v11043: Vec<u8> =
                                                                        Spiral_builder::method16(
                                                                            v11020.unwrap(),
                                                                        );
                                                                    let v11045:
                                                                                    Result<std::string::String,
                                                                                           std::string::FromUtf8Error> =
                                                                                std::string::String::from_utf8(v11043);
                                                                    let v11047:
                                                                                    std::string::String =
                                                                                v11045.unwrap();
                                                                    Spiral_builder::method27(v11015,
                                                                                                     replace(replace(fable_library_rust::String_::fromString(v11047),
                                                                                                                     string("use crate::String_::fromCharCode;"),
                                                                                                                     string("use crate::String_::fromChar;")),
                                                                                                             string("fromCharCode(c)"),
                                                                                                             string("std::char::from_u32(c).unwrap()")))
                                                                }
                                                                {
                                                                    let patternInput_10: (
                                                                        i32,
                                                                        string,
                                                                    ) = Spiral_builder::method106(
                                                                        v9579.clone(),
                                                                        v9775.clone(),
                                                                        1_u8,
                                                                    );
                                                                    let v11075: i32 =
                                                                        patternInput_10.0.clone();
                                                                    if v11075 != 0_i32 {
                                                                        let v11082: () = {
                                                                            Spiral_builder::closure112(patternInput_10.1.clone(),
                                                                                                                   v11075,
                                                                                                                   ());
                                                                            ()
                                                                        };
                                                                        ()
                                                                    }
                                                                    {
                                                                        let v12096:
                                                                                        string =
                                                                                    Spiral_builder::method17(v9602,
                                                                                                             sprintf!("{}.{}",
                                                                                                                      string("spiral_builder"),
                                                                                                                      string("rs")));
                                                                        let v12100: Result<
                                                                            Vec<u8>,
                                                                            std::io::Error,
                                                                        > = std::fs::read(
                                                                            &*v12096.clone(),
                                                                        );
                                                                        let v12123:
                                                                                        Vec<u8> =
                                                                                    Spiral_builder::method16(v12100.unwrap());
                                                                        let v12125:
                                                                                        Result<std::string::String,
                                                                                               std::string::FromUtf8Error> =
                                                                                    std::string::String::from_utf8(v12123);
                                                                        let v12127:
                                                                                        std::string::String =
                                                                                    v12125.unwrap();
                                                                        let v12143:
                                                                                        string =
                                                                                    fable_library_rust::String_::fromString(v12127);
                                                                        let v12151:
                                                                                        string =
                                                                                    append(string("pub fn main() -> Result<(), String> "),
                                                                                           "{".into());
                                                                        let v12188:
                                                                                        string =
                                                                                    append(append((if if let Spiral_builder::US33::US33_1
                                                                                                             =
                                                                                                             &v7522
                                                                                                         {
                                                                                                          true
                                                                                                      } else {
                                                                                                          false
                                                                                                      }
                                                                                                      {
                                                                                                       string("")
                                                                                                   } else {
                                                                                                       string("#[near_sdk::near_bindgen]\n#[derive(near_sdk::PanicOnDefault)]\npub struct MainState {\n}\n\n#[near_sdk::near_bindgen]\nimpl MainState {\n    pub fn state_main() {\n        Spiral_builder::method0();\n    }\n}")
                                                                                                   }),
                                                                                                  string("\n")),
                                                                                           sprintf!("{} Ok(()) }}",
                                                                                                    v12151.clone()));
                                                                        let v12189: bool = contains(
                                                                            v12143.clone(),
                                                                            v12151,
                                                                        );
                                                                        let v12281: string =
                                                                            if v12189 {
                                                                                v12143.clone()
                                                                            } else {
                                                                                let v12203:
                                                                                                string =
                                                                                            replace(replace(v12143,
                                                                                                            append(string("),)"),
                                                                                                                   ";".into()),
                                                                                                            string("));")),
                                                                                                    append(string("},)"),
                                                                                                           ";".into()),
                                                                                                    string("});"));
                                                                                let v12208:
                                                                                                Result<regex::Regex,
                                                                                                       regex::Error> =
                                                                                            regex::Regex::new(&string("\\s\\sdefaultOf\\(\\);"));
                                                                                let v12210:
                                                                                                regex::Regex =
                                                                                            v12208.unwrap();
                                                                                let v12211:
                                                                                                string =
                                                                                            Spiral_builder::method83(v12203);
                                                                                let v12213:
                                                                                                std::borrow::Cow<str> =
                                                                                            v12210.replace_all(&*v12211, &*string(" defaultOf::<()>();"));
                                                                                let v12215:
                                                                                                std::string::String =
                                                                                            String::from(v12213);
                                                                                replace(replace(replace(replace(replace(replace(replace(replace(fable_library_rust::String_::fromString(v12215),
                                                                                                                                                        string("::Slice\'_"),
                                                                                                                                                        string("::Slice__")),
                                                                                                                                                append(string("defaultOf()"),
                                                                                                                                                       ",".into()),
                                                                                                                                                string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                        append(string("_self"),
                                                                                                                                               "_.".into()),
                                                                                                                                        string("self.")),
                                                                                                                                append(string("get_or_insert_wit"),
                                                                                                                                       "h".into()),
                                                                                                                                string("get_or_init")),
                                                                                                                        append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                               ";".into()),
                                                                                                                        string("type ConcurrentStack_1<T> = T;")),
                                                                                                                append(string("use fable_library_rust::System::Threading::CancellationToken"),
                                                                                                                       ";".into()),
                                                                                                                string("type CancellationToken = ();")),
                                                                                                        append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                               ";".into()),
                                                                                                        string("type TimeZoneInfo = i64;")),
                                                                                                append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                       ";".into()),
                                                                                                string("type TaskCanceledException = ();"))
                                                                            };
                                                                        if v12189 == false {
                                                                            Spiral_builder::method27(v12096.clone(),
                                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                                      v12281.clone(),
                                                                                                                      v12188));
                                                                        }
                                                                        {
                                                                            let v12288:
                                                                                            string =
                                                                                        if (if let Spiral_builder::US33::US33_1
                                                                                                   =
                                                                                                   &v7522
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            sprintf!("cargo build --release --target wasm32-unknown-unknown --manifest-path \"{}\"",
                                                                                                     v9775.clone())
                                                                                        } else {
                                                                                            sprintf!("cargo run --manifest-path \"{}\"",
                                                                                                     v9775)
                                                                                        };
                                                                            let v12299:
                                                                                            Array<(string,
                                                                                                   string)> =
                                                                                        if (if let Spiral_builder::US33::US33_1
                                                                                                   =
                                                                                                   &v7522
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            new_empty::<(string,
                                                                                                         string)>()
                                                                                        } else {
                                                                                            new_array(&[(string("TRACE_LEVEL"),
                                                                                                         string("Verbose")),
                                                                                                        (string("RUSTC_WRAPPER"),
                                                                                                         string("sccache")),
                                                                                                        (string("RUSTFLAGS"),
                                                                                                         string("-C prefer-dynamic"))])
                                                                                        };
                                                                            let v12310:
                                                                                            Result<string,
                                                                                                   string> =
                                                                                        match &v9579
                                                                                            {
                                                                                            Spiral_builder::US12::US12_0(v9579_0_0)
                                                                                            =>
                                                                                            Ok::<string,
                                                                                                 string>(v9579_0_0.clone()),
                                                                                            Spiral_builder::US12::US12_1(v9579_1_0)
                                                                                            =>
                                                                                            Err::<string,
                                                                                                  string>(v9579_1_0.clone()),
                                                                                        };
                                                                            let patternInput_11:
                                                                                            (i32,
                                                                                             string) =
                                                                                        Spiral_builder::method42(v12288.clone(),
                                                                                                                 None::<CancellationToken>,
                                                                                                                 v12299.clone(),
                                                                                                                 None::<Func1<(i32,
                                                                                                                               string,
                                                                                                                               bool),
                                                                                                                              Arc<Async<()>>>>,
                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                              ()>>,
                                                                                                                 true,
                                                                                                                 v12310.ok());
                                                                            let v12315: string =
                                                                                patternInput_11
                                                                                    .1
                                                                                    .clone();
                                                                            let v12314: i32 =
                                                                                patternInput_11
                                                                                    .0
                                                                                    .clone();
                                                                            let patternInput_17:
                                                                                            (Spiral_builder::US1,
                                                                                             Spiral_builder::US1,
                                                                                             Spiral_builder::US1) =
                                                                                        if if let Spiral_builder::US33::US33_1
                                                                                                  =
                                                                                                  &v7522
                                                                                              {
                                                                                               true
                                                                                           } else {
                                                                                               false
                                                                                           }
                                                                                           {
                                                                                            let v12317:
                                                                                                    i32 =
                                                                                                count_2(v12299.clone());
                                                                                            let v12318:
                                                                                                    Array<string> =
                                                                                                new_init(&string(""),
                                                                                                         v12317);
                                                                                            let v12319:
                                                                                                    LrcPtr<Spiral_builder::Mut5> =
                                                                                                LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                                     MutCell::new(0_i32),});
                                                                                            while Spiral_builder::method45(v12317,
                                                                                                                           v12319.clone())
                                                                                                  {
                                                                                                let v12321:
                                                                                                        i32 =
                                                                                                    v12319.l0.get().clone();
                                                                                                let patternInput_12:
                                                                                                        (string,
                                                                                                         string) =
                                                                                                    v12299[v12321].clone();
                                                                                                let v12324:
                                                                                                        string =
                                                                                                    sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                             patternInput_12.0.clone(),
                                                                                                             patternInput_12.1.clone());
                                                                                                v12318.get_mut()[v12321
                                                                                                                     as
                                                                                                                     usize]
                                                                                                    =
                                                                                                    v12324;
                                                                                                {
                                                                                                    let v12325:
                                                                                                            i32 =
                                                                                                        v12321
                                                                                                            +
                                                                                                            1_i32;
                                                                                                    v12319.l0.set(v12325);
                                                                                                    ()
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                let v12344:
                                                                                                        string =
                                                                                                    sprintf!("pwsh -c \'{}\'",
                                                                                                             join(string(";"),
                                                                                                                  toArray_1(ofArray_1(new_array(&[join(string(";"),
                                                                                                                                                       toArray_1(ofArray_1(v12318.clone()))),
                                                                                                                                                  v12288])))));
                                                                                                let patternInput_13:
                                                                                                        (Spiral_builder::US1,
                                                                                                         Spiral_builder::US1,
                                                                                                         Spiral_builder::US1) =
                                                                                                    if v12314
                                                                                                           ==
                                                                                                           0_i32
                                                                                                       {
                                                                                                        let result_1:
                                                                                                                LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                                            refCell(Spiral_builder::US1::US1_1);
                                                                                                        try_catch(||
                                                                                                                      result_1.set(Spiral_builder::closure85((),
                                                                                                                                                             Spiral_builder::closure114(v12315.clone(),
                                                                                                                                                                                        ()))),
                                                                                                                  |ex_1:
                                                                                                                       LrcPtr<Exception>|
                                                                                                                      result_1.set(Spiral_builder::closure116(v12096.clone(),
                                                                                                                                                              v12315.clone(),
                                                                                                                                                              v12344.clone(),
                                                                                                                                                              ex_1.clone())));
                                                                                                        {
                                                                                                            let v12350:
                                                                                                                    Spiral_builder::US1 =
                                                                                                                result_1.get().clone();
                                                                                                            let v12360:
                                                                                                                    Option<string> =
                                                                                                                match &v12350
                                                                                                                    {
                                                                                                                    Spiral_builder::US1::US1_0(v12350_0_0)
                                                                                                                    =>
                                                                                                                    Some(match &v12350
                                                                                                                             {
                                                                                                                             Spiral_builder::US1::US1_0(x)
                                                                                                                             =>
                                                                                                                             x.clone(),
                                                                                                                             _
                                                                                                                             =>
                                                                                                                             unreachable!(),
                                                                                                                         }),
                                                                                                                    _
                                                                                                                    =>
                                                                                                                    None::<string>,
                                                                                                                };
                                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                             Spiral_builder::US1::US1_0(v12281.clone()),
                                                                                                             Spiral_builder::US1::US1_0(v12360.unwrap()))
                                                                                                        }
                                                                                                    } else {
                                                                                                        let v12368:
                                                                                                                () =
                                                                                                            {
                                                                                                                Spiral_builder::closure119(v12096.clone(),
                                                                                                                                           v12315.clone(),
                                                                                                                                           v12314,
                                                                                                                                           v12344,
                                                                                                                                           ());
                                                                                                                ()
                                                                                                            };
                                                                                                        (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                         Spiral_builder::US1::US1_1,
                                                                                                         Spiral_builder::US1::US1_1)
                                                                                                    };
                                                                                                (patternInput_13.0.clone(),
                                                                                                 patternInput_13.1.clone(),
                                                                                                 patternInput_13.2.clone())
                                                                                            }
                                                                                        } else {
                                                                                            let v13453:
                                                                                                    string =
                                                                                                sprintf!("target/spiral_builder/{}/target/wasm32-unknown-unknown/release/spiral_builder_{}.wasm",
                                                                                                         string("spiral_builder"),
                                                                                                         v7693.clone());
                                                                                            let v13463:
                                                                                                    string =
                                                                                                sprintf!("pwsh -c \"pwsh {} {} -Linux -EnvironmentVariables NEAR_RPC_TIMEOUT_SECS=100\"",
                                                                                                         string("scripts/invoke-block.ps1"),
                                                                                                         sprintf!("\'workspace/target/release/spiral_wasm -t Debug -w {} {}\'",
                                                                                                                  v13453.clone(),
                                                                                                                  if let Spiral_builder::US33::US33_0(v7522_0_0)
                                                                                                                         =
                                                                                                                         &v7522
                                                                                                                     {
                                                                                                                      let v13454:
                                                                                                                              Spiral_builder::US34 =
                                                                                                                          match &v7522
                                                                                                                              {
                                                                                                                              Spiral_builder::US33::US33_0(x)
                                                                                                                              =>
                                                                                                                              x.clone(),
                                                                                                                              _
                                                                                                                              =>
                                                                                                                              unreachable!(),
                                                                                                                          };
                                                                                                                      match &v13454
                                                                                                                          {
                                                                                                                          Spiral_builder::US34::US34_0(v13454_0_0)
                                                                                                                          =>
                                                                                                                          v13454_0_0.clone(),
                                                                                                                          Spiral_builder::US34::US34_1(v13454_1_0)
                                                                                                                          =>
                                                                                                                          v13454_1_0.clone(),
                                                                                                                      }
                                                                                                                  } else {
                                                                                                                      string("")
                                                                                                                  }));
                                                                                            let patternInput_16:
                                                                                                    (Spiral_builder::US1,
                                                                                                     Spiral_builder::US1,
                                                                                                     Spiral_builder::US1) =
                                                                                                if v12314
                                                                                                       ==
                                                                                                       0_i32
                                                                                                   {
                                                                                                    let patternInput_14:
                                                                                                            (i32,
                                                                                                             string) =
                                                                                                        Spiral_builder::method42(v13463.clone(),
                                                                                                                                 None::<CancellationToken>,
                                                                                                                                 new_empty::<(string,
                                                                                                                                              string)>(),
                                                                                                                                 None::<Func1<(i32,
                                                                                                                                               string,
                                                                                                                                               bool),
                                                                                                                                              Arc<Async<()>>>>,
                                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                              ()>>,
                                                                                                                                 true,
                                                                                                                                 Some(v9593));
                                                                                                    let v13475:
                                                                                                            string =
                                                                                                        patternInput_14.1.clone();
                                                                                                    let v13474:
                                                                                                            i32 =
                                                                                                        patternInput_14.0.clone();
                                                                                                    let patternInput_15:
                                                                                                            (Spiral_builder::US1,
                                                                                                             Spiral_builder::US1,
                                                                                                             Spiral_builder::US1) =
                                                                                                        if v13474
                                                                                                               ==
                                                                                                               0_i32
                                                                                                           {
                                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                             Spiral_builder::US1::US1_0(v12281),
                                                                                                             Spiral_builder::US1::US1_0(v13475.clone()))
                                                                                                        } else {
                                                                                                            let v13482:
                                                                                                                    () =
                                                                                                                {
                                                                                                                    Spiral_builder::closure121(v12096.clone(),
                                                                                                                                               v12315.clone(),
                                                                                                                                               v13475,
                                                                                                                                               v13474,
                                                                                                                                               ());
                                                                                                                    ()
                                                                                                                };
                                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                             Spiral_builder::US1::US1_1,
                                                                                                             Spiral_builder::US1::US1_1)
                                                                                                        };
                                                                                                    (patternInput_15.0.clone(),
                                                                                                     patternInput_15.1.clone(),
                                                                                                     patternInput_15.2.clone())
                                                                                                } else {
                                                                                                    let v14569:
                                                                                                            () =
                                                                                                        {
                                                                                                            Spiral_builder::closure123(v12096.clone(),
                                                                                                                                       v12315,
                                                                                                                                       v12314,
                                                                                                                                       v13453,
                                                                                                                                       v13463,
                                                                                                                                       ());
                                                                                                            ()
                                                                                                        };
                                                                                                    (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                     Spiral_builder::US1::US1_1,
                                                                                                     Spiral_builder::US1::US1_1)
                                                                                                };
                                                                                            (patternInput_16.0.clone(),
                                                                                             patternInput_16.1.clone(),
                                                                                             patternInput_16.2.clone())
                                                                                        };
                                                                            let v15694:
                                                                                            string =
                                                                                        if (if let Spiral_builder::US33::US33_1
                                                                                                   =
                                                                                                   &v7522
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            string("wasm32-unknown-unknown/release")
                                                                                        } else {
                                                                                            string("debug")
                                                                                        };
                                                                            let v15697:
                                                                                            string =
                                                                                        Spiral_builder::method17(v9733.clone(),
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v15694.clone(),
                                                                                                                          v7693.clone(),
                                                                                                                          string("")));
                                                                            let v15700:
                                                                                            string =
                                                                                        Spiral_builder::method17(v9733.clone(),
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v15694.clone(),
                                                                                                                          v7693.clone(),
                                                                                                                          string(".wasm")));
                                                                            let v15703:
                                                                                            string =
                                                                                        Spiral_builder::method17(v9733.clone(),
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v15694.clone(),
                                                                                                                          v7693.clone(),
                                                                                                                          string(".pdb")));
                                                                            let v15706:
                                                                                            string =
                                                                                        Spiral_builder::method17(v9733.clone(),
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v15694.clone(),
                                                                                                                          v7693.clone(),
                                                                                                                          string(".exe")));
                                                                            let v15709:
                                                                                            string =
                                                                                        Spiral_builder::method17(v9733,
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v15694,
                                                                                                                          v7693,
                                                                                                                          string(".d")));
                                                                            let v15710:
                                                                                            bool =
                                                                                        Spiral_builder::method29(v15697.clone());
                                                                            let v15711:
                                                                                            bool =
                                                                                        Spiral_builder::method29(v15700.clone());
                                                                            let v15712:
                                                                                            bool =
                                                                                        Spiral_builder::method29(v15703.clone());
                                                                            let v15713:
                                                                                            bool =
                                                                                        Spiral_builder::method29(v15706.clone());
                                                                            let v15714:
                                                                                            bool =
                                                                                        Spiral_builder::method29(v15709.clone());
                                                                            let v15717: () = {
                                                                                Spiral_builder::closure125(v12096,
                                                                                                                       v15709.clone(),
                                                                                                                       v15714,
                                                                                                                       v15706.clone(),
                                                                                                                       v15713,
                                                                                                                       v15703.clone(),
                                                                                                                       v15712,
                                                                                                                       v15700.clone(),
                                                                                                                       v15711,
                                                                                                                       v15697.clone(),
                                                                                                                       v15710,
                                                                                                                       ());
                                                                                ()
                                                                            };
                                                                            let v16497: LrcPtr<
                                                                                Spiral_builder::UH4,
                                                                            > = if v15710 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v15697,
                                                                                                                                   v15710,
                                                                                                                                   LrcPtr::new(Spiral_builder::UH4::UH4_0)))
                                                                            } else {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_0)
                                                                            };
                                                                            let v16499: LrcPtr<
                                                                                Spiral_builder::UH4,
                                                                            > = if v15711 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v15700,
                                                                                                                                   v15711,
                                                                                                                                   v16497.clone()))
                                                                            } else {
                                                                                v16497
                                                                            };
                                                                            let v16501: LrcPtr<
                                                                                Spiral_builder::UH4,
                                                                            > = if v15712 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v15703,
                                                                                                                                   v15712,
                                                                                                                                   v16499.clone()))
                                                                            } else {
                                                                                v16499
                                                                            };
                                                                            let v16503: LrcPtr<
                                                                                Spiral_builder::UH4,
                                                                            > = if v15713 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v15706,
                                                                                                                                   v15713,
                                                                                                                                   v16501.clone()))
                                                                            } else {
                                                                                v16501
                                                                            };
                                                                            Spiral_builder::method108(if v15714
                                                                                                                 {
                                                                                                                  LrcPtr::new(Spiral_builder::UH4::UH4_1(v15709,
                                                                                                                                                         v15714,
                                                                                                                                                         v16503.clone()))
                                                                                                              } else {
                                                                                                                  v16503
                                                                                                              });
                                                                            (
                                                                                patternInput_17
                                                                                    .0
                                                                                    .clone(),
                                                                                patternInput_17
                                                                                    .1
                                                                                    .clone(),
                                                                                patternInput_17
                                                                                    .2
                                                                                    .clone(),
                                                                            )
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_18.0.clone(),
                                                            patternInput_18.1.clone(),
                                                            patternInput_18.2.clone(),
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    let patternInput_30: (
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                    ) = if fable_library_rust::String_::fromString(v33.clone())
                                        == string("typescript")
                                    {
                                        let v16512: string = Spiral_builder::method76();
                                        let v16514: &str = &*v16512;
                                        let v16516: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v34.clone(), v16514)
                                                .cloned();
                                        let _v16517: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                            refCell(None::<Spiral_builder::US5>);
                                        let v16522: () = {
                                            Spiral_builder::closure18(
                                                v16516,
                                                Func1::new({
                                                    let _v16517 = _v16517.clone();
                                                    move |v_17: Option<Spiral_builder::US5>| {
                                                        Spiral_builder::closure17(
                                                            _v16517.clone(),
                                                            v_17,
                                                        )
                                                    }
                                                }),
                                                (),
                                            );
                                            ()
                                        };
                                        let v16537: Spiral_builder::US5 = defaultValue(
                                            Spiral_builder::US5::US5_1,
                                            _v16517.get().clone(),
                                        );
                                        let v16544: std::string::String = match &v16537 {
                                            Spiral_builder::US5::US5_0(v16537_0_0) => match &v16537
                                            {
                                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        };
                                        let v16546: string =
                                            fable_library_rust::String_::fromString(v16544);
                                        let v16547: string = Spiral_builder::method15();
                                        let v16549: &str = &*v16547;
                                        let v16551: Option<Vec<std::string::String>> =
                                            clap::ArgMatches::get_many(&v34.clone(), v16549)
                                                .map(|x| x.cloned().into_iter().collect());
                                        let _v16552: LrcPtr<MutCell<Option<Spiral_builder::US9>>> =
                                            refCell(None::<Spiral_builder::US9>);
                                        let v16557: () = {
                                            Spiral_builder::closure20(
                                                v16551,
                                                Func1::new({
                                                    let _v16552 = _v16552.clone();
                                                    move |v_18: Option<Spiral_builder::US9>| {
                                                        Spiral_builder::closure19(
                                                            _v16552.clone(),
                                                            v_18,
                                                        )
                                                    }
                                                }),
                                                (),
                                            );
                                            ()
                                        };
                                        let v16572: Spiral_builder::US9 = defaultValue(
                                            Spiral_builder::US9::US9_1,
                                            _v16552.get().clone(),
                                        );
                                        let v16578: Vec<std::string::String> =
                                            new_empty::<std::string::String>().to_vec();
                                        let v16581: Vec<std::string::String> = match &v16572 {
                                            Spiral_builder::US9::US9_0(v16572_0_0) => match &v16572
                                            {
                                                Spiral_builder::US9::US9_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => v16578,
                                        };
                                        let v16582: bool = if let Spiral_builder::US0::US0_0 = &v0_1
                                        {
                                            true
                                        } else {
                                            false
                                        };
                                        let v16586: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v16546);
                                        let v16609: Vec<u8> =
                                            Spiral_builder::method16(v16586.unwrap());
                                        let v16611: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v16609);
                                        let v16613: std::string::String = v16611.unwrap();
                                        let v16629: string =
                                            fable_library_rust::String_::fromString(v16613);
                                        let v16638: string = Spiral_builder::method91(sprintf!(
                                            "{:?}",
                                            (string("ts"), v16629.clone())
                                        ));
                                        let v16643:
                                                        Spiral_builder::US12 =
                                                    Spiral_builder::method20(Spiral_builder::method17(string("polyglot"),
                                                                                                      string(".devcontainer")),
                                                                             string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                        let v17573: Spiral_builder::US1 = match &v16643 {
                                            Spiral_builder::US12::US12_0(v16643_0_0) => {
                                                Spiral_builder::US1::US1_0(v16643_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v16643_1_0) => {
                                                let v16649: () = {
                                                    Spiral_builder::closure22(
                                                        v16643_1_0.clone(),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                Spiral_builder::US1::US1_1
                                            }
                                        };
                                        let v18510: Spiral_builder::US1 = match &v17573 {
                                            Spiral_builder::US1::US1_0(v17573_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v17573 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v17576: string = Spiral_builder::method25();
                                                let v17578: Spiral_builder::US12 =
                                                    Spiral_builder::method20(
                                                        Spiral_builder::method17(
                                                            string("polyglot"),
                                                            string(".devcontainer"),
                                                        ),
                                                        v17576,
                                                    );
                                                match &v17578 {
                                                    Spiral_builder::US12::US12_0(v17578_0_0) => {
                                                        Spiral_builder::US1::US1_0(
                                                            v17578_0_0.clone(),
                                                        )
                                                    }
                                                    Spiral_builder::US12::US12_1(v17578_1_0) => {
                                                        let v17584: () = {
                                                            Spiral_builder::closure22(
                                                                v17578_1_0.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        Spiral_builder::US1::US1_1
                                                    }
                                                }
                                            }
                                        };
                                        let v18515: string = Spiral_builder::method17(
                                            match &v18510 {
                                                Spiral_builder::US1::US1_0(v18510_0_0) => {
                                                    match &v18510 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            },
                                            string("polyglot"),
                                        );
                                        let v18518: string = toLower(Spiral_builder::method25());
                                        let v18522: string = toLower(v18515);
                                        let v18530: Spiral_builder::US12 =
                                            if startsWith(v18518, v18522.clone(), false) {
                                                Spiral_builder::US12::US12_1(v18522.clone())
                                            } else {
                                                Spiral_builder::US12::US12_0(v18522)
                                            };
                                        let v18536: Result<string, string> = match &v18530 {
                                            Spiral_builder::US12::US12_0(v18530_0_0) => {
                                                Ok::<string, string>(v18530_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v18530_1_0) => {
                                                Err::<string, string>(v18530_1_0.clone())
                                            }
                                        };
                                        let v18538: bool = true;
                                        let _result_unwrap_or_else = v18536.unwrap_or_else(|x| {
                                            //;
                                            let v18540: string = x;
                                            let v18542: bool = true;
                                            v18540
                                        });
                                        let v18544: string = _result_unwrap_or_else;
                                        let v18550: string = Spiral_builder::method17(
                                            Spiral_builder::method17(
                                                Spiral_builder::method17(
                                                    v18544.clone(),
                                                    string("target/spiral_builder"),
                                                ),
                                                string("spiral_builder"),
                                            ),
                                            string("packages"),
                                        );
                                        let v18552: string = Spiral_builder::method8();
                                        let v18564: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v18575: () = {
                                            Spiral_builder::closure10(
                                                v18564.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US39::US39_0)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v18579: Array<string> =
                                            split(v18564.l0.get().clone(), v18552, -1_i32, 0_i32);
                                        let v18582: string = v18579[0_i32].clone();
                                        let v18586: LrcPtr<Spiral_builder::Mut4> =
                                            LrcPtr::new(Spiral_builder::Mut4 {
                                                l0: MutCell::new(Spiral_builder::method10()),
                                            });
                                        let v18597: () = {
                                            Spiral_builder::closure10(
                                                v18586.clone(),
                                                sprintf!(
                                                    "{}",
                                                    sprintf!("{:?}", Spiral_builder::US39::US39_1)
                                                ),
                                                (),
                                            );
                                            ()
                                        };
                                        let v18607: Spiral_builder::US1 =
                                            if startsWith(v18586.l0.get().clone(), v18582, false) {
                                                Spiral_builder::US1::US1_0(string("Rust"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                        let v18613: Spiral_builder::US1 = match &v18607 {
                                            Spiral_builder::US1::US1_0(v18607_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v18607 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US1::US1_0(string("TypeScript")),
                                        };
                                        let v18619: string = Spiral_builder::method17(
                                            Spiral_builder::method17(
                                                v18550,
                                                match &v18613 {
                                                    Spiral_builder::US1::US1_0(v18613_0_0) => {
                                                        match &v18613 {
                                                            Spiral_builder::US1::US1_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                },
                                            ),
                                            v16638.clone(),
                                        );
                                        let v18620: LrcPtr<dyn IDisposable> =
                                            Spiral_builder::method30(v18619.clone());
                                        let v18623: string =
                                            Spiral_builder::method82(Spiral_builder::method17(
                                                v18619.clone(),
                                                sprintf!("{}.fs", string("spiral_builder")),
                                            ));
                                        Spiral_builder::method27(v18623.clone(), v16629);
                                        {
                                            let v18624: List<string> = empty::<string>();
                                            let v18631: string = join(
                                                string("\\n        "),
                                                toArray_1(delay(Func0::new({
                                                    let v18624 = v18624.clone();
                                                    move || {
                                                        map(
                                                            Func1::new({
                                                                let v18624 = v18624.clone();
                                                                move |i_4: i32| {
                                                                    item(i_4, v18624.clone())
                                                                }
                                                            }),
                                                            rangeNumeric(
                                                                0_i32,
                                                                1_i32,
                                                                length_1(v18624.clone()) - 1_i32,
                                                            ),
                                                        )
                                                    }
                                                }))),
                                            );
                                            let v18637: List<string> = singleton(sprintf!(
                                                "<PackageReference Include=\"{}\" Version=\"*\" />",
                                                string("Fable.Core")
                                            ));
                                            let v18645: string = join(
                                                string("\\n        "),
                                                toArray_1(delay(Func0::new({
                                                    let v18637 = v18637.clone();
                                                    move || {
                                                        map(
                                                            Func1::new({
                                                                let v18637 = v18637.clone();
                                                                move |i_5: i32| {
                                                                    item(i_5, v18637.clone())
                                                                }
                                                            }),
                                                            rangeNumeric(
                                                                0_i32,
                                                                1_i32,
                                                                length_1(v18637.clone()) - 1_i32,
                                                            ),
                                                        )
                                                    }
                                                }))),
                                            );
                                            let v18650: string =
                                                Spiral_builder::method82(Spiral_builder::method17(
                                                    v18619.clone(),
                                                    sprintf!("{}.fsproj", string("spiral_builder")),
                                                ));
                                            Spiral_builder::method27(v18650.clone(),
                                                                             append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                        sprintf!("    {}",
                                                                                                                                                                                 v18631)),
                                                                                                                                                                 string("\n")),
                                                                                                                                                          sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                   v18623)),
                                                                                                                                                   string("\n")),
                                                                                                                                            string("</ItemGroup>")),
                                                                                                                                     string("\n")),
                                                                                                                              string("<ItemGroup>")),
                                                                                                                       string("\n")),
                                                                                                                sprintf!("    {}",
                                                                                                                         v18645)),
                                                                                                         string("\n")),
                                                                                                  string("</ItemGroup>")),
                                                                                           string("\n")),
                                                                                    string("</Project>")));
                                            {
                                                let v18750: string = Spiral_builder::method17(
                                                    v18544.clone(),
                                                    string("lib/typescript/fable/fable_modules"),
                                                );
                                                let v18752: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::new(&*v18750.clone());
                                                let v18755: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::filter(v18752, |x| {
                                                        Func1::new(
                                                            move |v_19: async_walkdir::DirEntry| {
                                                                Spiral_builder::closure127((), v_19)
                                                            },
                                                        )(
                                                            x
                                                        )
                                                    });
                                                let v18756 = Spiral_builder::method113();
                                                let v18758 = tokio_stream::StreamExt::filter_map(
                                                    v18755,
                                                    |x| v18756(x),
                                                );
                                                let v18760: std::pin::Pin<
                                                    Box<
                                                        dyn std::future::Future<
                                                            Output = Vec<(string, string)>,
                                                        >,
                                                    >,
                                                > = Box::pin(tokio_stream::StreamExt::collect(
                                                    v18758,
                                                ));
                                                let v18762: Vec<(string, string)> = v18760.await;
                                                let v18764: rayon::vec::IntoIter<(string, string)> =
                                                    rayon::iter::IntoParallelIterator::into_par_iter(
                                                        v18762,
                                                    );
                                                let v18767: rayon::iter::Map<
                                                    rayon::vec::IntoIter<(string, string)>,
                                                    _,
                                                > = rayon::iter::ParallelIterator::map(
                                                    v18764,
                                                    |x| {
                                                        Func1::new(move
                                                                                                                          |arg10_0040_48:
                                                                                                                               (string,
                                                                                                                                string)|
                                                                                                                          Spiral_builder::closure136((),
                                                                                                                                                     arg10_0040_48))(x)
                                                    },
                                                );
                                                let v18769: Vec<(string, string)> =
                                                    rayon::iter::ParallelIterator::collect(v18767);
                                                let v18772: Option<(string, string)> = tryItem(
                                                    0_i32,
                                                    fable_library_rust::NativeArray_::array_from(
                                                        v18769,
                                                    ),
                                                );
                                                let _v18773: LrcPtr<
                                                    MutCell<Option<Spiral_builder::US43>>,
                                                > = refCell(None::<Spiral_builder::US43>);
                                                let v18778: () = {
                                                    Spiral_builder::closure138(
                                                        v18772,
                                                        Func1::new({
                                                            let _v18773 = _v18773.clone();
                                                            move
                                                                                                              |v_20:
                                                                                                                   Option<Spiral_builder::US43>|
                                                                                                              Spiral_builder::closure137(_v18773.clone(),
                                                                                                                                         v_20)
                                                        }),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                let v18795: Spiral_builder::US43 = defaultValue(
                                                    Spiral_builder::US43::US43_1,
                                                    _v18773.get().clone(),
                                                );
                                                let v18801: () = {
                                                    Spiral_builder::closure139(v18795.clone(), ());
                                                    ()
                                                };
                                                match &v18795 {
                                                    Spiral_builder::US43::US43_0(
                                                        v18795_0_0,
                                                        v18795_0_1,
                                                    ) => {
                                                        let v19605: string = match &v18795 {
                                                            Spiral_builder::US43::US43_0(_, x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        };
                                                        Spiral_builder::method98(Spiral_builder::method17(v18750,
                                                                                                                  sprintf!("fable-library-{}.{}",
                                                                                                                           string("ts"),
                                                                                                                           v19605.clone())),
                                                                                         Spiral_builder::method17(v18619.clone(),
                                                                                                                  sprintf!("fable_modules/fable-library-{}.{}",
                                                                                                                           string("ts"),
                                                                                                                           v19605)))
                                                    }
                                                    _ => (),
                                                }
                                                {
                                                    let patternInput_19: (i32, string) =
                                                        Spiral_builder::method99(
                                                            Spiral_builder::US33::US33_1,
                                                            v18619.clone(),
                                                            string("ts"),
                                                            v18650,
                                                            v18530.clone(),
                                                        );
                                                    let v19612: string = patternInput_19.1.clone();
                                                    let v19611: i32 = patternInput_19.0.clone();
                                                    let patternInput_23: (
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                    ) = if v19611 != 0_i32 {
                                                        let v19618: () = {
                                                            Spiral_builder::closure141(
                                                                v19612.clone(),
                                                                v19611,
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        (
                                                            Spiral_builder::US1::US1_0(string(
                                                                "ts",
                                                            )),
                                                            Spiral_builder::US1::US1_1,
                                                            Spiral_builder::US1::US1_0(v19612),
                                                        )
                                                    } else {
                                                        let v20639: bool = true;
                                                        let _vec_map : Vec<_> = v16581.into_iter().map(|x| { //;
                                                                    let v20641:
                                                                            std::string::String =
                                                                        x;
                                                                    let v20643:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v20641);
                                                                    let v20649:
                                                                            string =
                                                                        if contains(v20643.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v20643.clone()
                                                                        } else {
                                                                            sprintf!("\"{}\":\"*\"",
                                                                                     v20643)
                                                                        };
                                                                    let v20651:
                                                                            bool =
                                                                        true; v20649 }).collect::<Vec<_>>();
                                                        let v20653: Vec<string> = _vec_map;
                                                        let v20655:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v20653);
                                                        let v20678:
                                                                            string =
                                                                        append(append(append(append(append(append(append(string("{"),
                                                                                                                         sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                  v16638)),
                                                                                                                  string("  \"dependencies\": {")),
                                                                                                           join(string(",\n"),
                                                                                                                toArray_1(delay(Func0::new({
                                                                                                                                               let v20655
                                                                                                                                                   =
                                                                                                                                                   v20655.clone();
                                                                                                                                               move
                                                                                                                                                   ||
                                                                                                                                                   map(Func1::new({
                                                                                                                                                                      let v20655
                                                                                                                                                                          =
                                                                                                                                                                          v20655.clone();
                                                                                                                                                                      move
                                                                                                                                                                          |i_6:
                                                                                                                                                                               i32|
                                                                                                                                                                          v20655[i_6].clone()
                                                                                                                                                                  }),
                                                                                                                                                       rangeNumeric(0_i32,
                                                                                                                                                                    1_i32,
                                                                                                                                                                    count_2(v20655.clone())
                                                                                                                                                                        -
                                                                                                                                                                        1_i32))
                                                                                                                                           }))))),
                                                                                                    string("  },")),
                                                                                             string("    \"devDependencies\": {")),
                                                                                      string("  },")),
                                                                               string("}"));
                                                        let v20680: string =
                                                            Spiral_builder::method17(
                                                                v18619.clone(),
                                                                string("package.json"),
                                                            );
                                                        let v20683: string =
                                                            Spiral_builder::method17(
                                                                Spiral_builder::method17(
                                                                    v18619.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                        Spiral_builder::method27(v20680, v20678);
                                                        Spiral_builder::method27(
                                                            v20683,
                                                            string(""),
                                                        );
                                                        {
                                                            let v20686: string =
                                                                Spiral_builder::method17(
                                                                    v18619,
                                                                    sprintf!(
                                                                        "{}.{}",
                                                                        string("spiral_builder"),
                                                                        string("ts")
                                                                    ),
                                                                );
                                                            let v20689: () = {
                                                                Spiral_builder::closure143(
                                                                    v20686.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            let v21490: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v20686.clone());
                                                            let v21513: Vec<u8> =
                                                                Spiral_builder::method16(
                                                                    v21490.unwrap(),
                                                                );
                                                            let v21515: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v21513,
                                                            );
                                                            let v21517: std::string::String =
                                                                v21515.unwrap();
                                                            let v21533:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v21517);
                                                            let v21539:
                                                                                bool =
                                                                            contains(v21533.clone(),
                                                                                     string("// spiral_builder.process_typescript"));
                                                            let v21577: string = if v21539 {
                                                                v21533.clone()
                                                            } else {
                                                                let v21544:
                                                                                        string =
                                                                                    replace(v21533,
                                                                                            sprintf!("\"./fable_modules/fable-library-ts.{}/",
                                                                                                     v18795.clone()),
                                                                                            sprintf!("\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                                     v18544,
                                                                                                     v18795.clone()));
                                                                let v21549: Result<
                                                                    regex::Regex,
                                                                    regex::Error,
                                                                > = regex::Regex::new(&string(
                                                                    "\\s\\sdefaultOf\\(\\);",
                                                                ));
                                                                let v21551: regex::Regex =
                                                                    v21549.unwrap();
                                                                let v21552: string =
                                                                    Spiral_builder::method83(
                                                                        v21544,
                                                                    );
                                                                let v21554: std::borrow::Cow<str> =
                                                                    v21551.replace_all(
                                                                        &*v21552,
                                                                        &*string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                    );
                                                                let v21556: std::string::String =
                                                                    String::from(v21554);
                                                                fable_library_rust::String_::fromString(v21556)
                                                            };
                                                            if v21539 == false {
                                                                Spiral_builder::method27(v20686.clone(),
                                                                                                     sprintf!("{}\n\n{}\n",
                                                                                                              v21577.clone(),
                                                                                                              string("// spiral_builder.process_typescript")));
                                                            }
                                                            {
                                                                let v21580: string = sprintf!(
                                                                    "bun run \"{}\"",
                                                                    v20686.clone()
                                                                );
                                                                let v21582: string =
                                                                    Spiral_builder::method3(
                                                                        string("PATH"),
                                                                    );
                                                                let v21615: Spiral_builder::US1 =
                                                                    if v21582.clone() == string("")
                                                                    {
                                                                        Spiral_builder::US1::US1_1
                                                                    } else {
                                                                        Spiral_builder::US1::US1_0(
                                                                            sprintf!(
                                                                                "{}{}{}",
                                                                                string(
                                                                                    "~/.bun/bin"
                                                                                ),
                                                                                if cfg!(windows) {
                                                                                    string(";")
                                                                                } else {
                                                                                    string(":")
                                                                                },
                                                                                v21582
                                                                            ),
                                                                        )
                                                                    };
                                                                let v21630:
                                                                                    Array<(string,
                                                                                           string)> =
                                                                                toArray(Spiral_builder::method116(Spiral_builder::method115(match &v21615
                                                                                                                                                {
                                                                                                                                                Spiral_builder::US1::US1_0(v21615_0_0)
                                                                                                                                                =>
                                                                                                                                                LrcPtr::new(Spiral_builder::UH5::UH5_1(string("PATH"),
                                                                                                                                                                                       match &v21615
                                                                                                                                                                                           {
                                                                                                                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                           =>
                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                           _
                                                                                                                                                                                           =>
                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                       },
                                                                                                                                                                                       LrcPtr::new(Spiral_builder::UH5::UH5_0))),
                                                                                                                                                _
                                                                                                                                                =>
                                                                                                                                                LrcPtr::new(Spiral_builder::UH5::UH5_0),
                                                                                                                                            },
                                                                                                                                            LrcPtr::new(Spiral_builder::UH5::UH5_1(string("TRACE_LEVEL"),
                                                                                                                                                                                   string("Verbose"),
                                                                                                                                                                                   LrcPtr::new(Spiral_builder::UH5::UH5_0)))),
                                                                                                                  empty::<(string,
                                                                                                                           string)>()));
                                                                let v21643:
                                                                                    Result<string,
                                                                                           string> =
                                                                                match &v18530
                                                                                    {
                                                                                    Spiral_builder::US12::US12_0(v18530_0_0)
                                                                                    =>
                                                                                    Ok::<string,
                                                                                         string>(v18530_0_0.clone()),
                                                                                    Spiral_builder::US12::US12_1(v18530_1_0)
                                                                                    =>
                                                                                    Err::<string,
                                                                                          string>(v18530_1_0.clone()),
                                                                                };
                                                                let patternInput_20:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral_builder::method42(v21580.clone(),
                                                                                                         None::<CancellationToken>,
                                                                                                         v21630.clone(),
                                                                                                         None::<Func1<(i32,
                                                                                                                       string,
                                                                                                                       bool),
                                                                                                                      Arc<Async<()>>>>,
                                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                      ()>>,
                                                                                                         true,
                                                                                                         v21643.ok());
                                                                let v21648: string =
                                                                    patternInput_20.1.clone();
                                                                let v21647: i32 =
                                                                    patternInput_20.0.clone();
                                                                let v21649: i32 =
                                                                    count_2(v21630.clone());
                                                                let v21650: Array<string> =
                                                                    new_init(&string(""), v21649);
                                                                let v21651: LrcPtr<
                                                                    Spiral_builder::Mut5,
                                                                > = LrcPtr::new(
                                                                    Spiral_builder::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    },
                                                                );
                                                                while Spiral_builder::method45(
                                                                    v21649,
                                                                    v21651.clone(),
                                                                ) {
                                                                    let v21653: i32 =
                                                                        v21651.l0.get().clone();
                                                                    let patternInput_21: (
                                                                        string,
                                                                        string,
                                                                    ) = v21630[v21653].clone();
                                                                    let v21656: string = sprintf!(
                                                                        "$env:{}=\'\'{}\'\'",
                                                                        patternInput_21.0.clone(),
                                                                        patternInput_21.1.clone()
                                                                    );
                                                                    v21650.get_mut()
                                                                        [v21653 as usize] = v21656;
                                                                    {
                                                                        let v21657: i32 =
                                                                            v21653 + 1_i32;
                                                                        v21651.l0.set(v21657);
                                                                        ()
                                                                    }
                                                                }
                                                                {
                                                                    let v21667: string = sprintf!(
                                                                        "pwsh -c \'{}; {}\'",
                                                                        join(
                                                                            string(";"),
                                                                            toArray_1(ofArray_1(
                                                                                v21650.clone()
                                                                            ))
                                                                        ),
                                                                        v21580
                                                                    );
                                                                    let patternInput_22: (
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                    ) = if v21647 == 0_i32 {
                                                                        let result_2:
                                                                                                LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                            refCell(Spiral_builder::US1::US1_1);
                                                                        try_catch(||
                                                                                                      result_2.set(Spiral_builder::closure85((),
                                                                                                                                             Spiral_builder::closure145(v21648.clone(),
                                                                                                                                                                        ()))),
                                                                                                  |ex_2:
                                                                                                       LrcPtr<Exception>|
                                                                                                      result_2.set(Spiral_builder::closure146(v20686.clone(),
                                                                                                                                              v21648.clone(),
                                                                                                                                              v21667.clone(),
                                                                                                                                              ex_2.clone())));
                                                                        {
                                                                            let v21673:
                                                                                                    Spiral_builder::US1 =
                                                                                                result_2.get().clone();
                                                                            let v21683:
                                                                                                    Option<string> =
                                                                                                match &v21673
                                                                                                    {
                                                                                                    Spiral_builder::US1::US1_0(v21673_0_0)
                                                                                                    =>
                                                                                                    Some(match &v21673
                                                                                                             {
                                                                                                             Spiral_builder::US1::US1_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         }),
                                                                                                    _
                                                                                                    =>
                                                                                                    None::<string>,
                                                                                                };
                                                                            (Spiral_builder::US1::US1_0(string("ts")),
                                                                                             Spiral_builder::US1::US1_0(v21577),
                                                                                             Spiral_builder::US1::US1_0(v21683.unwrap()))
                                                                        }
                                                                    } else {
                                                                        let v21691: () = {
                                                                            Spiral_builder::closure149(v20686,
                                                                                                                           v21648,
                                                                                                                           v21647,
                                                                                                                           v21667,
                                                                                                                           ());
                                                                            ()
                                                                        };
                                                                        (Spiral_builder::US1::US1_0(string("ts")),
                                                                                         Spiral_builder::US1::US1_1,
                                                                                         Spiral_builder::US1::US1_1)
                                                                    };
                                                                    (
                                                                        patternInput_22.0.clone(),
                                                                        patternInput_22.1.clone(),
                                                                        patternInput_22.2.clone(),
                                                                    )
                                                                }
                                                            }
                                                        }
                                                    };
                                                    (
                                                        patternInput_23.0.clone(),
                                                        patternInput_23.1.clone(),
                                                        patternInput_23.2.clone(),
                                                    )
                                                }
                                            }
                                        }
                                    } else {
                                        let patternInput_29: (
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                        ) = if fable_library_rust::String_::fromString(v33.clone())
                                            == string("python")
                                        {
                                            let v22783: string = Spiral_builder::method76();
                                            let v22785: &str = &*v22783;
                                            let v22787: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v34.clone(), v22785)
                                                    .cloned();
                                            let _v22788: LrcPtr<
                                                MutCell<Option<Spiral_builder::US5>>,
                                            > = refCell(None::<Spiral_builder::US5>);
                                            let v22793: () = {
                                                Spiral_builder::closure18(
                                                    v22787,
                                                    Func1::new({
                                                        let _v22788 = _v22788.clone();
                                                        move |v_23: Option<Spiral_builder::US5>| {
                                                            Spiral_builder::closure17(
                                                                _v22788.clone(),
                                                                v_23,
                                                            )
                                                        }
                                                    }),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v22808: Spiral_builder::US5 = defaultValue(
                                                Spiral_builder::US5::US5_1,
                                                _v22788.get().clone(),
                                            );
                                            let v22815: std::string::String = match &v22808 {
                                                Spiral_builder::US5::US5_0(v22808_0_0) => {
                                                    match &v22808 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v22817: string =
                                                fable_library_rust::String_::fromString(v22815);
                                            let v22818: string = Spiral_builder::method15();
                                            let v22820: &str = &*v22818;
                                            let v22822: Option<Vec<std::string::String>> =
                                                clap::ArgMatches::get_many(&v34.clone(), v22820)
                                                    .map(|x| x.cloned().into_iter().collect());
                                            let _v22823: LrcPtr<
                                                MutCell<Option<Spiral_builder::US9>>,
                                            > = refCell(None::<Spiral_builder::US9>);
                                            let v22828: () = {
                                                Spiral_builder::closure20(
                                                    v22822,
                                                    Func1::new({
                                                        let _v22823 = _v22823.clone();
                                                        move |v_24: Option<Spiral_builder::US9>| {
                                                            Spiral_builder::closure19(
                                                                _v22823.clone(),
                                                                v_24,
                                                            )
                                                        }
                                                    }),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v22843: Spiral_builder::US9 = defaultValue(
                                                Spiral_builder::US9::US9_1,
                                                _v22823.get().clone(),
                                            );
                                            let v22849: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v22852: Vec<std::string::String> = match &v22843 {
                                                Spiral_builder::US9::US9_0(v22843_0_0) => {
                                                    match &v22843 {
                                                        Spiral_builder::US9::US9_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => v22849,
                                            };
                                            let v22853: bool =
                                                if let Spiral_builder::US0::US0_0 = &v0_1 {
                                                    true
                                                } else {
                                                    false
                                                };
                                            let v22857: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v22817);
                                            let v22880: Vec<u8> =
                                                Spiral_builder::method16(v22857.unwrap());
                                            let v22882: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v22880);
                                            let v22884: std::string::String = v22882.unwrap();
                                            let v22900: string =
                                                fable_library_rust::String_::fromString(v22884);
                                            let v22909: string = Spiral_builder::method91(
                                                sprintf!("{:?}", (string("py"), v22900.clone())),
                                            );
                                            let v22914:
                                                                Spiral_builder::US12 =
                                                            Spiral_builder::method20(Spiral_builder::method17(string("polyglot"),
                                                                                                              string(".devcontainer")),
                                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                            let v23844: Spiral_builder::US1 = match &v22914 {
                                                Spiral_builder::US12::US12_0(v22914_0_0) => {
                                                    Spiral_builder::US1::US1_0(v22914_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v22914_1_0) => {
                                                    let v22920: () = {
                                                        Spiral_builder::closure22(
                                                            v22914_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            };
                                            let v24781: Spiral_builder::US1 = match &v23844 {
                                                Spiral_builder::US1::US1_0(v23844_0_0) => {
                                                    Spiral_builder::US1::US1_0(match &v23844 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                }
                                                _ => {
                                                    let v23847: string = Spiral_builder::method25();
                                                    let v23849: Spiral_builder::US12 =
                                                        Spiral_builder::method20(
                                                            Spiral_builder::method17(
                                                                string("polyglot"),
                                                                string(".devcontainer"),
                                                            ),
                                                            v23847,
                                                        );
                                                    match &v23849 {
                                                        Spiral_builder::US12::US12_0(
                                                            v23849_0_0,
                                                        ) => Spiral_builder::US1::US1_0(
                                                            v23849_0_0.clone(),
                                                        ),
                                                        Spiral_builder::US12::US12_1(
                                                            v23849_1_0,
                                                        ) => {
                                                            let v23855: () = {
                                                                Spiral_builder::closure22(
                                                                    v23849_1_0.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            Spiral_builder::US1::US1_1
                                                        }
                                                    }
                                                }
                                            };
                                            let v24786: string = Spiral_builder::method17(
                                                match &v24781 {
                                                    Spiral_builder::US1::US1_0(v24781_0_0) => {
                                                        match &v24781 {
                                                            Spiral_builder::US1::US1_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                },
                                                string("polyglot"),
                                            );
                                            let v24789: string =
                                                toLower(Spiral_builder::method25());
                                            let v24793: string = toLower(v24786);
                                            let v24801: Spiral_builder::US12 =
                                                if startsWith(v24789, v24793.clone(), false) {
                                                    Spiral_builder::US12::US12_1(v24793.clone())
                                                } else {
                                                    Spiral_builder::US12::US12_0(v24793)
                                                };
                                            let v24807: Result<string, string> = match &v24801 {
                                                Spiral_builder::US12::US12_0(v24801_0_0) => {
                                                    Ok::<string, string>(v24801_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v24801_1_0) => {
                                                    Err::<string, string>(v24801_1_0.clone())
                                                }
                                            };
                                            let v24809: bool = true;
                                            let _result_unwrap_or_else =
                                                v24807.unwrap_or_else(|x| {
                                                    //;
                                                    let v24811: string = x;
                                                    let v24813: bool = true;
                                                    v24811
                                                });
                                            let v24815: string = _result_unwrap_or_else;
                                            let v24821: string = Spiral_builder::method17(
                                                Spiral_builder::method17(
                                                    Spiral_builder::method17(
                                                        v24815.clone(),
                                                        string("target/spiral_builder"),
                                                    ),
                                                    string("spiral_builder"),
                                                ),
                                                string("packages"),
                                            );
                                            let v24823: string = Spiral_builder::method8();
                                            let v24835: LrcPtr<Spiral_builder::Mut4> =
                                                LrcPtr::new(Spiral_builder::Mut4 {
                                                    l0: MutCell::new(Spiral_builder::method10()),
                                                });
                                            let v24846: () = {
                                                Spiral_builder::closure10(
                                                    v24835.clone(),
                                                    sprintf!(
                                                        "{}",
                                                        sprintf!(
                                                            "{:?}",
                                                            Spiral_builder::US39::US39_0
                                                        )
                                                    ),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v24850: Array<string> = split(
                                                v24835.l0.get().clone(),
                                                v24823,
                                                -1_i32,
                                                0_i32,
                                            );
                                            let v24853: string = v24850[0_i32].clone();
                                            let v24857: LrcPtr<Spiral_builder::Mut4> =
                                                LrcPtr::new(Spiral_builder::Mut4 {
                                                    l0: MutCell::new(Spiral_builder::method10()),
                                                });
                                            let v24868: () = {
                                                Spiral_builder::closure10(
                                                    v24857.clone(),
                                                    sprintf!(
                                                        "{}",
                                                        sprintf!(
                                                            "{:?}",
                                                            Spiral_builder::US39::US39_2
                                                        )
                                                    ),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v24878: Spiral_builder::US1 = if startsWith(
                                                v24857.l0.get().clone(),
                                                v24853,
                                                false,
                                            ) {
                                                Spiral_builder::US1::US1_0(string("Rust"))
                                            } else {
                                                Spiral_builder::US1::US1_1
                                            };
                                            let v24945: Spiral_builder::US1 = match &v24878 {
                                                Spiral_builder::US1::US1_0(v24878_0_0) => {
                                                    Spiral_builder::US1::US1_0(match &v24878 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                }
                                                _ => {
                                                    let v24882: string = Spiral_builder::method8();
                                                    let v24894: LrcPtr<Spiral_builder::Mut4> =
                                                        LrcPtr::new(Spiral_builder::Mut4 {
                                                            l0: MutCell::new(
                                                                Spiral_builder::method10(),
                                                            ),
                                                        });
                                                    let v24905: () = {
                                                        Spiral_builder::closure10(
                                                            v24894.clone(),
                                                            sprintf!(
                                                                "{}",
                                                                sprintf!(
                                                                    "{:?}",
                                                                    Spiral_builder::US39::US39_1
                                                                )
                                                            ),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v24909: Array<string> = split(
                                                        v24894.l0.get().clone(),
                                                        v24882,
                                                        -1_i32,
                                                        0_i32,
                                                    );
                                                    let v24912: string = v24909[0_i32].clone();
                                                    let v24916: LrcPtr<Spiral_builder::Mut4> =
                                                        LrcPtr::new(Spiral_builder::Mut4 {
                                                            l0: MutCell::new(
                                                                Spiral_builder::method10(),
                                                            ),
                                                        });
                                                    let v24927: () = {
                                                        Spiral_builder::closure10(
                                                            v24916.clone(),
                                                            sprintf!(
                                                                "{}",
                                                                sprintf!(
                                                                    "{:?}",
                                                                    Spiral_builder::US39::US39_2
                                                                )
                                                            ),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v24937: Spiral_builder::US1 = if startsWith(
                                                        v24916.l0.get().clone(),
                                                        v24912,
                                                        false,
                                                    ) {
                                                        Spiral_builder::US1::US1_0(string(
                                                            "TypeScript",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US1::US1_1
                                                    };
                                                    match &v24937 {
                                                        Spiral_builder::US1::US1_0(v24937_0_0) => {
                                                            Spiral_builder::US1::US1_0(
                                                                match &v24937 {
                                                                    Spiral_builder::US1::US1_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            )
                                                        }
                                                        _ => Spiral_builder::US1::US1_0(string(
                                                            "Python",
                                                        )),
                                                    }
                                                }
                                            };
                                            let v24951: string = Spiral_builder::method17(
                                                Spiral_builder::method17(
                                                    v24821,
                                                    match &v24945 {
                                                        Spiral_builder::US1::US1_0(v24945_0_0) => {
                                                            match &v24945 {
                                                                Spiral_builder::US1::US1_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            }
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    },
                                                ),
                                                v22909.clone(),
                                            );
                                            let v24952: LrcPtr<dyn IDisposable> =
                                                Spiral_builder::method30(v24951.clone());
                                            let v24955: string =
                                                Spiral_builder::method82(Spiral_builder::method17(
                                                    v24951.clone(),
                                                    sprintf!("{}.fs", string("spiral_builder")),
                                                ));
                                            Spiral_builder::method27(v24955.clone(), v22900);
                                            {
                                                let v24956: List<string> = empty::<string>();
                                                let v24963: string = join(
                                                    string("\\n        "),
                                                    toArray_1(delay(Func0::new({
                                                        let v24956 = v24956.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v24956 = v24956.clone();
                                                                    move |i_7: i32| {
                                                                        item(i_7, v24956.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v24956.clone())
                                                                        - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                );
                                                let v24969:
                                                                    List<string> =
                                                                singleton(sprintf!("<PackageReference Include=\"{}\" Version=\"*\" />",
                                                                                   string("Fable.Core")));
                                                let v24977: string = join(
                                                    string("\\n        "),
                                                    toArray_1(delay(Func0::new({
                                                        let v24969 = v24969.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v24969 = v24969.clone();
                                                                    move |i_8: i32| {
                                                                        item(i_8, v24969.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v24969.clone())
                                                                        - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                );
                                                let v24982: string = Spiral_builder::method82(
                                                    Spiral_builder::method17(
                                                        v24951.clone(),
                                                        sprintf!(
                                                            "{}.fsproj",
                                                            string("spiral_builder")
                                                        ),
                                                    ),
                                                );
                                                Spiral_builder::method27(v24982.clone(),
                                                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                                sprintf!("    {}",
                                                                                                                                                                                         v24963)),
                                                                                                                                                                         string("\n")),
                                                                                                                                                                  sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                           v24955)),
                                                                                                                                                           string("\n")),
                                                                                                                                                    string("</ItemGroup>")),
                                                                                                                                             string("\n")),
                                                                                                                                      string("<ItemGroup>")),
                                                                                                                               string("\n")),
                                                                                                                        sprintf!("    {}",
                                                                                                                                 v24977)),
                                                                                                                 string("\n")),
                                                                                                          string("</ItemGroup>")),
                                                                                                   string("\n")),
                                                                                            string("</Project>")));
                                                Spiral_builder::method98(
                                                    Spiral_builder::method17(
                                                        Spiral_builder::method17(
                                                            v24815,
                                                            string(
                                                                "lib/python/fable/fable_modules",
                                                            ),
                                                        ),
                                                        string("fable_library"),
                                                    ),
                                                    Spiral_builder::method17(
                                                        v24951.clone(),
                                                        string("fable_modules/fable_library"),
                                                    ),
                                                );
                                                {
                                                    let patternInput_24: (i32, string) =
                                                        Spiral_builder::method99(
                                                            Spiral_builder::US33::US33_1,
                                                            v24951.clone(),
                                                            string("py"),
                                                            v24982,
                                                            v24801.clone(),
                                                        );
                                                    let v25089: string = patternInput_24.1.clone();
                                                    let v25088: i32 = patternInput_24.0.clone();
                                                    let patternInput_28: (
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                    ) = if v25088 != 0_i32 {
                                                        let v25095: () = {
                                                            Spiral_builder::closure151(
                                                                v25089.clone(),
                                                                v25088,
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        (
                                                            Spiral_builder::US1::US1_0(string(
                                                                "py",
                                                            )),
                                                            Spiral_builder::US1::US1_1,
                                                            Spiral_builder::US1::US1_0(v25089),
                                                        )
                                                    } else {
                                                        let v26116: bool = true;
                                                        let _vec_map : Vec<_> = v22852.into_iter().map(|x| { //;
                                                                        let v26118:
                                                                                std::string::String =
                                                                            x;
                                                                        let v26120:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v26118);
                                                                        let v26126:
                                                                                string =
                                                                            if contains(v26120.clone(),
                                                                                        string("="))
                                                                               {
                                                                                v26120.clone()
                                                                            } else {
                                                                                sprintf!("\"{}\":\"*\"",
                                                                                         v26120)
                                                                            };
                                                                        let v26128:
                                                                                bool =
                                                                            true; v26126 }).collect::<Vec<_>>();
                                                        let v26130: Vec<string> = _vec_map;
                                                        let v26132:
                                                                                Array<string> =
                                                                            fable_library_rust::NativeArray_::array_from(v26130);
                                                        let v26155:
                                                                                string =
                                                                            append(append(append(append(append(append(append(string("{"),
                                                                                                                             sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                      v22909)),
                                                                                                                      string("  \"dependencies\": {")),
                                                                                                               join(string(",\n"),
                                                                                                                    toArray_1(delay(Func0::new({
                                                                                                                                                   let v26132
                                                                                                                                                       =
                                                                                                                                                       v26132.clone();
                                                                                                                                                   move
                                                                                                                                                       ||
                                                                                                                                                       map(Func1::new({
                                                                                                                                                                          let v26132
                                                                                                                                                                              =
                                                                                                                                                                              v26132.clone();
                                                                                                                                                                          move
                                                                                                                                                                              |i_9:
                                                                                                                                                                                   i32|
                                                                                                                                                                              v26132[i_9].clone()
                                                                                                                                                                      }),
                                                                                                                                                           rangeNumeric(0_i32,
                                                                                                                                                                        1_i32,
                                                                                                                                                                        count_2(v26132.clone())
                                                                                                                                                                            -
                                                                                                                                                                            1_i32))
                                                                                                                                               }))))),
                                                                                                        string("  },")),
                                                                                                 string("    \"devDependencies\": {")),
                                                                                          string("  },")),
                                                                                   string("}"));
                                                        let v26157: string =
                                                            Spiral_builder::method17(
                                                                v24951.clone(),
                                                                string("package.json"),
                                                            );
                                                        let v26160: string =
                                                            Spiral_builder::method17(
                                                                Spiral_builder::method17(
                                                                    v24951.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                        Spiral_builder::method27(v26157, v26155);
                                                        Spiral_builder::method27(
                                                            v26160,
                                                            string(""),
                                                        );
                                                        {
                                                            let v26163: string =
                                                                Spiral_builder::method17(
                                                                    v24951,
                                                                    sprintf!(
                                                                        "{}.{}",
                                                                        string("spiral_builder"),
                                                                        string("py")
                                                                    ),
                                                                );
                                                            let v26166: () = {
                                                                Spiral_builder::closure153(
                                                                    v26163.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            let v26967: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v26163.clone());
                                                            let v26990: Vec<u8> =
                                                                Spiral_builder::method16(
                                                                    v26967.unwrap(),
                                                                );
                                                            let v26992: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v26990,
                                                            );
                                                            let v26994: std::string::String =
                                                                v26992.unwrap();
                                                            let v27010:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v26994);
                                                            let v27016:
                                                                                    bool =
                                                                                contains(v27010.clone(),
                                                                                         string("# spiral_builder.process_python"));
                                                            let v27057: string = if v27016 {
                                                                v27010.clone()
                                                            } else {
                                                                let v27024: string = replace(
                                                                    v27010,
                                                                    append(
                                                                        string("),)"),
                                                                        ";".into(),
                                                                    ),
                                                                    string("));"),
                                                                );
                                                                let v27029: Result<
                                                                    regex::Regex,
                                                                    regex::Error,
                                                                > = regex::Regex::new(&string(
                                                                    "\\s\\sdefaultOf\\(\\);",
                                                                ));
                                                                let v27031: regex::Regex =
                                                                    v27029.unwrap();
                                                                let v27032: string =
                                                                    Spiral_builder::method83(
                                                                        v27024,
                                                                    );
                                                                let v27034: std::borrow::Cow<str> =
                                                                    v27031.replace_all(
                                                                        &*v27032,
                                                                        &*string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                    );
                                                                let v27036: std::string::String =
                                                                    String::from(v27034);
                                                                fable_library_rust::String_::fromString(v27036)
                                                            };
                                                            if v27016 == false {
                                                                Spiral_builder::method27(v26163.clone(),
                                                                                                         sprintf!("{}\n\n{}\n",
                                                                                                                  v27057.clone(),
                                                                                                                  string("# spiral_builder.process_python")));
                                                            }
                                                            {
                                                                let v27060: string = sprintf!(
                                                                    "python \"{}\"",
                                                                    v26163.clone()
                                                                );
                                                                let v27063: Array<(
                                                                    string,
                                                                    string,
                                                                )> = new_array(&[(
                                                                    string("TRACE_LEVEL"),
                                                                    string("Verbose"),
                                                                )]);
                                                                let v27074:
                                                                                        Result<string,
                                                                                               string> =
                                                                                    match &v24801
                                                                                        {
                                                                                        Spiral_builder::US12::US12_0(v24801_0_0)
                                                                                        =>
                                                                                        Ok::<string,
                                                                                             string>(v24801_0_0.clone()),
                                                                                        Spiral_builder::US12::US12_1(v24801_1_0)
                                                                                        =>
                                                                                        Err::<string,
                                                                                              string>(v24801_1_0.clone()),
                                                                                    };
                                                                let patternInput_25:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral_builder::method42(v27060.clone(),
                                                                                                             None::<CancellationToken>,
                                                                                                             v27063.clone(),
                                                                                                             None::<Func1<(i32,
                                                                                                                           string,
                                                                                                                           bool),
                                                                                                                          Arc<Async<()>>>>,
                                                                                                             None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                          ()>>,
                                                                                                             true,
                                                                                                             v27074.ok());
                                                                let v27079: string =
                                                                    patternInput_25.1.clone();
                                                                let v27078: i32 =
                                                                    patternInput_25.0.clone();
                                                                let v27080: i32 =
                                                                    count_2(v27063.clone());
                                                                let v27081: Array<string> =
                                                                    new_init(&string(""), v27080);
                                                                let v27082: LrcPtr<
                                                                    Spiral_builder::Mut5,
                                                                > = LrcPtr::new(
                                                                    Spiral_builder::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    },
                                                                );
                                                                while Spiral_builder::method45(
                                                                    v27080,
                                                                    v27082.clone(),
                                                                ) {
                                                                    let v27084: i32 =
                                                                        v27082.l0.get().clone();
                                                                    let patternInput_26: (
                                                                        string,
                                                                        string,
                                                                    ) = v27063[v27084].clone();
                                                                    let v27087: string = sprintf!(
                                                                        "$env:{}=\'\'{}\'\'",
                                                                        patternInput_26.0.clone(),
                                                                        patternInput_26.1.clone()
                                                                    );
                                                                    v27081.get_mut()
                                                                        [v27084 as usize] = v27087;
                                                                    {
                                                                        let v27088: i32 =
                                                                            v27084 + 1_i32;
                                                                        v27082.l0.set(v27088);
                                                                        ()
                                                                    }
                                                                }
                                                                {
                                                                    let v27098: string = sprintf!(
                                                                        "pwsh -c \'{}; {}\'",
                                                                        join(
                                                                            string(";"),
                                                                            toArray_1(ofArray_1(
                                                                                v27081.clone()
                                                                            ))
                                                                        ),
                                                                        v27060
                                                                    );
                                                                    let patternInput_27: (
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                    ) = if v27078 == 0_i32 {
                                                                        let result_3:
                                                                                                    LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                                refCell(Spiral_builder::US1::US1_1);
                                                                        try_catch(||
                                                                                                          result_3.set(Spiral_builder::closure85((),
                                                                                                                                                 Spiral_builder::closure155(v27079.clone(),
                                                                                                                                                                            ()))),
                                                                                                      |ex_3:
                                                                                                           LrcPtr<Exception>|
                                                                                                          result_3.set(Spiral_builder::closure156(v26163.clone(),
                                                                                                                                                  v27079.clone(),
                                                                                                                                                  v27098.clone(),
                                                                                                                                                  ex_3.clone())));
                                                                        {
                                                                            let v27104:
                                                                                                        Spiral_builder::US1 =
                                                                                                    result_3.get().clone();
                                                                            let v27114:
                                                                                                        Option<string> =
                                                                                                    match &v27104
                                                                                                        {
                                                                                                        Spiral_builder::US1::US1_0(v27104_0_0)
                                                                                                        =>
                                                                                                        Some(match &v27104
                                                                                                                 {
                                                                                                                 Spiral_builder::US1::US1_0(x)
                                                                                                                 =>
                                                                                                                 x.clone(),
                                                                                                                 _
                                                                                                                 =>
                                                                                                                 unreachable!(),
                                                                                                             }),
                                                                                                        _
                                                                                                        =>
                                                                                                        None::<string>,
                                                                                                    };
                                                                            (Spiral_builder::US1::US1_0(string("py")),
                                                                                                 Spiral_builder::US1::US1_0(v27057),
                                                                                                 Spiral_builder::US1::US1_0(v27114.unwrap()))
                                                                        }
                                                                    } else {
                                                                        let v27122: () = {
                                                                            Spiral_builder::closure159(v26163,
                                                                                                                               v27079,
                                                                                                                               v27078,
                                                                                                                               v27098,
                                                                                                                               ());
                                                                            ()
                                                                        };
                                                                        (Spiral_builder::US1::US1_0(string("py")),
                                                                                             Spiral_builder::US1::US1_1,
                                                                                             Spiral_builder::US1::US1_1)
                                                                    };
                                                                    (
                                                                        patternInput_27.0.clone(),
                                                                        patternInput_27.1.clone(),
                                                                        patternInput_27.2.clone(),
                                                                    )
                                                                }
                                                            }
                                                        }
                                                    };
                                                    (
                                                        patternInput_28.0.clone(),
                                                        patternInput_28.1.clone(),
                                                        patternInput_28.2.clone(),
                                                    )
                                                }
                                            }
                                        } else {
                                            let v28213: () = {
                                                Spiral_builder::closure161(v34, v33, ());
                                                ()
                                            };
                                            (
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                            )
                                        };
                                        (
                                            patternInput_29.0.clone(),
                                            patternInput_29.1.clone(),
                                            patternInput_29.2.clone(),
                                        )
                                    };
                                    (
                                        patternInput_30.0.clone(),
                                        patternInput_30.1.clone(),
                                        patternInput_30.2.clone(),
                                    )
                                };
                                let v29112: Spiral_builder::US1 = patternInput_31.2.clone();
                                let v29111: Spiral_builder::US1 = patternInput_31.1.clone();
                                let v29110: Spiral_builder::US1 = patternInput_31.0.clone();
                                new_array(&[
                                    (
                                        string("extension"),
                                        match &v29110 {
                                            Spiral_builder::US1::US1_0(v29110_0_0) => match &v29110
                                            {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v29111 {
                                            Spiral_builder::US1::US1_0(v29111_0_0) => match &v29111
                                            {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v29112 {
                                            Spiral_builder::US1::US1_0(v29112_0_0) => match &v29112
                                            {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                ])
                            }
                        }
                    }
                } else {
                    new_array(&[
                        (string("extension"), string("")),
                        (string("code"), string("")),
                        (string("output"), string("")),
                    ])
                };
                let v29139: Vec<(string, string)> = v29137.to_vec();
                let v29142: Vec<LrcPtr<(std::string::String, std::string::String)>> = v29139
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |arg10_0040_68: (string, string)| {
                            Spiral_builder::closure163((), arg10_0040_68)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v29143: string =
                string("std::collections::BTreeMap::from_iter(v29142.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                let v29144: std::collections::BTreeMap<std::string::String, std::string::String> =
                    std::collections::BTreeMap::from_iter(
                        v29142
                            .iter()
                            .map(|x| x.as_ref())
                            .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                    );
                let v29146: Result<std::string::String, serde_json::Error> =
                    serde_json::to_string(&v29144);
                let v29147 = Spiral_builder::method117();
                let v29149: Result<std::string::String, string> = v29146.map_err(|x| v29147(x));
                let v29151: bool = true;
                let _result_map_ = v29149.map(|x| {
                    //;
                    let v29153: std::string::String = x;
                    let v29155: string = fable_library_rust::String_::fromString(v29153);
                    let v29157: bool = true;
                    v29155
                });
                let v29160: Result<string, string> = Spiral_builder::method118(_result_map_);
                let v29164: string = string("true; v29160 });  // rust.fix_closure\'");
                let v29165: bool = true;
                v29160
            }); // rust.fix_closure';
            let v29167 = __future_init;
            v29167
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            let v3: () = {
                Spiral_builder::closure2((), ());
                ()
            };
            let v19: LrcPtr<Spiral_builder::Mut3> =
                (getValue(Spiral_builder::State::trace_state().get().clone()))
                    .3
                    .clone();
            let v33: () = {
                Spiral_builder::closure6(v0_1, ());
                ()
            };
            let v835: clap::Command = Spiral_builder::method0();
            let v837: clap::ArgMatches = clap::Command::get_matches(v835);
            let v839: std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> =
                Spiral_builder::method12(v19.l0.get().clone(), v837);
            let v841 = tokio::runtime::Builder::new_multi_thread()
                .enable_all()
                .build()
                .unwrap();
            let v843: Result<string, string> = v841.handle().block_on(v839);
            let v845: string = v843.unwrap();
            if if let Spiral_builder::US0::US0_2 = &v19.l0.get().clone() {
                true
            } else {
                false
            } {
                let v850: () = {
                    Spiral_builder::closure13(v845, ());
                    ()
                };
                ()
            }
            0_i32
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral_builder::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral_builder::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral_builder::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral_builder::v1())(args)
        }
    }
}
pub use module_7e2cd9e0::*;
#[path = "../../../lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
#[path = "../../../lib/spiral/async_.rs"]
mod module_67c461a2;
pub use module_67c461a2::*;
#[path = "../../../lib/spiral/common.rs"]
mod module_181b15d6;
pub use module_181b15d6::*;
#[path = "../../../lib/spiral/crypto.rs"]
mod module_90d9c778;
pub use module_90d9c778::*;
#[path = "../../../lib/spiral/date_time.rs"]
mod module_e43a8385;
pub use module_e43a8385::*;
#[path = "../../../lib/spiral/file_system.rs"]
mod module_a7db9b47;
pub use module_a7db9b47::*;
#[path = "../../../lib/spiral/lib.rs"]
mod module_98e448fc;
pub use module_98e448fc::*;
#[path = "../../../lib/spiral/networking.rs"]
mod module_268024e5;
pub use module_268024e5::*;
#[path = "../../../lib/spiral/platform.rs"]
mod module_7d8ad484;
pub use module_7d8ad484::*;
#[path = "../../../lib/spiral/runtime.rs"]
mod module_485aae07;
pub use module_485aae07::*;
#[path = "../../../lib/spiral/sm.rs"]
mod module_582b4305;
pub use module_582b4305::*;
#[path = "../../../lib/spiral/threading.rs"]
mod module_d5afb6f5;
pub use module_d5afb6f5::*;
#[path = "../../../lib/spiral/trace.rs"]
mod module_9e77af3a;
pub use module_9e77af3a::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral_builder::main(array_from(args));
}
